
2023D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011818  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08011ab8  08011ab8  00012ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011ef0  08011ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08011ef8  08011ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011f00  08011f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000006c0  24000000  08011f04  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00000800  240006c0  080125c4  000136c0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00002620  24000ec0  08012dc4  00013ec0  2**3
                  ALLOC
  9 ._user_heap_stack 00004000  240034e0  08012dc4  000144e0  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00013ec0  2**0
                  CONTENTS, READONLY
 11 .debug_info   000229cf  00000000  00000000  00013eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004101  00000000  00000000  000368bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000019c0  00000000  00000000  0003a9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000140b  00000000  00000000  0003c380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000067df  00000000  00000000  0003d78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024318  00000000  00000000  00043f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017b522  00000000  00000000  00068282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001e37a4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007ebc  00000000  00000000  001e37e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000058  00000000  00000000  001eb6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000ec0 	.word	0x24000ec0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011aa0 	.word	0x08011aa0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000ec4 	.word	0x24000ec4
 80002dc:	08011aa0 	.word	0x08011aa0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]
 80006a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006a4:	4b38      	ldr	r3, [pc, #224]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006a6:	4a39      	ldr	r2, [pc, #228]	@ (800078c <MX_ADC1_Init+0x10c>)
 80006a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006aa:	4b37      	ldr	r3, [pc, #220]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006b0:	4b35      	ldr	r3, [pc, #212]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006b6:	4b34      	ldr	r3, [pc, #208]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006bc:	4b32      	ldr	r3, [pc, #200]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006be:	2204      	movs	r2, #4
 80006c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006c2:	4b31      	ldr	r3, [pc, #196]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 80006ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006d0:	2202      	movs	r2, #2
 80006d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 80006da:	4b2b      	ldr	r3, [pc, #172]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006dc:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006e2:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80006ea:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006ec:	2203      	movs	r2, #3
 80006ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f0:	4b25      	ldr	r3, [pc, #148]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f6:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <MX_ADC1_Init+0x108>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	4820      	ldr	r0, [pc, #128]	@ (8000788 <MX_ADC1_Init+0x108>)
 8000706:	f001 fbf7 	bl	8001ef8 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000710:	f000 fd92 	bl	8001238 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	481a      	ldr	r0, [pc, #104]	@ (8000788 <MX_ADC1_Init+0x108>)
 8000720:	f002 ff38 	bl	8003594 <HAL_ADCEx_MultiModeConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800072a:	f000 fd85 	bl	8001238 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ADC1_Init+0x110>)
 8000730:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000732:	2306      	movs	r3, #6
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000736:	2303      	movs	r3, #3
 8000738:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800073e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000740:	2304      	movs	r3, #4
 8000742:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074c:	463b      	mov	r3, r7
 800074e:	4619      	mov	r1, r3
 8000750:	480d      	ldr	r0, [pc, #52]	@ (8000788 <MX_ADC1_Init+0x108>)
 8000752:	f001 ffcb 	bl	80026ec <HAL_ADC_ConfigChannel>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800075c:	f000 fd6c 	bl	8001238 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_ADC1_Init+0x114>)
 8000762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000764:	230c      	movs	r3, #12
 8000766:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000768:	2305      	movs	r3, #5
 800076a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_ADC1_Init+0x108>)
 8000772:	f001 ffbb 	bl	80026ec <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800077c:	f000 fd5c 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	@ 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	24000edc 	.word	0x24000edc
 800078c:	40022000 	.word	0x40022000
 8000790:	0c900008 	.word	0x0c900008
 8000794:	10c00010 	.word	0x10c00010

08000798 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0bc      	sub	sp, #240	@ 0xf0
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b0:	f107 0318 	add.w	r3, r7, #24
 80007b4:	22c0      	movs	r2, #192	@ 0xc0
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f00c fe32 	bl	800d422 <memset>
  if(adcHandle->Instance==ADC1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a52      	ldr	r2, [pc, #328]	@ (800090c <HAL_ADC_MspInit+0x174>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	f040 809d 	bne.w	8000904 <HAL_ADC_MspInit+0x16c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007ca:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80007ce:	f04f 0300 	mov.w	r3, #0
 80007d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80007d6:	2319      	movs	r3, #25
 80007d8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 150;
 80007da:	2396      	movs	r3, #150	@ 0x96
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 125;
 80007de:	237d      	movs	r3, #125	@ 0x7d
 80007e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80007ee:	2320      	movs	r3, #32
 80007f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007f6:	2300      	movs	r3, #0
 80007f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	4618      	mov	r0, r3
 8000802:	f007 fea1 	bl	8008548 <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800080c:	f000 fd14 	bl	8001238 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000810:	4b3f      	ldr	r3, [pc, #252]	@ (8000910 <HAL_ADC_MspInit+0x178>)
 8000812:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000816:	4a3e      	ldr	r2, [pc, #248]	@ (8000910 <HAL_ADC_MspInit+0x178>)
 8000818:	f043 0320 	orr.w	r3, r3, #32
 800081c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000820:	4b3b      	ldr	r3, [pc, #236]	@ (8000910 <HAL_ADC_MspInit+0x178>)
 8000822:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000826:	f003 0320 	and.w	r3, r3, #32
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b38      	ldr	r3, [pc, #224]	@ (8000910 <HAL_ADC_MspInit+0x178>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000834:	4a36      	ldr	r2, [pc, #216]	@ (8000910 <HAL_ADC_MspInit+0x178>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800083e:	4b34      	ldr	r3, [pc, #208]	@ (8000910 <HAL_ADC_MspInit+0x178>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800084c:	4b30      	ldr	r3, [pc, #192]	@ (8000910 <HAL_ADC_MspInit+0x178>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000852:	4a2f      	ldr	r2, [pc, #188]	@ (8000910 <HAL_ADC_MspInit+0x178>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085c:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <HAL_ADC_MspInit+0x178>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800086a:	2340      	movs	r3, #64	@ 0x40
 800086c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000870:	2303      	movs	r3, #3
 8000872:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000880:	4619      	mov	r1, r3
 8000882:	4824      	ldr	r0, [pc, #144]	@ (8000914 <HAL_ADC_MspInit+0x17c>)
 8000884:	f006 fa42 	bl	8006d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000888:	2310      	movs	r3, #16
 800088a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800089e:	4619      	mov	r1, r3
 80008a0:	481d      	ldr	r0, [pc, #116]	@ (8000918 <HAL_ADC_MspInit+0x180>)
 80008a2:	f006 fa33 	bl	8006d0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000920 <HAL_ADC_MspInit+0x188>)
 80008aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008ae:	2209      	movs	r2, #9
 80008b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008ce:	4b13      	ldr	r3, [pc, #76]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008ea:	f003 fa1d 	bl	8003d28 <HAL_DMA_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_ADC_MspInit+0x160>
    {
      Error_Handler();
 80008f4:	f000 fca0 	bl	8001238 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a08      	ldr	r2, [pc, #32]	@ (800091c <HAL_ADC_MspInit+0x184>)
 80008fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008fe:	4a07      	ldr	r2, [pc, #28]	@ (800091c <HAL_ADC_MspInit+0x184>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000904:	bf00      	nop
 8000906:	37f0      	adds	r7, #240	@ 0xf0
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40022000 	.word	0x40022000
 8000910:	58024400 	.word	0x58024400
 8000914:	58020000 	.word	0x58020000
 8000918:	58020800 	.word	0x58020800
 800091c:	24000f40 	.word	0x24000f40
 8000920:	40020010 	.word	0x40020010

08000924 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <HAL_ADC_MspDeInit+0x44>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d114      	bne.n	8000960 <HAL_ADC_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <HAL_ADC_MspDeInit+0x48>)
 8000938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800093c:	4a0b      	ldr	r2, [pc, #44]	@ (800096c <HAL_ADC_MspDeInit+0x48>)
 800093e:	f023 0320 	bic.w	r3, r3, #32
 8000942:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8000946:	2140      	movs	r1, #64	@ 0x40
 8000948:	4809      	ldr	r0, [pc, #36]	@ (8000970 <HAL_ADC_MspDeInit+0x4c>)
 800094a:	f006 fb8f 	bl	800706c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 800094e:	2110      	movs	r1, #16
 8000950:	4808      	ldr	r0, [pc, #32]	@ (8000974 <HAL_ADC_MspDeInit+0x50>)
 8000952:	f006 fb8b 	bl	800706c <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fd40 	bl	80043e0 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40022000 	.word	0x40022000
 800096c:	58024400 	.word	0x58024400
 8000970:	58020000 	.word	0x58020000
 8000974:	58020800 	.word	0x58020800

08000978 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2224      	movs	r2, #36	@ 0x24
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f00c fd4c 	bl	800d422 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_DAC1_Init+0x5c>)
 800098c:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <MX_DAC1_Init+0x60>)
 800098e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000990:	4810      	ldr	r0, [pc, #64]	@ (80009d4 <MX_DAC1_Init+0x5c>)
 8000992:	f003 f869 	bl	8003a68 <HAL_DAC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800099c:	f000 fc4c 	bl	8001238 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80009a4:	2302      	movs	r3, #2
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80009a8:	2302      	movs	r3, #2
 80009aa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80009ac:	2301      	movs	r3, #1
 80009ae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2210      	movs	r2, #16
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	@ (80009d4 <MX_DAC1_Init+0x5c>)
 80009bc:	f003 f876 	bl	8003aac <HAL_DAC_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 fc37 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	24000fb8 	.word	0x24000fb8
 80009d8:	40007400 	.word	0x40007400

080009dc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a30      	ldr	r2, [pc, #192]	@ (8000abc <HAL_DAC_MspInit+0xe0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d159      	bne.n	8000ab2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80009fe:	4b30      	ldr	r3, [pc, #192]	@ (8000ac0 <HAL_DAC_MspInit+0xe4>)
 8000a00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a04:	4a2e      	ldr	r2, [pc, #184]	@ (8000ac0 <HAL_DAC_MspInit+0xe4>)
 8000a06:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000a0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac0 <HAL_DAC_MspInit+0xe4>)
 8000a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	4b28      	ldr	r3, [pc, #160]	@ (8000ac0 <HAL_DAC_MspInit+0xe4>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a22:	4a27      	ldr	r2, [pc, #156]	@ (8000ac0 <HAL_DAC_MspInit+0xe4>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2c:	4b24      	ldr	r3, [pc, #144]	@ (8000ac0 <HAL_DAC_MspInit+0xe4>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a3a:	2320      	movs	r3, #32
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	481d      	ldr	r0, [pc, #116]	@ (8000ac4 <HAL_DAC_MspInit+0xe8>)
 8000a4e:	f006 f95d 	bl	8006d0c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000a54:	4a1d      	ldr	r2, [pc, #116]	@ (8000acc <HAL_DAC_MspInit+0xf0>)
 8000a56:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000a5a:	2244      	movs	r2, #68	@ 0x44
 8000a5c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000a60:	2240      	movs	r2, #64	@ 0x40
 8000a62:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000a6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a70:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000a74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a78:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000a7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a80:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000a84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a88:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8000a96:	480c      	ldr	r0, [pc, #48]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000a98:	f003 f946 	bl	8003d28 <HAL_DMA_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000aa2:	f000 fbc9 	bl	8001238 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	4a06      	ldr	r2, [pc, #24]	@ (8000ac8 <HAL_DAC_MspInit+0xec>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	@ 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40007400 	.word	0x40007400
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	58020000 	.word	0x58020000
 8000ac8:	24000fcc 	.word	0x24000fcc
 8000acc:	40020028 	.word	0x40020028

08000ad0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_DMA_Init+0x4c>)
 8000ad8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000adc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <MX_DMA_Init+0x4c>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <MX_DMA_Init+0x4c>)
 8000ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	200b      	movs	r0, #11
 8000afa:	f002 ff04 	bl	8003906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000afe:	200b      	movs	r0, #11
 8000b00:	f002 ff1b 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	200c      	movs	r0, #12
 8000b0a:	f002 fefc 	bl	8003906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b0e:	200c      	movs	r0, #12
 8000b10:	f002 ff13 	bl	800393a <HAL_NVIC_EnableIRQ>

}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	58024400 	.word	0x58024400

08000b20 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	4b39      	ldr	r3, [pc, #228]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3c:	4a37      	ldr	r2, [pc, #220]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b46:	4b35      	ldr	r3, [pc, #212]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b31      	ldr	r3, [pc, #196]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5a:	4a30      	ldr	r2, [pc, #192]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b64:	4b2d      	ldr	r3, [pc, #180]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b2a      	ldr	r3, [pc, #168]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b78:	4a28      	ldr	r2, [pc, #160]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b82:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b96:	4a21      	ldr	r2, [pc, #132]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb4:	4a19      	ldr	r2, [pc, #100]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000bb6:	f043 0308 	orr.w	r3, r3, #8
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_GPIO_Init+0xfc>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f24c 011e 	movw	r1, #49182	@ 0xc01e
 8000bd2:	4813      	ldr	r0, [pc, #76]	@ (8000c20 <MX_GPIO_Init+0x100>)
 8000bd4:	f006 fb54 	bl	8007280 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bd8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	@ (8000c20 <MX_GPIO_Init+0x100>)
 8000bf2:	f006 f88b 	bl	8006d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000bf6:	231e      	movs	r3, #30
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c02:	2302      	movs	r3, #2
 8000c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4804      	ldr	r0, [pc, #16]	@ (8000c20 <MX_GPIO_Init+0x100>)
 8000c0e:	f006 f87d 	bl	8006d0c <HAL_GPIO_Init>

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	@ 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020c00 	.word	0x58020c00

08000c24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <MX_I2C1_Init+0x7c>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c5e:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c60:	f006 fb28 	bl	80072b4 <HAL_I2C_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c6a:	f000 fae5 	bl	8001238 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c72:	f006 fbaf 	bl	80073d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c7c:	f000 fadc 	bl	8001238 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c80:	2100      	movs	r1, #0
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_I2C1_Init+0x74>)
 8000c84:	f006 fbf1 	bl	800746a <HAL_I2CEx_ConfigDigitalFilter>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c8e:	f000 fad3 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	24001044 	.word	0x24001044
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	00b03fdb 	.word	0x00b03fdb

08000ca4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	22c0      	movs	r2, #192	@ 0xc0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f00c fbac 	bl	800d422 <memset>
  if(i2cHandle->Instance==I2C1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a26      	ldr	r2, [pc, #152]	@ (8000d68 <HAL_I2C_MspInit+0xc4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d145      	bne.n	8000d60 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cd4:	f04f 0208 	mov.w	r2, #8
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4618      	mov	r0, r3
 8000cec:	f007 fc2c 	bl	8008548 <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000cf6:	f000 fa9f 	bl	8001238 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d00:	4a1a      	ldr	r2, [pc, #104]	@ (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d18:	23c0      	movs	r3, #192	@ 0xc0
 8000d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1e:	2312      	movs	r3, #18
 8000d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d30:	2304      	movs	r3, #4
 8000d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <HAL_I2C_MspInit+0xcc>)
 8000d3e:	f005 ffe5 	bl	8006d0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d48:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000d4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d4e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_I2C_MspInit+0xc8>)
 8000d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d60:	bf00      	nop
 8000d62:	37e8      	adds	r7, #232	@ 0xe8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	58024400 	.word	0x58024400
 8000d70:	58020400 	.word	0x58020400

08000d74 <adc_init>:

double v[FO_LENGTH_HIGH];


void adc_init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d7c:	220b      	movs	r2, #11
 8000d7e:	4920      	ldr	r1, [pc, #128]	@ (8000e00 <adc_init+0x8c>)
 8000d80:	4820      	ldr	r0, [pc, #128]	@ (8000e04 <adc_init+0x90>)
 8000d82:	f00a fcdd 	bl	800b740 <HAL_UART_Transmit>
	MX_ADC1_Init();
 8000d86:	f7ff fc7b 	bl	8000680 <MX_ADC1_Init>
	HAL_Delay(1);
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f000 fe4c 	bl	8001a28 <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8000d90:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000d94:	2100      	movs	r1, #0
 8000d96:	481c      	ldr	r0, [pc, #112]	@ (8000e08 <adc_init+0x94>)
 8000d98:	f002 fb98 	bl	80034cc <HAL_ADCEx_Calibration_Start>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d008      	beq.n	8000db4 <adc_init+0x40>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000da6:	222f      	movs	r2, #47	@ 0x2f
 8000da8:	4918      	ldr	r1, [pc, #96]	@ (8000e0c <adc_init+0x98>)
 8000daa:	4816      	ldr	r0, [pc, #88]	@ (8000e04 <adc_init+0x90>)
 8000dac:	f00a fcc8 	bl	800b740 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8000db0:	f000 fa42 	bl	8001238 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH_HIGH) != HAL_OK)
 8000db4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db8:	4915      	ldr	r1, [pc, #84]	@ (8000e10 <adc_init+0x9c>)
 8000dba:	4813      	ldr	r0, [pc, #76]	@ (8000e08 <adc_init+0x94>)
 8000dbc:	f001 fbbe 	bl	800253c <HAL_ADC_Start_DMA>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d008      	beq.n	8000dd8 <adc_init+0x64>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dca:	2225      	movs	r2, #37	@ 0x25
 8000dcc:	4911      	ldr	r1, [pc, #68]	@ (8000e14 <adc_init+0xa0>)
 8000dce:	480d      	ldr	r0, [pc, #52]	@ (8000e04 <adc_init+0x90>)
 8000dd0:	f00a fcb6 	bl	800b740 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8000dd4:	f000 fa30 	bl	8001238 <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8000dd8:	480f      	ldr	r0, [pc, #60]	@ (8000e18 <adc_init+0xa4>)
 8000dda:	f00a f90b 	bl	800aff4 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 8000dde:	bf00      	nop
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <adc_init+0xa8>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0fa      	beq.n	8000de0 <adc_init+0x6c>
	AdcConvEnd = 0;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <adc_init+0xa8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <adc_init+0x94>)
 8000df2:	f001 fa23 	bl	800223c <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 8000df6:	4808      	ldr	r0, [pc, #32]	@ (8000e18 <adc_init+0xa4>)
 8000df8:	f00a f96c 	bl	800b0d4 <HAL_TIM_Base_Stop>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	08011ab8 	.word	0x08011ab8
 8000e04:	2400313c 	.word	0x2400313c
 8000e08:	24000edc 	.word	0x24000edc
 8000e0c:	08011ac4 	.word	0x08011ac4
 8000e10:	240006c0 	.word	0x240006c0
 8000e14:	08011af4 	.word	0x08011af4
 8000e18:	240030f0 	.word	0x240030f0
 8000e1c:	24001098 	.word	0x24001098

08000e20 <ADC1_Get>:


void ADC1_Get(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b092      	sub	sp, #72	@ 0x48
 8000e24:	af00      	add	r7, sp, #0

	adc_init();
 8000e26:	f7ff ffa5 	bl	8000d74 <adc_init>
	double voltage;
	char str[50];

	for (uint16_t temp = 0; temp< FO_LENGTH_HIGH;temp++){
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000e30:	e03d      	b.n	8000eae <ADC1_Get+0x8e>
		voltage = ((double)adc1_data[temp]*3.3)/65535 *3;
 8000e32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000e36:	4a28      	ldr	r2, [pc, #160]	@ (8000ed8 <ADC1_Get+0xb8>)
 8000e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e3c:	ee07 3a90 	vmov	s15, r3
 8000e40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e44:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000ec8 <ADC1_Get+0xa8>
 8000e48:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e4c:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8000ed0 <ADC1_Get+0xb0>
 8000e50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e54:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8000e58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e5c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

		v[temp] = voltage;
 8000e60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000e64:	4a1d      	ldr	r2, [pc, #116]	@ (8000edc <ADC1_Get+0xbc>)
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	18d1      	adds	r1, r2, r3
 8000e6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000e6e:	e9c1 2300 	strd	r2, r3, [r1]
		sprintf(str , "%.5f" , v[temp]);
 8000e72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000e76:	4a19      	ldr	r2, [pc, #100]	@ (8000edc <ADC1_Get+0xbc>)
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4413      	add	r3, r2
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	1d38      	adds	r0, r7, #4
 8000e82:	4917      	ldr	r1, [pc, #92]	@ (8000ee0 <ADC1_Get+0xc0>)
 8000e84:	f00c fa6a 	bl	800d35c <sprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 8000e88:	1d39      	adds	r1, r7, #4
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e8e:	2207      	movs	r2, #7
 8000e90:	4814      	ldr	r0, [pc, #80]	@ (8000ee4 <ADC1_Get+0xc4>)
 8000e92:	f00a fc55 	bl	800b740 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4912      	ldr	r1, [pc, #72]	@ (8000ee8 <ADC1_Get+0xc8>)
 8000e9e:	4811      	ldr	r0, [pc, #68]	@ (8000ee4 <ADC1_Get+0xc4>)
 8000ea0:	f00a fc4e 	bl	800b740 <HAL_UART_Transmit>
	for (uint16_t temp = 0; temp< FO_LENGTH_HIGH;temp++){
 8000ea4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000eae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eb6:	d3bc      	bcc.n	8000e32 <ADC1_Get+0x12>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3748      	adds	r7, #72	@ 0x48
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	66666666 	.word	0x66666666
 8000ecc:	400a6666 	.word	0x400a6666
 8000ed0:	00000000 	.word	0x00000000
 8000ed4:	40efffe0 	.word	0x40efffe0
 8000ed8:	240006c0 	.word	0x240006c0
 8000edc:	240010a0 	.word	0x240010a0
 8000ee0:	08011b1c 	.word	0x08011b1c
 8000ee4:	2400313c 	.word	0x2400313c
 8000ee8:	08011b24 	.word	0x08011b24

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ef2:	f000 f943 	bl	800117c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fec <main+0x100>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d11b      	bne.n	8000f3a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f02:	f3bf 8f4f 	dsb	sy
}
 8000f06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f08:	f3bf 8f6f 	isb	sy
}
 8000f0c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f0e:	4b37      	ldr	r3, [pc, #220]	@ (8000fec <main+0x100>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f16:	f3bf 8f4f 	dsb	sy
}
 8000f1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f1c:	f3bf 8f6f 	isb	sy
}
 8000f20:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f22:	4b32      	ldr	r3, [pc, #200]	@ (8000fec <main+0x100>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	4a31      	ldr	r2, [pc, #196]	@ (8000fec <main+0x100>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f2e:	f3bf 8f4f 	dsb	sy
}
 8000f32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f34:	f3bf 8f6f 	isb	sy
}
 8000f38:	e000      	b.n	8000f3c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f3a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fec <main+0x100>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d138      	bne.n	8000fba <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <main+0x100>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f50:	f3bf 8f4f 	dsb	sy
}
 8000f54:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f56:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <main+0x100>)
 8000f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f5c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	0b5b      	lsrs	r3, r3, #13
 8000f62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f66:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	08db      	lsrs	r3, r3, #3
 8000f6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f70:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	015a      	lsls	r2, r3, #5
 8000f76:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000f7a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f80:	491a      	ldr	r1, [pc, #104]	@ (8000fec <main+0x100>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	1e5a      	subs	r2, r3, #1
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1ef      	bne.n	8000f72 <main+0x86>
    } while(sets-- != 0U);
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1e5a      	subs	r2, r3, #1
 8000f96:	60ba      	str	r2, [r7, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e5      	bne.n	8000f68 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9c:	f3bf 8f4f 	dsb	sy
}
 8000fa0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <main+0x100>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <main+0x100>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fae:	f3bf 8f4f 	dsb	sy
}
 8000fb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb4:	f3bf 8f6f 	isb	sy
}
 8000fb8:	e000      	b.n	8000fbc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000fba:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f000 fca2 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f816 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff fdac 	bl	8000b20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc8:	f7ff fd82 	bl	8000ad0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000fcc:	f7ff fe2a 	bl	8000c24 <MX_I2C1_Init>
  MX_TIM15_Init();
 8000fd0:	f000 fb24 	bl	800161c <MX_TIM15_Init>
  MX_DAC1_Init();
 8000fd4:	f7ff fcd0 	bl	8000978 <MX_DAC1_Init>
  MX_TIM7_Init();
 8000fd8:	f000 faea 	bl	80015b0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000fdc:	f000 fbaa 	bl	8001734 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000fe0:	f7ff fb4e 	bl	8000680 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  ADC1_Get();
 8000fe4:	f7ff ff1c 	bl	8000e20 <ADC1_Get>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <main+0xfc>
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b09e      	sub	sp, #120	@ 0x78
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ffa:	224c      	movs	r2, #76	@ 0x4c
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f00c fa0f 	bl	800d422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2220      	movs	r2, #32
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f00c fa08 	bl	800d422 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001012:	2002      	movs	r0, #2
 8001014:	f006 fa76 	bl	8007504 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	4b4c      	ldr	r3, [pc, #304]	@ (8001150 <SystemClock_Config+0x160>)
 800101e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001020:	4a4b      	ldr	r2, [pc, #300]	@ (8001150 <SystemClock_Config+0x160>)
 8001022:	f023 0301 	bic.w	r3, r3, #1
 8001026:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001028:	4b49      	ldr	r3, [pc, #292]	@ (8001150 <SystemClock_Config+0x160>)
 800102a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b48      	ldr	r3, [pc, #288]	@ (8001154 <SystemClock_Config+0x164>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a47      	ldr	r2, [pc, #284]	@ (8001154 <SystemClock_Config+0x164>)
 8001038:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b45      	ldr	r3, [pc, #276]	@ (8001154 <SystemClock_Config+0x164>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800104a:	bf00      	nop
 800104c:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <SystemClock_Config+0x164>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001058:	d1f8      	bne.n	800104c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b3f      	ldr	r3, [pc, #252]	@ (8001158 <SystemClock_Config+0x168>)
 800105c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001060:	4a3d      	ldr	r2, [pc, #244]	@ (8001158 <SystemClock_Config+0x168>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800106a:	4b3b      	ldr	r3, [pc, #236]	@ (8001158 <SystemClock_Config+0x168>)
 800106c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001078:	2300      	movs	r3, #0
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <SystemClock_Config+0x164>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a34      	ldr	r2, [pc, #208]	@ (8001154 <SystemClock_Config+0x164>)
 8001082:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <SystemClock_Config+0x164>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <SystemClock_Config+0x160>)
 8001094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001096:	4a2e      	ldr	r2, [pc, #184]	@ (8001150 <SystemClock_Config+0x160>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800109e:	4b2c      	ldr	r3, [pc, #176]	@ (8001150 <SystemClock_Config+0x160>)
 80010a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010aa:	bf00      	nop
 80010ac:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <SystemClock_Config+0x164>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010b8:	d1f8      	bne.n	80010ac <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80010ba:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <SystemClock_Config+0x168>)
 80010bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010be:	f023 0303 	bic.w	r3, r3, #3
 80010c2:	4a25      	ldr	r2, [pc, #148]	@ (8001158 <SystemClock_Config+0x168>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d4:	2302      	movs	r3, #2
 80010d6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d8:	2302      	movs	r3, #2
 80010da:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80010dc:	2305      	movs	r3, #5
 80010de:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010e0:	23c0      	movs	r3, #192	@ 0xc0
 80010e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010f0:	2308      	movs	r3, #8
 80010f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001100:	4618      	mov	r0, r3
 8001102:	f006 fa39 	bl	8007578 <HAL_RCC_OscConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800110c:	f000 f894 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	233f      	movs	r3, #63	@ 0x3f
 8001112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2303      	movs	r3, #3
 8001116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800111c:	2308      	movs	r3, #8
 800111e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001120:	2340      	movs	r3, #64	@ 0x40
 8001122:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001124:	2340      	movs	r3, #64	@ 0x40
 8001126:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800112e:	2340      	movs	r3, #64	@ 0x40
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2104      	movs	r1, #4
 8001138:	4618      	mov	r0, r3
 800113a:	f006 fe79 	bl	8007e30 <HAL_RCC_ClockConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8001144:	f000 f878 	bl	8001238 <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	3778      	adds	r7, #120	@ 0x78
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	58000400 	.word	0x58000400
 8001154:	58024800 	.word	0x58024800
 8001158:	58024400 	.word	0x58024400

0800115c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	24001098 	.word	0x24001098

0800117c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800118e:	f002 fbef 	bl	8003970 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001192:	2301      	movs	r3, #1
 8001194:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001196:	2300      	movs	r3, #0
 8001198:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800119a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800119e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80011a0:	2312      	movs	r3, #18
 80011a2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80011ac:	2303      	movs	r3, #3
 80011ae:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80011bc:	2301      	movs	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011c0:	463b      	mov	r3, r7
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fc0c 	bl	80039e0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80011cc:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80011d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80011d2:	2310      	movs	r3, #16
 80011d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011de:	463b      	mov	r3, r7
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 fbfd 	bl	80039e0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MPU_Config+0xb4>)
 80011ec:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011ee:	463b      	mov	r3, r7
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fbf5 	bl	80039e0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80011f6:	2303      	movs	r3, #3
 80011f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MPU_Config+0xb8>)
 80011fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80011fe:	230e      	movs	r3, #14
 8001200:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001202:	463b      	mov	r3, r7
 8001204:	4618      	mov	r0, r3
 8001206:	f002 fbeb 	bl	80039e0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800120a:	2304      	movs	r3, #4
 800120c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 800120e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8001212:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001214:	230f      	movs	r3, #15
 8001216:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001218:	463b      	mov	r3, r7
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fbe0 	bl	80039e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001220:	2004      	movs	r0, #4
 8001222:	f002 fbbd 	bl	80039a0 <HAL_MPU_Enable>

}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	30020000 	.word	0x30020000
 8001234:	30040000 	.word	0x30040000

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <Error_Handler+0x8>

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <HAL_MspInit+0x30>)
 800124c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001250:	4a08      	ldr	r2, [pc, #32]	@ (8001274 <HAL_MspInit+0x30>)
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_MspInit+0x30>)
 800125c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	58024400 	.word	0x58024400

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <NMI_Handler+0x4>

08001280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <MemManage_Handler+0x4>

08001290 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <UsageFault_Handler+0x4>

080012a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ce:	f000 fb8b 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <DMA1_Stream0_IRQHandler+0x10>)
 80012de:	f004 fa03 	bl	80056e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24000f40 	.word	0x24000f40

080012ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <DMA1_Stream1_IRQHandler+0x10>)
 80012f2:	f004 f9f9 	bl	80056e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	24000fcc 	.word	0x24000fcc

08001300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <USART1_IRQHandler+0x10>)
 8001306:	f00a faa9 	bl	800b85c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2400313c 	.word	0x2400313c

08001314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return 1;
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <_kill>:

int _kill(int pid, int sig)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800132e:	f00c f8c7 	bl	800d4c0 <__errno>
 8001332:	4603      	mov	r3, r0
 8001334:	2216      	movs	r2, #22
 8001336:	601a      	str	r2, [r3, #0]
  return -1;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_exit>:

void _exit (int status)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800134c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ffe7 	bl	8001324 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001356:	bf00      	nop
 8001358:	e7fd      	b.n	8001356 <_exit+0x12>

0800135a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e00a      	b.n	8001382 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800136c:	f3af 8000 	nop.w
 8001370:	4601      	mov	r1, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	60ba      	str	r2, [r7, #8]
 8001378:	b2ca      	uxtb	r2, r1
 800137a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3301      	adds	r3, #1
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	429a      	cmp	r2, r3
 8001388:	dbf0      	blt.n	800136c <_read+0x12>
  }

  return len;
 800138a:	687b      	ldr	r3, [r7, #4]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e009      	b.n	80013ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	60ba      	str	r2, [r7, #8]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	dbf1      	blt.n	80013a6 <_write+0x12>
  }
  return len;
 80013c2:	687b      	ldr	r3, [r7, #4]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_close>:

int _close(int file)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f4:	605a      	str	r2, [r3, #4]
  return 0;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_isatty>:

int _isatty(int file)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800140c:	2301      	movs	r3, #1
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800141a:	b480      	push	{r7}
 800141c:	b085      	sub	sp, #20
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800143c:	4a14      	ldr	r2, [pc, #80]	@ (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	@ (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001464:	f00c f82c 	bl	800d4c0 <__errno>
 8001468:	4603      	mov	r3, r0
 800146a:	220c      	movs	r2, #12
 800146c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a05      	ldr	r2, [pc, #20]	@ (8001498 <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	24080000 	.word	0x24080000
 8001494:	00001000 	.word	0x00001000
 8001498:	240030a0 	.word	0x240030a0
 800149c:	240034e0 	.word	0x240034e0

080014a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014a4:	4b37      	ldr	r3, [pc, #220]	@ (8001584 <SystemInit+0xe4>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014aa:	4a36      	ldr	r2, [pc, #216]	@ (8001584 <SystemInit+0xe4>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014b4:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <SystemInit+0xe8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	2b06      	cmp	r3, #6
 80014be:	d807      	bhi.n	80014d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014c0:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <SystemInit+0xe8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 030f 	bic.w	r3, r3, #15
 80014c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001588 <SystemInit+0xe8>)
 80014ca:	f043 0307 	orr.w	r3, r3, #7
 80014ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014d0:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <SystemInit+0xec>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a2d      	ldr	r2, [pc, #180]	@ (800158c <SystemInit+0xec>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014dc:	4b2b      	ldr	r3, [pc, #172]	@ (800158c <SystemInit+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014e2:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <SystemInit+0xec>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4929      	ldr	r1, [pc, #164]	@ (800158c <SystemInit+0xec>)
 80014e8:	4b29      	ldr	r3, [pc, #164]	@ (8001590 <SystemInit+0xf0>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ee:	4b26      	ldr	r3, [pc, #152]	@ (8001588 <SystemInit+0xe8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014fa:	4b23      	ldr	r3, [pc, #140]	@ (8001588 <SystemInit+0xe8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 030f 	bic.w	r3, r3, #15
 8001502:	4a21      	ldr	r2, [pc, #132]	@ (8001588 <SystemInit+0xe8>)
 8001504:	f043 0307 	orr.w	r3, r3, #7
 8001508:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <SystemInit+0xec>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001510:	4b1e      	ldr	r3, [pc, #120]	@ (800158c <SystemInit+0xec>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <SystemInit+0xec>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <SystemInit+0xec>)
 800151e:	4a1d      	ldr	r2, [pc, #116]	@ (8001594 <SystemInit+0xf4>)
 8001520:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <SystemInit+0xec>)
 8001524:	4a1c      	ldr	r2, [pc, #112]	@ (8001598 <SystemInit+0xf8>)
 8001526:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <SystemInit+0xec>)
 800152a:	4a1c      	ldr	r2, [pc, #112]	@ (800159c <SystemInit+0xfc>)
 800152c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <SystemInit+0xec>)
 8001530:	2200      	movs	r2, #0
 8001532:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001534:	4b15      	ldr	r3, [pc, #84]	@ (800158c <SystemInit+0xec>)
 8001536:	4a19      	ldr	r2, [pc, #100]	@ (800159c <SystemInit+0xfc>)
 8001538:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <SystemInit+0xec>)
 800153c:	2200      	movs	r2, #0
 800153e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <SystemInit+0xec>)
 8001542:	4a16      	ldr	r2, [pc, #88]	@ (800159c <SystemInit+0xfc>)
 8001544:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <SystemInit+0xec>)
 8001548:	2200      	movs	r2, #0
 800154a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <SystemInit+0xec>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <SystemInit+0xec>)
 8001552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001556:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <SystemInit+0xec>)
 800155a:	2200      	movs	r2, #0
 800155c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <SystemInit+0x100>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <SystemInit+0x104>)
 8001564:	4013      	ands	r3, r2
 8001566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800156a:	d202      	bcs.n	8001572 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800156c:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <SystemInit+0x108>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <SystemInit+0x10c>)
 8001574:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001578:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00
 8001588:	52002000 	.word	0x52002000
 800158c:	58024400 	.word	0x58024400
 8001590:	eaf6ed7f 	.word	0xeaf6ed7f
 8001594:	02020200 	.word	0x02020200
 8001598:	01ff0000 	.word	0x01ff0000
 800159c:	01010280 	.word	0x01010280
 80015a0:	5c001000 	.word	0x5c001000
 80015a4:	ffff0000 	.word	0xffff0000
 80015a8:	51008108 	.word	0x51008108
 80015ac:	52004000 	.word	0x52004000

080015b0 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <MX_TIM7_Init+0x64>)
 80015c2:	4a15      	ldr	r2, [pc, #84]	@ (8001618 <MX_TIM7_Init+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_TIM7_Init+0x64>)
 80015c8:	22ef      	movs	r2, #239	@ 0xef
 80015ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <MX_TIM7_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <MX_TIM7_Init+0x64>)
 80015d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_TIM7_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <MX_TIM7_Init+0x64>)
 80015e2:	f009 fcaf 	bl	800af44 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015ec:	f7ff fe24 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	@ (8001614 <MX_TIM7_Init+0x64>)
 80015fe:	f009 ffc1 	bl	800b584 <HAL_TIMEx_MasterConfigSynchronization>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001608:	f7ff fe16 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	240030a4 	.word	0x240030a4
 8001618:	40001400 	.word	0x40001400

0800161c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800163a:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <MX_TIM15_Init+0x9c>)
 800163c:	4a1f      	ldr	r2, [pc, #124]	@ (80016bc <MX_TIM15_Init+0xa0>)
 800163e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 51- 1;
 8001640:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <MX_TIM15_Init+0x9c>)
 8001642:	2232      	movs	r2, #50	@ 0x32
 8001644:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <MX_TIM15_Init+0x9c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 501-1;
 800164c:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <MX_TIM15_Init+0x9c>)
 800164e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001652:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <MX_TIM15_Init+0x9c>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800165a:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <MX_TIM15_Init+0x9c>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <MX_TIM15_Init+0x9c>)
 8001662:	2280      	movs	r2, #128	@ 0x80
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001666:	4814      	ldr	r0, [pc, #80]	@ (80016b8 <MX_TIM15_Init+0x9c>)
 8001668:	f009 fc6c 	bl	800af44 <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001672:	f7ff fde1 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800167a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	480d      	ldr	r0, [pc, #52]	@ (80016b8 <MX_TIM15_Init+0x9c>)
 8001684:	f009 fd4e 	bl	800b124 <HAL_TIM_ConfigClockSource>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800168e:	f7ff fdd3 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001692:	2320      	movs	r3, #32
 8001694:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	@ (80016b8 <MX_TIM15_Init+0x9c>)
 80016a0:	f009 ff70 	bl	800b584 <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80016aa:	f7ff fdc5 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	240030f0 	.word	0x240030f0
 80016bc:	40014000 	.word	0x40014000

080016c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a16      	ldr	r2, [pc, #88]	@ (8001728 <HAL_TIM_Base_MspInit+0x68>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10f      	bne.n	80016f2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80016d2:	4b16      	ldr	r3, [pc, #88]	@ (800172c <HAL_TIM_Base_MspInit+0x6c>)
 80016d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016d8:	4a14      	ldr	r2, [pc, #80]	@ (800172c <HAL_TIM_Base_MspInit+0x6c>)
 80016da:	f043 0320 	orr.w	r3, r3, #32
 80016de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016e2:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_TIM_Base_MspInit+0x6c>)
 80016e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016e8:	f003 0320 	and.w	r3, r3, #32
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80016f0:	e013      	b.n	800171a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM15)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <HAL_TIM_Base_MspInit+0x70>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d10e      	bne.n	800171a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80016fc:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <HAL_TIM_Base_MspInit+0x6c>)
 80016fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <HAL_TIM_Base_MspInit+0x6c>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001708:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <HAL_TIM_Base_MspInit+0x6c>)
 800170e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40001400 	.word	0x40001400
 800172c:	58024400 	.word	0x58024400
 8001730:	40014000 	.word	0x40014000

08001734 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001738:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 800173a:	4a23      	ldr	r2, [pc, #140]	@ (80017c8 <MX_USART1_UART_Init+0x94>)
 800173c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800173e:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b1f      	ldr	r3, [pc, #124]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176a:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001776:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800177c:	4811      	ldr	r0, [pc, #68]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 800177e:	f009 ff8f 	bl	800b6a0 <HAL_UART_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001788:	f7ff fd56 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800178c:	2100      	movs	r1, #0
 800178e:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 8001790:	f00b fc58 	bl	800d044 <HAL_UARTEx_SetTxFifoThreshold>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800179a:	f7ff fd4d 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179e:	2100      	movs	r1, #0
 80017a0:	4808      	ldr	r0, [pc, #32]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 80017a2:	f00b fc8d 	bl	800d0c0 <HAL_UARTEx_SetRxFifoThreshold>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017ac:	f7ff fd44 	bl	8001238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <MX_USART1_UART_Init+0x90>)
 80017b2:	f00b fc0e 	bl	800cfd2 <HAL_UARTEx_DisableFifoMode>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017bc:	f7ff fd3c 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2400313c 	.word	0x2400313c
 80017c8:	40011000 	.word	0x40011000

080017cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0ba      	sub	sp, #232	@ 0xe8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	22c0      	movs	r2, #192	@ 0xc0
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00b fe18 	bl	800d422 <memset>
  if(uartHandle->Instance==USART1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a2b      	ldr	r2, [pc, #172]	@ (80018a4 <HAL_UART_MspInit+0xd8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d14e      	bne.n	800189a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017fc:	f04f 0201 	mov.w	r2, #1
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	4618      	mov	r0, r3
 8001814:	f006 fe98 	bl	8008548 <HAL_RCCEx_PeriphCLKConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800181e:	f7ff fd0b 	bl	8001238 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001822:	4b21      	ldr	r3, [pc, #132]	@ (80018a8 <HAL_UART_MspInit+0xdc>)
 8001824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001828:	4a1f      	ldr	r2, [pc, #124]	@ (80018a8 <HAL_UART_MspInit+0xdc>)
 800182a:	f043 0310 	orr.w	r3, r3, #16
 800182e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001832:	4b1d      	ldr	r3, [pc, #116]	@ (80018a8 <HAL_UART_MspInit+0xdc>)
 8001834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <HAL_UART_MspInit+0xdc>)
 8001842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001846:	4a18      	ldr	r2, [pc, #96]	@ (80018a8 <HAL_UART_MspInit+0xdc>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_UART_MspInit+0xdc>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800185e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001862:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001878:	2304      	movs	r3, #4
 800187a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001882:	4619      	mov	r1, r3
 8001884:	4809      	ldr	r0, [pc, #36]	@ (80018ac <HAL_UART_MspInit+0xe0>)
 8001886:	f005 fa41 	bl	8006d0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2025      	movs	r0, #37	@ 0x25
 8001890:	f002 f839 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001894:	2025      	movs	r0, #37	@ 0x25
 8001896:	f002 f850 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800189a:	bf00      	nop
 800189c:	37e8      	adds	r7, #232	@ 0xe8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40011000 	.word	0x40011000
 80018a8:	58024400 	.word	0x58024400
 80018ac:	58020400 	.word	0x58020400

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018b4:	f7ff fdf4 	bl	80014a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b8:	480c      	ldr	r0, [pc, #48]	@ (80018ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ba:	490d      	ldr	r1, [pc, #52]	@ (80018f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018bc:	4a0d      	ldr	r2, [pc, #52]	@ (80018f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018d0:	4c0a      	ldr	r4, [pc, #40]	@ (80018fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018de:	f00b fdf5 	bl	800d4cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7ff fb03 	bl	8000eec <main>
  bx  lr
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018f0:	240006c0 	.word	0x240006c0
  ldr r2, =_sidata
 80018f4:	08011f04 	.word	0x08011f04
  ldr r2, =_sbss
 80018f8:	24000ec0 	.word	0x24000ec0
  ldr r4, =_ebss
 80018fc:	240034e0 	.word	0x240034e0

08001900 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC3_IRQHandler>
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190a:	2003      	movs	r0, #3
 800190c:	f001 fff0 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001910:	f006 fc44 	bl	800819c <HAL_RCC_GetSysClockFreq>
 8001914:	4602      	mov	r2, r0
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <HAL_Init+0x68>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	0a1b      	lsrs	r3, r3, #8
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	4913      	ldr	r1, [pc, #76]	@ (8001970 <HAL_Init+0x6c>)
 8001922:	5ccb      	ldrb	r3, [r1, r3]
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800192e:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <HAL_Init+0x68>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	4a0e      	ldr	r2, [pc, #56]	@ (8001970 <HAL_Init+0x6c>)
 8001938:	5cd3      	ldrb	r3, [r2, r3]
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	4a0b      	ldr	r2, [pc, #44]	@ (8001974 <HAL_Init+0x70>)
 8001946:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001948:	4a0b      	ldr	r2, [pc, #44]	@ (8001978 <HAL_Init+0x74>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800194e:	200f      	movs	r0, #15
 8001950:	f000 f814 	bl	800197c <HAL_InitTick>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e002      	b.n	8001964 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800195e:	f7ff fc71 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	58024400 	.word	0x58024400
 8001970:	08011b28 	.word	0x08011b28
 8001974:	24000004 	.word	0x24000004
 8001978:	24000000 	.word	0x24000000

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_InitTick+0x60>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e021      	b.n	80019d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <HAL_InitTick+0x64>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_InitTick+0x60>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800199e:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f001 ffd5 	bl	8003956 <HAL_SYSTICK_Config>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00e      	b.n	80019d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d80a      	bhi.n	80019d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019c4:	f001 ff9f 	bl	8003906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c8:	4a06      	ldr	r2, [pc, #24]	@ (80019e4 <HAL_InitTick+0x68>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2400000c 	.word	0x2400000c
 80019e0:	24000000 	.word	0x24000000
 80019e4:	24000008 	.word	0x24000008

080019e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_IncTick+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_IncTick+0x24>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <HAL_IncTick+0x24>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	2400000c 	.word	0x2400000c
 8001a0c:	240031d0 	.word	0x240031d0

08001a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <HAL_GetTick+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	240031d0 	.word	0x240031d0

08001a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff ffee 	bl	8001a10 <HAL_GetTick>
 8001a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a40:	d005      	beq.n	8001a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <HAL_Delay+0x44>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a4e:	bf00      	nop
 8001a50:	f7ff ffde 	bl	8001a10 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d8f7      	bhi.n	8001a50 <HAL_Delay+0x28>
  {
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2400000c 	.word	0x2400000c

08001a70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <HAL_GetREVID+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0c1b      	lsrs	r3, r3, #16
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	5c001000 	.word	0x5c001000

08001a88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3360      	adds	r3, #96	@ 0x60
 8001b02:	461a      	mov	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001b24:	bf00      	nop
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	431a      	orrs	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	611a      	str	r2, [r3, #16]
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b087      	sub	sp, #28
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3360      	adds	r3, #96	@ 0x60
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	431a      	orrs	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	371c      	adds	r7, #28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b087      	sub	sp, #28
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3330      	adds	r3, #48	@ 0x30
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	4413      	add	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	211f      	movs	r1, #31
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	0e9b      	lsrs	r3, r3, #26
 8001bf6:	f003 011f 	and.w	r1, r3, #31
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	431a      	orrs	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f023 0203 	bic.w	r2, r3, #3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60da      	str	r2, [r3, #12]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	3314      	adds	r3, #20
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	0e5b      	lsrs	r3, r3, #25
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	0d1b      	lsrs	r3, r3, #20
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	2107      	movs	r1, #7
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	401a      	ands	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	0d1b      	lsrs	r3, r3, #20
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	431a      	orrs	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c86:	bf00      	nop
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cac:	43db      	mvns	r3, r3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0318 	and.w	r3, r3, #24
 8001cb6:	4908      	ldr	r1, [pc, #32]	@ (8001cd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cb8:	40d9      	lsrs	r1, r3
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	000fffff 	.word	0x000fffff

08001cdc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6093      	str	r3, [r2, #8]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	5fffffc0 	.word	0x5fffffc0

08001d1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d30:	d101      	bne.n	8001d36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <LL_ADC_EnableInternalRegulator+0x24>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	6fffffc0 	.word	0x6fffffc0

08001d6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d80:	d101      	bne.n	8001d86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <LL_ADC_Enable+0x24>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	7fffffc0 	.word	0x7fffffc0

08001dbc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <LL_ADC_Disable+0x24>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	f043 0202 	orr.w	r2, r3, #2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	7fffffc0 	.word	0x7fffffc0

08001de4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <LL_ADC_IsEnabled+0x18>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <LL_ADC_IsEnabled+0x1a>
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d101      	bne.n	8001e22 <LL_ADC_IsDisableOngoing+0x18>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <LL_ADC_IsDisableOngoing+0x1a>
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	4b05      	ldr	r3, [pc, #20]	@ (8001e54 <LL_ADC_REG_StartConversion+0x24>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	f043 0204 	orr.w	r2, r3, #4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	7fffffc0 	.word	0x7fffffc0

08001e58 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <LL_ADC_REG_StopConversion+0x24>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	f043 0210 	orr.w	r2, r3, #16
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	7fffffc0 	.word	0x7fffffc0

08001e80 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d101      	bne.n	8001e98 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <LL_ADC_INJ_StopConversion+0x24>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	f043 0220 	orr.w	r2, r3, #32
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	7fffffc0 	.word	0x7fffffc0

08001ed0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d101      	bne.n	8001ee8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b089      	sub	sp, #36	@ 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e18f      	b.n	8002232 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7fe fc39 	bl	8000798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff feef 	bl	8001d1c <LL_ADC_IsDeepPowerDownEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fed5 	bl	8001cf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff0a 	bl	8001d6c <LL_ADC_IsInternalRegulatorEnabled>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d114      	bne.n	8001f88 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff feee 	bl	8001d44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f68:	4b87      	ldr	r3, [pc, #540]	@ (8002188 <HAL_ADC_Init+0x290>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	099b      	lsrs	r3, r3, #6
 8001f6e:	4a87      	ldr	r2, [pc, #540]	@ (800218c <HAL_ADC_Init+0x294>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	3301      	adds	r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f7a:	e002      	b.n	8001f82 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f9      	bne.n	8001f7c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff feed 	bl	8001d6c <LL_ADC_IsInternalRegulatorEnabled>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9c:	f043 0210 	orr.w	r2, r3, #16
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff61 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 8001fbe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f040 8129 	bne.w	8002220 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f040 8125 	bne.w	8002220 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fda:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001fde:	f043 0202 	orr.w	r2, r3, #2
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fefa 	bl	8001de4 <LL_ADC_IsEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d136      	bne.n	8002064 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a65      	ldr	r2, [pc, #404]	@ (8002190 <HAL_ADC_Init+0x298>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d004      	beq.n	800200a <HAL_ADC_Init+0x112>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a63      	ldr	r2, [pc, #396]	@ (8002194 <HAL_ADC_Init+0x29c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d10e      	bne.n	8002028 <HAL_ADC_Init+0x130>
 800200a:	4861      	ldr	r0, [pc, #388]	@ (8002190 <HAL_ADC_Init+0x298>)
 800200c:	f7ff feea 	bl	8001de4 <LL_ADC_IsEnabled>
 8002010:	4604      	mov	r4, r0
 8002012:	4860      	ldr	r0, [pc, #384]	@ (8002194 <HAL_ADC_Init+0x29c>)
 8002014:	f7ff fee6 	bl	8001de4 <LL_ADC_IsEnabled>
 8002018:	4603      	mov	r3, r0
 800201a:	4323      	orrs	r3, r4
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf0c      	ite	eq
 8002020:	2301      	moveq	r3, #1
 8002022:	2300      	movne	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	e008      	b.n	800203a <HAL_ADC_Init+0x142>
 8002028:	485b      	ldr	r0, [pc, #364]	@ (8002198 <HAL_ADC_Init+0x2a0>)
 800202a:	f7ff fedb 	bl	8001de4 <LL_ADC_IsEnabled>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a53      	ldr	r2, [pc, #332]	@ (8002190 <HAL_ADC_Init+0x298>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d004      	beq.n	8002052 <HAL_ADC_Init+0x15a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a51      	ldr	r2, [pc, #324]	@ (8002194 <HAL_ADC_Init+0x29c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Init+0x15e>
 8002052:	4a52      	ldr	r2, [pc, #328]	@ (800219c <HAL_ADC_Init+0x2a4>)
 8002054:	e000      	b.n	8002058 <HAL_ADC_Init+0x160>
 8002056:	4a52      	ldr	r2, [pc, #328]	@ (80021a0 <HAL_ADC_Init+0x2a8>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4619      	mov	r1, r3
 800205e:	4610      	mov	r0, r2
 8002060:	f7ff fd12 	bl	8001a88 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002064:	f7ff fd04 	bl	8001a70 <HAL_GetREVID>
 8002068:	4603      	mov	r3, r0
 800206a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800206e:	4293      	cmp	r3, r2
 8002070:	d914      	bls.n	800209c <HAL_ADC_Init+0x1a4>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b10      	cmp	r3, #16
 8002078:	d110      	bne.n	800209c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7d5b      	ldrb	r3, [r3, #21]
 800207e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002084:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800208a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7f1b      	ldrb	r3, [r3, #28]
 8002090:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002092:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002094:	f043 030c 	orr.w	r3, r3, #12
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	e00d      	b.n	80020b8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	7d5b      	ldrb	r3, [r3, #21]
 80020a0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020a6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020ac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7f1b      	ldrb	r3, [r3, #28]
 80020b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7f1b      	ldrb	r3, [r3, #28]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d106      	bne.n	80020ce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	045b      	lsls	r3, r3, #17
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	4b2c      	ldr	r3, [pc, #176]	@ (80021a4 <HAL_ADC_Init+0x2ac>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	69b9      	ldr	r1, [r7, #24]
 80020fa:	430b      	orrs	r3, r1
 80020fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff febc 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 8002108:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fede 	bl	8001ed0 <LL_ADC_INJ_IsConversionOngoing>
 8002114:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d15f      	bne.n	80021dc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d15c      	bne.n	80021dc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7d1b      	ldrb	r3, [r3, #20]
 8002126:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <HAL_ADC_Init+0x2b0>)
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	430b      	orrs	r3, r1
 8002142:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800214a:	2b01      	cmp	r3, #1
 800214c:	d130      	bne.n	80021b0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <HAL_ADC_Init+0x2b4>)
 800215c:	4013      	ands	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002162:	3a01      	subs	r2, #1
 8002164:	0411      	lsls	r1, r2, #16
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002170:	4311      	orrs	r1, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002176:	430a      	orrs	r2, r1
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	611a      	str	r2, [r3, #16]
 8002184:	e01c      	b.n	80021c0 <HAL_ADC_Init+0x2c8>
 8002186:	bf00      	nop
 8002188:	24000000 	.word	0x24000000
 800218c:	053e2d63 	.word	0x053e2d63
 8002190:	40022000 	.word	0x40022000
 8002194:	40022100 	.word	0x40022100
 8002198:	58026000 	.word	0x58026000
 800219c:	40022300 	.word	0x40022300
 80021a0:	58026300 	.word	0x58026300
 80021a4:	fff0c003 	.word	0xfff0c003
 80021a8:	ffffbffc 	.word	0xffffbffc
 80021ac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f001 f812 	bl	8003200 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d10c      	bne.n	80021fe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f023 010f 	bic.w	r1, r3, #15
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80021fc:	e007      	b.n	800220e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 020f 	bic.w	r2, r2, #15
 800220c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	@ 0x54
 800221e:	e007      	b.n	8002230 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	f043 0210 	orr.w	r2, r3, #16
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002230:	7ffb      	ldrb	r3, [r7, #31]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	@ 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}
 800223a:	bf00      	nop

0800223c <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e16e      	b.n	800252c <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002252:	f043 0202 	orr.w	r2, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800225a:	2103      	movs	r1, #3
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fd95 	bl	8002d8c <ADC_ConversionStop>
 8002262:	4603      	mov	r3, r0
 8002264:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8002274:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fecb 	bl	8003018 <ADC_Disable>
 8002282:	4603      	mov	r3, r0
 8002284:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b8c      	ldr	r3, [pc, #560]	@ (80024d0 <HAL_ADC_DeInit+0x294>)
 800229e:	400b      	ands	r3, r1
 80022a0:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80022aa:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 80022ba:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80022ca:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 80022da:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022ea:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6919      	ldr	r1, [r3, #16]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4b77      	ldr	r3, [pc, #476]	@ (80024d4 <HAL_ADC_DeInit+0x298>)
 80022f8:	400b      	ands	r3, r1
 80022fa:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 800230a:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 800231a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6a1a      	ldr	r2, [r3, #32]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 800232a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 800233a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 800234c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8002360:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8002374:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8002388:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4b50      	ldr	r3, [pc, #320]	@ (80024d8 <HAL_ADC_DeInit+0x29c>)
 8002398:	400b      	ands	r3, r1
 800239a:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b4d      	ldr	r3, [pc, #308]	@ (80024dc <HAL_ADC_DeInit+0x2a0>)
 80023a8:	400b      	ands	r3, r1
 80023aa:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b49      	ldr	r3, [pc, #292]	@ (80024dc <HAL_ADC_DeInit+0x2a0>)
 80023b8:	400b      	ands	r3, r1
 80023ba:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b46      	ldr	r3, [pc, #280]	@ (80024e0 <HAL_ADC_DeInit+0x2a4>)
 80023c8:	400b      	ands	r3, r1
 80023ca:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2200      	movs	r2, #0
 80023f4:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2200      	movs	r2, #0
 8002402:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <HAL_ADC_DeInit+0x2a8>)
 8002412:	400b      	ands	r3, r1
 8002414:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b2f      	ldr	r3, [pc, #188]	@ (80024e4 <HAL_ADC_DeInit+0x2a8>)
 8002426:	400b      	ands	r3, r1
 8002428:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b2a      	ldr	r3, [pc, #168]	@ (80024e4 <HAL_ADC_DeInit+0x2a8>)
 800243a:	400b      	ands	r3, r1
 800243c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 8002450:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a23      	ldr	r2, [pc, #140]	@ (80024e8 <HAL_ADC_DeInit+0x2ac>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d004      	beq.n	8002468 <HAL_ADC_DeInit+0x22c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a22      	ldr	r2, [pc, #136]	@ (80024ec <HAL_ADC_DeInit+0x2b0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d10e      	bne.n	8002486 <HAL_ADC_DeInit+0x24a>
 8002468:	481f      	ldr	r0, [pc, #124]	@ (80024e8 <HAL_ADC_DeInit+0x2ac>)
 800246a:	f7ff fcbb 	bl	8001de4 <LL_ADC_IsEnabled>
 800246e:	4604      	mov	r4, r0
 8002470:	481e      	ldr	r0, [pc, #120]	@ (80024ec <HAL_ADC_DeInit+0x2b0>)
 8002472:	f7ff fcb7 	bl	8001de4 <LL_ADC_IsEnabled>
 8002476:	4603      	mov	r3, r0
 8002478:	4323      	orrs	r3, r4
 800247a:	2b00      	cmp	r3, #0
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	e008      	b.n	8002498 <HAL_ADC_DeInit+0x25c>
 8002486:	481a      	ldr	r0, [pc, #104]	@ (80024f0 <HAL_ADC_DeInit+0x2b4>)
 8002488:	f7ff fcac 	bl	8001de4 <LL_ADC_IsEnabled>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf0c      	ite	eq
 8002492:	2301      	moveq	r3, #1
 8002494:	2300      	movne	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d036      	beq.n	800250a <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a11      	ldr	r2, [pc, #68]	@ (80024e8 <HAL_ADC_DeInit+0x2ac>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d004      	beq.n	80024b0 <HAL_ADC_DeInit+0x274>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a10      	ldr	r2, [pc, #64]	@ (80024ec <HAL_ADC_DeInit+0x2b0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_DeInit+0x278>
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_ADC_DeInit+0x2b8>)
 80024b2:	e000      	b.n	80024b6 <HAL_ADC_DeInit+0x27a>
 80024b4:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <HAL_ADC_DeInit+0x2bc>)
 80024b6:	6899      	ldr	r1, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <HAL_ADC_DeInit+0x2ac>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_ADC_DeInit+0x290>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a09      	ldr	r2, [pc, #36]	@ (80024ec <HAL_ADC_DeInit+0x2b0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d117      	bne.n	80024fc <HAL_ADC_DeInit+0x2c0>
 80024cc:	4a09      	ldr	r2, [pc, #36]	@ (80024f4 <HAL_ADC_DeInit+0x2b8>)
 80024ce:	e016      	b.n	80024fe <HAL_ADC_DeInit+0x2c2>
 80024d0:	fffff800 	.word	0xfffff800
 80024d4:	fc00f81c 	.word	0xfc00f81c
 80024d8:	e0820830 	.word	0xe0820830
 80024dc:	e0820820 	.word	0xe0820820
 80024e0:	fffff820 	.word	0xfffff820
 80024e4:	fff00000 	.word	0xfff00000
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40022100 	.word	0x40022100
 80024f0:	58026000 	.word	0x58026000
 80024f4:	40022300 	.word	0x40022300
 80024f8:	58026300 	.word	0x58026300
 80024fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002534 <HAL_ADC_DeInit+0x2f8>)
 80024fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <HAL_ADC_DeInit+0x2fc>)
 8002500:	400b      	ands	r3, r1
 8002502:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7fe fa0d 	bl	8000924 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}
 8002534:	58026300 	.word	0x58026300
 8002538:	fe0030e0 	.word	0xfe0030e0

0800253c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a55      	ldr	r2, [pc, #340]	@ (80026a4 <HAL_ADC_Start_DMA+0x168>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_ADC_Start_DMA+0x20>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a54      	ldr	r2, [pc, #336]	@ (80026a8 <HAL_ADC_Start_DMA+0x16c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_ADC_Start_DMA+0x24>
 800255c:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_ADC_Start_DMA+0x170>)
 800255e:	e000      	b.n	8002562 <HAL_ADC_Start_DMA+0x26>
 8002560:	4b53      	ldr	r3, [pc, #332]	@ (80026b0 <HAL_ADC_Start_DMA+0x174>)
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fbba 	bl	8001cdc <LL_ADC_GetMultimode>
 8002568:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fc86 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 808c 	bne.w	8002694 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_ADC_Start_DMA+0x4e>
 8002586:	2302      	movs	r3, #2
 8002588:	e087      	b.n	800269a <HAL_ADC_Start_DMA+0x15e>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d002      	beq.n	80025a4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b09      	cmp	r3, #9
 80025a2:	d170      	bne.n	8002686 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 fcad 	bl	8002f04 <ADC_Enable>
 80025aa:	4603      	mov	r3, r0
 80025ac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025ae:	7dfb      	ldrb	r3, [r7, #23]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d163      	bne.n	800267c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80025b8:	4b3e      	ldr	r3, [pc, #248]	@ (80026b4 <HAL_ADC_Start_DMA+0x178>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a37      	ldr	r2, [pc, #220]	@ (80026a8 <HAL_ADC_Start_DMA+0x16c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d002      	beq.n	80025d4 <HAL_ADC_Start_DMA+0x98>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	e000      	b.n	80025d6 <HAL_ADC_Start_DMA+0x9a>
 80025d4:	4b33      	ldr	r3, [pc, #204]	@ (80026a4 <HAL_ADC_Start_DMA+0x168>)
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	4293      	cmp	r3, r2
 80025dc:	d002      	beq.n	80025e4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d006      	beq.n	800260a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002600:	f023 0206 	bic.w	r2, r3, #6
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	659a      	str	r2, [r3, #88]	@ 0x58
 8002608:	e002      	b.n	8002610 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002614:	4a28      	ldr	r2, [pc, #160]	@ (80026b8 <HAL_ADC_Start_DMA+0x17c>)
 8002616:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261c:	4a27      	ldr	r2, [pc, #156]	@ (80026bc <HAL_ADC_Start_DMA+0x180>)
 800261e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002624:	4a26      	ldr	r2, [pc, #152]	@ (80026c0 <HAL_ADC_Start_DMA+0x184>)
 8002626:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	221c      	movs	r2, #28
 800262e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0210 	orr.w	r2, r2, #16
 8002646:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f7ff fadf 	bl	8001c16 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3340      	adds	r3, #64	@ 0x40
 8002662:	4619      	mov	r1, r3
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f002 f870 	bl	800474c <HAL_DMA_Start_IT>
 800266c:	4603      	mov	r3, r0
 800266e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fbdb 	bl	8001e30 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800267a:	e00d      	b.n	8002698 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002684:	e008      	b.n	8002698 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002692:	e001      	b.n	8002698 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002694:	2302      	movs	r3, #2
 8002696:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002698:	7dfb      	ldrb	r3, [r7, #23]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40022000 	.word	0x40022000
 80026a8:	40022100 	.word	0x40022100
 80026ac:	40022300 	.word	0x40022300
 80026b0:	58026300 	.word	0x58026300
 80026b4:	fffff0fe 	.word	0xfffff0fe
 80026b8:	080030d7 	.word	0x080030d7
 80026bc:	080031af 	.word	0x080031af
 80026c0:	080031cb 	.word	0x080031cb

080026c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b0a1      	sub	sp, #132	@ 0x84
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4a9d      	ldr	r2, [pc, #628]	@ (800297c <HAL_ADC_ConfigChannel+0x290>)
 8002706:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x2a>
 8002712:	2302      	movs	r3, #2
 8002714:	e321      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x66e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fbac 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 8306 	bne.w	8002d3c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002738:	2b00      	cmp	r3, #0
 800273a:	d108      	bne.n	800274e <HAL_ADC_ConfigChannel+0x62>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0e9b      	lsrs	r3, r3, #26
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	2201      	movs	r2, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	e016      	b.n	800277c <HAL_ADC_ConfigChannel+0x90>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800275c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800275e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002760:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002766:	2320      	movs	r3, #32
 8002768:	e003      	b.n	8002772 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800276a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	2201      	movs	r2, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	69d1      	ldr	r1, [r2, #28]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	430b      	orrs	r3, r1
 8002788:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	f7ff fa11 	bl	8001bbe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fb6d 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 80027a6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fb8f 	bl	8001ed0 <LL_ADC_INJ_IsConversionOngoing>
 80027b2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f040 80b3 	bne.w	8002922 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80af 	bne.w	8002922 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6819      	ldr	r1, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	461a      	mov	r2, r3
 80027d2:	f7ff fa33 	bl	8001c3c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002980 <HAL_ADC_ConfigChannel+0x294>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80027de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027e2:	d10b      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x110>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	089b      	lsrs	r3, r3, #2
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	e01d      	b.n	8002838 <HAL_ADC_ConfigChannel+0x14c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10b      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x136>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	e00a      	b.n	8002838 <HAL_ADC_ConfigChannel+0x14c>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b04      	cmp	r3, #4
 8002840:	d027      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6919      	ldr	r1, [r3, #16]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002850:	f7ff f94e 	bl	8001af0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	7e5b      	ldrb	r3, [r3, #25]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_ADC_ConfigChannel+0x17e>
 8002864:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002868:	e000      	b.n	800286c <HAL_ADC_ConfigChannel+0x180>
 800286a:	2300      	movs	r3, #0
 800286c:	461a      	mov	r2, r3
 800286e:	f7ff f978 	bl	8001b62 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6919      	ldr	r1, [r3, #16]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	7e1b      	ldrb	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d102      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x19c>
 8002882:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002886:	e000      	b.n	800288a <HAL_ADC_ConfigChannel+0x19e>
 8002888:	2300      	movs	r3, #0
 800288a:	461a      	mov	r2, r3
 800288c:	f7ff f950 	bl	8001b30 <LL_ADC_SetDataRightShift>
 8002890:	e047      	b.n	8002922 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002898:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	069b      	lsls	r3, r3, #26
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d107      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028b4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	069b      	lsls	r3, r3, #26
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d107      	bne.n	80028da <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028d8:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	069b      	lsls	r3, r3, #26
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d107      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80028fc:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002904:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	069b      	lsls	r3, r3, #26
 800290e:	429a      	cmp	r2, r3
 8002910:	d107      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002920:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fa5c 	bl	8001de4 <LL_ADC_IsEnabled>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 820d 	bne.w	8002d4e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	461a      	mov	r2, r3
 8002942:	f7ff f9a7 	bl	8001c94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	4a0c      	ldr	r2, [pc, #48]	@ (800297c <HAL_ADC_ConfigChannel+0x290>)
 800294c:	4293      	cmp	r3, r2
 800294e:	f040 8133 	bne.w	8002bb8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800295e:	2b00      	cmp	r3, #0
 8002960:	d110      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x298>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0e9b      	lsrs	r3, r3, #26
 8002968:	3301      	adds	r3, #1
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	2b09      	cmp	r3, #9
 8002970:	bf94      	ite	ls
 8002972:	2301      	movls	r3, #1
 8002974:	2300      	movhi	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e01e      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x2cc>
 800297a:	bf00      	nop
 800297c:	47ff0000 	.word	0x47ff0000
 8002980:	5c001000 	.word	0x5c001000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002994:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800299c:	2320      	movs	r3, #32
 800299e:	e003      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80029a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2b09      	cmp	r3, #9
 80029b0:	bf94      	ite	ls
 80029b2:	2301      	movls	r3, #1
 80029b4:	2300      	movhi	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d079      	beq.n	8002ab0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d107      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x2ec>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	3301      	adds	r3, #1
 80029d0:	069b      	lsls	r3, r3, #26
 80029d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029d6:	e015      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x318>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80029e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029e8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80029ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e003      	b.n	80029fc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80029f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	069b      	lsls	r3, r3, #26
 8002a00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x338>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0e9b      	lsrs	r3, r3, #26
 8002a16:	3301      	adds	r3, #1
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	e017      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x368>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a34:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	e003      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	3301      	adds	r3, #1
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	ea42 0103 	orr.w	r1, r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x38e>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e9b      	lsrs	r3, r3, #26
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f003 021f 	and.w	r2, r3, #31
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	051b      	lsls	r3, r3, #20
 8002a78:	e018      	b.n	8002aac <HAL_ADC_ConfigChannel+0x3c0>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e003      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aac:	430b      	orrs	r3, r1
 8002aae:	e07e      	b.n	8002bae <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x3e0>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	069b      	lsls	r3, r3, #26
 8002ac6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aca:	e015      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x40c>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e003      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	069b      	lsls	r3, r3, #26
 8002af4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x42c>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	e017      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x45c>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	61bb      	str	r3, [r7, #24]
  return result;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e003      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	ea42 0103 	orr.w	r1, r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10d      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x488>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b1e      	subs	r3, #30
 8002b6c:	051b      	lsls	r3, r3, #20
 8002b6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	e01b      	b.n	8002bac <HAL_ADC_ConfigChannel+0x4c0>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	60fb      	str	r3, [r7, #12]
  return result;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e003      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f003 021f 	and.w	r2, r3, #31
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b1e      	subs	r3, #30
 8002ba6:	051b      	lsls	r3, r3, #20
 8002ba8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bac:	430b      	orrs	r3, r1
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	6892      	ldr	r2, [r2, #8]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7ff f842 	bl	8001c3c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f280 80c6 	bge.w	8002d4e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a67      	ldr	r2, [pc, #412]	@ (8002d64 <HAL_ADC_ConfigChannel+0x678>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_ADC_ConfigChannel+0x4ea>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a65      	ldr	r2, [pc, #404]	@ (8002d68 <HAL_ADC_ConfigChannel+0x67c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x4ee>
 8002bd6:	4b65      	ldr	r3, [pc, #404]	@ (8002d6c <HAL_ADC_ConfigChannel+0x680>)
 8002bd8:	e000      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x4f0>
 8002bda:	4b65      	ldr	r3, [pc, #404]	@ (8002d70 <HAL_ADC_ConfigChannel+0x684>)
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe ff79 	bl	8001ad4 <LL_ADC_GetCommonPathInternalCh>
 8002be2:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5e      	ldr	r2, [pc, #376]	@ (8002d64 <HAL_ADC_ConfigChannel+0x678>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d004      	beq.n	8002bf8 <HAL_ADC_ConfigChannel+0x50c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a5d      	ldr	r2, [pc, #372]	@ (8002d68 <HAL_ADC_ConfigChannel+0x67c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d10e      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x52a>
 8002bf8:	485a      	ldr	r0, [pc, #360]	@ (8002d64 <HAL_ADC_ConfigChannel+0x678>)
 8002bfa:	f7ff f8f3 	bl	8001de4 <LL_ADC_IsEnabled>
 8002bfe:	4604      	mov	r4, r0
 8002c00:	4859      	ldr	r0, [pc, #356]	@ (8002d68 <HAL_ADC_ConfigChannel+0x67c>)
 8002c02:	f7ff f8ef 	bl	8001de4 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4323      	orrs	r3, r4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2301      	moveq	r3, #1
 8002c10:	2300      	movne	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	e008      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x53c>
 8002c16:	4857      	ldr	r0, [pc, #348]	@ (8002d74 <HAL_ADC_ConfigChannel+0x688>)
 8002c18:	f7ff f8e4 	bl	8001de4 <LL_ADC_IsEnabled>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf0c      	ite	eq
 8002c22:	2301      	moveq	r3, #1
 8002c24:	2300      	movne	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d07d      	beq.n	8002d28 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a51      	ldr	r2, [pc, #324]	@ (8002d78 <HAL_ADC_ConfigChannel+0x68c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d130      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x5ac>
 8002c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d12b      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a4b      	ldr	r2, [pc, #300]	@ (8002d74 <HAL_ADC_ConfigChannel+0x688>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	f040 8081 	bne.w	8002d4e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a44      	ldr	r2, [pc, #272]	@ (8002d64 <HAL_ADC_ConfigChannel+0x678>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_ADC_ConfigChannel+0x574>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a43      	ldr	r2, [pc, #268]	@ (8002d68 <HAL_ADC_ConfigChannel+0x67c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x578>
 8002c60:	4a42      	ldr	r2, [pc, #264]	@ (8002d6c <HAL_ADC_ConfigChannel+0x680>)
 8002c62:	e000      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x57a>
 8002c64:	4a42      	ldr	r2, [pc, #264]	@ (8002d70 <HAL_ADC_ConfigChannel+0x684>)
 8002c66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f7fe ff1d 	bl	8001aae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c74:	4b41      	ldr	r3, [pc, #260]	@ (8002d7c <HAL_ADC_ConfigChannel+0x690>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	4a41      	ldr	r2, [pc, #260]	@ (8002d80 <HAL_ADC_ConfigChannel+0x694>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	099b      	lsrs	r3, r3, #6
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c88:	e002      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f9      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c96:	e05a      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a39      	ldr	r2, [pc, #228]	@ (8002d84 <HAL_ADC_ConfigChannel+0x698>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d11e      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x5f4>
 8002ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d119      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a30      	ldr	r2, [pc, #192]	@ (8002d74 <HAL_ADC_ConfigChannel+0x688>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d14b      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2a      	ldr	r2, [pc, #168]	@ (8002d64 <HAL_ADC_ConfigChannel+0x678>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_ADC_ConfigChannel+0x5de>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a28      	ldr	r2, [pc, #160]	@ (8002d68 <HAL_ADC_ConfigChannel+0x67c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x5e2>
 8002cca:	4a28      	ldr	r2, [pc, #160]	@ (8002d6c <HAL_ADC_ConfigChannel+0x680>)
 8002ccc:	e000      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x5e4>
 8002cce:	4a28      	ldr	r2, [pc, #160]	@ (8002d70 <HAL_ADC_ConfigChannel+0x684>)
 8002cd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4610      	mov	r0, r2
 8002cda:	f7fe fee8 	bl	8001aae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cde:	e036      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a28      	ldr	r2, [pc, #160]	@ (8002d88 <HAL_ADC_ConfigChannel+0x69c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d131      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x662>
 8002cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d12c      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d74 <HAL_ADC_ConfigChannel+0x688>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d127      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a18      	ldr	r2, [pc, #96]	@ (8002d64 <HAL_ADC_ConfigChannel+0x678>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_ADC_ConfigChannel+0x626>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a16      	ldr	r2, [pc, #88]	@ (8002d68 <HAL_ADC_ConfigChannel+0x67c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x62a>
 8002d12:	4a16      	ldr	r2, [pc, #88]	@ (8002d6c <HAL_ADC_ConfigChannel+0x680>)
 8002d14:	e000      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x62c>
 8002d16:	4a16      	ldr	r2, [pc, #88]	@ (8002d70 <HAL_ADC_ConfigChannel+0x684>)
 8002d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4610      	mov	r0, r2
 8002d22:	f7fe fec4 	bl	8001aae <LL_ADC_SetCommonPathInternalCh>
 8002d26:	e012      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d3a:	e008      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3784      	adds	r7, #132	@ 0x84
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd90      	pop	{r4, r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40022000 	.word	0x40022000
 8002d68:	40022100 	.word	0x40022100
 8002d6c:	40022300 	.word	0x40022300
 8002d70:	58026300 	.word	0x58026300
 8002d74:	58026000 	.word	0x58026000
 8002d78:	cb840000 	.word	0xcb840000
 8002d7c:	24000000 	.word	0x24000000
 8002d80:	053e2d63 	.word	0x053e2d63
 8002d84:	c7520000 	.word	0xc7520000
 8002d88:	cfb80000 	.word	0xcfb80000

08002d8c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff f86c 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 8002da8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f88e 	bl	8001ed0 <LL_ADC_INJ_IsConversionOngoing>
 8002db4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d103      	bne.n	8002dc4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8098 	beq.w	8002ef4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d02a      	beq.n	8002e28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7d5b      	ldrb	r3, [r3, #21]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d126      	bne.n	8002e28 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7d1b      	ldrb	r3, [r3, #20]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d122      	bne.n	8002e28 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002de2:	2301      	movs	r3, #1
 8002de4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002de6:	e014      	b.n	8002e12 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	4a45      	ldr	r2, [pc, #276]	@ (8002f00 <ADC_ConversionStop+0x174>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d90d      	bls.n	8002e0c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df4:	f043 0210 	orr.w	r2, r3, #16
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e074      	b.n	8002ef6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1c:	2b40      	cmp	r3, #64	@ 0x40
 8002e1e:	d1e3      	bne.n	8002de8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2240      	movs	r2, #64	@ 0x40
 8002e26:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d014      	beq.n	8002e58 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f824 	bl	8001e80 <LL_ADC_REG_IsConversionOngoing>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe ffe1 	bl	8001e0a <LL_ADC_IsDisableOngoing>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff f800 	bl	8001e58 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d014      	beq.n	8002e88 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff f834 	bl	8001ed0 <LL_ADC_INJ_IsConversionOngoing>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00c      	beq.n	8002e88 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe ffc9 	bl	8001e0a <LL_ADC_IsDisableOngoing>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff f810 	bl	8001ea8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d005      	beq.n	8002e9a <ADC_ConversionStop+0x10e>
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d105      	bne.n	8002ea0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e94:	230c      	movs	r3, #12
 8002e96:	617b      	str	r3, [r7, #20]
        break;
 8002e98:	e005      	b.n	8002ea6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	617b      	str	r3, [r7, #20]
        break;
 8002e9e:	e002      	b.n	8002ea6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	617b      	str	r3, [r7, #20]
        break;
 8002ea4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002ea6:	f7fe fdb3 	bl	8001a10 <HAL_GetTick>
 8002eaa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002eac:	e01b      	b.n	8002ee6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002eae:	f7fe fdaf 	bl	8001a10 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d914      	bls.n	8002ee6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00d      	beq.n	8002ee6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ece:	f043 0210 	orr.w	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eda:	f043 0201 	orr.w	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e007      	b.n	8002ef6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1dc      	bne.n	8002eae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	000cdbff 	.word	0x000cdbff

08002f04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe ff67 	bl	8001de4 <LL_ADC_IsEnabled>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d16e      	bne.n	8002ffa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	4b38      	ldr	r3, [pc, #224]	@ (8003004 <ADC_Enable+0x100>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2e:	f043 0210 	orr.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e05a      	b.n	8002ffc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe ff22 	bl	8001d94 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f50:	f7fe fd5e 	bl	8001a10 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003008 <ADC_Enable+0x104>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <ADC_Enable+0x66>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a29      	ldr	r2, [pc, #164]	@ (800300c <ADC_Enable+0x108>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d101      	bne.n	8002f6e <ADC_Enable+0x6a>
 8002f6a:	4b29      	ldr	r3, [pc, #164]	@ (8003010 <ADC_Enable+0x10c>)
 8002f6c:	e000      	b.n	8002f70 <ADC_Enable+0x6c>
 8002f6e:	4b29      	ldr	r3, [pc, #164]	@ (8003014 <ADC_Enable+0x110>)
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe feb3 	bl	8001cdc <LL_ADC_GetMultimode>
 8002f76:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a23      	ldr	r2, [pc, #140]	@ (800300c <ADC_Enable+0x108>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d002      	beq.n	8002f88 <ADC_Enable+0x84>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	e000      	b.n	8002f8a <ADC_Enable+0x86>
 8002f88:	4b1f      	ldr	r3, [pc, #124]	@ (8003008 <ADC_Enable+0x104>)
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02c      	beq.n	8002fec <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d130      	bne.n	8002ffa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f98:	e028      	b.n	8002fec <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe ff20 	bl	8001de4 <LL_ADC_IsEnabled>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fef0 	bl	8001d94 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fb4:	f7fe fd2c 	bl	8001a10 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d914      	bls.n	8002fec <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d00d      	beq.n	8002fec <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd4:	f043 0210 	orr.w	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e007      	b.n	8002ffc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d1cf      	bne.n	8002f9a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	8000003f 	.word	0x8000003f
 8003008:	40022000 	.word	0x40022000
 800300c:	40022100 	.word	0x40022100
 8003010:	40022300 	.word	0x40022300
 8003014:	58026300 	.word	0x58026300

08003018 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe fef0 	bl	8001e0a <LL_ADC_IsDisableOngoing>
 800302a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe fed7 	bl	8001de4 <LL_ADC_IsEnabled>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d047      	beq.n	80030cc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d144      	bne.n	80030cc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 030d 	and.w	r3, r3, #13
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10c      	bne.n	800306a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7fe feb1 	bl	8001dbc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2203      	movs	r2, #3
 8003060:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003062:	f7fe fcd5 	bl	8001a10 <HAL_GetTick>
 8003066:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003068:	e029      	b.n	80030be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	f043 0210 	orr.w	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e023      	b.n	80030ce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003086:	f7fe fcc3 	bl	8001a10 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d914      	bls.n	80030be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a6:	f043 0210 	orr.w	r2, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b2:	f043 0201 	orr.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e007      	b.n	80030ce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1dc      	bne.n	8003086 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d14b      	bne.n	8003188 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d021      	beq.n	800314e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fd42 	bl	8001b98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d032      	beq.n	8003180 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d12b      	bne.n	8003180 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003138:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11f      	bne.n	8003180 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	655a      	str	r2, [r3, #84]	@ 0x54
 800314c:	e018      	b.n	8003180 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d111      	bne.n	8003180 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7fd ffeb 	bl	800115c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003186:	e00e      	b.n	80031a6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fa9f 	bl	80026d8 <HAL_ADC_ErrorCallback>
}
 800319a:	e004      	b.n	80031a6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7ff fa81 	bl	80026c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e8:	f043 0204 	orr.w	r2, r3, #4
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fa71 	bl	80026d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7a      	ldr	r2, [pc, #488]	@ (80033f8 <ADC_ConfigureBoostMode+0x1f8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d004      	beq.n	800321c <ADC_ConfigureBoostMode+0x1c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a79      	ldr	r2, [pc, #484]	@ (80033fc <ADC_ConfigureBoostMode+0x1fc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d109      	bne.n	8003230 <ADC_ConfigureBoostMode+0x30>
 800321c:	4b78      	ldr	r3, [pc, #480]	@ (8003400 <ADC_ConfigureBoostMode+0x200>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e008      	b.n	8003242 <ADC_ConfigureBoostMode+0x42>
 8003230:	4b74      	ldr	r3, [pc, #464]	@ (8003404 <ADC_ConfigureBoostMode+0x204>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d01c      	beq.n	8003280 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003246:	f005 f923 	bl	8008490 <HAL_RCC_GetHCLKFreq>
 800324a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003254:	d010      	beq.n	8003278 <ADC_ConfigureBoostMode+0x78>
 8003256:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800325a:	d873      	bhi.n	8003344 <ADC_ConfigureBoostMode+0x144>
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003260:	d002      	beq.n	8003268 <ADC_ConfigureBoostMode+0x68>
 8003262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003266:	d16d      	bne.n	8003344 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	0c1b      	lsrs	r3, r3, #16
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	60fb      	str	r3, [r7, #12]
        break;
 8003276:	e068      	b.n	800334a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	089b      	lsrs	r3, r3, #2
 800327c:	60fb      	str	r3, [r7, #12]
        break;
 800327e:	e064      	b.n	800334a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003280:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003284:	f04f 0100 	mov.w	r1, #0
 8003288:	f006 fb68 	bl	800995c <HAL_RCCEx_GetPeriphCLKFreq>
 800328c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003296:	d051      	beq.n	800333c <ADC_ConfigureBoostMode+0x13c>
 8003298:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800329c:	d854      	bhi.n	8003348 <ADC_ConfigureBoostMode+0x148>
 800329e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80032a2:	d047      	beq.n	8003334 <ADC_ConfigureBoostMode+0x134>
 80032a4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80032a8:	d84e      	bhi.n	8003348 <ADC_ConfigureBoostMode+0x148>
 80032aa:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80032ae:	d03d      	beq.n	800332c <ADC_ConfigureBoostMode+0x12c>
 80032b0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80032b4:	d848      	bhi.n	8003348 <ADC_ConfigureBoostMode+0x148>
 80032b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ba:	d033      	beq.n	8003324 <ADC_ConfigureBoostMode+0x124>
 80032bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032c0:	d842      	bhi.n	8003348 <ADC_ConfigureBoostMode+0x148>
 80032c2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80032c6:	d029      	beq.n	800331c <ADC_ConfigureBoostMode+0x11c>
 80032c8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80032cc:	d83c      	bhi.n	8003348 <ADC_ConfigureBoostMode+0x148>
 80032ce:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80032d2:	d01a      	beq.n	800330a <ADC_ConfigureBoostMode+0x10a>
 80032d4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80032d8:	d836      	bhi.n	8003348 <ADC_ConfigureBoostMode+0x148>
 80032da:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80032de:	d014      	beq.n	800330a <ADC_ConfigureBoostMode+0x10a>
 80032e0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80032e4:	d830      	bhi.n	8003348 <ADC_ConfigureBoostMode+0x148>
 80032e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ea:	d00e      	beq.n	800330a <ADC_ConfigureBoostMode+0x10a>
 80032ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032f0:	d82a      	bhi.n	8003348 <ADC_ConfigureBoostMode+0x148>
 80032f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032f6:	d008      	beq.n	800330a <ADC_ConfigureBoostMode+0x10a>
 80032f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032fc:	d824      	bhi.n	8003348 <ADC_ConfigureBoostMode+0x148>
 80032fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003302:	d002      	beq.n	800330a <ADC_ConfigureBoostMode+0x10a>
 8003304:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003308:	d11e      	bne.n	8003348 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	0c9b      	lsrs	r3, r3, #18
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	60fb      	str	r3, [r7, #12]
        break;
 800331a:	e016      	b.n	800334a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	60fb      	str	r3, [r7, #12]
        break;
 8003322:	e012      	b.n	800334a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	60fb      	str	r3, [r7, #12]
        break;
 800332a:	e00e      	b.n	800334a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	099b      	lsrs	r3, r3, #6
 8003330:	60fb      	str	r3, [r7, #12]
        break;
 8003332:	e00a      	b.n	800334a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	09db      	lsrs	r3, r3, #7
 8003338:	60fb      	str	r3, [r7, #12]
        break;
 800333a:	e006      	b.n	800334a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	60fb      	str	r3, [r7, #12]
        break;
 8003342:	e002      	b.n	800334a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003344:	bf00      	nop
 8003346:	e000      	b.n	800334a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003348:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800334a:	f7fe fb91 	bl	8001a70 <HAL_GetREVID>
 800334e:	4603      	mov	r3, r0
 8003350:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003354:	4293      	cmp	r3, r2
 8003356:	d815      	bhi.n	8003384 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a2b      	ldr	r2, [pc, #172]	@ (8003408 <ADC_ConfigureBoostMode+0x208>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d908      	bls.n	8003372 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800336e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003370:	e03e      	b.n	80033f0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003380:	609a      	str	r2, [r3, #8]
}
 8003382:	e035      	b.n	80033f0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4a1f      	ldr	r2, [pc, #124]	@ (800340c <ADC_ConfigureBoostMode+0x20c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d808      	bhi.n	80033a4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80033a0:	609a      	str	r2, [r3, #8]
}
 80033a2:	e025      	b.n	80033f0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003410 <ADC_ConfigureBoostMode+0x210>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d80a      	bhi.n	80033c2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033be:	609a      	str	r2, [r3, #8]
}
 80033c0:	e016      	b.n	80033f0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a13      	ldr	r2, [pc, #76]	@ (8003414 <ADC_ConfigureBoostMode+0x214>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d80a      	bhi.n	80033e0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033dc:	609a      	str	r2, [r3, #8]
}
 80033de:	e007      	b.n	80033f0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80033ee:	609a      	str	r2, [r3, #8]
}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40022100 	.word	0x40022100
 8003400:	40022300 	.word	0x40022300
 8003404:	58026300 	.word	0x58026300
 8003408:	01312d00 	.word	0x01312d00
 800340c:	005f5e10 	.word	0x005f5e10
 8003410:	00bebc20 	.word	0x00bebc20
 8003414:	017d7840 	.word	0x017d7840

08003418 <LL_ADC_IsEnabled>:
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <LL_ADC_IsEnabled+0x18>
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <LL_ADC_IsEnabled+0x1a>
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <LL_ADC_StartCalibration>:
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	4b09      	ldr	r3, [pc, #36]	@ (8003478 <LL_ADC_StartCalibration+0x38>)
 8003452:	4013      	ands	r3, r2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003460:	430a      	orrs	r2, r1
 8003462:	4313      	orrs	r3, r2
 8003464:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	609a      	str	r2, [r3, #8]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	3ffeffc0 	.word	0x3ffeffc0

0800347c <LL_ADC_IsCalibrationOnGoing>:
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800348c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003490:	d101      	bne.n	8003496 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <LL_ADC_REG_IsConversionOngoing>:
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d101      	bne.n	80034bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034d8:	2300      	movs	r3, #0
 80034da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_ADCEx_Calibration_Start+0x1e>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e04c      	b.n	8003584 <HAL_ADCEx_Calibration_Start+0xb8>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7ff fd90 	bl	8003018 <ADC_Disable>
 80034f8:	4603      	mov	r3, r0
 80034fa:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d135      	bne.n	800356e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003506:	4b21      	ldr	r3, [pc, #132]	@ (800358c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003508:	4013      	ands	r3, r2
 800350a:	f043 0202 	orr.w	r2, r3, #2
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff ff90 	bl	8003440 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003520:	e014      	b.n	800354c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	3301      	adds	r3, #1
 8003526:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4a19      	ldr	r2, [pc, #100]	@ (8003590 <HAL_ADCEx_Calibration_Start+0xc4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d30d      	bcc.n	800354c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003534:	f023 0312 	bic.w	r3, r3, #18
 8003538:	f043 0210 	orr.w	r2, r3, #16
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e01b      	b.n	8003584 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff ff93 	bl	800347c <LL_ADC_IsCalibrationOnGoing>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e2      	bne.n	8003522 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003560:	f023 0303 	bic.w	r3, r3, #3
 8003564:	f043 0201 	orr.w	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	655a      	str	r2, [r3, #84]	@ 0x54
 800356c:	e005      	b.n	800357a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003582:	7dfb      	ldrb	r3, [r7, #23]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	ffffeefd 	.word	0xffffeefd
 8003590:	25c3f800 	.word	0x25c3f800

08003594 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b09f      	sub	sp, #124	@ 0x7c
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0be      	b.n	8003730 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80035be:	2300      	movs	r3, #0
 80035c0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d102      	bne.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035cc:	4b5b      	ldr	r3, [pc, #364]	@ (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	e001      	b.n	80035d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e09d      	b.n	8003730 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ff54 	bl	80034a4 <LL_ADC_REG_IsConversionOngoing>
 80035fc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ff4e 	bl	80034a4 <LL_ADC_REG_IsConversionOngoing>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d17f      	bne.n	800370e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800360e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003610:	2b00      	cmp	r3, #0
 8003612:	d17c      	bne.n	800370e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a47      	ldr	r2, [pc, #284]	@ (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a46      	ldr	r2, [pc, #280]	@ (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d101      	bne.n	800362c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003628:	4b45      	ldr	r3, [pc, #276]	@ (8003740 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800362a:	e000      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800362c:	4b45      	ldr	r3, [pc, #276]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800362e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d039      	beq.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	431a      	orrs	r2, r3
 8003646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003648:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a3a      	ldr	r2, [pc, #232]	@ (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a38      	ldr	r2, [pc, #224]	@ (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10e      	bne.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800365e:	4836      	ldr	r0, [pc, #216]	@ (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003660:	f7ff feda 	bl	8003418 <LL_ADC_IsEnabled>
 8003664:	4604      	mov	r4, r0
 8003666:	4835      	ldr	r0, [pc, #212]	@ (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003668:	f7ff fed6 	bl	8003418 <LL_ADC_IsEnabled>
 800366c:	4603      	mov	r3, r0
 800366e:	4323      	orrs	r3, r4
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e008      	b.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800367c:	4832      	ldr	r0, [pc, #200]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800367e:	f7ff fecb 	bl	8003418 <LL_ADC_IsEnabled>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d047      	beq.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	4b2d      	ldr	r3, [pc, #180]	@ (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003698:	4013      	ands	r3, r2
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	6811      	ldr	r1, [r2, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	431a      	orrs	r2, r3
 80036a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036aa:	e03a      	b.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80036ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1d      	ldr	r2, [pc, #116]	@ (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10e      	bne.n	80036ea <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80036cc:	481a      	ldr	r0, [pc, #104]	@ (8003738 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036ce:	f7ff fea3 	bl	8003418 <LL_ADC_IsEnabled>
 80036d2:	4604      	mov	r4, r0
 80036d4:	4819      	ldr	r0, [pc, #100]	@ (800373c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036d6:	f7ff fe9f 	bl	8003418 <LL_ADC_IsEnabled>
 80036da:	4603      	mov	r3, r0
 80036dc:	4323      	orrs	r3, r4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bf0c      	ite	eq
 80036e2:	2301      	moveq	r3, #1
 80036e4:	2300      	movne	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	e008      	b.n	80036fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80036ea:	4817      	ldr	r0, [pc, #92]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80036ec:	f7ff fe94 	bl	8003418 <LL_ADC_IsEnabled>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bf0c      	ite	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	2300      	movne	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	4b11      	ldr	r3, [pc, #68]	@ (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003706:	4013      	ands	r3, r2
 8003708:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800370a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800370c:	e009      	b.n	8003722 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003712:	f043 0220 	orr.w	r2, r3, #32
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003720:	e000      	b.n	8003724 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003722:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800372c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003730:	4618      	mov	r0, r3
 8003732:	377c      	adds	r7, #124	@ 0x7c
 8003734:	46bd      	mov	sp, r7
 8003736:	bd90      	pop	{r4, r7, pc}
 8003738:	40022000 	.word	0x40022000
 800373c:	40022100 	.word	0x40022100
 8003740:	40022300 	.word	0x40022300
 8003744:	58026300 	.word	0x58026300
 8003748:	58026000 	.word	0x58026000
 800374c:	fffff0e0 	.word	0xfffff0e0

08003750 <__NVIC_SetPriorityGrouping>:
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <__NVIC_SetPriorityGrouping+0x40>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800376c:	4013      	ands	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003778:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 800377a:	4313      	orrs	r3, r2
 800377c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377e:	4a04      	ldr	r2, [pc, #16]	@ (8003790 <__NVIC_SetPriorityGrouping+0x40>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	60d3      	str	r3, [r2, #12]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00
 8003794:	05fa0000 	.word	0x05fa0000

08003798 <__NVIC_GetPriorityGrouping>:
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800379c:	4b04      	ldr	r3, [pc, #16]	@ (80037b0 <__NVIC_GetPriorityGrouping+0x18>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	f003 0307 	and.w	r3, r3, #7
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_EnableIRQ>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	db0b      	blt.n	80037de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	4907      	ldr	r1, [pc, #28]	@ (80037ec <__NVIC_EnableIRQ+0x38>)
 80037ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	2001      	movs	r0, #1
 80037d6:	fa00 f202 	lsl.w	r2, r0, r2
 80037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000e100 	.word	0xe000e100

080037f0 <__NVIC_SetPriority>:
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003800:	2b00      	cmp	r3, #0
 8003802:	db0a      	blt.n	800381a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	490c      	ldr	r1, [pc, #48]	@ (800383c <__NVIC_SetPriority+0x4c>)
 800380a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	440b      	add	r3, r1
 8003814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003818:	e00a      	b.n	8003830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4908      	ldr	r1, [pc, #32]	@ (8003840 <__NVIC_SetPriority+0x50>)
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3b04      	subs	r3, #4
 8003828:	0112      	lsls	r2, r2, #4
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	440b      	add	r3, r1
 800382e:	761a      	strb	r2, [r3, #24]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000e100 	.word	0xe000e100
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <NVIC_EncodePriority>:
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	@ 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f1c3 0307 	rsb	r3, r3, #7
 800385e:	2b04      	cmp	r3, #4
 8003860:	bf28      	it	cs
 8003862:	2304      	movcs	r3, #4
 8003864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3304      	adds	r3, #4
 800386a:	2b06      	cmp	r3, #6
 800386c:	d902      	bls.n	8003874 <NVIC_EncodePriority+0x30>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3b03      	subs	r3, #3
 8003872:	e000      	b.n	8003876 <NVIC_EncodePriority+0x32>
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	401a      	ands	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800388c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	43d9      	mvns	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	4313      	orrs	r3, r2
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3724      	adds	r7, #36	@ 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038bc:	d301      	bcc.n	80038c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038be:	2301      	movs	r3, #1
 80038c0:	e00f      	b.n	80038e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c2:	4a0a      	ldr	r2, [pc, #40]	@ (80038ec <SysTick_Config+0x40>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ca:	210f      	movs	r1, #15
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038d0:	f7ff ff8e 	bl	80037f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d4:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <SysTick_Config+0x40>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038da:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <SysTick_Config+0x40>)
 80038dc:	2207      	movs	r2, #7
 80038de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	e000e010 	.word	0xe000e010

080038f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ff29 	bl	8003750 <__NVIC_SetPriorityGrouping>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003914:	f7ff ff40 	bl	8003798 <__NVIC_GetPriorityGrouping>
 8003918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f7ff ff90 	bl	8003844 <NVIC_EncodePriority>
 8003924:	4602      	mov	r2, r0
 8003926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff5f 	bl	80037f0 <__NVIC_SetPriority>
}
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	4603      	mov	r3, r0
 8003942:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff33 	bl	80037b4 <__NVIC_EnableIRQ>
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ffa4 	bl	80038ac <SysTick_Config>
 8003964:	4603      	mov	r3, r0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003974:	f3bf 8f5f 	dmb	sy
}
 8003978:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800397a:	4b07      	ldr	r3, [pc, #28]	@ (8003998 <HAL_MPU_Disable+0x28>)
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	4a06      	ldr	r2, [pc, #24]	@ (8003998 <HAL_MPU_Disable+0x28>)
 8003980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003984:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003986:	4b05      	ldr	r3, [pc, #20]	@ (800399c <HAL_MPU_Disable+0x2c>)
 8003988:	2200      	movs	r2, #0
 800398a:	605a      	str	r2, [r3, #4]
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000ed00 	.word	0xe000ed00
 800399c:	e000ed90 	.word	0xe000ed90

080039a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80039a8:	4a0b      	ldr	r2, [pc, #44]	@ (80039d8 <HAL_MPU_Enable+0x38>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80039b2:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <HAL_MPU_Enable+0x3c>)
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	4a09      	ldr	r2, [pc, #36]	@ (80039dc <HAL_MPU_Enable+0x3c>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039bc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80039be:	f3bf 8f4f 	dsb	sy
}
 80039c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039c4:	f3bf 8f6f 	isb	sy
}
 80039c8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000ed90 	.word	0xe000ed90
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	785a      	ldrb	r2, [r3, #1]
 80039ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003a64 <HAL_MPU_ConfigRegion+0x84>)
 80039ee:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d029      	beq.n	8003a4c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80039f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003a64 <HAL_MPU_ConfigRegion+0x84>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7b1b      	ldrb	r3, [r3, #12]
 8003a04:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7adb      	ldrb	r3, [r3, #11]
 8003a0a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	7a9b      	ldrb	r3, [r3, #10]
 8003a12:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003a14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7b5b      	ldrb	r3, [r3, #13]
 8003a1a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003a1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7b9b      	ldrb	r3, [r3, #14]
 8003a22:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003a24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7bdb      	ldrb	r3, [r3, #15]
 8003a2a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003a2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	7a5b      	ldrb	r3, [r3, #9]
 8003a32:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7a1b      	ldrb	r3, [r3, #8]
 8003a3a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a3c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a44:	4a07      	ldr	r2, [pc, #28]	@ (8003a64 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a46:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a48:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003a4a:	e005      	b.n	8003a58 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <HAL_MPU_ConfigRegion+0x84>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003a52:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <HAL_MPU_ConfigRegion+0x84>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed90 	.word	0xe000ed90

08003a68 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e014      	b.n	8003aa4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	791b      	ldrb	r3, [r3, #4]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fc ffa6 	bl	80009dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	795b      	ldrb	r3, [r3, #5]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_DAC_ConfigChannel+0x18>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e12a      	b.n	8003d1a <HAL_DAC_ConfigChannel+0x26e>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2202      	movs	r2, #2
 8003ace:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	f040 8081 	bne.w	8003bdc <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003ada:	f7fd ff99 	bl	8001a10 <HAL_GetTick>
 8003ade:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d140      	bne.n	8003b68 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ae6:	e018      	b.n	8003b1a <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ae8:	f7fd ff92 	bl	8001a10 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d911      	bls.n	8003b1a <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003afc:	4b89      	ldr	r3, [pc, #548]	@ (8003d24 <HAL_DAC_ConfigChannel+0x278>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f043 0208 	orr.w	r2, r3, #8
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2203      	movs	r2, #3
 8003b14:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e0ff      	b.n	8003d1a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b20:	4b80      	ldr	r3, [pc, #512]	@ (8003d24 <HAL_DAC_ConfigChannel+0x278>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1df      	bne.n	8003ae8 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f7fd ff7d 	bl	8001a28 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	6992      	ldr	r2, [r2, #24]
 8003b36:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b38:	e023      	b.n	8003b82 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b3a:	f7fd ff69 	bl	8001a10 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d90f      	bls.n	8003b68 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	da0a      	bge.n	8003b68 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f043 0208 	orr.w	r2, r3, #8
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2203      	movs	r2, #3
 8003b62:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0d8      	b.n	8003d1a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	dbe3      	blt.n	8003b3a <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8003b72:	2001      	movs	r0, #1
 8003b74:	f7fd ff58 	bl	8001a28 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	6992      	ldr	r2, [r2, #24]
 8003b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003b92:	fa01 f303 	lsl.w	r3, r1, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	ea02 0103 	and.w	r1, r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	21ff      	movs	r1, #255	@ 0xff
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	ea02 0103 	and.w	r1, r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	6a1a      	ldr	r2, [r3, #32]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d11d      	bne.n	8003c20 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bea:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	221f      	movs	r2, #31
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c26:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2207      	movs	r2, #7
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d102      	bne.n	8003c4a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	e00f      	b.n	8003c6a <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d102      	bne.n	8003c58 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e008      	b.n	8003c6a <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c60:	2301      	movs	r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	e001      	b.n	8003c6a <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	400a      	ands	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	22c0      	movs	r2, #192	@ 0xc0
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43da      	mvns	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	400a      	ands	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20008000 	.word	0x20008000

08003d28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003d30:	f7fd fe6e 	bl	8001a10 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e316      	b.n	800436e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a66      	ldr	r2, [pc, #408]	@ (8003ee0 <HAL_DMA_Init+0x1b8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d04a      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a65      	ldr	r2, [pc, #404]	@ (8003ee4 <HAL_DMA_Init+0x1bc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d045      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a63      	ldr	r2, [pc, #396]	@ (8003ee8 <HAL_DMA_Init+0x1c0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d040      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a62      	ldr	r2, [pc, #392]	@ (8003eec <HAL_DMA_Init+0x1c4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d03b      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a60      	ldr	r2, [pc, #384]	@ (8003ef0 <HAL_DMA_Init+0x1c8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d036      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a5f      	ldr	r2, [pc, #380]	@ (8003ef4 <HAL_DMA_Init+0x1cc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d031      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef8 <HAL_DMA_Init+0x1d0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d02c      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5c      	ldr	r2, [pc, #368]	@ (8003efc <HAL_DMA_Init+0x1d4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d027      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a5a      	ldr	r2, [pc, #360]	@ (8003f00 <HAL_DMA_Init+0x1d8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d022      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a59      	ldr	r2, [pc, #356]	@ (8003f04 <HAL_DMA_Init+0x1dc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d01d      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a57      	ldr	r2, [pc, #348]	@ (8003f08 <HAL_DMA_Init+0x1e0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d018      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a56      	ldr	r2, [pc, #344]	@ (8003f0c <HAL_DMA_Init+0x1e4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a54      	ldr	r2, [pc, #336]	@ (8003f10 <HAL_DMA_Init+0x1e8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a53      	ldr	r2, [pc, #332]	@ (8003f14 <HAL_DMA_Init+0x1ec>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d009      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a51      	ldr	r2, [pc, #324]	@ (8003f18 <HAL_DMA_Init+0x1f0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_DMA_Init+0xb8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a50      	ldr	r2, [pc, #320]	@ (8003f1c <HAL_DMA_Init+0x1f4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d101      	bne.n	8003de4 <HAL_DMA_Init+0xbc>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_DMA_Init+0xbe>
 8003de4:	2300      	movs	r3, #0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 813b 	beq.w	8004062 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a37      	ldr	r2, [pc, #220]	@ (8003ee0 <HAL_DMA_Init+0x1b8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d04a      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a36      	ldr	r2, [pc, #216]	@ (8003ee4 <HAL_DMA_Init+0x1bc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d045      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a34      	ldr	r2, [pc, #208]	@ (8003ee8 <HAL_DMA_Init+0x1c0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d040      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a33      	ldr	r2, [pc, #204]	@ (8003eec <HAL_DMA_Init+0x1c4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d03b      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a31      	ldr	r2, [pc, #196]	@ (8003ef0 <HAL_DMA_Init+0x1c8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d036      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a30      	ldr	r2, [pc, #192]	@ (8003ef4 <HAL_DMA_Init+0x1cc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d031      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ef8 <HAL_DMA_Init+0x1d0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d02c      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a2d      	ldr	r2, [pc, #180]	@ (8003efc <HAL_DMA_Init+0x1d4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d027      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a2b      	ldr	r2, [pc, #172]	@ (8003f00 <HAL_DMA_Init+0x1d8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d022      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f04 <HAL_DMA_Init+0x1dc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d01d      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a28      	ldr	r2, [pc, #160]	@ (8003f08 <HAL_DMA_Init+0x1e0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d018      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a27      	ldr	r2, [pc, #156]	@ (8003f0c <HAL_DMA_Init+0x1e4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a25      	ldr	r2, [pc, #148]	@ (8003f10 <HAL_DMA_Init+0x1e8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00e      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a24      	ldr	r2, [pc, #144]	@ (8003f14 <HAL_DMA_Init+0x1ec>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a22      	ldr	r2, [pc, #136]	@ (8003f18 <HAL_DMA_Init+0x1f0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_DMA_Init+0x174>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a21      	ldr	r2, [pc, #132]	@ (8003f1c <HAL_DMA_Init+0x1f4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <HAL_DMA_Init+0x186>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e007      	b.n	8003ebe <HAL_DMA_Init+0x196>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ebe:	e02f      	b.n	8003f20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ec0:	f7fd fda6 	bl	8001a10 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d928      	bls.n	8003f20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e246      	b.n	800436e <HAL_DMA_Init+0x646>
 8003ee0:	40020010 	.word	0x40020010
 8003ee4:	40020028 	.word	0x40020028
 8003ee8:	40020040 	.word	0x40020040
 8003eec:	40020058 	.word	0x40020058
 8003ef0:	40020070 	.word	0x40020070
 8003ef4:	40020088 	.word	0x40020088
 8003ef8:	400200a0 	.word	0x400200a0
 8003efc:	400200b8 	.word	0x400200b8
 8003f00:	40020410 	.word	0x40020410
 8003f04:	40020428 	.word	0x40020428
 8003f08:	40020440 	.word	0x40020440
 8003f0c:	40020458 	.word	0x40020458
 8003f10:	40020470 	.word	0x40020470
 8003f14:	40020488 	.word	0x40020488
 8003f18:	400204a0 	.word	0x400204a0
 8003f1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1c8      	bne.n	8003ec0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4b83      	ldr	r3, [pc, #524]	@ (8004148 <HAL_DMA_Init+0x420>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d107      	bne.n	8003f84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f84:	4b71      	ldr	r3, [pc, #452]	@ (800414c <HAL_DMA_Init+0x424>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b71      	ldr	r3, [pc, #452]	@ (8004150 <HAL_DMA_Init+0x428>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f90:	d328      	bcc.n	8003fe4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b28      	cmp	r3, #40	@ 0x28
 8003f98:	d903      	bls.n	8003fa2 <HAL_DMA_Init+0x27a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fa0:	d917      	bls.n	8003fd2 <HAL_DMA_Init+0x2aa>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003fa8:	d903      	bls.n	8003fb2 <HAL_DMA_Init+0x28a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b42      	cmp	r3, #66	@ 0x42
 8003fb0:	d90f      	bls.n	8003fd2 <HAL_DMA_Init+0x2aa>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b46      	cmp	r3, #70	@ 0x46
 8003fb8:	d903      	bls.n	8003fc2 <HAL_DMA_Init+0x29a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b48      	cmp	r3, #72	@ 0x48
 8003fc0:	d907      	bls.n	8003fd2 <HAL_DMA_Init+0x2aa>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b4e      	cmp	r3, #78	@ 0x4e
 8003fc8:	d905      	bls.n	8003fd6 <HAL_DMA_Init+0x2ae>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b52      	cmp	r3, #82	@ 0x52
 8003fd0:	d801      	bhi.n	8003fd6 <HAL_DMA_Init+0x2ae>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <HAL_DMA_Init+0x2b0>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fe2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 0307 	bic.w	r3, r3, #7
 8003ffa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	2b04      	cmp	r3, #4
 800400c:	d117      	bne.n	800403e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00e      	beq.n	800403e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f002 fce9 	bl	80069f8 <DMA_CheckFifoParam>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2240      	movs	r2, #64	@ 0x40
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e197      	b.n	800436e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f002 fc24 	bl	8006894 <DMA_CalcBaseAndBitshift>
 800404c:	4603      	mov	r3, r0
 800404e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	223f      	movs	r2, #63	@ 0x3f
 800405a:	409a      	lsls	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	e0cd      	b.n	80041fe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a3b      	ldr	r2, [pc, #236]	@ (8004154 <HAL_DMA_Init+0x42c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d022      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a39      	ldr	r2, [pc, #228]	@ (8004158 <HAL_DMA_Init+0x430>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01d      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a38      	ldr	r2, [pc, #224]	@ (800415c <HAL_DMA_Init+0x434>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a36      	ldr	r2, [pc, #216]	@ (8004160 <HAL_DMA_Init+0x438>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a35      	ldr	r2, [pc, #212]	@ (8004164 <HAL_DMA_Init+0x43c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a33      	ldr	r2, [pc, #204]	@ (8004168 <HAL_DMA_Init+0x440>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a32      	ldr	r2, [pc, #200]	@ (800416c <HAL_DMA_Init+0x444>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_DMA_Init+0x38a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a30      	ldr	r2, [pc, #192]	@ (8004170 <HAL_DMA_Init+0x448>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d101      	bne.n	80040b6 <HAL_DMA_Init+0x38e>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <HAL_DMA_Init+0x390>
 80040b6:	2300      	movs	r3, #0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8097 	beq.w	80041ec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a24      	ldr	r2, [pc, #144]	@ (8004154 <HAL_DMA_Init+0x42c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d021      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a22      	ldr	r2, [pc, #136]	@ (8004158 <HAL_DMA_Init+0x430>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d01c      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a21      	ldr	r2, [pc, #132]	@ (800415c <HAL_DMA_Init+0x434>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d017      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004160 <HAL_DMA_Init+0x438>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d012      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004164 <HAL_DMA_Init+0x43c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00d      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004168 <HAL_DMA_Init+0x440>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d008      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1b      	ldr	r2, [pc, #108]	@ (800416c <HAL_DMA_Init+0x444>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <HAL_DMA_Init+0x3e4>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a19      	ldr	r2, [pc, #100]	@ (8004170 <HAL_DMA_Init+0x448>)
 800410a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4b13      	ldr	r3, [pc, #76]	@ (8004174 <HAL_DMA_Init+0x44c>)
 8004128:	4013      	ands	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b40      	cmp	r3, #64	@ 0x40
 8004132:	d021      	beq.n	8004178 <HAL_DMA_Init+0x450>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b80      	cmp	r3, #128	@ 0x80
 800413a:	d102      	bne.n	8004142 <HAL_DMA_Init+0x41a>
 800413c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004140:	e01b      	b.n	800417a <HAL_DMA_Init+0x452>
 8004142:	2300      	movs	r3, #0
 8004144:	e019      	b.n	800417a <HAL_DMA_Init+0x452>
 8004146:	bf00      	nop
 8004148:	fe10803f 	.word	0xfe10803f
 800414c:	5c001000 	.word	0x5c001000
 8004150:	ffff0000 	.word	0xffff0000
 8004154:	58025408 	.word	0x58025408
 8004158:	5802541c 	.word	0x5802541c
 800415c:	58025430 	.word	0x58025430
 8004160:	58025444 	.word	0x58025444
 8004164:	58025458 	.word	0x58025458
 8004168:	5802546c 	.word	0x5802546c
 800416c:	58025480 	.word	0x58025480
 8004170:	58025494 	.word	0x58025494
 8004174:	fffe000f 	.word	0xfffe000f
 8004178:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68d2      	ldr	r2, [r2, #12]
 800417e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	4b6e      	ldr	r3, [pc, #440]	@ (8004378 <HAL_DMA_Init+0x650>)
 80041c0:	4413      	add	r3, r2
 80041c2:	4a6e      	ldr	r2, [pc, #440]	@ (800437c <HAL_DMA_Init+0x654>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	009a      	lsls	r2, r3, #2
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f002 fb5f 	bl	8006894 <DMA_CalcBaseAndBitshift>
 80041d6:	4603      	mov	r3, r0
 80041d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2201      	movs	r2, #1
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	e008      	b.n	80041fe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2240      	movs	r2, #64	@ 0x40
 80041f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2203      	movs	r2, #3
 80041f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0b7      	b.n	800436e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a5f      	ldr	r2, [pc, #380]	@ (8004380 <HAL_DMA_Init+0x658>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d072      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a5d      	ldr	r2, [pc, #372]	@ (8004384 <HAL_DMA_Init+0x65c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d06d      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a5c      	ldr	r2, [pc, #368]	@ (8004388 <HAL_DMA_Init+0x660>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d068      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a5a      	ldr	r2, [pc, #360]	@ (800438c <HAL_DMA_Init+0x664>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d063      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a59      	ldr	r2, [pc, #356]	@ (8004390 <HAL_DMA_Init+0x668>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d05e      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a57      	ldr	r2, [pc, #348]	@ (8004394 <HAL_DMA_Init+0x66c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d059      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a56      	ldr	r2, [pc, #344]	@ (8004398 <HAL_DMA_Init+0x670>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d054      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a54      	ldr	r2, [pc, #336]	@ (800439c <HAL_DMA_Init+0x674>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d04f      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a53      	ldr	r2, [pc, #332]	@ (80043a0 <HAL_DMA_Init+0x678>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d04a      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a51      	ldr	r2, [pc, #324]	@ (80043a4 <HAL_DMA_Init+0x67c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d045      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a50      	ldr	r2, [pc, #320]	@ (80043a8 <HAL_DMA_Init+0x680>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d040      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a4e      	ldr	r2, [pc, #312]	@ (80043ac <HAL_DMA_Init+0x684>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d03b      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a4d      	ldr	r2, [pc, #308]	@ (80043b0 <HAL_DMA_Init+0x688>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d036      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a4b      	ldr	r2, [pc, #300]	@ (80043b4 <HAL_DMA_Init+0x68c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d031      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a4a      	ldr	r2, [pc, #296]	@ (80043b8 <HAL_DMA_Init+0x690>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d02c      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a48      	ldr	r2, [pc, #288]	@ (80043bc <HAL_DMA_Init+0x694>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d027      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a47      	ldr	r2, [pc, #284]	@ (80043c0 <HAL_DMA_Init+0x698>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a45      	ldr	r2, [pc, #276]	@ (80043c4 <HAL_DMA_Init+0x69c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01d      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a44      	ldr	r2, [pc, #272]	@ (80043c8 <HAL_DMA_Init+0x6a0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d018      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a42      	ldr	r2, [pc, #264]	@ (80043cc <HAL_DMA_Init+0x6a4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a41      	ldr	r2, [pc, #260]	@ (80043d0 <HAL_DMA_Init+0x6a8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a3f      	ldr	r2, [pc, #252]	@ (80043d4 <HAL_DMA_Init+0x6ac>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d009      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3e      	ldr	r2, [pc, #248]	@ (80043d8 <HAL_DMA_Init+0x6b0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_DMA_Init+0x5c6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a3c      	ldr	r2, [pc, #240]	@ (80043dc <HAL_DMA_Init+0x6b4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d101      	bne.n	80042f2 <HAL_DMA_Init+0x5ca>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_DMA_Init+0x5cc>
 80042f2:	2300      	movs	r3, #0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d032      	beq.n	800435e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f002 fbf9 	bl	8006af0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b80      	cmp	r3, #128	@ 0x80
 8004304:	d102      	bne.n	800430c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004320:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d010      	beq.n	800434c <HAL_DMA_Init+0x624>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b08      	cmp	r3, #8
 8004330:	d80c      	bhi.n	800434c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f002 fc76 	bl	8006c24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	e008      	b.n	800435e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	a7fdabf8 	.word	0xa7fdabf8
 800437c:	cccccccd 	.word	0xcccccccd
 8004380:	40020010 	.word	0x40020010
 8004384:	40020028 	.word	0x40020028
 8004388:	40020040 	.word	0x40020040
 800438c:	40020058 	.word	0x40020058
 8004390:	40020070 	.word	0x40020070
 8004394:	40020088 	.word	0x40020088
 8004398:	400200a0 	.word	0x400200a0
 800439c:	400200b8 	.word	0x400200b8
 80043a0:	40020410 	.word	0x40020410
 80043a4:	40020428 	.word	0x40020428
 80043a8:	40020440 	.word	0x40020440
 80043ac:	40020458 	.word	0x40020458
 80043b0:	40020470 	.word	0x40020470
 80043b4:	40020488 	.word	0x40020488
 80043b8:	400204a0 	.word	0x400204a0
 80043bc:	400204b8 	.word	0x400204b8
 80043c0:	58025408 	.word	0x58025408
 80043c4:	5802541c 	.word	0x5802541c
 80043c8:	58025430 	.word	0x58025430
 80043cc:	58025444 	.word	0x58025444
 80043d0:	58025458 	.word	0x58025458
 80043d4:	5802546c 	.word	0x5802546c
 80043d8:	58025480 	.word	0x58025480
 80043dc:	58025494 	.word	0x58025494

080043e0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e1a8      	b.n	8004744 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a82      	ldr	r2, [pc, #520]	@ (8004600 <HAL_DMA_DeInit+0x220>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d04a      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a80      	ldr	r2, [pc, #512]	@ (8004604 <HAL_DMA_DeInit+0x224>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d045      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a7f      	ldr	r2, [pc, #508]	@ (8004608 <HAL_DMA_DeInit+0x228>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d040      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a7d      	ldr	r2, [pc, #500]	@ (800460c <HAL_DMA_DeInit+0x22c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d03b      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a7c      	ldr	r2, [pc, #496]	@ (8004610 <HAL_DMA_DeInit+0x230>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d036      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7a      	ldr	r2, [pc, #488]	@ (8004614 <HAL_DMA_DeInit+0x234>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d031      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a79      	ldr	r2, [pc, #484]	@ (8004618 <HAL_DMA_DeInit+0x238>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d02c      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a77      	ldr	r2, [pc, #476]	@ (800461c <HAL_DMA_DeInit+0x23c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d027      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a76      	ldr	r2, [pc, #472]	@ (8004620 <HAL_DMA_DeInit+0x240>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d022      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a74      	ldr	r2, [pc, #464]	@ (8004624 <HAL_DMA_DeInit+0x244>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d01d      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a73      	ldr	r2, [pc, #460]	@ (8004628 <HAL_DMA_DeInit+0x248>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d018      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a71      	ldr	r2, [pc, #452]	@ (800462c <HAL_DMA_DeInit+0x24c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d013      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a70      	ldr	r2, [pc, #448]	@ (8004630 <HAL_DMA_DeInit+0x250>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6e      	ldr	r2, [pc, #440]	@ (8004634 <HAL_DMA_DeInit+0x254>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a6d      	ldr	r2, [pc, #436]	@ (8004638 <HAL_DMA_DeInit+0x258>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_DMA_DeInit+0xb2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6b      	ldr	r2, [pc, #428]	@ (800463c <HAL_DMA_DeInit+0x25c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d108      	bne.n	80044a4 <HAL_DMA_DeInit+0xc4>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e007      	b.n	80044b4 <HAL_DMA_DeInit+0xd4>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0201 	bic.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a51      	ldr	r2, [pc, #324]	@ (8004600 <HAL_DMA_DeInit+0x220>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d04a      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a50      	ldr	r2, [pc, #320]	@ (8004604 <HAL_DMA_DeInit+0x224>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d045      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004608 <HAL_DMA_DeInit+0x228>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d040      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a4d      	ldr	r2, [pc, #308]	@ (800460c <HAL_DMA_DeInit+0x22c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d03b      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004610 <HAL_DMA_DeInit+0x230>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d036      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004614 <HAL_DMA_DeInit+0x234>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d031      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a48      	ldr	r2, [pc, #288]	@ (8004618 <HAL_DMA_DeInit+0x238>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d02c      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a47      	ldr	r2, [pc, #284]	@ (800461c <HAL_DMA_DeInit+0x23c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d027      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a45      	ldr	r2, [pc, #276]	@ (8004620 <HAL_DMA_DeInit+0x240>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d022      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a44      	ldr	r2, [pc, #272]	@ (8004624 <HAL_DMA_DeInit+0x244>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d01d      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a42      	ldr	r2, [pc, #264]	@ (8004628 <HAL_DMA_DeInit+0x248>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d018      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a41      	ldr	r2, [pc, #260]	@ (800462c <HAL_DMA_DeInit+0x24c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d013      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a3f      	ldr	r2, [pc, #252]	@ (8004630 <HAL_DMA_DeInit+0x250>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00e      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a3e      	ldr	r2, [pc, #248]	@ (8004634 <HAL_DMA_DeInit+0x254>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d009      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a3c      	ldr	r2, [pc, #240]	@ (8004638 <HAL_DMA_DeInit+0x258>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <HAL_DMA_DeInit+0x174>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a3b      	ldr	r2, [pc, #236]	@ (800463c <HAL_DMA_DeInit+0x25c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d101      	bne.n	8004558 <HAL_DMA_DeInit+0x178>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <HAL_DMA_DeInit+0x17a>
 8004558:	2300      	movs	r3, #0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d025      	beq.n	80045aa <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2200      	movs	r2, #0
 800456c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2200      	movs	r2, #0
 8004574:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2200      	movs	r2, #0
 8004584:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2221      	movs	r2, #33	@ 0x21
 800458c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f002 f980 	bl	8006894 <DMA_CalcBaseAndBitshift>
 8004594:	4603      	mov	r3, r0
 8004596:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	223f      	movs	r2, #63	@ 0x3f
 80045a2:	409a      	lsls	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	609a      	str	r2, [r3, #8]
 80045a8:	e081      	b.n	80046ae <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a24      	ldr	r2, [pc, #144]	@ (8004640 <HAL_DMA_DeInit+0x260>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d022      	beq.n	80045fa <HAL_DMA_DeInit+0x21a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a22      	ldr	r2, [pc, #136]	@ (8004644 <HAL_DMA_DeInit+0x264>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d01d      	beq.n	80045fa <HAL_DMA_DeInit+0x21a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a21      	ldr	r2, [pc, #132]	@ (8004648 <HAL_DMA_DeInit+0x268>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d018      	beq.n	80045fa <HAL_DMA_DeInit+0x21a>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1f      	ldr	r2, [pc, #124]	@ (800464c <HAL_DMA_DeInit+0x26c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <HAL_DMA_DeInit+0x21a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004650 <HAL_DMA_DeInit+0x270>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00e      	beq.n	80045fa <HAL_DMA_DeInit+0x21a>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004654 <HAL_DMA_DeInit+0x274>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d009      	beq.n	80045fa <HAL_DMA_DeInit+0x21a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004658 <HAL_DMA_DeInit+0x278>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_DMA_DeInit+0x21a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a19      	ldr	r2, [pc, #100]	@ (800465c <HAL_DMA_DeInit+0x27c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d132      	bne.n	8004660 <HAL_DMA_DeInit+0x280>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e031      	b.n	8004662 <HAL_DMA_DeInit+0x282>
 80045fe:	bf00      	nop
 8004600:	40020010 	.word	0x40020010
 8004604:	40020028 	.word	0x40020028
 8004608:	40020040 	.word	0x40020040
 800460c:	40020058 	.word	0x40020058
 8004610:	40020070 	.word	0x40020070
 8004614:	40020088 	.word	0x40020088
 8004618:	400200a0 	.word	0x400200a0
 800461c:	400200b8 	.word	0x400200b8
 8004620:	40020410 	.word	0x40020410
 8004624:	40020428 	.word	0x40020428
 8004628:	40020440 	.word	0x40020440
 800462c:	40020458 	.word	0x40020458
 8004630:	40020470 	.word	0x40020470
 8004634:	40020488 	.word	0x40020488
 8004638:	400204a0 	.word	0x400204a0
 800463c:	400204b8 	.word	0x400204b8
 8004640:	58025408 	.word	0x58025408
 8004644:	5802541c 	.word	0x5802541c
 8004648:	58025430 	.word	0x58025430
 800464c:	58025444 	.word	0x58025444
 8004650:	58025458 	.word	0x58025458
 8004654:	5802546c 	.word	0x5802546c
 8004658:	58025480 	.word	0x58025480
 800465c:	58025494 	.word	0x58025494
 8004660:	2300      	movs	r3, #0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d021      	beq.n	80046aa <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2200      	movs	r2, #0
 8004674:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2200      	movs	r2, #0
 800467c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2200      	movs	r2, #0
 8004684:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2200      	movs	r2, #0
 800468c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f002 f900 	bl	8006894 <DMA_CalcBaseAndBitshift>
 8004694:	4603      	mov	r3, r0
 8004696:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2201      	movs	r2, #1
 80046a2:	409a      	lsls	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	e001      	b.n	80046ae <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e04a      	b.n	8004744 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f002 fa1e 	bl	8006af0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80046cc:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00f      	beq.n	80046f6 <HAL_DMA_DeInit+0x316>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d80b      	bhi.n	80046f6 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f002 faa0 	bl	8006c24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046f4:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e226      	b.n	8004bb6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_DMA_Start_IT+0x2a>
 8004772:	2302      	movs	r3, #2
 8004774:	e21f      	b.n	8004bb6 <HAL_DMA_Start_IT+0x46a>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	f040 820a 	bne.w	8004ba0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a68      	ldr	r2, [pc, #416]	@ (8004940 <HAL_DMA_Start_IT+0x1f4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d04a      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a66      	ldr	r2, [pc, #408]	@ (8004944 <HAL_DMA_Start_IT+0x1f8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d045      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a65      	ldr	r2, [pc, #404]	@ (8004948 <HAL_DMA_Start_IT+0x1fc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d040      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a63      	ldr	r2, [pc, #396]	@ (800494c <HAL_DMA_Start_IT+0x200>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d03b      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a62      	ldr	r2, [pc, #392]	@ (8004950 <HAL_DMA_Start_IT+0x204>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d036      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a60      	ldr	r2, [pc, #384]	@ (8004954 <HAL_DMA_Start_IT+0x208>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d031      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a5f      	ldr	r2, [pc, #380]	@ (8004958 <HAL_DMA_Start_IT+0x20c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d02c      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a5d      	ldr	r2, [pc, #372]	@ (800495c <HAL_DMA_Start_IT+0x210>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d027      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004960 <HAL_DMA_Start_IT+0x214>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d022      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a5a      	ldr	r2, [pc, #360]	@ (8004964 <HAL_DMA_Start_IT+0x218>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01d      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a59      	ldr	r2, [pc, #356]	@ (8004968 <HAL_DMA_Start_IT+0x21c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a57      	ldr	r2, [pc, #348]	@ (800496c <HAL_DMA_Start_IT+0x220>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a56      	ldr	r2, [pc, #344]	@ (8004970 <HAL_DMA_Start_IT+0x224>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a54      	ldr	r2, [pc, #336]	@ (8004974 <HAL_DMA_Start_IT+0x228>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a53      	ldr	r2, [pc, #332]	@ (8004978 <HAL_DMA_Start_IT+0x22c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_DMA_Start_IT+0xee>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a51      	ldr	r2, [pc, #324]	@ (800497c <HAL_DMA_Start_IT+0x230>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d108      	bne.n	800484c <HAL_DMA_Start_IT+0x100>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0201 	bic.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e007      	b.n	800485c <HAL_DMA_Start_IT+0x110>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f001 fe6a 	bl	800653c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a34      	ldr	r2, [pc, #208]	@ (8004940 <HAL_DMA_Start_IT+0x1f4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d04a      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a33      	ldr	r2, [pc, #204]	@ (8004944 <HAL_DMA_Start_IT+0x1f8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d045      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a31      	ldr	r2, [pc, #196]	@ (8004948 <HAL_DMA_Start_IT+0x1fc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d040      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a30      	ldr	r2, [pc, #192]	@ (800494c <HAL_DMA_Start_IT+0x200>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d03b      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a2e      	ldr	r2, [pc, #184]	@ (8004950 <HAL_DMA_Start_IT+0x204>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d036      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a2d      	ldr	r2, [pc, #180]	@ (8004954 <HAL_DMA_Start_IT+0x208>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d031      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004958 <HAL_DMA_Start_IT+0x20c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d02c      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a2a      	ldr	r2, [pc, #168]	@ (800495c <HAL_DMA_Start_IT+0x210>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d027      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a28      	ldr	r2, [pc, #160]	@ (8004960 <HAL_DMA_Start_IT+0x214>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d022      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a27      	ldr	r2, [pc, #156]	@ (8004964 <HAL_DMA_Start_IT+0x218>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d01d      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a25      	ldr	r2, [pc, #148]	@ (8004968 <HAL_DMA_Start_IT+0x21c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d018      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a24      	ldr	r2, [pc, #144]	@ (800496c <HAL_DMA_Start_IT+0x220>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d013      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a22      	ldr	r2, [pc, #136]	@ (8004970 <HAL_DMA_Start_IT+0x224>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d00e      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a21      	ldr	r2, [pc, #132]	@ (8004974 <HAL_DMA_Start_IT+0x228>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004978 <HAL_DMA_Start_IT+0x22c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_DMA_Start_IT+0x1bc>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1e      	ldr	r2, [pc, #120]	@ (800497c <HAL_DMA_Start_IT+0x230>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d101      	bne.n	800490c <HAL_DMA_Start_IT+0x1c0>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <HAL_DMA_Start_IT+0x1c2>
 800490c:	2300      	movs	r3, #0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d036      	beq.n	8004980 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 021e 	bic.w	r2, r3, #30
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0216 	orr.w	r2, r2, #22
 8004924:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d03e      	beq.n	80049ac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0208 	orr.w	r2, r2, #8
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e035      	b.n	80049ac <HAL_DMA_Start_IT+0x260>
 8004940:	40020010 	.word	0x40020010
 8004944:	40020028 	.word	0x40020028
 8004948:	40020040 	.word	0x40020040
 800494c:	40020058 	.word	0x40020058
 8004950:	40020070 	.word	0x40020070
 8004954:	40020088 	.word	0x40020088
 8004958:	400200a0 	.word	0x400200a0
 800495c:	400200b8 	.word	0x400200b8
 8004960:	40020410 	.word	0x40020410
 8004964:	40020428 	.word	0x40020428
 8004968:	40020440 	.word	0x40020440
 800496c:	40020458 	.word	0x40020458
 8004970:	40020470 	.word	0x40020470
 8004974:	40020488 	.word	0x40020488
 8004978:	400204a0 	.word	0x400204a0
 800497c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 020e 	bic.w	r2, r3, #14
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 020a 	orr.w	r2, r2, #10
 8004992:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0204 	orr.w	r2, r2, #4
 80049aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a83      	ldr	r2, [pc, #524]	@ (8004bc0 <HAL_DMA_Start_IT+0x474>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d072      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a82      	ldr	r2, [pc, #520]	@ (8004bc4 <HAL_DMA_Start_IT+0x478>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d06d      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a80      	ldr	r2, [pc, #512]	@ (8004bc8 <HAL_DMA_Start_IT+0x47c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d068      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a7f      	ldr	r2, [pc, #508]	@ (8004bcc <HAL_DMA_Start_IT+0x480>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d063      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a7d      	ldr	r2, [pc, #500]	@ (8004bd0 <HAL_DMA_Start_IT+0x484>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d05e      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a7c      	ldr	r2, [pc, #496]	@ (8004bd4 <HAL_DMA_Start_IT+0x488>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d059      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a7a      	ldr	r2, [pc, #488]	@ (8004bd8 <HAL_DMA_Start_IT+0x48c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d054      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a79      	ldr	r2, [pc, #484]	@ (8004bdc <HAL_DMA_Start_IT+0x490>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d04f      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a77      	ldr	r2, [pc, #476]	@ (8004be0 <HAL_DMA_Start_IT+0x494>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d04a      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a76      	ldr	r2, [pc, #472]	@ (8004be4 <HAL_DMA_Start_IT+0x498>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d045      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a74      	ldr	r2, [pc, #464]	@ (8004be8 <HAL_DMA_Start_IT+0x49c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d040      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a73      	ldr	r2, [pc, #460]	@ (8004bec <HAL_DMA_Start_IT+0x4a0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d03b      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a71      	ldr	r2, [pc, #452]	@ (8004bf0 <HAL_DMA_Start_IT+0x4a4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d036      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a70      	ldr	r2, [pc, #448]	@ (8004bf4 <HAL_DMA_Start_IT+0x4a8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d031      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a6e      	ldr	r2, [pc, #440]	@ (8004bf8 <HAL_DMA_Start_IT+0x4ac>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d02c      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a6d      	ldr	r2, [pc, #436]	@ (8004bfc <HAL_DMA_Start_IT+0x4b0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d027      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a6b      	ldr	r2, [pc, #428]	@ (8004c00 <HAL_DMA_Start_IT+0x4b4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d022      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a6a      	ldr	r2, [pc, #424]	@ (8004c04 <HAL_DMA_Start_IT+0x4b8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d01d      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a68      	ldr	r2, [pc, #416]	@ (8004c08 <HAL_DMA_Start_IT+0x4bc>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d018      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a67      	ldr	r2, [pc, #412]	@ (8004c0c <HAL_DMA_Start_IT+0x4c0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d013      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a65      	ldr	r2, [pc, #404]	@ (8004c10 <HAL_DMA_Start_IT+0x4c4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00e      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a64      	ldr	r2, [pc, #400]	@ (8004c14 <HAL_DMA_Start_IT+0x4c8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d009      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a62      	ldr	r2, [pc, #392]	@ (8004c18 <HAL_DMA_Start_IT+0x4cc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d004      	beq.n	8004a9c <HAL_DMA_Start_IT+0x350>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a61      	ldr	r2, [pc, #388]	@ (8004c1c <HAL_DMA_Start_IT+0x4d0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d101      	bne.n	8004aa0 <HAL_DMA_Start_IT+0x354>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <HAL_DMA_Start_IT+0x356>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01a      	beq.n	8004adc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004abe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ac2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d007      	beq.n	8004adc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ada:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a37      	ldr	r2, [pc, #220]	@ (8004bc0 <HAL_DMA_Start_IT+0x474>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d04a      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a36      	ldr	r2, [pc, #216]	@ (8004bc4 <HAL_DMA_Start_IT+0x478>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d045      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a34      	ldr	r2, [pc, #208]	@ (8004bc8 <HAL_DMA_Start_IT+0x47c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d040      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a33      	ldr	r2, [pc, #204]	@ (8004bcc <HAL_DMA_Start_IT+0x480>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d03b      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a31      	ldr	r2, [pc, #196]	@ (8004bd0 <HAL_DMA_Start_IT+0x484>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d036      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a30      	ldr	r2, [pc, #192]	@ (8004bd4 <HAL_DMA_Start_IT+0x488>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d031      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8004bd8 <HAL_DMA_Start_IT+0x48c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d02c      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2d      	ldr	r2, [pc, #180]	@ (8004bdc <HAL_DMA_Start_IT+0x490>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d027      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a2b      	ldr	r2, [pc, #172]	@ (8004be0 <HAL_DMA_Start_IT+0x494>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d022      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004be4 <HAL_DMA_Start_IT+0x498>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d01d      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a28      	ldr	r2, [pc, #160]	@ (8004be8 <HAL_DMA_Start_IT+0x49c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d018      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a27      	ldr	r2, [pc, #156]	@ (8004bec <HAL_DMA_Start_IT+0x4a0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a25      	ldr	r2, [pc, #148]	@ (8004bf0 <HAL_DMA_Start_IT+0x4a4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00e      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a24      	ldr	r2, [pc, #144]	@ (8004bf4 <HAL_DMA_Start_IT+0x4a8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a22      	ldr	r2, [pc, #136]	@ (8004bf8 <HAL_DMA_Start_IT+0x4ac>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_DMA_Start_IT+0x430>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a21      	ldr	r2, [pc, #132]	@ (8004bfc <HAL_DMA_Start_IT+0x4b0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <HAL_DMA_Start_IT+0x442>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	e012      	b.n	8004bb4 <HAL_DMA_Start_IT+0x468>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e009      	b.n	8004bb4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ba6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40020010 	.word	0x40020010
 8004bc4:	40020028 	.word	0x40020028
 8004bc8:	40020040 	.word	0x40020040
 8004bcc:	40020058 	.word	0x40020058
 8004bd0:	40020070 	.word	0x40020070
 8004bd4:	40020088 	.word	0x40020088
 8004bd8:	400200a0 	.word	0x400200a0
 8004bdc:	400200b8 	.word	0x400200b8
 8004be0:	40020410 	.word	0x40020410
 8004be4:	40020428 	.word	0x40020428
 8004be8:	40020440 	.word	0x40020440
 8004bec:	40020458 	.word	0x40020458
 8004bf0:	40020470 	.word	0x40020470
 8004bf4:	40020488 	.word	0x40020488
 8004bf8:	400204a0 	.word	0x400204a0
 8004bfc:	400204b8 	.word	0x400204b8
 8004c00:	58025408 	.word	0x58025408
 8004c04:	5802541c 	.word	0x5802541c
 8004c08:	58025430 	.word	0x58025430
 8004c0c:	58025444 	.word	0x58025444
 8004c10:	58025458 	.word	0x58025458
 8004c14:	5802546c 	.word	0x5802546c
 8004c18:	58025480 	.word	0x58025480
 8004c1c:	58025494 	.word	0x58025494

08004c20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004c28:	f7fc fef2 	bl	8001a10 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e2dc      	b.n	80051f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d008      	beq.n	8004c56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2280      	movs	r2, #128	@ 0x80
 8004c48:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e2cd      	b.n	80051f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a76      	ldr	r2, [pc, #472]	@ (8004e34 <HAL_DMA_Abort+0x214>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d04a      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a74      	ldr	r2, [pc, #464]	@ (8004e38 <HAL_DMA_Abort+0x218>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d045      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a73      	ldr	r2, [pc, #460]	@ (8004e3c <HAL_DMA_Abort+0x21c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d040      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a71      	ldr	r2, [pc, #452]	@ (8004e40 <HAL_DMA_Abort+0x220>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d03b      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a70      	ldr	r2, [pc, #448]	@ (8004e44 <HAL_DMA_Abort+0x224>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d036      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e48 <HAL_DMA_Abort+0x228>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d031      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a6d      	ldr	r2, [pc, #436]	@ (8004e4c <HAL_DMA_Abort+0x22c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d02c      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a6b      	ldr	r2, [pc, #428]	@ (8004e50 <HAL_DMA_Abort+0x230>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d027      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a6a      	ldr	r2, [pc, #424]	@ (8004e54 <HAL_DMA_Abort+0x234>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d022      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a68      	ldr	r2, [pc, #416]	@ (8004e58 <HAL_DMA_Abort+0x238>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01d      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a67      	ldr	r2, [pc, #412]	@ (8004e5c <HAL_DMA_Abort+0x23c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d018      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a65      	ldr	r2, [pc, #404]	@ (8004e60 <HAL_DMA_Abort+0x240>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d013      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a64      	ldr	r2, [pc, #400]	@ (8004e64 <HAL_DMA_Abort+0x244>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00e      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a62      	ldr	r2, [pc, #392]	@ (8004e68 <HAL_DMA_Abort+0x248>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d009      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a61      	ldr	r2, [pc, #388]	@ (8004e6c <HAL_DMA_Abort+0x24c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d004      	beq.n	8004cf6 <HAL_DMA_Abort+0xd6>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a5f      	ldr	r2, [pc, #380]	@ (8004e70 <HAL_DMA_Abort+0x250>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d101      	bne.n	8004cfa <HAL_DMA_Abort+0xda>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <HAL_DMA_Abort+0xdc>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d013      	beq.n	8004d28 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 021e 	bic.w	r2, r2, #30
 8004d0e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d1e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	e00a      	b.n	8004d3e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 020e 	bic.w	r2, r2, #14
 8004d36:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a3c      	ldr	r2, [pc, #240]	@ (8004e34 <HAL_DMA_Abort+0x214>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d072      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e38 <HAL_DMA_Abort+0x218>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d06d      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a39      	ldr	r2, [pc, #228]	@ (8004e3c <HAL_DMA_Abort+0x21c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d068      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a37      	ldr	r2, [pc, #220]	@ (8004e40 <HAL_DMA_Abort+0x220>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d063      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a36      	ldr	r2, [pc, #216]	@ (8004e44 <HAL_DMA_Abort+0x224>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d05e      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a34      	ldr	r2, [pc, #208]	@ (8004e48 <HAL_DMA_Abort+0x228>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d059      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a33      	ldr	r2, [pc, #204]	@ (8004e4c <HAL_DMA_Abort+0x22c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d054      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a31      	ldr	r2, [pc, #196]	@ (8004e50 <HAL_DMA_Abort+0x230>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d04f      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a30      	ldr	r2, [pc, #192]	@ (8004e54 <HAL_DMA_Abort+0x234>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d04a      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004e58 <HAL_DMA_Abort+0x238>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d045      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e5c <HAL_DMA_Abort+0x23c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d040      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a2b      	ldr	r2, [pc, #172]	@ (8004e60 <HAL_DMA_Abort+0x240>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d03b      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a2a      	ldr	r2, [pc, #168]	@ (8004e64 <HAL_DMA_Abort+0x244>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d036      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a28      	ldr	r2, [pc, #160]	@ (8004e68 <HAL_DMA_Abort+0x248>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d031      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a27      	ldr	r2, [pc, #156]	@ (8004e6c <HAL_DMA_Abort+0x24c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d02c      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a25      	ldr	r2, [pc, #148]	@ (8004e70 <HAL_DMA_Abort+0x250>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d027      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a24      	ldr	r2, [pc, #144]	@ (8004e74 <HAL_DMA_Abort+0x254>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d022      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a22      	ldr	r2, [pc, #136]	@ (8004e78 <HAL_DMA_Abort+0x258>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01d      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a21      	ldr	r2, [pc, #132]	@ (8004e7c <HAL_DMA_Abort+0x25c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d018      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1f      	ldr	r2, [pc, #124]	@ (8004e80 <HAL_DMA_Abort+0x260>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e84 <HAL_DMA_Abort+0x264>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1c      	ldr	r2, [pc, #112]	@ (8004e88 <HAL_DMA_Abort+0x268>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d009      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004e8c <HAL_DMA_Abort+0x26c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_DMA_Abort+0x20e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a19      	ldr	r2, [pc, #100]	@ (8004e90 <HAL_DMA_Abort+0x270>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d132      	bne.n	8004e94 <HAL_DMA_Abort+0x274>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e031      	b.n	8004e96 <HAL_DMA_Abort+0x276>
 8004e32:	bf00      	nop
 8004e34:	40020010 	.word	0x40020010
 8004e38:	40020028 	.word	0x40020028
 8004e3c:	40020040 	.word	0x40020040
 8004e40:	40020058 	.word	0x40020058
 8004e44:	40020070 	.word	0x40020070
 8004e48:	40020088 	.word	0x40020088
 8004e4c:	400200a0 	.word	0x400200a0
 8004e50:	400200b8 	.word	0x400200b8
 8004e54:	40020410 	.word	0x40020410
 8004e58:	40020428 	.word	0x40020428
 8004e5c:	40020440 	.word	0x40020440
 8004e60:	40020458 	.word	0x40020458
 8004e64:	40020470 	.word	0x40020470
 8004e68:	40020488 	.word	0x40020488
 8004e6c:	400204a0 	.word	0x400204a0
 8004e70:	400204b8 	.word	0x400204b8
 8004e74:	58025408 	.word	0x58025408
 8004e78:	5802541c 	.word	0x5802541c
 8004e7c:	58025430 	.word	0x58025430
 8004e80:	58025444 	.word	0x58025444
 8004e84:	58025458 	.word	0x58025458
 8004e88:	5802546c 	.word	0x5802546c
 8004e8c:	58025480 	.word	0x58025480
 8004e90:	58025494 	.word	0x58025494
 8004e94:	2300      	movs	r3, #0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6d      	ldr	r2, [pc, #436]	@ (8005064 <HAL_DMA_Abort+0x444>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d04a      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a6b      	ldr	r2, [pc, #428]	@ (8005068 <HAL_DMA_Abort+0x448>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d045      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a6a      	ldr	r2, [pc, #424]	@ (800506c <HAL_DMA_Abort+0x44c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d040      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a68      	ldr	r2, [pc, #416]	@ (8005070 <HAL_DMA_Abort+0x450>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d03b      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a67      	ldr	r2, [pc, #412]	@ (8005074 <HAL_DMA_Abort+0x454>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d036      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a65      	ldr	r2, [pc, #404]	@ (8005078 <HAL_DMA_Abort+0x458>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d031      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a64      	ldr	r2, [pc, #400]	@ (800507c <HAL_DMA_Abort+0x45c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d02c      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a62      	ldr	r2, [pc, #392]	@ (8005080 <HAL_DMA_Abort+0x460>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d027      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a61      	ldr	r2, [pc, #388]	@ (8005084 <HAL_DMA_Abort+0x464>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d022      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a5f      	ldr	r2, [pc, #380]	@ (8005088 <HAL_DMA_Abort+0x468>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d01d      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5e      	ldr	r2, [pc, #376]	@ (800508c <HAL_DMA_Abort+0x46c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d018      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a5c      	ldr	r2, [pc, #368]	@ (8005090 <HAL_DMA_Abort+0x470>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d013      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5b      	ldr	r2, [pc, #364]	@ (8005094 <HAL_DMA_Abort+0x474>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00e      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a59      	ldr	r2, [pc, #356]	@ (8005098 <HAL_DMA_Abort+0x478>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d009      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a58      	ldr	r2, [pc, #352]	@ (800509c <HAL_DMA_Abort+0x47c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d004      	beq.n	8004f4a <HAL_DMA_Abort+0x32a>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a56      	ldr	r2, [pc, #344]	@ (80050a0 <HAL_DMA_Abort+0x480>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d108      	bne.n	8004f5c <HAL_DMA_Abort+0x33c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	e007      	b.n	8004f6c <HAL_DMA_Abort+0x34c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0201 	bic.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f6c:	e013      	b.n	8004f96 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f6e:	f7fc fd4f 	bl	8001a10 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b05      	cmp	r3, #5
 8004f7a:	d90c      	bls.n	8004f96 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2203      	movs	r2, #3
 8004f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e12d      	b.n	80051f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e5      	bne.n	8004f6e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2f      	ldr	r2, [pc, #188]	@ (8005064 <HAL_DMA_Abort+0x444>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d04a      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8005068 <HAL_DMA_Abort+0x448>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d045      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a2c      	ldr	r2, [pc, #176]	@ (800506c <HAL_DMA_Abort+0x44c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d040      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8005070 <HAL_DMA_Abort+0x450>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d03b      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a29      	ldr	r2, [pc, #164]	@ (8005074 <HAL_DMA_Abort+0x454>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d036      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a27      	ldr	r2, [pc, #156]	@ (8005078 <HAL_DMA_Abort+0x458>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d031      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a26      	ldr	r2, [pc, #152]	@ (800507c <HAL_DMA_Abort+0x45c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d02c      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a24      	ldr	r2, [pc, #144]	@ (8005080 <HAL_DMA_Abort+0x460>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d027      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a23      	ldr	r2, [pc, #140]	@ (8005084 <HAL_DMA_Abort+0x464>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d022      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a21      	ldr	r2, [pc, #132]	@ (8005088 <HAL_DMA_Abort+0x468>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01d      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a20      	ldr	r2, [pc, #128]	@ (800508c <HAL_DMA_Abort+0x46c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d018      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1e      	ldr	r2, [pc, #120]	@ (8005090 <HAL_DMA_Abort+0x470>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1d      	ldr	r2, [pc, #116]	@ (8005094 <HAL_DMA_Abort+0x474>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1b      	ldr	r2, [pc, #108]	@ (8005098 <HAL_DMA_Abort+0x478>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1a      	ldr	r2, [pc, #104]	@ (800509c <HAL_DMA_Abort+0x47c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_DMA_Abort+0x422>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a18      	ldr	r2, [pc, #96]	@ (80050a0 <HAL_DMA_Abort+0x480>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d101      	bne.n	8005046 <HAL_DMA_Abort+0x426>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <HAL_DMA_Abort+0x428>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d02b      	beq.n	80050a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005050:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	223f      	movs	r2, #63	@ 0x3f
 800505c:	409a      	lsls	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	609a      	str	r2, [r3, #8]
 8005062:	e02a      	b.n	80050ba <HAL_DMA_Abort+0x49a>
 8005064:	40020010 	.word	0x40020010
 8005068:	40020028 	.word	0x40020028
 800506c:	40020040 	.word	0x40020040
 8005070:	40020058 	.word	0x40020058
 8005074:	40020070 	.word	0x40020070
 8005078:	40020088 	.word	0x40020088
 800507c:	400200a0 	.word	0x400200a0
 8005080:	400200b8 	.word	0x400200b8
 8005084:	40020410 	.word	0x40020410
 8005088:	40020428 	.word	0x40020428
 800508c:	40020440 	.word	0x40020440
 8005090:	40020458 	.word	0x40020458
 8005094:	40020470 	.word	0x40020470
 8005098:	40020488 	.word	0x40020488
 800509c:	400204a0 	.word	0x400204a0
 80050a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ae:	f003 031f 	and.w	r3, r3, #31
 80050b2:	2201      	movs	r2, #1
 80050b4:	409a      	lsls	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a4f      	ldr	r2, [pc, #316]	@ (80051fc <HAL_DMA_Abort+0x5dc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d072      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a4d      	ldr	r2, [pc, #308]	@ (8005200 <HAL_DMA_Abort+0x5e0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d06d      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005204 <HAL_DMA_Abort+0x5e4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d068      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005208 <HAL_DMA_Abort+0x5e8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d063      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a49      	ldr	r2, [pc, #292]	@ (800520c <HAL_DMA_Abort+0x5ec>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d05e      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a47      	ldr	r2, [pc, #284]	@ (8005210 <HAL_DMA_Abort+0x5f0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d059      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a46      	ldr	r2, [pc, #280]	@ (8005214 <HAL_DMA_Abort+0x5f4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d054      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a44      	ldr	r2, [pc, #272]	@ (8005218 <HAL_DMA_Abort+0x5f8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d04f      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a43      	ldr	r2, [pc, #268]	@ (800521c <HAL_DMA_Abort+0x5fc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d04a      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a41      	ldr	r2, [pc, #260]	@ (8005220 <HAL_DMA_Abort+0x600>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d045      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a40      	ldr	r2, [pc, #256]	@ (8005224 <HAL_DMA_Abort+0x604>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d040      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3e      	ldr	r2, [pc, #248]	@ (8005228 <HAL_DMA_Abort+0x608>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d03b      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a3d      	ldr	r2, [pc, #244]	@ (800522c <HAL_DMA_Abort+0x60c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d036      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a3b      	ldr	r2, [pc, #236]	@ (8005230 <HAL_DMA_Abort+0x610>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d031      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a3a      	ldr	r2, [pc, #232]	@ (8005234 <HAL_DMA_Abort+0x614>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d02c      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a38      	ldr	r2, [pc, #224]	@ (8005238 <HAL_DMA_Abort+0x618>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d027      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a37      	ldr	r2, [pc, #220]	@ (800523c <HAL_DMA_Abort+0x61c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d022      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a35      	ldr	r2, [pc, #212]	@ (8005240 <HAL_DMA_Abort+0x620>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01d      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a34      	ldr	r2, [pc, #208]	@ (8005244 <HAL_DMA_Abort+0x624>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d018      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a32      	ldr	r2, [pc, #200]	@ (8005248 <HAL_DMA_Abort+0x628>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a31      	ldr	r2, [pc, #196]	@ (800524c <HAL_DMA_Abort+0x62c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00e      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a2f      	ldr	r2, [pc, #188]	@ (8005250 <HAL_DMA_Abort+0x630>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d009      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a2e      	ldr	r2, [pc, #184]	@ (8005254 <HAL_DMA_Abort+0x634>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d004      	beq.n	80051aa <HAL_DMA_Abort+0x58a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005258 <HAL_DMA_Abort+0x638>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d101      	bne.n	80051ae <HAL_DMA_Abort+0x58e>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_DMA_Abort+0x590>
 80051ae:	2300      	movs	r3, #0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d015      	beq.n	80051e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80051bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00c      	beq.n	80051e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40020010 	.word	0x40020010
 8005200:	40020028 	.word	0x40020028
 8005204:	40020040 	.word	0x40020040
 8005208:	40020058 	.word	0x40020058
 800520c:	40020070 	.word	0x40020070
 8005210:	40020088 	.word	0x40020088
 8005214:	400200a0 	.word	0x400200a0
 8005218:	400200b8 	.word	0x400200b8
 800521c:	40020410 	.word	0x40020410
 8005220:	40020428 	.word	0x40020428
 8005224:	40020440 	.word	0x40020440
 8005228:	40020458 	.word	0x40020458
 800522c:	40020470 	.word	0x40020470
 8005230:	40020488 	.word	0x40020488
 8005234:	400204a0 	.word	0x400204a0
 8005238:	400204b8 	.word	0x400204b8
 800523c:	58025408 	.word	0x58025408
 8005240:	5802541c 	.word	0x5802541c
 8005244:	58025430 	.word	0x58025430
 8005248:	58025444 	.word	0x58025444
 800524c:	58025458 	.word	0x58025458
 8005250:	5802546c 	.word	0x5802546c
 8005254:	58025480 	.word	0x58025480
 8005258:	58025494 	.word	0x58025494

0800525c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e237      	b.n	80056de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d004      	beq.n	8005284 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2280      	movs	r2, #128	@ 0x80
 800527e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e22c      	b.n	80056de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a5c      	ldr	r2, [pc, #368]	@ (80053fc <HAL_DMA_Abort_IT+0x1a0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d04a      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a5b      	ldr	r2, [pc, #364]	@ (8005400 <HAL_DMA_Abort_IT+0x1a4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d045      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a59      	ldr	r2, [pc, #356]	@ (8005404 <HAL_DMA_Abort_IT+0x1a8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d040      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a58      	ldr	r2, [pc, #352]	@ (8005408 <HAL_DMA_Abort_IT+0x1ac>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d03b      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a56      	ldr	r2, [pc, #344]	@ (800540c <HAL_DMA_Abort_IT+0x1b0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d036      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a55      	ldr	r2, [pc, #340]	@ (8005410 <HAL_DMA_Abort_IT+0x1b4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d031      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a53      	ldr	r2, [pc, #332]	@ (8005414 <HAL_DMA_Abort_IT+0x1b8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d02c      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a52      	ldr	r2, [pc, #328]	@ (8005418 <HAL_DMA_Abort_IT+0x1bc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d027      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a50      	ldr	r2, [pc, #320]	@ (800541c <HAL_DMA_Abort_IT+0x1c0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d022      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a4f      	ldr	r2, [pc, #316]	@ (8005420 <HAL_DMA_Abort_IT+0x1c4>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d01d      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a4d      	ldr	r2, [pc, #308]	@ (8005424 <HAL_DMA_Abort_IT+0x1c8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d018      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005428 <HAL_DMA_Abort_IT+0x1cc>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a4a      	ldr	r2, [pc, #296]	@ (800542c <HAL_DMA_Abort_IT+0x1d0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a49      	ldr	r2, [pc, #292]	@ (8005430 <HAL_DMA_Abort_IT+0x1d4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d009      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a47      	ldr	r2, [pc, #284]	@ (8005434 <HAL_DMA_Abort_IT+0x1d8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_DMA_Abort_IT+0xc8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a46      	ldr	r2, [pc, #280]	@ (8005438 <HAL_DMA_Abort_IT+0x1dc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d101      	bne.n	8005328 <HAL_DMA_Abort_IT+0xcc>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_DMA_Abort_IT+0xce>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 8086 	beq.w	800543c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2204      	movs	r2, #4
 8005334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a2f      	ldr	r2, [pc, #188]	@ (80053fc <HAL_DMA_Abort_IT+0x1a0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d04a      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2e      	ldr	r2, [pc, #184]	@ (8005400 <HAL_DMA_Abort_IT+0x1a4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d045      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a2c      	ldr	r2, [pc, #176]	@ (8005404 <HAL_DMA_Abort_IT+0x1a8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d040      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2b      	ldr	r2, [pc, #172]	@ (8005408 <HAL_DMA_Abort_IT+0x1ac>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d03b      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a29      	ldr	r2, [pc, #164]	@ (800540c <HAL_DMA_Abort_IT+0x1b0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d036      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a28      	ldr	r2, [pc, #160]	@ (8005410 <HAL_DMA_Abort_IT+0x1b4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d031      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a26      	ldr	r2, [pc, #152]	@ (8005414 <HAL_DMA_Abort_IT+0x1b8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d02c      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a25      	ldr	r2, [pc, #148]	@ (8005418 <HAL_DMA_Abort_IT+0x1bc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d027      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a23      	ldr	r2, [pc, #140]	@ (800541c <HAL_DMA_Abort_IT+0x1c0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d022      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a22      	ldr	r2, [pc, #136]	@ (8005420 <HAL_DMA_Abort_IT+0x1c4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d01d      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a20      	ldr	r2, [pc, #128]	@ (8005424 <HAL_DMA_Abort_IT+0x1c8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005428 <HAL_DMA_Abort_IT+0x1cc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1d      	ldr	r2, [pc, #116]	@ (800542c <HAL_DMA_Abort_IT+0x1d0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1c      	ldr	r2, [pc, #112]	@ (8005430 <HAL_DMA_Abort_IT+0x1d4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005434 <HAL_DMA_Abort_IT+0x1d8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x17c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a19      	ldr	r2, [pc, #100]	@ (8005438 <HAL_DMA_Abort_IT+0x1dc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d108      	bne.n	80053ea <HAL_DMA_Abort_IT+0x18e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	e178      	b.n	80056dc <HAL_DMA_Abort_IT+0x480>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e16f      	b.n	80056dc <HAL_DMA_Abort_IT+0x480>
 80053fc:	40020010 	.word	0x40020010
 8005400:	40020028 	.word	0x40020028
 8005404:	40020040 	.word	0x40020040
 8005408:	40020058 	.word	0x40020058
 800540c:	40020070 	.word	0x40020070
 8005410:	40020088 	.word	0x40020088
 8005414:	400200a0 	.word	0x400200a0
 8005418:	400200b8 	.word	0x400200b8
 800541c:	40020410 	.word	0x40020410
 8005420:	40020428 	.word	0x40020428
 8005424:	40020440 	.word	0x40020440
 8005428:	40020458 	.word	0x40020458
 800542c:	40020470 	.word	0x40020470
 8005430:	40020488 	.word	0x40020488
 8005434:	400204a0 	.word	0x400204a0
 8005438:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 020e 	bic.w	r2, r2, #14
 800544a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a6c      	ldr	r2, [pc, #432]	@ (8005604 <HAL_DMA_Abort_IT+0x3a8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d04a      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a6b      	ldr	r2, [pc, #428]	@ (8005608 <HAL_DMA_Abort_IT+0x3ac>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d045      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a69      	ldr	r2, [pc, #420]	@ (800560c <HAL_DMA_Abort_IT+0x3b0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d040      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a68      	ldr	r2, [pc, #416]	@ (8005610 <HAL_DMA_Abort_IT+0x3b4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d03b      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a66      	ldr	r2, [pc, #408]	@ (8005614 <HAL_DMA_Abort_IT+0x3b8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d036      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a65      	ldr	r2, [pc, #404]	@ (8005618 <HAL_DMA_Abort_IT+0x3bc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d031      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a63      	ldr	r2, [pc, #396]	@ (800561c <HAL_DMA_Abort_IT+0x3c0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d02c      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a62      	ldr	r2, [pc, #392]	@ (8005620 <HAL_DMA_Abort_IT+0x3c4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d027      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a60      	ldr	r2, [pc, #384]	@ (8005624 <HAL_DMA_Abort_IT+0x3c8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d022      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a5f      	ldr	r2, [pc, #380]	@ (8005628 <HAL_DMA_Abort_IT+0x3cc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d01d      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a5d      	ldr	r2, [pc, #372]	@ (800562c <HAL_DMA_Abort_IT+0x3d0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d018      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a5c      	ldr	r2, [pc, #368]	@ (8005630 <HAL_DMA_Abort_IT+0x3d4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005634 <HAL_DMA_Abort_IT+0x3d8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00e      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a59      	ldr	r2, [pc, #356]	@ (8005638 <HAL_DMA_Abort_IT+0x3dc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d009      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a57      	ldr	r2, [pc, #348]	@ (800563c <HAL_DMA_Abort_IT+0x3e0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <HAL_DMA_Abort_IT+0x290>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a56      	ldr	r2, [pc, #344]	@ (8005640 <HAL_DMA_Abort_IT+0x3e4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d108      	bne.n	80054fe <HAL_DMA_Abort_IT+0x2a2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0201 	bic.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e007      	b.n	800550e <HAL_DMA_Abort_IT+0x2b2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a3c      	ldr	r2, [pc, #240]	@ (8005604 <HAL_DMA_Abort_IT+0x3a8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d072      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a3a      	ldr	r2, [pc, #232]	@ (8005608 <HAL_DMA_Abort_IT+0x3ac>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d06d      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a39      	ldr	r2, [pc, #228]	@ (800560c <HAL_DMA_Abort_IT+0x3b0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d068      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a37      	ldr	r2, [pc, #220]	@ (8005610 <HAL_DMA_Abort_IT+0x3b4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d063      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a36      	ldr	r2, [pc, #216]	@ (8005614 <HAL_DMA_Abort_IT+0x3b8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d05e      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a34      	ldr	r2, [pc, #208]	@ (8005618 <HAL_DMA_Abort_IT+0x3bc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d059      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a33      	ldr	r2, [pc, #204]	@ (800561c <HAL_DMA_Abort_IT+0x3c0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d054      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a31      	ldr	r2, [pc, #196]	@ (8005620 <HAL_DMA_Abort_IT+0x3c4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d04f      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a30      	ldr	r2, [pc, #192]	@ (8005624 <HAL_DMA_Abort_IT+0x3c8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d04a      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a2e      	ldr	r2, [pc, #184]	@ (8005628 <HAL_DMA_Abort_IT+0x3cc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d045      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a2d      	ldr	r2, [pc, #180]	@ (800562c <HAL_DMA_Abort_IT+0x3d0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d040      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a2b      	ldr	r2, [pc, #172]	@ (8005630 <HAL_DMA_Abort_IT+0x3d4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d03b      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2a      	ldr	r2, [pc, #168]	@ (8005634 <HAL_DMA_Abort_IT+0x3d8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d036      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a28      	ldr	r2, [pc, #160]	@ (8005638 <HAL_DMA_Abort_IT+0x3dc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d031      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a27      	ldr	r2, [pc, #156]	@ (800563c <HAL_DMA_Abort_IT+0x3e0>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d02c      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a25      	ldr	r2, [pc, #148]	@ (8005640 <HAL_DMA_Abort_IT+0x3e4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d027      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a24      	ldr	r2, [pc, #144]	@ (8005644 <HAL_DMA_Abort_IT+0x3e8>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d022      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a22      	ldr	r2, [pc, #136]	@ (8005648 <HAL_DMA_Abort_IT+0x3ec>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d01d      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a21      	ldr	r2, [pc, #132]	@ (800564c <HAL_DMA_Abort_IT+0x3f0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d018      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005650 <HAL_DMA_Abort_IT+0x3f4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a1e      	ldr	r2, [pc, #120]	@ (8005654 <HAL_DMA_Abort_IT+0x3f8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00e      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005658 <HAL_DMA_Abort_IT+0x3fc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d009      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1b      	ldr	r2, [pc, #108]	@ (800565c <HAL_DMA_Abort_IT+0x400>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d004      	beq.n	80055fe <HAL_DMA_Abort_IT+0x3a2>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a19      	ldr	r2, [pc, #100]	@ (8005660 <HAL_DMA_Abort_IT+0x404>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d132      	bne.n	8005664 <HAL_DMA_Abort_IT+0x408>
 80055fe:	2301      	movs	r3, #1
 8005600:	e031      	b.n	8005666 <HAL_DMA_Abort_IT+0x40a>
 8005602:	bf00      	nop
 8005604:	40020010 	.word	0x40020010
 8005608:	40020028 	.word	0x40020028
 800560c:	40020040 	.word	0x40020040
 8005610:	40020058 	.word	0x40020058
 8005614:	40020070 	.word	0x40020070
 8005618:	40020088 	.word	0x40020088
 800561c:	400200a0 	.word	0x400200a0
 8005620:	400200b8 	.word	0x400200b8
 8005624:	40020410 	.word	0x40020410
 8005628:	40020428 	.word	0x40020428
 800562c:	40020440 	.word	0x40020440
 8005630:	40020458 	.word	0x40020458
 8005634:	40020470 	.word	0x40020470
 8005638:	40020488 	.word	0x40020488
 800563c:	400204a0 	.word	0x400204a0
 8005640:	400204b8 	.word	0x400204b8
 8005644:	58025408 	.word	0x58025408
 8005648:	5802541c 	.word	0x5802541c
 800564c:	58025430 	.word	0x58025430
 8005650:	58025444 	.word	0x58025444
 8005654:	58025458 	.word	0x58025458
 8005658:	5802546c 	.word	0x5802546c
 800565c:	58025480 	.word	0x58025480
 8005660:	58025494 	.word	0x58025494
 8005664:	2300      	movs	r3, #0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d028      	beq.n	80056bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005674:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005678:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	2201      	movs	r2, #1
 800568a:	409a      	lsls	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005698:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80056ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop

080056e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	@ 0x28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056f4:	4b67      	ldr	r3, [pc, #412]	@ (8005894 <HAL_DMA_IRQHandler+0x1ac>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a67      	ldr	r2, [pc, #412]	@ (8005898 <HAL_DMA_IRQHandler+0x1b0>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	0a9b      	lsrs	r3, r3, #10
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005706:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800570c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a5f      	ldr	r2, [pc, #380]	@ (800589c <HAL_DMA_IRQHandler+0x1b4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d04a      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a5d      	ldr	r2, [pc, #372]	@ (80058a0 <HAL_DMA_IRQHandler+0x1b8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d045      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a5c      	ldr	r2, [pc, #368]	@ (80058a4 <HAL_DMA_IRQHandler+0x1bc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d040      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a5a      	ldr	r2, [pc, #360]	@ (80058a8 <HAL_DMA_IRQHandler+0x1c0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d03b      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a59      	ldr	r2, [pc, #356]	@ (80058ac <HAL_DMA_IRQHandler+0x1c4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d036      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a57      	ldr	r2, [pc, #348]	@ (80058b0 <HAL_DMA_IRQHandler+0x1c8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d031      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a56      	ldr	r2, [pc, #344]	@ (80058b4 <HAL_DMA_IRQHandler+0x1cc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d02c      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a54      	ldr	r2, [pc, #336]	@ (80058b8 <HAL_DMA_IRQHandler+0x1d0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d027      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a53      	ldr	r2, [pc, #332]	@ (80058bc <HAL_DMA_IRQHandler+0x1d4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d022      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a51      	ldr	r2, [pc, #324]	@ (80058c0 <HAL_DMA_IRQHandler+0x1d8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01d      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a50      	ldr	r2, [pc, #320]	@ (80058c4 <HAL_DMA_IRQHandler+0x1dc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d018      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a4e      	ldr	r2, [pc, #312]	@ (80058c8 <HAL_DMA_IRQHandler+0x1e0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a4d      	ldr	r2, [pc, #308]	@ (80058cc <HAL_DMA_IRQHandler+0x1e4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00e      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a4b      	ldr	r2, [pc, #300]	@ (80058d0 <HAL_DMA_IRQHandler+0x1e8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d009      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a4a      	ldr	r2, [pc, #296]	@ (80058d4 <HAL_DMA_IRQHandler+0x1ec>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_DMA_IRQHandler+0xd2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a48      	ldr	r2, [pc, #288]	@ (80058d8 <HAL_DMA_IRQHandler+0x1f0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d101      	bne.n	80057be <HAL_DMA_IRQHandler+0xd6>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <HAL_DMA_IRQHandler+0xd8>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 842b 	beq.w	800601c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ca:	f003 031f 	and.w	r3, r3, #31
 80057ce:	2208      	movs	r2, #8
 80057d0:	409a      	lsls	r2, r3
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80a2 	beq.w	8005920 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2e      	ldr	r2, [pc, #184]	@ (800589c <HAL_DMA_IRQHandler+0x1b4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d04a      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2d      	ldr	r2, [pc, #180]	@ (80058a0 <HAL_DMA_IRQHandler+0x1b8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d045      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a2b      	ldr	r2, [pc, #172]	@ (80058a4 <HAL_DMA_IRQHandler+0x1bc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d040      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2a      	ldr	r2, [pc, #168]	@ (80058a8 <HAL_DMA_IRQHandler+0x1c0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d03b      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a28      	ldr	r2, [pc, #160]	@ (80058ac <HAL_DMA_IRQHandler+0x1c4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d036      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a27      	ldr	r2, [pc, #156]	@ (80058b0 <HAL_DMA_IRQHandler+0x1c8>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d031      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a25      	ldr	r2, [pc, #148]	@ (80058b4 <HAL_DMA_IRQHandler+0x1cc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d02c      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a24      	ldr	r2, [pc, #144]	@ (80058b8 <HAL_DMA_IRQHandler+0x1d0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d027      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a22      	ldr	r2, [pc, #136]	@ (80058bc <HAL_DMA_IRQHandler+0x1d4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d022      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a21      	ldr	r2, [pc, #132]	@ (80058c0 <HAL_DMA_IRQHandler+0x1d8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d01d      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1f      	ldr	r2, [pc, #124]	@ (80058c4 <HAL_DMA_IRQHandler+0x1dc>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d018      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1e      	ldr	r2, [pc, #120]	@ (80058c8 <HAL_DMA_IRQHandler+0x1e0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d013      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a1c      	ldr	r2, [pc, #112]	@ (80058cc <HAL_DMA_IRQHandler+0x1e4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00e      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1b      	ldr	r2, [pc, #108]	@ (80058d0 <HAL_DMA_IRQHandler+0x1e8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a19      	ldr	r2, [pc, #100]	@ (80058d4 <HAL_DMA_IRQHandler+0x1ec>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_DMA_IRQHandler+0x194>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a18      	ldr	r2, [pc, #96]	@ (80058d8 <HAL_DMA_IRQHandler+0x1f0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d12f      	bne.n	80058dc <HAL_DMA_IRQHandler+0x1f4>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b00      	cmp	r3, #0
 8005888:	bf14      	ite	ne
 800588a:	2301      	movne	r3, #1
 800588c:	2300      	moveq	r3, #0
 800588e:	b2db      	uxtb	r3, r3
 8005890:	e02e      	b.n	80058f0 <HAL_DMA_IRQHandler+0x208>
 8005892:	bf00      	nop
 8005894:	24000000 	.word	0x24000000
 8005898:	1b4e81b5 	.word	0x1b4e81b5
 800589c:	40020010 	.word	0x40020010
 80058a0:	40020028 	.word	0x40020028
 80058a4:	40020040 	.word	0x40020040
 80058a8:	40020058 	.word	0x40020058
 80058ac:	40020070 	.word	0x40020070
 80058b0:	40020088 	.word	0x40020088
 80058b4:	400200a0 	.word	0x400200a0
 80058b8:	400200b8 	.word	0x400200b8
 80058bc:	40020410 	.word	0x40020410
 80058c0:	40020428 	.word	0x40020428
 80058c4:	40020440 	.word	0x40020440
 80058c8:	40020458 	.word	0x40020458
 80058cc:	40020470 	.word	0x40020470
 80058d0:	40020488 	.word	0x40020488
 80058d4:	400204a0 	.word	0x400204a0
 80058d8:	400204b8 	.word	0x400204b8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0308 	and.w	r3, r3, #8
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bf14      	ite	ne
 80058ea:	2301      	movne	r3, #1
 80058ec:	2300      	moveq	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d015      	beq.n	8005920 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0204 	bic.w	r2, r2, #4
 8005902:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	2208      	movs	r2, #8
 800590e:	409a      	lsls	r2, r3
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005918:	f043 0201 	orr.w	r2, r3, #1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	fa22 f303 	lsr.w	r3, r2, r3
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d06e      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a69      	ldr	r2, [pc, #420]	@ (8005ae0 <HAL_DMA_IRQHandler+0x3f8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d04a      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a67      	ldr	r2, [pc, #412]	@ (8005ae4 <HAL_DMA_IRQHandler+0x3fc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d045      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a66      	ldr	r2, [pc, #408]	@ (8005ae8 <HAL_DMA_IRQHandler+0x400>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d040      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a64      	ldr	r2, [pc, #400]	@ (8005aec <HAL_DMA_IRQHandler+0x404>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d03b      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a63      	ldr	r2, [pc, #396]	@ (8005af0 <HAL_DMA_IRQHandler+0x408>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d036      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a61      	ldr	r2, [pc, #388]	@ (8005af4 <HAL_DMA_IRQHandler+0x40c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d031      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a60      	ldr	r2, [pc, #384]	@ (8005af8 <HAL_DMA_IRQHandler+0x410>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d02c      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a5e      	ldr	r2, [pc, #376]	@ (8005afc <HAL_DMA_IRQHandler+0x414>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d027      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a5d      	ldr	r2, [pc, #372]	@ (8005b00 <HAL_DMA_IRQHandler+0x418>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d022      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a5b      	ldr	r2, [pc, #364]	@ (8005b04 <HAL_DMA_IRQHandler+0x41c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d01d      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a5a      	ldr	r2, [pc, #360]	@ (8005b08 <HAL_DMA_IRQHandler+0x420>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d018      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a58      	ldr	r2, [pc, #352]	@ (8005b0c <HAL_DMA_IRQHandler+0x424>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a57      	ldr	r2, [pc, #348]	@ (8005b10 <HAL_DMA_IRQHandler+0x428>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00e      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a55      	ldr	r2, [pc, #340]	@ (8005b14 <HAL_DMA_IRQHandler+0x42c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d009      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a54      	ldr	r2, [pc, #336]	@ (8005b18 <HAL_DMA_IRQHandler+0x430>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d004      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x2ee>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a52      	ldr	r2, [pc, #328]	@ (8005b1c <HAL_DMA_IRQHandler+0x434>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d10a      	bne.n	80059ec <HAL_DMA_IRQHandler+0x304>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bf14      	ite	ne
 80059e4:	2301      	movne	r3, #1
 80059e6:	2300      	moveq	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	e003      	b.n	80059f4 <HAL_DMA_IRQHandler+0x30c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2300      	movs	r3, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00d      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0c:	f043 0202 	orr.w	r2, r3, #2
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	2204      	movs	r2, #4
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 808f 	beq.w	8005b48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae0 <HAL_DMA_IRQHandler+0x3f8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d04a      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae4 <HAL_DMA_IRQHandler+0x3fc>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d045      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a29      	ldr	r2, [pc, #164]	@ (8005ae8 <HAL_DMA_IRQHandler+0x400>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d040      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a27      	ldr	r2, [pc, #156]	@ (8005aec <HAL_DMA_IRQHandler+0x404>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d03b      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a26      	ldr	r2, [pc, #152]	@ (8005af0 <HAL_DMA_IRQHandler+0x408>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d036      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a24      	ldr	r2, [pc, #144]	@ (8005af4 <HAL_DMA_IRQHandler+0x40c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d031      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a23      	ldr	r2, [pc, #140]	@ (8005af8 <HAL_DMA_IRQHandler+0x410>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d02c      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a21      	ldr	r2, [pc, #132]	@ (8005afc <HAL_DMA_IRQHandler+0x414>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d027      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a20      	ldr	r2, [pc, #128]	@ (8005b00 <HAL_DMA_IRQHandler+0x418>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d022      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1e      	ldr	r2, [pc, #120]	@ (8005b04 <HAL_DMA_IRQHandler+0x41c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d01d      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1d      	ldr	r2, [pc, #116]	@ (8005b08 <HAL_DMA_IRQHandler+0x420>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d018      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8005b0c <HAL_DMA_IRQHandler+0x424>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d013      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b10 <HAL_DMA_IRQHandler+0x428>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00e      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a18      	ldr	r2, [pc, #96]	@ (8005b14 <HAL_DMA_IRQHandler+0x42c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d009      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a17      	ldr	r2, [pc, #92]	@ (8005b18 <HAL_DMA_IRQHandler+0x430>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d004      	beq.n	8005aca <HAL_DMA_IRQHandler+0x3e2>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a15      	ldr	r2, [pc, #84]	@ (8005b1c <HAL_DMA_IRQHandler+0x434>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d12a      	bne.n	8005b20 <HAL_DMA_IRQHandler+0x438>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bf14      	ite	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	2300      	moveq	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	e023      	b.n	8005b28 <HAL_DMA_IRQHandler+0x440>
 8005ae0:	40020010 	.word	0x40020010
 8005ae4:	40020028 	.word	0x40020028
 8005ae8:	40020040 	.word	0x40020040
 8005aec:	40020058 	.word	0x40020058
 8005af0:	40020070 	.word	0x40020070
 8005af4:	40020088 	.word	0x40020088
 8005af8:	400200a0 	.word	0x400200a0
 8005afc:	400200b8 	.word	0x400200b8
 8005b00:	40020410 	.word	0x40020410
 8005b04:	40020428 	.word	0x40020428
 8005b08:	40020440 	.word	0x40020440
 8005b0c:	40020458 	.word	0x40020458
 8005b10:	40020470 	.word	0x40020470
 8005b14:	40020488 	.word	0x40020488
 8005b18:	400204a0 	.word	0x400204a0
 8005b1c:	400204b8 	.word	0x400204b8
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2300      	movs	r3, #0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00d      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	2204      	movs	r2, #4
 8005b36:	409a      	lsls	r2, r3
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b40:	f043 0204 	orr.w	r2, r3, #4
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b4c:	f003 031f 	and.w	r3, r3, #31
 8005b50:	2210      	movs	r2, #16
 8005b52:	409a      	lsls	r2, r3
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 80a6 	beq.w	8005caa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a85      	ldr	r2, [pc, #532]	@ (8005d78 <HAL_DMA_IRQHandler+0x690>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d04a      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a83      	ldr	r2, [pc, #524]	@ (8005d7c <HAL_DMA_IRQHandler+0x694>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d045      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a82      	ldr	r2, [pc, #520]	@ (8005d80 <HAL_DMA_IRQHandler+0x698>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d040      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a80      	ldr	r2, [pc, #512]	@ (8005d84 <HAL_DMA_IRQHandler+0x69c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d03b      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a7f      	ldr	r2, [pc, #508]	@ (8005d88 <HAL_DMA_IRQHandler+0x6a0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d036      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a7d      	ldr	r2, [pc, #500]	@ (8005d8c <HAL_DMA_IRQHandler+0x6a4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d031      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a7c      	ldr	r2, [pc, #496]	@ (8005d90 <HAL_DMA_IRQHandler+0x6a8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d02c      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a7a      	ldr	r2, [pc, #488]	@ (8005d94 <HAL_DMA_IRQHandler+0x6ac>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d027      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a79      	ldr	r2, [pc, #484]	@ (8005d98 <HAL_DMA_IRQHandler+0x6b0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d022      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a77      	ldr	r2, [pc, #476]	@ (8005d9c <HAL_DMA_IRQHandler+0x6b4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d01d      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a76      	ldr	r2, [pc, #472]	@ (8005da0 <HAL_DMA_IRQHandler+0x6b8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d018      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a74      	ldr	r2, [pc, #464]	@ (8005da4 <HAL_DMA_IRQHandler+0x6bc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a73      	ldr	r2, [pc, #460]	@ (8005da8 <HAL_DMA_IRQHandler+0x6c0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00e      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a71      	ldr	r2, [pc, #452]	@ (8005dac <HAL_DMA_IRQHandler+0x6c4>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d009      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a70      	ldr	r2, [pc, #448]	@ (8005db0 <HAL_DMA_IRQHandler+0x6c8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d004      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x516>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a6e      	ldr	r2, [pc, #440]	@ (8005db4 <HAL_DMA_IRQHandler+0x6cc>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d10a      	bne.n	8005c14 <HAL_DMA_IRQHandler+0x52c>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0308 	and.w	r3, r3, #8
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	e009      	b.n	8005c28 <HAL_DMA_IRQHandler+0x540>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	bf14      	ite	ne
 8005c22:	2301      	movne	r3, #1
 8005c24:	2300      	moveq	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d03e      	beq.n	8005caa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c30:	f003 031f 	and.w	r3, r3, #31
 8005c34:	2210      	movs	r2, #16
 8005c36:	409a      	lsls	r2, r3
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d018      	beq.n	8005c7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d108      	bne.n	8005c6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d024      	beq.n	8005caa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
 8005c68:	e01f      	b.n	8005caa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01b      	beq.n	8005caa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
 8005c7a:	e016      	b.n	8005caa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d107      	bne.n	8005c9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0208 	bic.w	r2, r2, #8
 8005c98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	409a      	lsls	r2, r3
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 8110 	beq.w	8005ee0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8005d78 <HAL_DMA_IRQHandler+0x690>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d04a      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a2b      	ldr	r2, [pc, #172]	@ (8005d7c <HAL_DMA_IRQHandler+0x694>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d045      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a29      	ldr	r2, [pc, #164]	@ (8005d80 <HAL_DMA_IRQHandler+0x698>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d040      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a28      	ldr	r2, [pc, #160]	@ (8005d84 <HAL_DMA_IRQHandler+0x69c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d03b      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a26      	ldr	r2, [pc, #152]	@ (8005d88 <HAL_DMA_IRQHandler+0x6a0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d036      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a25      	ldr	r2, [pc, #148]	@ (8005d8c <HAL_DMA_IRQHandler+0x6a4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d031      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a23      	ldr	r2, [pc, #140]	@ (8005d90 <HAL_DMA_IRQHandler+0x6a8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d02c      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a22      	ldr	r2, [pc, #136]	@ (8005d94 <HAL_DMA_IRQHandler+0x6ac>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d027      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a20      	ldr	r2, [pc, #128]	@ (8005d98 <HAL_DMA_IRQHandler+0x6b0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d022      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005d9c <HAL_DMA_IRQHandler+0x6b4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d01d      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1d      	ldr	r2, [pc, #116]	@ (8005da0 <HAL_DMA_IRQHandler+0x6b8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d018      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1c      	ldr	r2, [pc, #112]	@ (8005da4 <HAL_DMA_IRQHandler+0x6bc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8005da8 <HAL_DMA_IRQHandler+0x6c0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00e      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a19      	ldr	r2, [pc, #100]	@ (8005dac <HAL_DMA_IRQHandler+0x6c4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d009      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a17      	ldr	r2, [pc, #92]	@ (8005db0 <HAL_DMA_IRQHandler+0x6c8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x678>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a16      	ldr	r2, [pc, #88]	@ (8005db4 <HAL_DMA_IRQHandler+0x6cc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d12b      	bne.n	8005db8 <HAL_DMA_IRQHandler+0x6d0>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bf14      	ite	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	2300      	moveq	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	e02a      	b.n	8005dcc <HAL_DMA_IRQHandler+0x6e4>
 8005d76:	bf00      	nop
 8005d78:	40020010 	.word	0x40020010
 8005d7c:	40020028 	.word	0x40020028
 8005d80:	40020040 	.word	0x40020040
 8005d84:	40020058 	.word	0x40020058
 8005d88:	40020070 	.word	0x40020070
 8005d8c:	40020088 	.word	0x40020088
 8005d90:	400200a0 	.word	0x400200a0
 8005d94:	400200b8 	.word	0x400200b8
 8005d98:	40020410 	.word	0x40020410
 8005d9c:	40020428 	.word	0x40020428
 8005da0:	40020440 	.word	0x40020440
 8005da4:	40020458 	.word	0x40020458
 8005da8:	40020470 	.word	0x40020470
 8005dac:	40020488 	.word	0x40020488
 8005db0:	400204a0 	.word	0x400204a0
 8005db4:	400204b8 	.word	0x400204b8
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	bf14      	ite	ne
 8005dc6:	2301      	movne	r3, #1
 8005dc8:	2300      	moveq	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 8087 	beq.w	8005ee0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	2220      	movs	r2, #32
 8005ddc:	409a      	lsls	r2, r3
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d139      	bne.n	8005e62 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0216 	bic.w	r2, r2, #22
 8005dfc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e0c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d103      	bne.n	8005e1e <HAL_DMA_IRQHandler+0x736>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d007      	beq.n	8005e2e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0208 	bic.w	r2, r2, #8
 8005e2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	223f      	movs	r2, #63	@ 0x3f
 8005e38:	409a      	lsls	r2, r3
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 834a 	beq.w	80064ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	4798      	blx	r3
          }
          return;
 8005e60:	e344      	b.n	80064ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d018      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d108      	bne.n	8005e90 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d02c      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
 8005e8e:	e027      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d023      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
 8005ea0:	e01e      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10f      	bne.n	8005ed0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0210 	bic.w	r2, r2, #16
 8005ebe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8306 	beq.w	80064f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 8088 	beq.w	8006008 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2204      	movs	r2, #4
 8005efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a7a      	ldr	r2, [pc, #488]	@ (80060f0 <HAL_DMA_IRQHandler+0xa08>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d04a      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a79      	ldr	r2, [pc, #484]	@ (80060f4 <HAL_DMA_IRQHandler+0xa0c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d045      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a77      	ldr	r2, [pc, #476]	@ (80060f8 <HAL_DMA_IRQHandler+0xa10>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d040      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a76      	ldr	r2, [pc, #472]	@ (80060fc <HAL_DMA_IRQHandler+0xa14>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d03b      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a74      	ldr	r2, [pc, #464]	@ (8006100 <HAL_DMA_IRQHandler+0xa18>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d036      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a73      	ldr	r2, [pc, #460]	@ (8006104 <HAL_DMA_IRQHandler+0xa1c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d031      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a71      	ldr	r2, [pc, #452]	@ (8006108 <HAL_DMA_IRQHandler+0xa20>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d02c      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a70      	ldr	r2, [pc, #448]	@ (800610c <HAL_DMA_IRQHandler+0xa24>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d027      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a6e      	ldr	r2, [pc, #440]	@ (8006110 <HAL_DMA_IRQHandler+0xa28>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d022      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a6d      	ldr	r2, [pc, #436]	@ (8006114 <HAL_DMA_IRQHandler+0xa2c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d01d      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a6b      	ldr	r2, [pc, #428]	@ (8006118 <HAL_DMA_IRQHandler+0xa30>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d018      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a6a      	ldr	r2, [pc, #424]	@ (800611c <HAL_DMA_IRQHandler+0xa34>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d013      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a68      	ldr	r2, [pc, #416]	@ (8006120 <HAL_DMA_IRQHandler+0xa38>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00e      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a67      	ldr	r2, [pc, #412]	@ (8006124 <HAL_DMA_IRQHandler+0xa3c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a65      	ldr	r2, [pc, #404]	@ (8006128 <HAL_DMA_IRQHandler+0xa40>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x8b8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a64      	ldr	r2, [pc, #400]	@ (800612c <HAL_DMA_IRQHandler+0xa44>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d108      	bne.n	8005fb2 <HAL_DMA_IRQHandler+0x8ca>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	e007      	b.n	8005fc2 <HAL_DMA_IRQHandler+0x8da>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0201 	bic.w	r2, r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d307      	bcc.n	8005fde <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f2      	bne.n	8005fc2 <HAL_DMA_IRQHandler+0x8da>
 8005fdc:	e000      	b.n	8005fe0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005fde:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005ff6:	e003      	b.n	8006000 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8272 	beq.w	80064f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
 800601a:	e26c      	b.n	80064f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a43      	ldr	r2, [pc, #268]	@ (8006130 <HAL_DMA_IRQHandler+0xa48>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_DMA_IRQHandler+0x984>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a42      	ldr	r2, [pc, #264]	@ (8006134 <HAL_DMA_IRQHandler+0xa4c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d01d      	beq.n	800606c <HAL_DMA_IRQHandler+0x984>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a40      	ldr	r2, [pc, #256]	@ (8006138 <HAL_DMA_IRQHandler+0xa50>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_DMA_IRQHandler+0x984>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a3f      	ldr	r2, [pc, #252]	@ (800613c <HAL_DMA_IRQHandler+0xa54>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_DMA_IRQHandler+0x984>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a3d      	ldr	r2, [pc, #244]	@ (8006140 <HAL_DMA_IRQHandler+0xa58>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_DMA_IRQHandler+0x984>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a3c      	ldr	r2, [pc, #240]	@ (8006144 <HAL_DMA_IRQHandler+0xa5c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_DMA_IRQHandler+0x984>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a3a      	ldr	r2, [pc, #232]	@ (8006148 <HAL_DMA_IRQHandler+0xa60>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_DMA_IRQHandler+0x984>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a39      	ldr	r2, [pc, #228]	@ (800614c <HAL_DMA_IRQHandler+0xa64>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d101      	bne.n	8006070 <HAL_DMA_IRQHandler+0x988>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <HAL_DMA_IRQHandler+0x98a>
 8006070:	2300      	movs	r3, #0
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 823f 	beq.w	80064f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006084:	f003 031f 	and.w	r3, r3, #31
 8006088:	2204      	movs	r2, #4
 800608a:	409a      	lsls	r2, r3
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	4013      	ands	r3, r2
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 80cd 	beq.w	8006230 <HAL_DMA_IRQHandler+0xb48>
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80c7 	beq.w	8006230 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2204      	movs	r2, #4
 80060ac:	409a      	lsls	r2, r3
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d049      	beq.n	8006150 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 8210 	beq.w	80064f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060d8:	e20a      	b.n	80064f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 8206 	beq.w	80064f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060ec:	e200      	b.n	80064f0 <HAL_DMA_IRQHandler+0xe08>
 80060ee:	bf00      	nop
 80060f0:	40020010 	.word	0x40020010
 80060f4:	40020028 	.word	0x40020028
 80060f8:	40020040 	.word	0x40020040
 80060fc:	40020058 	.word	0x40020058
 8006100:	40020070 	.word	0x40020070
 8006104:	40020088 	.word	0x40020088
 8006108:	400200a0 	.word	0x400200a0
 800610c:	400200b8 	.word	0x400200b8
 8006110:	40020410 	.word	0x40020410
 8006114:	40020428 	.word	0x40020428
 8006118:	40020440 	.word	0x40020440
 800611c:	40020458 	.word	0x40020458
 8006120:	40020470 	.word	0x40020470
 8006124:	40020488 	.word	0x40020488
 8006128:	400204a0 	.word	0x400204a0
 800612c:	400204b8 	.word	0x400204b8
 8006130:	58025408 	.word	0x58025408
 8006134:	5802541c 	.word	0x5802541c
 8006138:	58025430 	.word	0x58025430
 800613c:	58025444 	.word	0x58025444
 8006140:	58025458 	.word	0x58025458
 8006144:	5802546c 	.word	0x5802546c
 8006148:	58025480 	.word	0x58025480
 800614c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d160      	bne.n	800621c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a7f      	ldr	r2, [pc, #508]	@ (800635c <HAL_DMA_IRQHandler+0xc74>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d04a      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a7d      	ldr	r2, [pc, #500]	@ (8006360 <HAL_DMA_IRQHandler+0xc78>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d045      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a7c      	ldr	r2, [pc, #496]	@ (8006364 <HAL_DMA_IRQHandler+0xc7c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d040      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7a      	ldr	r2, [pc, #488]	@ (8006368 <HAL_DMA_IRQHandler+0xc80>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d03b      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a79      	ldr	r2, [pc, #484]	@ (800636c <HAL_DMA_IRQHandler+0xc84>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d036      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a77      	ldr	r2, [pc, #476]	@ (8006370 <HAL_DMA_IRQHandler+0xc88>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d031      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a76      	ldr	r2, [pc, #472]	@ (8006374 <HAL_DMA_IRQHandler+0xc8c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d02c      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a74      	ldr	r2, [pc, #464]	@ (8006378 <HAL_DMA_IRQHandler+0xc90>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d027      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a73      	ldr	r2, [pc, #460]	@ (800637c <HAL_DMA_IRQHandler+0xc94>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d022      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a71      	ldr	r2, [pc, #452]	@ (8006380 <HAL_DMA_IRQHandler+0xc98>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01d      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a70      	ldr	r2, [pc, #448]	@ (8006384 <HAL_DMA_IRQHandler+0xc9c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d018      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a6e      	ldr	r2, [pc, #440]	@ (8006388 <HAL_DMA_IRQHandler+0xca0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a6d      	ldr	r2, [pc, #436]	@ (800638c <HAL_DMA_IRQHandler+0xca4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00e      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a6b      	ldr	r2, [pc, #428]	@ (8006390 <HAL_DMA_IRQHandler+0xca8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d009      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6a      	ldr	r2, [pc, #424]	@ (8006394 <HAL_DMA_IRQHandler+0xcac>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d004      	beq.n	80061fa <HAL_DMA_IRQHandler+0xb12>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a68      	ldr	r2, [pc, #416]	@ (8006398 <HAL_DMA_IRQHandler+0xcb0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d108      	bne.n	800620c <HAL_DMA_IRQHandler+0xb24>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0208 	bic.w	r2, r2, #8
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	e007      	b.n	800621c <HAL_DMA_IRQHandler+0xb34>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0204 	bic.w	r2, r2, #4
 800621a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8165 	beq.w	80064f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800622e:	e15f      	b.n	80064f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	2202      	movs	r2, #2
 800623a:	409a      	lsls	r2, r3
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	4013      	ands	r3, r2
 8006240:	2b00      	cmp	r3, #0
 8006242:	f000 80c5 	beq.w	80063d0 <HAL_DMA_IRQHandler+0xce8>
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80bf 	beq.w	80063d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	2202      	movs	r2, #2
 800625c:	409a      	lsls	r2, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d018      	beq.n	800629e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 813a 	beq.w	80064f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006288:	e134      	b.n	80064f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8130 	beq.w	80064f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800629c:	e12a      	b.n	80064f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f040 8089 	bne.w	80063bc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a2b      	ldr	r2, [pc, #172]	@ (800635c <HAL_DMA_IRQHandler+0xc74>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d04a      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a29      	ldr	r2, [pc, #164]	@ (8006360 <HAL_DMA_IRQHandler+0xc78>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d045      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a28      	ldr	r2, [pc, #160]	@ (8006364 <HAL_DMA_IRQHandler+0xc7c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d040      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a26      	ldr	r2, [pc, #152]	@ (8006368 <HAL_DMA_IRQHandler+0xc80>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d03b      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a25      	ldr	r2, [pc, #148]	@ (800636c <HAL_DMA_IRQHandler+0xc84>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d036      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a23      	ldr	r2, [pc, #140]	@ (8006370 <HAL_DMA_IRQHandler+0xc88>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d031      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a22      	ldr	r2, [pc, #136]	@ (8006374 <HAL_DMA_IRQHandler+0xc8c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d02c      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a20      	ldr	r2, [pc, #128]	@ (8006378 <HAL_DMA_IRQHandler+0xc90>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d027      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1f      	ldr	r2, [pc, #124]	@ (800637c <HAL_DMA_IRQHandler+0xc94>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d022      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1d      	ldr	r2, [pc, #116]	@ (8006380 <HAL_DMA_IRQHandler+0xc98>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d01d      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1c      	ldr	r2, [pc, #112]	@ (8006384 <HAL_DMA_IRQHandler+0xc9c>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d018      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a1a      	ldr	r2, [pc, #104]	@ (8006388 <HAL_DMA_IRQHandler+0xca0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d013      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a19      	ldr	r2, [pc, #100]	@ (800638c <HAL_DMA_IRQHandler+0xca4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00e      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a17      	ldr	r2, [pc, #92]	@ (8006390 <HAL_DMA_IRQHandler+0xca8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d009      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a16      	ldr	r2, [pc, #88]	@ (8006394 <HAL_DMA_IRQHandler+0xcac>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d004      	beq.n	800634a <HAL_DMA_IRQHandler+0xc62>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a14      	ldr	r2, [pc, #80]	@ (8006398 <HAL_DMA_IRQHandler+0xcb0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d128      	bne.n	800639c <HAL_DMA_IRQHandler+0xcb4>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0214 	bic.w	r2, r2, #20
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	e027      	b.n	80063ac <HAL_DMA_IRQHandler+0xcc4>
 800635c:	40020010 	.word	0x40020010
 8006360:	40020028 	.word	0x40020028
 8006364:	40020040 	.word	0x40020040
 8006368:	40020058 	.word	0x40020058
 800636c:	40020070 	.word	0x40020070
 8006370:	40020088 	.word	0x40020088
 8006374:	400200a0 	.word	0x400200a0
 8006378:	400200b8 	.word	0x400200b8
 800637c:	40020410 	.word	0x40020410
 8006380:	40020428 	.word	0x40020428
 8006384:	40020440 	.word	0x40020440
 8006388:	40020458 	.word	0x40020458
 800638c:	40020470 	.word	0x40020470
 8006390:	40020488 	.word	0x40020488
 8006394:	400204a0 	.word	0x400204a0
 8006398:	400204b8 	.word	0x400204b8
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 020a 	bic.w	r2, r2, #10
 80063aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8097 	beq.w	80064f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063ce:	e091      	b.n	80064f4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063d4:	f003 031f 	and.w	r3, r3, #31
 80063d8:	2208      	movs	r2, #8
 80063da:	409a      	lsls	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	4013      	ands	r3, r2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8088 	beq.w	80064f6 <HAL_DMA_IRQHandler+0xe0e>
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8082 	beq.w	80064f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a41      	ldr	r2, [pc, #260]	@ (80064fc <HAL_DMA_IRQHandler+0xe14>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d04a      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a3f      	ldr	r2, [pc, #252]	@ (8006500 <HAL_DMA_IRQHandler+0xe18>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d045      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a3e      	ldr	r2, [pc, #248]	@ (8006504 <HAL_DMA_IRQHandler+0xe1c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d040      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a3c      	ldr	r2, [pc, #240]	@ (8006508 <HAL_DMA_IRQHandler+0xe20>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d03b      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a3b      	ldr	r2, [pc, #236]	@ (800650c <HAL_DMA_IRQHandler+0xe24>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d036      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a39      	ldr	r2, [pc, #228]	@ (8006510 <HAL_DMA_IRQHandler+0xe28>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d031      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a38      	ldr	r2, [pc, #224]	@ (8006514 <HAL_DMA_IRQHandler+0xe2c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d02c      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a36      	ldr	r2, [pc, #216]	@ (8006518 <HAL_DMA_IRQHandler+0xe30>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d027      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a35      	ldr	r2, [pc, #212]	@ (800651c <HAL_DMA_IRQHandler+0xe34>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d022      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a33      	ldr	r2, [pc, #204]	@ (8006520 <HAL_DMA_IRQHandler+0xe38>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01d      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a32      	ldr	r2, [pc, #200]	@ (8006524 <HAL_DMA_IRQHandler+0xe3c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d018      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a30      	ldr	r2, [pc, #192]	@ (8006528 <HAL_DMA_IRQHandler+0xe40>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a2f      	ldr	r2, [pc, #188]	@ (800652c <HAL_DMA_IRQHandler+0xe44>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00e      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a2d      	ldr	r2, [pc, #180]	@ (8006530 <HAL_DMA_IRQHandler+0xe48>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a2c      	ldr	r2, [pc, #176]	@ (8006534 <HAL_DMA_IRQHandler+0xe4c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d004      	beq.n	8006492 <HAL_DMA_IRQHandler+0xdaa>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a2a      	ldr	r2, [pc, #168]	@ (8006538 <HAL_DMA_IRQHandler+0xe50>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d108      	bne.n	80064a4 <HAL_DMA_IRQHandler+0xdbc>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 021c 	bic.w	r2, r2, #28
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	e007      	b.n	80064b4 <HAL_DMA_IRQHandler+0xdcc>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 020e 	bic.w	r2, r2, #14
 80064b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2201      	movs	r2, #1
 80064be:	409a      	lsls	r2, r3
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d009      	beq.n	80064f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
 80064ea:	e004      	b.n	80064f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80064ec:	bf00      	nop
 80064ee:	e002      	b.n	80064f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064f0:	bf00      	nop
 80064f2:	e000      	b.n	80064f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80064f6:	3728      	adds	r7, #40	@ 0x28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40020010 	.word	0x40020010
 8006500:	40020028 	.word	0x40020028
 8006504:	40020040 	.word	0x40020040
 8006508:	40020058 	.word	0x40020058
 800650c:	40020070 	.word	0x40020070
 8006510:	40020088 	.word	0x40020088
 8006514:	400200a0 	.word	0x400200a0
 8006518:	400200b8 	.word	0x400200b8
 800651c:	40020410 	.word	0x40020410
 8006520:	40020428 	.word	0x40020428
 8006524:	40020440 	.word	0x40020440
 8006528:	40020458 	.word	0x40020458
 800652c:	40020470 	.word	0x40020470
 8006530:	40020488 	.word	0x40020488
 8006534:	400204a0 	.word	0x400204a0
 8006538:	400204b8 	.word	0x400204b8

0800653c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800654e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006554:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a7f      	ldr	r2, [pc, #508]	@ (8006758 <DMA_SetConfig+0x21c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d072      	beq.n	8006646 <DMA_SetConfig+0x10a>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a7d      	ldr	r2, [pc, #500]	@ (800675c <DMA_SetConfig+0x220>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d06d      	beq.n	8006646 <DMA_SetConfig+0x10a>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a7c      	ldr	r2, [pc, #496]	@ (8006760 <DMA_SetConfig+0x224>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d068      	beq.n	8006646 <DMA_SetConfig+0x10a>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a7a      	ldr	r2, [pc, #488]	@ (8006764 <DMA_SetConfig+0x228>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d063      	beq.n	8006646 <DMA_SetConfig+0x10a>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a79      	ldr	r2, [pc, #484]	@ (8006768 <DMA_SetConfig+0x22c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d05e      	beq.n	8006646 <DMA_SetConfig+0x10a>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a77      	ldr	r2, [pc, #476]	@ (800676c <DMA_SetConfig+0x230>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d059      	beq.n	8006646 <DMA_SetConfig+0x10a>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a76      	ldr	r2, [pc, #472]	@ (8006770 <DMA_SetConfig+0x234>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d054      	beq.n	8006646 <DMA_SetConfig+0x10a>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a74      	ldr	r2, [pc, #464]	@ (8006774 <DMA_SetConfig+0x238>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d04f      	beq.n	8006646 <DMA_SetConfig+0x10a>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a73      	ldr	r2, [pc, #460]	@ (8006778 <DMA_SetConfig+0x23c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d04a      	beq.n	8006646 <DMA_SetConfig+0x10a>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a71      	ldr	r2, [pc, #452]	@ (800677c <DMA_SetConfig+0x240>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d045      	beq.n	8006646 <DMA_SetConfig+0x10a>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a70      	ldr	r2, [pc, #448]	@ (8006780 <DMA_SetConfig+0x244>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d040      	beq.n	8006646 <DMA_SetConfig+0x10a>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a6e      	ldr	r2, [pc, #440]	@ (8006784 <DMA_SetConfig+0x248>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d03b      	beq.n	8006646 <DMA_SetConfig+0x10a>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a6d      	ldr	r2, [pc, #436]	@ (8006788 <DMA_SetConfig+0x24c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d036      	beq.n	8006646 <DMA_SetConfig+0x10a>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a6b      	ldr	r2, [pc, #428]	@ (800678c <DMA_SetConfig+0x250>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d031      	beq.n	8006646 <DMA_SetConfig+0x10a>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a6a      	ldr	r2, [pc, #424]	@ (8006790 <DMA_SetConfig+0x254>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d02c      	beq.n	8006646 <DMA_SetConfig+0x10a>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a68      	ldr	r2, [pc, #416]	@ (8006794 <DMA_SetConfig+0x258>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d027      	beq.n	8006646 <DMA_SetConfig+0x10a>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a67      	ldr	r2, [pc, #412]	@ (8006798 <DMA_SetConfig+0x25c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d022      	beq.n	8006646 <DMA_SetConfig+0x10a>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a65      	ldr	r2, [pc, #404]	@ (800679c <DMA_SetConfig+0x260>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01d      	beq.n	8006646 <DMA_SetConfig+0x10a>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a64      	ldr	r2, [pc, #400]	@ (80067a0 <DMA_SetConfig+0x264>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d018      	beq.n	8006646 <DMA_SetConfig+0x10a>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a62      	ldr	r2, [pc, #392]	@ (80067a4 <DMA_SetConfig+0x268>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d013      	beq.n	8006646 <DMA_SetConfig+0x10a>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a61      	ldr	r2, [pc, #388]	@ (80067a8 <DMA_SetConfig+0x26c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00e      	beq.n	8006646 <DMA_SetConfig+0x10a>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a5f      	ldr	r2, [pc, #380]	@ (80067ac <DMA_SetConfig+0x270>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d009      	beq.n	8006646 <DMA_SetConfig+0x10a>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a5e      	ldr	r2, [pc, #376]	@ (80067b0 <DMA_SetConfig+0x274>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d004      	beq.n	8006646 <DMA_SetConfig+0x10a>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a5c      	ldr	r2, [pc, #368]	@ (80067b4 <DMA_SetConfig+0x278>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d101      	bne.n	800664a <DMA_SetConfig+0x10e>
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <DMA_SetConfig+0x110>
 800664a:	2300      	movs	r3, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00d      	beq.n	800666c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006658:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800665e:	2b00      	cmp	r3, #0
 8006660:	d004      	beq.n	800666c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800666a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a39      	ldr	r2, [pc, #228]	@ (8006758 <DMA_SetConfig+0x21c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d04a      	beq.n	800670c <DMA_SetConfig+0x1d0>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a38      	ldr	r2, [pc, #224]	@ (800675c <DMA_SetConfig+0x220>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d045      	beq.n	800670c <DMA_SetConfig+0x1d0>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a36      	ldr	r2, [pc, #216]	@ (8006760 <DMA_SetConfig+0x224>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d040      	beq.n	800670c <DMA_SetConfig+0x1d0>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a35      	ldr	r2, [pc, #212]	@ (8006764 <DMA_SetConfig+0x228>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d03b      	beq.n	800670c <DMA_SetConfig+0x1d0>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a33      	ldr	r2, [pc, #204]	@ (8006768 <DMA_SetConfig+0x22c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d036      	beq.n	800670c <DMA_SetConfig+0x1d0>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a32      	ldr	r2, [pc, #200]	@ (800676c <DMA_SetConfig+0x230>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d031      	beq.n	800670c <DMA_SetConfig+0x1d0>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a30      	ldr	r2, [pc, #192]	@ (8006770 <DMA_SetConfig+0x234>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d02c      	beq.n	800670c <DMA_SetConfig+0x1d0>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006774 <DMA_SetConfig+0x238>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d027      	beq.n	800670c <DMA_SetConfig+0x1d0>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006778 <DMA_SetConfig+0x23c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d022      	beq.n	800670c <DMA_SetConfig+0x1d0>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a2c      	ldr	r2, [pc, #176]	@ (800677c <DMA_SetConfig+0x240>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d01d      	beq.n	800670c <DMA_SetConfig+0x1d0>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006780 <DMA_SetConfig+0x244>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d018      	beq.n	800670c <DMA_SetConfig+0x1d0>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a29      	ldr	r2, [pc, #164]	@ (8006784 <DMA_SetConfig+0x248>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d013      	beq.n	800670c <DMA_SetConfig+0x1d0>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a27      	ldr	r2, [pc, #156]	@ (8006788 <DMA_SetConfig+0x24c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00e      	beq.n	800670c <DMA_SetConfig+0x1d0>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a26      	ldr	r2, [pc, #152]	@ (800678c <DMA_SetConfig+0x250>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d009      	beq.n	800670c <DMA_SetConfig+0x1d0>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a24      	ldr	r2, [pc, #144]	@ (8006790 <DMA_SetConfig+0x254>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <DMA_SetConfig+0x1d0>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a23      	ldr	r2, [pc, #140]	@ (8006794 <DMA_SetConfig+0x258>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d101      	bne.n	8006710 <DMA_SetConfig+0x1d4>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <DMA_SetConfig+0x1d6>
 8006710:	2300      	movs	r3, #0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d059      	beq.n	80067ca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	223f      	movs	r2, #63	@ 0x3f
 8006720:	409a      	lsls	r2, r3
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006734:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b40      	cmp	r3, #64	@ 0x40
 8006744:	d138      	bne.n	80067b8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006756:	e086      	b.n	8006866 <DMA_SetConfig+0x32a>
 8006758:	40020010 	.word	0x40020010
 800675c:	40020028 	.word	0x40020028
 8006760:	40020040 	.word	0x40020040
 8006764:	40020058 	.word	0x40020058
 8006768:	40020070 	.word	0x40020070
 800676c:	40020088 	.word	0x40020088
 8006770:	400200a0 	.word	0x400200a0
 8006774:	400200b8 	.word	0x400200b8
 8006778:	40020410 	.word	0x40020410
 800677c:	40020428 	.word	0x40020428
 8006780:	40020440 	.word	0x40020440
 8006784:	40020458 	.word	0x40020458
 8006788:	40020470 	.word	0x40020470
 800678c:	40020488 	.word	0x40020488
 8006790:	400204a0 	.word	0x400204a0
 8006794:	400204b8 	.word	0x400204b8
 8006798:	58025408 	.word	0x58025408
 800679c:	5802541c 	.word	0x5802541c
 80067a0:	58025430 	.word	0x58025430
 80067a4:	58025444 	.word	0x58025444
 80067a8:	58025458 	.word	0x58025458
 80067ac:	5802546c 	.word	0x5802546c
 80067b0:	58025480 	.word	0x58025480
 80067b4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	60da      	str	r2, [r3, #12]
}
 80067c8:	e04d      	b.n	8006866 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a29      	ldr	r2, [pc, #164]	@ (8006874 <DMA_SetConfig+0x338>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d022      	beq.n	800681a <DMA_SetConfig+0x2de>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a27      	ldr	r2, [pc, #156]	@ (8006878 <DMA_SetConfig+0x33c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d01d      	beq.n	800681a <DMA_SetConfig+0x2de>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a26      	ldr	r2, [pc, #152]	@ (800687c <DMA_SetConfig+0x340>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d018      	beq.n	800681a <DMA_SetConfig+0x2de>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a24      	ldr	r2, [pc, #144]	@ (8006880 <DMA_SetConfig+0x344>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d013      	beq.n	800681a <DMA_SetConfig+0x2de>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a23      	ldr	r2, [pc, #140]	@ (8006884 <DMA_SetConfig+0x348>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00e      	beq.n	800681a <DMA_SetConfig+0x2de>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a21      	ldr	r2, [pc, #132]	@ (8006888 <DMA_SetConfig+0x34c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d009      	beq.n	800681a <DMA_SetConfig+0x2de>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a20      	ldr	r2, [pc, #128]	@ (800688c <DMA_SetConfig+0x350>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d004      	beq.n	800681a <DMA_SetConfig+0x2de>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1e      	ldr	r2, [pc, #120]	@ (8006890 <DMA_SetConfig+0x354>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d101      	bne.n	800681e <DMA_SetConfig+0x2e2>
 800681a:	2301      	movs	r3, #1
 800681c:	e000      	b.n	8006820 <DMA_SetConfig+0x2e4>
 800681e:	2300      	movs	r3, #0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d020      	beq.n	8006866 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	2201      	movs	r2, #1
 800682e:	409a      	lsls	r2, r3
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b40      	cmp	r3, #64	@ 0x40
 8006842:	d108      	bne.n	8006856 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	60da      	str	r2, [r3, #12]
}
 8006854:	e007      	b.n	8006866 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	60da      	str	r2, [r3, #12]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	58025408 	.word	0x58025408
 8006878:	5802541c 	.word	0x5802541c
 800687c:	58025430 	.word	0x58025430
 8006880:	58025444 	.word	0x58025444
 8006884:	58025458 	.word	0x58025458
 8006888:	5802546c 	.word	0x5802546c
 800688c:	58025480 	.word	0x58025480
 8006890:	58025494 	.word	0x58025494

08006894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a42      	ldr	r2, [pc, #264]	@ (80069ac <DMA_CalcBaseAndBitshift+0x118>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d04a      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a41      	ldr	r2, [pc, #260]	@ (80069b0 <DMA_CalcBaseAndBitshift+0x11c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d045      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a3f      	ldr	r2, [pc, #252]	@ (80069b4 <DMA_CalcBaseAndBitshift+0x120>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d040      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a3e      	ldr	r2, [pc, #248]	@ (80069b8 <DMA_CalcBaseAndBitshift+0x124>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d03b      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a3c      	ldr	r2, [pc, #240]	@ (80069bc <DMA_CalcBaseAndBitshift+0x128>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d036      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a3b      	ldr	r2, [pc, #236]	@ (80069c0 <DMA_CalcBaseAndBitshift+0x12c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d031      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a39      	ldr	r2, [pc, #228]	@ (80069c4 <DMA_CalcBaseAndBitshift+0x130>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d02c      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a38      	ldr	r2, [pc, #224]	@ (80069c8 <DMA_CalcBaseAndBitshift+0x134>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d027      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a36      	ldr	r2, [pc, #216]	@ (80069cc <DMA_CalcBaseAndBitshift+0x138>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d022      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a35      	ldr	r2, [pc, #212]	@ (80069d0 <DMA_CalcBaseAndBitshift+0x13c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d01d      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a33      	ldr	r2, [pc, #204]	@ (80069d4 <DMA_CalcBaseAndBitshift+0x140>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d018      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a32      	ldr	r2, [pc, #200]	@ (80069d8 <DMA_CalcBaseAndBitshift+0x144>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d013      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a30      	ldr	r2, [pc, #192]	@ (80069dc <DMA_CalcBaseAndBitshift+0x148>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00e      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a2f      	ldr	r2, [pc, #188]	@ (80069e0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d009      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2d      	ldr	r2, [pc, #180]	@ (80069e4 <DMA_CalcBaseAndBitshift+0x150>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d004      	beq.n	800693c <DMA_CalcBaseAndBitshift+0xa8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2c      	ldr	r2, [pc, #176]	@ (80069e8 <DMA_CalcBaseAndBitshift+0x154>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d101      	bne.n	8006940 <DMA_CalcBaseAndBitshift+0xac>
 800693c:	2301      	movs	r3, #1
 800693e:	e000      	b.n	8006942 <DMA_CalcBaseAndBitshift+0xae>
 8006940:	2300      	movs	r3, #0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d024      	beq.n	8006990 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	3b10      	subs	r3, #16
 800694e:	4a27      	ldr	r2, [pc, #156]	@ (80069ec <DMA_CalcBaseAndBitshift+0x158>)
 8006950:	fba2 2303 	umull	r2, r3, r2, r3
 8006954:	091b      	lsrs	r3, r3, #4
 8006956:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	4a24      	ldr	r2, [pc, #144]	@ (80069f0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006960:	5cd3      	ldrb	r3, [r2, r3]
 8006962:	461a      	mov	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b03      	cmp	r3, #3
 800696c:	d908      	bls.n	8006980 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	4b1f      	ldr	r3, [pc, #124]	@ (80069f4 <DMA_CalcBaseAndBitshift+0x160>)
 8006976:	4013      	ands	r3, r2
 8006978:	1d1a      	adds	r2, r3, #4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	659a      	str	r2, [r3, #88]	@ 0x58
 800697e:	e00d      	b.n	800699c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	4b1b      	ldr	r3, [pc, #108]	@ (80069f4 <DMA_CalcBaseAndBitshift+0x160>)
 8006988:	4013      	ands	r3, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6593      	str	r3, [r2, #88]	@ 0x58
 800698e:	e005      	b.n	800699c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	40020010 	.word	0x40020010
 80069b0:	40020028 	.word	0x40020028
 80069b4:	40020040 	.word	0x40020040
 80069b8:	40020058 	.word	0x40020058
 80069bc:	40020070 	.word	0x40020070
 80069c0:	40020088 	.word	0x40020088
 80069c4:	400200a0 	.word	0x400200a0
 80069c8:	400200b8 	.word	0x400200b8
 80069cc:	40020410 	.word	0x40020410
 80069d0:	40020428 	.word	0x40020428
 80069d4:	40020440 	.word	0x40020440
 80069d8:	40020458 	.word	0x40020458
 80069dc:	40020470 	.word	0x40020470
 80069e0:	40020488 	.word	0x40020488
 80069e4:	400204a0 	.word	0x400204a0
 80069e8:	400204b8 	.word	0x400204b8
 80069ec:	aaaaaaab 	.word	0xaaaaaaab
 80069f0:	08011b38 	.word	0x08011b38
 80069f4:	fffffc00 	.word	0xfffffc00

080069f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d120      	bne.n	8006a4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d858      	bhi.n	8006ac6 <DMA_CheckFifoParam+0xce>
 8006a14:	a201      	add	r2, pc, #4	@ (adr r2, 8006a1c <DMA_CheckFifoParam+0x24>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a2d 	.word	0x08006a2d
 8006a20:	08006a3f 	.word	0x08006a3f
 8006a24:	08006a2d 	.word	0x08006a2d
 8006a28:	08006ac7 	.word	0x08006ac7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d048      	beq.n	8006aca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a3c:	e045      	b.n	8006aca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a46:	d142      	bne.n	8006ace <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a4c:	e03f      	b.n	8006ace <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a56:	d123      	bne.n	8006aa0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d838      	bhi.n	8006ad2 <DMA_CheckFifoParam+0xda>
 8006a60:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <DMA_CheckFifoParam+0x70>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a7f 	.word	0x08006a7f
 8006a70:	08006a79 	.word	0x08006a79
 8006a74:	08006a91 	.word	0x08006a91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
        break;
 8006a7c:	e030      	b.n	8006ae0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d025      	beq.n	8006ad6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a8e:	e022      	b.n	8006ad6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a98:	d11f      	bne.n	8006ada <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a9e:	e01c      	b.n	8006ada <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d902      	bls.n	8006aae <DMA_CheckFifoParam+0xb6>
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d003      	beq.n	8006ab4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006aac:	e018      	b.n	8006ae0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ab2:	e015      	b.n	8006ae0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00e      	beq.n	8006ade <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ac4:	e00b      	b.n	8006ade <DMA_CheckFifoParam+0xe6>
        break;
 8006ac6:	bf00      	nop
 8006ac8:	e00a      	b.n	8006ae0 <DMA_CheckFifoParam+0xe8>
        break;
 8006aca:	bf00      	nop
 8006acc:	e008      	b.n	8006ae0 <DMA_CheckFifoParam+0xe8>
        break;
 8006ace:	bf00      	nop
 8006ad0:	e006      	b.n	8006ae0 <DMA_CheckFifoParam+0xe8>
        break;
 8006ad2:	bf00      	nop
 8006ad4:	e004      	b.n	8006ae0 <DMA_CheckFifoParam+0xe8>
        break;
 8006ad6:	bf00      	nop
 8006ad8:	e002      	b.n	8006ae0 <DMA_CheckFifoParam+0xe8>
        break;
 8006ada:	bf00      	nop
 8006adc:	e000      	b.n	8006ae0 <DMA_CheckFifoParam+0xe8>
    break;
 8006ade:	bf00      	nop
    }
  }

  return status;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop

08006af0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a38      	ldr	r2, [pc, #224]	@ (8006be4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d022      	beq.n	8006b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a36      	ldr	r2, [pc, #216]	@ (8006be8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d01d      	beq.n	8006b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a35      	ldr	r2, [pc, #212]	@ (8006bec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d018      	beq.n	8006b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a33      	ldr	r2, [pc, #204]	@ (8006bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a32      	ldr	r2, [pc, #200]	@ (8006bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00e      	beq.n	8006b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a30      	ldr	r2, [pc, #192]	@ (8006bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a2f      	ldr	r2, [pc, #188]	@ (8006bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a2d      	ldr	r2, [pc, #180]	@ (8006c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d101      	bne.n	8006b52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006b52:	2300      	movs	r3, #0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01a      	beq.n	8006b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	3b08      	subs	r3, #8
 8006b60:	4a28      	ldr	r2, [pc, #160]	@ (8006c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	091b      	lsrs	r3, r3, #4
 8006b68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4b26      	ldr	r3, [pc, #152]	@ (8006c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	461a      	mov	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a24      	ldr	r2, [pc, #144]	@ (8006c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006b7c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f003 031f 	and.w	r3, r3, #31
 8006b84:	2201      	movs	r2, #1
 8006b86:	409a      	lsls	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006b8c:	e024      	b.n	8006bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	3b10      	subs	r3, #16
 8006b96:	4a1e      	ldr	r2, [pc, #120]	@ (8006c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006b98:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9c:	091b      	lsrs	r3, r3, #4
 8006b9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d806      	bhi.n	8006bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4a1b      	ldr	r2, [pc, #108]	@ (8006c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d902      	bls.n	8006bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4b18      	ldr	r3, [pc, #96]	@ (8006c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006bba:	4413      	add	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a16      	ldr	r2, [pc, #88]	@ (8006c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006bc8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	58025408 	.word	0x58025408
 8006be8:	5802541c 	.word	0x5802541c
 8006bec:	58025430 	.word	0x58025430
 8006bf0:	58025444 	.word	0x58025444
 8006bf4:	58025458 	.word	0x58025458
 8006bf8:	5802546c 	.word	0x5802546c
 8006bfc:	58025480 	.word	0x58025480
 8006c00:	58025494 	.word	0x58025494
 8006c04:	cccccccd 	.word	0xcccccccd
 8006c08:	16009600 	.word	0x16009600
 8006c0c:	58025880 	.word	0x58025880
 8006c10:	aaaaaaab 	.word	0xaaaaaaab
 8006c14:	400204b8 	.word	0x400204b8
 8006c18:	4002040f 	.word	0x4002040f
 8006c1c:	10008200 	.word	0x10008200
 8006c20:	40020880 	.word	0x40020880

08006c24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d04a      	beq.n	8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d847      	bhi.n	8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a25      	ldr	r2, [pc, #148]	@ (8006cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d022      	beq.n	8006c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a24      	ldr	r2, [pc, #144]	@ (8006ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d01d      	beq.n	8006c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a22      	ldr	r2, [pc, #136]	@ (8006ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d018      	beq.n	8006c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a21      	ldr	r2, [pc, #132]	@ (8006ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00e      	beq.n	8006c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d101      	bne.n	8006c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e000      	b.n	8006c96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006c94:	2300      	movs	r3, #0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4b17      	ldr	r3, [pc, #92]	@ (8006cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a15      	ldr	r2, [pc, #84]	@ (8006d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006cac:	671a      	str	r2, [r3, #112]	@ 0x70
 8006cae:	e009      	b.n	8006cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4b14      	ldr	r3, [pc, #80]	@ (8006d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a11      	ldr	r2, [pc, #68]	@ (8006d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006cc2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	2201      	movs	r2, #1
 8006cca:	409a      	lsls	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr
 8006cdc:	58025408 	.word	0x58025408
 8006ce0:	5802541c 	.word	0x5802541c
 8006ce4:	58025430 	.word	0x58025430
 8006ce8:	58025444 	.word	0x58025444
 8006cec:	58025458 	.word	0x58025458
 8006cf0:	5802546c 	.word	0x5802546c
 8006cf4:	58025480 	.word	0x58025480
 8006cf8:	58025494 	.word	0x58025494
 8006cfc:	1600963f 	.word	0x1600963f
 8006d00:	58025940 	.word	0x58025940
 8006d04:	1000823f 	.word	0x1000823f
 8006d08:	40020940 	.word	0x40020940

08006d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b089      	sub	sp, #36	@ 0x24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006d1a:	4b89      	ldr	r3, [pc, #548]	@ (8006f40 <HAL_GPIO_Init+0x234>)
 8006d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d1e:	e194      	b.n	800704a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	2101      	movs	r1, #1
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 8186 	beq.w	8007044 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d005      	beq.n	8006d50 <HAL_GPIO_Init+0x44>
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d130      	bne.n	8006db2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	43db      	mvns	r3, r3
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	4013      	ands	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d86:	2201      	movs	r2, #1
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8e:	43db      	mvns	r3, r3
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	4013      	ands	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	091b      	lsrs	r3, r3, #4
 8006d9c:	f003 0201 	and.w	r2, r3, #1
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d017      	beq.n	8006dee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	2203      	movs	r2, #3
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	43db      	mvns	r3, r3
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	689a      	ldr	r2, [r3, #8]
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	fa02 f303 	lsl.w	r3, r2, r3
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d123      	bne.n	8006e42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	08da      	lsrs	r2, r3, #3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3208      	adds	r2, #8
 8006e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	220f      	movs	r2, #15
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	43db      	mvns	r3, r3
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	08da      	lsrs	r2, r3, #3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3208      	adds	r2, #8
 8006e3c:	69b9      	ldr	r1, [r7, #24]
 8006e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	2203      	movs	r2, #3
 8006e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e52:	43db      	mvns	r3, r3
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	4013      	ands	r3, r2
 8006e58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f003 0203 	and.w	r2, r3, #3
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 80e0 	beq.w	8007044 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e84:	4b2f      	ldr	r3, [pc, #188]	@ (8006f44 <HAL_GPIO_Init+0x238>)
 8006e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8006f44 <HAL_GPIO_Init+0x238>)
 8006e8c:	f043 0302 	orr.w	r3, r3, #2
 8006e90:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006e94:	4b2b      	ldr	r3, [pc, #172]	@ (8006f44 <HAL_GPIO_Init+0x238>)
 8006e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006ea2:	4a29      	ldr	r2, [pc, #164]	@ (8006f48 <HAL_GPIO_Init+0x23c>)
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	089b      	lsrs	r3, r3, #2
 8006ea8:	3302      	adds	r3, #2
 8006eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	f003 0303 	and.w	r3, r3, #3
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	220f      	movs	r2, #15
 8006eba:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a20      	ldr	r2, [pc, #128]	@ (8006f4c <HAL_GPIO_Init+0x240>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d052      	beq.n	8006f74 <HAL_GPIO_Init+0x268>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8006f50 <HAL_GPIO_Init+0x244>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d031      	beq.n	8006f3a <HAL_GPIO_Init+0x22e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8006f54 <HAL_GPIO_Init+0x248>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d02b      	beq.n	8006f36 <HAL_GPIO_Init+0x22a>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f58 <HAL_GPIO_Init+0x24c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d025      	beq.n	8006f32 <HAL_GPIO_Init+0x226>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8006f5c <HAL_GPIO_Init+0x250>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d01f      	beq.n	8006f2e <HAL_GPIO_Init+0x222>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f60 <HAL_GPIO_Init+0x254>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d019      	beq.n	8006f2a <HAL_GPIO_Init+0x21e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8006f64 <HAL_GPIO_Init+0x258>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d013      	beq.n	8006f26 <HAL_GPIO_Init+0x21a>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a19      	ldr	r2, [pc, #100]	@ (8006f68 <HAL_GPIO_Init+0x25c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00d      	beq.n	8006f22 <HAL_GPIO_Init+0x216>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a18      	ldr	r2, [pc, #96]	@ (8006f6c <HAL_GPIO_Init+0x260>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d007      	beq.n	8006f1e <HAL_GPIO_Init+0x212>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a17      	ldr	r2, [pc, #92]	@ (8006f70 <HAL_GPIO_Init+0x264>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d101      	bne.n	8006f1a <HAL_GPIO_Init+0x20e>
 8006f16:	2309      	movs	r3, #9
 8006f18:	e02d      	b.n	8006f76 <HAL_GPIO_Init+0x26a>
 8006f1a:	230a      	movs	r3, #10
 8006f1c:	e02b      	b.n	8006f76 <HAL_GPIO_Init+0x26a>
 8006f1e:	2308      	movs	r3, #8
 8006f20:	e029      	b.n	8006f76 <HAL_GPIO_Init+0x26a>
 8006f22:	2307      	movs	r3, #7
 8006f24:	e027      	b.n	8006f76 <HAL_GPIO_Init+0x26a>
 8006f26:	2306      	movs	r3, #6
 8006f28:	e025      	b.n	8006f76 <HAL_GPIO_Init+0x26a>
 8006f2a:	2305      	movs	r3, #5
 8006f2c:	e023      	b.n	8006f76 <HAL_GPIO_Init+0x26a>
 8006f2e:	2304      	movs	r3, #4
 8006f30:	e021      	b.n	8006f76 <HAL_GPIO_Init+0x26a>
 8006f32:	2303      	movs	r3, #3
 8006f34:	e01f      	b.n	8006f76 <HAL_GPIO_Init+0x26a>
 8006f36:	2302      	movs	r3, #2
 8006f38:	e01d      	b.n	8006f76 <HAL_GPIO_Init+0x26a>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e01b      	b.n	8006f76 <HAL_GPIO_Init+0x26a>
 8006f3e:	bf00      	nop
 8006f40:	58000080 	.word	0x58000080
 8006f44:	58024400 	.word	0x58024400
 8006f48:	58000400 	.word	0x58000400
 8006f4c:	58020000 	.word	0x58020000
 8006f50:	58020400 	.word	0x58020400
 8006f54:	58020800 	.word	0x58020800
 8006f58:	58020c00 	.word	0x58020c00
 8006f5c:	58021000 	.word	0x58021000
 8006f60:	58021400 	.word	0x58021400
 8006f64:	58021800 	.word	0x58021800
 8006f68:	58021c00 	.word	0x58021c00
 8006f6c:	58022000 	.word	0x58022000
 8006f70:	58022400 	.word	0x58022400
 8006f74:	2300      	movs	r3, #0
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	f002 0203 	and.w	r2, r2, #3
 8006f7c:	0092      	lsls	r2, r2, #2
 8006f7e:	4093      	lsls	r3, r2
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f86:	4938      	ldr	r1, [pc, #224]	@ (8007068 <HAL_GPIO_Init+0x35c>)
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	089b      	lsrs	r3, r3, #2
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006fb2:	69ba      	ldr	r2, [r7, #24]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006fba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	43db      	mvns	r3, r3
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006fe8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	43db      	mvns	r3, r3
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	43db      	mvns	r3, r3
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	4013      	ands	r3, r2
 8007028:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	4313      	orrs	r3, r2
 800703c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	3301      	adds	r3, #1
 8007048:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	f47f ae63 	bne.w	8006d20 <HAL_GPIO_Init+0x14>
  }
}
 800705a:	bf00      	nop
 800705c:	bf00      	nop
 800705e:	3724      	adds	r7, #36	@ 0x24
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	58000400 	.word	0x58000400

0800706c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800707a:	4b75      	ldr	r3, [pc, #468]	@ (8007250 <HAL_GPIO_DeInit+0x1e4>)
 800707c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800707e:	e0d9      	b.n	8007234 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007080:	2201      	movs	r2, #1
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	4013      	ands	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80cc 	beq.w	800722e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007096:	4a6f      	ldr	r2, [pc, #444]	@ (8007254 <HAL_GPIO_DeInit+0x1e8>)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	089b      	lsrs	r3, r3, #2
 800709c:	3302      	adds	r3, #2
 800709e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	220f      	movs	r2, #15
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	4013      	ands	r3, r2
 80070b6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a67      	ldr	r2, [pc, #412]	@ (8007258 <HAL_GPIO_DeInit+0x1ec>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d037      	beq.n	8007130 <HAL_GPIO_DeInit+0xc4>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a66      	ldr	r2, [pc, #408]	@ (800725c <HAL_GPIO_DeInit+0x1f0>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d031      	beq.n	800712c <HAL_GPIO_DeInit+0xc0>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a65      	ldr	r2, [pc, #404]	@ (8007260 <HAL_GPIO_DeInit+0x1f4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d02b      	beq.n	8007128 <HAL_GPIO_DeInit+0xbc>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a64      	ldr	r2, [pc, #400]	@ (8007264 <HAL_GPIO_DeInit+0x1f8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d025      	beq.n	8007124 <HAL_GPIO_DeInit+0xb8>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a63      	ldr	r2, [pc, #396]	@ (8007268 <HAL_GPIO_DeInit+0x1fc>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d01f      	beq.n	8007120 <HAL_GPIO_DeInit+0xb4>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a62      	ldr	r2, [pc, #392]	@ (800726c <HAL_GPIO_DeInit+0x200>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d019      	beq.n	800711c <HAL_GPIO_DeInit+0xb0>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a61      	ldr	r2, [pc, #388]	@ (8007270 <HAL_GPIO_DeInit+0x204>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d013      	beq.n	8007118 <HAL_GPIO_DeInit+0xac>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a60      	ldr	r2, [pc, #384]	@ (8007274 <HAL_GPIO_DeInit+0x208>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00d      	beq.n	8007114 <HAL_GPIO_DeInit+0xa8>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a5f      	ldr	r2, [pc, #380]	@ (8007278 <HAL_GPIO_DeInit+0x20c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d007      	beq.n	8007110 <HAL_GPIO_DeInit+0xa4>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a5e      	ldr	r2, [pc, #376]	@ (800727c <HAL_GPIO_DeInit+0x210>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d101      	bne.n	800710c <HAL_GPIO_DeInit+0xa0>
 8007108:	2309      	movs	r3, #9
 800710a:	e012      	b.n	8007132 <HAL_GPIO_DeInit+0xc6>
 800710c:	230a      	movs	r3, #10
 800710e:	e010      	b.n	8007132 <HAL_GPIO_DeInit+0xc6>
 8007110:	2308      	movs	r3, #8
 8007112:	e00e      	b.n	8007132 <HAL_GPIO_DeInit+0xc6>
 8007114:	2307      	movs	r3, #7
 8007116:	e00c      	b.n	8007132 <HAL_GPIO_DeInit+0xc6>
 8007118:	2306      	movs	r3, #6
 800711a:	e00a      	b.n	8007132 <HAL_GPIO_DeInit+0xc6>
 800711c:	2305      	movs	r3, #5
 800711e:	e008      	b.n	8007132 <HAL_GPIO_DeInit+0xc6>
 8007120:	2304      	movs	r3, #4
 8007122:	e006      	b.n	8007132 <HAL_GPIO_DeInit+0xc6>
 8007124:	2303      	movs	r3, #3
 8007126:	e004      	b.n	8007132 <HAL_GPIO_DeInit+0xc6>
 8007128:	2302      	movs	r3, #2
 800712a:	e002      	b.n	8007132 <HAL_GPIO_DeInit+0xc6>
 800712c:	2301      	movs	r3, #1
 800712e:	e000      	b.n	8007132 <HAL_GPIO_DeInit+0xc6>
 8007130:	2300      	movs	r3, #0
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	f002 0203 	and.w	r2, r2, #3
 8007138:	0092      	lsls	r2, r2, #2
 800713a:	4093      	lsls	r3, r2
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	429a      	cmp	r2, r3
 8007140:	d136      	bne.n	80071b0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	43db      	mvns	r3, r3
 800714a:	401a      	ands	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	43db      	mvns	r3, r3
 8007158:	401a      	ands	r2, r3
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800715e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	43db      	mvns	r3, r3
 8007168:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800716c:	4013      	ands	r3, r2
 800716e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	43db      	mvns	r3, r3
 800717a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800717e:	4013      	ands	r3, r2
 8007180:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	220f      	movs	r2, #15
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007192:	4a30      	ldr	r2, [pc, #192]	@ (8007254 <HAL_GPIO_DeInit+0x1e8>)
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	089b      	lsrs	r3, r3, #2
 8007198:	3302      	adds	r3, #2
 800719a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	43da      	mvns	r2, r3
 80071a2:	482c      	ldr	r0, [pc, #176]	@ (8007254 <HAL_GPIO_DeInit+0x1e8>)
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	089b      	lsrs	r3, r3, #2
 80071a8:	400a      	ands	r2, r1
 80071aa:	3302      	adds	r3, #2
 80071ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	2103      	movs	r1, #3
 80071ba:	fa01 f303 	lsl.w	r3, r1, r3
 80071be:	431a      	orrs	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	08da      	lsrs	r2, r3, #3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3208      	adds	r2, #8
 80071cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	220f      	movs	r2, #15
 80071da:	fa02 f303 	lsl.w	r3, r2, r3
 80071de:	43db      	mvns	r3, r3
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	08d2      	lsrs	r2, r2, #3
 80071e4:	4019      	ands	r1, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3208      	adds	r2, #8
 80071ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	2103      	movs	r1, #3
 80071f8:	fa01 f303 	lsl.w	r3, r1, r3
 80071fc:	43db      	mvns	r3, r3
 80071fe:	401a      	ands	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	2101      	movs	r1, #1
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	fa01 f303 	lsl.w	r3, r1, r3
 8007210:	43db      	mvns	r3, r3
 8007212:	401a      	ands	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	2103      	movs	r1, #3
 8007222:	fa01 f303 	lsl.w	r3, r1, r3
 8007226:	43db      	mvns	r3, r3
 8007228:	401a      	ands	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	3301      	adds	r3, #1
 8007232:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	fa22 f303 	lsr.w	r3, r2, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	f47f af1f 	bne.w	8007080 <HAL_GPIO_DeInit+0x14>
  }
}
 8007242:	bf00      	nop
 8007244:	bf00      	nop
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	58000080 	.word	0x58000080
 8007254:	58000400 	.word	0x58000400
 8007258:	58020000 	.word	0x58020000
 800725c:	58020400 	.word	0x58020400
 8007260:	58020800 	.word	0x58020800
 8007264:	58020c00 	.word	0x58020c00
 8007268:	58021000 	.word	0x58021000
 800726c:	58021400 	.word	0x58021400
 8007270:	58021800 	.word	0x58021800
 8007274:	58021c00 	.word	0x58021c00
 8007278:	58022000 	.word	0x58022000
 800727c:	58022400 	.word	0x58022400

08007280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	807b      	strh	r3, [r7, #2]
 800728c:	4613      	mov	r3, r2
 800728e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007290:	787b      	ldrb	r3, [r7, #1]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007296:	887a      	ldrh	r2, [r7, #2]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800729c:	e003      	b.n	80072a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800729e:	887b      	ldrh	r3, [r7, #2]
 80072a0:	041a      	lsls	r2, r3, #16
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	619a      	str	r2, [r3, #24]
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e07f      	b.n	80073c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d106      	bne.n	80072e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7f9 fce2 	bl	8000ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2224      	movs	r2, #36	@ 0x24
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0201 	bic.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007304:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007314:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d107      	bne.n	800732e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800732a:	609a      	str	r2, [r3, #8]
 800732c:	e006      	b.n	800733c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800733a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d104      	bne.n	800734e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800734c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6859      	ldr	r1, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	4b1d      	ldr	r3, [pc, #116]	@ (80073d0 <HAL_I2C_Init+0x11c>)
 800735a:	430b      	orrs	r3, r1
 800735c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800736c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691a      	ldr	r2, [r3, #16]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	69d9      	ldr	r1, [r3, #28]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a1a      	ldr	r2, [r3, #32]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	02008000 	.word	0x02008000

080073d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b20      	cmp	r3, #32
 80073e8:	d138      	bne.n	800745c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e032      	b.n	800745e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2224      	movs	r2, #36	@ 0x24
 8007404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0201 	bic.w	r2, r2, #1
 8007416:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007426:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6819      	ldr	r1, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f042 0201 	orr.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	e000      	b.n	800745e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800745c:	2302      	movs	r3, #2
  }
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800746a:	b480      	push	{r7}
 800746c:	b085      	sub	sp, #20
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b20      	cmp	r3, #32
 800747e:	d139      	bne.n	80074f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800748a:	2302      	movs	r3, #2
 800748c:	e033      	b.n	80074f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2224      	movs	r2, #36	@ 0x24
 800749a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0201 	bic.w	r2, r2, #1
 80074ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80074bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	e000      	b.n	80074f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
  }
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
	...

08007504 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800750c:	4b19      	ldr	r3, [pc, #100]	@ (8007574 <HAL_PWREx_ConfigSupply+0x70>)
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b04      	cmp	r3, #4
 8007516:	d00a      	beq.n	800752e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007518:	4b16      	ldr	r3, [pc, #88]	@ (8007574 <HAL_PWREx_ConfigSupply+0x70>)
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f003 0307 	and.w	r3, r3, #7
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	429a      	cmp	r2, r3
 8007524:	d001      	beq.n	800752a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e01f      	b.n	800756a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	e01d      	b.n	800756a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800752e:	4b11      	ldr	r3, [pc, #68]	@ (8007574 <HAL_PWREx_ConfigSupply+0x70>)
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f023 0207 	bic.w	r2, r3, #7
 8007536:	490f      	ldr	r1, [pc, #60]	@ (8007574 <HAL_PWREx_ConfigSupply+0x70>)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4313      	orrs	r3, r2
 800753c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800753e:	f7fa fa67 	bl	8001a10 <HAL_GetTick>
 8007542:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007544:	e009      	b.n	800755a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007546:	f7fa fa63 	bl	8001a10 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007554:	d901      	bls.n	800755a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e007      	b.n	800756a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800755a:	4b06      	ldr	r3, [pc, #24]	@ (8007574 <HAL_PWREx_ConfigSupply+0x70>)
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007566:	d1ee      	bne.n	8007546 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	58024800 	.word	0x58024800

08007578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08c      	sub	sp, #48	@ 0x30
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d102      	bne.n	800758c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f000 bc48 	b.w	8007e1c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 808c 	beq.w	80076b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800759a:	4b96      	ldr	r3, [pc, #600]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075a4:	4b93      	ldr	r3, [pc, #588]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80075a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80075aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d007      	beq.n	80075c0 <HAL_RCC_OscConfig+0x48>
 80075b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b2:	2b18      	cmp	r3, #24
 80075b4:	d111      	bne.n	80075da <HAL_RCC_OscConfig+0x62>
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d10c      	bne.n	80075da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075c0:	4b8c      	ldr	r3, [pc, #560]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d071      	beq.n	80076b0 <HAL_RCC_OscConfig+0x138>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d16d      	bne.n	80076b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f000 bc21 	b.w	8007e1c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075e2:	d106      	bne.n	80075f2 <HAL_RCC_OscConfig+0x7a>
 80075e4:	4b83      	ldr	r3, [pc, #524]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a82      	ldr	r2, [pc, #520]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80075ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	e02e      	b.n	8007650 <HAL_RCC_OscConfig+0xd8>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10c      	bne.n	8007614 <HAL_RCC_OscConfig+0x9c>
 80075fa:	4b7e      	ldr	r3, [pc, #504]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a7d      	ldr	r2, [pc, #500]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	4b7b      	ldr	r3, [pc, #492]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a7a      	ldr	r2, [pc, #488]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 800760c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	e01d      	b.n	8007650 <HAL_RCC_OscConfig+0xd8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800761c:	d10c      	bne.n	8007638 <HAL_RCC_OscConfig+0xc0>
 800761e:	4b75      	ldr	r3, [pc, #468]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a74      	ldr	r2, [pc, #464]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	4b72      	ldr	r3, [pc, #456]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a71      	ldr	r2, [pc, #452]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	e00b      	b.n	8007650 <HAL_RCC_OscConfig+0xd8>
 8007638:	4b6e      	ldr	r3, [pc, #440]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a6d      	ldr	r2, [pc, #436]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 800763e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	4b6b      	ldr	r3, [pc, #428]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a6a      	ldr	r2, [pc, #424]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 800764a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800764e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d015      	beq.n	8007684 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007658:	f7fa f9da 	bl	8001a10 <HAL_GetTick>
 800765c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800765e:	e00a      	b.n	8007676 <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007660:	f7fa f9d6 	bl	8001a10 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800766e:	4293      	cmp	r3, r2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e3d2      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007676:	4b5f      	ldr	r3, [pc, #380]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0ee      	beq.n	8007660 <HAL_RCC_OscConfig+0xe8>
 8007682:	e016      	b.n	80076b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007684:	f7fa f9c4 	bl	8001a10 <HAL_GetTick>
 8007688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800768a:	e00a      	b.n	80076a2 <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800768c:	f7fa f9c0 	bl	8001a10 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800769a:	4293      	cmp	r3, r2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e3bc      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076a2:	4b54      	ldr	r3, [pc, #336]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1ee      	bne.n	800768c <HAL_RCC_OscConfig+0x114>
 80076ae:	e000      	b.n	80076b2 <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 80cb 	beq.w	8007856 <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076c0:	4b4c      	ldr	r3, [pc, #304]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076ca:	4b4a      	ldr	r3, [pc, #296]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80076cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d007      	beq.n	80076e6 <HAL_RCC_OscConfig+0x16e>
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	2b18      	cmp	r3, #24
 80076da:	d156      	bne.n	800778a <HAL_RCC_OscConfig+0x212>
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d151      	bne.n	800778a <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076e6:	4b43      	ldr	r3, [pc, #268]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_RCC_OscConfig+0x186>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e38e      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80076fe:	4b3d      	ldr	r3, [pc, #244]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f023 0219 	bic.w	r2, r3, #25
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	493a      	ldr	r1, [pc, #232]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 800770c:	4313      	orrs	r3, r2
 800770e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007710:	f7fa f97e 	bl	8001a10 <HAL_GetTick>
 8007714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007718:	f7fa f97a 	bl	8001a10 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e378      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800772a:	4b32      	ldr	r3, [pc, #200]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0304 	and.w	r3, r3, #4
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0f0      	beq.n	8007718 <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007736:	f7fa f99b 	bl	8001a70 <HAL_GetREVID>
 800773a:	4603      	mov	r3, r0
 800773c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007740:	4293      	cmp	r3, r2
 8007742:	d817      	bhi.n	8007774 <HAL_RCC_OscConfig+0x1fc>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	2b40      	cmp	r3, #64	@ 0x40
 800774a:	d108      	bne.n	800775e <HAL_RCC_OscConfig+0x1e6>
 800774c:	4b29      	ldr	r3, [pc, #164]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007754:	4a27      	ldr	r2, [pc, #156]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800775a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800775c:	e07b      	b.n	8007856 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800775e:	4b25      	ldr	r3, [pc, #148]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	031b      	lsls	r3, r3, #12
 800776c:	4921      	ldr	r1, [pc, #132]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 800776e:	4313      	orrs	r3, r2
 8007770:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007772:	e070      	b.n	8007856 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007774:	4b1f      	ldr	r3, [pc, #124]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	061b      	lsls	r3, r3, #24
 8007782:	491c      	ldr	r1, [pc, #112]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007784:	4313      	orrs	r3, r2
 8007786:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007788:	e065      	b.n	8007856 <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d048      	beq.n	8007824 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007792:	4b18      	ldr	r3, [pc, #96]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f023 0219 	bic.w	r2, r3, #25
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	4915      	ldr	r1, [pc, #84]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a4:	f7fa f934 	bl	8001a10 <HAL_GetTick>
 80077a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077aa:	e008      	b.n	80077be <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ac:	f7fa f930 	bl	8001a10 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e32e      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077be:	4b0d      	ldr	r3, [pc, #52]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0f0      	beq.n	80077ac <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ca:	f7fa f951 	bl	8001a70 <HAL_GetREVID>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d81a      	bhi.n	800780e <HAL_RCC_OscConfig+0x296>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b40      	cmp	r3, #64	@ 0x40
 80077de:	d10b      	bne.n	80077f8 <HAL_RCC_OscConfig+0x280>
 80077e0:	4b04      	ldr	r3, [pc, #16]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80077e8:	4a02      	ldr	r2, [pc, #8]	@ (80077f4 <HAL_RCC_OscConfig+0x27c>)
 80077ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ee:	6053      	str	r3, [r2, #4]
 80077f0:	e031      	b.n	8007856 <HAL_RCC_OscConfig+0x2de>
 80077f2:	bf00      	nop
 80077f4:	58024400 	.word	0x58024400
 80077f8:	4b9c      	ldr	r3, [pc, #624]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	031b      	lsls	r3, r3, #12
 8007806:	4999      	ldr	r1, [pc, #612]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007808:	4313      	orrs	r3, r2
 800780a:	604b      	str	r3, [r1, #4]
 800780c:	e023      	b.n	8007856 <HAL_RCC_OscConfig+0x2de>
 800780e:	4b97      	ldr	r3, [pc, #604]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	061b      	lsls	r3, r3, #24
 800781c:	4993      	ldr	r1, [pc, #588]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 800781e:	4313      	orrs	r3, r2
 8007820:	604b      	str	r3, [r1, #4]
 8007822:	e018      	b.n	8007856 <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007824:	4b91      	ldr	r3, [pc, #580]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a90      	ldr	r2, [pc, #576]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 800782a:	f023 0301 	bic.w	r3, r3, #1
 800782e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007830:	f7fa f8ee 	bl	8001a10 <HAL_GetTick>
 8007834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007836:	e008      	b.n	800784a <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007838:	f7fa f8ea 	bl	8001a10 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e2e8      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800784a:	4b88      	ldr	r3, [pc, #544]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1f0      	bne.n	8007838 <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0310 	and.w	r3, r3, #16
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 80a9 	beq.w	80079b6 <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007864:	4b81      	ldr	r3, [pc, #516]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800786c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800786e:	4b7f      	ldr	r3, [pc, #508]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007872:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b08      	cmp	r3, #8
 8007878:	d007      	beq.n	800788a <HAL_RCC_OscConfig+0x312>
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	2b18      	cmp	r3, #24
 800787e:	d13a      	bne.n	80078f6 <HAL_RCC_OscConfig+0x37e>
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	2b01      	cmp	r3, #1
 8007888:	d135      	bne.n	80078f6 <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800788a:	4b78      	ldr	r3, [pc, #480]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_RCC_OscConfig+0x32a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	2b80      	cmp	r3, #128	@ 0x80
 800789c:	d001      	beq.n	80078a2 <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e2bc      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078a2:	f7fa f8e5 	bl	8001a70 <HAL_GetREVID>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d817      	bhi.n	80078e0 <HAL_RCC_OscConfig+0x368>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d108      	bne.n	80078ca <HAL_RCC_OscConfig+0x352>
 80078b8:	4b6c      	ldr	r3, [pc, #432]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80078c0:	4a6a      	ldr	r2, [pc, #424]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 80078c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078c8:	e075      	b.n	80079b6 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078ca:	4b68      	ldr	r3, [pc, #416]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	069b      	lsls	r3, r3, #26
 80078d8:	4964      	ldr	r1, [pc, #400]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078de:	e06a      	b.n	80079b6 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078e0:	4b62      	ldr	r3, [pc, #392]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	061b      	lsls	r3, r3, #24
 80078ee:	495f      	ldr	r1, [pc, #380]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078f4:	e05f      	b.n	80079b6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d042      	beq.n	8007984 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80078fe:	4b5b      	ldr	r3, [pc, #364]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a5a      	ldr	r2, [pc, #360]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800790a:	f7fa f881 	bl	8001a10 <HAL_GetTick>
 800790e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007910:	e008      	b.n	8007924 <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007912:	f7fa f87d 	bl	8001a10 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	2b02      	cmp	r3, #2
 800791e:	d901      	bls.n	8007924 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e27b      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007924:	4b51      	ldr	r3, [pc, #324]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0f0      	beq.n	8007912 <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007930:	f7fa f89e 	bl	8001a70 <HAL_GetREVID>
 8007934:	4603      	mov	r3, r0
 8007936:	f241 0203 	movw	r2, #4099	@ 0x1003
 800793a:	4293      	cmp	r3, r2
 800793c:	d817      	bhi.n	800796e <HAL_RCC_OscConfig+0x3f6>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	2b20      	cmp	r3, #32
 8007944:	d108      	bne.n	8007958 <HAL_RCC_OscConfig+0x3e0>
 8007946:	4b49      	ldr	r3, [pc, #292]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800794e:	4a47      	ldr	r2, [pc, #284]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007950:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007954:	6053      	str	r3, [r2, #4]
 8007956:	e02e      	b.n	80079b6 <HAL_RCC_OscConfig+0x43e>
 8007958:	4b44      	ldr	r3, [pc, #272]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	069b      	lsls	r3, r3, #26
 8007966:	4941      	ldr	r1, [pc, #260]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007968:	4313      	orrs	r3, r2
 800796a:	604b      	str	r3, [r1, #4]
 800796c:	e023      	b.n	80079b6 <HAL_RCC_OscConfig+0x43e>
 800796e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	061b      	lsls	r3, r3, #24
 800797c:	493b      	ldr	r1, [pc, #236]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 800797e:	4313      	orrs	r3, r2
 8007980:	60cb      	str	r3, [r1, #12]
 8007982:	e018      	b.n	80079b6 <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007984:	4b39      	ldr	r3, [pc, #228]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a38      	ldr	r2, [pc, #224]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 800798a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800798e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007990:	f7fa f83e 	bl	8001a10 <HAL_GetTick>
 8007994:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007998:	f7fa f83a 	bl	8001a10 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e238      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079aa:	4b30      	ldr	r3, [pc, #192]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f0      	bne.n	8007998 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0308 	and.w	r3, r3, #8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d036      	beq.n	8007a30 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d019      	beq.n	80079fe <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079ca:	4b28      	ldr	r3, [pc, #160]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 80079cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079ce:	4a27      	ldr	r2, [pc, #156]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 80079d0:	f043 0301 	orr.w	r3, r3, #1
 80079d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d6:	f7fa f81b 	bl	8001a10 <HAL_GetTick>
 80079da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80079dc:	e008      	b.n	80079f0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079de:	f7fa f817 	bl	8001a10 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e215      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80079f0:	4b1e      	ldr	r3, [pc, #120]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 80079f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0f0      	beq.n	80079de <HAL_RCC_OscConfig+0x466>
 80079fc:	e018      	b.n	8007a30 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079fe:	4b1b      	ldr	r3, [pc, #108]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a02:	4a1a      	ldr	r2, [pc, #104]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007a04:	f023 0301 	bic.w	r3, r3, #1
 8007a08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a0a:	f7fa f801 	bl	8001a10 <HAL_GetTick>
 8007a0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a10:	e008      	b.n	8007a24 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a12:	f7f9 fffd 	bl	8001a10 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d901      	bls.n	8007a24 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e1fb      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a24:	4b11      	ldr	r3, [pc, #68]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1f0      	bne.n	8007a12 <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0320 	and.w	r3, r3, #32
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d039      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01c      	beq.n	8007a7e <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a44:	4b09      	ldr	r3, [pc, #36]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a08      	ldr	r2, [pc, #32]	@ (8007a6c <HAL_RCC_OscConfig+0x4f4>)
 8007a4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a50:	f7f9 ffde 	bl	8001a10 <HAL_GetTick>
 8007a54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a56:	e00b      	b.n	8007a70 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a58:	f7f9 ffda 	bl	8001a10 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d904      	bls.n	8007a70 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e1d8      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
 8007a6a:	bf00      	nop
 8007a6c:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a70:	4b65      	ldr	r3, [pc, #404]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0ed      	beq.n	8007a58 <HAL_RCC_OscConfig+0x4e0>
 8007a7c:	e018      	b.n	8007ab0 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007a7e:	4b62      	ldr	r3, [pc, #392]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a61      	ldr	r2, [pc, #388]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007a84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a8a:	f7f9 ffc1 	bl	8001a10 <HAL_GetTick>
 8007a8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007a90:	e008      	b.n	8007aa4 <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a92:	f7f9 ffbd 	bl	8001a10 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e1bb      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007aa4:	4b58      	ldr	r3, [pc, #352]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1f0      	bne.n	8007a92 <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 8081 	beq.w	8007bc0 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007abe:	4b53      	ldr	r3, [pc, #332]	@ (8007c0c <HAL_RCC_OscConfig+0x694>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a52      	ldr	r2, [pc, #328]	@ (8007c0c <HAL_RCC_OscConfig+0x694>)
 8007ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ac8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aca:	f7f9 ffa1 	bl	8001a10 <HAL_GetTick>
 8007ace:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ad0:	e008      	b.n	8007ae4 <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad2:	f7f9 ff9d 	bl	8001a10 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	2b64      	cmp	r3, #100	@ 0x64
 8007ade:	d901      	bls.n	8007ae4 <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e19b      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ae4:	4b49      	ldr	r3, [pc, #292]	@ (8007c0c <HAL_RCC_OscConfig+0x694>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0f0      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d106      	bne.n	8007b06 <HAL_RCC_OscConfig+0x58e>
 8007af8:	4b43      	ldr	r3, [pc, #268]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007afc:	4a42      	ldr	r2, [pc, #264]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007afe:	f043 0301 	orr.w	r3, r3, #1
 8007b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b04:	e02d      	b.n	8007b62 <HAL_RCC_OscConfig+0x5ea>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10c      	bne.n	8007b28 <HAL_RCC_OscConfig+0x5b0>
 8007b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b12:	4a3d      	ldr	r2, [pc, #244]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b14:	f023 0301 	bic.w	r3, r3, #1
 8007b18:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b1e:	4a3a      	ldr	r2, [pc, #232]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b20:	f023 0304 	bic.w	r3, r3, #4
 8007b24:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b26:	e01c      	b.n	8007b62 <HAL_RCC_OscConfig+0x5ea>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	2b05      	cmp	r3, #5
 8007b2e:	d10c      	bne.n	8007b4a <HAL_RCC_OscConfig+0x5d2>
 8007b30:	4b35      	ldr	r3, [pc, #212]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b34:	4a34      	ldr	r2, [pc, #208]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b36:	f043 0304 	orr.w	r3, r3, #4
 8007b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b3c:	4b32      	ldr	r3, [pc, #200]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b40:	4a31      	ldr	r2, [pc, #196]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b42:	f043 0301 	orr.w	r3, r3, #1
 8007b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b48:	e00b      	b.n	8007b62 <HAL_RCC_OscConfig+0x5ea>
 8007b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b50:	f023 0301 	bic.w	r3, r3, #1
 8007b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b56:	4b2c      	ldr	r3, [pc, #176]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5a:	4a2b      	ldr	r2, [pc, #172]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b5c:	f023 0304 	bic.w	r3, r3, #4
 8007b60:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d015      	beq.n	8007b96 <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b6a:	f7f9 ff51 	bl	8001a10 <HAL_GetTick>
 8007b6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b70:	e00a      	b.n	8007b88 <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b72:	f7f9 ff4d 	bl	8001a10 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d901      	bls.n	8007b88 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e149      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b88:	4b1f      	ldr	r3, [pc, #124]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0ee      	beq.n	8007b72 <HAL_RCC_OscConfig+0x5fa>
 8007b94:	e014      	b.n	8007bc0 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b96:	f7f9 ff3b 	bl	8001a10 <HAL_GetTick>
 8007b9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b9c:	e00a      	b.n	8007bb4 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b9e:	f7f9 ff37 	bl	8001a10 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d901      	bls.n	8007bb4 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e133      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bb4:	4b14      	ldr	r3, [pc, #80]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1ee      	bne.n	8007b9e <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8128 	beq.w	8007e1a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007bca:	4b0f      	ldr	r3, [pc, #60]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bd2:	2b18      	cmp	r3, #24
 8007bd4:	f000 80b8 	beq.w	8007d48 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	f040 8099 	bne.w	8007d14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be2:	4b09      	ldr	r3, [pc, #36]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a08      	ldr	r2, [pc, #32]	@ (8007c08 <HAL_RCC_OscConfig+0x690>)
 8007be8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bee:	f7f9 ff0f 	bl	8001a10 <HAL_GetTick>
 8007bf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007bf4:	e00c      	b.n	8007c10 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf6:	f7f9 ff0b 	bl	8001a10 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d905      	bls.n	8007c10 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e109      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
 8007c08:	58024400 	.word	0x58024400
 8007c0c:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c10:	4b84      	ldr	r3, [pc, #528]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1ec      	bne.n	8007bf6 <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c1c:	4b81      	ldr	r3, [pc, #516]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007c1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c20:	4b81      	ldr	r3, [pc, #516]	@ (8007e28 <HAL_RCC_OscConfig+0x8b0>)
 8007c22:	4013      	ands	r3, r2
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007c2c:	0112      	lsls	r2, r2, #4
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	497c      	ldr	r1, [pc, #496]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c44:	3b01      	subs	r3, #1
 8007c46:	025b      	lsls	r3, r3, #9
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c50:	3b01      	subs	r3, #1
 8007c52:	041b      	lsls	r3, r3, #16
 8007c54:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	061b      	lsls	r3, r3, #24
 8007c62:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c66:	496f      	ldr	r1, [pc, #444]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007c6c:	4b6d      	ldr	r3, [pc, #436]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c70:	4a6c      	ldr	r2, [pc, #432]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c78:	4b6a      	ldr	r3, [pc, #424]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007c7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c7c:	4b6b      	ldr	r3, [pc, #428]	@ (8007e2c <HAL_RCC_OscConfig+0x8b4>)
 8007c7e:	4013      	ands	r3, r2
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007c84:	00d2      	lsls	r2, r2, #3
 8007c86:	4967      	ldr	r1, [pc, #412]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007c8c:	4b65      	ldr	r3, [pc, #404]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c90:	f023 020c 	bic.w	r2, r3, #12
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c98:	4962      	ldr	r1, [pc, #392]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007c9e:	4b61      	ldr	r3, [pc, #388]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca2:	f023 0202 	bic.w	r2, r3, #2
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007caa:	495e      	ldr	r1, [pc, #376]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007cb0:	4b5c      	ldr	r3, [pc, #368]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb4:	4a5b      	ldr	r2, [pc, #364]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cbc:	4b59      	ldr	r3, [pc, #356]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc0:	4a58      	ldr	r2, [pc, #352]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007cc8:	4b56      	ldr	r3, [pc, #344]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ccc:	4a55      	ldr	r2, [pc, #340]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007cce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007cd4:	4b53      	ldr	r3, [pc, #332]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd8:	4a52      	ldr	r2, [pc, #328]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ce0:	4b50      	ldr	r3, [pc, #320]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cec:	f7f9 fe90 	bl	8001a10 <HAL_GetTick>
 8007cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cf4:	f7f9 fe8c 	bl	8001a10 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e08a      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d06:	4b47      	ldr	r3, [pc, #284]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0f0      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x77c>
 8007d12:	e082      	b.n	8007e1a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d14:	4b43      	ldr	r3, [pc, #268]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a42      	ldr	r2, [pc, #264]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007d1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d20:	f7f9 fe76 	bl	8001a10 <HAL_GetTick>
 8007d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d26:	e008      	b.n	8007d3a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d28:	f7f9 fe72 	bl	8001a10 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e070      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1f0      	bne.n	8007d28 <HAL_RCC_OscConfig+0x7b0>
 8007d46:	e068      	b.n	8007e1a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007d48:	4b36      	ldr	r3, [pc, #216]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007d4e:	4b35      	ldr	r3, [pc, #212]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d031      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f003 0203 	and.w	r2, r3, #3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d12a      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	091b      	lsrs	r3, r3, #4
 8007d6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d122      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d11a      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	0a5b      	lsrs	r3, r3, #9
 8007d8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d111      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	0c1b      	lsrs	r3, r3, #16
 8007da0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d108      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	0e1b      	lsrs	r3, r3, #24
 8007db2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d001      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e02b      	b.n	8007e1c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007dc4:	4b17      	ldr	r3, [pc, #92]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dc8:	08db      	lsrs	r3, r3, #3
 8007dca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d01f      	beq.n	8007e1a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007dda:	4b12      	ldr	r3, [pc, #72]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dde:	4a11      	ldr	r2, [pc, #68]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007de0:	f023 0301 	bic.w	r3, r3, #1
 8007de4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007de6:	f7f9 fe13 	bl	8001a10 <HAL_GetTick>
 8007dea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007dec:	bf00      	nop
 8007dee:	f7f9 fe0f 	bl	8001a10 <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d0f9      	beq.n	8007dee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007e2c <HAL_RCC_OscConfig+0x8b4>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007e06:	00d2      	lsls	r2, r2, #3
 8007e08:	4906      	ldr	r1, [pc, #24]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007e0e:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e12:	4a04      	ldr	r2, [pc, #16]	@ (8007e24 <HAL_RCC_OscConfig+0x8ac>)
 8007e14:	f043 0301 	orr.w	r3, r3, #1
 8007e18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3730      	adds	r7, #48	@ 0x30
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	58024400 	.word	0x58024400
 8007e28:	fffffc0c 	.word	0xfffffc0c
 8007e2c:	ffff0007 	.word	0xffff0007

08007e30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e19c      	b.n	800817e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e44:	4b8a      	ldr	r3, [pc, #552]	@ (8008070 <HAL_RCC_ClockConfig+0x240>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 030f 	and.w	r3, r3, #15
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d910      	bls.n	8007e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e52:	4b87      	ldr	r3, [pc, #540]	@ (8008070 <HAL_RCC_ClockConfig+0x240>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f023 020f 	bic.w	r2, r3, #15
 8007e5a:	4985      	ldr	r1, [pc, #532]	@ (8008070 <HAL_RCC_ClockConfig+0x240>)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e62:	4b83      	ldr	r3, [pc, #524]	@ (8008070 <HAL_RCC_ClockConfig+0x240>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 030f 	and.w	r3, r3, #15
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d001      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e184      	b.n	800817e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d010      	beq.n	8007ea2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	691a      	ldr	r2, [r3, #16]
 8007e84:	4b7b      	ldr	r3, [pc, #492]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d908      	bls.n	8007ea2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e90:	4b78      	ldr	r3, [pc, #480]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	4975      	ldr	r1, [pc, #468]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d010      	beq.n	8007ed0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695a      	ldr	r2, [r3, #20]
 8007eb2:	4b70      	ldr	r3, [pc, #448]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d908      	bls.n	8007ed0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	496a      	ldr	r1, [pc, #424]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0310 	and.w	r3, r3, #16
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d010      	beq.n	8007efe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	699a      	ldr	r2, [r3, #24]
 8007ee0:	4b64      	ldr	r3, [pc, #400]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d908      	bls.n	8007efe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007eec:	4b61      	ldr	r3, [pc, #388]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	495e      	ldr	r1, [pc, #376]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d010      	beq.n	8007f2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69da      	ldr	r2, [r3, #28]
 8007f0e:	4b59      	ldr	r3, [pc, #356]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d908      	bls.n	8007f2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f1a:	4b56      	ldr	r3, [pc, #344]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	4953      	ldr	r1, [pc, #332]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d010      	beq.n	8007f5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	f003 030f 	and.w	r3, r3, #15
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d908      	bls.n	8007f5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f48:	4b4a      	ldr	r3, [pc, #296]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	f023 020f 	bic.w	r2, r3, #15
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	4947      	ldr	r1, [pc, #284]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d055      	beq.n	8008012 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007f66:	4b43      	ldr	r3, [pc, #268]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	4940      	ldr	r1, [pc, #256]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d107      	bne.n	8007f90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f80:	4b3c      	ldr	r3, [pc, #240]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d121      	bne.n	8007fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e0f6      	b.n	800817e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d107      	bne.n	8007fa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f98:	4b36      	ldr	r3, [pc, #216]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d115      	bne.n	8007fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e0ea      	b.n	800817e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d107      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007fb0:	4b30      	ldr	r3, [pc, #192]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d109      	bne.n	8007fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e0de      	b.n	800817e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e0d6      	b.n	800817e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007fd0:	4b28      	ldr	r3, [pc, #160]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	f023 0207 	bic.w	r2, r3, #7
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	4925      	ldr	r1, [pc, #148]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fe2:	f7f9 fd15 	bl	8001a10 <HAL_GetTick>
 8007fe6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fe8:	e00a      	b.n	8008000 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fea:	f7f9 fd11 	bl	8001a10 <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e0be      	b.n	800817e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008000:	4b1c      	ldr	r3, [pc, #112]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	429a      	cmp	r2, r3
 8008010:	d1eb      	bne.n	8007fea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d010      	beq.n	8008040 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	4b14      	ldr	r3, [pc, #80]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	429a      	cmp	r2, r3
 800802c:	d208      	bcs.n	8008040 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800802e:	4b11      	ldr	r3, [pc, #68]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	f023 020f 	bic.w	r2, r3, #15
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	490e      	ldr	r1, [pc, #56]	@ (8008074 <HAL_RCC_ClockConfig+0x244>)
 800803c:	4313      	orrs	r3, r2
 800803e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008040:	4b0b      	ldr	r3, [pc, #44]	@ (8008070 <HAL_RCC_ClockConfig+0x240>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 030f 	and.w	r3, r3, #15
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d214      	bcs.n	8008078 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800804e:	4b08      	ldr	r3, [pc, #32]	@ (8008070 <HAL_RCC_ClockConfig+0x240>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f023 020f 	bic.w	r2, r3, #15
 8008056:	4906      	ldr	r1, [pc, #24]	@ (8008070 <HAL_RCC_ClockConfig+0x240>)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	4313      	orrs	r3, r2
 800805c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800805e:	4b04      	ldr	r3, [pc, #16]	@ (8008070 <HAL_RCC_ClockConfig+0x240>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d005      	beq.n	8008078 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e086      	b.n	800817e <HAL_RCC_ClockConfig+0x34e>
 8008070:	52002000 	.word	0x52002000
 8008074:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b00      	cmp	r3, #0
 8008082:	d010      	beq.n	80080a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	4b3f      	ldr	r3, [pc, #252]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008090:	429a      	cmp	r2, r3
 8008092:	d208      	bcs.n	80080a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008094:	4b3c      	ldr	r3, [pc, #240]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	4939      	ldr	r1, [pc, #228]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0308 	and.w	r3, r3, #8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d010      	beq.n	80080d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	695a      	ldr	r2, [r3, #20]
 80080b6:	4b34      	ldr	r3, [pc, #208]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80080be:	429a      	cmp	r2, r3
 80080c0:	d208      	bcs.n	80080d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80080c2:	4b31      	ldr	r3, [pc, #196]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	492e      	ldr	r1, [pc, #184]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d010      	beq.n	8008102 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	699a      	ldr	r2, [r3, #24]
 80080e4:	4b28      	ldr	r3, [pc, #160]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d208      	bcs.n	8008102 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080f0:	4b25      	ldr	r3, [pc, #148]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 80080f2:	69db      	ldr	r3, [r3, #28]
 80080f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	4922      	ldr	r1, [pc, #136]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	d010      	beq.n	8008130 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	69da      	ldr	r2, [r3, #28]
 8008112:	4b1d      	ldr	r3, [pc, #116]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800811a:	429a      	cmp	r2, r3
 800811c:	d208      	bcs.n	8008130 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800811e:	4b1a      	ldr	r3, [pc, #104]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	4917      	ldr	r1, [pc, #92]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 800812c:	4313      	orrs	r3, r2
 800812e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008130:	f000 f834 	bl	800819c <HAL_RCC_GetSysClockFreq>
 8008134:	4602      	mov	r2, r0
 8008136:	4b14      	ldr	r3, [pc, #80]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	0a1b      	lsrs	r3, r3, #8
 800813c:	f003 030f 	and.w	r3, r3, #15
 8008140:	4912      	ldr	r1, [pc, #72]	@ (800818c <HAL_RCC_ClockConfig+0x35c>)
 8008142:	5ccb      	ldrb	r3, [r1, r3]
 8008144:	f003 031f 	and.w	r3, r3, #31
 8008148:	fa22 f303 	lsr.w	r3, r2, r3
 800814c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800814e:	4b0e      	ldr	r3, [pc, #56]	@ (8008188 <HAL_RCC_ClockConfig+0x358>)
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	4a0d      	ldr	r2, [pc, #52]	@ (800818c <HAL_RCC_ClockConfig+0x35c>)
 8008158:	5cd3      	ldrb	r3, [r2, r3]
 800815a:	f003 031f 	and.w	r3, r3, #31
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	fa22 f303 	lsr.w	r3, r2, r3
 8008164:	4a0a      	ldr	r2, [pc, #40]	@ (8008190 <HAL_RCC_ClockConfig+0x360>)
 8008166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008168:	4a0a      	ldr	r2, [pc, #40]	@ (8008194 <HAL_RCC_ClockConfig+0x364>)
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800816e:	4b0a      	ldr	r3, [pc, #40]	@ (8008198 <HAL_RCC_ClockConfig+0x368>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4618      	mov	r0, r3
 8008174:	f7f9 fc02 	bl	800197c <HAL_InitTick>
 8008178:	4603      	mov	r3, r0
 800817a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	58024400 	.word	0x58024400
 800818c:	08011b28 	.word	0x08011b28
 8008190:	24000004 	.word	0x24000004
 8008194:	24000000 	.word	0x24000000
 8008198:	24000008 	.word	0x24000008

0800819c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800819c:	b480      	push	{r7}
 800819e:	b089      	sub	sp, #36	@ 0x24
 80081a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081a2:	4bb3      	ldr	r3, [pc, #716]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081aa:	2b18      	cmp	r3, #24
 80081ac:	f200 8155 	bhi.w	800845a <HAL_RCC_GetSysClockFreq+0x2be>
 80081b0:	a201      	add	r2, pc, #4	@ (adr r2, 80081b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80081b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b6:	bf00      	nop
 80081b8:	0800821d 	.word	0x0800821d
 80081bc:	0800845b 	.word	0x0800845b
 80081c0:	0800845b 	.word	0x0800845b
 80081c4:	0800845b 	.word	0x0800845b
 80081c8:	0800845b 	.word	0x0800845b
 80081cc:	0800845b 	.word	0x0800845b
 80081d0:	0800845b 	.word	0x0800845b
 80081d4:	0800845b 	.word	0x0800845b
 80081d8:	08008243 	.word	0x08008243
 80081dc:	0800845b 	.word	0x0800845b
 80081e0:	0800845b 	.word	0x0800845b
 80081e4:	0800845b 	.word	0x0800845b
 80081e8:	0800845b 	.word	0x0800845b
 80081ec:	0800845b 	.word	0x0800845b
 80081f0:	0800845b 	.word	0x0800845b
 80081f4:	0800845b 	.word	0x0800845b
 80081f8:	08008249 	.word	0x08008249
 80081fc:	0800845b 	.word	0x0800845b
 8008200:	0800845b 	.word	0x0800845b
 8008204:	0800845b 	.word	0x0800845b
 8008208:	0800845b 	.word	0x0800845b
 800820c:	0800845b 	.word	0x0800845b
 8008210:	0800845b 	.word	0x0800845b
 8008214:	0800845b 	.word	0x0800845b
 8008218:	0800824f 	.word	0x0800824f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800821c:	4b94      	ldr	r3, [pc, #592]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0320 	and.w	r3, r3, #32
 8008224:	2b00      	cmp	r3, #0
 8008226:	d009      	beq.n	800823c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008228:	4b91      	ldr	r3, [pc, #580]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	08db      	lsrs	r3, r3, #3
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	4a90      	ldr	r2, [pc, #576]	@ (8008474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008234:	fa22 f303 	lsr.w	r3, r2, r3
 8008238:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800823a:	e111      	b.n	8008460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800823c:	4b8d      	ldr	r3, [pc, #564]	@ (8008474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800823e:	61bb      	str	r3, [r7, #24]
      break;
 8008240:	e10e      	b.n	8008460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008242:	4b8d      	ldr	r3, [pc, #564]	@ (8008478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008244:	61bb      	str	r3, [r7, #24]
      break;
 8008246:	e10b      	b.n	8008460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008248:	4b8c      	ldr	r3, [pc, #560]	@ (800847c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800824a:	61bb      	str	r3, [r7, #24]
      break;
 800824c:	e108      	b.n	8008460 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800824e:	4b88      	ldr	r3, [pc, #544]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008258:	4b85      	ldr	r3, [pc, #532]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800825a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825c:	091b      	lsrs	r3, r3, #4
 800825e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008262:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008264:	4b82      	ldr	r3, [pc, #520]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800826e:	4b80      	ldr	r3, [pc, #512]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008272:	08db      	lsrs	r3, r3, #3
 8008274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	fb02 f303 	mul.w	r3, r2, r3
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008286:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 80e1 	beq.w	8008454 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b02      	cmp	r3, #2
 8008296:	f000 8083 	beq.w	80083a0 <HAL_RCC_GetSysClockFreq+0x204>
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	2b02      	cmp	r3, #2
 800829e:	f200 80a1 	bhi.w	80083e4 <HAL_RCC_GetSysClockFreq+0x248>
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_RCC_GetSysClockFreq+0x114>
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d056      	beq.n	800835c <HAL_RCC_GetSysClockFreq+0x1c0>
 80082ae:	e099      	b.n	80083e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d02d      	beq.n	8008318 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082bc:	4b6c      	ldr	r3, [pc, #432]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	08db      	lsrs	r3, r3, #3
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	4a6b      	ldr	r2, [pc, #428]	@ (8008474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082c8:	fa22 f303 	lsr.w	r3, r2, r3
 80082cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	ee07 3a90 	vmov	s15, r3
 80082d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e6:	4b62      	ldr	r3, [pc, #392]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80082fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800830a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008312:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008316:	e087      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008322:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008484 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800832a:	4b51      	ldr	r3, [pc, #324]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800832c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800832e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800833a:	ed97 6a02 	vldr	s12, [r7, #8]
 800833e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800834a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800834e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800835a:	e065      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008366:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008488 <HAL_RCC_GetSysClockFreq+0x2ec>
 800836a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800836e:	4b40      	ldr	r3, [pc, #256]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008382:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800838a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800838e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800839a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800839e:	e043      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800848c <HAL_RCC_GetSysClockFreq+0x2f0>
 80083ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083b2:	4b2f      	ldr	r3, [pc, #188]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80083c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083e2:	e021      	b.n	8008428 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008488 <HAL_RCC_GetSysClockFreq+0x2ec>
 80083f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008406:	ed97 6a02 	vldr	s12, [r7, #8]
 800840a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008480 <HAL_RCC_GetSysClockFreq+0x2e4>
 800840e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800841a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800841e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008426:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008428:	4b11      	ldr	r3, [pc, #68]	@ (8008470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800842a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842c:	0a5b      	lsrs	r3, r3, #9
 800842e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008432:	3301      	adds	r3, #1
 8008434:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	ee07 3a90 	vmov	s15, r3
 800843c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008440:	edd7 6a07 	vldr	s13, [r7, #28]
 8008444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800844c:	ee17 3a90 	vmov	r3, s15
 8008450:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008452:	e005      	b.n	8008460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008454:	2300      	movs	r3, #0
 8008456:	61bb      	str	r3, [r7, #24]
      break;
 8008458:	e002      	b.n	8008460 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800845a:	4b07      	ldr	r3, [pc, #28]	@ (8008478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800845c:	61bb      	str	r3, [r7, #24]
      break;
 800845e:	bf00      	nop
  }

  return sysclockfreq;
 8008460:	69bb      	ldr	r3, [r7, #24]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3724      	adds	r7, #36	@ 0x24
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	58024400 	.word	0x58024400
 8008474:	03d09000 	.word	0x03d09000
 8008478:	003d0900 	.word	0x003d0900
 800847c:	017d7840 	.word	0x017d7840
 8008480:	46000000 	.word	0x46000000
 8008484:	4c742400 	.word	0x4c742400
 8008488:	4a742400 	.word	0x4a742400
 800848c:	4bbebc20 	.word	0x4bbebc20

08008490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008496:	f7ff fe81 	bl	800819c <HAL_RCC_GetSysClockFreq>
 800849a:	4602      	mov	r2, r0
 800849c:	4b10      	ldr	r3, [pc, #64]	@ (80084e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	0a1b      	lsrs	r3, r3, #8
 80084a2:	f003 030f 	and.w	r3, r3, #15
 80084a6:	490f      	ldr	r1, [pc, #60]	@ (80084e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80084a8:	5ccb      	ldrb	r3, [r1, r3]
 80084aa:	f003 031f 	and.w	r3, r3, #31
 80084ae:	fa22 f303 	lsr.w	r3, r2, r3
 80084b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80084b4:	4b0a      	ldr	r3, [pc, #40]	@ (80084e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	f003 030f 	and.w	r3, r3, #15
 80084bc:	4a09      	ldr	r2, [pc, #36]	@ (80084e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80084be:	5cd3      	ldrb	r3, [r2, r3]
 80084c0:	f003 031f 	and.w	r3, r3, #31
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ca:	4a07      	ldr	r2, [pc, #28]	@ (80084e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80084cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084ce:	4a07      	ldr	r2, [pc, #28]	@ (80084ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80084d4:	4b04      	ldr	r3, [pc, #16]	@ (80084e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80084d6:	681b      	ldr	r3, [r3, #0]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	58024400 	.word	0x58024400
 80084e4:	08011b28 	.word	0x08011b28
 80084e8:	24000004 	.word	0x24000004
 80084ec:	24000000 	.word	0x24000000

080084f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80084f4:	f7ff ffcc 	bl	8008490 <HAL_RCC_GetHCLKFreq>
 80084f8:	4602      	mov	r2, r0
 80084fa:	4b06      	ldr	r3, [pc, #24]	@ (8008514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	091b      	lsrs	r3, r3, #4
 8008500:	f003 0307 	and.w	r3, r3, #7
 8008504:	4904      	ldr	r1, [pc, #16]	@ (8008518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008506:	5ccb      	ldrb	r3, [r1, r3]
 8008508:	f003 031f 	and.w	r3, r3, #31
 800850c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008510:	4618      	mov	r0, r3
 8008512:	bd80      	pop	{r7, pc}
 8008514:	58024400 	.word	0x58024400
 8008518:	08011b28 	.word	0x08011b28

0800851c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008520:	f7ff ffb6 	bl	8008490 <HAL_RCC_GetHCLKFreq>
 8008524:	4602      	mov	r2, r0
 8008526:	4b06      	ldr	r3, [pc, #24]	@ (8008540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	0a1b      	lsrs	r3, r3, #8
 800852c:	f003 0307 	and.w	r3, r3, #7
 8008530:	4904      	ldr	r1, [pc, #16]	@ (8008544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008532:	5ccb      	ldrb	r3, [r1, r3]
 8008534:	f003 031f 	and.w	r3, r3, #31
 8008538:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800853c:	4618      	mov	r0, r3
 800853e:	bd80      	pop	{r7, pc}
 8008540:	58024400 	.word	0x58024400
 8008544:	08011b28 	.word	0x08011b28

08008548 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800854c:	b0ca      	sub	sp, #296	@ 0x128
 800854e:	af00      	add	r7, sp, #0
 8008550:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008554:	2300      	movs	r3, #0
 8008556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800855a:	2300      	movs	r3, #0
 800855c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800856c:	2500      	movs	r5, #0
 800856e:	ea54 0305 	orrs.w	r3, r4, r5
 8008572:	d049      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800857a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800857e:	d02f      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008580:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008584:	d828      	bhi.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008586:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800858a:	d01a      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800858c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008590:	d822      	bhi.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800859a:	d007      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800859c:	e01c      	b.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800859e:	4bb8      	ldr	r3, [pc, #736]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a2:	4ab7      	ldr	r2, [pc, #732]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085aa:	e01a      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b0:	3308      	adds	r3, #8
 80085b2:	2102      	movs	r1, #2
 80085b4:	4618      	mov	r0, r3
 80085b6:	f002 fb61 	bl	800ac7c <RCCEx_PLL2_Config>
 80085ba:	4603      	mov	r3, r0
 80085bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085c0:	e00f      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c6:	3328      	adds	r3, #40	@ 0x28
 80085c8:	2102      	movs	r1, #2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f002 fc08 	bl	800ade0 <RCCEx_PLL3_Config>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085d6:	e004      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085de:	e000      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80085e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10a      	bne.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80085ea:	4ba5      	ldr	r3, [pc, #660]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085f8:	4aa1      	ldr	r2, [pc, #644]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085fa:	430b      	orrs	r3, r1
 80085fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80085fe:	e003      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008614:	f04f 0900 	mov.w	r9, #0
 8008618:	ea58 0309 	orrs.w	r3, r8, r9
 800861c:	d047      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800861e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008624:	2b04      	cmp	r3, #4
 8008626:	d82a      	bhi.n	800867e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008628:	a201      	add	r2, pc, #4	@ (adr r2, 8008630 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800862a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862e:	bf00      	nop
 8008630:	08008645 	.word	0x08008645
 8008634:	08008653 	.word	0x08008653
 8008638:	08008669 	.word	0x08008669
 800863c:	08008687 	.word	0x08008687
 8008640:	08008687 	.word	0x08008687
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008644:	4b8e      	ldr	r3, [pc, #568]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008648:	4a8d      	ldr	r2, [pc, #564]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800864a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800864e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008650:	e01a      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008656:	3308      	adds	r3, #8
 8008658:	2100      	movs	r1, #0
 800865a:	4618      	mov	r0, r3
 800865c:	f002 fb0e 	bl	800ac7c <RCCEx_PLL2_Config>
 8008660:	4603      	mov	r3, r0
 8008662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008666:	e00f      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866c:	3328      	adds	r3, #40	@ 0x28
 800866e:	2100      	movs	r1, #0
 8008670:	4618      	mov	r0, r3
 8008672:	f002 fbb5 	bl	800ade0 <RCCEx_PLL3_Config>
 8008676:	4603      	mov	r3, r0
 8008678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800867c:	e004      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008684:	e000      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10a      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008690:	4b7b      	ldr	r3, [pc, #492]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008694:	f023 0107 	bic.w	r1, r3, #7
 8008698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800869e:	4a78      	ldr	r2, [pc, #480]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086a0:	430b      	orrs	r3, r1
 80086a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80086a4:	e003      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80086ba:	f04f 0b00 	mov.w	fp, #0
 80086be:	ea5a 030b 	orrs.w	r3, sl, fp
 80086c2:	d04c      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80086c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ce:	d030      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80086d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086d4:	d829      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80086d8:	d02d      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80086da:	2bc0      	cmp	r3, #192	@ 0xc0
 80086dc:	d825      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086de:	2b80      	cmp	r3, #128	@ 0x80
 80086e0:	d018      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80086e2:	2b80      	cmp	r3, #128	@ 0x80
 80086e4:	d821      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d002      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80086ea:	2b40      	cmp	r3, #64	@ 0x40
 80086ec:	d007      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80086ee:	e01c      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086f0:	4b63      	ldr	r3, [pc, #396]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f4:	4a62      	ldr	r2, [pc, #392]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80086fc:	e01c      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008702:	3308      	adds	r3, #8
 8008704:	2100      	movs	r1, #0
 8008706:	4618      	mov	r0, r3
 8008708:	f002 fab8 	bl	800ac7c <RCCEx_PLL2_Config>
 800870c:	4603      	mov	r3, r0
 800870e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008712:	e011      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008718:	3328      	adds	r3, #40	@ 0x28
 800871a:	2100      	movs	r1, #0
 800871c:	4618      	mov	r0, r3
 800871e:	f002 fb5f 	bl	800ade0 <RCCEx_PLL3_Config>
 8008722:	4603      	mov	r3, r0
 8008724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008728:	e006      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008730:	e002      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008732:	bf00      	nop
 8008734:	e000      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10a      	bne.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008740:	4b4f      	ldr	r3, [pc, #316]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008744:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800874e:	4a4c      	ldr	r2, [pc, #304]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008750:	430b      	orrs	r3, r1
 8008752:	6513      	str	r3, [r2, #80]	@ 0x50
 8008754:	e003      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800875a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800875e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800876a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800876e:	2300      	movs	r3, #0
 8008770:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008774:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008778:	460b      	mov	r3, r1
 800877a:	4313      	orrs	r3, r2
 800877c:	d053      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800877e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008782:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008786:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800878a:	d035      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800878c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008790:	d82e      	bhi.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008792:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008796:	d031      	beq.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008798:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800879c:	d828      	bhi.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800879e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087a2:	d01a      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80087a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087a8:	d822      	bhi.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80087ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087b2:	d007      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80087b4:	e01c      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087b6:	4b32      	ldr	r3, [pc, #200]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ba:	4a31      	ldr	r2, [pc, #196]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087c2:	e01c      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c8:	3308      	adds	r3, #8
 80087ca:	2100      	movs	r1, #0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f002 fa55 	bl	800ac7c <RCCEx_PLL2_Config>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80087d8:	e011      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087de:	3328      	adds	r3, #40	@ 0x28
 80087e0:	2100      	movs	r1, #0
 80087e2:	4618      	mov	r0, r3
 80087e4:	f002 fafc 	bl	800ade0 <RCCEx_PLL3_Config>
 80087e8:	4603      	mov	r3, r0
 80087ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087ee:	e006      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087f6:	e002      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80087f8:	bf00      	nop
 80087fa:	e000      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80087fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10b      	bne.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008806:	4b1e      	ldr	r3, [pc, #120]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800880a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800880e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008812:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008816:	4a1a      	ldr	r2, [pc, #104]	@ (8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008818:	430b      	orrs	r3, r1
 800881a:	6593      	str	r3, [r2, #88]	@ 0x58
 800881c:	e003      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800881e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008832:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008836:	2300      	movs	r3, #0
 8008838:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800883c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008840:	460b      	mov	r3, r1
 8008842:	4313      	orrs	r3, r2
 8008844:	d056      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800884e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008852:	d038      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008858:	d831      	bhi.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800885a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800885e:	d034      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008860:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008864:	d82b      	bhi.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800886a:	d01d      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800886c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008870:	d825      	bhi.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008872:	2b00      	cmp	r3, #0
 8008874:	d006      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800887a:	d00a      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800887c:	e01f      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800887e:	bf00      	nop
 8008880:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008884:	4ba2      	ldr	r3, [pc, #648]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008888:	4aa1      	ldr	r2, [pc, #644]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800888a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800888e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008890:	e01c      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008896:	3308      	adds	r3, #8
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f002 f9ee 	bl	800ac7c <RCCEx_PLL2_Config>
 80088a0:	4603      	mov	r3, r0
 80088a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80088a6:	e011      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ac:	3328      	adds	r3, #40	@ 0x28
 80088ae:	2100      	movs	r1, #0
 80088b0:	4618      	mov	r0, r3
 80088b2:	f002 fa95 	bl	800ade0 <RCCEx_PLL3_Config>
 80088b6:	4603      	mov	r3, r0
 80088b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088bc:	e006      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088c4:	e002      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80088c6:	bf00      	nop
 80088c8:	e000      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80088ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10b      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80088d4:	4b8e      	ldr	r3, [pc, #568]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80088dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80088e4:	4a8a      	ldr	r2, [pc, #552]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088e6:	430b      	orrs	r3, r1
 80088e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80088ea:	e003      	b.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80088f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008900:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008904:	2300      	movs	r3, #0
 8008906:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800890a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800890e:	460b      	mov	r3, r1
 8008910:	4313      	orrs	r3, r2
 8008912:	d03a      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800891a:	2b30      	cmp	r3, #48	@ 0x30
 800891c:	d01f      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800891e:	2b30      	cmp	r3, #48	@ 0x30
 8008920:	d819      	bhi.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008922:	2b20      	cmp	r3, #32
 8008924:	d00c      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008926:	2b20      	cmp	r3, #32
 8008928:	d815      	bhi.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d019      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800892e:	2b10      	cmp	r3, #16
 8008930:	d111      	bne.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008932:	4b77      	ldr	r3, [pc, #476]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008936:	4a76      	ldr	r2, [pc, #472]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800893c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800893e:	e011      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008944:	3308      	adds	r3, #8
 8008946:	2102      	movs	r1, #2
 8008948:	4618      	mov	r0, r3
 800894a:	f002 f997 	bl	800ac7c <RCCEx_PLL2_Config>
 800894e:	4603      	mov	r3, r0
 8008950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008954:	e006      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800895c:	e002      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800895e:	bf00      	nop
 8008960:	e000      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10a      	bne.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800896c:	4b68      	ldr	r3, [pc, #416]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800896e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008970:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800897a:	4a65      	ldr	r2, [pc, #404]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800897c:	430b      	orrs	r3, r1
 800897e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008980:	e003      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800898a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008996:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800899a:	2300      	movs	r3, #0
 800899c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80089a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80089a4:	460b      	mov	r3, r1
 80089a6:	4313      	orrs	r3, r2
 80089a8:	d051      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089b4:	d035      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80089b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089ba:	d82e      	bhi.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089c0:	d031      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80089c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089c6:	d828      	bhi.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089cc:	d01a      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80089ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089d2:	d822      	bhi.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80089d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089dc:	d007      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80089de:	e01c      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e0:	4b4b      	ldr	r3, [pc, #300]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e4:	4a4a      	ldr	r2, [pc, #296]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089ec:	e01c      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f2:	3308      	adds	r3, #8
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f002 f940 	bl	800ac7c <RCCEx_PLL2_Config>
 80089fc:	4603      	mov	r3, r0
 80089fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008a02:	e011      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a08:	3328      	adds	r3, #40	@ 0x28
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f002 f9e7 	bl	800ade0 <RCCEx_PLL3_Config>
 8008a12:	4603      	mov	r3, r0
 8008a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008a18:	e006      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a20:	e002      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008a22:	bf00      	nop
 8008a24:	e000      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10a      	bne.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a30:	4b37      	ldr	r3, [pc, #220]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a3e:	4a34      	ldr	r2, [pc, #208]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a40:	430b      	orrs	r3, r1
 8008a42:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a44:	e003      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	d056      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a78:	d033      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008a7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a7e:	d82c      	bhi.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a84:	d02f      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008a86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a8a:	d826      	bhi.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a90:	d02b      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008a92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a96:	d820      	bhi.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a9c:	d012      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008a9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aa2:	d81a      	bhi.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d022      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aac:	d115      	bne.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab2:	3308      	adds	r3, #8
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f002 f8e0 	bl	800ac7c <RCCEx_PLL2_Config>
 8008abc:	4603      	mov	r3, r0
 8008abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ac2:	e015      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac8:	3328      	adds	r3, #40	@ 0x28
 8008aca:	2101      	movs	r1, #1
 8008acc:	4618      	mov	r0, r3
 8008ace:	f002 f987 	bl	800ade0 <RCCEx_PLL3_Config>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ad8:	e00a      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ae0:	e006      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ae2:	bf00      	nop
 8008ae4:	e004      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ae6:	bf00      	nop
 8008ae8:	e002      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008aea:	bf00      	nop
 8008aec:	e000      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10d      	bne.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008af8:	4b05      	ldr	r3, [pc, #20]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008afc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b06:	4a02      	ldr	r2, [pc, #8]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b0c:	e006      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008b0e:	bf00      	nop
 8008b10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008b28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b32:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	d055      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b48:	d033      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b4e:	d82c      	bhi.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b54:	d02f      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b5a:	d826      	bhi.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b60:	d02b      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008b62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b66:	d820      	bhi.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b6c:	d012      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008b6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b72:	d81a      	bhi.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d022      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b7c:	d115      	bne.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b82:	3308      	adds	r3, #8
 8008b84:	2101      	movs	r1, #1
 8008b86:	4618      	mov	r0, r3
 8008b88:	f002 f878 	bl	800ac7c <RCCEx_PLL2_Config>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b92:	e015      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b98:	3328      	adds	r3, #40	@ 0x28
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f002 f91f 	bl	800ade0 <RCCEx_PLL3_Config>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008ba8:	e00a      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008bb0:	e006      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bb2:	bf00      	nop
 8008bb4:	e004      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bb6:	bf00      	nop
 8008bb8:	e002      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bba:	bf00      	nop
 8008bbc:	e000      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10b      	bne.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008bc8:	4ba3      	ldr	r3, [pc, #652]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bcc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008bd8:	4a9f      	ldr	r2, [pc, #636]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bda:	430b      	orrs	r3, r1
 8008bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bde:	e003      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008c02:	460b      	mov	r3, r1
 8008c04:	4313      	orrs	r3, r2
 8008c06:	d037      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c12:	d00e      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c18:	d816      	bhi.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d018      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c22:	d111      	bne.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c24:	4b8c      	ldr	r3, [pc, #560]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c28:	4a8b      	ldr	r2, [pc, #556]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c30:	e00f      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c36:	3308      	adds	r3, #8
 8008c38:	2101      	movs	r1, #1
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f002 f81e 	bl	800ac7c <RCCEx_PLL2_Config>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c46:	e004      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c4e:	e000      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10a      	bne.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c68:	4a7b      	ldr	r2, [pc, #492]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c6e:	e003      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008c8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4313      	orrs	r3, r2
 8008c96:	d039      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d81c      	bhi.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca8:	08008ce5 	.word	0x08008ce5
 8008cac:	08008cb9 	.word	0x08008cb9
 8008cb0:	08008cc7 	.word	0x08008cc7
 8008cb4:	08008ce5 	.word	0x08008ce5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb8:	4b67      	ldr	r3, [pc, #412]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cbc:	4a66      	ldr	r2, [pc, #408]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008cc4:	e00f      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cca:	3308      	adds	r3, #8
 8008ccc:	2102      	movs	r1, #2
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 ffd4 	bl	800ac7c <RCCEx_PLL2_Config>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008cda:	e004      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ce2:	e000      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008cee:	4b5a      	ldr	r3, [pc, #360]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cf2:	f023 0103 	bic.w	r1, r3, #3
 8008cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cfc:	4a56      	ldr	r2, [pc, #344]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cfe:	430b      	orrs	r3, r1
 8008d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008d02:	e003      	b.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008d18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008d26:	460b      	mov	r3, r1
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	f000 809f 	beq.w	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a4a      	ldr	r2, [pc, #296]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d3a:	f7f8 fe69 	bl	8001a10 <HAL_GetTick>
 8008d3e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d42:	e00b      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d44:	f7f8 fe64 	bl	8001a10 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	2b64      	cmp	r3, #100	@ 0x64
 8008d52:	d903      	bls.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d5a:	e005      	b.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d0ed      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d179      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d70:	4b39      	ldr	r3, [pc, #228]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008d7c:	4053      	eors	r3, r2
 8008d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d015      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d86:	4b34      	ldr	r3, [pc, #208]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d92:	4b31      	ldr	r3, [pc, #196]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d96:	4a30      	ldr	r2, [pc, #192]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008da2:	4a2d      	ldr	r2, [pc, #180]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008da8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008daa:	4a2b      	ldr	r2, [pc, #172]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008db0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dbe:	d118      	bne.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc0:	f7f8 fe26 	bl	8001a10 <HAL_GetTick>
 8008dc4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dc8:	e00d      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dca:	f7f8 fe21 	bl	8001a10 <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008dd4:	1ad2      	subs	r2, r2, r3
 8008dd6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d903      	bls.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008de4:	e005      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008de6:	4b1c      	ldr	r3, [pc, #112]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0eb      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d129      	bne.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e0a:	d10e      	bne.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008e0c:	4b12      	ldr	r3, [pc, #72]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e1c:	091a      	lsrs	r2, r3, #4
 8008e1e:	4b10      	ldr	r3, [pc, #64]	@ (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	4a0d      	ldr	r2, [pc, #52]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e24:	430b      	orrs	r3, r1
 8008e26:	6113      	str	r3, [r2, #16]
 8008e28:	e005      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008e34:	6113      	str	r3, [r2, #16]
 8008e36:	4b08      	ldr	r3, [pc, #32]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e46:	4a04      	ldr	r2, [pc, #16]	@ (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e48:	430b      	orrs	r3, r1
 8008e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e4c:	e00e      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008e56:	e009      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008e58:	58024400 	.word	0x58024400
 8008e5c:	58024800 	.word	0x58024800
 8008e60:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f002 0301 	and.w	r3, r2, #1
 8008e78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e82:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008e86:	460b      	mov	r3, r1
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	f000 8089 	beq.w	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e94:	2b28      	cmp	r3, #40	@ 0x28
 8008e96:	d86b      	bhi.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008e98:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9e:	bf00      	nop
 8008ea0:	08008f79 	.word	0x08008f79
 8008ea4:	08008f71 	.word	0x08008f71
 8008ea8:	08008f71 	.word	0x08008f71
 8008eac:	08008f71 	.word	0x08008f71
 8008eb0:	08008f71 	.word	0x08008f71
 8008eb4:	08008f71 	.word	0x08008f71
 8008eb8:	08008f71 	.word	0x08008f71
 8008ebc:	08008f71 	.word	0x08008f71
 8008ec0:	08008f45 	.word	0x08008f45
 8008ec4:	08008f71 	.word	0x08008f71
 8008ec8:	08008f71 	.word	0x08008f71
 8008ecc:	08008f71 	.word	0x08008f71
 8008ed0:	08008f71 	.word	0x08008f71
 8008ed4:	08008f71 	.word	0x08008f71
 8008ed8:	08008f71 	.word	0x08008f71
 8008edc:	08008f71 	.word	0x08008f71
 8008ee0:	08008f5b 	.word	0x08008f5b
 8008ee4:	08008f71 	.word	0x08008f71
 8008ee8:	08008f71 	.word	0x08008f71
 8008eec:	08008f71 	.word	0x08008f71
 8008ef0:	08008f71 	.word	0x08008f71
 8008ef4:	08008f71 	.word	0x08008f71
 8008ef8:	08008f71 	.word	0x08008f71
 8008efc:	08008f71 	.word	0x08008f71
 8008f00:	08008f79 	.word	0x08008f79
 8008f04:	08008f71 	.word	0x08008f71
 8008f08:	08008f71 	.word	0x08008f71
 8008f0c:	08008f71 	.word	0x08008f71
 8008f10:	08008f71 	.word	0x08008f71
 8008f14:	08008f71 	.word	0x08008f71
 8008f18:	08008f71 	.word	0x08008f71
 8008f1c:	08008f71 	.word	0x08008f71
 8008f20:	08008f79 	.word	0x08008f79
 8008f24:	08008f71 	.word	0x08008f71
 8008f28:	08008f71 	.word	0x08008f71
 8008f2c:	08008f71 	.word	0x08008f71
 8008f30:	08008f71 	.word	0x08008f71
 8008f34:	08008f71 	.word	0x08008f71
 8008f38:	08008f71 	.word	0x08008f71
 8008f3c:	08008f71 	.word	0x08008f71
 8008f40:	08008f79 	.word	0x08008f79
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f48:	3308      	adds	r3, #8
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f001 fe95 	bl	800ac7c <RCCEx_PLL2_Config>
 8008f52:	4603      	mov	r3, r0
 8008f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f58:	e00f      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5e:	3328      	adds	r3, #40	@ 0x28
 8008f60:	2101      	movs	r1, #1
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 ff3c 	bl	800ade0 <RCCEx_PLL3_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f6e:	e004      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f76:	e000      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10a      	bne.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f82:	4bbf      	ldr	r3, [pc, #764]	@ (8009280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f90:	4abb      	ldr	r2, [pc, #748]	@ (8009280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f92:	430b      	orrs	r3, r1
 8008f94:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f96:	e003      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f002 0302 	and.w	r3, r2, #2
 8008fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008fb6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	d041      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fc6:	2b05      	cmp	r3, #5
 8008fc8:	d824      	bhi.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008fca:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd0:	0800901d 	.word	0x0800901d
 8008fd4:	08008fe9 	.word	0x08008fe9
 8008fd8:	08008fff 	.word	0x08008fff
 8008fdc:	0800901d 	.word	0x0800901d
 8008fe0:	0800901d 	.word	0x0800901d
 8008fe4:	0800901d 	.word	0x0800901d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fec:	3308      	adds	r3, #8
 8008fee:	2101      	movs	r1, #1
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f001 fe43 	bl	800ac7c <RCCEx_PLL2_Config>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008ffc:	e00f      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009002:	3328      	adds	r3, #40	@ 0x28
 8009004:	2101      	movs	r1, #1
 8009006:	4618      	mov	r0, r3
 8009008:	f001 feea 	bl	800ade0 <RCCEx_PLL3_Config>
 800900c:	4603      	mov	r3, r0
 800900e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009012:	e004      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800901a:	e000      	b.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800901c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10a      	bne.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009026:	4b96      	ldr	r3, [pc, #600]	@ (8009280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800902a:	f023 0107 	bic.w	r1, r3, #7
 800902e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009032:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009034:	4a92      	ldr	r2, [pc, #584]	@ (8009280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009036:	430b      	orrs	r3, r1
 8009038:	6553      	str	r3, [r2, #84]	@ 0x54
 800903a:	e003      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009040:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	f002 0304 	and.w	r3, r2, #4
 8009050:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009054:	2300      	movs	r3, #0
 8009056:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800905a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800905e:	460b      	mov	r3, r1
 8009060:	4313      	orrs	r3, r2
 8009062:	d044      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800906c:	2b05      	cmp	r3, #5
 800906e:	d825      	bhi.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009070:	a201      	add	r2, pc, #4	@ (adr r2, 8009078 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009076:	bf00      	nop
 8009078:	080090c5 	.word	0x080090c5
 800907c:	08009091 	.word	0x08009091
 8009080:	080090a7 	.word	0x080090a7
 8009084:	080090c5 	.word	0x080090c5
 8009088:	080090c5 	.word	0x080090c5
 800908c:	080090c5 	.word	0x080090c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009094:	3308      	adds	r3, #8
 8009096:	2101      	movs	r1, #1
 8009098:	4618      	mov	r0, r3
 800909a:	f001 fdef 	bl	800ac7c <RCCEx_PLL2_Config>
 800909e:	4603      	mov	r3, r0
 80090a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80090a4:	e00f      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090aa:	3328      	adds	r3, #40	@ 0x28
 80090ac:	2101      	movs	r1, #1
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 fe96 	bl	800ade0 <RCCEx_PLL3_Config>
 80090b4:	4603      	mov	r3, r0
 80090b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80090ba:	e004      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090c2:	e000      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80090c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10b      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80090ce:	4b6c      	ldr	r3, [pc, #432]	@ (8009280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d2:	f023 0107 	bic.w	r1, r3, #7
 80090d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090de:	4a68      	ldr	r2, [pc, #416]	@ (8009280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090e0:	430b      	orrs	r3, r1
 80090e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80090e4:	e003      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80090ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	f002 0320 	and.w	r3, r2, #32
 80090fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80090fe:	2300      	movs	r3, #0
 8009100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009108:	460b      	mov	r3, r1
 800910a:	4313      	orrs	r3, r2
 800910c:	d055      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800910e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800911a:	d033      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800911c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009120:	d82c      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009126:	d02f      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800912c:	d826      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800912e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009132:	d02b      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009134:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009138:	d820      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800913a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800913e:	d012      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009144:	d81a      	bhi.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009146:	2b00      	cmp	r3, #0
 8009148:	d022      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800914a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800914e:	d115      	bne.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009154:	3308      	adds	r3, #8
 8009156:	2100      	movs	r1, #0
 8009158:	4618      	mov	r0, r3
 800915a:	f001 fd8f 	bl	800ac7c <RCCEx_PLL2_Config>
 800915e:	4603      	mov	r3, r0
 8009160:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009164:	e015      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800916a:	3328      	adds	r3, #40	@ 0x28
 800916c:	2102      	movs	r1, #2
 800916e:	4618      	mov	r0, r3
 8009170:	f001 fe36 	bl	800ade0 <RCCEx_PLL3_Config>
 8009174:	4603      	mov	r3, r0
 8009176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800917a:	e00a      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009182:	e006      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009184:	bf00      	nop
 8009186:	e004      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009188:	bf00      	nop
 800918a:	e002      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800918c:	bf00      	nop
 800918e:	e000      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10b      	bne.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800919a:	4b39      	ldr	r3, [pc, #228]	@ (8009280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800919c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800919e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80091a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091aa:	4a35      	ldr	r2, [pc, #212]	@ (8009280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091ac:	430b      	orrs	r3, r1
 80091ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80091b0:	e003      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80091ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80091c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80091ca:	2300      	movs	r3, #0
 80091cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80091d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4313      	orrs	r3, r2
 80091d8:	d058      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80091da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80091e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80091e6:	d033      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80091e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80091ec:	d82c      	bhi.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091f2:	d02f      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80091f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091f8:	d826      	bhi.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80091fe:	d02b      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009204:	d820      	bhi.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800920a:	d012      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800920c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009210:	d81a      	bhi.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d022      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800921a:	d115      	bne.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800921c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009220:	3308      	adds	r3, #8
 8009222:	2100      	movs	r1, #0
 8009224:	4618      	mov	r0, r3
 8009226:	f001 fd29 	bl	800ac7c <RCCEx_PLL2_Config>
 800922a:	4603      	mov	r3, r0
 800922c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009230:	e015      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009236:	3328      	adds	r3, #40	@ 0x28
 8009238:	2102      	movs	r1, #2
 800923a:	4618      	mov	r0, r3
 800923c:	f001 fdd0 	bl	800ade0 <RCCEx_PLL3_Config>
 8009240:	4603      	mov	r3, r0
 8009242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009246:	e00a      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800924e:	e006      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009250:	bf00      	nop
 8009252:	e004      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009254:	bf00      	nop
 8009256:	e002      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009258:	bf00      	nop
 800925a:	e000      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800925c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800925e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10e      	bne.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009266:	4b06      	ldr	r3, [pc, #24]	@ (8009280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800926a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800926e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009272:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009276:	4a02      	ldr	r2, [pc, #8]	@ (8009280 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009278:	430b      	orrs	r3, r1
 800927a:	6593      	str	r3, [r2, #88]	@ 0x58
 800927c:	e006      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800927e:	bf00      	nop
 8009280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009288:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800928c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800929c:	2300      	movs	r3, #0
 800929e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80092a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80092a6:	460b      	mov	r3, r1
 80092a8:	4313      	orrs	r3, r2
 80092aa:	d055      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80092ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80092b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80092b8:	d033      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80092ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80092be:	d82c      	bhi.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c4:	d02f      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80092c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092ca:	d826      	bhi.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80092d0:	d02b      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80092d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80092d6:	d820      	bhi.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092dc:	d012      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80092de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092e2:	d81a      	bhi.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d022      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80092e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ec:	d115      	bne.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f2:	3308      	adds	r3, #8
 80092f4:	2100      	movs	r1, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f001 fcc0 	bl	800ac7c <RCCEx_PLL2_Config>
 80092fc:	4603      	mov	r3, r0
 80092fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009302:	e015      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009308:	3328      	adds	r3, #40	@ 0x28
 800930a:	2102      	movs	r1, #2
 800930c:	4618      	mov	r0, r3
 800930e:	f001 fd67 	bl	800ade0 <RCCEx_PLL3_Config>
 8009312:	4603      	mov	r3, r0
 8009314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009318:	e00a      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009320:	e006      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009322:	bf00      	nop
 8009324:	e004      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009326:	bf00      	nop
 8009328:	e002      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800932a:	bf00      	nop
 800932c:	e000      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800932e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10b      	bne.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009338:	4ba1      	ldr	r3, [pc, #644]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800933a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800933c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009344:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009348:	4a9d      	ldr	r2, [pc, #628]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800934a:	430b      	orrs	r3, r1
 800934c:	6593      	str	r3, [r2, #88]	@ 0x58
 800934e:	e003      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f002 0308 	and.w	r3, r2, #8
 8009364:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009368:	2300      	movs	r3, #0
 800936a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800936e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009372:	460b      	mov	r3, r1
 8009374:	4313      	orrs	r3, r2
 8009376:	d01e      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009384:	d10c      	bne.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800938a:	3328      	adds	r3, #40	@ 0x28
 800938c:	2102      	movs	r1, #2
 800938e:	4618      	mov	r0, r3
 8009390:	f001 fd26 	bl	800ade0 <RCCEx_PLL3_Config>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80093a0:	4b87      	ldr	r3, [pc, #540]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80093a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093b0:	4a83      	ldr	r2, [pc, #524]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093b2:	430b      	orrs	r3, r1
 80093b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80093b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093be:	f002 0310 	and.w	r3, r2, #16
 80093c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093c6:	2300      	movs	r3, #0
 80093c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80093cc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80093d0:	460b      	mov	r3, r1
 80093d2:	4313      	orrs	r3, r2
 80093d4:	d01e      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093e2:	d10c      	bne.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80093e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e8:	3328      	adds	r3, #40	@ 0x28
 80093ea:	2102      	movs	r1, #2
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 fcf7 	bl	800ade0 <RCCEx_PLL3_Config>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80093fe:	4b70      	ldr	r3, [pc, #448]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009402:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800940a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800940e:	4a6c      	ldr	r2, [pc, #432]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009410:	430b      	orrs	r3, r1
 8009412:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009424:	2300      	movs	r3, #0
 8009426:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800942a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800942e:	460b      	mov	r3, r1
 8009430:	4313      	orrs	r3, r2
 8009432:	d03e      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009438:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800943c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009440:	d022      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009446:	d81b      	bhi.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800944c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009450:	d00b      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009452:	e015      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009458:	3308      	adds	r3, #8
 800945a:	2100      	movs	r1, #0
 800945c:	4618      	mov	r0, r3
 800945e:	f001 fc0d 	bl	800ac7c <RCCEx_PLL2_Config>
 8009462:	4603      	mov	r3, r0
 8009464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009468:	e00f      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800946a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800946e:	3328      	adds	r3, #40	@ 0x28
 8009470:	2102      	movs	r1, #2
 8009472:	4618      	mov	r0, r3
 8009474:	f001 fcb4 	bl	800ade0 <RCCEx_PLL3_Config>
 8009478:	4603      	mov	r3, r0
 800947a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800947e:	e004      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009486:	e000      	b.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800948a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10b      	bne.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009492:	4b4b      	ldr	r3, [pc, #300]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009496:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800949a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80094a2:	4a47      	ldr	r2, [pc, #284]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094a4:	430b      	orrs	r3, r1
 80094a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80094a8:	e003      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80094be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094c0:	2300      	movs	r3, #0
 80094c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80094c8:	460b      	mov	r3, r1
 80094ca:	4313      	orrs	r3, r2
 80094cc:	d03b      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80094ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094da:	d01f      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80094dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094e0:	d818      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80094e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094e6:	d003      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80094e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094ec:	d007      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80094ee:	e011      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094f0:	4b33      	ldr	r3, [pc, #204]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f4:	4a32      	ldr	r2, [pc, #200]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80094fc:	e00f      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009502:	3328      	adds	r3, #40	@ 0x28
 8009504:	2101      	movs	r1, #1
 8009506:	4618      	mov	r0, r3
 8009508:	f001 fc6a 	bl	800ade0 <RCCEx_PLL3_Config>
 800950c:	4603      	mov	r3, r0
 800950e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009512:	e004      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800951a:	e000      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800951c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800951e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10b      	bne.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009526:	4b26      	ldr	r3, [pc, #152]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800952a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800952e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009536:	4a22      	ldr	r2, [pc, #136]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009538:	430b      	orrs	r3, r1
 800953a:	6553      	str	r3, [r2, #84]	@ 0x54
 800953c:	e003      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009552:	673b      	str	r3, [r7, #112]	@ 0x70
 8009554:	2300      	movs	r3, #0
 8009556:	677b      	str	r3, [r7, #116]	@ 0x74
 8009558:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800955c:	460b      	mov	r3, r1
 800955e:	4313      	orrs	r3, r2
 8009560:	d034      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800956c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009570:	d007      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009572:	e011      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009574:	4b12      	ldr	r3, [pc, #72]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	4a11      	ldr	r2, [pc, #68]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800957a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800957e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009580:	e00e      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009586:	3308      	adds	r3, #8
 8009588:	2102      	movs	r1, #2
 800958a:	4618      	mov	r0, r3
 800958c:	f001 fb76 	bl	800ac7c <RCCEx_PLL2_Config>
 8009590:	4603      	mov	r3, r0
 8009592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009596:	e003      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800959e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10d      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80095a8:	4b05      	ldr	r3, [pc, #20]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80095b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b6:	4a02      	ldr	r2, [pc, #8]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095b8:	430b      	orrs	r3, r1
 80095ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095bc:	e006      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80095be:	bf00      	nop
 80095c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80095d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095da:	2300      	movs	r3, #0
 80095dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80095de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80095e2:	460b      	mov	r3, r1
 80095e4:	4313      	orrs	r3, r2
 80095e6:	d00c      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ec:	3328      	adds	r3, #40	@ 0x28
 80095ee:	2102      	movs	r1, #2
 80095f0:	4618      	mov	r0, r3
 80095f2:	f001 fbf5 	bl	800ade0 <RCCEx_PLL3_Config>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800960e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009610:	2300      	movs	r3, #0
 8009612:	667b      	str	r3, [r7, #100]	@ 0x64
 8009614:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009618:	460b      	mov	r3, r1
 800961a:	4313      	orrs	r3, r2
 800961c:	d038      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800961e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800962a:	d018      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800962c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009630:	d811      	bhi.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009636:	d014      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800963c:	d80b      	bhi.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800963e:	2b00      	cmp	r3, #0
 8009640:	d011      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009646:	d106      	bne.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009648:	4bc3      	ldr	r3, [pc, #780]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800964a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964c:	4ac2      	ldr	r2, [pc, #776]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800964e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009654:	e008      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800965c:	e004      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800965e:	bf00      	nop
 8009660:	e002      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009662:	bf00      	nop
 8009664:	e000      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10b      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009670:	4bb9      	ldr	r3, [pc, #740]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009674:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009680:	4ab5      	ldr	r2, [pc, #724]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009682:	430b      	orrs	r3, r1
 8009684:	6553      	str	r3, [r2, #84]	@ 0x54
 8009686:	e003      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800968c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800969c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800969e:	2300      	movs	r3, #0
 80096a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096a2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80096a6:	460b      	mov	r3, r1
 80096a8:	4313      	orrs	r3, r2
 80096aa:	d009      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80096ac:	4baa      	ldr	r3, [pc, #680]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80096b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ba:	4aa7      	ldr	r2, [pc, #668]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096bc:	430b      	orrs	r3, r1
 80096be:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80096c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80096cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80096ce:	2300      	movs	r3, #0
 80096d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80096d2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80096d6:	460b      	mov	r3, r1
 80096d8:	4313      	orrs	r3, r2
 80096da:	d00a      	beq.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80096dc:	4b9e      	ldr	r3, [pc, #632]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80096e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80096ec:	4a9a      	ldr	r2, [pc, #616]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096ee:	430b      	orrs	r3, r1
 80096f0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80096fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009700:	2300      	movs	r3, #0
 8009702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009704:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009708:	460b      	mov	r3, r1
 800970a:	4313      	orrs	r3, r2
 800970c:	d009      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800970e:	4b92      	ldr	r3, [pc, #584]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009712:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800971a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800971c:	4a8e      	ldr	r2, [pc, #568]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800971e:	430b      	orrs	r3, r1
 8009720:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800972e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009730:	2300      	movs	r3, #0
 8009732:	647b      	str	r3, [r7, #68]	@ 0x44
 8009734:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009738:	460b      	mov	r3, r1
 800973a:	4313      	orrs	r3, r2
 800973c:	d00e      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800973e:	4b86      	ldr	r3, [pc, #536]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	4a85      	ldr	r2, [pc, #532]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009744:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009748:	6113      	str	r3, [r2, #16]
 800974a:	4b83      	ldr	r3, [pc, #524]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800974c:	6919      	ldr	r1, [r3, #16]
 800974e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009752:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009756:	4a80      	ldr	r2, [pc, #512]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009758:	430b      	orrs	r3, r1
 800975a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800975c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800976a:	2300      	movs	r3, #0
 800976c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800976e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009772:	460b      	mov	r3, r1
 8009774:	4313      	orrs	r3, r2
 8009776:	d009      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009778:	4b77      	ldr	r3, [pc, #476]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800977a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800977c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009786:	4a74      	ldr	r2, [pc, #464]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009788:	430b      	orrs	r3, r1
 800978a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800978c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009798:	633b      	str	r3, [r7, #48]	@ 0x30
 800979a:	2300      	movs	r3, #0
 800979c:	637b      	str	r3, [r7, #52]	@ 0x34
 800979e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80097a2:	460b      	mov	r3, r1
 80097a4:	4313      	orrs	r3, r2
 80097a6:	d00a      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80097a8:	4b6b      	ldr	r3, [pc, #428]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80097b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097b8:	4a67      	ldr	r2, [pc, #412]	@ (8009958 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097ba:	430b      	orrs	r3, r1
 80097bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80097be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	2100      	movs	r1, #0
 80097c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80097d4:	460b      	mov	r3, r1
 80097d6:	4313      	orrs	r3, r2
 80097d8:	d011      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097de:	3308      	adds	r3, #8
 80097e0:	2100      	movs	r1, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f001 fa4a 	bl	800ac7c <RCCEx_PLL2_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80097ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d003      	beq.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80097fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	2100      	movs	r1, #0
 8009808:	6239      	str	r1, [r7, #32]
 800980a:	f003 0302 	and.w	r3, r3, #2
 800980e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009810:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009814:	460b      	mov	r3, r1
 8009816:	4313      	orrs	r3, r2
 8009818:	d011      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800981a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800981e:	3308      	adds	r3, #8
 8009820:	2101      	movs	r1, #1
 8009822:	4618      	mov	r0, r3
 8009824:	f001 fa2a 	bl	800ac7c <RCCEx_PLL2_Config>
 8009828:	4603      	mov	r3, r0
 800982a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800982e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800983a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	2100      	movs	r1, #0
 8009848:	61b9      	str	r1, [r7, #24]
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	61fb      	str	r3, [r7, #28]
 8009850:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009854:	460b      	mov	r3, r1
 8009856:	4313      	orrs	r3, r2
 8009858:	d011      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800985a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800985e:	3308      	adds	r3, #8
 8009860:	2102      	movs	r1, #2
 8009862:	4618      	mov	r0, r3
 8009864:	f001 fa0a 	bl	800ac7c <RCCEx_PLL2_Config>
 8009868:	4603      	mov	r3, r0
 800986a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800986e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800987a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800987e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	2100      	movs	r1, #0
 8009888:	6139      	str	r1, [r7, #16]
 800988a:	f003 0308 	and.w	r3, r3, #8
 800988e:	617b      	str	r3, [r7, #20]
 8009890:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009894:	460b      	mov	r3, r1
 8009896:	4313      	orrs	r3, r2
 8009898:	d011      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800989a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800989e:	3328      	adds	r3, #40	@ 0x28
 80098a0:	2100      	movs	r1, #0
 80098a2:	4618      	mov	r0, r3
 80098a4:	f001 fa9c 	bl	800ade0 <RCCEx_PLL3_Config>
 80098a8:	4603      	mov	r3, r0
 80098aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80098ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80098be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c6:	2100      	movs	r1, #0
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	f003 0310 	and.w	r3, r3, #16
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80098d4:	460b      	mov	r3, r1
 80098d6:	4313      	orrs	r3, r2
 80098d8:	d011      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098de:	3328      	adds	r3, #40	@ 0x28
 80098e0:	2101      	movs	r1, #1
 80098e2:	4618      	mov	r0, r3
 80098e4:	f001 fa7c 	bl	800ade0 <RCCEx_PLL3_Config>
 80098e8:	4603      	mov	r3, r0
 80098ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80098ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80098fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	2100      	movs	r1, #0
 8009908:	6039      	str	r1, [r7, #0]
 800990a:	f003 0320 	and.w	r3, r3, #32
 800990e:	607b      	str	r3, [r7, #4]
 8009910:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009914:	460b      	mov	r3, r1
 8009916:	4313      	orrs	r3, r2
 8009918:	d011      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800991a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800991e:	3328      	adds	r3, #40	@ 0x28
 8009920:	2102      	movs	r1, #2
 8009922:	4618      	mov	r0, r3
 8009924:	f001 fa5c 	bl	800ade0 <RCCEx_PLL3_Config>
 8009928:	4603      	mov	r3, r0
 800992a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800992e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800993a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800993e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	e000      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
}
 800994c:	4618      	mov	r0, r3
 800994e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009952:	46bd      	mov	sp, r7
 8009954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009958:	58024400 	.word	0x58024400

0800995c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b090      	sub	sp, #64	@ 0x40
 8009960:	af00      	add	r7, sp, #0
 8009962:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800996a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800996e:	430b      	orrs	r3, r1
 8009970:	f040 8094 	bne.w	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009974:	4b9e      	ldr	r3, [pc, #632]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009978:	f003 0307 	and.w	r3, r3, #7
 800997c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	2b04      	cmp	r3, #4
 8009982:	f200 8087 	bhi.w	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009986:	a201      	add	r2, pc, #4	@ (adr r2, 800998c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998c:	080099a1 	.word	0x080099a1
 8009990:	080099c9 	.word	0x080099c9
 8009994:	080099f1 	.word	0x080099f1
 8009998:	08009a8d 	.word	0x08009a8d
 800999c:	08009a19 	.word	0x08009a19
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099a0:	4b93      	ldr	r3, [pc, #588]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099ac:	d108      	bne.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099b2:	4618      	mov	r0, r3
 80099b4:	f001 f810 	bl	800a9d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099bc:	f000 bd45 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099c0:	2300      	movs	r3, #0
 80099c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099c4:	f000 bd41 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099c8:	4b89      	ldr	r3, [pc, #548]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099d4:	d108      	bne.n	80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099d6:	f107 0318 	add.w	r3, r7, #24
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 fd54 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099e4:	f000 bd31 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ec:	f000 bd2d 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099f0:	4b7f      	ldr	r3, [pc, #508]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099fc:	d108      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099fe:	f107 030c 	add.w	r3, r7, #12
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 fe94 	bl	800a730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a0c:	f000 bd1d 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a14:	f000 bd19 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a18:	4b75      	ldr	r3, [pc, #468]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a20:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a22:	4b73      	ldr	r3, [pc, #460]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0304 	and.w	r3, r3, #4
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d10c      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d109      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a34:	4b6e      	ldr	r3, [pc, #440]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	08db      	lsrs	r3, r3, #3
 8009a3a:	f003 0303 	and.w	r3, r3, #3
 8009a3e:	4a6d      	ldr	r2, [pc, #436]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009a40:	fa22 f303 	lsr.w	r3, r2, r3
 8009a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a46:	e01f      	b.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a48:	4b69      	ldr	r3, [pc, #420]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a54:	d106      	bne.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a5c:	d102      	bne.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a5e:	4b66      	ldr	r3, [pc, #408]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a62:	e011      	b.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a64:	4b62      	ldr	r3, [pc, #392]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a70:	d106      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a78:	d102      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a7a:	4b60      	ldr	r3, [pc, #384]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a7e:	e003      	b.n	8009a88 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a84:	f000 bce1 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a88:	f000 bcdf 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a8c:	4b5c      	ldr	r3, [pc, #368]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a90:	f000 bcdb 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a98:	f000 bcd7 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aa0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009aa4:	430b      	orrs	r3, r1
 8009aa6:	f040 80ad 	bne.w	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009aaa:	4b51      	ldr	r3, [pc, #324]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aae:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009ab2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aba:	d056      	beq.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ac2:	f200 8090 	bhi.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac8:	2bc0      	cmp	r3, #192	@ 0xc0
 8009aca:	f000 8088 	beq.w	8009bde <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad0:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ad2:	f200 8088 	bhi.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad8:	2b80      	cmp	r3, #128	@ 0x80
 8009ada:	d032      	beq.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ade:	2b80      	cmp	r3, #128	@ 0x80
 8009ae0:	f200 8081 	bhi.w	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aec:	2b40      	cmp	r3, #64	@ 0x40
 8009aee:	d014      	beq.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009af0:	e079      	b.n	8009be6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009af2:	4b3f      	ldr	r3, [pc, #252]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009afa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009afe:	d108      	bne.n	8009b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 ff67 	bl	800a9d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b0e:	f000 bc9c 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b16:	f000 bc98 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b1a:	4b35      	ldr	r3, [pc, #212]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b26:	d108      	bne.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b28:	f107 0318 	add.w	r3, r7, #24
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 fcab 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b36:	f000 bc88 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b3e:	f000 bc84 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b42:	4b2b      	ldr	r3, [pc, #172]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b4e:	d108      	bne.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b50:	f107 030c 	add.w	r3, r7, #12
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 fdeb 	bl	800a730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b5e:	f000 bc74 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b66:	f000 bc70 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b6a:	4b21      	ldr	r3, [pc, #132]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b72:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b74:	4b1e      	ldr	r3, [pc, #120]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0304 	and.w	r3, r3, #4
 8009b7c:	2b04      	cmp	r3, #4
 8009b7e:	d10c      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d109      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b86:	4b1a      	ldr	r3, [pc, #104]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	08db      	lsrs	r3, r3, #3
 8009b8c:	f003 0303 	and.w	r3, r3, #3
 8009b90:	4a18      	ldr	r2, [pc, #96]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b92:	fa22 f303 	lsr.w	r3, r2, r3
 8009b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b98:	e01f      	b.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b9a:	4b15      	ldr	r3, [pc, #84]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ba6:	d106      	bne.n	8009bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009baa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bae:	d102      	bne.n	8009bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009bb0:	4b11      	ldr	r3, [pc, #68]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bb4:	e011      	b.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bc2:	d106      	bne.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bca:	d102      	bne.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bd0:	e003      	b.n	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009bd6:	f000 bc38 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bda:	f000 bc36 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bde:	4b08      	ldr	r3, [pc, #32]	@ (8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be2:	f000 bc32 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bea:	f000 bc2e 	b.w	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bee:	bf00      	nop
 8009bf0:	58024400 	.word	0x58024400
 8009bf4:	03d09000 	.word	0x03d09000
 8009bf8:	003d0900 	.word	0x003d0900
 8009bfc:	017d7840 	.word	0x017d7840
 8009c00:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c08:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	f040 809c 	bne.w	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009c12:	4b9e      	ldr	r3, [pc, #632]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c16:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009c1a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c22:	d054      	beq.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c2a:	f200 808b 	bhi.w	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c34:	f000 8083 	beq.w	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c3e:	f200 8081 	bhi.w	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c48:	d02f      	beq.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c50:	d878      	bhi.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d004      	beq.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c5e:	d012      	beq.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009c60:	e070      	b.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c62:	4b8a      	ldr	r3, [pc, #552]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c6e:	d107      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 feaf 	bl	800a9d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c7e:	e3e4      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c84:	e3e1      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c86:	4b81      	ldr	r3, [pc, #516]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c92:	d107      	bne.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c94:	f107 0318 	add.w	r3, r7, #24
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 fbf5 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ca2:	e3d2      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca8:	e3cf      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009caa:	4b78      	ldr	r3, [pc, #480]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cb6:	d107      	bne.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cb8:	f107 030c 	add.w	r3, r7, #12
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 fd37 	bl	800a730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cc6:	e3c0      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ccc:	e3bd      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cce:	4b6f      	ldr	r3, [pc, #444]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009cd6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cd8:	4b6c      	ldr	r3, [pc, #432]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0304 	and.w	r3, r3, #4
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	d10c      	bne.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d109      	bne.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cea:	4b68      	ldr	r3, [pc, #416]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	08db      	lsrs	r3, r3, #3
 8009cf0:	f003 0303 	and.w	r3, r3, #3
 8009cf4:	4a66      	ldr	r2, [pc, #408]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cfc:	e01e      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cfe:	4b63      	ldr	r3, [pc, #396]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d0a:	d106      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d12:	d102      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d14:	4b5f      	ldr	r3, [pc, #380]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d18:	e010      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d26:	d106      	bne.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d2e:	d102      	bne.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d30:	4b59      	ldr	r3, [pc, #356]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d34:	e002      	b.n	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d3a:	e386      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d3c:	e385      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d3e:	4b57      	ldr	r3, [pc, #348]	@ (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d42:	e382      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009d44:	2300      	movs	r3, #0
 8009d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d48:	e37f      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d4e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009d52:	430b      	orrs	r3, r1
 8009d54:	f040 80a7 	bne.w	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009d58:	4b4c      	ldr	r3, [pc, #304]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d5c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009d60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d68:	d055      	beq.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d70:	f200 8096 	bhi.w	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009d7a:	f000 8084 	beq.w	8009e86 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009d84:	f200 808c 	bhi.w	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d8e:	d030      	beq.n	8009df2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d96:	f200 8083 	bhi.w	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d004      	beq.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009da6:	d012      	beq.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009da8:	e07a      	b.n	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009daa:	4b38      	ldr	r3, [pc, #224]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009db2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009db6:	d107      	bne.n	8009dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 fe0b 	bl	800a9d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dc6:	e340      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dcc:	e33d      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dce:	4b2f      	ldr	r3, [pc, #188]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dda:	d107      	bne.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ddc:	f107 0318 	add.w	r3, r7, #24
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 fb51 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dea:	e32e      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dec:	2300      	movs	r3, #0
 8009dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df0:	e32b      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009df2:	4b26      	ldr	r3, [pc, #152]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dfe:	d107      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e00:	f107 030c 	add.w	r3, r7, #12
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 fc93 	bl	800a730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e0e:	e31c      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e14:	e319      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e16:	4b1d      	ldr	r3, [pc, #116]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e1e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e20:	4b1a      	ldr	r3, [pc, #104]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 0304 	and.w	r3, r3, #4
 8009e28:	2b04      	cmp	r3, #4
 8009e2a:	d10c      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d109      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e32:	4b16      	ldr	r3, [pc, #88]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	08db      	lsrs	r3, r3, #3
 8009e38:	f003 0303 	and.w	r3, r3, #3
 8009e3c:	4a14      	ldr	r2, [pc, #80]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e44:	e01e      	b.n	8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e46:	4b11      	ldr	r3, [pc, #68]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e52:	d106      	bne.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e5a:	d102      	bne.n	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e60:	e010      	b.n	8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e62:	4b0a      	ldr	r3, [pc, #40]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e6e:	d106      	bne.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e76:	d102      	bne.n	8009e7e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e78:	4b07      	ldr	r3, [pc, #28]	@ (8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e7c:	e002      	b.n	8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e82:	e2e2      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e84:	e2e1      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e86:	4b05      	ldr	r3, [pc, #20]	@ (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e8a:	e2de      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e8c:	58024400 	.word	0x58024400
 8009e90:	03d09000 	.word	0x03d09000
 8009e94:	003d0900 	.word	0x003d0900
 8009e98:	017d7840 	.word	0x017d7840
 8009e9c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea4:	e2d1      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eaa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009eae:	430b      	orrs	r3, r1
 8009eb0:	f040 809c 	bne.w	8009fec <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009eb4:	4b93      	ldr	r3, [pc, #588]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eb8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009ebc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ec4:	d054      	beq.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ecc:	f200 808b 	bhi.w	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ed6:	f000 8083 	beq.w	8009fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009edc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ee0:	f200 8081 	bhi.w	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009eea:	d02f      	beq.n	8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ef2:	d878      	bhi.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d004      	beq.n	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f00:	d012      	beq.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009f02:	e070      	b.n	8009fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f04:	4b7f      	ldr	r3, [pc, #508]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f10:	d107      	bne.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 fd5e 	bl	800a9d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f20:	e293      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f26:	e290      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f28:	4b76      	ldr	r3, [pc, #472]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f34:	d107      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f36:	f107 0318 	add.w	r3, r7, #24
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 faa4 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f44:	e281      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4a:	e27e      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f4c:	4b6d      	ldr	r3, [pc, #436]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f58:	d107      	bne.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f5a:	f107 030c 	add.w	r3, r7, #12
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 fbe6 	bl	800a730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f68:	e26f      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f6e:	e26c      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f70:	4b64      	ldr	r3, [pc, #400]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f78:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f7a:	4b62      	ldr	r3, [pc, #392]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 0304 	and.w	r3, r3, #4
 8009f82:	2b04      	cmp	r3, #4
 8009f84:	d10c      	bne.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d109      	bne.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f8c:	4b5d      	ldr	r3, [pc, #372]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	08db      	lsrs	r3, r3, #3
 8009f92:	f003 0303 	and.w	r3, r3, #3
 8009f96:	4a5c      	ldr	r2, [pc, #368]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009f98:	fa22 f303 	lsr.w	r3, r2, r3
 8009f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f9e:	e01e      	b.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fa0:	4b58      	ldr	r3, [pc, #352]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fac:	d106      	bne.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fb4:	d102      	bne.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fb6:	4b55      	ldr	r3, [pc, #340]	@ (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fba:	e010      	b.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fbc:	4b51      	ldr	r3, [pc, #324]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fc8:	d106      	bne.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fd0:	d102      	bne.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fd2:	4b4f      	ldr	r3, [pc, #316]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fd6:	e002      	b.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009fdc:	e235      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fde:	e234      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fe0:	4b4c      	ldr	r3, [pc, #304]	@ (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fe4:	e231      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fea:	e22e      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ff0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	f040 808f 	bne.w	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009ffa:	4b42      	ldr	r3, [pc, #264]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ffe:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a002:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a006:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a00a:	d06b      	beq.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a012:	d874      	bhi.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a016:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a01a:	d056      	beq.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a022:	d86c      	bhi.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a026:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a02a:	d03b      	beq.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a032:	d864      	bhi.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a036:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a03a:	d021      	beq.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a042:	d85c      	bhi.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a046:	2b00      	cmp	r3, #0
 800a048:	d004      	beq.n	800a054 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a050:	d004      	beq.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a052:	e054      	b.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a054:	f7fe fa4c 	bl	80084f0 <HAL_RCC_GetPCLK1Freq>
 800a058:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a05a:	e1f6      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a05c:	4b29      	ldr	r3, [pc, #164]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a068:	d107      	bne.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a06a:	f107 0318 	add.w	r3, r7, #24
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fa0a 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a078:	e1e7      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a07e:	e1e4      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a080:	4b20      	ldr	r3, [pc, #128]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a08c:	d107      	bne.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a08e:	f107 030c 	add.w	r3, r7, #12
 800a092:	4618      	mov	r0, r3
 800a094:	f000 fb4c 	bl	800a730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a09c:	e1d5      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0a2:	e1d2      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a0a4:	4b17      	ldr	r3, [pc, #92]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	d109      	bne.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0b0:	4b14      	ldr	r3, [pc, #80]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	08db      	lsrs	r3, r3, #3
 800a0b6:	f003 0303 	and.w	r3, r3, #3
 800a0ba:	4a13      	ldr	r2, [pc, #76]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a0bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0c2:	e1c2      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c8:	e1bf      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a0ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0d6:	d102      	bne.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0dc:	e1b5      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e2:	e1b2      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a0e4:	4b07      	ldr	r3, [pc, #28]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0f0:	d102      	bne.n	800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a0f2:	4b07      	ldr	r3, [pc, #28]	@ (800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0f6:	e1a8      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0fc:	e1a5      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a102:	e1a2      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a104:	58024400 	.word	0x58024400
 800a108:	03d09000 	.word	0x03d09000
 800a10c:	003d0900 	.word	0x003d0900
 800a110:	017d7840 	.word	0x017d7840
 800a114:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a11c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a120:	430b      	orrs	r3, r1
 800a122:	d173      	bne.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a124:	4b9c      	ldr	r3, [pc, #624]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a128:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a12c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a134:	d02f      	beq.n	800a196 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a138:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a13c:	d863      	bhi.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a140:	2b00      	cmp	r3, #0
 800a142:	d004      	beq.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a14a:	d012      	beq.n	800a172 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a14c:	e05b      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a14e:	4b92      	ldr	r3, [pc, #584]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a15a:	d107      	bne.n	800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a15c:	f107 0318 	add.w	r3, r7, #24
 800a160:	4618      	mov	r0, r3
 800a162:	f000 f991 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a16a:	e16e      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a170:	e16b      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a172:	4b89      	ldr	r3, [pc, #548]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a17a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a17e:	d107      	bne.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a180:	f107 030c 	add.w	r3, r7, #12
 800a184:	4618      	mov	r0, r3
 800a186:	f000 fad3 	bl	800a730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a18e:	e15c      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a194:	e159      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a196:	4b80      	ldr	r3, [pc, #512]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a19a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a19e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1a0:	4b7d      	ldr	r3, [pc, #500]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0304 	and.w	r3, r3, #4
 800a1a8:	2b04      	cmp	r3, #4
 800a1aa:	d10c      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d109      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1b2:	4b79      	ldr	r3, [pc, #484]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	08db      	lsrs	r3, r3, #3
 800a1b8:	f003 0303 	and.w	r3, r3, #3
 800a1bc:	4a77      	ldr	r2, [pc, #476]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a1be:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1c4:	e01e      	b.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1c6:	4b74      	ldr	r3, [pc, #464]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1d2:	d106      	bne.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1da:	d102      	bne.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1dc:	4b70      	ldr	r3, [pc, #448]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1e0:	e010      	b.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1e2:	4b6d      	ldr	r3, [pc, #436]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ee:	d106      	bne.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1f6:	d102      	bne.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1f8:	4b6a      	ldr	r3, [pc, #424]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1fc:	e002      	b.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a202:	e122      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a204:	e121      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a20a:	e11e      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a20c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a210:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a214:	430b      	orrs	r3, r1
 800a216:	d133      	bne.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a218:	4b5f      	ldr	r3, [pc, #380]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a21a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a21c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a220:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a224:	2b00      	cmp	r3, #0
 800a226:	d004      	beq.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a22e:	d012      	beq.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a230:	e023      	b.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a232:	4b59      	ldr	r3, [pc, #356]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a23a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a23e:	d107      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a244:	4618      	mov	r0, r3
 800a246:	f000 fbc7 	bl	800a9d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a24e:	e0fc      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a254:	e0f9      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a256:	4b50      	ldr	r3, [pc, #320]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a25e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a262:	d107      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a264:	f107 0318 	add.w	r3, r7, #24
 800a268:	4618      	mov	r0, r3
 800a26a:	f000 f90d 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a272:	e0ea      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a274:	2300      	movs	r3, #0
 800a276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a278:	e0e7      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a27e:	e0e4      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a280:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a284:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a288:	430b      	orrs	r3, r1
 800a28a:	f040 808d 	bne.w	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a28e:	4b42      	ldr	r3, [pc, #264]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a292:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a296:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a29e:	d06b      	beq.n	800a378 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2a6:	d874      	bhi.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ae:	d056      	beq.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2b6:	d86c      	bhi.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2be:	d03b      	beq.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2c6:	d864      	bhi.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2ce:	d021      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2d6:	d85c      	bhi.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d004      	beq.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2e4:	d004      	beq.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a2e6:	e054      	b.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a2e8:	f000 f8b8 	bl	800a45c <HAL_RCCEx_GetD3PCLK1Freq>
 800a2ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2ee:	e0ac      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2f0:	4b29      	ldr	r3, [pc, #164]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2fc:	d107      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2fe:	f107 0318 	add.w	r3, r7, #24
 800a302:	4618      	mov	r0, r3
 800a304:	f000 f8c0 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a30c:	e09d      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a312:	e09a      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a314:	4b20      	ldr	r3, [pc, #128]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a31c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a320:	d107      	bne.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a322:	f107 030c 	add.w	r3, r7, #12
 800a326:	4618      	mov	r0, r3
 800a328:	f000 fa02 	bl	800a730 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a330:	e08b      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a336:	e088      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a338:	4b17      	ldr	r3, [pc, #92]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b04      	cmp	r3, #4
 800a342:	d109      	bne.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a344:	4b14      	ldr	r3, [pc, #80]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	08db      	lsrs	r3, r3, #3
 800a34a:	f003 0303 	and.w	r3, r3, #3
 800a34e:	4a13      	ldr	r2, [pc, #76]	@ (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a350:	fa22 f303 	lsr.w	r3, r2, r3
 800a354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a356:	e078      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a35c:	e075      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a35e:	4b0e      	ldr	r3, [pc, #56]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a36a:	d102      	bne.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a36c:	4b0c      	ldr	r3, [pc, #48]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a370:	e06b      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a376:	e068      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a378:	4b07      	ldr	r3, [pc, #28]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a380:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a384:	d102      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a386:	4b07      	ldr	r3, [pc, #28]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a38a:	e05e      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a390:	e05b      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a396:	e058      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a398:	58024400 	.word	0x58024400
 800a39c:	03d09000 	.word	0x03d09000
 800a3a0:	003d0900 	.word	0x003d0900
 800a3a4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a3a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3ac:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a3b0:	430b      	orrs	r3, r1
 800a3b2:	d148      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a3b4:	4b27      	ldr	r3, [pc, #156]	@ (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a3b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3c4:	d02a      	beq.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3cc:	d838      	bhi.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d004      	beq.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3da:	d00d      	beq.n	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a3dc:	e030      	b.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a3de:	4b1d      	ldr	r3, [pc, #116]	@ (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3ea:	d102      	bne.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a3ec:	4b1a      	ldr	r3, [pc, #104]	@ (800a458 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a3ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f0:	e02b      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f6:	e028      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3f8:	4b16      	ldr	r3, [pc, #88]	@ (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a400:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a404:	d107      	bne.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a406:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 fae4 	bl	800a9d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a414:	e019      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a41a:	e016      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a41c:	4b0d      	ldr	r3, [pc, #52]	@ (800a454 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a428:	d107      	bne.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a42a:	f107 0318 	add.w	r3, r7, #24
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 f82a 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a438:	e007      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a43e:	e004      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a440:	2300      	movs	r3, #0
 800a442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a444:	e001      	b.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a446:	2300      	movs	r3, #0
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a44a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3740      	adds	r7, #64	@ 0x40
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	58024400 	.word	0x58024400
 800a458:	017d7840 	.word	0x017d7840

0800a45c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a460:	f7fe f816 	bl	8008490 <HAL_RCC_GetHCLKFreq>
 800a464:	4602      	mov	r2, r0
 800a466:	4b06      	ldr	r3, [pc, #24]	@ (800a480 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	091b      	lsrs	r3, r3, #4
 800a46c:	f003 0307 	and.w	r3, r3, #7
 800a470:	4904      	ldr	r1, [pc, #16]	@ (800a484 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a472:	5ccb      	ldrb	r3, [r1, r3]
 800a474:	f003 031f 	and.w	r3, r3, #31
 800a478:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	58024400 	.word	0x58024400
 800a484:	08011b28 	.word	0x08011b28

0800a488 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a488:	b480      	push	{r7}
 800a48a:	b089      	sub	sp, #36	@ 0x24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a490:	4ba1      	ldr	r3, [pc, #644]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a494:	f003 0303 	and.w	r3, r3, #3
 800a498:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a49a:	4b9f      	ldr	r3, [pc, #636]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49e:	0b1b      	lsrs	r3, r3, #12
 800a4a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a4a6:	4b9c      	ldr	r3, [pc, #624]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4aa:	091b      	lsrs	r3, r3, #4
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a4b2:	4b99      	ldr	r3, [pc, #612]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4b6:	08db      	lsrs	r3, r3, #3
 800a4b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	fb02 f303 	mul.w	r3, r2, r3
 800a4c2:	ee07 3a90 	vmov	s15, r3
 800a4c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 8111 	beq.w	800a6f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	f000 8083 	beq.w	800a5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	f200 80a1 	bhi.w	800a628 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d056      	beq.n	800a5a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a4f2:	e099      	b.n	800a628 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4f4:	4b88      	ldr	r3, [pc, #544]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0320 	and.w	r3, r3, #32
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d02d      	beq.n	800a55c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a500:	4b85      	ldr	r3, [pc, #532]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	08db      	lsrs	r3, r3, #3
 800a506:	f003 0303 	and.w	r3, r3, #3
 800a50a:	4a84      	ldr	r2, [pc, #528]	@ (800a71c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a50c:	fa22 f303 	lsr.w	r3, r2, r3
 800a510:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	ee07 3a90 	vmov	s15, r3
 800a518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a52a:	4b7b      	ldr	r3, [pc, #492]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a52c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a532:	ee07 3a90 	vmov	s15, r3
 800a536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a53a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a53e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a54a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a556:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a55a:	e087      	b.n	800a66c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a566:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a724 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a56e:	4b6a      	ldr	r3, [pc, #424]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a576:	ee07 3a90 	vmov	s15, r3
 800a57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a57e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a582:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a58e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a59a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a59e:	e065      	b.n	800a66c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5b2:	4b59      	ldr	r3, [pc, #356]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ba:	ee07 3a90 	vmov	s15, r3
 800a5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5e2:	e043      	b.n	800a66c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a72c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5f6:	4b48      	ldr	r3, [pc, #288]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5fe:	ee07 3a90 	vmov	s15, r3
 800a602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a606:	ed97 6a03 	vldr	s12, [r7, #12]
 800a60a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a626:	e021      	b.n	800a66c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	ee07 3a90 	vmov	s15, r3
 800a62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a632:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a728 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a63a:	4b37      	ldr	r3, [pc, #220]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a64a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a64e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a65a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a66a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a66c:	4b2a      	ldr	r3, [pc, #168]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a670:	0a5b      	lsrs	r3, r3, #9
 800a672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a682:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a686:	edd7 6a07 	vldr	s13, [r7, #28]
 800a68a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a68e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a692:	ee17 2a90 	vmov	r2, s15
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a69a:	4b1f      	ldr	r3, [pc, #124]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a69e:	0c1b      	lsrs	r3, r3, #16
 800a6a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6a4:	ee07 3a90 	vmov	s15, r3
 800a6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6c0:	ee17 2a90 	vmov	r2, s15
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a6c8:	4b13      	ldr	r3, [pc, #76]	@ (800a718 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6cc:	0e1b      	lsrs	r3, r3, #24
 800a6ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6d2:	ee07 3a90 	vmov	s15, r3
 800a6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ee:	ee17 2a90 	vmov	r2, s15
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a6f6:	e008      	b.n	800a70a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	609a      	str	r2, [r3, #8]
}
 800a70a:	bf00      	nop
 800a70c:	3724      	adds	r7, #36	@ 0x24
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	58024400 	.word	0x58024400
 800a71c:	03d09000 	.word	0x03d09000
 800a720:	46000000 	.word	0x46000000
 800a724:	4c742400 	.word	0x4c742400
 800a728:	4a742400 	.word	0x4a742400
 800a72c:	4bbebc20 	.word	0x4bbebc20

0800a730 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a730:	b480      	push	{r7}
 800a732:	b089      	sub	sp, #36	@ 0x24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a738:	4ba1      	ldr	r3, [pc, #644]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a73c:	f003 0303 	and.w	r3, r3, #3
 800a740:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a742:	4b9f      	ldr	r3, [pc, #636]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a746:	0d1b      	lsrs	r3, r3, #20
 800a748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a74c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a74e:	4b9c      	ldr	r3, [pc, #624]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a752:	0a1b      	lsrs	r3, r3, #8
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a75a:	4b99      	ldr	r3, [pc, #612]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a75e:	08db      	lsrs	r3, r3, #3
 800a760:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	fb02 f303 	mul.w	r3, r2, r3
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a772:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 8111 	beq.w	800a9a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	2b02      	cmp	r3, #2
 800a782:	f000 8083 	beq.w	800a88c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	2b02      	cmp	r3, #2
 800a78a:	f200 80a1 	bhi.w	800a8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d003      	beq.n	800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d056      	beq.n	800a848 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a79a:	e099      	b.n	800a8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a79c:	4b88      	ldr	r3, [pc, #544]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0320 	and.w	r3, r3, #32
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d02d      	beq.n	800a804 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7a8:	4b85      	ldr	r3, [pc, #532]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	08db      	lsrs	r3, r3, #3
 800a7ae:	f003 0303 	and.w	r3, r3, #3
 800a7b2:	4a84      	ldr	r2, [pc, #528]	@ (800a9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a7b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	ee07 3a90 	vmov	s15, r3
 800a7c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7d2:	4b7b      	ldr	r3, [pc, #492]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7da:	ee07 3a90 	vmov	s15, r3
 800a7de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a802:	e087      	b.n	800a914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a9cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a816:	4b6a      	ldr	r3, [pc, #424]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a81a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a826:	ed97 6a03 	vldr	s12, [r7, #12]
 800a82a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a82e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a83a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a83e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a846:	e065      	b.n	800a914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	ee07 3a90 	vmov	s15, r3
 800a84e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a852:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a85a:	4b59      	ldr	r3, [pc, #356]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a85e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a862:	ee07 3a90 	vmov	s15, r3
 800a866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a86a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a86e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a87a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a87e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a882:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a88a:	e043      	b.n	800a914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a896:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a89a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a89e:	4b48      	ldr	r3, [pc, #288]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a6:	ee07 3a90 	vmov	s15, r3
 800a8aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8ce:	e021      	b.n	800a914 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a8de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8e2:	4b37      	ldr	r3, [pc, #220]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ea:	ee07 3a90 	vmov	s15, r3
 800a8ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a90a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a90e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a912:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a914:	4b2a      	ldr	r3, [pc, #168]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a918:	0a5b      	lsrs	r3, r3, #9
 800a91a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a91e:	ee07 3a90 	vmov	s15, r3
 800a922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a926:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a92a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a92e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a93a:	ee17 2a90 	vmov	r2, s15
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a942:	4b1f      	ldr	r3, [pc, #124]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a946:	0c1b      	lsrs	r3, r3, #16
 800a948:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a94c:	ee07 3a90 	vmov	s15, r3
 800a950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a954:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a958:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a95c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a968:	ee17 2a90 	vmov	r2, s15
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a970:	4b13      	ldr	r3, [pc, #76]	@ (800a9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a974:	0e1b      	lsrs	r3, r3, #24
 800a976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a97a:	ee07 3a90 	vmov	s15, r3
 800a97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a982:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a986:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a98a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a98e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a996:	ee17 2a90 	vmov	r2, s15
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a99e:	e008      	b.n	800a9b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	609a      	str	r2, [r3, #8]
}
 800a9b2:	bf00      	nop
 800a9b4:	3724      	adds	r7, #36	@ 0x24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	03d09000 	.word	0x03d09000
 800a9c8:	46000000 	.word	0x46000000
 800a9cc:	4c742400 	.word	0x4c742400
 800a9d0:	4a742400 	.word	0x4a742400
 800a9d4:	4bbebc20 	.word	0x4bbebc20

0800a9d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b089      	sub	sp, #36	@ 0x24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9e0:	4ba0      	ldr	r3, [pc, #640]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9e4:	f003 0303 	and.w	r3, r3, #3
 800a9e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a9ea:	4b9e      	ldr	r3, [pc, #632]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ee:	091b      	lsrs	r3, r3, #4
 800a9f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a9f6:	4b9b      	ldr	r3, [pc, #620]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aa00:	4b98      	ldr	r3, [pc, #608]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa04:	08db      	lsrs	r3, r3, #3
 800aa06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	fb02 f303 	mul.w	r3, r2, r3
 800aa10:	ee07 3a90 	vmov	s15, r3
 800aa14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa18:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 8111 	beq.w	800ac46 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	f000 8083 	beq.w	800ab32 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	f200 80a1 	bhi.w	800ab76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d003      	beq.n	800aa42 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d056      	beq.n	800aaee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aa40:	e099      	b.n	800ab76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa42:	4b88      	ldr	r3, [pc, #544]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0320 	and.w	r3, r3, #32
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d02d      	beq.n	800aaaa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa4e:	4b85      	ldr	r3, [pc, #532]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	08db      	lsrs	r3, r3, #3
 800aa54:	f003 0303 	and.w	r3, r3, #3
 800aa58:	4a83      	ldr	r2, [pc, #524]	@ (800ac68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800aa5a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa5e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	ee07 3a90 	vmov	s15, r3
 800aa70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa78:	4b7a      	ldr	r3, [pc, #488]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa80:	ee07 3a90 	vmov	s15, r3
 800aa84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa88:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa8c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ac6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aaa8:	e087      	b.n	800abba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	ee07 3a90 	vmov	s15, r3
 800aab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aabc:	4b69      	ldr	r3, [pc, #420]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aabe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac4:	ee07 3a90 	vmov	s15, r3
 800aac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aacc:	ed97 6a03 	vldr	s12, [r7, #12]
 800aad0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ac6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aadc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaec:	e065      	b.n	800abba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	ee07 3a90 	vmov	s15, r3
 800aaf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ac74 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aafc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab00:	4b58      	ldr	r3, [pc, #352]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab08:	ee07 3a90 	vmov	s15, r3
 800ab0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab10:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab14:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ac6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab30:	e043      	b.n	800abba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	ee07 3a90 	vmov	s15, r3
 800ab38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ac78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ab40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab44:	4b47      	ldr	r3, [pc, #284]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4c:	ee07 3a90 	vmov	s15, r3
 800ab50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab54:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab58:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ac6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab74:	e021      	b.n	800abba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	ee07 3a90 	vmov	s15, r3
 800ab7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab80:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ac70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ab84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab88:	4b36      	ldr	r3, [pc, #216]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab90:	ee07 3a90 	vmov	s15, r3
 800ab94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab98:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab9c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ac6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abb8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800abba:	4b2a      	ldr	r3, [pc, #168]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abbe:	0a5b      	lsrs	r3, r3, #9
 800abc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abc4:	ee07 3a90 	vmov	s15, r3
 800abc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800abd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abe0:	ee17 2a90 	vmov	r2, s15
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800abe8:	4b1e      	ldr	r3, [pc, #120]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abec:	0c1b      	lsrs	r3, r3, #16
 800abee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abf2:	ee07 3a90 	vmov	s15, r3
 800abf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac02:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac0e:	ee17 2a90 	vmov	r2, s15
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ac16:	4b13      	ldr	r3, [pc, #76]	@ (800ac64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac1a:	0e1b      	lsrs	r3, r3, #24
 800ac1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac20:	ee07 3a90 	vmov	s15, r3
 800ac24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac30:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac3c:	ee17 2a90 	vmov	r2, s15
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ac44:	e008      	b.n	800ac58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	609a      	str	r2, [r3, #8]
}
 800ac58:	bf00      	nop
 800ac5a:	3724      	adds	r7, #36	@ 0x24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	58024400 	.word	0x58024400
 800ac68:	03d09000 	.word	0x03d09000
 800ac6c:	46000000 	.word	0x46000000
 800ac70:	4c742400 	.word	0x4c742400
 800ac74:	4a742400 	.word	0x4a742400
 800ac78:	4bbebc20 	.word	0x4bbebc20

0800ac7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac8a:	4b53      	ldr	r3, [pc, #332]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ac8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac8e:	f003 0303 	and.w	r3, r3, #3
 800ac92:	2b03      	cmp	r3, #3
 800ac94:	d101      	bne.n	800ac9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e099      	b.n	800adce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac9a:	4b4f      	ldr	r3, [pc, #316]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a4e      	ldr	r2, [pc, #312]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800aca0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aca6:	f7f6 feb3 	bl	8001a10 <HAL_GetTick>
 800acaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acac:	e008      	b.n	800acc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800acae:	f7f6 feaf 	bl	8001a10 <HAL_GetTick>
 800acb2:	4602      	mov	r2, r0
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	1ad3      	subs	r3, r2, r3
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d901      	bls.n	800acc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800acbc:	2303      	movs	r3, #3
 800acbe:	e086      	b.n	800adce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800acc0:	4b45      	ldr	r3, [pc, #276]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1f0      	bne.n	800acae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800accc:	4b42      	ldr	r3, [pc, #264]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800acce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	031b      	lsls	r3, r3, #12
 800acda:	493f      	ldr	r1, [pc, #252]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800acdc:	4313      	orrs	r3, r2
 800acde:	628b      	str	r3, [r1, #40]	@ 0x28
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	3b01      	subs	r3, #1
 800acf0:	025b      	lsls	r3, r3, #9
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	431a      	orrs	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	3b01      	subs	r3, #1
 800acfc:	041b      	lsls	r3, r3, #16
 800acfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ad02:	431a      	orrs	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	061b      	lsls	r3, r3, #24
 800ad0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ad10:	4931      	ldr	r1, [pc, #196]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad12:	4313      	orrs	r3, r2
 800ad14:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ad16:	4b30      	ldr	r3, [pc, #192]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	695b      	ldr	r3, [r3, #20]
 800ad22:	492d      	ldr	r1, [pc, #180]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad24:	4313      	orrs	r3, r2
 800ad26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad28:	4b2b      	ldr	r3, [pc, #172]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad2c:	f023 0220 	bic.w	r2, r3, #32
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	4928      	ldr	r1, [pc, #160]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad36:	4313      	orrs	r3, r2
 800ad38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad3a:	4b27      	ldr	r3, [pc, #156]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad3e:	4a26      	ldr	r2, [pc, #152]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad40:	f023 0310 	bic.w	r3, r3, #16
 800ad44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad46:	4b24      	ldr	r3, [pc, #144]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad4a:	4b24      	ldr	r3, [pc, #144]	@ (800addc <RCCEx_PLL2_Config+0x160>)
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	69d2      	ldr	r2, [r2, #28]
 800ad52:	00d2      	lsls	r2, r2, #3
 800ad54:	4920      	ldr	r1, [pc, #128]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad56:	4313      	orrs	r3, r2
 800ad58:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad5a:	4b1f      	ldr	r3, [pc, #124]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad5e:	4a1e      	ldr	r2, [pc, #120]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad60:	f043 0310 	orr.w	r3, r3, #16
 800ad64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d106      	bne.n	800ad7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad6c:	4b1a      	ldr	r3, [pc, #104]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad70:	4a19      	ldr	r2, [pc, #100]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad78:	e00f      	b.n	800ad9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d106      	bne.n	800ad8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad80:	4b15      	ldr	r3, [pc, #84]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad84:	4a14      	ldr	r2, [pc, #80]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad8c:	e005      	b.n	800ad9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad8e:	4b12      	ldr	r3, [pc, #72]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad92:	4a11      	ldr	r2, [pc, #68]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ad98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad9a:	4b0f      	ldr	r3, [pc, #60]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a0e      	ldr	r2, [pc, #56]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800ada0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ada4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ada6:	f7f6 fe33 	bl	8001a10 <HAL_GetTick>
 800adaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adac:	e008      	b.n	800adc0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800adae:	f7f6 fe2f 	bl	8001a10 <HAL_GetTick>
 800adb2:	4602      	mov	r2, r0
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d901      	bls.n	800adc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e006      	b.n	800adce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800adc0:	4b05      	ldr	r3, [pc, #20]	@ (800add8 <RCCEx_PLL2_Config+0x15c>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d0f0      	beq.n	800adae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	58024400 	.word	0x58024400
 800addc:	ffff0007 	.word	0xffff0007

0800ade0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adea:	2300      	movs	r3, #0
 800adec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800adee:	4b53      	ldr	r3, [pc, #332]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800adf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf2:	f003 0303 	and.w	r3, r3, #3
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d101      	bne.n	800adfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e099      	b.n	800af32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800adfe:	4b4f      	ldr	r3, [pc, #316]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a4e      	ldr	r2, [pc, #312]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800ae04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae0a:	f7f6 fe01 	bl	8001a10 <HAL_GetTick>
 800ae0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae10:	e008      	b.n	800ae24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae12:	f7f6 fdfd 	bl	8001a10 <HAL_GetTick>
 800ae16:	4602      	mov	r2, r0
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d901      	bls.n	800ae24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e086      	b.n	800af32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae24:	4b45      	ldr	r3, [pc, #276]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1f0      	bne.n	800ae12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae30:	4b42      	ldr	r3, [pc, #264]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800ae32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae34:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	051b      	lsls	r3, r3, #20
 800ae3e:	493f      	ldr	r1, [pc, #252]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800ae40:	4313      	orrs	r3, r2
 800ae42:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	3b01      	subs	r3, #1
 800ae54:	025b      	lsls	r3, r3, #9
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	431a      	orrs	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	041b      	lsls	r3, r3, #16
 800ae62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae66:	431a      	orrs	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	061b      	lsls	r3, r3, #24
 800ae70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae74:	4931      	ldr	r1, [pc, #196]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800ae76:	4313      	orrs	r3, r2
 800ae78:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae7a:	4b30      	ldr	r3, [pc, #192]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800ae7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	492d      	ldr	r1, [pc, #180]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae8c:	4b2b      	ldr	r3, [pc, #172]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800ae8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae90:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	4928      	ldr	r1, [pc, #160]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ae9e:	4b27      	ldr	r3, [pc, #156]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea2:	4a26      	ldr	r2, [pc, #152]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aeaa:	4b24      	ldr	r3, [pc, #144]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aeac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aeae:	4b24      	ldr	r3, [pc, #144]	@ (800af40 <RCCEx_PLL3_Config+0x160>)
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	69d2      	ldr	r2, [r2, #28]
 800aeb6:	00d2      	lsls	r2, r2, #3
 800aeb8:	4920      	ldr	r1, [pc, #128]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aebe:	4b1f      	ldr	r3, [pc, #124]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec2:	4a1e      	ldr	r2, [pc, #120]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d106      	bne.n	800aede <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aed0:	4b1a      	ldr	r3, [pc, #104]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed4:	4a19      	ldr	r2, [pc, #100]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aed6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aeda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aedc:	e00f      	b.n	800aefe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d106      	bne.n	800aef2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aee4:	4b15      	ldr	r3, [pc, #84]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee8:	4a14      	ldr	r2, [pc, #80]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aeea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aeee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aef0:	e005      	b.n	800aefe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aef2:	4b12      	ldr	r3, [pc, #72]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef6:	4a11      	ldr	r2, [pc, #68]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800aef8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aefc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aefe:	4b0f      	ldr	r3, [pc, #60]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a0e      	ldr	r2, [pc, #56]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800af04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af0a:	f7f6 fd81 	bl	8001a10 <HAL_GetTick>
 800af0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af10:	e008      	b.n	800af24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af12:	f7f6 fd7d 	bl	8001a10 <HAL_GetTick>
 800af16:	4602      	mov	r2, r0
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d901      	bls.n	800af24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	e006      	b.n	800af32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af24:	4b05      	ldr	r3, [pc, #20]	@ (800af3c <RCCEx_PLL3_Config+0x15c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0f0      	beq.n	800af12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af30:	7bfb      	ldrb	r3, [r7, #15]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	58024400 	.word	0x58024400
 800af40:	ffff0007 	.word	0xffff0007

0800af44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	e049      	b.n	800afea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d106      	bne.n	800af70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7f6 fba8 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2202      	movs	r2, #2
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	3304      	adds	r3, #4
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f000 f9c6 	bl	800b314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2201      	movs	r2, #1
 800af8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2201      	movs	r2, #1
 800afa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2201      	movs	r2, #1
 800afb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2201      	movs	r2, #1
 800afbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b002:	b2db      	uxtb	r3, r3
 800b004:	2b01      	cmp	r3, #1
 800b006:	d001      	beq.n	800b00c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	e04c      	b.n	800b0a6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a26      	ldr	r2, [pc, #152]	@ (800b0b4 <HAL_TIM_Base_Start+0xc0>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d022      	beq.n	800b064 <HAL_TIM_Base_Start+0x70>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b026:	d01d      	beq.n	800b064 <HAL_TIM_Base_Start+0x70>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a22      	ldr	r2, [pc, #136]	@ (800b0b8 <HAL_TIM_Base_Start+0xc4>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d018      	beq.n	800b064 <HAL_TIM_Base_Start+0x70>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a21      	ldr	r2, [pc, #132]	@ (800b0bc <HAL_TIM_Base_Start+0xc8>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d013      	beq.n	800b064 <HAL_TIM_Base_Start+0x70>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a1f      	ldr	r2, [pc, #124]	@ (800b0c0 <HAL_TIM_Base_Start+0xcc>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d00e      	beq.n	800b064 <HAL_TIM_Base_Start+0x70>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a1e      	ldr	r2, [pc, #120]	@ (800b0c4 <HAL_TIM_Base_Start+0xd0>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d009      	beq.n	800b064 <HAL_TIM_Base_Start+0x70>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a1c      	ldr	r2, [pc, #112]	@ (800b0c8 <HAL_TIM_Base_Start+0xd4>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d004      	beq.n	800b064 <HAL_TIM_Base_Start+0x70>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a1b      	ldr	r2, [pc, #108]	@ (800b0cc <HAL_TIM_Base_Start+0xd8>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d115      	bne.n	800b090 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	689a      	ldr	r2, [r3, #8]
 800b06a:	4b19      	ldr	r3, [pc, #100]	@ (800b0d0 <HAL_TIM_Base_Start+0xdc>)
 800b06c:	4013      	ands	r3, r2
 800b06e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2b06      	cmp	r3, #6
 800b074:	d015      	beq.n	800b0a2 <HAL_TIM_Base_Start+0xae>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b07c:	d011      	beq.n	800b0a2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f042 0201 	orr.w	r2, r2, #1
 800b08c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b08e:	e008      	b.n	800b0a2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f042 0201 	orr.w	r2, r2, #1
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	e000      	b.n	800b0a4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	40010000 	.word	0x40010000
 800b0b8:	40000400 	.word	0x40000400
 800b0bc:	40000800 	.word	0x40000800
 800b0c0:	40000c00 	.word	0x40000c00
 800b0c4:	40010400 	.word	0x40010400
 800b0c8:	40001800 	.word	0x40001800
 800b0cc:	40014000 	.word	0x40014000
 800b0d0:	00010007 	.word	0x00010007

0800b0d4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6a1a      	ldr	r2, [r3, #32]
 800b0e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10f      	bne.n	800b10c <HAL_TIM_Base_Stop+0x38>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6a1a      	ldr	r2, [r3, #32]
 800b0f2:	f240 4344 	movw	r3, #1092	@ 0x444
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d107      	bne.n	800b10c <HAL_TIM_Base_Stop+0x38>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f022 0201 	bic.w	r2, r2, #1
 800b10a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
	...

0800b124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d101      	bne.n	800b140 <HAL_TIM_ConfigClockSource+0x1c>
 800b13c:	2302      	movs	r3, #2
 800b13e:	e0dc      	b.n	800b2fa <HAL_TIM_ConfigClockSource+0x1d6>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b158:	68ba      	ldr	r2, [r7, #8]
 800b15a:	4b6a      	ldr	r3, [pc, #424]	@ (800b304 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b15c:	4013      	ands	r3, r2
 800b15e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a64      	ldr	r2, [pc, #400]	@ (800b308 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b176:	4293      	cmp	r3, r2
 800b178:	f000 80a9 	beq.w	800b2ce <HAL_TIM_ConfigClockSource+0x1aa>
 800b17c:	4a62      	ldr	r2, [pc, #392]	@ (800b308 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	f200 80ae 	bhi.w	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b184:	4a61      	ldr	r2, [pc, #388]	@ (800b30c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b186:	4293      	cmp	r3, r2
 800b188:	f000 80a1 	beq.w	800b2ce <HAL_TIM_ConfigClockSource+0x1aa>
 800b18c:	4a5f      	ldr	r2, [pc, #380]	@ (800b30c <HAL_TIM_ConfigClockSource+0x1e8>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	f200 80a6 	bhi.w	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b194:	4a5e      	ldr	r2, [pc, #376]	@ (800b310 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b196:	4293      	cmp	r3, r2
 800b198:	f000 8099 	beq.w	800b2ce <HAL_TIM_ConfigClockSource+0x1aa>
 800b19c:	4a5c      	ldr	r2, [pc, #368]	@ (800b310 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	f200 809e 	bhi.w	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b1a8:	f000 8091 	beq.w	800b2ce <HAL_TIM_ConfigClockSource+0x1aa>
 800b1ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b1b0:	f200 8096 	bhi.w	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1b8:	f000 8089 	beq.w	800b2ce <HAL_TIM_ConfigClockSource+0x1aa>
 800b1bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1c0:	f200 808e 	bhi.w	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1c8:	d03e      	beq.n	800b248 <HAL_TIM_ConfigClockSource+0x124>
 800b1ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1ce:	f200 8087 	bhi.w	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1d6:	f000 8086 	beq.w	800b2e6 <HAL_TIM_ConfigClockSource+0x1c2>
 800b1da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1de:	d87f      	bhi.n	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1e0:	2b70      	cmp	r3, #112	@ 0x70
 800b1e2:	d01a      	beq.n	800b21a <HAL_TIM_ConfigClockSource+0xf6>
 800b1e4:	2b70      	cmp	r3, #112	@ 0x70
 800b1e6:	d87b      	bhi.n	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1e8:	2b60      	cmp	r3, #96	@ 0x60
 800b1ea:	d050      	beq.n	800b28e <HAL_TIM_ConfigClockSource+0x16a>
 800b1ec:	2b60      	cmp	r3, #96	@ 0x60
 800b1ee:	d877      	bhi.n	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1f0:	2b50      	cmp	r3, #80	@ 0x50
 800b1f2:	d03c      	beq.n	800b26e <HAL_TIM_ConfigClockSource+0x14a>
 800b1f4:	2b50      	cmp	r3, #80	@ 0x50
 800b1f6:	d873      	bhi.n	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b1f8:	2b40      	cmp	r3, #64	@ 0x40
 800b1fa:	d058      	beq.n	800b2ae <HAL_TIM_ConfigClockSource+0x18a>
 800b1fc:	2b40      	cmp	r3, #64	@ 0x40
 800b1fe:	d86f      	bhi.n	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b200:	2b30      	cmp	r3, #48	@ 0x30
 800b202:	d064      	beq.n	800b2ce <HAL_TIM_ConfigClockSource+0x1aa>
 800b204:	2b30      	cmp	r3, #48	@ 0x30
 800b206:	d86b      	bhi.n	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b208:	2b20      	cmp	r3, #32
 800b20a:	d060      	beq.n	800b2ce <HAL_TIM_ConfigClockSource+0x1aa>
 800b20c:	2b20      	cmp	r3, #32
 800b20e:	d867      	bhi.n	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800b210:	2b00      	cmp	r3, #0
 800b212:	d05c      	beq.n	800b2ce <HAL_TIM_ConfigClockSource+0x1aa>
 800b214:	2b10      	cmp	r3, #16
 800b216:	d05a      	beq.n	800b2ce <HAL_TIM_ConfigClockSource+0x1aa>
 800b218:	e062      	b.n	800b2e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b22a:	f000 f98b 	bl	800b544 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b23c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	609a      	str	r2, [r3, #8]
      break;
 800b246:	e04f      	b.n	800b2e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b258:	f000 f974 	bl	800b544 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	689a      	ldr	r2, [r3, #8]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b26a:	609a      	str	r2, [r3, #8]
      break;
 800b26c:	e03c      	b.n	800b2e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b27a:	461a      	mov	r2, r3
 800b27c:	f000 f8e4 	bl	800b448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2150      	movs	r1, #80	@ 0x50
 800b286:	4618      	mov	r0, r3
 800b288:	f000 f93e 	bl	800b508 <TIM_ITRx_SetConfig>
      break;
 800b28c:	e02c      	b.n	800b2e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b29a:	461a      	mov	r2, r3
 800b29c:	f000 f903 	bl	800b4a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2160      	movs	r1, #96	@ 0x60
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 f92e 	bl	800b508 <TIM_ITRx_SetConfig>
      break;
 800b2ac:	e01c      	b.n	800b2e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	f000 f8c4 	bl	800b448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2140      	movs	r1, #64	@ 0x40
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 f91e 	bl	800b508 <TIM_ITRx_SetConfig>
      break;
 800b2cc:	e00c      	b.n	800b2e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4610      	mov	r0, r2
 800b2da:	f000 f915 	bl	800b508 <TIM_ITRx_SetConfig>
      break;
 800b2de:	e003      	b.n	800b2e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b2e4:	e000      	b.n	800b2e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b2e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	ffceff88 	.word	0xffceff88
 800b308:	00100040 	.word	0x00100040
 800b30c:	00100030 	.word	0x00100030
 800b310:	00100020 	.word	0x00100020

0800b314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a40      	ldr	r2, [pc, #256]	@ (800b428 <TIM_Base_SetConfig+0x114>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d013      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b332:	d00f      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a3d      	ldr	r2, [pc, #244]	@ (800b42c <TIM_Base_SetConfig+0x118>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d00b      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a3c      	ldr	r2, [pc, #240]	@ (800b430 <TIM_Base_SetConfig+0x11c>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d007      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a3b      	ldr	r2, [pc, #236]	@ (800b434 <TIM_Base_SetConfig+0x120>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d003      	beq.n	800b354 <TIM_Base_SetConfig+0x40>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a3a      	ldr	r2, [pc, #232]	@ (800b438 <TIM_Base_SetConfig+0x124>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d108      	bne.n	800b366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b35a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	4313      	orrs	r3, r2
 800b364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a2f      	ldr	r2, [pc, #188]	@ (800b428 <TIM_Base_SetConfig+0x114>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d01f      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b374:	d01b      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a2c      	ldr	r2, [pc, #176]	@ (800b42c <TIM_Base_SetConfig+0x118>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d017      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a2b      	ldr	r2, [pc, #172]	@ (800b430 <TIM_Base_SetConfig+0x11c>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d013      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a2a      	ldr	r2, [pc, #168]	@ (800b434 <TIM_Base_SetConfig+0x120>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d00f      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a29      	ldr	r2, [pc, #164]	@ (800b438 <TIM_Base_SetConfig+0x124>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d00b      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a28      	ldr	r2, [pc, #160]	@ (800b43c <TIM_Base_SetConfig+0x128>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d007      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a27      	ldr	r2, [pc, #156]	@ (800b440 <TIM_Base_SetConfig+0x12c>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d003      	beq.n	800b3ae <TIM_Base_SetConfig+0x9a>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a26      	ldr	r2, [pc, #152]	@ (800b444 <TIM_Base_SetConfig+0x130>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d108      	bne.n	800b3c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a10      	ldr	r2, [pc, #64]	@ (800b428 <TIM_Base_SetConfig+0x114>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d00f      	beq.n	800b40c <TIM_Base_SetConfig+0xf8>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a12      	ldr	r2, [pc, #72]	@ (800b438 <TIM_Base_SetConfig+0x124>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d00b      	beq.n	800b40c <TIM_Base_SetConfig+0xf8>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a11      	ldr	r2, [pc, #68]	@ (800b43c <TIM_Base_SetConfig+0x128>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d007      	beq.n	800b40c <TIM_Base_SetConfig+0xf8>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a10      	ldr	r2, [pc, #64]	@ (800b440 <TIM_Base_SetConfig+0x12c>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d003      	beq.n	800b40c <TIM_Base_SetConfig+0xf8>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a0f      	ldr	r2, [pc, #60]	@ (800b444 <TIM_Base_SetConfig+0x130>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d103      	bne.n	800b414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	691a      	ldr	r2, [r3, #16]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	615a      	str	r2, [r3, #20]
}
 800b41a:	bf00      	nop
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	40010000 	.word	0x40010000
 800b42c:	40000400 	.word	0x40000400
 800b430:	40000800 	.word	0x40000800
 800b434:	40000c00 	.word	0x40000c00
 800b438:	40010400 	.word	0x40010400
 800b43c:	40014000 	.word	0x40014000
 800b440:	40014400 	.word	0x40014400
 800b444:	40014800 	.word	0x40014800

0800b448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b448:	b480      	push	{r7}
 800b44a:	b087      	sub	sp, #28
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6a1b      	ldr	r3, [r3, #32]
 800b458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	f023 0201 	bic.w	r2, r3, #1
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	011b      	lsls	r3, r3, #4
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f023 030a 	bic.w	r3, r3, #10
 800b484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	621a      	str	r2, [r3, #32]
}
 800b49a:	bf00      	nop
 800b49c:	371c      	adds	r7, #28
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b087      	sub	sp, #28
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6a1b      	ldr	r3, [r3, #32]
 800b4b6:	f023 0210 	bic.w	r2, r3, #16
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	699b      	ldr	r3, [r3, #24]
 800b4c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b4d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	031b      	lsls	r3, r3, #12
 800b4d6:	697a      	ldr	r2, [r7, #20]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b4e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	011b      	lsls	r3, r3, #4
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	621a      	str	r2, [r3, #32]
}
 800b4fa:	bf00      	nop
 800b4fc:	371c      	adds	r7, #28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
	...

0800b508 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	4b09      	ldr	r3, [pc, #36]	@ (800b540 <TIM_ITRx_SetConfig+0x38>)
 800b51c:	4013      	ands	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	4313      	orrs	r3, r2
 800b526:	f043 0307 	orr.w	r3, r3, #7
 800b52a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68fa      	ldr	r2, [r7, #12]
 800b530:	609a      	str	r2, [r3, #8]
}
 800b532:	bf00      	nop
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	ffcfff8f 	.word	0xffcfff8f

0800b544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b544:	b480      	push	{r7}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
 800b550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b55e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	021a      	lsls	r2, r3, #8
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	431a      	orrs	r2, r3
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	697a      	ldr	r2, [r7, #20]
 800b56e:	4313      	orrs	r3, r2
 800b570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	609a      	str	r2, [r3, #8]
}
 800b578:	bf00      	nop
 800b57a:	371c      	adds	r7, #28
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b594:	2b01      	cmp	r3, #1
 800b596:	d101      	bne.n	800b59c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b598:	2302      	movs	r3, #2
 800b59a:	e06d      	b.n	800b678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a30      	ldr	r2, [pc, #192]	@ (800b684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d004      	beq.n	800b5d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a2f      	ldr	r2, [pc, #188]	@ (800b688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d108      	bne.n	800b5e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b5d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a20      	ldr	r2, [pc, #128]	@ (800b684 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d022      	beq.n	800b64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b60e:	d01d      	beq.n	800b64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a1d      	ldr	r2, [pc, #116]	@ (800b68c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d018      	beq.n	800b64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a1c      	ldr	r2, [pc, #112]	@ (800b690 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d013      	beq.n	800b64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a1a      	ldr	r2, [pc, #104]	@ (800b694 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d00e      	beq.n	800b64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a15      	ldr	r2, [pc, #84]	@ (800b688 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d009      	beq.n	800b64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a16      	ldr	r2, [pc, #88]	@ (800b698 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d004      	beq.n	800b64c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a15      	ldr	r2, [pc, #84]	@ (800b69c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d10c      	bne.n	800b666 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b652:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3714      	adds	r7, #20
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr
 800b684:	40010000 	.word	0x40010000
 800b688:	40010400 	.word	0x40010400
 800b68c:	40000400 	.word	0x40000400
 800b690:	40000800 	.word	0x40000800
 800b694:	40000c00 	.word	0x40000c00
 800b698:	40001800 	.word	0x40001800
 800b69c:	40014000 	.word	0x40014000

0800b6a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e042      	b.n	800b738 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d106      	bne.n	800b6ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f7f6 f881 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2224      	movs	r2, #36	@ 0x24
 800b6ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f022 0201 	bic.w	r2, r2, #1
 800b6e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fc94 	bl	800c010 <UART_SetConfig>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d101      	bne.n	800b6f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e022      	b.n	800b738 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d002      	beq.n	800b700 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f001 f9f0 	bl	800cae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b70e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	689a      	ldr	r2, [r3, #8]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b71e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f042 0201 	orr.w	r2, r2, #1
 800b72e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 fa77 	bl	800cc24 <UART_CheckIdleState>
 800b736:	4603      	mov	r3, r0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08a      	sub	sp, #40	@ 0x28
 800b744:	af02      	add	r7, sp, #8
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	603b      	str	r3, [r7, #0]
 800b74c:	4613      	mov	r3, r2
 800b74e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b756:	2b20      	cmp	r3, #32
 800b758:	d17b      	bne.n	800b852 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <HAL_UART_Transmit+0x26>
 800b760:	88fb      	ldrh	r3, [r7, #6]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e074      	b.n	800b854 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2221      	movs	r2, #33	@ 0x21
 800b776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b77a:	f7f6 f949 	bl	8001a10 <HAL_GetTick>
 800b77e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	88fa      	ldrh	r2, [r7, #6]
 800b784:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	88fa      	ldrh	r2, [r7, #6]
 800b78c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b798:	d108      	bne.n	800b7ac <HAL_UART_Transmit+0x6c>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d104      	bne.n	800b7ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	61bb      	str	r3, [r7, #24]
 800b7aa:	e003      	b.n	800b7b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b7b4:	e030      	b.n	800b818 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	9300      	str	r3, [sp, #0]
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	2180      	movs	r1, #128	@ 0x80
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f001 fad9 	bl	800cd78 <UART_WaitOnFlagUntilTimeout>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d005      	beq.n	800b7d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2220      	movs	r2, #32
 800b7d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e03d      	b.n	800b854 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10b      	bne.n	800b7f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	881b      	ldrh	r3, [r3, #0]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b7ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	3302      	adds	r3, #2
 800b7f2:	61bb      	str	r3, [r7, #24]
 800b7f4:	e007      	b.n	800b806 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	781a      	ldrb	r2, [r3, #0]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	3301      	adds	r3, #1
 800b804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	3b01      	subs	r3, #1
 800b810:	b29a      	uxth	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b81e:	b29b      	uxth	r3, r3
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1c8      	bne.n	800b7b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	2200      	movs	r2, #0
 800b82c:	2140      	movs	r1, #64	@ 0x40
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f001 faa2 	bl	800cd78 <UART_WaitOnFlagUntilTimeout>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d005      	beq.n	800b846 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2220      	movs	r2, #32
 800b83e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b842:	2303      	movs	r3, #3
 800b844:	e006      	b.n	800b854 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2220      	movs	r2, #32
 800b84a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	e000      	b.n	800b854 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b852:	2302      	movs	r3, #2
  }
}
 800b854:	4618      	mov	r0, r3
 800b856:	3720      	adds	r7, #32
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b0ba      	sub	sp, #232	@ 0xe8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b882:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b886:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b88a:	4013      	ands	r3, r2
 800b88c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b894:	2b00      	cmp	r3, #0
 800b896:	d11b      	bne.n	800b8d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b89c:	f003 0320 	and.w	r3, r3, #32
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d015      	beq.n	800b8d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8a8:	f003 0320 	and.w	r3, r3, #32
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d105      	bne.n	800b8bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b8b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d009      	beq.n	800b8d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 8377 	beq.w	800bfb4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	4798      	blx	r3
      }
      return;
 800b8ce:	e371      	b.n	800bfb4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b8d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 8123 	beq.w	800bb20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b8da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b8de:	4b8d      	ldr	r3, [pc, #564]	@ (800bb14 <HAL_UART_IRQHandler+0x2b8>)
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d106      	bne.n	800b8f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b8e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b8ea:	4b8b      	ldr	r3, [pc, #556]	@ (800bb18 <HAL_UART_IRQHandler+0x2bc>)
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f000 8116 	beq.w	800bb20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b8f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8f8:	f003 0301 	and.w	r3, r3, #1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d011      	beq.n	800b924 <HAL_UART_IRQHandler+0xc8>
 800b900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00b      	beq.n	800b924 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2201      	movs	r2, #1
 800b912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b91a:	f043 0201 	orr.w	r2, r3, #1
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b928:	f003 0302 	and.w	r3, r3, #2
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d011      	beq.n	800b954 <HAL_UART_IRQHandler+0xf8>
 800b930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00b      	beq.n	800b954 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2202      	movs	r2, #2
 800b942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b94a:	f043 0204 	orr.w	r2, r3, #4
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b958:	f003 0304 	and.w	r3, r3, #4
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d011      	beq.n	800b984 <HAL_UART_IRQHandler+0x128>
 800b960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b964:	f003 0301 	and.w	r3, r3, #1
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2204      	movs	r2, #4
 800b972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b97a:	f043 0202 	orr.w	r2, r3, #2
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b988:	f003 0308 	and.w	r3, r3, #8
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d017      	beq.n	800b9c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b994:	f003 0320 	and.w	r3, r3, #32
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d105      	bne.n	800b9a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b99c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b9a0:	4b5c      	ldr	r3, [pc, #368]	@ (800bb14 <HAL_UART_IRQHandler+0x2b8>)
 800b9a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00b      	beq.n	800b9c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2208      	movs	r2, #8
 800b9ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9b6:	f043 0208 	orr.w	r2, r3, #8
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b9c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d012      	beq.n	800b9f2 <HAL_UART_IRQHandler+0x196>
 800b9cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00c      	beq.n	800b9f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9e8:	f043 0220 	orr.w	r2, r3, #32
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 82dd 	beq.w	800bfb8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba02:	f003 0320 	and.w	r3, r3, #32
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d013      	beq.n	800ba32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba0e:	f003 0320 	and.w	r3, r3, #32
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d105      	bne.n	800ba22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d007      	beq.n	800ba32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d003      	beq.n	800ba32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba46:	2b40      	cmp	r3, #64	@ 0x40
 800ba48:	d005      	beq.n	800ba56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ba4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ba4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d054      	beq.n	800bb00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f001 f9f6 	bl	800ce48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba66:	2b40      	cmp	r3, #64	@ 0x40
 800ba68:	d146      	bne.n	800baf8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	3308      	adds	r3, #8
 800ba70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba78:	e853 3f00 	ldrex	r3, [r3]
 800ba7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ba80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3308      	adds	r3, #8
 800ba92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ba96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ba9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800baa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800baa6:	e841 2300 	strex	r3, r2, [r1]
 800baaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800baae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1d9      	bne.n	800ba6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800babc:	2b00      	cmp	r3, #0
 800babe:	d017      	beq.n	800baf0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bac6:	4a15      	ldr	r2, [pc, #84]	@ (800bb1c <HAL_UART_IRQHandler+0x2c0>)
 800bac8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7f9 fbc3 	bl	800525c <HAL_DMA_Abort_IT>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d019      	beq.n	800bb10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800baea:	4610      	mov	r0, r2
 800baec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baee:	e00f      	b.n	800bb10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fa77 	bl	800bfe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baf6:	e00b      	b.n	800bb10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fa73 	bl	800bfe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bafe:	e007      	b.n	800bb10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 fa6f 	bl	800bfe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800bb0e:	e253      	b.n	800bfb8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb10:	bf00      	nop
    return;
 800bb12:	e251      	b.n	800bfb8 <HAL_UART_IRQHandler+0x75c>
 800bb14:	10000001 	.word	0x10000001
 800bb18:	04000120 	.word	0x04000120
 800bb1c:	0800cf15 	.word	0x0800cf15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	f040 81e7 	bne.w	800bef8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bb2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb2e:	f003 0310 	and.w	r3, r3, #16
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 81e0 	beq.w	800bef8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bb38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb3c:	f003 0310 	and.w	r3, r3, #16
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 81d9 	beq.w	800bef8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2210      	movs	r2, #16
 800bb4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb58:	2b40      	cmp	r3, #64	@ 0x40
 800bb5a:	f040 8151 	bne.w	800be00 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a96      	ldr	r2, [pc, #600]	@ (800bdc0 <HAL_UART_IRQHandler+0x564>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d068      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a93      	ldr	r2, [pc, #588]	@ (800bdc4 <HAL_UART_IRQHandler+0x568>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d061      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a91      	ldr	r2, [pc, #580]	@ (800bdc8 <HAL_UART_IRQHandler+0x56c>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d05a      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a8e      	ldr	r2, [pc, #568]	@ (800bdcc <HAL_UART_IRQHandler+0x570>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d053      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a8c      	ldr	r2, [pc, #560]	@ (800bdd0 <HAL_UART_IRQHandler+0x574>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d04c      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a89      	ldr	r2, [pc, #548]	@ (800bdd4 <HAL_UART_IRQHandler+0x578>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d045      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a87      	ldr	r2, [pc, #540]	@ (800bdd8 <HAL_UART_IRQHandler+0x57c>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d03e      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a84      	ldr	r2, [pc, #528]	@ (800bddc <HAL_UART_IRQHandler+0x580>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d037      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a82      	ldr	r2, [pc, #520]	@ (800bde0 <HAL_UART_IRQHandler+0x584>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d030      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a7f      	ldr	r2, [pc, #508]	@ (800bde4 <HAL_UART_IRQHandler+0x588>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d029      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a7d      	ldr	r2, [pc, #500]	@ (800bde8 <HAL_UART_IRQHandler+0x58c>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d022      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a7a      	ldr	r2, [pc, #488]	@ (800bdec <HAL_UART_IRQHandler+0x590>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d01b      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4a78      	ldr	r2, [pc, #480]	@ (800bdf0 <HAL_UART_IRQHandler+0x594>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d014      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a75      	ldr	r2, [pc, #468]	@ (800bdf4 <HAL_UART_IRQHandler+0x598>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d00d      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a73      	ldr	r2, [pc, #460]	@ (800bdf8 <HAL_UART_IRQHandler+0x59c>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d006      	beq.n	800bc3e <HAL_UART_IRQHandler+0x3e2>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a70      	ldr	r2, [pc, #448]	@ (800bdfc <HAL_UART_IRQHandler+0x5a0>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d106      	bne.n	800bc4c <HAL_UART_IRQHandler+0x3f0>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	e005      	b.n	800bc58 <HAL_UART_IRQHandler+0x3fc>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 81ab 	beq.w	800bfbc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bc6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc70:	429a      	cmp	r2, r3
 800bc72:	f080 81a3 	bcs.w	800bfbc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc86:	69db      	ldr	r3, [r3, #28]
 800bc88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc8c:	f000 8087 	beq.w	800bd9e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bc9c:	e853 3f00 	ldrex	r3, [r3]
 800bca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bcba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bcbe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bcc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bcca:	e841 2300 	strex	r3, r2, [r1]
 800bcce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bcd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d1da      	bne.n	800bc90 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	3308      	adds	r3, #8
 800bce0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bce4:	e853 3f00 	ldrex	r3, [r3]
 800bce8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bcea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bcec:	f023 0301 	bic.w	r3, r3, #1
 800bcf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bcfe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bd02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bd06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bd0a:	e841 2300 	strex	r3, r2, [r1]
 800bd0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bd10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1e1      	bne.n	800bcda <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	3308      	adds	r3, #8
 800bd1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd20:	e853 3f00 	ldrex	r3, [r3]
 800bd24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bd26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3308      	adds	r3, #8
 800bd36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bd3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bd3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bd40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bd42:	e841 2300 	strex	r3, r2, [r1]
 800bd46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bd48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1e3      	bne.n	800bd16 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2220      	movs	r2, #32
 800bd52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd64:	e853 3f00 	ldrex	r3, [r3]
 800bd68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bd6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd6c:	f023 0310 	bic.w	r3, r3, #16
 800bd70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	461a      	mov	r2, r3
 800bd7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd86:	e841 2300 	strex	r3, r2, [r1]
 800bd8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d1e4      	bne.n	800bd5c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7f8 ff41 	bl	8004c20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2202      	movs	r2, #2
 800bda2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 f91d 	bl	800bff8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bdbe:	e0fd      	b.n	800bfbc <HAL_UART_IRQHandler+0x760>
 800bdc0:	40020010 	.word	0x40020010
 800bdc4:	40020028 	.word	0x40020028
 800bdc8:	40020040 	.word	0x40020040
 800bdcc:	40020058 	.word	0x40020058
 800bdd0:	40020070 	.word	0x40020070
 800bdd4:	40020088 	.word	0x40020088
 800bdd8:	400200a0 	.word	0x400200a0
 800bddc:	400200b8 	.word	0x400200b8
 800bde0:	40020410 	.word	0x40020410
 800bde4:	40020428 	.word	0x40020428
 800bde8:	40020440 	.word	0x40020440
 800bdec:	40020458 	.word	0x40020458
 800bdf0:	40020470 	.word	0x40020470
 800bdf4:	40020488 	.word	0x40020488
 800bdf8:	400204a0 	.word	0x400204a0
 800bdfc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f000 80cf 	beq.w	800bfc0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800be22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 80ca 	beq.w	800bfc0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be34:	e853 3f00 	ldrex	r3, [r3]
 800be38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	461a      	mov	r2, r3
 800be4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800be4e:	647b      	str	r3, [r7, #68]	@ 0x44
 800be50:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be56:	e841 2300 	strex	r3, r2, [r1]
 800be5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1e4      	bne.n	800be2c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3308      	adds	r3, #8
 800be68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6c:	e853 3f00 	ldrex	r3, [r3]
 800be70:	623b      	str	r3, [r7, #32]
   return(result);
 800be72:	6a3a      	ldr	r2, [r7, #32]
 800be74:	4b55      	ldr	r3, [pc, #340]	@ (800bfcc <HAL_UART_IRQHandler+0x770>)
 800be76:	4013      	ands	r3, r2
 800be78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	3308      	adds	r3, #8
 800be82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800be86:	633a      	str	r2, [r7, #48]	@ 0x30
 800be88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be8e:	e841 2300 	strex	r3, r2, [r1]
 800be92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1e3      	bne.n	800be62 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2220      	movs	r2, #32
 800be9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	e853 3f00 	ldrex	r3, [r3]
 800beba:	60fb      	str	r3, [r7, #12]
   return(result);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f023 0310 	bic.w	r3, r3, #16
 800bec2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bed0:	61fb      	str	r3, [r7, #28]
 800bed2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed4:	69b9      	ldr	r1, [r7, #24]
 800bed6:	69fa      	ldr	r2, [r7, #28]
 800bed8:	e841 2300 	strex	r3, r2, [r1]
 800bedc:	617b      	str	r3, [r7, #20]
   return(result);
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d1e4      	bne.n	800beae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2202      	movs	r2, #2
 800bee8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800beea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800beee:	4619      	mov	r1, r3
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 f881 	bl	800bff8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bef6:	e063      	b.n	800bfc0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800befc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00e      	beq.n	800bf22 <HAL_UART_IRQHandler+0x6c6>
 800bf04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d008      	beq.n	800bf22 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bf18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f001 f83b 	bl	800cf96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf20:	e051      	b.n	800bfc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bf22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d014      	beq.n	800bf58 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bf2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d105      	bne.n	800bf46 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bf3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d008      	beq.n	800bf58 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d03a      	beq.n	800bfc4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	4798      	blx	r3
    }
    return;
 800bf56:	e035      	b.n	800bfc4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d009      	beq.n	800bf78 <HAL_UART_IRQHandler+0x71c>
 800bf64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d003      	beq.n	800bf78 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 ffe5 	bl	800cf40 <UART_EndTransmit_IT>
    return;
 800bf76:	e026      	b.n	800bfc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d009      	beq.n	800bf98 <HAL_UART_IRQHandler+0x73c>
 800bf84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d003      	beq.n	800bf98 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f001 f814 	bl	800cfbe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf96:	e016      	b.n	800bfc6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d010      	beq.n	800bfc6 <HAL_UART_IRQHandler+0x76a>
 800bfa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	da0c      	bge.n	800bfc6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 fffc 	bl	800cfaa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfb2:	e008      	b.n	800bfc6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bfb4:	bf00      	nop
 800bfb6:	e006      	b.n	800bfc6 <HAL_UART_IRQHandler+0x76a>
    return;
 800bfb8:	bf00      	nop
 800bfba:	e004      	b.n	800bfc6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bfbc:	bf00      	nop
 800bfbe:	e002      	b.n	800bfc6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bfc0:	bf00      	nop
 800bfc2:	e000      	b.n	800bfc6 <HAL_UART_IRQHandler+0x76a>
    return;
 800bfc4:	bf00      	nop
  }
}
 800bfc6:	37e8      	adds	r7, #232	@ 0xe8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	effffffe 	.word	0xeffffffe

0800bfd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	460b      	mov	r3, r1
 800c002:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c004:	bf00      	nop
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c014:	b092      	sub	sp, #72	@ 0x48
 800c016:	af00      	add	r7, sp, #0
 800c018:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	689a      	ldr	r2, [r3, #8]
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	431a      	orrs	r2, r3
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	431a      	orrs	r2, r3
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	69db      	ldr	r3, [r3, #28]
 800c034:	4313      	orrs	r3, r2
 800c036:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	681a      	ldr	r2, [r3, #0]
 800c03e:	4bbe      	ldr	r3, [pc, #760]	@ (800c338 <UART_SetConfig+0x328>)
 800c040:	4013      	ands	r3, r2
 800c042:	697a      	ldr	r2, [r7, #20]
 800c044:	6812      	ldr	r2, [r2, #0]
 800c046:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c048:	430b      	orrs	r3, r1
 800c04a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	68da      	ldr	r2, [r3, #12]
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	430a      	orrs	r2, r1
 800c060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4ab3      	ldr	r2, [pc, #716]	@ (800c33c <UART_SetConfig+0x32c>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d004      	beq.n	800c07c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c078:	4313      	orrs	r3, r2
 800c07a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	689a      	ldr	r2, [r3, #8]
 800c082:	4baf      	ldr	r3, [pc, #700]	@ (800c340 <UART_SetConfig+0x330>)
 800c084:	4013      	ands	r3, r2
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	6812      	ldr	r2, [r2, #0]
 800c08a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c08c:	430b      	orrs	r3, r1
 800c08e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c096:	f023 010f 	bic.w	r1, r3, #15
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	430a      	orrs	r2, r1
 800c0a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4aa6      	ldr	r2, [pc, #664]	@ (800c344 <UART_SetConfig+0x334>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d177      	bne.n	800c1a0 <UART_SetConfig+0x190>
 800c0b0:	4ba5      	ldr	r3, [pc, #660]	@ (800c348 <UART_SetConfig+0x338>)
 800c0b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c0b8:	2b28      	cmp	r3, #40	@ 0x28
 800c0ba:	d86d      	bhi.n	800c198 <UART_SetConfig+0x188>
 800c0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800c0c4 <UART_SetConfig+0xb4>)
 800c0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c2:	bf00      	nop
 800c0c4:	0800c169 	.word	0x0800c169
 800c0c8:	0800c199 	.word	0x0800c199
 800c0cc:	0800c199 	.word	0x0800c199
 800c0d0:	0800c199 	.word	0x0800c199
 800c0d4:	0800c199 	.word	0x0800c199
 800c0d8:	0800c199 	.word	0x0800c199
 800c0dc:	0800c199 	.word	0x0800c199
 800c0e0:	0800c199 	.word	0x0800c199
 800c0e4:	0800c171 	.word	0x0800c171
 800c0e8:	0800c199 	.word	0x0800c199
 800c0ec:	0800c199 	.word	0x0800c199
 800c0f0:	0800c199 	.word	0x0800c199
 800c0f4:	0800c199 	.word	0x0800c199
 800c0f8:	0800c199 	.word	0x0800c199
 800c0fc:	0800c199 	.word	0x0800c199
 800c100:	0800c199 	.word	0x0800c199
 800c104:	0800c179 	.word	0x0800c179
 800c108:	0800c199 	.word	0x0800c199
 800c10c:	0800c199 	.word	0x0800c199
 800c110:	0800c199 	.word	0x0800c199
 800c114:	0800c199 	.word	0x0800c199
 800c118:	0800c199 	.word	0x0800c199
 800c11c:	0800c199 	.word	0x0800c199
 800c120:	0800c199 	.word	0x0800c199
 800c124:	0800c181 	.word	0x0800c181
 800c128:	0800c199 	.word	0x0800c199
 800c12c:	0800c199 	.word	0x0800c199
 800c130:	0800c199 	.word	0x0800c199
 800c134:	0800c199 	.word	0x0800c199
 800c138:	0800c199 	.word	0x0800c199
 800c13c:	0800c199 	.word	0x0800c199
 800c140:	0800c199 	.word	0x0800c199
 800c144:	0800c189 	.word	0x0800c189
 800c148:	0800c199 	.word	0x0800c199
 800c14c:	0800c199 	.word	0x0800c199
 800c150:	0800c199 	.word	0x0800c199
 800c154:	0800c199 	.word	0x0800c199
 800c158:	0800c199 	.word	0x0800c199
 800c15c:	0800c199 	.word	0x0800c199
 800c160:	0800c199 	.word	0x0800c199
 800c164:	0800c191 	.word	0x0800c191
 800c168:	2301      	movs	r3, #1
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c16e:	e222      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c170:	2304      	movs	r3, #4
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c176:	e21e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c178:	2308      	movs	r3, #8
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c17e:	e21a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c180:	2310      	movs	r3, #16
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c186:	e216      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c188:	2320      	movs	r3, #32
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c18e:	e212      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c190:	2340      	movs	r3, #64	@ 0x40
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c196:	e20e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c198:	2380      	movs	r3, #128	@ 0x80
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c19e:	e20a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a69      	ldr	r2, [pc, #420]	@ (800c34c <UART_SetConfig+0x33c>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d130      	bne.n	800c20c <UART_SetConfig+0x1fc>
 800c1aa:	4b67      	ldr	r3, [pc, #412]	@ (800c348 <UART_SetConfig+0x338>)
 800c1ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ae:	f003 0307 	and.w	r3, r3, #7
 800c1b2:	2b05      	cmp	r3, #5
 800c1b4:	d826      	bhi.n	800c204 <UART_SetConfig+0x1f4>
 800c1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1bc <UART_SetConfig+0x1ac>)
 800c1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1bc:	0800c1d5 	.word	0x0800c1d5
 800c1c0:	0800c1dd 	.word	0x0800c1dd
 800c1c4:	0800c1e5 	.word	0x0800c1e5
 800c1c8:	0800c1ed 	.word	0x0800c1ed
 800c1cc:	0800c1f5 	.word	0x0800c1f5
 800c1d0:	0800c1fd 	.word	0x0800c1fd
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1da:	e1ec      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1dc:	2304      	movs	r3, #4
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1e2:	e1e8      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1e4:	2308      	movs	r3, #8
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ea:	e1e4      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1ec:	2310      	movs	r3, #16
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1f2:	e1e0      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1f4:	2320      	movs	r3, #32
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1fa:	e1dc      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c1fc:	2340      	movs	r3, #64	@ 0x40
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c202:	e1d8      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c204:	2380      	movs	r3, #128	@ 0x80
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c20a:	e1d4      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a4f      	ldr	r2, [pc, #316]	@ (800c350 <UART_SetConfig+0x340>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d130      	bne.n	800c278 <UART_SetConfig+0x268>
 800c216:	4b4c      	ldr	r3, [pc, #304]	@ (800c348 <UART_SetConfig+0x338>)
 800c218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	2b05      	cmp	r3, #5
 800c220:	d826      	bhi.n	800c270 <UART_SetConfig+0x260>
 800c222:	a201      	add	r2, pc, #4	@ (adr r2, 800c228 <UART_SetConfig+0x218>)
 800c224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c228:	0800c241 	.word	0x0800c241
 800c22c:	0800c249 	.word	0x0800c249
 800c230:	0800c251 	.word	0x0800c251
 800c234:	0800c259 	.word	0x0800c259
 800c238:	0800c261 	.word	0x0800c261
 800c23c:	0800c269 	.word	0x0800c269
 800c240:	2300      	movs	r3, #0
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c246:	e1b6      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c248:	2304      	movs	r3, #4
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c24e:	e1b2      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c250:	2308      	movs	r3, #8
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c256:	e1ae      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c258:	2310      	movs	r3, #16
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c25e:	e1aa      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c260:	2320      	movs	r3, #32
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c266:	e1a6      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c268:	2340      	movs	r3, #64	@ 0x40
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26e:	e1a2      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c270:	2380      	movs	r3, #128	@ 0x80
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c276:	e19e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a35      	ldr	r2, [pc, #212]	@ (800c354 <UART_SetConfig+0x344>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d130      	bne.n	800c2e4 <UART_SetConfig+0x2d4>
 800c282:	4b31      	ldr	r3, [pc, #196]	@ (800c348 <UART_SetConfig+0x338>)
 800c284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b05      	cmp	r3, #5
 800c28c:	d826      	bhi.n	800c2dc <UART_SetConfig+0x2cc>
 800c28e:	a201      	add	r2, pc, #4	@ (adr r2, 800c294 <UART_SetConfig+0x284>)
 800c290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c294:	0800c2ad 	.word	0x0800c2ad
 800c298:	0800c2b5 	.word	0x0800c2b5
 800c29c:	0800c2bd 	.word	0x0800c2bd
 800c2a0:	0800c2c5 	.word	0x0800c2c5
 800c2a4:	0800c2cd 	.word	0x0800c2cd
 800c2a8:	0800c2d5 	.word	0x0800c2d5
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b2:	e180      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2b4:	2304      	movs	r3, #4
 800c2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ba:	e17c      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2bc:	2308      	movs	r3, #8
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c2:	e178      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2c4:	2310      	movs	r3, #16
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ca:	e174      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2cc:	2320      	movs	r3, #32
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d2:	e170      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2d4:	2340      	movs	r3, #64	@ 0x40
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2da:	e16c      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2dc:	2380      	movs	r3, #128	@ 0x80
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e2:	e168      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a1b      	ldr	r2, [pc, #108]	@ (800c358 <UART_SetConfig+0x348>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d142      	bne.n	800c374 <UART_SetConfig+0x364>
 800c2ee:	4b16      	ldr	r3, [pc, #88]	@ (800c348 <UART_SetConfig+0x338>)
 800c2f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2f2:	f003 0307 	and.w	r3, r3, #7
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	d838      	bhi.n	800c36c <UART_SetConfig+0x35c>
 800c2fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c300 <UART_SetConfig+0x2f0>)
 800c2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c300:	0800c319 	.word	0x0800c319
 800c304:	0800c321 	.word	0x0800c321
 800c308:	0800c329 	.word	0x0800c329
 800c30c:	0800c331 	.word	0x0800c331
 800c310:	0800c35d 	.word	0x0800c35d
 800c314:	0800c365 	.word	0x0800c365
 800c318:	2300      	movs	r3, #0
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e14a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c320:	2304      	movs	r3, #4
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e146      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c328:	2308      	movs	r3, #8
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e142      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c330:	2310      	movs	r3, #16
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e13e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c338:	cfff69f3 	.word	0xcfff69f3
 800c33c:	58000c00 	.word	0x58000c00
 800c340:	11fff4ff 	.word	0x11fff4ff
 800c344:	40011000 	.word	0x40011000
 800c348:	58024400 	.word	0x58024400
 800c34c:	40004400 	.word	0x40004400
 800c350:	40004800 	.word	0x40004800
 800c354:	40004c00 	.word	0x40004c00
 800c358:	40005000 	.word	0x40005000
 800c35c:	2320      	movs	r3, #32
 800c35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c362:	e128      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c364:	2340      	movs	r3, #64	@ 0x40
 800c366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c36a:	e124      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c36c:	2380      	movs	r3, #128	@ 0x80
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c372:	e120      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4acb      	ldr	r2, [pc, #812]	@ (800c6a8 <UART_SetConfig+0x698>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d176      	bne.n	800c46c <UART_SetConfig+0x45c>
 800c37e:	4bcb      	ldr	r3, [pc, #812]	@ (800c6ac <UART_SetConfig+0x69c>)
 800c380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c382:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c386:	2b28      	cmp	r3, #40	@ 0x28
 800c388:	d86c      	bhi.n	800c464 <UART_SetConfig+0x454>
 800c38a:	a201      	add	r2, pc, #4	@ (adr r2, 800c390 <UART_SetConfig+0x380>)
 800c38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c390:	0800c435 	.word	0x0800c435
 800c394:	0800c465 	.word	0x0800c465
 800c398:	0800c465 	.word	0x0800c465
 800c39c:	0800c465 	.word	0x0800c465
 800c3a0:	0800c465 	.word	0x0800c465
 800c3a4:	0800c465 	.word	0x0800c465
 800c3a8:	0800c465 	.word	0x0800c465
 800c3ac:	0800c465 	.word	0x0800c465
 800c3b0:	0800c43d 	.word	0x0800c43d
 800c3b4:	0800c465 	.word	0x0800c465
 800c3b8:	0800c465 	.word	0x0800c465
 800c3bc:	0800c465 	.word	0x0800c465
 800c3c0:	0800c465 	.word	0x0800c465
 800c3c4:	0800c465 	.word	0x0800c465
 800c3c8:	0800c465 	.word	0x0800c465
 800c3cc:	0800c465 	.word	0x0800c465
 800c3d0:	0800c445 	.word	0x0800c445
 800c3d4:	0800c465 	.word	0x0800c465
 800c3d8:	0800c465 	.word	0x0800c465
 800c3dc:	0800c465 	.word	0x0800c465
 800c3e0:	0800c465 	.word	0x0800c465
 800c3e4:	0800c465 	.word	0x0800c465
 800c3e8:	0800c465 	.word	0x0800c465
 800c3ec:	0800c465 	.word	0x0800c465
 800c3f0:	0800c44d 	.word	0x0800c44d
 800c3f4:	0800c465 	.word	0x0800c465
 800c3f8:	0800c465 	.word	0x0800c465
 800c3fc:	0800c465 	.word	0x0800c465
 800c400:	0800c465 	.word	0x0800c465
 800c404:	0800c465 	.word	0x0800c465
 800c408:	0800c465 	.word	0x0800c465
 800c40c:	0800c465 	.word	0x0800c465
 800c410:	0800c455 	.word	0x0800c455
 800c414:	0800c465 	.word	0x0800c465
 800c418:	0800c465 	.word	0x0800c465
 800c41c:	0800c465 	.word	0x0800c465
 800c420:	0800c465 	.word	0x0800c465
 800c424:	0800c465 	.word	0x0800c465
 800c428:	0800c465 	.word	0x0800c465
 800c42c:	0800c465 	.word	0x0800c465
 800c430:	0800c45d 	.word	0x0800c45d
 800c434:	2301      	movs	r3, #1
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43a:	e0bc      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c43c:	2304      	movs	r3, #4
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c442:	e0b8      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c444:	2308      	movs	r3, #8
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44a:	e0b4      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c44c:	2310      	movs	r3, #16
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c452:	e0b0      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c454:	2320      	movs	r3, #32
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45a:	e0ac      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c45c:	2340      	movs	r3, #64	@ 0x40
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c462:	e0a8      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c464:	2380      	movs	r3, #128	@ 0x80
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c46a:	e0a4      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a8f      	ldr	r2, [pc, #572]	@ (800c6b0 <UART_SetConfig+0x6a0>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d130      	bne.n	800c4d8 <UART_SetConfig+0x4c8>
 800c476:	4b8d      	ldr	r3, [pc, #564]	@ (800c6ac <UART_SetConfig+0x69c>)
 800c478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	2b05      	cmp	r3, #5
 800c480:	d826      	bhi.n	800c4d0 <UART_SetConfig+0x4c0>
 800c482:	a201      	add	r2, pc, #4	@ (adr r2, 800c488 <UART_SetConfig+0x478>)
 800c484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c488:	0800c4a1 	.word	0x0800c4a1
 800c48c:	0800c4a9 	.word	0x0800c4a9
 800c490:	0800c4b1 	.word	0x0800c4b1
 800c494:	0800c4b9 	.word	0x0800c4b9
 800c498:	0800c4c1 	.word	0x0800c4c1
 800c49c:	0800c4c9 	.word	0x0800c4c9
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a6:	e086      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4a8:	2304      	movs	r3, #4
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ae:	e082      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4b0:	2308      	movs	r3, #8
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b6:	e07e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4b8:	2310      	movs	r3, #16
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4be:	e07a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4c0:	2320      	movs	r3, #32
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c6:	e076      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4c8:	2340      	movs	r3, #64	@ 0x40
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ce:	e072      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4d0:	2380      	movs	r3, #128	@ 0x80
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4d6:	e06e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a75      	ldr	r2, [pc, #468]	@ (800c6b4 <UART_SetConfig+0x6a4>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d130      	bne.n	800c544 <UART_SetConfig+0x534>
 800c4e2:	4b72      	ldr	r3, [pc, #456]	@ (800c6ac <UART_SetConfig+0x69c>)
 800c4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e6:	f003 0307 	and.w	r3, r3, #7
 800c4ea:	2b05      	cmp	r3, #5
 800c4ec:	d826      	bhi.n	800c53c <UART_SetConfig+0x52c>
 800c4ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c4f4 <UART_SetConfig+0x4e4>)
 800c4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f4:	0800c50d 	.word	0x0800c50d
 800c4f8:	0800c515 	.word	0x0800c515
 800c4fc:	0800c51d 	.word	0x0800c51d
 800c500:	0800c525 	.word	0x0800c525
 800c504:	0800c52d 	.word	0x0800c52d
 800c508:	0800c535 	.word	0x0800c535
 800c50c:	2300      	movs	r3, #0
 800c50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c512:	e050      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c514:	2304      	movs	r3, #4
 800c516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51a:	e04c      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c51c:	2308      	movs	r3, #8
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c522:	e048      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c524:	2310      	movs	r3, #16
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52a:	e044      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c52c:	2320      	movs	r3, #32
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c532:	e040      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c534:	2340      	movs	r3, #64	@ 0x40
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53a:	e03c      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c53c:	2380      	movs	r3, #128	@ 0x80
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c542:	e038      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a5b      	ldr	r2, [pc, #364]	@ (800c6b8 <UART_SetConfig+0x6a8>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d130      	bne.n	800c5b0 <UART_SetConfig+0x5a0>
 800c54e:	4b57      	ldr	r3, [pc, #348]	@ (800c6ac <UART_SetConfig+0x69c>)
 800c550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c552:	f003 0307 	and.w	r3, r3, #7
 800c556:	2b05      	cmp	r3, #5
 800c558:	d826      	bhi.n	800c5a8 <UART_SetConfig+0x598>
 800c55a:	a201      	add	r2, pc, #4	@ (adr r2, 800c560 <UART_SetConfig+0x550>)
 800c55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c560:	0800c579 	.word	0x0800c579
 800c564:	0800c581 	.word	0x0800c581
 800c568:	0800c589 	.word	0x0800c589
 800c56c:	0800c591 	.word	0x0800c591
 800c570:	0800c599 	.word	0x0800c599
 800c574:	0800c5a1 	.word	0x0800c5a1
 800c578:	2302      	movs	r3, #2
 800c57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c57e:	e01a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c580:	2304      	movs	r3, #4
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c586:	e016      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c588:	2308      	movs	r3, #8
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58e:	e012      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c590:	2310      	movs	r3, #16
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c596:	e00e      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c598:	2320      	movs	r3, #32
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59e:	e00a      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c5a0:	2340      	movs	r3, #64	@ 0x40
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a6:	e006      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c5a8:	2380      	movs	r3, #128	@ 0x80
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ae:	e002      	b.n	800c5b6 <UART_SetConfig+0x5a6>
 800c5b0:	2380      	movs	r3, #128	@ 0x80
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a3f      	ldr	r2, [pc, #252]	@ (800c6b8 <UART_SetConfig+0x6a8>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	f040 80f8 	bne.w	800c7b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c5c6:	2b20      	cmp	r3, #32
 800c5c8:	dc46      	bgt.n	800c658 <UART_SetConfig+0x648>
 800c5ca:	2b02      	cmp	r3, #2
 800c5cc:	f2c0 8082 	blt.w	800c6d4 <UART_SetConfig+0x6c4>
 800c5d0:	3b02      	subs	r3, #2
 800c5d2:	2b1e      	cmp	r3, #30
 800c5d4:	d87e      	bhi.n	800c6d4 <UART_SetConfig+0x6c4>
 800c5d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5dc <UART_SetConfig+0x5cc>)
 800c5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5dc:	0800c65f 	.word	0x0800c65f
 800c5e0:	0800c6d5 	.word	0x0800c6d5
 800c5e4:	0800c667 	.word	0x0800c667
 800c5e8:	0800c6d5 	.word	0x0800c6d5
 800c5ec:	0800c6d5 	.word	0x0800c6d5
 800c5f0:	0800c6d5 	.word	0x0800c6d5
 800c5f4:	0800c677 	.word	0x0800c677
 800c5f8:	0800c6d5 	.word	0x0800c6d5
 800c5fc:	0800c6d5 	.word	0x0800c6d5
 800c600:	0800c6d5 	.word	0x0800c6d5
 800c604:	0800c6d5 	.word	0x0800c6d5
 800c608:	0800c6d5 	.word	0x0800c6d5
 800c60c:	0800c6d5 	.word	0x0800c6d5
 800c610:	0800c6d5 	.word	0x0800c6d5
 800c614:	0800c687 	.word	0x0800c687
 800c618:	0800c6d5 	.word	0x0800c6d5
 800c61c:	0800c6d5 	.word	0x0800c6d5
 800c620:	0800c6d5 	.word	0x0800c6d5
 800c624:	0800c6d5 	.word	0x0800c6d5
 800c628:	0800c6d5 	.word	0x0800c6d5
 800c62c:	0800c6d5 	.word	0x0800c6d5
 800c630:	0800c6d5 	.word	0x0800c6d5
 800c634:	0800c6d5 	.word	0x0800c6d5
 800c638:	0800c6d5 	.word	0x0800c6d5
 800c63c:	0800c6d5 	.word	0x0800c6d5
 800c640:	0800c6d5 	.word	0x0800c6d5
 800c644:	0800c6d5 	.word	0x0800c6d5
 800c648:	0800c6d5 	.word	0x0800c6d5
 800c64c:	0800c6d5 	.word	0x0800c6d5
 800c650:	0800c6d5 	.word	0x0800c6d5
 800c654:	0800c6c7 	.word	0x0800c6c7
 800c658:	2b40      	cmp	r3, #64	@ 0x40
 800c65a:	d037      	beq.n	800c6cc <UART_SetConfig+0x6bc>
 800c65c:	e03a      	b.n	800c6d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c65e:	f7fd fefd 	bl	800a45c <HAL_RCCEx_GetD3PCLK1Freq>
 800c662:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c664:	e03c      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fd ff0c 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c674:	e034      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c676:	f107 0318 	add.w	r3, r7, #24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fe f858 	bl	800a730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c684:	e02c      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c686:	4b09      	ldr	r3, [pc, #36]	@ (800c6ac <UART_SetConfig+0x69c>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 0320 	and.w	r3, r3, #32
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d016      	beq.n	800c6c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c692:	4b06      	ldr	r3, [pc, #24]	@ (800c6ac <UART_SetConfig+0x69c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	08db      	lsrs	r3, r3, #3
 800c698:	f003 0303 	and.w	r3, r3, #3
 800c69c:	4a07      	ldr	r2, [pc, #28]	@ (800c6bc <UART_SetConfig+0x6ac>)
 800c69e:	fa22 f303 	lsr.w	r3, r2, r3
 800c6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6a4:	e01c      	b.n	800c6e0 <UART_SetConfig+0x6d0>
 800c6a6:	bf00      	nop
 800c6a8:	40011400 	.word	0x40011400
 800c6ac:	58024400 	.word	0x58024400
 800c6b0:	40007800 	.word	0x40007800
 800c6b4:	40007c00 	.word	0x40007c00
 800c6b8:	58000c00 	.word	0x58000c00
 800c6bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c6c0:	4b9d      	ldr	r3, [pc, #628]	@ (800c938 <UART_SetConfig+0x928>)
 800c6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6c4:	e00c      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6c6:	4b9d      	ldr	r3, [pc, #628]	@ (800c93c <UART_SetConfig+0x92c>)
 800c6c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6ca:	e009      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6d2:	e005      	b.n	800c6e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c6de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c6e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f000 81de 	beq.w	800caa4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6ec:	4a94      	ldr	r2, [pc, #592]	@ (800c940 <UART_SetConfig+0x930>)
 800c6ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6fa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	685a      	ldr	r2, [r3, #4]
 800c700:	4613      	mov	r3, r2
 800c702:	005b      	lsls	r3, r3, #1
 800c704:	4413      	add	r3, r2
 800c706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c708:	429a      	cmp	r2, r3
 800c70a:	d305      	bcc.n	800c718 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c714:	429a      	cmp	r2, r3
 800c716:	d903      	bls.n	800c720 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c71e:	e1c1      	b.n	800caa4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c722:	2200      	movs	r2, #0
 800c724:	60bb      	str	r3, [r7, #8]
 800c726:	60fa      	str	r2, [r7, #12]
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c72c:	4a84      	ldr	r2, [pc, #528]	@ (800c940 <UART_SetConfig+0x930>)
 800c72e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c732:	b29b      	uxth	r3, r3
 800c734:	2200      	movs	r2, #0
 800c736:	603b      	str	r3, [r7, #0]
 800c738:	607a      	str	r2, [r7, #4]
 800c73a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c73e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c742:	f7f3 fe25 	bl	8000390 <__aeabi_uldivmod>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	4610      	mov	r0, r2
 800c74c:	4619      	mov	r1, r3
 800c74e:	f04f 0200 	mov.w	r2, #0
 800c752:	f04f 0300 	mov.w	r3, #0
 800c756:	020b      	lsls	r3, r1, #8
 800c758:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c75c:	0202      	lsls	r2, r0, #8
 800c75e:	6979      	ldr	r1, [r7, #20]
 800c760:	6849      	ldr	r1, [r1, #4]
 800c762:	0849      	lsrs	r1, r1, #1
 800c764:	2000      	movs	r0, #0
 800c766:	460c      	mov	r4, r1
 800c768:	4605      	mov	r5, r0
 800c76a:	eb12 0804 	adds.w	r8, r2, r4
 800c76e:	eb43 0905 	adc.w	r9, r3, r5
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	469a      	mov	sl, r3
 800c77a:	4693      	mov	fp, r2
 800c77c:	4652      	mov	r2, sl
 800c77e:	465b      	mov	r3, fp
 800c780:	4640      	mov	r0, r8
 800c782:	4649      	mov	r1, r9
 800c784:	f7f3 fe04 	bl	8000390 <__aeabi_uldivmod>
 800c788:	4602      	mov	r2, r0
 800c78a:	460b      	mov	r3, r1
 800c78c:	4613      	mov	r3, r2
 800c78e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c792:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c796:	d308      	bcc.n	800c7aa <UART_SetConfig+0x79a>
 800c798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c79e:	d204      	bcs.n	800c7aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7a6:	60da      	str	r2, [r3, #12]
 800c7a8:	e17c      	b.n	800caa4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c7b0:	e178      	b.n	800caa4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	69db      	ldr	r3, [r3, #28]
 800c7b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c7ba:	f040 80c5 	bne.w	800c948 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c7be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c7c2:	2b20      	cmp	r3, #32
 800c7c4:	dc48      	bgt.n	800c858 <UART_SetConfig+0x848>
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	db7b      	blt.n	800c8c2 <UART_SetConfig+0x8b2>
 800c7ca:	2b20      	cmp	r3, #32
 800c7cc:	d879      	bhi.n	800c8c2 <UART_SetConfig+0x8b2>
 800c7ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c7d4 <UART_SetConfig+0x7c4>)
 800c7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d4:	0800c85f 	.word	0x0800c85f
 800c7d8:	0800c867 	.word	0x0800c867
 800c7dc:	0800c8c3 	.word	0x0800c8c3
 800c7e0:	0800c8c3 	.word	0x0800c8c3
 800c7e4:	0800c86f 	.word	0x0800c86f
 800c7e8:	0800c8c3 	.word	0x0800c8c3
 800c7ec:	0800c8c3 	.word	0x0800c8c3
 800c7f0:	0800c8c3 	.word	0x0800c8c3
 800c7f4:	0800c87f 	.word	0x0800c87f
 800c7f8:	0800c8c3 	.word	0x0800c8c3
 800c7fc:	0800c8c3 	.word	0x0800c8c3
 800c800:	0800c8c3 	.word	0x0800c8c3
 800c804:	0800c8c3 	.word	0x0800c8c3
 800c808:	0800c8c3 	.word	0x0800c8c3
 800c80c:	0800c8c3 	.word	0x0800c8c3
 800c810:	0800c8c3 	.word	0x0800c8c3
 800c814:	0800c88f 	.word	0x0800c88f
 800c818:	0800c8c3 	.word	0x0800c8c3
 800c81c:	0800c8c3 	.word	0x0800c8c3
 800c820:	0800c8c3 	.word	0x0800c8c3
 800c824:	0800c8c3 	.word	0x0800c8c3
 800c828:	0800c8c3 	.word	0x0800c8c3
 800c82c:	0800c8c3 	.word	0x0800c8c3
 800c830:	0800c8c3 	.word	0x0800c8c3
 800c834:	0800c8c3 	.word	0x0800c8c3
 800c838:	0800c8c3 	.word	0x0800c8c3
 800c83c:	0800c8c3 	.word	0x0800c8c3
 800c840:	0800c8c3 	.word	0x0800c8c3
 800c844:	0800c8c3 	.word	0x0800c8c3
 800c848:	0800c8c3 	.word	0x0800c8c3
 800c84c:	0800c8c3 	.word	0x0800c8c3
 800c850:	0800c8c3 	.word	0x0800c8c3
 800c854:	0800c8b5 	.word	0x0800c8b5
 800c858:	2b40      	cmp	r3, #64	@ 0x40
 800c85a:	d02e      	beq.n	800c8ba <UART_SetConfig+0x8aa>
 800c85c:	e031      	b.n	800c8c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c85e:	f7fb fe47 	bl	80084f0 <HAL_RCC_GetPCLK1Freq>
 800c862:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c864:	e033      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c866:	f7fb fe59 	bl	800851c <HAL_RCC_GetPCLK2Freq>
 800c86a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c86c:	e02f      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c86e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c872:	4618      	mov	r0, r3
 800c874:	f7fd fe08 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c87c:	e027      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c87e:	f107 0318 	add.w	r3, r7, #24
 800c882:	4618      	mov	r0, r3
 800c884:	f7fd ff54 	bl	800a730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c88c:	e01f      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c88e:	4b2d      	ldr	r3, [pc, #180]	@ (800c944 <UART_SetConfig+0x934>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f003 0320 	and.w	r3, r3, #32
 800c896:	2b00      	cmp	r3, #0
 800c898:	d009      	beq.n	800c8ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c89a:	4b2a      	ldr	r3, [pc, #168]	@ (800c944 <UART_SetConfig+0x934>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	08db      	lsrs	r3, r3, #3
 800c8a0:	f003 0303 	and.w	r3, r3, #3
 800c8a4:	4a24      	ldr	r2, [pc, #144]	@ (800c938 <UART_SetConfig+0x928>)
 800c8a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8ac:	e00f      	b.n	800c8ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c8ae:	4b22      	ldr	r3, [pc, #136]	@ (800c938 <UART_SetConfig+0x928>)
 800c8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8b2:	e00c      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8b4:	4b21      	ldr	r3, [pc, #132]	@ (800c93c <UART_SetConfig+0x92c>)
 800c8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8b8:	e009      	b.n	800c8ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8c0:	e005      	b.n	800c8ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c8cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f000 80e7 	beq.w	800caa4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8da:	4a19      	ldr	r2, [pc, #100]	@ (800c940 <UART_SetConfig+0x930>)
 800c8dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8e8:	005a      	lsls	r2, r3, #1
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	085b      	lsrs	r3, r3, #1
 800c8f0:	441a      	add	r2, r3
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fe:	2b0f      	cmp	r3, #15
 800c900:	d916      	bls.n	800c930 <UART_SetConfig+0x920>
 800c902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c908:	d212      	bcs.n	800c930 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	f023 030f 	bic.w	r3, r3, #15
 800c912:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c916:	085b      	lsrs	r3, r3, #1
 800c918:	b29b      	uxth	r3, r3
 800c91a:	f003 0307 	and.w	r3, r3, #7
 800c91e:	b29a      	uxth	r2, r3
 800c920:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c922:	4313      	orrs	r3, r2
 800c924:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c92c:	60da      	str	r2, [r3, #12]
 800c92e:	e0b9      	b.n	800caa4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c936:	e0b5      	b.n	800caa4 <UART_SetConfig+0xa94>
 800c938:	03d09000 	.word	0x03d09000
 800c93c:	003d0900 	.word	0x003d0900
 800c940:	08011b40 	.word	0x08011b40
 800c944:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c948:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c94c:	2b20      	cmp	r3, #32
 800c94e:	dc49      	bgt.n	800c9e4 <UART_SetConfig+0x9d4>
 800c950:	2b00      	cmp	r3, #0
 800c952:	db7c      	blt.n	800ca4e <UART_SetConfig+0xa3e>
 800c954:	2b20      	cmp	r3, #32
 800c956:	d87a      	bhi.n	800ca4e <UART_SetConfig+0xa3e>
 800c958:	a201      	add	r2, pc, #4	@ (adr r2, 800c960 <UART_SetConfig+0x950>)
 800c95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c95e:	bf00      	nop
 800c960:	0800c9eb 	.word	0x0800c9eb
 800c964:	0800c9f3 	.word	0x0800c9f3
 800c968:	0800ca4f 	.word	0x0800ca4f
 800c96c:	0800ca4f 	.word	0x0800ca4f
 800c970:	0800c9fb 	.word	0x0800c9fb
 800c974:	0800ca4f 	.word	0x0800ca4f
 800c978:	0800ca4f 	.word	0x0800ca4f
 800c97c:	0800ca4f 	.word	0x0800ca4f
 800c980:	0800ca0b 	.word	0x0800ca0b
 800c984:	0800ca4f 	.word	0x0800ca4f
 800c988:	0800ca4f 	.word	0x0800ca4f
 800c98c:	0800ca4f 	.word	0x0800ca4f
 800c990:	0800ca4f 	.word	0x0800ca4f
 800c994:	0800ca4f 	.word	0x0800ca4f
 800c998:	0800ca4f 	.word	0x0800ca4f
 800c99c:	0800ca4f 	.word	0x0800ca4f
 800c9a0:	0800ca1b 	.word	0x0800ca1b
 800c9a4:	0800ca4f 	.word	0x0800ca4f
 800c9a8:	0800ca4f 	.word	0x0800ca4f
 800c9ac:	0800ca4f 	.word	0x0800ca4f
 800c9b0:	0800ca4f 	.word	0x0800ca4f
 800c9b4:	0800ca4f 	.word	0x0800ca4f
 800c9b8:	0800ca4f 	.word	0x0800ca4f
 800c9bc:	0800ca4f 	.word	0x0800ca4f
 800c9c0:	0800ca4f 	.word	0x0800ca4f
 800c9c4:	0800ca4f 	.word	0x0800ca4f
 800c9c8:	0800ca4f 	.word	0x0800ca4f
 800c9cc:	0800ca4f 	.word	0x0800ca4f
 800c9d0:	0800ca4f 	.word	0x0800ca4f
 800c9d4:	0800ca4f 	.word	0x0800ca4f
 800c9d8:	0800ca4f 	.word	0x0800ca4f
 800c9dc:	0800ca4f 	.word	0x0800ca4f
 800c9e0:	0800ca41 	.word	0x0800ca41
 800c9e4:	2b40      	cmp	r3, #64	@ 0x40
 800c9e6:	d02e      	beq.n	800ca46 <UART_SetConfig+0xa36>
 800c9e8:	e031      	b.n	800ca4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9ea:	f7fb fd81 	bl	80084f0 <HAL_RCC_GetPCLK1Freq>
 800c9ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9f0:	e033      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9f2:	f7fb fd93 	bl	800851c <HAL_RCC_GetPCLK2Freq>
 800c9f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9f8:	e02f      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fd fd42 	bl	800a488 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca08:	e027      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca0a:	f107 0318 	add.w	r3, r7, #24
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fd fe8e 	bl	800a730 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca18:	e01f      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca1a:	4b2d      	ldr	r3, [pc, #180]	@ (800cad0 <UART_SetConfig+0xac0>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f003 0320 	and.w	r3, r3, #32
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d009      	beq.n	800ca3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca26:	4b2a      	ldr	r3, [pc, #168]	@ (800cad0 <UART_SetConfig+0xac0>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	08db      	lsrs	r3, r3, #3
 800ca2c:	f003 0303 	and.w	r3, r3, #3
 800ca30:	4a28      	ldr	r2, [pc, #160]	@ (800cad4 <UART_SetConfig+0xac4>)
 800ca32:	fa22 f303 	lsr.w	r3, r2, r3
 800ca36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca38:	e00f      	b.n	800ca5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ca3a:	4b26      	ldr	r3, [pc, #152]	@ (800cad4 <UART_SetConfig+0xac4>)
 800ca3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca3e:	e00c      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca40:	4b25      	ldr	r3, [pc, #148]	@ (800cad8 <UART_SetConfig+0xac8>)
 800ca42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca44:	e009      	b.n	800ca5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca4c:	e005      	b.n	800ca5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca58:	bf00      	nop
    }

    if (pclk != 0U)
 800ca5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d021      	beq.n	800caa4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca64:	4a1d      	ldr	r2, [pc, #116]	@ (800cadc <UART_SetConfig+0xacc>)
 800ca66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca6e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	085b      	lsrs	r3, r3, #1
 800ca78:	441a      	add	r2, r3
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca86:	2b0f      	cmp	r3, #15
 800ca88:	d909      	bls.n	800ca9e <UART_SetConfig+0xa8e>
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca90:	d205      	bcs.n	800ca9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	60da      	str	r2, [r3, #12]
 800ca9c:	e002      	b.n	800caa4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2201      	movs	r2, #1
 800cab0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	2200      	movs	r2, #0
 800cab8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	2200      	movs	r2, #0
 800cabe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cac0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3748      	adds	r7, #72	@ 0x48
 800cac8:	46bd      	mov	sp, r7
 800caca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cace:	bf00      	nop
 800cad0:	58024400 	.word	0x58024400
 800cad4:	03d09000 	.word	0x03d09000
 800cad8:	003d0900 	.word	0x003d0900
 800cadc:	08011b40 	.word	0x08011b40

0800cae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caec:	f003 0301 	and.w	r3, r3, #1
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d00a      	beq.n	800cb0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	430a      	orrs	r2, r1
 800cb08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00a      	beq.n	800cb2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	430a      	orrs	r2, r1
 800cb2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb30:	f003 0304 	and.w	r3, r3, #4
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00a      	beq.n	800cb4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	430a      	orrs	r2, r1
 800cb4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb52:	f003 0308 	and.w	r3, r3, #8
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00a      	beq.n	800cb70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	430a      	orrs	r2, r1
 800cb6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb74:	f003 0310 	and.w	r3, r3, #16
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00a      	beq.n	800cb92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	430a      	orrs	r2, r1
 800cb90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb96:	f003 0320 	and.w	r3, r3, #32
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00a      	beq.n	800cbb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	430a      	orrs	r2, r1
 800cbb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d01a      	beq.n	800cbf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	430a      	orrs	r2, r1
 800cbd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbde:	d10a      	bne.n	800cbf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	430a      	orrs	r2, r1
 800cbf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00a      	beq.n	800cc18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	430a      	orrs	r2, r1
 800cc16:	605a      	str	r2, [r3, #4]
  }
}
 800cc18:	bf00      	nop
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b098      	sub	sp, #96	@ 0x60
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc34:	f7f4 feec 	bl	8001a10 <HAL_GetTick>
 800cc38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f003 0308 	and.w	r3, r3, #8
 800cc44:	2b08      	cmp	r3, #8
 800cc46:	d12f      	bne.n	800cca8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc50:	2200      	movs	r2, #0
 800cc52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 f88e 	bl	800cd78 <UART_WaitOnFlagUntilTimeout>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d022      	beq.n	800cca8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc6a:	e853 3f00 	ldrex	r3, [r3]
 800cc6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc76:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc80:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc88:	e841 2300 	strex	r3, r2, [r1]
 800cc8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1e6      	bne.n	800cc62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2220      	movs	r2, #32
 800cc98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cca4:	2303      	movs	r3, #3
 800cca6:	e063      	b.n	800cd70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 0304 	and.w	r3, r3, #4
 800ccb2:	2b04      	cmp	r3, #4
 800ccb4:	d149      	bne.n	800cd4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccb6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 f857 	bl	800cd78 <UART_WaitOnFlagUntilTimeout>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d03c      	beq.n	800cd4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd8:	e853 3f00 	ldrex	r3, [r3]
 800ccdc:	623b      	str	r3, [r7, #32]
   return(result);
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	461a      	mov	r2, r3
 800ccec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccee:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccf6:	e841 2300 	strex	r3, r2, [r1]
 800ccfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ccfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1e6      	bne.n	800ccd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	3308      	adds	r3, #8
 800cd08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	e853 3f00 	ldrex	r3, [r3]
 800cd10:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f023 0301 	bic.w	r3, r3, #1
 800cd18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3308      	adds	r3, #8
 800cd20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd22:	61fa      	str	r2, [r7, #28]
 800cd24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd26:	69b9      	ldr	r1, [r7, #24]
 800cd28:	69fa      	ldr	r2, [r7, #28]
 800cd2a:	e841 2300 	strex	r3, r2, [r1]
 800cd2e:	617b      	str	r3, [r7, #20]
   return(result);
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d1e5      	bne.n	800cd02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2220      	movs	r2, #32
 800cd3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd46:	2303      	movs	r3, #3
 800cd48:	e012      	b.n	800cd70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2220      	movs	r2, #32
 800cd4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2220      	movs	r2, #32
 800cd56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd6e:	2300      	movs	r3, #0
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3758      	adds	r7, #88	@ 0x58
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	603b      	str	r3, [r7, #0]
 800cd84:	4613      	mov	r3, r2
 800cd86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd88:	e049      	b.n	800ce1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd90:	d045      	beq.n	800ce1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd92:	f7f4 fe3d 	bl	8001a10 <HAL_GetTick>
 800cd96:	4602      	mov	r2, r0
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	69ba      	ldr	r2, [r7, #24]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d302      	bcc.n	800cda8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d101      	bne.n	800cdac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e048      	b.n	800ce3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 0304 	and.w	r3, r3, #4
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d031      	beq.n	800ce1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	f003 0308 	and.w	r3, r3, #8
 800cdc4:	2b08      	cmp	r3, #8
 800cdc6:	d110      	bne.n	800cdea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2208      	movs	r2, #8
 800cdce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f000 f839 	bl	800ce48 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2208      	movs	r2, #8
 800cdda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e029      	b.n	800ce3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	69db      	ldr	r3, [r3, #28]
 800cdf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cdf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cdf8:	d111      	bne.n	800ce1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f000 f81f 	bl	800ce48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2220      	movs	r2, #32
 800ce0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ce1a:	2303      	movs	r3, #3
 800ce1c:	e00f      	b.n	800ce3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	69da      	ldr	r2, [r3, #28]
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	4013      	ands	r3, r2
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	bf0c      	ite	eq
 800ce2e:	2301      	moveq	r3, #1
 800ce30:	2300      	movne	r3, #0
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	461a      	mov	r2, r3
 800ce36:	79fb      	ldrb	r3, [r7, #7]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d0a6      	beq.n	800cd8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce3c:	2300      	movs	r3, #0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
	...

0800ce48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b095      	sub	sp, #84	@ 0x54
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce58:	e853 3f00 	ldrex	r3, [r3]
 800ce5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce76:	e841 2300 	strex	r3, r2, [r1]
 800ce7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1e6      	bne.n	800ce50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3308      	adds	r3, #8
 800ce88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8a:	6a3b      	ldr	r3, [r7, #32]
 800ce8c:	e853 3f00 	ldrex	r3, [r3]
 800ce90:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce92:	69fa      	ldr	r2, [r7, #28]
 800ce94:	4b1e      	ldr	r3, [pc, #120]	@ (800cf10 <UART_EndRxTransfer+0xc8>)
 800ce96:	4013      	ands	r3, r2
 800ce98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	3308      	adds	r3, #8
 800cea0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ceaa:	e841 2300 	strex	r3, r2, [r1]
 800ceae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1e5      	bne.n	800ce82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d118      	bne.n	800cef0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	e853 3f00 	ldrex	r3, [r3]
 800ceca:	60bb      	str	r3, [r7, #8]
   return(result);
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f023 0310 	bic.w	r3, r3, #16
 800ced2:	647b      	str	r3, [r7, #68]	@ 0x44
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	461a      	mov	r2, r3
 800ceda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cedc:	61bb      	str	r3, [r7, #24]
 800cede:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee0:	6979      	ldr	r1, [r7, #20]
 800cee2:	69ba      	ldr	r2, [r7, #24]
 800cee4:	e841 2300 	strex	r3, r2, [r1]
 800cee8:	613b      	str	r3, [r7, #16]
   return(result);
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1e6      	bne.n	800cebe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2220      	movs	r2, #32
 800cef4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2200      	movs	r2, #0
 800cf02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cf04:	bf00      	nop
 800cf06:	3754      	adds	r7, #84	@ 0x54
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	effffffe 	.word	0xeffffffe

0800cf14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f7ff f856 	bl	800bfe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf38:	bf00      	nop
 800cf3a:	3710      	adds	r7, #16
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b088      	sub	sp, #32
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	e853 3f00 	ldrex	r3, [r3]
 800cf54:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf5c:	61fb      	str	r3, [r7, #28]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	461a      	mov	r2, r3
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	61bb      	str	r3, [r7, #24]
 800cf68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf6a:	6979      	ldr	r1, [r7, #20]
 800cf6c:	69ba      	ldr	r2, [r7, #24]
 800cf6e:	e841 2300 	strex	r3, r2, [r1]
 800cf72:	613b      	str	r3, [r7, #16]
   return(result);
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1e6      	bne.n	800cf48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2220      	movs	r2, #32
 800cf7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f7ff f821 	bl	800bfd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf8e:	bf00      	nop
 800cf90:	3720      	adds	r7, #32
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cf96:	b480      	push	{r7}
 800cf98:	b083      	sub	sp, #12
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf9e:	bf00      	nop
 800cfa0:	370c      	adds	r7, #12
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cfaa:	b480      	push	{r7}
 800cfac:	b083      	sub	sp, #12
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cfb2:	bf00      	nop
 800cfb4:	370c      	adds	r7, #12
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cfbe:	b480      	push	{r7}
 800cfc0:	b083      	sub	sp, #12
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cfc6:	bf00      	nop
 800cfc8:	370c      	adds	r7, #12
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd0:	4770      	bx	lr

0800cfd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cfd2:	b480      	push	{r7}
 800cfd4:	b085      	sub	sp, #20
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d101      	bne.n	800cfe8 <HAL_UARTEx_DisableFifoMode+0x16>
 800cfe4:	2302      	movs	r3, #2
 800cfe6:	e027      	b.n	800d038 <HAL_UARTEx_DisableFifoMode+0x66>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2201      	movs	r2, #1
 800cfec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2224      	movs	r2, #36	@ 0x24
 800cff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f022 0201 	bic.w	r2, r2, #1
 800d00e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d016:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	68fa      	ldr	r2, [r7, #12]
 800d024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2220      	movs	r2, #32
 800d02a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3714      	adds	r7, #20
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d054:	2b01      	cmp	r3, #1
 800d056:	d101      	bne.n	800d05c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d058:	2302      	movs	r3, #2
 800d05a:	e02d      	b.n	800d0b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2224      	movs	r2, #36	@ 0x24
 800d068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f022 0201 	bic.w	r2, r2, #1
 800d082:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	683a      	ldr	r2, [r7, #0]
 800d094:	430a      	orrs	r2, r1
 800d096:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f84f 	bl	800d13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2220      	movs	r2, #32
 800d0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d101      	bne.n	800d0d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d0d4:	2302      	movs	r3, #2
 800d0d6:	e02d      	b.n	800d134 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2224      	movs	r2, #36	@ 0x24
 800d0e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f022 0201 	bic.w	r2, r2, #1
 800d0fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	430a      	orrs	r2, r1
 800d112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f811 	bl	800d13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2220      	movs	r2, #32
 800d126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d108      	bne.n	800d15e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2201      	movs	r2, #1
 800d158:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d15c:	e031      	b.n	800d1c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d15e:	2310      	movs	r3, #16
 800d160:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d162:	2310      	movs	r3, #16
 800d164:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	689b      	ldr	r3, [r3, #8]
 800d16c:	0e5b      	lsrs	r3, r3, #25
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	f003 0307 	and.w	r3, r3, #7
 800d174:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	0f5b      	lsrs	r3, r3, #29
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	f003 0307 	and.w	r3, r3, #7
 800d184:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d186:	7bbb      	ldrb	r3, [r7, #14]
 800d188:	7b3a      	ldrb	r2, [r7, #12]
 800d18a:	4911      	ldr	r1, [pc, #68]	@ (800d1d0 <UARTEx_SetNbDataToProcess+0x94>)
 800d18c:	5c8a      	ldrb	r2, [r1, r2]
 800d18e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d192:	7b3a      	ldrb	r2, [r7, #12]
 800d194:	490f      	ldr	r1, [pc, #60]	@ (800d1d4 <UARTEx_SetNbDataToProcess+0x98>)
 800d196:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d198:	fb93 f3f2 	sdiv	r3, r3, r2
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
 800d1a6:	7b7a      	ldrb	r2, [r7, #13]
 800d1a8:	4909      	ldr	r1, [pc, #36]	@ (800d1d0 <UARTEx_SetNbDataToProcess+0x94>)
 800d1aa:	5c8a      	ldrb	r2, [r1, r2]
 800d1ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d1b0:	7b7a      	ldrb	r2, [r7, #13]
 800d1b2:	4908      	ldr	r1, [pc, #32]	@ (800d1d4 <UARTEx_SetNbDataToProcess+0x98>)
 800d1b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1b6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d1c2:	bf00      	nop
 800d1c4:	3714      	adds	r7, #20
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	08011b58 	.word	0x08011b58
 800d1d4:	08011b60 	.word	0x08011b60

0800d1d8 <std>:
 800d1d8:	2300      	movs	r3, #0
 800d1da:	b510      	push	{r4, lr}
 800d1dc:	4604      	mov	r4, r0
 800d1de:	e9c0 3300 	strd	r3, r3, [r0]
 800d1e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1e6:	6083      	str	r3, [r0, #8]
 800d1e8:	8181      	strh	r1, [r0, #12]
 800d1ea:	6643      	str	r3, [r0, #100]	@ 0x64
 800d1ec:	81c2      	strh	r2, [r0, #14]
 800d1ee:	6183      	str	r3, [r0, #24]
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	2208      	movs	r2, #8
 800d1f4:	305c      	adds	r0, #92	@ 0x5c
 800d1f6:	f000 f914 	bl	800d422 <memset>
 800d1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d230 <std+0x58>)
 800d1fc:	6223      	str	r3, [r4, #32]
 800d1fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d234 <std+0x5c>)
 800d200:	6263      	str	r3, [r4, #36]	@ 0x24
 800d202:	4b0d      	ldr	r3, [pc, #52]	@ (800d238 <std+0x60>)
 800d204:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d206:	4b0d      	ldr	r3, [pc, #52]	@ (800d23c <std+0x64>)
 800d208:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d20a:	4b0d      	ldr	r3, [pc, #52]	@ (800d240 <std+0x68>)
 800d20c:	61e4      	str	r4, [r4, #28]
 800d20e:	429c      	cmp	r4, r3
 800d210:	d006      	beq.n	800d220 <std+0x48>
 800d212:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d216:	4294      	cmp	r4, r2
 800d218:	d002      	beq.n	800d220 <std+0x48>
 800d21a:	33d0      	adds	r3, #208	@ 0xd0
 800d21c:	429c      	cmp	r4, r3
 800d21e:	d105      	bne.n	800d22c <std+0x54>
 800d220:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d228:	f000 b974 	b.w	800d514 <__retarget_lock_init_recursive>
 800d22c:	bd10      	pop	{r4, pc}
 800d22e:	bf00      	nop
 800d230:	0800d39d 	.word	0x0800d39d
 800d234:	0800d3bf 	.word	0x0800d3bf
 800d238:	0800d3f7 	.word	0x0800d3f7
 800d23c:	0800d41b 	.word	0x0800d41b
 800d240:	240031d4 	.word	0x240031d4

0800d244 <stdio_exit_handler>:
 800d244:	4a02      	ldr	r2, [pc, #8]	@ (800d250 <stdio_exit_handler+0xc>)
 800d246:	4903      	ldr	r1, [pc, #12]	@ (800d254 <stdio_exit_handler+0x10>)
 800d248:	4803      	ldr	r0, [pc, #12]	@ (800d258 <stdio_exit_handler+0x14>)
 800d24a:	f000 b869 	b.w	800d320 <_fwalk_sglue>
 800d24e:	bf00      	nop
 800d250:	24000010 	.word	0x24000010
 800d254:	0800ef01 	.word	0x0800ef01
 800d258:	24000020 	.word	0x24000020

0800d25c <cleanup_stdio>:
 800d25c:	6841      	ldr	r1, [r0, #4]
 800d25e:	4b0c      	ldr	r3, [pc, #48]	@ (800d290 <cleanup_stdio+0x34>)
 800d260:	4299      	cmp	r1, r3
 800d262:	b510      	push	{r4, lr}
 800d264:	4604      	mov	r4, r0
 800d266:	d001      	beq.n	800d26c <cleanup_stdio+0x10>
 800d268:	f001 fe4a 	bl	800ef00 <_fclose_r>
 800d26c:	68a1      	ldr	r1, [r4, #8]
 800d26e:	4b09      	ldr	r3, [pc, #36]	@ (800d294 <cleanup_stdio+0x38>)
 800d270:	4299      	cmp	r1, r3
 800d272:	d002      	beq.n	800d27a <cleanup_stdio+0x1e>
 800d274:	4620      	mov	r0, r4
 800d276:	f001 fe43 	bl	800ef00 <_fclose_r>
 800d27a:	68e1      	ldr	r1, [r4, #12]
 800d27c:	4b06      	ldr	r3, [pc, #24]	@ (800d298 <cleanup_stdio+0x3c>)
 800d27e:	4299      	cmp	r1, r3
 800d280:	d004      	beq.n	800d28c <cleanup_stdio+0x30>
 800d282:	4620      	mov	r0, r4
 800d284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d288:	f001 be3a 	b.w	800ef00 <_fclose_r>
 800d28c:	bd10      	pop	{r4, pc}
 800d28e:	bf00      	nop
 800d290:	240031d4 	.word	0x240031d4
 800d294:	2400323c 	.word	0x2400323c
 800d298:	240032a4 	.word	0x240032a4

0800d29c <global_stdio_init.part.0>:
 800d29c:	b510      	push	{r4, lr}
 800d29e:	4b0b      	ldr	r3, [pc, #44]	@ (800d2cc <global_stdio_init.part.0+0x30>)
 800d2a0:	4c0b      	ldr	r4, [pc, #44]	@ (800d2d0 <global_stdio_init.part.0+0x34>)
 800d2a2:	4a0c      	ldr	r2, [pc, #48]	@ (800d2d4 <global_stdio_init.part.0+0x38>)
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	2104      	movs	r1, #4
 800d2ac:	f7ff ff94 	bl	800d1d8 <std>
 800d2b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	2109      	movs	r1, #9
 800d2b8:	f7ff ff8e 	bl	800d1d8 <std>
 800d2bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d2c0:	2202      	movs	r2, #2
 800d2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2c6:	2112      	movs	r1, #18
 800d2c8:	f7ff bf86 	b.w	800d1d8 <std>
 800d2cc:	2400330c 	.word	0x2400330c
 800d2d0:	240031d4 	.word	0x240031d4
 800d2d4:	0800d245 	.word	0x0800d245

0800d2d8 <__sfp_lock_acquire>:
 800d2d8:	4801      	ldr	r0, [pc, #4]	@ (800d2e0 <__sfp_lock_acquire+0x8>)
 800d2da:	f000 b91d 	b.w	800d518 <__retarget_lock_acquire_recursive>
 800d2de:	bf00      	nop
 800d2e0:	24003316 	.word	0x24003316

0800d2e4 <__sfp_lock_release>:
 800d2e4:	4801      	ldr	r0, [pc, #4]	@ (800d2ec <__sfp_lock_release+0x8>)
 800d2e6:	f000 b918 	b.w	800d51a <__retarget_lock_release_recursive>
 800d2ea:	bf00      	nop
 800d2ec:	24003316 	.word	0x24003316

0800d2f0 <__sinit>:
 800d2f0:	b510      	push	{r4, lr}
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	f7ff fff0 	bl	800d2d8 <__sfp_lock_acquire>
 800d2f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d2fa:	b11b      	cbz	r3, 800d304 <__sinit+0x14>
 800d2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d300:	f7ff bff0 	b.w	800d2e4 <__sfp_lock_release>
 800d304:	4b04      	ldr	r3, [pc, #16]	@ (800d318 <__sinit+0x28>)
 800d306:	6363      	str	r3, [r4, #52]	@ 0x34
 800d308:	4b04      	ldr	r3, [pc, #16]	@ (800d31c <__sinit+0x2c>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1f5      	bne.n	800d2fc <__sinit+0xc>
 800d310:	f7ff ffc4 	bl	800d29c <global_stdio_init.part.0>
 800d314:	e7f2      	b.n	800d2fc <__sinit+0xc>
 800d316:	bf00      	nop
 800d318:	0800d25d 	.word	0x0800d25d
 800d31c:	2400330c 	.word	0x2400330c

0800d320 <_fwalk_sglue>:
 800d320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d324:	4607      	mov	r7, r0
 800d326:	4688      	mov	r8, r1
 800d328:	4614      	mov	r4, r2
 800d32a:	2600      	movs	r6, #0
 800d32c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d330:	f1b9 0901 	subs.w	r9, r9, #1
 800d334:	d505      	bpl.n	800d342 <_fwalk_sglue+0x22>
 800d336:	6824      	ldr	r4, [r4, #0]
 800d338:	2c00      	cmp	r4, #0
 800d33a:	d1f7      	bne.n	800d32c <_fwalk_sglue+0xc>
 800d33c:	4630      	mov	r0, r6
 800d33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d342:	89ab      	ldrh	r3, [r5, #12]
 800d344:	2b01      	cmp	r3, #1
 800d346:	d907      	bls.n	800d358 <_fwalk_sglue+0x38>
 800d348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d34c:	3301      	adds	r3, #1
 800d34e:	d003      	beq.n	800d358 <_fwalk_sglue+0x38>
 800d350:	4629      	mov	r1, r5
 800d352:	4638      	mov	r0, r7
 800d354:	47c0      	blx	r8
 800d356:	4306      	orrs	r6, r0
 800d358:	3568      	adds	r5, #104	@ 0x68
 800d35a:	e7e9      	b.n	800d330 <_fwalk_sglue+0x10>

0800d35c <sprintf>:
 800d35c:	b40e      	push	{r1, r2, r3}
 800d35e:	b500      	push	{lr}
 800d360:	b09c      	sub	sp, #112	@ 0x70
 800d362:	ab1d      	add	r3, sp, #116	@ 0x74
 800d364:	9002      	str	r0, [sp, #8]
 800d366:	9006      	str	r0, [sp, #24]
 800d368:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d36c:	4809      	ldr	r0, [pc, #36]	@ (800d394 <sprintf+0x38>)
 800d36e:	9107      	str	r1, [sp, #28]
 800d370:	9104      	str	r1, [sp, #16]
 800d372:	4909      	ldr	r1, [pc, #36]	@ (800d398 <sprintf+0x3c>)
 800d374:	f853 2b04 	ldr.w	r2, [r3], #4
 800d378:	9105      	str	r1, [sp, #20]
 800d37a:	6800      	ldr	r0, [r0, #0]
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	a902      	add	r1, sp, #8
 800d380:	f000 fc3a 	bl	800dbf8 <_svfprintf_r>
 800d384:	9b02      	ldr	r3, [sp, #8]
 800d386:	2200      	movs	r2, #0
 800d388:	701a      	strb	r2, [r3, #0]
 800d38a:	b01c      	add	sp, #112	@ 0x70
 800d38c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d390:	b003      	add	sp, #12
 800d392:	4770      	bx	lr
 800d394:	2400001c 	.word	0x2400001c
 800d398:	ffff0208 	.word	0xffff0208

0800d39c <__sread>:
 800d39c:	b510      	push	{r4, lr}
 800d39e:	460c      	mov	r4, r1
 800d3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a4:	f000 f868 	bl	800d478 <_read_r>
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	bfab      	itete	ge
 800d3ac:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800d3ae:	89a3      	ldrhlt	r3, [r4, #12]
 800d3b0:	181b      	addge	r3, r3, r0
 800d3b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d3b6:	bfac      	ite	ge
 800d3b8:	6523      	strge	r3, [r4, #80]	@ 0x50
 800d3ba:	81a3      	strhlt	r3, [r4, #12]
 800d3bc:	bd10      	pop	{r4, pc}

0800d3be <__swrite>:
 800d3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c2:	461f      	mov	r7, r3
 800d3c4:	898b      	ldrh	r3, [r1, #12]
 800d3c6:	05db      	lsls	r3, r3, #23
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	4616      	mov	r6, r2
 800d3ce:	d505      	bpl.n	800d3dc <__swrite+0x1e>
 800d3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d4:	2302      	movs	r3, #2
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f000 f83c 	bl	800d454 <_lseek_r>
 800d3dc:	89a3      	ldrh	r3, [r4, #12]
 800d3de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d3e6:	81a3      	strh	r3, [r4, #12]
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	463b      	mov	r3, r7
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f2:	f000 b853 	b.w	800d49c <_write_r>

0800d3f6 <__sseek>:
 800d3f6:	b510      	push	{r4, lr}
 800d3f8:	460c      	mov	r4, r1
 800d3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3fe:	f000 f829 	bl	800d454 <_lseek_r>
 800d402:	1c43      	adds	r3, r0, #1
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	bf15      	itete	ne
 800d408:	6520      	strne	r0, [r4, #80]	@ 0x50
 800d40a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d40e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d412:	81a3      	strheq	r3, [r4, #12]
 800d414:	bf18      	it	ne
 800d416:	81a3      	strhne	r3, [r4, #12]
 800d418:	bd10      	pop	{r4, pc}

0800d41a <__sclose>:
 800d41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d41e:	f000 b809 	b.w	800d434 <_close_r>

0800d422 <memset>:
 800d422:	4402      	add	r2, r0
 800d424:	4603      	mov	r3, r0
 800d426:	4293      	cmp	r3, r2
 800d428:	d100      	bne.n	800d42c <memset+0xa>
 800d42a:	4770      	bx	lr
 800d42c:	f803 1b01 	strb.w	r1, [r3], #1
 800d430:	e7f9      	b.n	800d426 <memset+0x4>
	...

0800d434 <_close_r>:
 800d434:	b538      	push	{r3, r4, r5, lr}
 800d436:	4d06      	ldr	r5, [pc, #24]	@ (800d450 <_close_r+0x1c>)
 800d438:	2300      	movs	r3, #0
 800d43a:	4604      	mov	r4, r0
 800d43c:	4608      	mov	r0, r1
 800d43e:	602b      	str	r3, [r5, #0]
 800d440:	f7f3 ffc4 	bl	80013cc <_close>
 800d444:	1c43      	adds	r3, r0, #1
 800d446:	d102      	bne.n	800d44e <_close_r+0x1a>
 800d448:	682b      	ldr	r3, [r5, #0]
 800d44a:	b103      	cbz	r3, 800d44e <_close_r+0x1a>
 800d44c:	6023      	str	r3, [r4, #0]
 800d44e:	bd38      	pop	{r3, r4, r5, pc}
 800d450:	24003310 	.word	0x24003310

0800d454 <_lseek_r>:
 800d454:	b538      	push	{r3, r4, r5, lr}
 800d456:	4d07      	ldr	r5, [pc, #28]	@ (800d474 <_lseek_r+0x20>)
 800d458:	4604      	mov	r4, r0
 800d45a:	4608      	mov	r0, r1
 800d45c:	4611      	mov	r1, r2
 800d45e:	2200      	movs	r2, #0
 800d460:	602a      	str	r2, [r5, #0]
 800d462:	461a      	mov	r2, r3
 800d464:	f7f3 ffd9 	bl	800141a <_lseek>
 800d468:	1c43      	adds	r3, r0, #1
 800d46a:	d102      	bne.n	800d472 <_lseek_r+0x1e>
 800d46c:	682b      	ldr	r3, [r5, #0]
 800d46e:	b103      	cbz	r3, 800d472 <_lseek_r+0x1e>
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	bd38      	pop	{r3, r4, r5, pc}
 800d474:	24003310 	.word	0x24003310

0800d478 <_read_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4d07      	ldr	r5, [pc, #28]	@ (800d498 <_read_r+0x20>)
 800d47c:	4604      	mov	r4, r0
 800d47e:	4608      	mov	r0, r1
 800d480:	4611      	mov	r1, r2
 800d482:	2200      	movs	r2, #0
 800d484:	602a      	str	r2, [r5, #0]
 800d486:	461a      	mov	r2, r3
 800d488:	f7f3 ff67 	bl	800135a <_read>
 800d48c:	1c43      	adds	r3, r0, #1
 800d48e:	d102      	bne.n	800d496 <_read_r+0x1e>
 800d490:	682b      	ldr	r3, [r5, #0]
 800d492:	b103      	cbz	r3, 800d496 <_read_r+0x1e>
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	bd38      	pop	{r3, r4, r5, pc}
 800d498:	24003310 	.word	0x24003310

0800d49c <_write_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	4d07      	ldr	r5, [pc, #28]	@ (800d4bc <_write_r+0x20>)
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	4608      	mov	r0, r1
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	602a      	str	r2, [r5, #0]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	f7f3 ff72 	bl	8001394 <_write>
 800d4b0:	1c43      	adds	r3, r0, #1
 800d4b2:	d102      	bne.n	800d4ba <_write_r+0x1e>
 800d4b4:	682b      	ldr	r3, [r5, #0]
 800d4b6:	b103      	cbz	r3, 800d4ba <_write_r+0x1e>
 800d4b8:	6023      	str	r3, [r4, #0]
 800d4ba:	bd38      	pop	{r3, r4, r5, pc}
 800d4bc:	24003310 	.word	0x24003310

0800d4c0 <__errno>:
 800d4c0:	4b01      	ldr	r3, [pc, #4]	@ (800d4c8 <__errno+0x8>)
 800d4c2:	6818      	ldr	r0, [r3, #0]
 800d4c4:	4770      	bx	lr
 800d4c6:	bf00      	nop
 800d4c8:	2400001c 	.word	0x2400001c

0800d4cc <__libc_init_array>:
 800d4cc:	b570      	push	{r4, r5, r6, lr}
 800d4ce:	4d0d      	ldr	r5, [pc, #52]	@ (800d504 <__libc_init_array+0x38>)
 800d4d0:	4c0d      	ldr	r4, [pc, #52]	@ (800d508 <__libc_init_array+0x3c>)
 800d4d2:	1b64      	subs	r4, r4, r5
 800d4d4:	10a4      	asrs	r4, r4, #2
 800d4d6:	2600      	movs	r6, #0
 800d4d8:	42a6      	cmp	r6, r4
 800d4da:	d109      	bne.n	800d4f0 <__libc_init_array+0x24>
 800d4dc:	4d0b      	ldr	r5, [pc, #44]	@ (800d50c <__libc_init_array+0x40>)
 800d4de:	4c0c      	ldr	r4, [pc, #48]	@ (800d510 <__libc_init_array+0x44>)
 800d4e0:	f004 fade 	bl	8011aa0 <_init>
 800d4e4:	1b64      	subs	r4, r4, r5
 800d4e6:	10a4      	asrs	r4, r4, #2
 800d4e8:	2600      	movs	r6, #0
 800d4ea:	42a6      	cmp	r6, r4
 800d4ec:	d105      	bne.n	800d4fa <__libc_init_array+0x2e>
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4f4:	4798      	blx	r3
 800d4f6:	3601      	adds	r6, #1
 800d4f8:	e7ee      	b.n	800d4d8 <__libc_init_array+0xc>
 800d4fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4fe:	4798      	blx	r3
 800d500:	3601      	adds	r6, #1
 800d502:	e7f2      	b.n	800d4ea <__libc_init_array+0x1e>
 800d504:	08011ef8 	.word	0x08011ef8
 800d508:	08011ef8 	.word	0x08011ef8
 800d50c:	08011ef8 	.word	0x08011ef8
 800d510:	08011f00 	.word	0x08011f00

0800d514 <__retarget_lock_init_recursive>:
 800d514:	4770      	bx	lr

0800d516 <__retarget_lock_close_recursive>:
 800d516:	4770      	bx	lr

0800d518 <__retarget_lock_acquire_recursive>:
 800d518:	4770      	bx	lr

0800d51a <__retarget_lock_release_recursive>:
 800d51a:	4770      	bx	lr

0800d51c <register_fini>:
 800d51c:	4b02      	ldr	r3, [pc, #8]	@ (800d528 <register_fini+0xc>)
 800d51e:	b113      	cbz	r3, 800d526 <register_fini+0xa>
 800d520:	4802      	ldr	r0, [pc, #8]	@ (800d52c <register_fini+0x10>)
 800d522:	f000 b805 	b.w	800d530 <atexit>
 800d526:	4770      	bx	lr
 800d528:	00000000 	.word	0x00000000
 800d52c:	0800f155 	.word	0x0800f155

0800d530 <atexit>:
 800d530:	2300      	movs	r3, #0
 800d532:	4601      	mov	r1, r0
 800d534:	461a      	mov	r2, r3
 800d536:	4618      	mov	r0, r3
 800d538:	f001 be66 	b.w	800f208 <__register_exitproc>

0800d53c <_malloc_trim_r>:
 800d53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d540:	4606      	mov	r6, r0
 800d542:	2008      	movs	r0, #8
 800d544:	4689      	mov	r9, r1
 800d546:	f001 fe19 	bl	800f17c <sysconf>
 800d54a:	4f24      	ldr	r7, [pc, #144]	@ (800d5dc <_malloc_trim_r+0xa0>)
 800d54c:	4680      	mov	r8, r0
 800d54e:	4630      	mov	r0, r6
 800d550:	f000 fb44 	bl	800dbdc <__malloc_lock>
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	685d      	ldr	r5, [r3, #4]
 800d558:	f025 0503 	bic.w	r5, r5, #3
 800d55c:	f1a5 0411 	sub.w	r4, r5, #17
 800d560:	eba4 0409 	sub.w	r4, r4, r9
 800d564:	4444      	add	r4, r8
 800d566:	fbb4 f4f8 	udiv	r4, r4, r8
 800d56a:	3c01      	subs	r4, #1
 800d56c:	fb08 f404 	mul.w	r4, r8, r4
 800d570:	45a0      	cmp	r8, r4
 800d572:	dd05      	ble.n	800d580 <_malloc_trim_r+0x44>
 800d574:	4630      	mov	r0, r6
 800d576:	f000 fb37 	bl	800dbe8 <__malloc_unlock>
 800d57a:	2000      	movs	r0, #0
 800d57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d580:	2100      	movs	r1, #0
 800d582:	4630      	mov	r0, r6
 800d584:	f001 fdd6 	bl	800f134 <_sbrk_r>
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	442b      	add	r3, r5
 800d58c:	4298      	cmp	r0, r3
 800d58e:	d1f1      	bne.n	800d574 <_malloc_trim_r+0x38>
 800d590:	4261      	negs	r1, r4
 800d592:	4630      	mov	r0, r6
 800d594:	f001 fdce 	bl	800f134 <_sbrk_r>
 800d598:	3001      	adds	r0, #1
 800d59a:	d110      	bne.n	800d5be <_malloc_trim_r+0x82>
 800d59c:	2100      	movs	r1, #0
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f001 fdc8 	bl	800f134 <_sbrk_r>
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	1a83      	subs	r3, r0, r2
 800d5a8:	2b0f      	cmp	r3, #15
 800d5aa:	dde3      	ble.n	800d574 <_malloc_trim_r+0x38>
 800d5ac:	490c      	ldr	r1, [pc, #48]	@ (800d5e0 <_malloc_trim_r+0xa4>)
 800d5ae:	6809      	ldr	r1, [r1, #0]
 800d5b0:	1a40      	subs	r0, r0, r1
 800d5b2:	490c      	ldr	r1, [pc, #48]	@ (800d5e4 <_malloc_trim_r+0xa8>)
 800d5b4:	f043 0301 	orr.w	r3, r3, #1
 800d5b8:	6008      	str	r0, [r1, #0]
 800d5ba:	6053      	str	r3, [r2, #4]
 800d5bc:	e7da      	b.n	800d574 <_malloc_trim_r+0x38>
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	4a08      	ldr	r2, [pc, #32]	@ (800d5e4 <_malloc_trim_r+0xa8>)
 800d5c2:	1b2d      	subs	r5, r5, r4
 800d5c4:	f045 0501 	orr.w	r5, r5, #1
 800d5c8:	605d      	str	r5, [r3, #4]
 800d5ca:	6813      	ldr	r3, [r2, #0]
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	1b1b      	subs	r3, r3, r4
 800d5d0:	6013      	str	r3, [r2, #0]
 800d5d2:	f000 fb09 	bl	800dbe8 <__malloc_unlock>
 800d5d6:	2001      	movs	r0, #1
 800d5d8:	e7d0      	b.n	800d57c <_malloc_trim_r+0x40>
 800d5da:	bf00      	nop
 800d5dc:	2400014c 	.word	0x2400014c
 800d5e0:	24000144 	.word	0x24000144
 800d5e4:	2400331c 	.word	0x2400331c

0800d5e8 <_free_r>:
 800d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	460f      	mov	r7, r1
 800d5ee:	2900      	cmp	r1, #0
 800d5f0:	f000 80b1 	beq.w	800d756 <_free_r+0x16e>
 800d5f4:	f000 faf2 	bl	800dbdc <__malloc_lock>
 800d5f8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d5fc:	4d56      	ldr	r5, [pc, #344]	@ (800d758 <_free_r+0x170>)
 800d5fe:	f022 0001 	bic.w	r0, r2, #1
 800d602:	f1a7 0308 	sub.w	r3, r7, #8
 800d606:	eb03 0c00 	add.w	ip, r3, r0
 800d60a:	68a9      	ldr	r1, [r5, #8]
 800d60c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800d610:	4561      	cmp	r1, ip
 800d612:	f026 0603 	bic.w	r6, r6, #3
 800d616:	f002 0201 	and.w	r2, r2, #1
 800d61a:	d11b      	bne.n	800d654 <_free_r+0x6c>
 800d61c:	4406      	add	r6, r0
 800d61e:	b93a      	cbnz	r2, 800d630 <_free_r+0x48>
 800d620:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800d624:	1a9b      	subs	r3, r3, r2
 800d626:	4416      	add	r6, r2
 800d628:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800d62c:	60ca      	str	r2, [r1, #12]
 800d62e:	6091      	str	r1, [r2, #8]
 800d630:	f046 0201 	orr.w	r2, r6, #1
 800d634:	605a      	str	r2, [r3, #4]
 800d636:	60ab      	str	r3, [r5, #8]
 800d638:	4b48      	ldr	r3, [pc, #288]	@ (800d75c <_free_r+0x174>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	42b3      	cmp	r3, r6
 800d63e:	d804      	bhi.n	800d64a <_free_r+0x62>
 800d640:	4b47      	ldr	r3, [pc, #284]	@ (800d760 <_free_r+0x178>)
 800d642:	4620      	mov	r0, r4
 800d644:	6819      	ldr	r1, [r3, #0]
 800d646:	f7ff ff79 	bl	800d53c <_malloc_trim_r>
 800d64a:	4620      	mov	r0, r4
 800d64c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d650:	f000 baca 	b.w	800dbe8 <__malloc_unlock>
 800d654:	f8cc 6004 	str.w	r6, [ip, #4]
 800d658:	2a00      	cmp	r2, #0
 800d65a:	d138      	bne.n	800d6ce <_free_r+0xe6>
 800d65c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800d660:	1a5b      	subs	r3, r3, r1
 800d662:	4408      	add	r0, r1
 800d664:	6899      	ldr	r1, [r3, #8]
 800d666:	f105 0708 	add.w	r7, r5, #8
 800d66a:	42b9      	cmp	r1, r7
 800d66c:	d031      	beq.n	800d6d2 <_free_r+0xea>
 800d66e:	68df      	ldr	r7, [r3, #12]
 800d670:	60cf      	str	r7, [r1, #12]
 800d672:	60b9      	str	r1, [r7, #8]
 800d674:	eb0c 0106 	add.w	r1, ip, r6
 800d678:	6849      	ldr	r1, [r1, #4]
 800d67a:	07c9      	lsls	r1, r1, #31
 800d67c:	d40b      	bmi.n	800d696 <_free_r+0xae>
 800d67e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800d682:	4430      	add	r0, r6
 800d684:	bb3a      	cbnz	r2, 800d6d6 <_free_r+0xee>
 800d686:	4e37      	ldr	r6, [pc, #220]	@ (800d764 <_free_r+0x17c>)
 800d688:	42b1      	cmp	r1, r6
 800d68a:	d124      	bne.n	800d6d6 <_free_r+0xee>
 800d68c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800d690:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800d694:	2201      	movs	r2, #1
 800d696:	f040 0101 	orr.w	r1, r0, #1
 800d69a:	6059      	str	r1, [r3, #4]
 800d69c:	5018      	str	r0, [r3, r0]
 800d69e:	2a00      	cmp	r2, #0
 800d6a0:	d1d3      	bne.n	800d64a <_free_r+0x62>
 800d6a2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800d6a6:	d21b      	bcs.n	800d6e0 <_free_r+0xf8>
 800d6a8:	08c2      	lsrs	r2, r0, #3
 800d6aa:	2101      	movs	r1, #1
 800d6ac:	0940      	lsrs	r0, r0, #5
 800d6ae:	4081      	lsls	r1, r0
 800d6b0:	6868      	ldr	r0, [r5, #4]
 800d6b2:	3201      	adds	r2, #1
 800d6b4:	4301      	orrs	r1, r0
 800d6b6:	6069      	str	r1, [r5, #4]
 800d6b8:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800d6bc:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800d6c0:	3908      	subs	r1, #8
 800d6c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d6c6:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800d6ca:	60c3      	str	r3, [r0, #12]
 800d6cc:	e7bd      	b.n	800d64a <_free_r+0x62>
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	e7d0      	b.n	800d674 <_free_r+0x8c>
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	e7ce      	b.n	800d674 <_free_r+0x8c>
 800d6d6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800d6da:	60ce      	str	r6, [r1, #12]
 800d6dc:	60b1      	str	r1, [r6, #8]
 800d6de:	e7da      	b.n	800d696 <_free_r+0xae>
 800d6e0:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800d6e4:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800d6e8:	d214      	bcs.n	800d714 <_free_r+0x12c>
 800d6ea:	0982      	lsrs	r2, r0, #6
 800d6ec:	3238      	adds	r2, #56	@ 0x38
 800d6ee:	1c51      	adds	r1, r2, #1
 800d6f0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800d6f4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800d6f8:	428e      	cmp	r6, r1
 800d6fa:	d125      	bne.n	800d748 <_free_r+0x160>
 800d6fc:	2001      	movs	r0, #1
 800d6fe:	1092      	asrs	r2, r2, #2
 800d700:	fa00 f202 	lsl.w	r2, r0, r2
 800d704:	6868      	ldr	r0, [r5, #4]
 800d706:	4302      	orrs	r2, r0
 800d708:	606a      	str	r2, [r5, #4]
 800d70a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800d70e:	60b3      	str	r3, [r6, #8]
 800d710:	60cb      	str	r3, [r1, #12]
 800d712:	e79a      	b.n	800d64a <_free_r+0x62>
 800d714:	2a14      	cmp	r2, #20
 800d716:	d801      	bhi.n	800d71c <_free_r+0x134>
 800d718:	325b      	adds	r2, #91	@ 0x5b
 800d71a:	e7e8      	b.n	800d6ee <_free_r+0x106>
 800d71c:	2a54      	cmp	r2, #84	@ 0x54
 800d71e:	d802      	bhi.n	800d726 <_free_r+0x13e>
 800d720:	0b02      	lsrs	r2, r0, #12
 800d722:	326e      	adds	r2, #110	@ 0x6e
 800d724:	e7e3      	b.n	800d6ee <_free_r+0x106>
 800d726:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800d72a:	d802      	bhi.n	800d732 <_free_r+0x14a>
 800d72c:	0bc2      	lsrs	r2, r0, #15
 800d72e:	3277      	adds	r2, #119	@ 0x77
 800d730:	e7dd      	b.n	800d6ee <_free_r+0x106>
 800d732:	f240 5154 	movw	r1, #1364	@ 0x554
 800d736:	428a      	cmp	r2, r1
 800d738:	bf9a      	itte	ls
 800d73a:	0c82      	lsrls	r2, r0, #18
 800d73c:	327c      	addls	r2, #124	@ 0x7c
 800d73e:	227e      	movhi	r2, #126	@ 0x7e
 800d740:	e7d5      	b.n	800d6ee <_free_r+0x106>
 800d742:	6889      	ldr	r1, [r1, #8]
 800d744:	428e      	cmp	r6, r1
 800d746:	d004      	beq.n	800d752 <_free_r+0x16a>
 800d748:	684a      	ldr	r2, [r1, #4]
 800d74a:	f022 0203 	bic.w	r2, r2, #3
 800d74e:	4282      	cmp	r2, r0
 800d750:	d8f7      	bhi.n	800d742 <_free_r+0x15a>
 800d752:	68ce      	ldr	r6, [r1, #12]
 800d754:	e7d9      	b.n	800d70a <_free_r+0x122>
 800d756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d758:	2400014c 	.word	0x2400014c
 800d75c:	24000148 	.word	0x24000148
 800d760:	2400334c 	.word	0x2400334c
 800d764:	24000154 	.word	0x24000154

0800d768 <_malloc_r>:
 800d768:	f101 030b 	add.w	r3, r1, #11
 800d76c:	2b16      	cmp	r3, #22
 800d76e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d772:	4605      	mov	r5, r0
 800d774:	d906      	bls.n	800d784 <_malloc_r+0x1c>
 800d776:	f033 0707 	bics.w	r7, r3, #7
 800d77a:	d504      	bpl.n	800d786 <_malloc_r+0x1e>
 800d77c:	230c      	movs	r3, #12
 800d77e:	602b      	str	r3, [r5, #0]
 800d780:	2400      	movs	r4, #0
 800d782:	e1a3      	b.n	800dacc <_malloc_r+0x364>
 800d784:	2710      	movs	r7, #16
 800d786:	42b9      	cmp	r1, r7
 800d788:	d8f8      	bhi.n	800d77c <_malloc_r+0x14>
 800d78a:	4628      	mov	r0, r5
 800d78c:	f000 fa26 	bl	800dbdc <__malloc_lock>
 800d790:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800d794:	4eaf      	ldr	r6, [pc, #700]	@ (800da54 <_malloc_r+0x2ec>)
 800d796:	d237      	bcs.n	800d808 <_malloc_r+0xa0>
 800d798:	f107 0208 	add.w	r2, r7, #8
 800d79c:	4432      	add	r2, r6
 800d79e:	f1a2 0108 	sub.w	r1, r2, #8
 800d7a2:	6854      	ldr	r4, [r2, #4]
 800d7a4:	428c      	cmp	r4, r1
 800d7a6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800d7aa:	d102      	bne.n	800d7b2 <_malloc_r+0x4a>
 800d7ac:	68d4      	ldr	r4, [r2, #12]
 800d7ae:	42a2      	cmp	r2, r4
 800d7b0:	d010      	beq.n	800d7d4 <_malloc_r+0x6c>
 800d7b2:	6863      	ldr	r3, [r4, #4]
 800d7b4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800d7b8:	f023 0303 	bic.w	r3, r3, #3
 800d7bc:	60ca      	str	r2, [r1, #12]
 800d7be:	4423      	add	r3, r4
 800d7c0:	6091      	str	r1, [r2, #8]
 800d7c2:	685a      	ldr	r2, [r3, #4]
 800d7c4:	f042 0201 	orr.w	r2, r2, #1
 800d7c8:	605a      	str	r2, [r3, #4]
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	f000 fa0c 	bl	800dbe8 <__malloc_unlock>
 800d7d0:	3408      	adds	r4, #8
 800d7d2:	e17b      	b.n	800dacc <_malloc_r+0x364>
 800d7d4:	3302      	adds	r3, #2
 800d7d6:	6934      	ldr	r4, [r6, #16]
 800d7d8:	499f      	ldr	r1, [pc, #636]	@ (800da58 <_malloc_r+0x2f0>)
 800d7da:	428c      	cmp	r4, r1
 800d7dc:	d077      	beq.n	800d8ce <_malloc_r+0x166>
 800d7de:	6862      	ldr	r2, [r4, #4]
 800d7e0:	f022 0c03 	bic.w	ip, r2, #3
 800d7e4:	ebac 0007 	sub.w	r0, ip, r7
 800d7e8:	280f      	cmp	r0, #15
 800d7ea:	dd48      	ble.n	800d87e <_malloc_r+0x116>
 800d7ec:	19e2      	adds	r2, r4, r7
 800d7ee:	f040 0301 	orr.w	r3, r0, #1
 800d7f2:	f047 0701 	orr.w	r7, r7, #1
 800d7f6:	6067      	str	r7, [r4, #4]
 800d7f8:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800d7fc:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800d800:	6053      	str	r3, [r2, #4]
 800d802:	f844 000c 	str.w	r0, [r4, ip]
 800d806:	e7e0      	b.n	800d7ca <_malloc_r+0x62>
 800d808:	0a7b      	lsrs	r3, r7, #9
 800d80a:	d02a      	beq.n	800d862 <_malloc_r+0xfa>
 800d80c:	2b04      	cmp	r3, #4
 800d80e:	d812      	bhi.n	800d836 <_malloc_r+0xce>
 800d810:	09bb      	lsrs	r3, r7, #6
 800d812:	3338      	adds	r3, #56	@ 0x38
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800d81a:	f1a2 0c08 	sub.w	ip, r2, #8
 800d81e:	6854      	ldr	r4, [r2, #4]
 800d820:	4564      	cmp	r4, ip
 800d822:	d006      	beq.n	800d832 <_malloc_r+0xca>
 800d824:	6862      	ldr	r2, [r4, #4]
 800d826:	f022 0203 	bic.w	r2, r2, #3
 800d82a:	1bd0      	subs	r0, r2, r7
 800d82c:	280f      	cmp	r0, #15
 800d82e:	dd1c      	ble.n	800d86a <_malloc_r+0x102>
 800d830:	3b01      	subs	r3, #1
 800d832:	3301      	adds	r3, #1
 800d834:	e7cf      	b.n	800d7d6 <_malloc_r+0x6e>
 800d836:	2b14      	cmp	r3, #20
 800d838:	d801      	bhi.n	800d83e <_malloc_r+0xd6>
 800d83a:	335b      	adds	r3, #91	@ 0x5b
 800d83c:	e7ea      	b.n	800d814 <_malloc_r+0xac>
 800d83e:	2b54      	cmp	r3, #84	@ 0x54
 800d840:	d802      	bhi.n	800d848 <_malloc_r+0xe0>
 800d842:	0b3b      	lsrs	r3, r7, #12
 800d844:	336e      	adds	r3, #110	@ 0x6e
 800d846:	e7e5      	b.n	800d814 <_malloc_r+0xac>
 800d848:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800d84c:	d802      	bhi.n	800d854 <_malloc_r+0xec>
 800d84e:	0bfb      	lsrs	r3, r7, #15
 800d850:	3377      	adds	r3, #119	@ 0x77
 800d852:	e7df      	b.n	800d814 <_malloc_r+0xac>
 800d854:	f240 5254 	movw	r2, #1364	@ 0x554
 800d858:	4293      	cmp	r3, r2
 800d85a:	d804      	bhi.n	800d866 <_malloc_r+0xfe>
 800d85c:	0cbb      	lsrs	r3, r7, #18
 800d85e:	337c      	adds	r3, #124	@ 0x7c
 800d860:	e7d8      	b.n	800d814 <_malloc_r+0xac>
 800d862:	233f      	movs	r3, #63	@ 0x3f
 800d864:	e7d6      	b.n	800d814 <_malloc_r+0xac>
 800d866:	237e      	movs	r3, #126	@ 0x7e
 800d868:	e7d4      	b.n	800d814 <_malloc_r+0xac>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	68e1      	ldr	r1, [r4, #12]
 800d86e:	db04      	blt.n	800d87a <_malloc_r+0x112>
 800d870:	68a3      	ldr	r3, [r4, #8]
 800d872:	60d9      	str	r1, [r3, #12]
 800d874:	608b      	str	r3, [r1, #8]
 800d876:	18a3      	adds	r3, r4, r2
 800d878:	e7a3      	b.n	800d7c2 <_malloc_r+0x5a>
 800d87a:	460c      	mov	r4, r1
 800d87c:	e7d0      	b.n	800d820 <_malloc_r+0xb8>
 800d87e:	2800      	cmp	r0, #0
 800d880:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800d884:	db07      	blt.n	800d896 <_malloc_r+0x12e>
 800d886:	44a4      	add	ip, r4
 800d888:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800d88c:	f043 0301 	orr.w	r3, r3, #1
 800d890:	f8cc 3004 	str.w	r3, [ip, #4]
 800d894:	e799      	b.n	800d7ca <_malloc_r+0x62>
 800d896:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800d89a:	6870      	ldr	r0, [r6, #4]
 800d89c:	f080 8095 	bcs.w	800d9ca <_malloc_r+0x262>
 800d8a0:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800d8a4:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800d8a8:	f04f 0c01 	mov.w	ip, #1
 800d8ac:	3201      	adds	r2, #1
 800d8ae:	fa0c fc0e 	lsl.w	ip, ip, lr
 800d8b2:	ea4c 0000 	orr.w	r0, ip, r0
 800d8b6:	6070      	str	r0, [r6, #4]
 800d8b8:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800d8bc:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800d8c0:	3808      	subs	r0, #8
 800d8c2:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800d8c6:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800d8ca:	f8cc 400c 	str.w	r4, [ip, #12]
 800d8ce:	1098      	asrs	r0, r3, #2
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	4082      	lsls	r2, r0
 800d8d4:	6870      	ldr	r0, [r6, #4]
 800d8d6:	4290      	cmp	r0, r2
 800d8d8:	d326      	bcc.n	800d928 <_malloc_r+0x1c0>
 800d8da:	4210      	tst	r0, r2
 800d8dc:	d106      	bne.n	800d8ec <_malloc_r+0x184>
 800d8de:	f023 0303 	bic.w	r3, r3, #3
 800d8e2:	0052      	lsls	r2, r2, #1
 800d8e4:	4210      	tst	r0, r2
 800d8e6:	f103 0304 	add.w	r3, r3, #4
 800d8ea:	d0fa      	beq.n	800d8e2 <_malloc_r+0x17a>
 800d8ec:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800d8f0:	46c1      	mov	r9, r8
 800d8f2:	469e      	mov	lr, r3
 800d8f4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800d8f8:	454c      	cmp	r4, r9
 800d8fa:	f040 80b9 	bne.w	800da70 <_malloc_r+0x308>
 800d8fe:	f10e 0e01 	add.w	lr, lr, #1
 800d902:	f01e 0f03 	tst.w	lr, #3
 800d906:	f109 0908 	add.w	r9, r9, #8
 800d90a:	d1f3      	bne.n	800d8f4 <_malloc_r+0x18c>
 800d90c:	0798      	lsls	r0, r3, #30
 800d90e:	f040 80e3 	bne.w	800dad8 <_malloc_r+0x370>
 800d912:	6873      	ldr	r3, [r6, #4]
 800d914:	ea23 0302 	bic.w	r3, r3, r2
 800d918:	6073      	str	r3, [r6, #4]
 800d91a:	6870      	ldr	r0, [r6, #4]
 800d91c:	0052      	lsls	r2, r2, #1
 800d91e:	4290      	cmp	r0, r2
 800d920:	d302      	bcc.n	800d928 <_malloc_r+0x1c0>
 800d922:	2a00      	cmp	r2, #0
 800d924:	f040 80e5 	bne.w	800daf2 <_malloc_r+0x38a>
 800d928:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800d92c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d930:	f023 0903 	bic.w	r9, r3, #3
 800d934:	45b9      	cmp	r9, r7
 800d936:	d304      	bcc.n	800d942 <_malloc_r+0x1da>
 800d938:	eba9 0207 	sub.w	r2, r9, r7
 800d93c:	2a0f      	cmp	r2, #15
 800d93e:	f300 8141 	bgt.w	800dbc4 <_malloc_r+0x45c>
 800d942:	4b46      	ldr	r3, [pc, #280]	@ (800da5c <_malloc_r+0x2f4>)
 800d944:	6819      	ldr	r1, [r3, #0]
 800d946:	3110      	adds	r1, #16
 800d948:	4439      	add	r1, r7
 800d94a:	2008      	movs	r0, #8
 800d94c:	9101      	str	r1, [sp, #4]
 800d94e:	f001 fc15 	bl	800f17c <sysconf>
 800d952:	4a43      	ldr	r2, [pc, #268]	@ (800da60 <_malloc_r+0x2f8>)
 800d954:	9901      	ldr	r1, [sp, #4]
 800d956:	6813      	ldr	r3, [r2, #0]
 800d958:	3301      	adds	r3, #1
 800d95a:	bf1f      	itttt	ne
 800d95c:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 800d960:	1809      	addne	r1, r1, r0
 800d962:	4243      	negne	r3, r0
 800d964:	4019      	andne	r1, r3
 800d966:	4680      	mov	r8, r0
 800d968:	4628      	mov	r0, r5
 800d96a:	9101      	str	r1, [sp, #4]
 800d96c:	f001 fbe2 	bl	800f134 <_sbrk_r>
 800d970:	1c42      	adds	r2, r0, #1
 800d972:	eb0a 0b09 	add.w	fp, sl, r9
 800d976:	4604      	mov	r4, r0
 800d978:	f000 80f7 	beq.w	800db6a <_malloc_r+0x402>
 800d97c:	4583      	cmp	fp, r0
 800d97e:	9901      	ldr	r1, [sp, #4]
 800d980:	4a37      	ldr	r2, [pc, #220]	@ (800da60 <_malloc_r+0x2f8>)
 800d982:	d902      	bls.n	800d98a <_malloc_r+0x222>
 800d984:	45b2      	cmp	sl, r6
 800d986:	f040 80f0 	bne.w	800db6a <_malloc_r+0x402>
 800d98a:	4b36      	ldr	r3, [pc, #216]	@ (800da64 <_malloc_r+0x2fc>)
 800d98c:	6818      	ldr	r0, [r3, #0]
 800d98e:	45a3      	cmp	fp, r4
 800d990:	eb00 0e01 	add.w	lr, r0, r1
 800d994:	f8c3 e000 	str.w	lr, [r3]
 800d998:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800d99c:	f040 80ab 	bne.w	800daf6 <_malloc_r+0x38e>
 800d9a0:	ea1b 0f0c 	tst.w	fp, ip
 800d9a4:	f040 80a7 	bne.w	800daf6 <_malloc_r+0x38e>
 800d9a8:	68b2      	ldr	r2, [r6, #8]
 800d9aa:	4449      	add	r1, r9
 800d9ac:	f041 0101 	orr.w	r1, r1, #1
 800d9b0:	6051      	str	r1, [r2, #4]
 800d9b2:	4a2d      	ldr	r2, [pc, #180]	@ (800da68 <_malloc_r+0x300>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	6811      	ldr	r1, [r2, #0]
 800d9b8:	428b      	cmp	r3, r1
 800d9ba:	bf88      	it	hi
 800d9bc:	6013      	strhi	r3, [r2, #0]
 800d9be:	4a2b      	ldr	r2, [pc, #172]	@ (800da6c <_malloc_r+0x304>)
 800d9c0:	6811      	ldr	r1, [r2, #0]
 800d9c2:	428b      	cmp	r3, r1
 800d9c4:	bf88      	it	hi
 800d9c6:	6013      	strhi	r3, [r2, #0]
 800d9c8:	e0cf      	b.n	800db6a <_malloc_r+0x402>
 800d9ca:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800d9ce:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800d9d2:	d218      	bcs.n	800da06 <_malloc_r+0x29e>
 800d9d4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800d9d8:	3238      	adds	r2, #56	@ 0x38
 800d9da:	f102 0e01 	add.w	lr, r2, #1
 800d9de:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800d9e2:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800d9e6:	45f0      	cmp	r8, lr
 800d9e8:	d12b      	bne.n	800da42 <_malloc_r+0x2da>
 800d9ea:	1092      	asrs	r2, r2, #2
 800d9ec:	f04f 0c01 	mov.w	ip, #1
 800d9f0:	fa0c f202 	lsl.w	r2, ip, r2
 800d9f4:	4302      	orrs	r2, r0
 800d9f6:	6072      	str	r2, [r6, #4]
 800d9f8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800d9fc:	f8c8 4008 	str.w	r4, [r8, #8]
 800da00:	f8ce 400c 	str.w	r4, [lr, #12]
 800da04:	e763      	b.n	800d8ce <_malloc_r+0x166>
 800da06:	2a14      	cmp	r2, #20
 800da08:	d801      	bhi.n	800da0e <_malloc_r+0x2a6>
 800da0a:	325b      	adds	r2, #91	@ 0x5b
 800da0c:	e7e5      	b.n	800d9da <_malloc_r+0x272>
 800da0e:	2a54      	cmp	r2, #84	@ 0x54
 800da10:	d803      	bhi.n	800da1a <_malloc_r+0x2b2>
 800da12:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800da16:	326e      	adds	r2, #110	@ 0x6e
 800da18:	e7df      	b.n	800d9da <_malloc_r+0x272>
 800da1a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800da1e:	d803      	bhi.n	800da28 <_malloc_r+0x2c0>
 800da20:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800da24:	3277      	adds	r2, #119	@ 0x77
 800da26:	e7d8      	b.n	800d9da <_malloc_r+0x272>
 800da28:	f240 5e54 	movw	lr, #1364	@ 0x554
 800da2c:	4572      	cmp	r2, lr
 800da2e:	bf9a      	itte	ls
 800da30:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800da34:	327c      	addls	r2, #124	@ 0x7c
 800da36:	227e      	movhi	r2, #126	@ 0x7e
 800da38:	e7cf      	b.n	800d9da <_malloc_r+0x272>
 800da3a:	f8de e008 	ldr.w	lr, [lr, #8]
 800da3e:	45f0      	cmp	r8, lr
 800da40:	d005      	beq.n	800da4e <_malloc_r+0x2e6>
 800da42:	f8de 2004 	ldr.w	r2, [lr, #4]
 800da46:	f022 0203 	bic.w	r2, r2, #3
 800da4a:	4562      	cmp	r2, ip
 800da4c:	d8f5      	bhi.n	800da3a <_malloc_r+0x2d2>
 800da4e:	f8de 800c 	ldr.w	r8, [lr, #12]
 800da52:	e7d1      	b.n	800d9f8 <_malloc_r+0x290>
 800da54:	2400014c 	.word	0x2400014c
 800da58:	24000154 	.word	0x24000154
 800da5c:	2400334c 	.word	0x2400334c
 800da60:	24000144 	.word	0x24000144
 800da64:	2400331c 	.word	0x2400331c
 800da68:	24003348 	.word	0x24003348
 800da6c:	24003344 	.word	0x24003344
 800da70:	6860      	ldr	r0, [r4, #4]
 800da72:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800da76:	f020 0003 	bic.w	r0, r0, #3
 800da7a:	eba0 0a07 	sub.w	sl, r0, r7
 800da7e:	f1ba 0f0f 	cmp.w	sl, #15
 800da82:	dd12      	ble.n	800daaa <_malloc_r+0x342>
 800da84:	68a3      	ldr	r3, [r4, #8]
 800da86:	19e2      	adds	r2, r4, r7
 800da88:	f047 0701 	orr.w	r7, r7, #1
 800da8c:	6067      	str	r7, [r4, #4]
 800da8e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800da92:	f8cc 3008 	str.w	r3, [ip, #8]
 800da96:	f04a 0301 	orr.w	r3, sl, #1
 800da9a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800da9e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800daa2:	6053      	str	r3, [r2, #4]
 800daa4:	f844 a000 	str.w	sl, [r4, r0]
 800daa8:	e68f      	b.n	800d7ca <_malloc_r+0x62>
 800daaa:	f1ba 0f00 	cmp.w	sl, #0
 800daae:	db11      	blt.n	800dad4 <_malloc_r+0x36c>
 800dab0:	4420      	add	r0, r4
 800dab2:	6843      	ldr	r3, [r0, #4]
 800dab4:	f043 0301 	orr.w	r3, r3, #1
 800dab8:	6043      	str	r3, [r0, #4]
 800daba:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800dabe:	4628      	mov	r0, r5
 800dac0:	f8c3 c00c 	str.w	ip, [r3, #12]
 800dac4:	f8cc 3008 	str.w	r3, [ip, #8]
 800dac8:	f000 f88e 	bl	800dbe8 <__malloc_unlock>
 800dacc:	4620      	mov	r0, r4
 800dace:	b003      	add	sp, #12
 800dad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad4:	4664      	mov	r4, ip
 800dad6:	e70f      	b.n	800d8f8 <_malloc_r+0x190>
 800dad8:	f858 0908 	ldr.w	r0, [r8], #-8
 800dadc:	4540      	cmp	r0, r8
 800dade:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800dae2:	f43f af13 	beq.w	800d90c <_malloc_r+0x1a4>
 800dae6:	e718      	b.n	800d91a <_malloc_r+0x1b2>
 800dae8:	3304      	adds	r3, #4
 800daea:	0052      	lsls	r2, r2, #1
 800daec:	4210      	tst	r0, r2
 800daee:	d0fb      	beq.n	800dae8 <_malloc_r+0x380>
 800daf0:	e6fc      	b.n	800d8ec <_malloc_r+0x184>
 800daf2:	4673      	mov	r3, lr
 800daf4:	e7fa      	b.n	800daec <_malloc_r+0x384>
 800daf6:	6810      	ldr	r0, [r2, #0]
 800daf8:	3001      	adds	r0, #1
 800dafa:	bf1b      	ittet	ne
 800dafc:	eba4 0b0b 	subne.w	fp, r4, fp
 800db00:	eb0b 020e 	addne.w	r2, fp, lr
 800db04:	6014      	streq	r4, [r2, #0]
 800db06:	601a      	strne	r2, [r3, #0]
 800db08:	f014 0b07 	ands.w	fp, r4, #7
 800db0c:	bf1a      	itte	ne
 800db0e:	f1cb 0008 	rsbne	r0, fp, #8
 800db12:	1824      	addne	r4, r4, r0
 800db14:	4658      	moveq	r0, fp
 800db16:	1862      	adds	r2, r4, r1
 800db18:	ea02 010c 	and.w	r1, r2, ip
 800db1c:	4480      	add	r8, r0
 800db1e:	eba8 0801 	sub.w	r8, r8, r1
 800db22:	ea08 080c 	and.w	r8, r8, ip
 800db26:	4641      	mov	r1, r8
 800db28:	4628      	mov	r0, r5
 800db2a:	9201      	str	r2, [sp, #4]
 800db2c:	f001 fb02 	bl	800f134 <_sbrk_r>
 800db30:	1c43      	adds	r3, r0, #1
 800db32:	9a01      	ldr	r2, [sp, #4]
 800db34:	4b28      	ldr	r3, [pc, #160]	@ (800dbd8 <_malloc_r+0x470>)
 800db36:	d107      	bne.n	800db48 <_malloc_r+0x3e0>
 800db38:	f1bb 0f00 	cmp.w	fp, #0
 800db3c:	d023      	beq.n	800db86 <_malloc_r+0x41e>
 800db3e:	f1ab 0008 	sub.w	r0, fp, #8
 800db42:	4410      	add	r0, r2
 800db44:	f04f 0800 	mov.w	r8, #0
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	60b4      	str	r4, [r6, #8]
 800db4c:	1b00      	subs	r0, r0, r4
 800db4e:	4440      	add	r0, r8
 800db50:	4442      	add	r2, r8
 800db52:	f040 0001 	orr.w	r0, r0, #1
 800db56:	45b2      	cmp	sl, r6
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	6060      	str	r0, [r4, #4]
 800db5c:	f43f af29 	beq.w	800d9b2 <_malloc_r+0x24a>
 800db60:	f1b9 0f0f 	cmp.w	r9, #15
 800db64:	d812      	bhi.n	800db8c <_malloc_r+0x424>
 800db66:	2301      	movs	r3, #1
 800db68:	6063      	str	r3, [r4, #4]
 800db6a:	68b3      	ldr	r3, [r6, #8]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	f023 0303 	bic.w	r3, r3, #3
 800db72:	42bb      	cmp	r3, r7
 800db74:	eba3 0207 	sub.w	r2, r3, r7
 800db78:	d301      	bcc.n	800db7e <_malloc_r+0x416>
 800db7a:	2a0f      	cmp	r2, #15
 800db7c:	dc22      	bgt.n	800dbc4 <_malloc_r+0x45c>
 800db7e:	4628      	mov	r0, r5
 800db80:	f000 f832 	bl	800dbe8 <__malloc_unlock>
 800db84:	e5fc      	b.n	800d780 <_malloc_r+0x18>
 800db86:	4610      	mov	r0, r2
 800db88:	46d8      	mov	r8, fp
 800db8a:	e7dd      	b.n	800db48 <_malloc_r+0x3e0>
 800db8c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800db90:	f1a9 090c 	sub.w	r9, r9, #12
 800db94:	f029 0907 	bic.w	r9, r9, #7
 800db98:	f002 0201 	and.w	r2, r2, #1
 800db9c:	ea42 0209 	orr.w	r2, r2, r9
 800dba0:	f8ca 2004 	str.w	r2, [sl, #4]
 800dba4:	2105      	movs	r1, #5
 800dba6:	eb0a 0209 	add.w	r2, sl, r9
 800dbaa:	f1b9 0f0f 	cmp.w	r9, #15
 800dbae:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800dbb2:	f67f aefe 	bls.w	800d9b2 <_malloc_r+0x24a>
 800dbb6:	f10a 0108 	add.w	r1, sl, #8
 800dbba:	4628      	mov	r0, r5
 800dbbc:	f7ff fd14 	bl	800d5e8 <_free_r>
 800dbc0:	4b05      	ldr	r3, [pc, #20]	@ (800dbd8 <_malloc_r+0x470>)
 800dbc2:	e6f6      	b.n	800d9b2 <_malloc_r+0x24a>
 800dbc4:	68b4      	ldr	r4, [r6, #8]
 800dbc6:	f047 0301 	orr.w	r3, r7, #1
 800dbca:	4427      	add	r7, r4
 800dbcc:	f042 0201 	orr.w	r2, r2, #1
 800dbd0:	6063      	str	r3, [r4, #4]
 800dbd2:	60b7      	str	r7, [r6, #8]
 800dbd4:	607a      	str	r2, [r7, #4]
 800dbd6:	e5f8      	b.n	800d7ca <_malloc_r+0x62>
 800dbd8:	2400331c 	.word	0x2400331c

0800dbdc <__malloc_lock>:
 800dbdc:	4801      	ldr	r0, [pc, #4]	@ (800dbe4 <__malloc_lock+0x8>)
 800dbde:	f7ff bc9b 	b.w	800d518 <__retarget_lock_acquire_recursive>
 800dbe2:	bf00      	nop
 800dbe4:	24003314 	.word	0x24003314

0800dbe8 <__malloc_unlock>:
 800dbe8:	4801      	ldr	r0, [pc, #4]	@ (800dbf0 <__malloc_unlock+0x8>)
 800dbea:	f7ff bc96 	b.w	800d51a <__retarget_lock_release_recursive>
 800dbee:	bf00      	nop
 800dbf0:	24003314 	.word	0x24003314
 800dbf4:	00000000 	.word	0x00000000

0800dbf8 <_svfprintf_r>:
 800dbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfc:	ed2d 8b04 	vpush	{d8-d9}
 800dc00:	b0cb      	sub	sp, #300	@ 0x12c
 800dc02:	468a      	mov	sl, r1
 800dc04:	4691      	mov	r9, r2
 800dc06:	461e      	mov	r6, r3
 800dc08:	9002      	str	r0, [sp, #8]
 800dc0a:	f001 fa8f 	bl	800f12c <_localeconv_r>
 800dc0e:	6803      	ldr	r3, [r0, #0]
 800dc10:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7f2 fbb4 	bl	8000380 <strlen>
 800dc18:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800dc1c:	9009      	str	r0, [sp, #36]	@ 0x24
 800dc1e:	061c      	lsls	r4, r3, #24
 800dc20:	d515      	bpl.n	800dc4e <_svfprintf_r+0x56>
 800dc22:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dc26:	b993      	cbnz	r3, 800dc4e <_svfprintf_r+0x56>
 800dc28:	9802      	ldr	r0, [sp, #8]
 800dc2a:	2140      	movs	r1, #64	@ 0x40
 800dc2c:	f7ff fd9c 	bl	800d768 <_malloc_r>
 800dc30:	f8ca 0000 	str.w	r0, [sl]
 800dc34:	f8ca 0010 	str.w	r0, [sl, #16]
 800dc38:	b930      	cbnz	r0, 800dc48 <_svfprintf_r+0x50>
 800dc3a:	9a02      	ldr	r2, [sp, #8]
 800dc3c:	230c      	movs	r3, #12
 800dc3e:	6013      	str	r3, [r2, #0]
 800dc40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dc44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc46:	e1e1      	b.n	800e00c <_svfprintf_r+0x414>
 800dc48:	2340      	movs	r3, #64	@ 0x40
 800dc4a:	f8ca 3014 	str.w	r3, [sl, #20]
 800dc4e:	2300      	movs	r3, #0
 800dc50:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 800dc54:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 800deb0 <_svfprintf_r+0x2b8>
 800dc58:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 800dc5c:	ac21      	add	r4, sp, #132	@ 0x84
 800dc5e:	941e      	str	r4, [sp, #120]	@ 0x78
 800dc60:	9303      	str	r3, [sp, #12]
 800dc62:	9307      	str	r3, [sp, #28]
 800dc64:	930e      	str	r3, [sp, #56]	@ 0x38
 800dc66:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc6a:	464b      	mov	r3, r9
 800dc6c:	461d      	mov	r5, r3
 800dc6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc72:	b10a      	cbz	r2, 800dc78 <_svfprintf_r+0x80>
 800dc74:	2a25      	cmp	r2, #37	@ 0x25
 800dc76:	d1f9      	bne.n	800dc6c <_svfprintf_r+0x74>
 800dc78:	ebb5 0709 	subs.w	r7, r5, r9
 800dc7c:	d00d      	beq.n	800dc9a <_svfprintf_r+0xa2>
 800dc7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800dc80:	443b      	add	r3, r7
 800dc82:	9320      	str	r3, [sp, #128]	@ 0x80
 800dc84:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800dc86:	3301      	adds	r3, #1
 800dc88:	2b07      	cmp	r3, #7
 800dc8a:	e9c4 9700 	strd	r9, r7, [r4]
 800dc8e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800dc90:	dc75      	bgt.n	800dd7e <_svfprintf_r+0x186>
 800dc92:	3408      	adds	r4, #8
 800dc94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc96:	443b      	add	r3, r7
 800dc98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc9a:	782b      	ldrb	r3, [r5, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f001 80ee 	beq.w	800ee7e <_svfprintf_r+0x1286>
 800dca2:	2200      	movs	r2, #0
 800dca4:	1c6b      	adds	r3, r5, #1
 800dca6:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 800dcaa:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800dcae:	920a      	str	r2, [sp, #40]	@ 0x28
 800dcb0:	4615      	mov	r5, r2
 800dcb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcb6:	9204      	str	r2, [sp, #16]
 800dcb8:	9308      	str	r3, [sp, #32]
 800dcba:	9b04      	ldr	r3, [sp, #16]
 800dcbc:	3b20      	subs	r3, #32
 800dcbe:	2b5a      	cmp	r3, #90	@ 0x5a
 800dcc0:	f200 8564 	bhi.w	800e78c <_svfprintf_r+0xb94>
 800dcc4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dcc8:	0562009c 	.word	0x0562009c
 800dccc:	00a40562 	.word	0x00a40562
 800dcd0:	05620562 	.word	0x05620562
 800dcd4:	00840562 	.word	0x00840562
 800dcd8:	05620562 	.word	0x05620562
 800dcdc:	00b100a7 	.word	0x00b100a7
 800dce0:	00ae0562 	.word	0x00ae0562
 800dce4:	056200b3 	.word	0x056200b3
 800dce8:	00d000cd 	.word	0x00d000cd
 800dcec:	00d000d0 	.word	0x00d000d0
 800dcf0:	00d000d0 	.word	0x00d000d0
 800dcf4:	00d000d0 	.word	0x00d000d0
 800dcf8:	00d000d0 	.word	0x00d000d0
 800dcfc:	05620562 	.word	0x05620562
 800dd00:	05620562 	.word	0x05620562
 800dd04:	05620562 	.word	0x05620562
 800dd08:	01460562 	.word	0x01460562
 800dd0c:	01070562 	.word	0x01070562
 800dd10:	0146011a 	.word	0x0146011a
 800dd14:	01460146 	.word	0x01460146
 800dd18:	05620562 	.word	0x05620562
 800dd1c:	05620562 	.word	0x05620562
 800dd20:	056200e1 	.word	0x056200e1
 800dd24:	045c0562 	.word	0x045c0562
 800dd28:	05620562 	.word	0x05620562
 800dd2c:	04a60562 	.word	0x04a60562
 800dd30:	04c70562 	.word	0x04c70562
 800dd34:	05620562 	.word	0x05620562
 800dd38:	056204e9 	.word	0x056204e9
 800dd3c:	05620562 	.word	0x05620562
 800dd40:	05620562 	.word	0x05620562
 800dd44:	05620562 	.word	0x05620562
 800dd48:	01460562 	.word	0x01460562
 800dd4c:	01070562 	.word	0x01070562
 800dd50:	0146011c 	.word	0x0146011c
 800dd54:	01460146 	.word	0x01460146
 800dd58:	011c00e4 	.word	0x011c00e4
 800dd5c:	05620101 	.word	0x05620101
 800dd60:	056200fa 	.word	0x056200fa
 800dd64:	045e043d 	.word	0x045e043d
 800dd68:	01010495 	.word	0x01010495
 800dd6c:	04a60562 	.word	0x04a60562
 800dd70:	04c9009a 	.word	0x04c9009a
 800dd74:	05620562 	.word	0x05620562
 800dd78:	05620065 	.word	0x05620065
 800dd7c:	009a      	.short	0x009a
 800dd7e:	9802      	ldr	r0, [sp, #8]
 800dd80:	aa1e      	add	r2, sp, #120	@ 0x78
 800dd82:	4651      	mov	r1, sl
 800dd84:	f002 fb7a 	bl	801047c <__ssprint_r>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	f040 813a 	bne.w	800e002 <_svfprintf_r+0x40a>
 800dd8e:	ac21      	add	r4, sp, #132	@ 0x84
 800dd90:	e780      	b.n	800dc94 <_svfprintf_r+0x9c>
 800dd92:	4b49      	ldr	r3, [pc, #292]	@ (800deb8 <_svfprintf_r+0x2c0>)
 800dd94:	9312      	str	r3, [sp, #72]	@ 0x48
 800dd96:	f015 0320 	ands.w	r3, r5, #32
 800dd9a:	f000 8481 	beq.w	800e6a0 <_svfprintf_r+0xaa8>
 800dd9e:	3607      	adds	r6, #7
 800dda0:	f026 0307 	bic.w	r3, r6, #7
 800dda4:	461a      	mov	r2, r3
 800dda6:	685f      	ldr	r7, [r3, #4]
 800dda8:	f852 6b08 	ldr.w	r6, [r2], #8
 800ddac:	9205      	str	r2, [sp, #20]
 800ddae:	07eb      	lsls	r3, r5, #31
 800ddb0:	d50a      	bpl.n	800ddc8 <_svfprintf_r+0x1d0>
 800ddb2:	ea56 0307 	orrs.w	r3, r6, r7
 800ddb6:	d007      	beq.n	800ddc8 <_svfprintf_r+0x1d0>
 800ddb8:	2330      	movs	r3, #48	@ 0x30
 800ddba:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 800ddbe:	9b04      	ldr	r3, [sp, #16]
 800ddc0:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 800ddc4:	f045 0502 	orr.w	r5, r5, #2
 800ddc8:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800ddcc:	2302      	movs	r3, #2
 800ddce:	e3e7      	b.n	800e5a0 <_svfprintf_r+0x9a8>
 800ddd0:	9802      	ldr	r0, [sp, #8]
 800ddd2:	f001 f9ab 	bl	800f12c <_localeconv_r>
 800ddd6:	6843      	ldr	r3, [r0, #4]
 800ddd8:	9310      	str	r3, [sp, #64]	@ 0x40
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7f2 fad0 	bl	8000380 <strlen>
 800dde0:	900e      	str	r0, [sp, #56]	@ 0x38
 800dde2:	9802      	ldr	r0, [sp, #8]
 800dde4:	f001 f9a2 	bl	800f12c <_localeconv_r>
 800dde8:	6883      	ldr	r3, [r0, #8]
 800ddea:	9307      	str	r3, [sp, #28]
 800ddec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddee:	b12b      	cbz	r3, 800ddfc <_svfprintf_r+0x204>
 800ddf0:	9b07      	ldr	r3, [sp, #28]
 800ddf2:	b11b      	cbz	r3, 800ddfc <_svfprintf_r+0x204>
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	b10b      	cbz	r3, 800ddfc <_svfprintf_r+0x204>
 800ddf8:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800ddfc:	9b08      	ldr	r3, [sp, #32]
 800ddfe:	e758      	b.n	800dcb2 <_svfprintf_r+0xba>
 800de00:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 800de04:	2b00      	cmp	r3, #0
 800de06:	d1f9      	bne.n	800ddfc <_svfprintf_r+0x204>
 800de08:	2320      	movs	r3, #32
 800de0a:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800de0e:	e7f5      	b.n	800ddfc <_svfprintf_r+0x204>
 800de10:	f045 0501 	orr.w	r5, r5, #1
 800de14:	e7f2      	b.n	800ddfc <_svfprintf_r+0x204>
 800de16:	f856 3b04 	ldr.w	r3, [r6], #4
 800de1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	daed      	bge.n	800ddfc <_svfprintf_r+0x204>
 800de20:	425b      	negs	r3, r3
 800de22:	930a      	str	r3, [sp, #40]	@ 0x28
 800de24:	f045 0504 	orr.w	r5, r5, #4
 800de28:	e7e8      	b.n	800ddfc <_svfprintf_r+0x204>
 800de2a:	232b      	movs	r3, #43	@ 0x2b
 800de2c:	e7ed      	b.n	800de0a <_svfprintf_r+0x212>
 800de2e:	9b08      	ldr	r3, [sp, #32]
 800de30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de34:	9204      	str	r2, [sp, #16]
 800de36:	2a2a      	cmp	r2, #42	@ 0x2a
 800de38:	d10f      	bne.n	800de5a <_svfprintf_r+0x262>
 800de3a:	f856 2b04 	ldr.w	r2, [r6], #4
 800de3e:	9308      	str	r3, [sp, #32]
 800de40:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800de44:	e7da      	b.n	800ddfc <_svfprintf_r+0x204>
 800de46:	fb01 2808 	mla	r8, r1, r8, r2
 800de4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de4e:	9204      	str	r2, [sp, #16]
 800de50:	9a04      	ldr	r2, [sp, #16]
 800de52:	3a30      	subs	r2, #48	@ 0x30
 800de54:	2a09      	cmp	r2, #9
 800de56:	d9f6      	bls.n	800de46 <_svfprintf_r+0x24e>
 800de58:	e72e      	b.n	800dcb8 <_svfprintf_r+0xc0>
 800de5a:	f04f 0800 	mov.w	r8, #0
 800de5e:	210a      	movs	r1, #10
 800de60:	e7f6      	b.n	800de50 <_svfprintf_r+0x258>
 800de62:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800de66:	e7c9      	b.n	800ddfc <_svfprintf_r+0x204>
 800de68:	2200      	movs	r2, #0
 800de6a:	9b08      	ldr	r3, [sp, #32]
 800de6c:	920a      	str	r2, [sp, #40]	@ 0x28
 800de6e:	210a      	movs	r1, #10
 800de70:	9a04      	ldr	r2, [sp, #16]
 800de72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800de74:	3a30      	subs	r2, #48	@ 0x30
 800de76:	fb01 2200 	mla	r2, r1, r0, r2
 800de7a:	920a      	str	r2, [sp, #40]	@ 0x28
 800de7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de80:	9204      	str	r2, [sp, #16]
 800de82:	3a30      	subs	r2, #48	@ 0x30
 800de84:	2a09      	cmp	r2, #9
 800de86:	d9f3      	bls.n	800de70 <_svfprintf_r+0x278>
 800de88:	e716      	b.n	800dcb8 <_svfprintf_r+0xc0>
 800de8a:	f045 0508 	orr.w	r5, r5, #8
 800de8e:	e7b5      	b.n	800ddfc <_svfprintf_r+0x204>
 800de90:	9b08      	ldr	r3, [sp, #32]
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	2b68      	cmp	r3, #104	@ 0x68
 800de96:	bf01      	itttt	eq
 800de98:	9b08      	ldreq	r3, [sp, #32]
 800de9a:	3301      	addeq	r3, #1
 800de9c:	9308      	streq	r3, [sp, #32]
 800de9e:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800dea2:	bf18      	it	ne
 800dea4:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800dea8:	e7a8      	b.n	800ddfc <_svfprintf_r+0x204>
 800deaa:	bf00      	nop
 800deac:	f3af 8000 	nop.w
	...
 800deb8:	08011b78 	.word	0x08011b78
 800debc:	9b08      	ldr	r3, [sp, #32]
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	2b6c      	cmp	r3, #108	@ 0x6c
 800dec2:	d105      	bne.n	800ded0 <_svfprintf_r+0x2d8>
 800dec4:	9b08      	ldr	r3, [sp, #32]
 800dec6:	3301      	adds	r3, #1
 800dec8:	9308      	str	r3, [sp, #32]
 800deca:	f045 0520 	orr.w	r5, r5, #32
 800dece:	e795      	b.n	800ddfc <_svfprintf_r+0x204>
 800ded0:	f045 0510 	orr.w	r5, r5, #16
 800ded4:	e792      	b.n	800ddfc <_svfprintf_r+0x204>
 800ded6:	4632      	mov	r2, r6
 800ded8:	f852 3b04 	ldr.w	r3, [r2], #4
 800dedc:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 800dee0:	2300      	movs	r3, #0
 800dee2:	9205      	str	r2, [sp, #20]
 800dee4:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800dee8:	469b      	mov	fp, r3
 800deea:	f04f 0801 	mov.w	r8, #1
 800deee:	930c      	str	r3, [sp, #48]	@ 0x30
 800def0:	461f      	mov	r7, r3
 800def2:	9306      	str	r3, [sp, #24]
 800def4:	461e      	mov	r6, r3
 800def6:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 800defa:	e1a1      	b.n	800e240 <_svfprintf_r+0x648>
 800defc:	f045 0510 	orr.w	r5, r5, #16
 800df00:	06a8      	lsls	r0, r5, #26
 800df02:	d512      	bpl.n	800df2a <_svfprintf_r+0x332>
 800df04:	3607      	adds	r6, #7
 800df06:	f026 0307 	bic.w	r3, r6, #7
 800df0a:	461a      	mov	r2, r3
 800df0c:	685f      	ldr	r7, [r3, #4]
 800df0e:	f852 6b08 	ldr.w	r6, [r2], #8
 800df12:	9205      	str	r2, [sp, #20]
 800df14:	2f00      	cmp	r7, #0
 800df16:	da06      	bge.n	800df26 <_svfprintf_r+0x32e>
 800df18:	4276      	negs	r6, r6
 800df1a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800df1e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800df22:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800df26:	2301      	movs	r3, #1
 800df28:	e33d      	b.n	800e5a6 <_svfprintf_r+0x9ae>
 800df2a:	4633      	mov	r3, r6
 800df2c:	06e9      	lsls	r1, r5, #27
 800df2e:	f853 7b04 	ldr.w	r7, [r3], #4
 800df32:	9305      	str	r3, [sp, #20]
 800df34:	d502      	bpl.n	800df3c <_svfprintf_r+0x344>
 800df36:	463e      	mov	r6, r7
 800df38:	17ff      	asrs	r7, r7, #31
 800df3a:	e7eb      	b.n	800df14 <_svfprintf_r+0x31c>
 800df3c:	066a      	lsls	r2, r5, #25
 800df3e:	d503      	bpl.n	800df48 <_svfprintf_r+0x350>
 800df40:	b23e      	sxth	r6, r7
 800df42:	f347 37c0 	sbfx	r7, r7, #15, #1
 800df46:	e7e5      	b.n	800df14 <_svfprintf_r+0x31c>
 800df48:	05ab      	lsls	r3, r5, #22
 800df4a:	d5f4      	bpl.n	800df36 <_svfprintf_r+0x33e>
 800df4c:	b27e      	sxtb	r6, r7
 800df4e:	f347 17c0 	sbfx	r7, r7, #7, #1
 800df52:	e7df      	b.n	800df14 <_svfprintf_r+0x31c>
 800df54:	3607      	adds	r6, #7
 800df56:	f026 0307 	bic.w	r3, r6, #7
 800df5a:	ecb3 8b02 	vldmia	r3!, {d8}
 800df5e:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 800e120 <_svfprintf_r+0x528>
 800df62:	eeb0 6bc8 	vabs.f64	d6, d8
 800df66:	eeb4 6b47 	vcmp.f64	d6, d7
 800df6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df6e:	9305      	str	r3, [sp, #20]
 800df70:	dd18      	ble.n	800dfa4 <_svfprintf_r+0x3ac>
 800df72:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800df76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7a:	d502      	bpl.n	800df82 <_svfprintf_r+0x38a>
 800df7c:	232d      	movs	r3, #45	@ 0x2d
 800df7e:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800df82:	4a69      	ldr	r2, [pc, #420]	@ (800e128 <_svfprintf_r+0x530>)
 800df84:	4b69      	ldr	r3, [pc, #420]	@ (800e12c <_svfprintf_r+0x534>)
 800df86:	9904      	ldr	r1, [sp, #16]
 800df88:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800df8c:	2947      	cmp	r1, #71	@ 0x47
 800df8e:	bfd4      	ite	le
 800df90:	4691      	movle	r9, r2
 800df92:	4699      	movgt	r9, r3
 800df94:	f04f 0b00 	mov.w	fp, #0
 800df98:	f04f 0803 	mov.w	r8, #3
 800df9c:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800dfa0:	f000 bfa4 	b.w	800eeec <_svfprintf_r+0x12f4>
 800dfa4:	eeb4 8b48 	vcmp.f64	d8, d8
 800dfa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfac:	d709      	bvc.n	800dfc2 <_svfprintf_r+0x3ca>
 800dfae:	ee18 3a90 	vmov	r3, s17
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	bfbc      	itt	lt
 800dfb6:	232d      	movlt	r3, #45	@ 0x2d
 800dfb8:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 800dfbc:	4a5c      	ldr	r2, [pc, #368]	@ (800e130 <_svfprintf_r+0x538>)
 800dfbe:	4b5d      	ldr	r3, [pc, #372]	@ (800e134 <_svfprintf_r+0x53c>)
 800dfc0:	e7e1      	b.n	800df86 <_svfprintf_r+0x38e>
 800dfc2:	9b04      	ldr	r3, [sp, #16]
 800dfc4:	2b61      	cmp	r3, #97	@ 0x61
 800dfc6:	d027      	beq.n	800e018 <_svfprintf_r+0x420>
 800dfc8:	2b41      	cmp	r3, #65	@ 0x41
 800dfca:	d127      	bne.n	800e01c <_svfprintf_r+0x424>
 800dfcc:	2358      	movs	r3, #88	@ 0x58
 800dfce:	2230      	movs	r2, #48	@ 0x30
 800dfd0:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800dfd4:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 800dfd8:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 800dfdc:	f045 0502 	orr.w	r5, r5, #2
 800dfe0:	f340 8089 	ble.w	800e0f6 <_svfprintf_r+0x4fe>
 800dfe4:	9802      	ldr	r0, [sp, #8]
 800dfe6:	f108 0101 	add.w	r1, r8, #1
 800dfea:	f7ff fbbd 	bl	800d768 <_malloc_r>
 800dfee:	4681      	mov	r9, r0
 800dff0:	2800      	cmp	r0, #0
 800dff2:	f040 8085 	bne.w	800e100 <_svfprintf_r+0x508>
 800dff6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800dffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dffe:	f8aa 300c 	strh.w	r3, [sl, #12]
 800e002:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e006:	065b      	lsls	r3, r3, #25
 800e008:	f53f ae1a 	bmi.w	800dc40 <_svfprintf_r+0x48>
 800e00c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e00e:	b04b      	add	sp, #300	@ 0x12c
 800e010:	ecbd 8b04 	vpop	{d8-d9}
 800e014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e018:	2378      	movs	r3, #120	@ 0x78
 800e01a:	e7d8      	b.n	800dfce <_svfprintf_r+0x3d6>
 800e01c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800e020:	d070      	beq.n	800e104 <_svfprintf_r+0x50c>
 800e022:	9b04      	ldr	r3, [sp, #16]
 800e024:	f023 0320 	bic.w	r3, r3, #32
 800e028:	2b47      	cmp	r3, #71	@ 0x47
 800e02a:	d170      	bne.n	800e10e <_svfprintf_r+0x516>
 800e02c:	f1b8 0f00 	cmp.w	r8, #0
 800e030:	d16d      	bne.n	800e10e <_svfprintf_r+0x516>
 800e032:	46c3      	mov	fp, r8
 800e034:	f04f 0801 	mov.w	r8, #1
 800e038:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800e03c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e03e:	ee18 3a90 	vmov	r3, s17
 800e042:	2b00      	cmp	r3, #0
 800e044:	da66      	bge.n	800e114 <_svfprintf_r+0x51c>
 800e046:	eeb1 9b48 	vneg.f64	d9, d8
 800e04a:	232d      	movs	r3, #45	@ 0x2d
 800e04c:	930d      	str	r3, [sp, #52]	@ 0x34
 800e04e:	9b04      	ldr	r3, [sp, #16]
 800e050:	f023 0720 	bic.w	r7, r3, #32
 800e054:	2f41      	cmp	r7, #65	@ 0x41
 800e056:	f040 81c6 	bne.w	800e3e6 <_svfprintf_r+0x7ee>
 800e05a:	eeb0 0b49 	vmov.f64	d0, d9
 800e05e:	a818      	add	r0, sp, #96	@ 0x60
 800e060:	f001 f89a 	bl	800f198 <frexp>
 800e064:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 800e068:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e06c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e074:	bf08      	it	eq
 800e076:	2301      	moveq	r3, #1
 800e078:	9a04      	ldr	r2, [sp, #16]
 800e07a:	bf08      	it	eq
 800e07c:	9318      	streq	r3, [sp, #96]	@ 0x60
 800e07e:	492e      	ldr	r1, [pc, #184]	@ (800e138 <_svfprintf_r+0x540>)
 800e080:	4b2e      	ldr	r3, [pc, #184]	@ (800e13c <_svfprintf_r+0x544>)
 800e082:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 800e086:	2a61      	cmp	r2, #97	@ 0x61
 800e088:	bf18      	it	ne
 800e08a:	4619      	movne	r1, r3
 800e08c:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800e090:	464b      	mov	r3, r9
 800e092:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e096:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800e09a:	ee16 0a90 	vmov	r0, s13
 800e09e:	5c0e      	ldrb	r6, [r1, r0]
 800e0a0:	f803 6b01 	strb.w	r6, [r3], #1
 800e0a4:	1c56      	adds	r6, r2, #1
 800e0a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e0aa:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e0ae:	d006      	beq.n	800e0be <_svfprintf_r+0x4c6>
 800e0b0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b8:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
 800e0bc:	d12e      	bne.n	800e11c <_svfprintf_r+0x524>
 800e0be:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e0c2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ca:	dc39      	bgt.n	800e140 <_svfprintf_r+0x548>
 800e0cc:	eeb4 0b47 	vcmp.f64	d0, d7
 800e0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d4:	d101      	bne.n	800e0da <_svfprintf_r+0x4e2>
 800e0d6:	07c6      	lsls	r6, r0, #31
 800e0d8:	d432      	bmi.n	800e140 <_svfprintf_r+0x548>
 800e0da:	4619      	mov	r1, r3
 800e0dc:	189e      	adds	r6, r3, r2
 800e0de:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800e0e2:	1a70      	subs	r0, r6, r1
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	f280 817b 	bge.w	800e3e0 <_svfprintf_r+0x7e8>
 800e0ea:	1c51      	adds	r1, r2, #1
 800e0ec:	3201      	adds	r2, #1
 800e0ee:	bfb8      	it	lt
 800e0f0:	2100      	movlt	r1, #0
 800e0f2:	440b      	add	r3, r1
 800e0f4:	e037      	b.n	800e166 <_svfprintf_r+0x56e>
 800e0f6:	f04f 0b00 	mov.w	fp, #0
 800e0fa:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 800e0fe:	e79b      	b.n	800e038 <_svfprintf_r+0x440>
 800e100:	4683      	mov	fp, r0
 800e102:	e799      	b.n	800e038 <_svfprintf_r+0x440>
 800e104:	f04f 0b00 	mov.w	fp, #0
 800e108:	f04f 0806 	mov.w	r8, #6
 800e10c:	e794      	b.n	800e038 <_svfprintf_r+0x440>
 800e10e:	f04f 0b00 	mov.w	fp, #0
 800e112:	e791      	b.n	800e038 <_svfprintf_r+0x440>
 800e114:	2300      	movs	r3, #0
 800e116:	eeb0 9b48 	vmov.f64	d9, d8
 800e11a:	e797      	b.n	800e04c <_svfprintf_r+0x454>
 800e11c:	4632      	mov	r2, r6
 800e11e:	e7b8      	b.n	800e092 <_svfprintf_r+0x49a>
 800e120:	ffffffff 	.word	0xffffffff
 800e124:	7fefffff 	.word	0x7fefffff
 800e128:	08011b68 	.word	0x08011b68
 800e12c:	08011b6c 	.word	0x08011b6c
 800e130:	08011b70 	.word	0x08011b70
 800e134:	08011b74 	.word	0x08011b74
 800e138:	08011b78 	.word	0x08011b78
 800e13c:	08011b89 	.word	0x08011b89
 800e140:	7bce      	ldrb	r6, [r1, #15]
 800e142:	931c      	str	r3, [sp, #112]	@ 0x70
 800e144:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800e148:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e14a:	1e42      	subs	r2, r0, #1
 800e14c:	921c      	str	r2, [sp, #112]	@ 0x70
 800e14e:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800e152:	42b2      	cmp	r2, r6
 800e154:	f000 8141 	beq.w	800e3da <_svfprintf_r+0x7e2>
 800e158:	2a39      	cmp	r2, #57	@ 0x39
 800e15a:	bf16      	itet	ne
 800e15c:	3201      	addne	r2, #1
 800e15e:	7a8a      	ldrbeq	r2, [r1, #10]
 800e160:	b2d2      	uxtbne	r2, r2
 800e162:	f800 2c01 	strb.w	r2, [r0, #-1]
 800e166:	eba3 0309 	sub.w	r3, r3, r9
 800e16a:	2f47      	cmp	r7, #71	@ 0x47
 800e16c:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800e16e:	9303      	str	r3, [sp, #12]
 800e170:	f040 8179 	bne.w	800e466 <_svfprintf_r+0x86e>
 800e174:	1cf1      	adds	r1, r6, #3
 800e176:	db02      	blt.n	800e17e <_svfprintf_r+0x586>
 800e178:	4546      	cmp	r6, r8
 800e17a:	f340 8196 	ble.w	800e4aa <_svfprintf_r+0x8b2>
 800e17e:	9b04      	ldr	r3, [sp, #16]
 800e180:	3b02      	subs	r3, #2
 800e182:	9304      	str	r3, [sp, #16]
 800e184:	9904      	ldr	r1, [sp, #16]
 800e186:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800e18a:	f021 0120 	bic.w	r1, r1, #32
 800e18e:	2941      	cmp	r1, #65	@ 0x41
 800e190:	bf08      	it	eq
 800e192:	320f      	addeq	r2, #15
 800e194:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 800e198:	bf06      	itte	eq
 800e19a:	b2d2      	uxtbeq	r2, r2
 800e19c:	2101      	moveq	r1, #1
 800e19e:	2100      	movne	r1, #0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	9318      	str	r3, [sp, #96]	@ 0x60
 800e1a4:	bfb8      	it	lt
 800e1a6:	f1c6 0301 	rsblt	r3, r6, #1
 800e1aa:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 800e1ae:	bfb4      	ite	lt
 800e1b0:	222d      	movlt	r2, #45	@ 0x2d
 800e1b2:	222b      	movge	r2, #43	@ 0x2b
 800e1b4:	2b09      	cmp	r3, #9
 800e1b6:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 800e1ba:	f340 8169 	ble.w	800e490 <_svfprintf_r+0x898>
 800e1be:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 800e1c2:	270a      	movs	r7, #10
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	fbb3 f6f7 	udiv	r6, r3, r7
 800e1ca:	fb07 3116 	mls	r1, r7, r6, r3
 800e1ce:	3130      	adds	r1, #48	@ 0x30
 800e1d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	2963      	cmp	r1, #99	@ 0x63
 800e1d8:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 800e1dc:	4633      	mov	r3, r6
 800e1de:	dcf1      	bgt.n	800e1c4 <_svfprintf_r+0x5cc>
 800e1e0:	3330      	adds	r3, #48	@ 0x30
 800e1e2:	1e91      	subs	r1, r2, #2
 800e1e4:	f800 3c01 	strb.w	r3, [r0, #-1]
 800e1e8:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 800e1f2:	4283      	cmp	r3, r0
 800e1f4:	f0c0 8147 	bcc.w	800e486 <_svfprintf_r+0x88e>
 800e1f8:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 800e1fc:	1a9b      	subs	r3, r3, r2
 800e1fe:	4281      	cmp	r1, r0
 800e200:	bf88      	it	hi
 800e202:	2300      	movhi	r3, #0
 800e204:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 800e208:	441a      	add	r2, r3
 800e20a:	ab1a      	add	r3, sp, #104	@ 0x68
 800e20c:	1ad3      	subs	r3, r2, r3
 800e20e:	9a03      	ldr	r2, [sp, #12]
 800e210:	9311      	str	r3, [sp, #68]	@ 0x44
 800e212:	2a01      	cmp	r2, #1
 800e214:	eb03 0802 	add.w	r8, r3, r2
 800e218:	dc01      	bgt.n	800e21e <_svfprintf_r+0x626>
 800e21a:	07ea      	lsls	r2, r5, #31
 800e21c:	d501      	bpl.n	800e222 <_svfprintf_r+0x62a>
 800e21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e220:	4498      	add	r8, r3
 800e222:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800e226:	2700      	movs	r7, #0
 800e228:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800e22c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e22e:	9706      	str	r7, [sp, #24]
 800e230:	463e      	mov	r6, r7
 800e232:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e234:	2b00      	cmp	r3, #0
 800e236:	f040 8180 	bne.w	800e53a <_svfprintf_r+0x942>
 800e23a:	2300      	movs	r3, #0
 800e23c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800e23e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e240:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e242:	4543      	cmp	r3, r8
 800e244:	bfb8      	it	lt
 800e246:	4643      	movlt	r3, r8
 800e248:	930d      	str	r3, [sp, #52]	@ 0x34
 800e24a:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 800e24e:	b113      	cbz	r3, 800e256 <_svfprintf_r+0x65e>
 800e250:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e252:	3301      	adds	r3, #1
 800e254:	930d      	str	r3, [sp, #52]	@ 0x34
 800e256:	f015 0302 	ands.w	r3, r5, #2
 800e25a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e25c:	bf1e      	ittt	ne
 800e25e:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 800e260:	3302      	addne	r3, #2
 800e262:	930d      	strne	r3, [sp, #52]	@ 0x34
 800e264:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800e268:	9314      	str	r3, [sp, #80]	@ 0x50
 800e26a:	d120      	bne.n	800e2ae <_svfprintf_r+0x6b6>
 800e26c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e26e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e270:	1a9b      	subs	r3, r3, r2
 800e272:	2b00      	cmp	r3, #0
 800e274:	dd1b      	ble.n	800e2ae <_svfprintf_r+0x6b6>
 800e276:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 800e27a:	49a5      	ldr	r1, [pc, #660]	@ (800e510 <_svfprintf_r+0x918>)
 800e27c:	6021      	str	r1, [r4, #0]
 800e27e:	2b10      	cmp	r3, #16
 800e280:	f102 0201 	add.w	r2, r2, #1
 800e284:	f104 0008 	add.w	r0, r4, #8
 800e288:	f300 828c 	bgt.w	800e7a4 <_svfprintf_r+0xbac>
 800e28c:	eb0c 0103 	add.w	r1, ip, r3
 800e290:	2a07      	cmp	r2, #7
 800e292:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800e296:	6063      	str	r3, [r4, #4]
 800e298:	f340 8299 	ble.w	800e7ce <_svfprintf_r+0xbd6>
 800e29c:	9802      	ldr	r0, [sp, #8]
 800e29e:	aa1e      	add	r2, sp, #120	@ 0x78
 800e2a0:	4651      	mov	r1, sl
 800e2a2:	f002 f8eb 	bl	801047c <__ssprint_r>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	f040 85c7 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e2ac:	ac21      	add	r4, sp, #132	@ 0x84
 800e2ae:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 800e2b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e2b4:	b16a      	cbz	r2, 800e2d2 <_svfprintf_r+0x6da>
 800e2b6:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 800e2ba:	6022      	str	r2, [r4, #0]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	4413      	add	r3, r2
 800e2c0:	9320      	str	r3, [sp, #128]	@ 0x80
 800e2c2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e2c4:	6062      	str	r2, [r4, #4]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	2b07      	cmp	r3, #7
 800e2ca:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e2cc:	f300 8281 	bgt.w	800e7d2 <_svfprintf_r+0xbda>
 800e2d0:	3408      	adds	r4, #8
 800e2d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e2d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e2d6:	b162      	cbz	r2, 800e2f2 <_svfprintf_r+0x6fa>
 800e2d8:	aa17      	add	r2, sp, #92	@ 0x5c
 800e2da:	6022      	str	r2, [r4, #0]
 800e2dc:	2202      	movs	r2, #2
 800e2de:	4413      	add	r3, r2
 800e2e0:	9320      	str	r3, [sp, #128]	@ 0x80
 800e2e2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e2e4:	6062      	str	r2, [r4, #4]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	2b07      	cmp	r3, #7
 800e2ea:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e2ec:	f300 827b 	bgt.w	800e7e6 <_svfprintf_r+0xbee>
 800e2f0:	3408      	adds	r4, #8
 800e2f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e2f4:	2b80      	cmp	r3, #128	@ 0x80
 800e2f6:	d120      	bne.n	800e33a <_svfprintf_r+0x742>
 800e2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e2fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e2fc:	1a9b      	subs	r3, r3, r2
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	dd1b      	ble.n	800e33a <_svfprintf_r+0x742>
 800e302:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 800e306:	4983      	ldr	r1, [pc, #524]	@ (800e514 <_svfprintf_r+0x91c>)
 800e308:	6021      	str	r1, [r4, #0]
 800e30a:	2b10      	cmp	r3, #16
 800e30c:	f102 0201 	add.w	r2, r2, #1
 800e310:	f104 0008 	add.w	r0, r4, #8
 800e314:	f300 8271 	bgt.w	800e7fa <_svfprintf_r+0xc02>
 800e318:	eb0c 0103 	add.w	r1, ip, r3
 800e31c:	2a07      	cmp	r2, #7
 800e31e:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800e322:	6063      	str	r3, [r4, #4]
 800e324:	f340 827e 	ble.w	800e824 <_svfprintf_r+0xc2c>
 800e328:	9802      	ldr	r0, [sp, #8]
 800e32a:	aa1e      	add	r2, sp, #120	@ 0x78
 800e32c:	4651      	mov	r1, sl
 800e32e:	f002 f8a5 	bl	801047c <__ssprint_r>
 800e332:	2800      	cmp	r0, #0
 800e334:	f040 8581 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e338:	ac21      	add	r4, sp, #132	@ 0x84
 800e33a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e33c:	eba3 0308 	sub.w	r3, r3, r8
 800e340:	2b00      	cmp	r3, #0
 800e342:	930c      	str	r3, [sp, #48]	@ 0x30
 800e344:	dd1c      	ble.n	800e380 <_svfprintf_r+0x788>
 800e346:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800e348:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 800e34c:	2810      	cmp	r0, #16
 800e34e:	4871      	ldr	r0, [pc, #452]	@ (800e514 <_svfprintf_r+0x91c>)
 800e350:	6020      	str	r0, [r4, #0]
 800e352:	f102 0201 	add.w	r2, r2, #1
 800e356:	f104 0108 	add.w	r1, r4, #8
 800e35a:	f300 8265 	bgt.w	800e828 <_svfprintf_r+0xc30>
 800e35e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800e360:	6060      	str	r0, [r4, #4]
 800e362:	4403      	add	r3, r0
 800e364:	2a07      	cmp	r2, #7
 800e366:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800e36a:	f340 8272 	ble.w	800e852 <_svfprintf_r+0xc5a>
 800e36e:	9802      	ldr	r0, [sp, #8]
 800e370:	aa1e      	add	r2, sp, #120	@ 0x78
 800e372:	4651      	mov	r1, sl
 800e374:	f002 f882 	bl	801047c <__ssprint_r>
 800e378:	2800      	cmp	r0, #0
 800e37a:	f040 855e 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e37e:	ac21      	add	r4, sp, #132	@ 0x84
 800e380:	05e9      	lsls	r1, r5, #23
 800e382:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e384:	f100 826c 	bmi.w	800e860 <_svfprintf_r+0xc68>
 800e388:	4443      	add	r3, r8
 800e38a:	9320      	str	r3, [sp, #128]	@ 0x80
 800e38c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e38e:	3301      	adds	r3, #1
 800e390:	2b07      	cmp	r3, #7
 800e392:	e9c4 9800 	strd	r9, r8, [r4]
 800e396:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e398:	f300 82a4 	bgt.w	800e8e4 <_svfprintf_r+0xcec>
 800e39c:	3408      	adds	r4, #8
 800e39e:	076a      	lsls	r2, r5, #29
 800e3a0:	f100 852d 	bmi.w	800edfe <_svfprintf_r+0x1206>
 800e3a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800e3a8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e3aa:	428a      	cmp	r2, r1
 800e3ac:	bfac      	ite	ge
 800e3ae:	189b      	addge	r3, r3, r2
 800e3b0:	185b      	addlt	r3, r3, r1
 800e3b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e3b6:	b13b      	cbz	r3, 800e3c8 <_svfprintf_r+0x7d0>
 800e3b8:	9802      	ldr	r0, [sp, #8]
 800e3ba:	aa1e      	add	r2, sp, #120	@ 0x78
 800e3bc:	4651      	mov	r1, sl
 800e3be:	f002 f85d 	bl	801047c <__ssprint_r>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	f040 8539 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e3cc:	f1bb 0f00 	cmp.w	fp, #0
 800e3d0:	f040 854f 	bne.w	800ee72 <_svfprintf_r+0x127a>
 800e3d4:	9e05      	ldr	r6, [sp, #20]
 800e3d6:	ac21      	add	r4, sp, #132	@ 0x84
 800e3d8:	e0bc      	b.n	800e554 <_svfprintf_r+0x95c>
 800e3da:	f800 cc01 	strb.w	ip, [r0, #-1]
 800e3de:	e6b3      	b.n	800e148 <_svfprintf_r+0x550>
 800e3e0:	f801 cb01 	strb.w	ip, [r1], #1
 800e3e4:	e67d      	b.n	800e0e2 <_svfprintf_r+0x4ea>
 800e3e6:	2f46      	cmp	r7, #70	@ 0x46
 800e3e8:	d005      	beq.n	800e3f6 <_svfprintf_r+0x7fe>
 800e3ea:	2f45      	cmp	r7, #69	@ 0x45
 800e3ec:	d117      	bne.n	800e41e <_svfprintf_r+0x826>
 800e3ee:	f108 0601 	add.w	r6, r8, #1
 800e3f2:	2102      	movs	r1, #2
 800e3f4:	e001      	b.n	800e3fa <_svfprintf_r+0x802>
 800e3f6:	4646      	mov	r6, r8
 800e3f8:	2103      	movs	r1, #3
 800e3fa:	ab1c      	add	r3, sp, #112	@ 0x70
 800e3fc:	9301      	str	r3, [sp, #4]
 800e3fe:	ab19      	add	r3, sp, #100	@ 0x64
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	9802      	ldr	r0, [sp, #8]
 800e404:	eeb0 0b49 	vmov.f64	d0, d9
 800e408:	ab18      	add	r3, sp, #96	@ 0x60
 800e40a:	4632      	mov	r2, r6
 800e40c:	f000 ffc4 	bl	800f398 <_dtoa_r>
 800e410:	2f47      	cmp	r7, #71	@ 0x47
 800e412:	4681      	mov	r9, r0
 800e414:	d115      	bne.n	800e442 <_svfprintf_r+0x84a>
 800e416:	07e8      	lsls	r0, r5, #31
 800e418:	d403      	bmi.n	800e422 <_svfprintf_r+0x82a>
 800e41a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e41c:	e6a3      	b.n	800e166 <_svfprintf_r+0x56e>
 800e41e:	4646      	mov	r6, r8
 800e420:	e7e7      	b.n	800e3f2 <_svfprintf_r+0x7fa>
 800e422:	eb09 0306 	add.w	r3, r9, r6
 800e426:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42e:	bf08      	it	eq
 800e430:	931c      	streq	r3, [sp, #112]	@ 0x70
 800e432:	2130      	movs	r1, #48	@ 0x30
 800e434:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e436:	4293      	cmp	r3, r2
 800e438:	d9ef      	bls.n	800e41a <_svfprintf_r+0x822>
 800e43a:	1c50      	adds	r0, r2, #1
 800e43c:	901c      	str	r0, [sp, #112]	@ 0x70
 800e43e:	7011      	strb	r1, [r2, #0]
 800e440:	e7f8      	b.n	800e434 <_svfprintf_r+0x83c>
 800e442:	2f46      	cmp	r7, #70	@ 0x46
 800e444:	eb00 0306 	add.w	r3, r0, r6
 800e448:	d1ed      	bne.n	800e426 <_svfprintf_r+0x82e>
 800e44a:	7802      	ldrb	r2, [r0, #0]
 800e44c:	2a30      	cmp	r2, #48	@ 0x30
 800e44e:	d107      	bne.n	800e460 <_svfprintf_r+0x868>
 800e450:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800e454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e458:	bf1c      	itt	ne
 800e45a:	f1c6 0601 	rsbne	r6, r6, #1
 800e45e:	9618      	strne	r6, [sp, #96]	@ 0x60
 800e460:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e462:	4413      	add	r3, r2
 800e464:	e7df      	b.n	800e426 <_svfprintf_r+0x82e>
 800e466:	2f46      	cmp	r7, #70	@ 0x46
 800e468:	f47f ae8c 	bne.w	800e184 <_svfprintf_r+0x58c>
 800e46c:	f005 0301 	and.w	r3, r5, #1
 800e470:	2e00      	cmp	r6, #0
 800e472:	ea43 0308 	orr.w	r3, r3, r8
 800e476:	dd25      	ble.n	800e4c4 <_svfprintf_r+0x8cc>
 800e478:	b37b      	cbz	r3, 800e4da <_svfprintf_r+0x8e2>
 800e47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e47c:	18f3      	adds	r3, r6, r3
 800e47e:	4498      	add	r8, r3
 800e480:	2366      	movs	r3, #102	@ 0x66
 800e482:	9304      	str	r3, [sp, #16]
 800e484:	e02f      	b.n	800e4e6 <_svfprintf_r+0x8ee>
 800e486:	f813 7b01 	ldrb.w	r7, [r3], #1
 800e48a:	f806 7f01 	strb.w	r7, [r6, #1]!
 800e48e:	e6b0      	b.n	800e1f2 <_svfprintf_r+0x5fa>
 800e490:	b941      	cbnz	r1, 800e4a4 <_svfprintf_r+0x8ac>
 800e492:	2230      	movs	r2, #48	@ 0x30
 800e494:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 800e498:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 800e49c:	3330      	adds	r3, #48	@ 0x30
 800e49e:	f802 3b01 	strb.w	r3, [r2], #1
 800e4a2:	e6b2      	b.n	800e20a <_svfprintf_r+0x612>
 800e4a4:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 800e4a8:	e7f8      	b.n	800e49c <_svfprintf_r+0x8a4>
 800e4aa:	9b03      	ldr	r3, [sp, #12]
 800e4ac:	429e      	cmp	r6, r3
 800e4ae:	da0d      	bge.n	800e4cc <_svfprintf_r+0x8d4>
 800e4b0:	9b03      	ldr	r3, [sp, #12]
 800e4b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4b4:	2e00      	cmp	r6, #0
 800e4b6:	eb03 0802 	add.w	r8, r3, r2
 800e4ba:	dc0c      	bgt.n	800e4d6 <_svfprintf_r+0x8de>
 800e4bc:	f1c6 0301 	rsb	r3, r6, #1
 800e4c0:	4498      	add	r8, r3
 800e4c2:	e008      	b.n	800e4d6 <_svfprintf_r+0x8de>
 800e4c4:	b15b      	cbz	r3, 800e4de <_svfprintf_r+0x8e6>
 800e4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	e7d8      	b.n	800e47e <_svfprintf_r+0x886>
 800e4cc:	07eb      	lsls	r3, r5, #31
 800e4ce:	d51d      	bpl.n	800e50c <_svfprintf_r+0x914>
 800e4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4d2:	eb06 0803 	add.w	r8, r6, r3
 800e4d6:	2367      	movs	r3, #103	@ 0x67
 800e4d8:	e7d3      	b.n	800e482 <_svfprintf_r+0x88a>
 800e4da:	46b0      	mov	r8, r6
 800e4dc:	e7d0      	b.n	800e480 <_svfprintf_r+0x888>
 800e4de:	2366      	movs	r3, #102	@ 0x66
 800e4e0:	9304      	str	r3, [sp, #16]
 800e4e2:	f04f 0801 	mov.w	r8, #1
 800e4e6:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800e4ea:	9306      	str	r3, [sp, #24]
 800e4ec:	d023      	beq.n	800e536 <_svfprintf_r+0x93e>
 800e4ee:	2700      	movs	r7, #0
 800e4f0:	2e00      	cmp	r6, #0
 800e4f2:	9706      	str	r7, [sp, #24]
 800e4f4:	f77f ae9d 	ble.w	800e232 <_svfprintf_r+0x63a>
 800e4f8:	9b07      	ldr	r3, [sp, #28]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	2bff      	cmp	r3, #255	@ 0xff
 800e4fe:	d10b      	bne.n	800e518 <_svfprintf_r+0x920>
 800e500:	9b06      	ldr	r3, [sp, #24]
 800e502:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e504:	443b      	add	r3, r7
 800e506:	fb02 8803 	mla	r8, r2, r3, r8
 800e50a:	e692      	b.n	800e232 <_svfprintf_r+0x63a>
 800e50c:	46b0      	mov	r8, r6
 800e50e:	e7e2      	b.n	800e4d6 <_svfprintf_r+0x8de>
 800e510:	08011bac 	.word	0x08011bac
 800e514:	08011b9c 	.word	0x08011b9c
 800e518:	42b3      	cmp	r3, r6
 800e51a:	daf1      	bge.n	800e500 <_svfprintf_r+0x908>
 800e51c:	1af6      	subs	r6, r6, r3
 800e51e:	9b07      	ldr	r3, [sp, #28]
 800e520:	785b      	ldrb	r3, [r3, #1]
 800e522:	b133      	cbz	r3, 800e532 <_svfprintf_r+0x93a>
 800e524:	9b06      	ldr	r3, [sp, #24]
 800e526:	3301      	adds	r3, #1
 800e528:	9306      	str	r3, [sp, #24]
 800e52a:	9b07      	ldr	r3, [sp, #28]
 800e52c:	3301      	adds	r3, #1
 800e52e:	9307      	str	r3, [sp, #28]
 800e530:	e7e2      	b.n	800e4f8 <_svfprintf_r+0x900>
 800e532:	3701      	adds	r7, #1
 800e534:	e7e0      	b.n	800e4f8 <_svfprintf_r+0x900>
 800e536:	9f06      	ldr	r7, [sp, #24]
 800e538:	e67b      	b.n	800e232 <_svfprintf_r+0x63a>
 800e53a:	232d      	movs	r3, #45	@ 0x2d
 800e53c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800e540:	e67b      	b.n	800e23a <_svfprintf_r+0x642>
 800e542:	06af      	lsls	r7, r5, #26
 800e544:	d50a      	bpl.n	800e55c <_svfprintf_r+0x964>
 800e546:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e548:	6833      	ldr	r3, [r6, #0]
 800e54a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e54c:	17d2      	asrs	r2, r2, #31
 800e54e:	e9c3 1200 	strd	r1, r2, [r3]
 800e552:	3604      	adds	r6, #4
 800e554:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e558:	f7ff bb87 	b.w	800dc6a <_svfprintf_r+0x72>
 800e55c:	06e8      	lsls	r0, r5, #27
 800e55e:	d503      	bpl.n	800e568 <_svfprintf_r+0x970>
 800e560:	6833      	ldr	r3, [r6, #0]
 800e562:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e564:	601a      	str	r2, [r3, #0]
 800e566:	e7f4      	b.n	800e552 <_svfprintf_r+0x95a>
 800e568:	0669      	lsls	r1, r5, #25
 800e56a:	d503      	bpl.n	800e574 <_svfprintf_r+0x97c>
 800e56c:	6833      	ldr	r3, [r6, #0]
 800e56e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e570:	801a      	strh	r2, [r3, #0]
 800e572:	e7ee      	b.n	800e552 <_svfprintf_r+0x95a>
 800e574:	05aa      	lsls	r2, r5, #22
 800e576:	d5f3      	bpl.n	800e560 <_svfprintf_r+0x968>
 800e578:	6833      	ldr	r3, [r6, #0]
 800e57a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e57c:	701a      	strb	r2, [r3, #0]
 800e57e:	e7e8      	b.n	800e552 <_svfprintf_r+0x95a>
 800e580:	f045 0510 	orr.w	r5, r5, #16
 800e584:	f015 0320 	ands.w	r3, r5, #32
 800e588:	d020      	beq.n	800e5cc <_svfprintf_r+0x9d4>
 800e58a:	3607      	adds	r6, #7
 800e58c:	f026 0307 	bic.w	r3, r6, #7
 800e590:	461a      	mov	r2, r3
 800e592:	685f      	ldr	r7, [r3, #4]
 800e594:	f852 6b08 	ldr.w	r6, [r2], #8
 800e598:	9205      	str	r2, [sp, #20]
 800e59a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800e59e:	2300      	movs	r3, #0
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 800e5a6:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800e5aa:	f000 8473 	beq.w	800ee94 <_svfprintf_r+0x129c>
 800e5ae:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800e5b2:	9206      	str	r2, [sp, #24]
 800e5b4:	ea56 0207 	orrs.w	r2, r6, r7
 800e5b8:	f040 8471 	bne.w	800ee9e <_svfprintf_r+0x12a6>
 800e5bc:	f1b8 0f00 	cmp.w	r8, #0
 800e5c0:	f000 80dc 	beq.w	800e77c <_svfprintf_r+0xb84>
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	f040 846d 	bne.w	800eea4 <_svfprintf_r+0x12ac>
 800e5ca:	e083      	b.n	800e6d4 <_svfprintf_r+0xadc>
 800e5cc:	4632      	mov	r2, r6
 800e5ce:	f015 0710 	ands.w	r7, r5, #16
 800e5d2:	f852 6b04 	ldr.w	r6, [r2], #4
 800e5d6:	9205      	str	r2, [sp, #20]
 800e5d8:	d001      	beq.n	800e5de <_svfprintf_r+0x9e6>
 800e5da:	461f      	mov	r7, r3
 800e5dc:	e7dd      	b.n	800e59a <_svfprintf_r+0x9a2>
 800e5de:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800e5e2:	d001      	beq.n	800e5e8 <_svfprintf_r+0x9f0>
 800e5e4:	b2b6      	uxth	r6, r6
 800e5e6:	e7d8      	b.n	800e59a <_svfprintf_r+0x9a2>
 800e5e8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800e5ec:	d0d5      	beq.n	800e59a <_svfprintf_r+0x9a2>
 800e5ee:	b2f6      	uxtb	r6, r6
 800e5f0:	e7f3      	b.n	800e5da <_svfprintf_r+0x9e2>
 800e5f2:	4633      	mov	r3, r6
 800e5f4:	2278      	movs	r2, #120	@ 0x78
 800e5f6:	f853 6b04 	ldr.w	r6, [r3], #4
 800e5fa:	9305      	str	r3, [sp, #20]
 800e5fc:	f647 0330 	movw	r3, #30768	@ 0x7830
 800e600:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 800e604:	4b94      	ldr	r3, [pc, #592]	@ (800e858 <_svfprintf_r+0xc60>)
 800e606:	9312      	str	r3, [sp, #72]	@ 0x48
 800e608:	2700      	movs	r7, #0
 800e60a:	f045 0502 	orr.w	r5, r5, #2
 800e60e:	2302      	movs	r3, #2
 800e610:	9204      	str	r2, [sp, #16]
 800e612:	e7c5      	b.n	800e5a0 <_svfprintf_r+0x9a8>
 800e614:	4633      	mov	r3, r6
 800e616:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800e61a:	f853 9b04 	ldr.w	r9, [r3], #4
 800e61e:	9305      	str	r3, [sp, #20]
 800e620:	f04f 0600 	mov.w	r6, #0
 800e624:	f88d 605b 	strb.w	r6, [sp, #91]	@ 0x5b
 800e628:	d00f      	beq.n	800e64a <_svfprintf_r+0xa52>
 800e62a:	4642      	mov	r2, r8
 800e62c:	4631      	mov	r1, r6
 800e62e:	4648      	mov	r0, r9
 800e630:	f7f1 fe56 	bl	80002e0 <memchr>
 800e634:	4683      	mov	fp, r0
 800e636:	2800      	cmp	r0, #0
 800e638:	f43f acb0 	beq.w	800df9c <_svfprintf_r+0x3a4>
 800e63c:	eba0 0809 	sub.w	r8, r0, r9
 800e640:	46b3      	mov	fp, r6
 800e642:	960c      	str	r6, [sp, #48]	@ 0x30
 800e644:	4637      	mov	r7, r6
 800e646:	9606      	str	r6, [sp, #24]
 800e648:	e5fa      	b.n	800e240 <_svfprintf_r+0x648>
 800e64a:	4648      	mov	r0, r9
 800e64c:	f7f1 fe98 	bl	8000380 <strlen>
 800e650:	46b3      	mov	fp, r6
 800e652:	4680      	mov	r8, r0
 800e654:	e4a2      	b.n	800df9c <_svfprintf_r+0x3a4>
 800e656:	f045 0510 	orr.w	r5, r5, #16
 800e65a:	f015 0320 	ands.w	r3, r5, #32
 800e65e:	d009      	beq.n	800e674 <_svfprintf_r+0xa7c>
 800e660:	3607      	adds	r6, #7
 800e662:	f026 0307 	bic.w	r3, r6, #7
 800e666:	461a      	mov	r2, r3
 800e668:	685f      	ldr	r7, [r3, #4]
 800e66a:	f852 6b08 	ldr.w	r6, [r2], #8
 800e66e:	9205      	str	r2, [sp, #20]
 800e670:	2301      	movs	r3, #1
 800e672:	e795      	b.n	800e5a0 <_svfprintf_r+0x9a8>
 800e674:	4632      	mov	r2, r6
 800e676:	f015 0710 	ands.w	r7, r5, #16
 800e67a:	f852 6b04 	ldr.w	r6, [r2], #4
 800e67e:	9205      	str	r2, [sp, #20]
 800e680:	d001      	beq.n	800e686 <_svfprintf_r+0xa8e>
 800e682:	461f      	mov	r7, r3
 800e684:	e7f4      	b.n	800e670 <_svfprintf_r+0xa78>
 800e686:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800e68a:	d001      	beq.n	800e690 <_svfprintf_r+0xa98>
 800e68c:	b2b6      	uxth	r6, r6
 800e68e:	e7ef      	b.n	800e670 <_svfprintf_r+0xa78>
 800e690:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800e694:	d0ec      	beq.n	800e670 <_svfprintf_r+0xa78>
 800e696:	b2f6      	uxtb	r6, r6
 800e698:	e7f3      	b.n	800e682 <_svfprintf_r+0xa8a>
 800e69a:	4b70      	ldr	r3, [pc, #448]	@ (800e85c <_svfprintf_r+0xc64>)
 800e69c:	f7ff bb7a 	b.w	800dd94 <_svfprintf_r+0x19c>
 800e6a0:	4632      	mov	r2, r6
 800e6a2:	f015 0710 	ands.w	r7, r5, #16
 800e6a6:	f852 6b04 	ldr.w	r6, [r2], #4
 800e6aa:	9205      	str	r2, [sp, #20]
 800e6ac:	d002      	beq.n	800e6b4 <_svfprintf_r+0xabc>
 800e6ae:	461f      	mov	r7, r3
 800e6b0:	f7ff bb7d 	b.w	800ddae <_svfprintf_r+0x1b6>
 800e6b4:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800e6b8:	d002      	beq.n	800e6c0 <_svfprintf_r+0xac8>
 800e6ba:	b2b6      	uxth	r6, r6
 800e6bc:	f7ff bb77 	b.w	800ddae <_svfprintf_r+0x1b6>
 800e6c0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800e6c4:	f43f ab73 	beq.w	800ddae <_svfprintf_r+0x1b6>
 800e6c8:	b2f6      	uxtb	r6, r6
 800e6ca:	e7f0      	b.n	800e6ae <_svfprintf_r+0xab6>
 800e6cc:	2e0a      	cmp	r6, #10
 800e6ce:	f177 0300 	sbcs.w	r3, r7, #0
 800e6d2:	d206      	bcs.n	800e6e2 <_svfprintf_r+0xaea>
 800e6d4:	3630      	adds	r6, #48	@ 0x30
 800e6d6:	b2f6      	uxtb	r6, r6
 800e6d8:	f88d 6127 	strb.w	r6, [sp, #295]	@ 0x127
 800e6dc:	f20d 1927 	addw	r9, sp, #295	@ 0x127
 800e6e0:	e3fc      	b.n	800eedc <_svfprintf_r+0x12e4>
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	9303      	str	r3, [sp, #12]
 800e6e6:	9b06      	ldr	r3, [sp, #24]
 800e6e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e6ec:	ad4a      	add	r5, sp, #296	@ 0x128
 800e6ee:	930c      	str	r3, [sp, #48]	@ 0x30
 800e6f0:	220a      	movs	r2, #10
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	4639      	mov	r1, r7
 800e6f8:	f7f1 fe4a 	bl	8000390 <__aeabi_uldivmod>
 800e6fc:	3230      	adds	r2, #48	@ 0x30
 800e6fe:	f805 2c01 	strb.w	r2, [r5, #-1]
 800e702:	9a03      	ldr	r2, [sp, #12]
 800e704:	3201      	adds	r2, #1
 800e706:	9203      	str	r2, [sp, #12]
 800e708:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e70a:	4603      	mov	r3, r0
 800e70c:	468b      	mov	fp, r1
 800e70e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800e712:	b1e2      	cbz	r2, 800e74e <_svfprintf_r+0xb56>
 800e714:	9a07      	ldr	r2, [sp, #28]
 800e716:	9903      	ldr	r1, [sp, #12]
 800e718:	7812      	ldrb	r2, [r2, #0]
 800e71a:	4291      	cmp	r1, r2
 800e71c:	d117      	bne.n	800e74e <_svfprintf_r+0xb56>
 800e71e:	29ff      	cmp	r1, #255	@ 0xff
 800e720:	d015      	beq.n	800e74e <_svfprintf_r+0xb56>
 800e722:	2e0a      	cmp	r6, #10
 800e724:	f177 0200 	sbcs.w	r2, r7, #0
 800e728:	d311      	bcc.n	800e74e <_svfprintf_r+0xb56>
 800e72a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e72c:	9003      	str	r0, [sp, #12]
 800e72e:	eba9 0903 	sub.w	r9, r9, r3
 800e732:	461a      	mov	r2, r3
 800e734:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e736:	4648      	mov	r0, r9
 800e738:	f000 fce5 	bl	800f106 <strncpy>
 800e73c:	9b07      	ldr	r3, [sp, #28]
 800e73e:	785a      	ldrb	r2, [r3, #1]
 800e740:	9b03      	ldr	r3, [sp, #12]
 800e742:	b11a      	cbz	r2, 800e74c <_svfprintf_r+0xb54>
 800e744:	9a07      	ldr	r2, [sp, #28]
 800e746:	3201      	adds	r2, #1
 800e748:	9207      	str	r2, [sp, #28]
 800e74a:	2200      	movs	r2, #0
 800e74c:	9203      	str	r2, [sp, #12]
 800e74e:	2e0a      	cmp	r6, #10
 800e750:	f177 0700 	sbcs.w	r7, r7, #0
 800e754:	f0c0 83c2 	bcc.w	800eedc <_svfprintf_r+0x12e4>
 800e758:	461e      	mov	r6, r3
 800e75a:	465f      	mov	r7, fp
 800e75c:	464d      	mov	r5, r9
 800e75e:	e7c7      	b.n	800e6f0 <_svfprintf_r+0xaf8>
 800e760:	f006 030f 	and.w	r3, r6, #15
 800e764:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e766:	0936      	lsrs	r6, r6, #4
 800e768:	5cd3      	ldrb	r3, [r2, r3]
 800e76a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800e76e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800e772:	093f      	lsrs	r7, r7, #4
 800e774:	ea56 0307 	orrs.w	r3, r6, r7
 800e778:	d1f2      	bne.n	800e760 <_svfprintf_r+0xb68>
 800e77a:	e3af      	b.n	800eedc <_svfprintf_r+0x12e4>
 800e77c:	b91b      	cbnz	r3, 800e786 <_svfprintf_r+0xb8e>
 800e77e:	07e8      	lsls	r0, r5, #31
 800e780:	d501      	bpl.n	800e786 <_svfprintf_r+0xb8e>
 800e782:	2630      	movs	r6, #48	@ 0x30
 800e784:	e7a8      	b.n	800e6d8 <_svfprintf_r+0xae0>
 800e786:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 800e78a:	e3a7      	b.n	800eedc <_svfprintf_r+0x12e4>
 800e78c:	9b04      	ldr	r3, [sp, #16]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	f000 8375 	beq.w	800ee7e <_svfprintf_r+0x1286>
 800e794:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 800e798:	2300      	movs	r3, #0
 800e79a:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800e79e:	9605      	str	r6, [sp, #20]
 800e7a0:	f7ff bba2 	b.w	800dee8 <_svfprintf_r+0x2f0>
 800e7a4:	2110      	movs	r1, #16
 800e7a6:	6061      	str	r1, [r4, #4]
 800e7a8:	2a07      	cmp	r2, #7
 800e7aa:	4461      	add	r1, ip
 800e7ac:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800e7b0:	dd0a      	ble.n	800e7c8 <_svfprintf_r+0xbd0>
 800e7b2:	9802      	ldr	r0, [sp, #8]
 800e7b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e7b6:	aa1e      	add	r2, sp, #120	@ 0x78
 800e7b8:	4651      	mov	r1, sl
 800e7ba:	f001 fe5f 	bl	801047c <__ssprint_r>
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	f040 833b 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e7c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e7c6:	a821      	add	r0, sp, #132	@ 0x84
 800e7c8:	3b10      	subs	r3, #16
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	e553      	b.n	800e276 <_svfprintf_r+0x67e>
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	e56d      	b.n	800e2ae <_svfprintf_r+0x6b6>
 800e7d2:	9802      	ldr	r0, [sp, #8]
 800e7d4:	aa1e      	add	r2, sp, #120	@ 0x78
 800e7d6:	4651      	mov	r1, sl
 800e7d8:	f001 fe50 	bl	801047c <__ssprint_r>
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	f040 832c 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e7e2:	ac21      	add	r4, sp, #132	@ 0x84
 800e7e4:	e575      	b.n	800e2d2 <_svfprintf_r+0x6da>
 800e7e6:	9802      	ldr	r0, [sp, #8]
 800e7e8:	aa1e      	add	r2, sp, #120	@ 0x78
 800e7ea:	4651      	mov	r1, sl
 800e7ec:	f001 fe46 	bl	801047c <__ssprint_r>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	f040 8322 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e7f6:	ac21      	add	r4, sp, #132	@ 0x84
 800e7f8:	e57b      	b.n	800e2f2 <_svfprintf_r+0x6fa>
 800e7fa:	2110      	movs	r1, #16
 800e7fc:	6061      	str	r1, [r4, #4]
 800e7fe:	2a07      	cmp	r2, #7
 800e800:	4461      	add	r1, ip
 800e802:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800e806:	dd0a      	ble.n	800e81e <_svfprintf_r+0xc26>
 800e808:	9802      	ldr	r0, [sp, #8]
 800e80a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e80c:	aa1e      	add	r2, sp, #120	@ 0x78
 800e80e:	4651      	mov	r1, sl
 800e810:	f001 fe34 	bl	801047c <__ssprint_r>
 800e814:	2800      	cmp	r0, #0
 800e816:	f040 8310 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e81a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e81c:	a821      	add	r0, sp, #132	@ 0x84
 800e81e:	3b10      	subs	r3, #16
 800e820:	4604      	mov	r4, r0
 800e822:	e56e      	b.n	800e302 <_svfprintf_r+0x70a>
 800e824:	4604      	mov	r4, r0
 800e826:	e588      	b.n	800e33a <_svfprintf_r+0x742>
 800e828:	2010      	movs	r0, #16
 800e82a:	4403      	add	r3, r0
 800e82c:	2a07      	cmp	r2, #7
 800e82e:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800e832:	6060      	str	r0, [r4, #4]
 800e834:	dd08      	ble.n	800e848 <_svfprintf_r+0xc50>
 800e836:	9802      	ldr	r0, [sp, #8]
 800e838:	aa1e      	add	r2, sp, #120	@ 0x78
 800e83a:	4651      	mov	r1, sl
 800e83c:	f001 fe1e 	bl	801047c <__ssprint_r>
 800e840:	2800      	cmp	r0, #0
 800e842:	f040 82fa 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e846:	a921      	add	r1, sp, #132	@ 0x84
 800e848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e84a:	3b10      	subs	r3, #16
 800e84c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e84e:	460c      	mov	r4, r1
 800e850:	e579      	b.n	800e346 <_svfprintf_r+0x74e>
 800e852:	460c      	mov	r4, r1
 800e854:	e594      	b.n	800e380 <_svfprintf_r+0x788>
 800e856:	bf00      	nop
 800e858:	08011b78 	.word	0x08011b78
 800e85c:	08011b89 	.word	0x08011b89
 800e860:	9a04      	ldr	r2, [sp, #16]
 800e862:	2a65      	cmp	r2, #101	@ 0x65
 800e864:	f340 823e 	ble.w	800ece4 <_svfprintf_r+0x10ec>
 800e868:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e870:	d169      	bne.n	800e946 <_svfprintf_r+0xd4e>
 800e872:	4a72      	ldr	r2, [pc, #456]	@ (800ea3c <_svfprintf_r+0xe44>)
 800e874:	6022      	str	r2, [r4, #0]
 800e876:	2201      	movs	r2, #1
 800e878:	4413      	add	r3, r2
 800e87a:	9320      	str	r3, [sp, #128]	@ 0x80
 800e87c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e87e:	6062      	str	r2, [r4, #4]
 800e880:	4413      	add	r3, r2
 800e882:	2b07      	cmp	r3, #7
 800e884:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e886:	dc37      	bgt.n	800e8f8 <_svfprintf_r+0xd00>
 800e888:	3408      	adds	r4, #8
 800e88a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800e88c:	9a03      	ldr	r2, [sp, #12]
 800e88e:	4293      	cmp	r3, r2
 800e890:	db02      	blt.n	800e898 <_svfprintf_r+0xca0>
 800e892:	07ea      	lsls	r2, r5, #31
 800e894:	f57f ad83 	bpl.w	800e39e <_svfprintf_r+0x7a6>
 800e898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e89a:	6023      	str	r3, [r4, #0]
 800e89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e89e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8a0:	6063      	str	r3, [r4, #4]
 800e8a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e8a4:	4413      	add	r3, r2
 800e8a6:	9320      	str	r3, [sp, #128]	@ 0x80
 800e8a8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	2b07      	cmp	r3, #7
 800e8ae:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e8b0:	dc2c      	bgt.n	800e90c <_svfprintf_r+0xd14>
 800e8b2:	3408      	adds	r4, #8
 800e8b4:	9b03      	ldr	r3, [sp, #12]
 800e8b6:	1e5e      	subs	r6, r3, #1
 800e8b8:	2e00      	cmp	r6, #0
 800e8ba:	f77f ad70 	ble.w	800e39e <_svfprintf_r+0x7a6>
 800e8be:	4f60      	ldr	r7, [pc, #384]	@ (800ea40 <_svfprintf_r+0xe48>)
 800e8c0:	f04f 0810 	mov.w	r8, #16
 800e8c4:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800e8c8:	2e10      	cmp	r6, #16
 800e8ca:	f103 0301 	add.w	r3, r3, #1
 800e8ce:	f104 0108 	add.w	r1, r4, #8
 800e8d2:	6027      	str	r7, [r4, #0]
 800e8d4:	dc24      	bgt.n	800e920 <_svfprintf_r+0xd28>
 800e8d6:	6066      	str	r6, [r4, #4]
 800e8d8:	2b07      	cmp	r3, #7
 800e8da:	4416      	add	r6, r2
 800e8dc:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 800e8e0:	f340 828a 	ble.w	800edf8 <_svfprintf_r+0x1200>
 800e8e4:	9802      	ldr	r0, [sp, #8]
 800e8e6:	aa1e      	add	r2, sp, #120	@ 0x78
 800e8e8:	4651      	mov	r1, sl
 800e8ea:	f001 fdc7 	bl	801047c <__ssprint_r>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	f040 82a3 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e8f4:	ac21      	add	r4, sp, #132	@ 0x84
 800e8f6:	e552      	b.n	800e39e <_svfprintf_r+0x7a6>
 800e8f8:	9802      	ldr	r0, [sp, #8]
 800e8fa:	aa1e      	add	r2, sp, #120	@ 0x78
 800e8fc:	4651      	mov	r1, sl
 800e8fe:	f001 fdbd 	bl	801047c <__ssprint_r>
 800e902:	2800      	cmp	r0, #0
 800e904:	f040 8299 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e908:	ac21      	add	r4, sp, #132	@ 0x84
 800e90a:	e7be      	b.n	800e88a <_svfprintf_r+0xc92>
 800e90c:	9802      	ldr	r0, [sp, #8]
 800e90e:	aa1e      	add	r2, sp, #120	@ 0x78
 800e910:	4651      	mov	r1, sl
 800e912:	f001 fdb3 	bl	801047c <__ssprint_r>
 800e916:	2800      	cmp	r0, #0
 800e918:	f040 828f 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e91c:	ac21      	add	r4, sp, #132	@ 0x84
 800e91e:	e7c9      	b.n	800e8b4 <_svfprintf_r+0xcbc>
 800e920:	3210      	adds	r2, #16
 800e922:	2b07      	cmp	r3, #7
 800e924:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800e928:	f8c4 8004 	str.w	r8, [r4, #4]
 800e92c:	dd08      	ble.n	800e940 <_svfprintf_r+0xd48>
 800e92e:	9802      	ldr	r0, [sp, #8]
 800e930:	aa1e      	add	r2, sp, #120	@ 0x78
 800e932:	4651      	mov	r1, sl
 800e934:	f001 fda2 	bl	801047c <__ssprint_r>
 800e938:	2800      	cmp	r0, #0
 800e93a:	f040 827e 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e93e:	a921      	add	r1, sp, #132	@ 0x84
 800e940:	3e10      	subs	r6, #16
 800e942:	460c      	mov	r4, r1
 800e944:	e7be      	b.n	800e8c4 <_svfprintf_r+0xccc>
 800e946:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e948:	2a00      	cmp	r2, #0
 800e94a:	dc7b      	bgt.n	800ea44 <_svfprintf_r+0xe4c>
 800e94c:	4a3b      	ldr	r2, [pc, #236]	@ (800ea3c <_svfprintf_r+0xe44>)
 800e94e:	6022      	str	r2, [r4, #0]
 800e950:	2201      	movs	r2, #1
 800e952:	4413      	add	r3, r2
 800e954:	9320      	str	r3, [sp, #128]	@ 0x80
 800e956:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e958:	6062      	str	r2, [r4, #4]
 800e95a:	4413      	add	r3, r2
 800e95c:	2b07      	cmp	r3, #7
 800e95e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e960:	dc46      	bgt.n	800e9f0 <_svfprintf_r+0xdf8>
 800e962:	3408      	adds	r4, #8
 800e964:	9903      	ldr	r1, [sp, #12]
 800e966:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800e968:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e96a:	430b      	orrs	r3, r1
 800e96c:	f005 0101 	and.w	r1, r5, #1
 800e970:	430b      	orrs	r3, r1
 800e972:	f43f ad14 	beq.w	800e39e <_svfprintf_r+0x7a6>
 800e976:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e978:	6023      	str	r3, [r4, #0]
 800e97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e97c:	6063      	str	r3, [r4, #4]
 800e97e:	441a      	add	r2, r3
 800e980:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e982:	9220      	str	r2, [sp, #128]	@ 0x80
 800e984:	3301      	adds	r3, #1
 800e986:	2b07      	cmp	r3, #7
 800e988:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e98a:	dc3b      	bgt.n	800ea04 <_svfprintf_r+0xe0c>
 800e98c:	f104 0308 	add.w	r3, r4, #8
 800e990:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800e992:	2e00      	cmp	r6, #0
 800e994:	da1b      	bge.n	800e9ce <_svfprintf_r+0xdd6>
 800e996:	4f2a      	ldr	r7, [pc, #168]	@ (800ea40 <_svfprintf_r+0xe48>)
 800e998:	4276      	negs	r6, r6
 800e99a:	461a      	mov	r2, r3
 800e99c:	2410      	movs	r4, #16
 800e99e:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 800e9a2:	2e10      	cmp	r6, #16
 800e9a4:	f101 0101 	add.w	r1, r1, #1
 800e9a8:	f103 0308 	add.w	r3, r3, #8
 800e9ac:	6017      	str	r7, [r2, #0]
 800e9ae:	dc33      	bgt.n	800ea18 <_svfprintf_r+0xe20>
 800e9b0:	6056      	str	r6, [r2, #4]
 800e9b2:	2907      	cmp	r1, #7
 800e9b4:	4406      	add	r6, r0
 800e9b6:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 800e9ba:	dd08      	ble.n	800e9ce <_svfprintf_r+0xdd6>
 800e9bc:	9802      	ldr	r0, [sp, #8]
 800e9be:	aa1e      	add	r2, sp, #120	@ 0x78
 800e9c0:	4651      	mov	r1, sl
 800e9c2:	f001 fd5b 	bl	801047c <__ssprint_r>
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	f040 8237 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800e9cc:	ab21      	add	r3, sp, #132	@ 0x84
 800e9ce:	9a03      	ldr	r2, [sp, #12]
 800e9d0:	605a      	str	r2, [r3, #4]
 800e9d2:	9903      	ldr	r1, [sp, #12]
 800e9d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e9d6:	f8c3 9000 	str.w	r9, [r3]
 800e9da:	440a      	add	r2, r1
 800e9dc:	9220      	str	r2, [sp, #128]	@ 0x80
 800e9de:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800e9e0:	3201      	adds	r2, #1
 800e9e2:	2a07      	cmp	r2, #7
 800e9e4:	921f      	str	r2, [sp, #124]	@ 0x7c
 800e9e6:	f73f af7d 	bgt.w	800e8e4 <_svfprintf_r+0xcec>
 800e9ea:	f103 0408 	add.w	r4, r3, #8
 800e9ee:	e4d6      	b.n	800e39e <_svfprintf_r+0x7a6>
 800e9f0:	9802      	ldr	r0, [sp, #8]
 800e9f2:	aa1e      	add	r2, sp, #120	@ 0x78
 800e9f4:	4651      	mov	r1, sl
 800e9f6:	f001 fd41 	bl	801047c <__ssprint_r>
 800e9fa:	2800      	cmp	r0, #0
 800e9fc:	f040 821d 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800ea00:	ac21      	add	r4, sp, #132	@ 0x84
 800ea02:	e7af      	b.n	800e964 <_svfprintf_r+0xd6c>
 800ea04:	9802      	ldr	r0, [sp, #8]
 800ea06:	aa1e      	add	r2, sp, #120	@ 0x78
 800ea08:	4651      	mov	r1, sl
 800ea0a:	f001 fd37 	bl	801047c <__ssprint_r>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	f040 8213 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800ea14:	ab21      	add	r3, sp, #132	@ 0x84
 800ea16:	e7bb      	b.n	800e990 <_svfprintf_r+0xd98>
 800ea18:	3010      	adds	r0, #16
 800ea1a:	2907      	cmp	r1, #7
 800ea1c:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 800ea20:	6054      	str	r4, [r2, #4]
 800ea22:	dd08      	ble.n	800ea36 <_svfprintf_r+0xe3e>
 800ea24:	9802      	ldr	r0, [sp, #8]
 800ea26:	aa1e      	add	r2, sp, #120	@ 0x78
 800ea28:	4651      	mov	r1, sl
 800ea2a:	f001 fd27 	bl	801047c <__ssprint_r>
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	f040 8203 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800ea34:	ab21      	add	r3, sp, #132	@ 0x84
 800ea36:	3e10      	subs	r6, #16
 800ea38:	461a      	mov	r2, r3
 800ea3a:	e7b0      	b.n	800e99e <_svfprintf_r+0xda6>
 800ea3c:	08011b9a 	.word	0x08011b9a
 800ea40:	08011b9c 	.word	0x08011b9c
 800ea44:	9a03      	ldr	r2, [sp, #12]
 800ea46:	444a      	add	r2, r9
 800ea48:	9204      	str	r2, [sp, #16]
 800ea4a:	9a03      	ldr	r2, [sp, #12]
 800ea4c:	42b2      	cmp	r2, r6
 800ea4e:	bfa8      	it	ge
 800ea50:	4632      	movge	r2, r6
 800ea52:	2a00      	cmp	r2, #0
 800ea54:	4690      	mov	r8, r2
 800ea56:	dd0a      	ble.n	800ea6e <_svfprintf_r+0xe76>
 800ea58:	4413      	add	r3, r2
 800ea5a:	9320      	str	r3, [sp, #128]	@ 0x80
 800ea5c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ea5e:	3301      	adds	r3, #1
 800ea60:	2b07      	cmp	r3, #7
 800ea62:	e9c4 9200 	strd	r9, r2, [r4]
 800ea66:	931f      	str	r3, [sp, #124]	@ 0x7c
 800ea68:	f300 8089 	bgt.w	800eb7e <_svfprintf_r+0xf86>
 800ea6c:	3408      	adds	r4, #8
 800ea6e:	4643      	mov	r3, r8
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	bfac      	ite	ge
 800ea74:	eba6 0808 	subge.w	r8, r6, r8
 800ea78:	46b0      	movlt	r8, r6
 800ea7a:	f1b8 0f00 	cmp.w	r8, #0
 800ea7e:	dd1b      	ble.n	800eab8 <_svfprintf_r+0xec0>
 800ea80:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 800ea84:	4896      	ldr	r0, [pc, #600]	@ (800ece0 <_svfprintf_r+0x10e8>)
 800ea86:	6020      	str	r0, [r4, #0]
 800ea88:	f1b8 0f10 	cmp.w	r8, #16
 800ea8c:	f102 0201 	add.w	r2, r2, #1
 800ea90:	f104 0108 	add.w	r1, r4, #8
 800ea94:	dc7d      	bgt.n	800eb92 <_svfprintf_r+0xf9a>
 800ea96:	4443      	add	r3, r8
 800ea98:	2a07      	cmp	r2, #7
 800ea9a:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800ea9e:	f8c4 8004 	str.w	r8, [r4, #4]
 800eaa2:	f340 808a 	ble.w	800ebba <_svfprintf_r+0xfc2>
 800eaa6:	9802      	ldr	r0, [sp, #8]
 800eaa8:	aa1e      	add	r2, sp, #120	@ 0x78
 800eaaa:	4651      	mov	r1, sl
 800eaac:	f001 fce6 	bl	801047c <__ssprint_r>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	f040 81c2 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800eab6:	ac21      	add	r4, sp, #132	@ 0x84
 800eab8:	056b      	lsls	r3, r5, #21
 800eaba:	eb09 0806 	add.w	r8, r9, r6
 800eabe:	d508      	bpl.n	800ead2 <_svfprintf_r+0xeda>
 800eac0:	9b06      	ldr	r3, [sp, #24]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d17b      	bne.n	800ebbe <_svfprintf_r+0xfc6>
 800eac6:	2f00      	cmp	r7, #0
 800eac8:	d17b      	bne.n	800ebc2 <_svfprintf_r+0xfca>
 800eaca:	9b04      	ldr	r3, [sp, #16]
 800eacc:	4598      	cmp	r8, r3
 800eace:	bf28      	it	cs
 800ead0:	4698      	movcs	r8, r3
 800ead2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800ead4:	9a03      	ldr	r2, [sp, #12]
 800ead6:	4293      	cmp	r3, r2
 800ead8:	db01      	blt.n	800eade <_svfprintf_r+0xee6>
 800eada:	07ee      	lsls	r6, r5, #31
 800eadc:	d50e      	bpl.n	800eafc <_svfprintf_r+0xf04>
 800eade:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eae0:	6023      	str	r3, [r4, #0]
 800eae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eae6:	6063      	str	r3, [r4, #4]
 800eae8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eaea:	4413      	add	r3, r2
 800eaec:	9320      	str	r3, [sp, #128]	@ 0x80
 800eaee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	2b07      	cmp	r3, #7
 800eaf4:	931f      	str	r3, [sp, #124]	@ 0x7c
 800eaf6:	f300 80df 	bgt.w	800ecb8 <_svfprintf_r+0x10c0>
 800eafa:	3408      	adds	r4, #8
 800eafc:	9b03      	ldr	r3, [sp, #12]
 800eafe:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 800eb00:	1bdf      	subs	r7, r3, r7
 800eb02:	9b04      	ldr	r3, [sp, #16]
 800eb04:	eba3 0308 	sub.w	r3, r3, r8
 800eb08:	429f      	cmp	r7, r3
 800eb0a:	bfa8      	it	ge
 800eb0c:	461f      	movge	r7, r3
 800eb0e:	2f00      	cmp	r7, #0
 800eb10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eb12:	dd0a      	ble.n	800eb2a <_svfprintf_r+0xf32>
 800eb14:	443b      	add	r3, r7
 800eb16:	9320      	str	r3, [sp, #128]	@ 0x80
 800eb18:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	2b07      	cmp	r3, #7
 800eb1e:	e9c4 8700 	strd	r8, r7, [r4]
 800eb22:	931f      	str	r3, [sp, #124]	@ 0x7c
 800eb24:	f300 80d2 	bgt.w	800eccc <_svfprintf_r+0x10d4>
 800eb28:	3408      	adds	r4, #8
 800eb2a:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800eb2c:	9b03      	ldr	r3, [sp, #12]
 800eb2e:	2f00      	cmp	r7, #0
 800eb30:	eba3 0606 	sub.w	r6, r3, r6
 800eb34:	bfa8      	it	ge
 800eb36:	1bf6      	subge	r6, r6, r7
 800eb38:	2e00      	cmp	r6, #0
 800eb3a:	f77f ac30 	ble.w	800e39e <_svfprintf_r+0x7a6>
 800eb3e:	4f68      	ldr	r7, [pc, #416]	@ (800ece0 <_svfprintf_r+0x10e8>)
 800eb40:	f04f 0810 	mov.w	r8, #16
 800eb44:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800eb48:	2e10      	cmp	r6, #16
 800eb4a:	f103 0301 	add.w	r3, r3, #1
 800eb4e:	f104 0108 	add.w	r1, r4, #8
 800eb52:	6027      	str	r7, [r4, #0]
 800eb54:	f77f aebf 	ble.w	800e8d6 <_svfprintf_r+0xcde>
 800eb58:	3210      	adds	r2, #16
 800eb5a:	2b07      	cmp	r3, #7
 800eb5c:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800eb60:	f8c4 8004 	str.w	r8, [r4, #4]
 800eb64:	dd08      	ble.n	800eb78 <_svfprintf_r+0xf80>
 800eb66:	9802      	ldr	r0, [sp, #8]
 800eb68:	aa1e      	add	r2, sp, #120	@ 0x78
 800eb6a:	4651      	mov	r1, sl
 800eb6c:	f001 fc86 	bl	801047c <__ssprint_r>
 800eb70:	2800      	cmp	r0, #0
 800eb72:	f040 8162 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800eb76:	a921      	add	r1, sp, #132	@ 0x84
 800eb78:	3e10      	subs	r6, #16
 800eb7a:	460c      	mov	r4, r1
 800eb7c:	e7e2      	b.n	800eb44 <_svfprintf_r+0xf4c>
 800eb7e:	9802      	ldr	r0, [sp, #8]
 800eb80:	aa1e      	add	r2, sp, #120	@ 0x78
 800eb82:	4651      	mov	r1, sl
 800eb84:	f001 fc7a 	bl	801047c <__ssprint_r>
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	f040 8156 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800eb8e:	ac21      	add	r4, sp, #132	@ 0x84
 800eb90:	e76d      	b.n	800ea6e <_svfprintf_r+0xe76>
 800eb92:	2010      	movs	r0, #16
 800eb94:	4403      	add	r3, r0
 800eb96:	2a07      	cmp	r2, #7
 800eb98:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800eb9c:	6060      	str	r0, [r4, #4]
 800eb9e:	dd08      	ble.n	800ebb2 <_svfprintf_r+0xfba>
 800eba0:	9802      	ldr	r0, [sp, #8]
 800eba2:	aa1e      	add	r2, sp, #120	@ 0x78
 800eba4:	4651      	mov	r1, sl
 800eba6:	f001 fc69 	bl	801047c <__ssprint_r>
 800ebaa:	2800      	cmp	r0, #0
 800ebac:	f040 8145 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800ebb0:	a921      	add	r1, sp, #132	@ 0x84
 800ebb2:	f1a8 0810 	sub.w	r8, r8, #16
 800ebb6:	460c      	mov	r4, r1
 800ebb8:	e762      	b.n	800ea80 <_svfprintf_r+0xe88>
 800ebba:	460c      	mov	r4, r1
 800ebbc:	e77c      	b.n	800eab8 <_svfprintf_r+0xec0>
 800ebbe:	2f00      	cmp	r7, #0
 800ebc0:	d04a      	beq.n	800ec58 <_svfprintf_r+0x1060>
 800ebc2:	3f01      	subs	r7, #1
 800ebc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ebc6:	6023      	str	r3, [r4, #0]
 800ebc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebcc:	6063      	str	r3, [r4, #4]
 800ebce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ebd0:	4413      	add	r3, r2
 800ebd2:	9320      	str	r3, [sp, #128]	@ 0x80
 800ebd4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	2b07      	cmp	r3, #7
 800ebda:	931f      	str	r3, [sp, #124]	@ 0x7c
 800ebdc:	dc43      	bgt.n	800ec66 <_svfprintf_r+0x106e>
 800ebde:	3408      	adds	r4, #8
 800ebe0:	9b07      	ldr	r3, [sp, #28]
 800ebe2:	781a      	ldrb	r2, [r3, #0]
 800ebe4:	9b04      	ldr	r3, [sp, #16]
 800ebe6:	eba3 0308 	sub.w	r3, r3, r8
 800ebea:	429a      	cmp	r2, r3
 800ebec:	bfa8      	it	ge
 800ebee:	461a      	movge	r2, r3
 800ebf0:	2a00      	cmp	r2, #0
 800ebf2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ebf4:	4691      	mov	r9, r2
 800ebf6:	dd09      	ble.n	800ec0c <_svfprintf_r+0x1014>
 800ebf8:	4413      	add	r3, r2
 800ebfa:	9320      	str	r3, [sp, #128]	@ 0x80
 800ebfc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ebfe:	3301      	adds	r3, #1
 800ec00:	2b07      	cmp	r3, #7
 800ec02:	e9c4 8200 	strd	r8, r2, [r4]
 800ec06:	931f      	str	r3, [sp, #124]	@ 0x7c
 800ec08:	dc37      	bgt.n	800ec7a <_svfprintf_r+0x1082>
 800ec0a:	3408      	adds	r4, #8
 800ec0c:	9b07      	ldr	r3, [sp, #28]
 800ec0e:	781e      	ldrb	r6, [r3, #0]
 800ec10:	f1b9 0f00 	cmp.w	r9, #0
 800ec14:	bfa8      	it	ge
 800ec16:	eba6 0609 	subge.w	r6, r6, r9
 800ec1a:	2e00      	cmp	r6, #0
 800ec1c:	dd18      	ble.n	800ec50 <_svfprintf_r+0x1058>
 800ec1e:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800ec22:	482f      	ldr	r0, [pc, #188]	@ (800ece0 <_svfprintf_r+0x10e8>)
 800ec24:	6020      	str	r0, [r4, #0]
 800ec26:	2e10      	cmp	r6, #16
 800ec28:	f103 0301 	add.w	r3, r3, #1
 800ec2c:	f104 0108 	add.w	r1, r4, #8
 800ec30:	dc2d      	bgt.n	800ec8e <_svfprintf_r+0x1096>
 800ec32:	6066      	str	r6, [r4, #4]
 800ec34:	2b07      	cmp	r3, #7
 800ec36:	4416      	add	r6, r2
 800ec38:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 800ec3c:	dd3a      	ble.n	800ecb4 <_svfprintf_r+0x10bc>
 800ec3e:	9802      	ldr	r0, [sp, #8]
 800ec40:	aa1e      	add	r2, sp, #120	@ 0x78
 800ec42:	4651      	mov	r1, sl
 800ec44:	f001 fc1a 	bl	801047c <__ssprint_r>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	f040 80f6 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800ec4e:	ac21      	add	r4, sp, #132	@ 0x84
 800ec50:	9b07      	ldr	r3, [sp, #28]
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	4498      	add	r8, r3
 800ec56:	e733      	b.n	800eac0 <_svfprintf_r+0xec8>
 800ec58:	9b07      	ldr	r3, [sp, #28]
 800ec5a:	3b01      	subs	r3, #1
 800ec5c:	9307      	str	r3, [sp, #28]
 800ec5e:	9b06      	ldr	r3, [sp, #24]
 800ec60:	3b01      	subs	r3, #1
 800ec62:	9306      	str	r3, [sp, #24]
 800ec64:	e7ae      	b.n	800ebc4 <_svfprintf_r+0xfcc>
 800ec66:	9802      	ldr	r0, [sp, #8]
 800ec68:	aa1e      	add	r2, sp, #120	@ 0x78
 800ec6a:	4651      	mov	r1, sl
 800ec6c:	f001 fc06 	bl	801047c <__ssprint_r>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	f040 80e2 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800ec76:	ac21      	add	r4, sp, #132	@ 0x84
 800ec78:	e7b2      	b.n	800ebe0 <_svfprintf_r+0xfe8>
 800ec7a:	9802      	ldr	r0, [sp, #8]
 800ec7c:	aa1e      	add	r2, sp, #120	@ 0x78
 800ec7e:	4651      	mov	r1, sl
 800ec80:	f001 fbfc 	bl	801047c <__ssprint_r>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	f040 80d8 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800ec8a:	ac21      	add	r4, sp, #132	@ 0x84
 800ec8c:	e7be      	b.n	800ec0c <_svfprintf_r+0x1014>
 800ec8e:	2010      	movs	r0, #16
 800ec90:	4402      	add	r2, r0
 800ec92:	2b07      	cmp	r3, #7
 800ec94:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800ec98:	6060      	str	r0, [r4, #4]
 800ec9a:	dd08      	ble.n	800ecae <_svfprintf_r+0x10b6>
 800ec9c:	9802      	ldr	r0, [sp, #8]
 800ec9e:	aa1e      	add	r2, sp, #120	@ 0x78
 800eca0:	4651      	mov	r1, sl
 800eca2:	f001 fbeb 	bl	801047c <__ssprint_r>
 800eca6:	2800      	cmp	r0, #0
 800eca8:	f040 80c7 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800ecac:	a921      	add	r1, sp, #132	@ 0x84
 800ecae:	3e10      	subs	r6, #16
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	e7b4      	b.n	800ec1e <_svfprintf_r+0x1026>
 800ecb4:	460c      	mov	r4, r1
 800ecb6:	e7cb      	b.n	800ec50 <_svfprintf_r+0x1058>
 800ecb8:	9802      	ldr	r0, [sp, #8]
 800ecba:	aa1e      	add	r2, sp, #120	@ 0x78
 800ecbc:	4651      	mov	r1, sl
 800ecbe:	f001 fbdd 	bl	801047c <__ssprint_r>
 800ecc2:	2800      	cmp	r0, #0
 800ecc4:	f040 80b9 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800ecc8:	ac21      	add	r4, sp, #132	@ 0x84
 800ecca:	e717      	b.n	800eafc <_svfprintf_r+0xf04>
 800eccc:	9802      	ldr	r0, [sp, #8]
 800ecce:	aa1e      	add	r2, sp, #120	@ 0x78
 800ecd0:	4651      	mov	r1, sl
 800ecd2:	f001 fbd3 	bl	801047c <__ssprint_r>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	f040 80af 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800ecdc:	ac21      	add	r4, sp, #132	@ 0x84
 800ecde:	e724      	b.n	800eb2a <_svfprintf_r+0xf32>
 800ece0:	08011b9c 	.word	0x08011b9c
 800ece4:	9803      	ldr	r0, [sp, #12]
 800ece6:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800ece8:	2801      	cmp	r0, #1
 800ecea:	f103 0201 	add.w	r2, r3, #1
 800ecee:	f101 0101 	add.w	r1, r1, #1
 800ecf2:	f104 0308 	add.w	r3, r4, #8
 800ecf6:	dc01      	bgt.n	800ecfc <_svfprintf_r+0x1104>
 800ecf8:	07e8      	lsls	r0, r5, #31
 800ecfa:	d572      	bpl.n	800ede2 <_svfprintf_r+0x11ea>
 800ecfc:	2001      	movs	r0, #1
 800ecfe:	2907      	cmp	r1, #7
 800ed00:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800ed04:	f8c4 9000 	str.w	r9, [r4]
 800ed08:	6060      	str	r0, [r4, #4]
 800ed0a:	dd08      	ble.n	800ed1e <_svfprintf_r+0x1126>
 800ed0c:	9802      	ldr	r0, [sp, #8]
 800ed0e:	aa1e      	add	r2, sp, #120	@ 0x78
 800ed10:	4651      	mov	r1, sl
 800ed12:	f001 fbb3 	bl	801047c <__ssprint_r>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	f040 808f 	bne.w	800ee3a <_svfprintf_r+0x1242>
 800ed1c:	ab21      	add	r3, sp, #132	@ 0x84
 800ed1e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ed26:	605a      	str	r2, [r3, #4]
 800ed28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ed2a:	440a      	add	r2, r1
 800ed2c:	9220      	str	r2, [sp, #128]	@ 0x80
 800ed2e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800ed30:	3201      	adds	r2, #1
 800ed32:	2a07      	cmp	r2, #7
 800ed34:	921f      	str	r2, [sp, #124]	@ 0x7c
 800ed36:	dc25      	bgt.n	800ed84 <_svfprintf_r+0x118c>
 800ed38:	3308      	adds	r3, #8
 800ed3a:	9803      	ldr	r0, [sp, #12]
 800ed3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ed40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed44:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 800ed48:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800ed4c:	d023      	beq.n	800ed96 <_svfprintf_r+0x119e>
 800ed4e:	f109 0001 	add.w	r0, r9, #1
 800ed52:	e9c3 0400 	strd	r0, r4, [r3]
 800ed56:	9803      	ldr	r0, [sp, #12]
 800ed58:	3101      	adds	r1, #1
 800ed5a:	3a01      	subs	r2, #1
 800ed5c:	4402      	add	r2, r0
 800ed5e:	2907      	cmp	r1, #7
 800ed60:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800ed64:	dd46      	ble.n	800edf4 <_svfprintf_r+0x11fc>
 800ed66:	9802      	ldr	r0, [sp, #8]
 800ed68:	aa1e      	add	r2, sp, #120	@ 0x78
 800ed6a:	4651      	mov	r1, sl
 800ed6c:	f001 fb86 	bl	801047c <__ssprint_r>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d162      	bne.n	800ee3a <_svfprintf_r+0x1242>
 800ed74:	ab21      	add	r3, sp, #132	@ 0x84
 800ed76:	aa1a      	add	r2, sp, #104	@ 0x68
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ed7c:	605a      	str	r2, [r3, #4]
 800ed7e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ed80:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ed82:	e62a      	b.n	800e9da <_svfprintf_r+0xde2>
 800ed84:	9802      	ldr	r0, [sp, #8]
 800ed86:	aa1e      	add	r2, sp, #120	@ 0x78
 800ed88:	4651      	mov	r1, sl
 800ed8a:	f001 fb77 	bl	801047c <__ssprint_r>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	d153      	bne.n	800ee3a <_svfprintf_r+0x1242>
 800ed92:	ab21      	add	r3, sp, #132	@ 0x84
 800ed94:	e7d1      	b.n	800ed3a <_svfprintf_r+0x1142>
 800ed96:	9a03      	ldr	r2, [sp, #12]
 800ed98:	2a01      	cmp	r2, #1
 800ed9a:	ddec      	ble.n	800ed76 <_svfprintf_r+0x117e>
 800ed9c:	4e56      	ldr	r6, [pc, #344]	@ (800eef8 <_svfprintf_r+0x1300>)
 800ed9e:	2710      	movs	r7, #16
 800eda0:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 800eda4:	2c10      	cmp	r4, #16
 800eda6:	f102 0201 	add.w	r2, r2, #1
 800edaa:	f103 0008 	add.w	r0, r3, #8
 800edae:	601e      	str	r6, [r3, #0]
 800edb0:	dc07      	bgt.n	800edc2 <_svfprintf_r+0x11ca>
 800edb2:	605c      	str	r4, [r3, #4]
 800edb4:	2a07      	cmp	r2, #7
 800edb6:	440c      	add	r4, r1
 800edb8:	e9cd 241f 	strd	r2, r4, [sp, #124]	@ 0x7c
 800edbc:	dcd3      	bgt.n	800ed66 <_svfprintf_r+0x116e>
 800edbe:	4603      	mov	r3, r0
 800edc0:	e7d9      	b.n	800ed76 <_svfprintf_r+0x117e>
 800edc2:	3110      	adds	r1, #16
 800edc4:	2a07      	cmp	r2, #7
 800edc6:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800edca:	605f      	str	r7, [r3, #4]
 800edcc:	dd06      	ble.n	800eddc <_svfprintf_r+0x11e4>
 800edce:	9802      	ldr	r0, [sp, #8]
 800edd0:	aa1e      	add	r2, sp, #120	@ 0x78
 800edd2:	4651      	mov	r1, sl
 800edd4:	f001 fb52 	bl	801047c <__ssprint_r>
 800edd8:	bb78      	cbnz	r0, 800ee3a <_svfprintf_r+0x1242>
 800edda:	a821      	add	r0, sp, #132	@ 0x84
 800eddc:	3c10      	subs	r4, #16
 800edde:	4603      	mov	r3, r0
 800ede0:	e7de      	b.n	800eda0 <_svfprintf_r+0x11a8>
 800ede2:	2001      	movs	r0, #1
 800ede4:	2907      	cmp	r1, #7
 800ede6:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800edea:	f8c4 9000 	str.w	r9, [r4]
 800edee:	6060      	str	r0, [r4, #4]
 800edf0:	ddc1      	ble.n	800ed76 <_svfprintf_r+0x117e>
 800edf2:	e7b8      	b.n	800ed66 <_svfprintf_r+0x116e>
 800edf4:	3308      	adds	r3, #8
 800edf6:	e7be      	b.n	800ed76 <_svfprintf_r+0x117e>
 800edf8:	460c      	mov	r4, r1
 800edfa:	f7ff bad0 	b.w	800e39e <_svfprintf_r+0x7a6>
 800edfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ee02:	1a9d      	subs	r5, r3, r2
 800ee04:	2d00      	cmp	r5, #0
 800ee06:	f77f aacd 	ble.w	800e3a4 <_svfprintf_r+0x7ac>
 800ee0a:	4e3c      	ldr	r6, [pc, #240]	@ (800eefc <_svfprintf_r+0x1304>)
 800ee0c:	2710      	movs	r7, #16
 800ee0e:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800ee12:	2d10      	cmp	r5, #16
 800ee14:	f103 0301 	add.w	r3, r3, #1
 800ee18:	6026      	str	r6, [r4, #0]
 800ee1a:	dc18      	bgt.n	800ee4e <_svfprintf_r+0x1256>
 800ee1c:	442a      	add	r2, r5
 800ee1e:	2b07      	cmp	r3, #7
 800ee20:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800ee24:	6065      	str	r5, [r4, #4]
 800ee26:	f77f aabd 	ble.w	800e3a4 <_svfprintf_r+0x7ac>
 800ee2a:	9802      	ldr	r0, [sp, #8]
 800ee2c:	aa1e      	add	r2, sp, #120	@ 0x78
 800ee2e:	4651      	mov	r1, sl
 800ee30:	f001 fb24 	bl	801047c <__ssprint_r>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	f43f aab5 	beq.w	800e3a4 <_svfprintf_r+0x7ac>
 800ee3a:	f1bb 0f00 	cmp.w	fp, #0
 800ee3e:	f43f a8e0 	beq.w	800e002 <_svfprintf_r+0x40a>
 800ee42:	9802      	ldr	r0, [sp, #8]
 800ee44:	4659      	mov	r1, fp
 800ee46:	f7fe fbcf 	bl	800d5e8 <_free_r>
 800ee4a:	f7ff b8da 	b.w	800e002 <_svfprintf_r+0x40a>
 800ee4e:	3210      	adds	r2, #16
 800ee50:	2b07      	cmp	r3, #7
 800ee52:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800ee56:	6067      	str	r7, [r4, #4]
 800ee58:	dc02      	bgt.n	800ee60 <_svfprintf_r+0x1268>
 800ee5a:	3408      	adds	r4, #8
 800ee5c:	3d10      	subs	r5, #16
 800ee5e:	e7d6      	b.n	800ee0e <_svfprintf_r+0x1216>
 800ee60:	9802      	ldr	r0, [sp, #8]
 800ee62:	aa1e      	add	r2, sp, #120	@ 0x78
 800ee64:	4651      	mov	r1, sl
 800ee66:	f001 fb09 	bl	801047c <__ssprint_r>
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d1e5      	bne.n	800ee3a <_svfprintf_r+0x1242>
 800ee6e:	ac21      	add	r4, sp, #132	@ 0x84
 800ee70:	e7f4      	b.n	800ee5c <_svfprintf_r+0x1264>
 800ee72:	9802      	ldr	r0, [sp, #8]
 800ee74:	4659      	mov	r1, fp
 800ee76:	f7fe fbb7 	bl	800d5e8 <_free_r>
 800ee7a:	f7ff baab 	b.w	800e3d4 <_svfprintf_r+0x7dc>
 800ee7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f43f a8be 	beq.w	800e002 <_svfprintf_r+0x40a>
 800ee86:	9802      	ldr	r0, [sp, #8]
 800ee88:	aa1e      	add	r2, sp, #120	@ 0x78
 800ee8a:	4651      	mov	r1, sl
 800ee8c:	f001 faf6 	bl	801047c <__ssprint_r>
 800ee90:	f7ff b8b7 	b.w	800e002 <_svfprintf_r+0x40a>
 800ee94:	ea56 0207 	orrs.w	r2, r6, r7
 800ee98:	9506      	str	r5, [sp, #24]
 800ee9a:	f43f ab93 	beq.w	800e5c4 <_svfprintf_r+0x9cc>
 800ee9e:	2b01      	cmp	r3, #1
 800eea0:	f43f ac14 	beq.w	800e6cc <_svfprintf_r+0xad4>
 800eea4:	2b02      	cmp	r3, #2
 800eea6:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 800eeaa:	f43f ac59 	beq.w	800e760 <_svfprintf_r+0xb68>
 800eeae:	f006 0307 	and.w	r3, r6, #7
 800eeb2:	08f6      	lsrs	r6, r6, #3
 800eeb4:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800eeb8:	08ff      	lsrs	r7, r7, #3
 800eeba:	3330      	adds	r3, #48	@ 0x30
 800eebc:	ea56 0107 	orrs.w	r1, r6, r7
 800eec0:	464a      	mov	r2, r9
 800eec2:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800eec6:	d1f2      	bne.n	800eeae <_svfprintf_r+0x12b6>
 800eec8:	9906      	ldr	r1, [sp, #24]
 800eeca:	07cd      	lsls	r5, r1, #31
 800eecc:	d506      	bpl.n	800eedc <_svfprintf_r+0x12e4>
 800eece:	2b30      	cmp	r3, #48	@ 0x30
 800eed0:	d004      	beq.n	800eedc <_svfprintf_r+0x12e4>
 800eed2:	2330      	movs	r3, #48	@ 0x30
 800eed4:	f809 3c01 	strb.w	r3, [r9, #-1]
 800eed8:	f1a2 0902 	sub.w	r9, r2, #2
 800eedc:	ab4a      	add	r3, sp, #296	@ 0x128
 800eede:	9d06      	ldr	r5, [sp, #24]
 800eee0:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800eee4:	f04f 0b00 	mov.w	fp, #0
 800eee8:	eba3 0809 	sub.w	r8, r3, r9
 800eeec:	465f      	mov	r7, fp
 800eeee:	f8cd b018 	str.w	fp, [sp, #24]
 800eef2:	465e      	mov	r6, fp
 800eef4:	f7ff b9a4 	b.w	800e240 <_svfprintf_r+0x648>
 800eef8:	08011b9c 	.word	0x08011b9c
 800eefc:	08011bac 	.word	0x08011bac

0800ef00 <_fclose_r>:
 800ef00:	b570      	push	{r4, r5, r6, lr}
 800ef02:	4605      	mov	r5, r0
 800ef04:	460c      	mov	r4, r1
 800ef06:	b1b1      	cbz	r1, 800ef36 <_fclose_r+0x36>
 800ef08:	b118      	cbz	r0, 800ef12 <_fclose_r+0x12>
 800ef0a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ef0c:	b90b      	cbnz	r3, 800ef12 <_fclose_r+0x12>
 800ef0e:	f7fe f9ef 	bl	800d2f0 <__sinit>
 800ef12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef14:	07de      	lsls	r6, r3, #31
 800ef16:	d405      	bmi.n	800ef24 <_fclose_r+0x24>
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	0598      	lsls	r0, r3, #22
 800ef1c:	d402      	bmi.n	800ef24 <_fclose_r+0x24>
 800ef1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef20:	f7fe fafa 	bl	800d518 <__retarget_lock_acquire_recursive>
 800ef24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef28:	b943      	cbnz	r3, 800ef3c <_fclose_r+0x3c>
 800ef2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef2c:	07d9      	lsls	r1, r3, #31
 800ef2e:	d402      	bmi.n	800ef36 <_fclose_r+0x36>
 800ef30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef32:	f7fe faf2 	bl	800d51a <__retarget_lock_release_recursive>
 800ef36:	2600      	movs	r6, #0
 800ef38:	4630      	mov	r0, r6
 800ef3a:	bd70      	pop	{r4, r5, r6, pc}
 800ef3c:	4621      	mov	r1, r4
 800ef3e:	4628      	mov	r0, r5
 800ef40:	f000 f834 	bl	800efac <__sflush_r>
 800ef44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ef46:	4606      	mov	r6, r0
 800ef48:	b133      	cbz	r3, 800ef58 <_fclose_r+0x58>
 800ef4a:	69e1      	ldr	r1, [r4, #28]
 800ef4c:	4628      	mov	r0, r5
 800ef4e:	4798      	blx	r3
 800ef50:	2800      	cmp	r0, #0
 800ef52:	bfb8      	it	lt
 800ef54:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 800ef58:	89a3      	ldrh	r3, [r4, #12]
 800ef5a:	061a      	lsls	r2, r3, #24
 800ef5c:	d503      	bpl.n	800ef66 <_fclose_r+0x66>
 800ef5e:	6921      	ldr	r1, [r4, #16]
 800ef60:	4628      	mov	r0, r5
 800ef62:	f7fe fb41 	bl	800d5e8 <_free_r>
 800ef66:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ef68:	b141      	cbz	r1, 800ef7c <_fclose_r+0x7c>
 800ef6a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800ef6e:	4299      	cmp	r1, r3
 800ef70:	d002      	beq.n	800ef78 <_fclose_r+0x78>
 800ef72:	4628      	mov	r0, r5
 800ef74:	f7fe fb38 	bl	800d5e8 <_free_r>
 800ef78:	2300      	movs	r3, #0
 800ef7a:	6323      	str	r3, [r4, #48]	@ 0x30
 800ef7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ef7e:	b121      	cbz	r1, 800ef8a <_fclose_r+0x8a>
 800ef80:	4628      	mov	r0, r5
 800ef82:	f7fe fb31 	bl	800d5e8 <_free_r>
 800ef86:	2300      	movs	r3, #0
 800ef88:	6463      	str	r3, [r4, #68]	@ 0x44
 800ef8a:	f7fe f9a5 	bl	800d2d8 <__sfp_lock_acquire>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	81a3      	strh	r3, [r4, #12]
 800ef92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef94:	07db      	lsls	r3, r3, #31
 800ef96:	d402      	bmi.n	800ef9e <_fclose_r+0x9e>
 800ef98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef9a:	f7fe fabe 	bl	800d51a <__retarget_lock_release_recursive>
 800ef9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800efa0:	f7fe fab9 	bl	800d516 <__retarget_lock_close_recursive>
 800efa4:	f7fe f99e 	bl	800d2e4 <__sfp_lock_release>
 800efa8:	e7c6      	b.n	800ef38 <_fclose_r+0x38>
	...

0800efac <__sflush_r>:
 800efac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb0:	4605      	mov	r5, r0
 800efb2:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800efb6:	0706      	lsls	r6, r0, #28
 800efb8:	460c      	mov	r4, r1
 800efba:	d457      	bmi.n	800f06c <__sflush_r+0xc0>
 800efbc:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800efc0:	818b      	strh	r3, [r1, #12]
 800efc2:	684b      	ldr	r3, [r1, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	dc02      	bgt.n	800efce <__sflush_r+0x22>
 800efc8:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800efca:	2b00      	cmp	r3, #0
 800efcc:	dd4c      	ble.n	800f068 <__sflush_r+0xbc>
 800efce:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800efd0:	2e00      	cmp	r6, #0
 800efd2:	d049      	beq.n	800f068 <__sflush_r+0xbc>
 800efd4:	2300      	movs	r3, #0
 800efd6:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800efda:	682f      	ldr	r7, [r5, #0]
 800efdc:	69e1      	ldr	r1, [r4, #28]
 800efde:	602b      	str	r3, [r5, #0]
 800efe0:	d034      	beq.n	800f04c <__sflush_r+0xa0>
 800efe2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800efe4:	89a3      	ldrh	r3, [r4, #12]
 800efe6:	0759      	lsls	r1, r3, #29
 800efe8:	d505      	bpl.n	800eff6 <__sflush_r+0x4a>
 800efea:	6863      	ldr	r3, [r4, #4]
 800efec:	1ad2      	subs	r2, r2, r3
 800efee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800eff0:	b10b      	cbz	r3, 800eff6 <__sflush_r+0x4a>
 800eff2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800eff4:	1ad2      	subs	r2, r2, r3
 800eff6:	2300      	movs	r3, #0
 800eff8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800effa:	69e1      	ldr	r1, [r4, #28]
 800effc:	4628      	mov	r0, r5
 800effe:	47b0      	blx	r6
 800f000:	1c43      	adds	r3, r0, #1
 800f002:	d106      	bne.n	800f012 <__sflush_r+0x66>
 800f004:	682a      	ldr	r2, [r5, #0]
 800f006:	2a1d      	cmp	r2, #29
 800f008:	d848      	bhi.n	800f09c <__sflush_r+0xf0>
 800f00a:	4b2b      	ldr	r3, [pc, #172]	@ (800f0b8 <__sflush_r+0x10c>)
 800f00c:	4113      	asrs	r3, r2
 800f00e:	07de      	lsls	r6, r3, #31
 800f010:	d444      	bmi.n	800f09c <__sflush_r+0xf0>
 800f012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f016:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f01a:	81a2      	strh	r2, [r4, #12]
 800f01c:	2200      	movs	r2, #0
 800f01e:	6062      	str	r2, [r4, #4]
 800f020:	04d9      	lsls	r1, r3, #19
 800f022:	6922      	ldr	r2, [r4, #16]
 800f024:	6022      	str	r2, [r4, #0]
 800f026:	d504      	bpl.n	800f032 <__sflush_r+0x86>
 800f028:	1c42      	adds	r2, r0, #1
 800f02a:	d101      	bne.n	800f030 <__sflush_r+0x84>
 800f02c:	682b      	ldr	r3, [r5, #0]
 800f02e:	b903      	cbnz	r3, 800f032 <__sflush_r+0x86>
 800f030:	6520      	str	r0, [r4, #80]	@ 0x50
 800f032:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f034:	602f      	str	r7, [r5, #0]
 800f036:	b1b9      	cbz	r1, 800f068 <__sflush_r+0xbc>
 800f038:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800f03c:	4299      	cmp	r1, r3
 800f03e:	d002      	beq.n	800f046 <__sflush_r+0x9a>
 800f040:	4628      	mov	r0, r5
 800f042:	f7fe fad1 	bl	800d5e8 <_free_r>
 800f046:	2300      	movs	r3, #0
 800f048:	6323      	str	r3, [r4, #48]	@ 0x30
 800f04a:	e00d      	b.n	800f068 <__sflush_r+0xbc>
 800f04c:	2301      	movs	r3, #1
 800f04e:	4628      	mov	r0, r5
 800f050:	47b0      	blx	r6
 800f052:	4602      	mov	r2, r0
 800f054:	1c50      	adds	r0, r2, #1
 800f056:	d1c5      	bne.n	800efe4 <__sflush_r+0x38>
 800f058:	682b      	ldr	r3, [r5, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d0c2      	beq.n	800efe4 <__sflush_r+0x38>
 800f05e:	2b1d      	cmp	r3, #29
 800f060:	d001      	beq.n	800f066 <__sflush_r+0xba>
 800f062:	2b16      	cmp	r3, #22
 800f064:	d11a      	bne.n	800f09c <__sflush_r+0xf0>
 800f066:	602f      	str	r7, [r5, #0]
 800f068:	2000      	movs	r0, #0
 800f06a:	e01e      	b.n	800f0aa <__sflush_r+0xfe>
 800f06c:	690f      	ldr	r7, [r1, #16]
 800f06e:	2f00      	cmp	r7, #0
 800f070:	d0fa      	beq.n	800f068 <__sflush_r+0xbc>
 800f072:	0783      	lsls	r3, r0, #30
 800f074:	680e      	ldr	r6, [r1, #0]
 800f076:	bf08      	it	eq
 800f078:	694b      	ldreq	r3, [r1, #20]
 800f07a:	600f      	str	r7, [r1, #0]
 800f07c:	bf18      	it	ne
 800f07e:	2300      	movne	r3, #0
 800f080:	eba6 0807 	sub.w	r8, r6, r7
 800f084:	608b      	str	r3, [r1, #8]
 800f086:	f1b8 0f00 	cmp.w	r8, #0
 800f08a:	dded      	ble.n	800f068 <__sflush_r+0xbc>
 800f08c:	69e1      	ldr	r1, [r4, #28]
 800f08e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800f090:	4643      	mov	r3, r8
 800f092:	463a      	mov	r2, r7
 800f094:	4628      	mov	r0, r5
 800f096:	47b0      	blx	r6
 800f098:	2800      	cmp	r0, #0
 800f09a:	dc08      	bgt.n	800f0ae <__sflush_r+0x102>
 800f09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0a4:	81a3      	strh	r3, [r4, #12]
 800f0a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ae:	4407      	add	r7, r0
 800f0b0:	eba8 0800 	sub.w	r8, r8, r0
 800f0b4:	e7e7      	b.n	800f086 <__sflush_r+0xda>
 800f0b6:	bf00      	nop
 800f0b8:	dfbffffe 	.word	0xdfbffffe

0800f0bc <_fflush_r>:
 800f0bc:	b538      	push	{r3, r4, r5, lr}
 800f0be:	460c      	mov	r4, r1
 800f0c0:	4605      	mov	r5, r0
 800f0c2:	b118      	cbz	r0, 800f0cc <_fflush_r+0x10>
 800f0c4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f0c6:	b90b      	cbnz	r3, 800f0cc <_fflush_r+0x10>
 800f0c8:	f7fe f912 	bl	800d2f0 <__sinit>
 800f0cc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800f0d0:	b1b8      	cbz	r0, 800f102 <_fflush_r+0x46>
 800f0d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f0d4:	07db      	lsls	r3, r3, #31
 800f0d6:	d404      	bmi.n	800f0e2 <_fflush_r+0x26>
 800f0d8:	0581      	lsls	r1, r0, #22
 800f0da:	d402      	bmi.n	800f0e2 <_fflush_r+0x26>
 800f0dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0de:	f7fe fa1b 	bl	800d518 <__retarget_lock_acquire_recursive>
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	f7ff ff61 	bl	800efac <__sflush_r>
 800f0ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f0ec:	07da      	lsls	r2, r3, #31
 800f0ee:	4605      	mov	r5, r0
 800f0f0:	d405      	bmi.n	800f0fe <_fflush_r+0x42>
 800f0f2:	89a3      	ldrh	r3, [r4, #12]
 800f0f4:	059b      	lsls	r3, r3, #22
 800f0f6:	d402      	bmi.n	800f0fe <_fflush_r+0x42>
 800f0f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f0fa:	f7fe fa0e 	bl	800d51a <__retarget_lock_release_recursive>
 800f0fe:	4628      	mov	r0, r5
 800f100:	bd38      	pop	{r3, r4, r5, pc}
 800f102:	4605      	mov	r5, r0
 800f104:	e7fb      	b.n	800f0fe <_fflush_r+0x42>

0800f106 <strncpy>:
 800f106:	b510      	push	{r4, lr}
 800f108:	3901      	subs	r1, #1
 800f10a:	4603      	mov	r3, r0
 800f10c:	b132      	cbz	r2, 800f11c <strncpy+0x16>
 800f10e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f112:	f803 4b01 	strb.w	r4, [r3], #1
 800f116:	3a01      	subs	r2, #1
 800f118:	2c00      	cmp	r4, #0
 800f11a:	d1f7      	bne.n	800f10c <strncpy+0x6>
 800f11c:	441a      	add	r2, r3
 800f11e:	2100      	movs	r1, #0
 800f120:	4293      	cmp	r3, r2
 800f122:	d100      	bne.n	800f126 <strncpy+0x20>
 800f124:	bd10      	pop	{r4, pc}
 800f126:	f803 1b01 	strb.w	r1, [r3], #1
 800f12a:	e7f9      	b.n	800f120 <strncpy+0x1a>

0800f12c <_localeconv_r>:
 800f12c:	4800      	ldr	r0, [pc, #0]	@ (800f130 <_localeconv_r+0x4>)
 800f12e:	4770      	bx	lr
 800f130:	24000644 	.word	0x24000644

0800f134 <_sbrk_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4d06      	ldr	r5, [pc, #24]	@ (800f150 <_sbrk_r+0x1c>)
 800f138:	2300      	movs	r3, #0
 800f13a:	4604      	mov	r4, r0
 800f13c:	4608      	mov	r0, r1
 800f13e:	602b      	str	r3, [r5, #0]
 800f140:	f7f2 f978 	bl	8001434 <_sbrk>
 800f144:	1c43      	adds	r3, r0, #1
 800f146:	d102      	bne.n	800f14e <_sbrk_r+0x1a>
 800f148:	682b      	ldr	r3, [r5, #0]
 800f14a:	b103      	cbz	r3, 800f14e <_sbrk_r+0x1a>
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	bd38      	pop	{r3, r4, r5, pc}
 800f150:	24003310 	.word	0x24003310

0800f154 <__libc_fini_array>:
 800f154:	b538      	push	{r3, r4, r5, lr}
 800f156:	4d07      	ldr	r5, [pc, #28]	@ (800f174 <__libc_fini_array+0x20>)
 800f158:	4c07      	ldr	r4, [pc, #28]	@ (800f178 <__libc_fini_array+0x24>)
 800f15a:	1b64      	subs	r4, r4, r5
 800f15c:	10a4      	asrs	r4, r4, #2
 800f15e:	b91c      	cbnz	r4, 800f168 <__libc_fini_array+0x14>
 800f160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f164:	f002 bca2 	b.w	8011aac <_fini>
 800f168:	3c01      	subs	r4, #1
 800f16a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800f16e:	4798      	blx	r3
 800f170:	e7f5      	b.n	800f15e <__libc_fini_array+0xa>
 800f172:	bf00      	nop
 800f174:	08011f00 	.word	0x08011f00
 800f178:	08011f04 	.word	0x08011f04

0800f17c <sysconf>:
 800f17c:	2808      	cmp	r0, #8
 800f17e:	b508      	push	{r3, lr}
 800f180:	d006      	beq.n	800f190 <sysconf+0x14>
 800f182:	f7fe f99d 	bl	800d4c0 <__errno>
 800f186:	2316      	movs	r3, #22
 800f188:	6003      	str	r3, [r0, #0]
 800f18a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f18e:	bd08      	pop	{r3, pc}
 800f190:	2080      	movs	r0, #128	@ 0x80
 800f192:	e7fc      	b.n	800f18e <sysconf+0x12>
 800f194:	0000      	movs	r0, r0
	...

0800f198 <frexp>:
 800f198:	2200      	movs	r2, #0
 800f19a:	ee10 1a90 	vmov	r1, s1
 800f19e:	6002      	str	r2, [r0, #0]
 800f1a0:	4a17      	ldr	r2, [pc, #92]	@ (800f200 <frexp+0x68>)
 800f1a2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d823      	bhi.n	800f1f2 <frexp+0x5a>
 800f1aa:	ee10 2a10 	vmov	r2, s0
 800f1ae:	431a      	orrs	r2, r3
 800f1b0:	d01f      	beq.n	800f1f2 <frexp+0x5a>
 800f1b2:	4a14      	ldr	r2, [pc, #80]	@ (800f204 <frexp+0x6c>)
 800f1b4:	400a      	ands	r2, r1
 800f1b6:	b952      	cbnz	r2, 800f1ce <frexp+0x36>
 800f1b8:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 800f1f8 <frexp+0x60>
 800f1bc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f1c0:	ee10 1a90 	vmov	r1, s1
 800f1c4:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800f1c8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f1cc:	6002      	str	r2, [r0, #0]
 800f1ce:	6802      	ldr	r2, [r0, #0]
 800f1d0:	151b      	asrs	r3, r3, #20
 800f1d2:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800f1d6:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800f1da:	441a      	add	r2, r3
 800f1dc:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800f1e0:	6002      	str	r2, [r0, #0]
 800f1e2:	ec53 2b10 	vmov	r2, r3, d0
 800f1e6:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
 800f1ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f1ee:	ec43 2b10 	vmov	d0, r2, r3
 800f1f2:	4770      	bx	lr
 800f1f4:	f3af 8000 	nop.w
 800f1f8:	00000000 	.word	0x00000000
 800f1fc:	43500000 	.word	0x43500000
 800f200:	7fefffff 	.word	0x7fefffff
 800f204:	7ff00000 	.word	0x7ff00000

0800f208 <__register_exitproc>:
 800f208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f20c:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800f284 <__register_exitproc+0x7c>
 800f210:	4606      	mov	r6, r0
 800f212:	f8da 0000 	ldr.w	r0, [sl]
 800f216:	4698      	mov	r8, r3
 800f218:	460f      	mov	r7, r1
 800f21a:	4691      	mov	r9, r2
 800f21c:	f7fe f97c 	bl	800d518 <__retarget_lock_acquire_recursive>
 800f220:	4b16      	ldr	r3, [pc, #88]	@ (800f27c <__register_exitproc+0x74>)
 800f222:	681c      	ldr	r4, [r3, #0]
 800f224:	b90c      	cbnz	r4, 800f22a <__register_exitproc+0x22>
 800f226:	4c16      	ldr	r4, [pc, #88]	@ (800f280 <__register_exitproc+0x78>)
 800f228:	601c      	str	r4, [r3, #0]
 800f22a:	6865      	ldr	r5, [r4, #4]
 800f22c:	f8da 0000 	ldr.w	r0, [sl]
 800f230:	2d1f      	cmp	r5, #31
 800f232:	dd05      	ble.n	800f240 <__register_exitproc+0x38>
 800f234:	f7fe f971 	bl	800d51a <__retarget_lock_release_recursive>
 800f238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f240:	b19e      	cbz	r6, 800f26a <__register_exitproc+0x62>
 800f242:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800f246:	2201      	movs	r2, #1
 800f248:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800f24c:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800f250:	40aa      	lsls	r2, r5
 800f252:	4313      	orrs	r3, r2
 800f254:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800f258:	2e02      	cmp	r6, #2
 800f25a:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800f25e:	bf02      	ittt	eq
 800f260:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800f264:	4313      	orreq	r3, r2
 800f266:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800f26a:	1c6b      	adds	r3, r5, #1
 800f26c:	3502      	adds	r5, #2
 800f26e:	6063      	str	r3, [r4, #4]
 800f270:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800f274:	f7fe f951 	bl	800d51a <__retarget_lock_release_recursive>
 800f278:	2000      	movs	r0, #0
 800f27a:	e7df      	b.n	800f23c <__register_exitproc+0x34>
 800f27c:	24003318 	.word	0x24003318
 800f280:	24003350 	.word	0x24003350
 800f284:	24000140 	.word	0x24000140

0800f288 <quorem>:
 800f288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	6903      	ldr	r3, [r0, #16]
 800f28e:	690c      	ldr	r4, [r1, #16]
 800f290:	42a3      	cmp	r3, r4
 800f292:	4607      	mov	r7, r0
 800f294:	db7e      	blt.n	800f394 <quorem+0x10c>
 800f296:	3c01      	subs	r4, #1
 800f298:	f101 0814 	add.w	r8, r1, #20
 800f29c:	00a3      	lsls	r3, r4, #2
 800f29e:	f100 0514 	add.w	r5, r0, #20
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f2a8:	9301      	str	r3, [sp, #4]
 800f2aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f2ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f2ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800f2be:	d32e      	bcc.n	800f31e <quorem+0x96>
 800f2c0:	f04f 0a00 	mov.w	sl, #0
 800f2c4:	46c4      	mov	ip, r8
 800f2c6:	46ae      	mov	lr, r5
 800f2c8:	46d3      	mov	fp, sl
 800f2ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f2ce:	b298      	uxth	r0, r3
 800f2d0:	fb06 a000 	mla	r0, r6, r0, sl
 800f2d4:	0c02      	lsrs	r2, r0, #16
 800f2d6:	0c1b      	lsrs	r3, r3, #16
 800f2d8:	fb06 2303 	mla	r3, r6, r3, r2
 800f2dc:	f8de 2000 	ldr.w	r2, [lr]
 800f2e0:	b280      	uxth	r0, r0
 800f2e2:	b292      	uxth	r2, r2
 800f2e4:	1a12      	subs	r2, r2, r0
 800f2e6:	445a      	add	r2, fp
 800f2e8:	f8de 0000 	ldr.w	r0, [lr]
 800f2ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f2f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f2fa:	b292      	uxth	r2, r2
 800f2fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f300:	45e1      	cmp	r9, ip
 800f302:	f84e 2b04 	str.w	r2, [lr], #4
 800f306:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f30a:	d2de      	bcs.n	800f2ca <quorem+0x42>
 800f30c:	9b00      	ldr	r3, [sp, #0]
 800f30e:	58eb      	ldr	r3, [r5, r3]
 800f310:	b92b      	cbnz	r3, 800f31e <quorem+0x96>
 800f312:	9b01      	ldr	r3, [sp, #4]
 800f314:	3b04      	subs	r3, #4
 800f316:	429d      	cmp	r5, r3
 800f318:	461a      	mov	r2, r3
 800f31a:	d32f      	bcc.n	800f37c <quorem+0xf4>
 800f31c:	613c      	str	r4, [r7, #16]
 800f31e:	4638      	mov	r0, r7
 800f320:	f000 ffa4 	bl	801026c <__mcmp>
 800f324:	2800      	cmp	r0, #0
 800f326:	db25      	blt.n	800f374 <quorem+0xec>
 800f328:	4629      	mov	r1, r5
 800f32a:	2000      	movs	r0, #0
 800f32c:	f858 2b04 	ldr.w	r2, [r8], #4
 800f330:	f8d1 c000 	ldr.w	ip, [r1]
 800f334:	fa1f fe82 	uxth.w	lr, r2
 800f338:	fa1f f38c 	uxth.w	r3, ip
 800f33c:	eba3 030e 	sub.w	r3, r3, lr
 800f340:	4403      	add	r3, r0
 800f342:	0c12      	lsrs	r2, r2, #16
 800f344:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f348:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f352:	45c1      	cmp	r9, r8
 800f354:	f841 3b04 	str.w	r3, [r1], #4
 800f358:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f35c:	d2e6      	bcs.n	800f32c <quorem+0xa4>
 800f35e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f366:	b922      	cbnz	r2, 800f372 <quorem+0xea>
 800f368:	3b04      	subs	r3, #4
 800f36a:	429d      	cmp	r5, r3
 800f36c:	461a      	mov	r2, r3
 800f36e:	d30b      	bcc.n	800f388 <quorem+0x100>
 800f370:	613c      	str	r4, [r7, #16]
 800f372:	3601      	adds	r6, #1
 800f374:	4630      	mov	r0, r6
 800f376:	b003      	add	sp, #12
 800f378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f37c:	6812      	ldr	r2, [r2, #0]
 800f37e:	3b04      	subs	r3, #4
 800f380:	2a00      	cmp	r2, #0
 800f382:	d1cb      	bne.n	800f31c <quorem+0x94>
 800f384:	3c01      	subs	r4, #1
 800f386:	e7c6      	b.n	800f316 <quorem+0x8e>
 800f388:	6812      	ldr	r2, [r2, #0]
 800f38a:	3b04      	subs	r3, #4
 800f38c:	2a00      	cmp	r2, #0
 800f38e:	d1ef      	bne.n	800f370 <quorem+0xe8>
 800f390:	3c01      	subs	r4, #1
 800f392:	e7ea      	b.n	800f36a <quorem+0xe2>
 800f394:	2000      	movs	r0, #0
 800f396:	e7ee      	b.n	800f376 <quorem+0xee>

0800f398 <_dtoa_r>:
 800f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39c:	ed2d 8b02 	vpush	{d8}
 800f3a0:	b091      	sub	sp, #68	@ 0x44
 800f3a2:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f3a6:	9107      	str	r1, [sp, #28]
 800f3a8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800f3aa:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f3ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3ae:	ec55 4b10 	vmov	r4, r5, d0
 800f3b2:	4681      	mov	r9, r0
 800f3b4:	930d      	str	r3, [sp, #52]	@ 0x34
 800f3b6:	b149      	cbz	r1, 800f3cc <_dtoa_r+0x34>
 800f3b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f3ba:	604a      	str	r2, [r1, #4]
 800f3bc:	2301      	movs	r3, #1
 800f3be:	4093      	lsls	r3, r2
 800f3c0:	608b      	str	r3, [r1, #8]
 800f3c2:	f000 fd4c 	bl	800fe5e <_Bfree>
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 800f3cc:	1e2b      	subs	r3, r5, #0
 800f3ce:	bfbb      	ittet	lt
 800f3d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f3d4:	9303      	strlt	r3, [sp, #12]
 800f3d6:	2300      	movge	r3, #0
 800f3d8:	2201      	movlt	r2, #1
 800f3da:	bfac      	ite	ge
 800f3dc:	6033      	strge	r3, [r6, #0]
 800f3de:	6032      	strlt	r2, [r6, #0]
 800f3e0:	4b91      	ldr	r3, [pc, #580]	@ (800f628 <_dtoa_r+0x290>)
 800f3e2:	9e03      	ldr	r6, [sp, #12]
 800f3e4:	43b3      	bics	r3, r6
 800f3e6:	d114      	bne.n	800f412 <_dtoa_r+0x7a>
 800f3e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f3ee:	6013      	str	r3, [r2, #0]
 800f3f0:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f3f4:	4323      	orrs	r3, r4
 800f3f6:	f000 84df 	beq.w	800fdb8 <_dtoa_r+0xa20>
 800f3fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f3fc:	4f8b      	ldr	r7, [pc, #556]	@ (800f62c <_dtoa_r+0x294>)
 800f3fe:	b113      	cbz	r3, 800f406 <_dtoa_r+0x6e>
 800f400:	1cfb      	adds	r3, r7, #3
 800f402:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f404:	6013      	str	r3, [r2, #0]
 800f406:	4638      	mov	r0, r7
 800f408:	b011      	add	sp, #68	@ 0x44
 800f40a:	ecbd 8b02 	vpop	{d8}
 800f40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f412:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f416:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f41e:	d109      	bne.n	800f434 <_dtoa_r+0x9c>
 800f420:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f422:	2301      	movs	r3, #1
 800f424:	6013      	str	r3, [r2, #0]
 800f426:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f428:	b113      	cbz	r3, 800f430 <_dtoa_r+0x98>
 800f42a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f42c:	4b80      	ldr	r3, [pc, #512]	@ (800f630 <_dtoa_r+0x298>)
 800f42e:	6013      	str	r3, [r2, #0]
 800f430:	4f80      	ldr	r7, [pc, #512]	@ (800f634 <_dtoa_r+0x29c>)
 800f432:	e7e8      	b.n	800f406 <_dtoa_r+0x6e>
 800f434:	aa0e      	add	r2, sp, #56	@ 0x38
 800f436:	a90f      	add	r1, sp, #60	@ 0x3c
 800f438:	4648      	mov	r0, r9
 800f43a:	eeb0 0b48 	vmov.f64	d0, d8
 800f43e:	f000 ffc5 	bl	80103cc <__d2b>
 800f442:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f446:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f448:	9001      	str	r0, [sp, #4]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d045      	beq.n	800f4da <_dtoa_r+0x142>
 800f44e:	eeb0 7b48 	vmov.f64	d7, d8
 800f452:	ee18 1a90 	vmov	r1, s17
 800f456:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f45a:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f45e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f462:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f466:	2500      	movs	r5, #0
 800f468:	ee07 1a90 	vmov	s15, r1
 800f46c:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f470:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 800f610 <_dtoa_r+0x278>
 800f474:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f478:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 800f618 <_dtoa_r+0x280>
 800f47c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f480:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 800f620 <_dtoa_r+0x288>
 800f484:	ee07 3a90 	vmov	s15, r3
 800f488:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f48c:	eeb0 7b46 	vmov.f64	d7, d6
 800f490:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f494:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f498:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a0:	ee16 8a90 	vmov	r8, s13
 800f4a4:	d508      	bpl.n	800f4b8 <_dtoa_r+0x120>
 800f4a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f4aa:	eeb4 6b47 	vcmp.f64	d6, d7
 800f4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b2:	bf18      	it	ne
 800f4b4:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800f4b8:	f1b8 0f16 	cmp.w	r8, #22
 800f4bc:	d82b      	bhi.n	800f516 <_dtoa_r+0x17e>
 800f4be:	495e      	ldr	r1, [pc, #376]	@ (800f638 <_dtoa_r+0x2a0>)
 800f4c0:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f4c4:	ed91 7b00 	vldr	d7, [r1]
 800f4c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d0:	d501      	bpl.n	800f4d6 <_dtoa_r+0x13e>
 800f4d2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f4d6:	2100      	movs	r1, #0
 800f4d8:	e01e      	b.n	800f518 <_dtoa_r+0x180>
 800f4da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4dc:	4413      	add	r3, r2
 800f4de:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f4e2:	2920      	cmp	r1, #32
 800f4e4:	bfc1      	itttt	gt
 800f4e6:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f4ea:	408e      	lslgt	r6, r1
 800f4ec:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f4f0:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f4f4:	bfd6      	itet	le
 800f4f6:	f1c1 0120 	rsble	r1, r1, #32
 800f4fa:	4331      	orrgt	r1, r6
 800f4fc:	fa04 f101 	lslle.w	r1, r4, r1
 800f500:	ee07 1a90 	vmov	s15, r1
 800f504:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f508:	3b01      	subs	r3, #1
 800f50a:	ee17 1a90 	vmov	r1, s15
 800f50e:	2501      	movs	r5, #1
 800f510:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f514:	e7a8      	b.n	800f468 <_dtoa_r+0xd0>
 800f516:	2101      	movs	r1, #1
 800f518:	1ad2      	subs	r2, r2, r3
 800f51a:	1e53      	subs	r3, r2, #1
 800f51c:	9306      	str	r3, [sp, #24]
 800f51e:	bf45      	ittet	mi
 800f520:	f1c2 0301 	rsbmi	r3, r2, #1
 800f524:	9305      	strmi	r3, [sp, #20]
 800f526:	2300      	movpl	r3, #0
 800f528:	2300      	movmi	r3, #0
 800f52a:	bf4c      	ite	mi
 800f52c:	9306      	strmi	r3, [sp, #24]
 800f52e:	9305      	strpl	r3, [sp, #20]
 800f530:	f1b8 0f00 	cmp.w	r8, #0
 800f534:	910c      	str	r1, [sp, #48]	@ 0x30
 800f536:	db18      	blt.n	800f56a <_dtoa_r+0x1d2>
 800f538:	9b06      	ldr	r3, [sp, #24]
 800f53a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f53e:	4443      	add	r3, r8
 800f540:	9306      	str	r3, [sp, #24]
 800f542:	2300      	movs	r3, #0
 800f544:	9a07      	ldr	r2, [sp, #28]
 800f546:	2a09      	cmp	r2, #9
 800f548:	d84a      	bhi.n	800f5e0 <_dtoa_r+0x248>
 800f54a:	2a05      	cmp	r2, #5
 800f54c:	bfc4      	itt	gt
 800f54e:	3a04      	subgt	r2, #4
 800f550:	9207      	strgt	r2, [sp, #28]
 800f552:	9a07      	ldr	r2, [sp, #28]
 800f554:	f1a2 0202 	sub.w	r2, r2, #2
 800f558:	bfcc      	ite	gt
 800f55a:	2400      	movgt	r4, #0
 800f55c:	2401      	movle	r4, #1
 800f55e:	2a03      	cmp	r2, #3
 800f560:	d849      	bhi.n	800f5f6 <_dtoa_r+0x25e>
 800f562:	e8df f002 	tbb	[pc, r2]
 800f566:	2f0b      	.short	0x2f0b
 800f568:	3b2d      	.short	0x3b2d
 800f56a:	9b05      	ldr	r3, [sp, #20]
 800f56c:	2200      	movs	r2, #0
 800f56e:	eba3 0308 	sub.w	r3, r3, r8
 800f572:	9305      	str	r3, [sp, #20]
 800f574:	920a      	str	r2, [sp, #40]	@ 0x28
 800f576:	f1c8 0300 	rsb	r3, r8, #0
 800f57a:	e7e3      	b.n	800f544 <_dtoa_r+0x1ac>
 800f57c:	2200      	movs	r2, #0
 800f57e:	9208      	str	r2, [sp, #32]
 800f580:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f582:	2a00      	cmp	r2, #0
 800f584:	dc3a      	bgt.n	800f5fc <_dtoa_r+0x264>
 800f586:	f04f 0b01 	mov.w	fp, #1
 800f58a:	46da      	mov	sl, fp
 800f58c:	465a      	mov	r2, fp
 800f58e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f592:	2100      	movs	r1, #0
 800f594:	2004      	movs	r0, #4
 800f596:	f100 0614 	add.w	r6, r0, #20
 800f59a:	4296      	cmp	r6, r2
 800f59c:	d933      	bls.n	800f606 <_dtoa_r+0x26e>
 800f59e:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 800f5a2:	4648      	mov	r0, r9
 800f5a4:	9304      	str	r3, [sp, #16]
 800f5a6:	f000 fc35 	bl	800fe14 <_Balloc>
 800f5aa:	9b04      	ldr	r3, [sp, #16]
 800f5ac:	4607      	mov	r7, r0
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	d148      	bne.n	800f644 <_dtoa_r+0x2ac>
 800f5b2:	4b22      	ldr	r3, [pc, #136]	@ (800f63c <_dtoa_r+0x2a4>)
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	f240 11af 	movw	r1, #431	@ 0x1af
 800f5ba:	4821      	ldr	r0, [pc, #132]	@ (800f640 <_dtoa_r+0x2a8>)
 800f5bc:	f001 f80a 	bl	80105d4 <__assert_func>
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	e7dc      	b.n	800f57e <_dtoa_r+0x1e6>
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	9208      	str	r2, [sp, #32]
 800f5c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5ca:	eb08 0b02 	add.w	fp, r8, r2
 800f5ce:	f10b 0a01 	add.w	sl, fp, #1
 800f5d2:	4652      	mov	r2, sl
 800f5d4:	2a01      	cmp	r2, #1
 800f5d6:	bfb8      	it	lt
 800f5d8:	2201      	movlt	r2, #1
 800f5da:	e7da      	b.n	800f592 <_dtoa_r+0x1fa>
 800f5dc:	2201      	movs	r2, #1
 800f5de:	e7f2      	b.n	800f5c6 <_dtoa_r+0x22e>
 800f5e0:	2401      	movs	r4, #1
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f5e8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f5ec:	2100      	movs	r1, #0
 800f5ee:	46da      	mov	sl, fp
 800f5f0:	2212      	movs	r2, #18
 800f5f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5f4:	e7cd      	b.n	800f592 <_dtoa_r+0x1fa>
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	9208      	str	r2, [sp, #32]
 800f5fa:	e7f5      	b.n	800f5e8 <_dtoa_r+0x250>
 800f5fc:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800f600:	46da      	mov	sl, fp
 800f602:	465a      	mov	r2, fp
 800f604:	e7c5      	b.n	800f592 <_dtoa_r+0x1fa>
 800f606:	3101      	adds	r1, #1
 800f608:	0040      	lsls	r0, r0, #1
 800f60a:	e7c4      	b.n	800f596 <_dtoa_r+0x1fe>
 800f60c:	f3af 8000 	nop.w
 800f610:	636f4361 	.word	0x636f4361
 800f614:	3fd287a7 	.word	0x3fd287a7
 800f618:	8b60c8b3 	.word	0x8b60c8b3
 800f61c:	3fc68a28 	.word	0x3fc68a28
 800f620:	509f79fb 	.word	0x509f79fb
 800f624:	3fd34413 	.word	0x3fd34413
 800f628:	7ff00000 	.word	0x7ff00000
 800f62c:	08011bc5 	.word	0x08011bc5
 800f630:	08011b9b 	.word	0x08011b9b
 800f634:	08011b9a 	.word	0x08011b9a
 800f638:	08011cc0 	.word	0x08011cc0
 800f63c:	08011bc9 	.word	0x08011bc9
 800f640:	08011bda 	.word	0x08011bda
 800f644:	f1ba 0f0e 	cmp.w	sl, #14
 800f648:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 800f64c:	d86f      	bhi.n	800f72e <_dtoa_r+0x396>
 800f64e:	2c00      	cmp	r4, #0
 800f650:	d06d      	beq.n	800f72e <_dtoa_r+0x396>
 800f652:	f1b8 0f00 	cmp.w	r8, #0
 800f656:	f340 80c2 	ble.w	800f7de <_dtoa_r+0x446>
 800f65a:	4aca      	ldr	r2, [pc, #808]	@ (800f984 <_dtoa_r+0x5ec>)
 800f65c:	f008 010f 	and.w	r1, r8, #15
 800f660:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f664:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f668:	ed92 7b00 	vldr	d7, [r2]
 800f66c:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f670:	f000 80a9 	beq.w	800f7c6 <_dtoa_r+0x42e>
 800f674:	4ac4      	ldr	r2, [pc, #784]	@ (800f988 <_dtoa_r+0x5f0>)
 800f676:	ed92 6b08 	vldr	d6, [r2, #32]
 800f67a:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f67e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f682:	f001 010f 	and.w	r1, r1, #15
 800f686:	2203      	movs	r2, #3
 800f688:	48bf      	ldr	r0, [pc, #764]	@ (800f988 <_dtoa_r+0x5f0>)
 800f68a:	2900      	cmp	r1, #0
 800f68c:	f040 809d 	bne.w	800f7ca <_dtoa_r+0x432>
 800f690:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f694:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f698:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f69c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f69e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f6a2:	2900      	cmp	r1, #0
 800f6a4:	f000 80c1 	beq.w	800f82a <_dtoa_r+0x492>
 800f6a8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f6ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b4:	f140 80b9 	bpl.w	800f82a <_dtoa_r+0x492>
 800f6b8:	f1ba 0f00 	cmp.w	sl, #0
 800f6bc:	f000 80b5 	beq.w	800f82a <_dtoa_r+0x492>
 800f6c0:	f1bb 0f00 	cmp.w	fp, #0
 800f6c4:	dd31      	ble.n	800f72a <_dtoa_r+0x392>
 800f6c6:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f6ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6d2:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800f6d6:	9104      	str	r1, [sp, #16]
 800f6d8:	3201      	adds	r2, #1
 800f6da:	465c      	mov	r4, fp
 800f6dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f6e0:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f6e4:	ee07 2a90 	vmov	s15, r2
 800f6e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f6ec:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f6f0:	ee15 2a90 	vmov	r2, s11
 800f6f4:	ec51 0b15 	vmov	r0, r1, d5
 800f6f8:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f6fc:	2c00      	cmp	r4, #0
 800f6fe:	f040 8098 	bne.w	800f832 <_dtoa_r+0x49a>
 800f702:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f706:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f70a:	ec41 0b17 	vmov	d7, r0, r1
 800f70e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f716:	f300 8260 	bgt.w	800fbda <_dtoa_r+0x842>
 800f71a:	eeb1 7b47 	vneg.f64	d7, d7
 800f71e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f726:	f100 80f5 	bmi.w	800f914 <_dtoa_r+0x57c>
 800f72a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f72e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f730:	2a00      	cmp	r2, #0
 800f732:	f2c0 812b 	blt.w	800f98c <_dtoa_r+0x5f4>
 800f736:	f1b8 0f0e 	cmp.w	r8, #14
 800f73a:	f300 8127 	bgt.w	800f98c <_dtoa_r+0x5f4>
 800f73e:	4b91      	ldr	r3, [pc, #580]	@ (800f984 <_dtoa_r+0x5ec>)
 800f740:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f744:	ed93 6b00 	vldr	d6, [r3]
 800f748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	da03      	bge.n	800f756 <_dtoa_r+0x3be>
 800f74e:	f1ba 0f00 	cmp.w	sl, #0
 800f752:	f340 80d2 	ble.w	800f8fa <_dtoa_r+0x562>
 800f756:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f75a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f75e:	463e      	mov	r6, r7
 800f760:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f764:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f768:	ee15 3a10 	vmov	r3, s10
 800f76c:	3330      	adds	r3, #48	@ 0x30
 800f76e:	f806 3b01 	strb.w	r3, [r6], #1
 800f772:	1bf3      	subs	r3, r6, r7
 800f774:	459a      	cmp	sl, r3
 800f776:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f77a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f77e:	f040 80f8 	bne.w	800f972 <_dtoa_r+0x5da>
 800f782:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f786:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78e:	f300 80dd 	bgt.w	800f94c <_dtoa_r+0x5b4>
 800f792:	eeb4 7b46 	vcmp.f64	d7, d6
 800f796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f79a:	d104      	bne.n	800f7a6 <_dtoa_r+0x40e>
 800f79c:	ee15 3a10 	vmov	r3, s10
 800f7a0:	07db      	lsls	r3, r3, #31
 800f7a2:	f100 80d3 	bmi.w	800f94c <_dtoa_r+0x5b4>
 800f7a6:	9901      	ldr	r1, [sp, #4]
 800f7a8:	4648      	mov	r0, r9
 800f7aa:	f000 fb58 	bl	800fe5e <_Bfree>
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f7b2:	7033      	strb	r3, [r6, #0]
 800f7b4:	f108 0301 	add.w	r3, r8, #1
 800f7b8:	6013      	str	r3, [r2, #0]
 800f7ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f43f ae22 	beq.w	800f406 <_dtoa_r+0x6e>
 800f7c2:	601e      	str	r6, [r3, #0]
 800f7c4:	e61f      	b.n	800f406 <_dtoa_r+0x6e>
 800f7c6:	2202      	movs	r2, #2
 800f7c8:	e75e      	b.n	800f688 <_dtoa_r+0x2f0>
 800f7ca:	07cc      	lsls	r4, r1, #31
 800f7cc:	d504      	bpl.n	800f7d8 <_dtoa_r+0x440>
 800f7ce:	ed90 6b00 	vldr	d6, [r0]
 800f7d2:	3201      	adds	r2, #1
 800f7d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7d8:	1049      	asrs	r1, r1, #1
 800f7da:	3008      	adds	r0, #8
 800f7dc:	e755      	b.n	800f68a <_dtoa_r+0x2f2>
 800f7de:	d022      	beq.n	800f826 <_dtoa_r+0x48e>
 800f7e0:	f1c8 0100 	rsb	r1, r8, #0
 800f7e4:	4a67      	ldr	r2, [pc, #412]	@ (800f984 <_dtoa_r+0x5ec>)
 800f7e6:	f001 000f 	and.w	r0, r1, #15
 800f7ea:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f7ee:	ed92 7b00 	vldr	d7, [r2]
 800f7f2:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f7f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7fa:	4863      	ldr	r0, [pc, #396]	@ (800f988 <_dtoa_r+0x5f0>)
 800f7fc:	1109      	asrs	r1, r1, #4
 800f7fe:	2400      	movs	r4, #0
 800f800:	2202      	movs	r2, #2
 800f802:	b929      	cbnz	r1, 800f810 <_dtoa_r+0x478>
 800f804:	2c00      	cmp	r4, #0
 800f806:	f43f af49 	beq.w	800f69c <_dtoa_r+0x304>
 800f80a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f80e:	e745      	b.n	800f69c <_dtoa_r+0x304>
 800f810:	07ce      	lsls	r6, r1, #31
 800f812:	d505      	bpl.n	800f820 <_dtoa_r+0x488>
 800f814:	ed90 6b00 	vldr	d6, [r0]
 800f818:	3201      	adds	r2, #1
 800f81a:	2401      	movs	r4, #1
 800f81c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f820:	1049      	asrs	r1, r1, #1
 800f822:	3008      	adds	r0, #8
 800f824:	e7ed      	b.n	800f802 <_dtoa_r+0x46a>
 800f826:	2202      	movs	r2, #2
 800f828:	e738      	b.n	800f69c <_dtoa_r+0x304>
 800f82a:	f8cd 8010 	str.w	r8, [sp, #16]
 800f82e:	4654      	mov	r4, sl
 800f830:	e754      	b.n	800f6dc <_dtoa_r+0x344>
 800f832:	4a54      	ldr	r2, [pc, #336]	@ (800f984 <_dtoa_r+0x5ec>)
 800f834:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f838:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f83c:	9a08      	ldr	r2, [sp, #32]
 800f83e:	ec41 0b17 	vmov	d7, r0, r1
 800f842:	443c      	add	r4, r7
 800f844:	b34a      	cbz	r2, 800f89a <_dtoa_r+0x502>
 800f846:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f84a:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f84e:	463e      	mov	r6, r7
 800f850:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f854:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f858:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f85c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f860:	ee14 2a90 	vmov	r2, s9
 800f864:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f868:	3230      	adds	r2, #48	@ 0x30
 800f86a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f86e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f876:	f806 2b01 	strb.w	r2, [r6], #1
 800f87a:	d438      	bmi.n	800f8ee <_dtoa_r+0x556>
 800f87c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f880:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f888:	d462      	bmi.n	800f950 <_dtoa_r+0x5b8>
 800f88a:	42a6      	cmp	r6, r4
 800f88c:	f43f af4d 	beq.w	800f72a <_dtoa_r+0x392>
 800f890:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f894:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f898:	e7e0      	b.n	800f85c <_dtoa_r+0x4c4>
 800f89a:	4621      	mov	r1, r4
 800f89c:	463e      	mov	r6, r7
 800f89e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f8a2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f8a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f8aa:	ee14 2a90 	vmov	r2, s9
 800f8ae:	3230      	adds	r2, #48	@ 0x30
 800f8b0:	f806 2b01 	strb.w	r2, [r6], #1
 800f8b4:	42a6      	cmp	r6, r4
 800f8b6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f8ba:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f8be:	d119      	bne.n	800f8f4 <_dtoa_r+0x55c>
 800f8c0:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f8c4:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f8c8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d0:	dc3e      	bgt.n	800f950 <_dtoa_r+0x5b8>
 800f8d2:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f8d6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8de:	f57f af24 	bpl.w	800f72a <_dtoa_r+0x392>
 800f8e2:	460e      	mov	r6, r1
 800f8e4:	3901      	subs	r1, #1
 800f8e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f8ea:	2b30      	cmp	r3, #48	@ 0x30
 800f8ec:	d0f9      	beq.n	800f8e2 <_dtoa_r+0x54a>
 800f8ee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f8f2:	e758      	b.n	800f7a6 <_dtoa_r+0x40e>
 800f8f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f8f8:	e7d5      	b.n	800f8a6 <_dtoa_r+0x50e>
 800f8fa:	d10b      	bne.n	800f914 <_dtoa_r+0x57c>
 800f8fc:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f900:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f904:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f908:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f910:	f2c0 8160 	blt.w	800fbd4 <_dtoa_r+0x83c>
 800f914:	2400      	movs	r4, #0
 800f916:	4625      	mov	r5, r4
 800f918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f91a:	43db      	mvns	r3, r3
 800f91c:	9304      	str	r3, [sp, #16]
 800f91e:	463e      	mov	r6, r7
 800f920:	f04f 0800 	mov.w	r8, #0
 800f924:	4621      	mov	r1, r4
 800f926:	4648      	mov	r0, r9
 800f928:	f000 fa99 	bl	800fe5e <_Bfree>
 800f92c:	2d00      	cmp	r5, #0
 800f92e:	d0de      	beq.n	800f8ee <_dtoa_r+0x556>
 800f930:	f1b8 0f00 	cmp.w	r8, #0
 800f934:	d005      	beq.n	800f942 <_dtoa_r+0x5aa>
 800f936:	45a8      	cmp	r8, r5
 800f938:	d003      	beq.n	800f942 <_dtoa_r+0x5aa>
 800f93a:	4641      	mov	r1, r8
 800f93c:	4648      	mov	r0, r9
 800f93e:	f000 fa8e 	bl	800fe5e <_Bfree>
 800f942:	4629      	mov	r1, r5
 800f944:	4648      	mov	r0, r9
 800f946:	f000 fa8a 	bl	800fe5e <_Bfree>
 800f94a:	e7d0      	b.n	800f8ee <_dtoa_r+0x556>
 800f94c:	f8cd 8010 	str.w	r8, [sp, #16]
 800f950:	4633      	mov	r3, r6
 800f952:	461e      	mov	r6, r3
 800f954:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f958:	2a39      	cmp	r2, #57	@ 0x39
 800f95a:	d106      	bne.n	800f96a <_dtoa_r+0x5d2>
 800f95c:	429f      	cmp	r7, r3
 800f95e:	d1f8      	bne.n	800f952 <_dtoa_r+0x5ba>
 800f960:	9a04      	ldr	r2, [sp, #16]
 800f962:	3201      	adds	r2, #1
 800f964:	9204      	str	r2, [sp, #16]
 800f966:	2230      	movs	r2, #48	@ 0x30
 800f968:	703a      	strb	r2, [r7, #0]
 800f96a:	781a      	ldrb	r2, [r3, #0]
 800f96c:	3201      	adds	r2, #1
 800f96e:	701a      	strb	r2, [r3, #0]
 800f970:	e7bd      	b.n	800f8ee <_dtoa_r+0x556>
 800f972:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f976:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f97e:	f47f aeef 	bne.w	800f760 <_dtoa_r+0x3c8>
 800f982:	e710      	b.n	800f7a6 <_dtoa_r+0x40e>
 800f984:	08011cc0 	.word	0x08011cc0
 800f988:	08011c98 	.word	0x08011c98
 800f98c:	9908      	ldr	r1, [sp, #32]
 800f98e:	2900      	cmp	r1, #0
 800f990:	f000 80e3 	beq.w	800fb5a <_dtoa_r+0x7c2>
 800f994:	9907      	ldr	r1, [sp, #28]
 800f996:	2901      	cmp	r1, #1
 800f998:	f300 80c8 	bgt.w	800fb2c <_dtoa_r+0x794>
 800f99c:	2d00      	cmp	r5, #0
 800f99e:	f000 80c1 	beq.w	800fb24 <_dtoa_r+0x78c>
 800f9a2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f9a6:	9e05      	ldr	r6, [sp, #20]
 800f9a8:	461c      	mov	r4, r3
 800f9aa:	9304      	str	r3, [sp, #16]
 800f9ac:	9b05      	ldr	r3, [sp, #20]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	9305      	str	r3, [sp, #20]
 800f9b2:	9b06      	ldr	r3, [sp, #24]
 800f9b4:	2101      	movs	r1, #1
 800f9b6:	4413      	add	r3, r2
 800f9b8:	4648      	mov	r0, r9
 800f9ba:	9306      	str	r3, [sp, #24]
 800f9bc:	f000 faea 	bl	800ff94 <__i2b>
 800f9c0:	9b04      	ldr	r3, [sp, #16]
 800f9c2:	4605      	mov	r5, r0
 800f9c4:	b166      	cbz	r6, 800f9e0 <_dtoa_r+0x648>
 800f9c6:	9a06      	ldr	r2, [sp, #24]
 800f9c8:	2a00      	cmp	r2, #0
 800f9ca:	dd09      	ble.n	800f9e0 <_dtoa_r+0x648>
 800f9cc:	42b2      	cmp	r2, r6
 800f9ce:	9905      	ldr	r1, [sp, #20]
 800f9d0:	bfa8      	it	ge
 800f9d2:	4632      	movge	r2, r6
 800f9d4:	1a89      	subs	r1, r1, r2
 800f9d6:	9105      	str	r1, [sp, #20]
 800f9d8:	9906      	ldr	r1, [sp, #24]
 800f9da:	1ab6      	subs	r6, r6, r2
 800f9dc:	1a8a      	subs	r2, r1, r2
 800f9de:	9206      	str	r2, [sp, #24]
 800f9e0:	b1fb      	cbz	r3, 800fa22 <_dtoa_r+0x68a>
 800f9e2:	9a08      	ldr	r2, [sp, #32]
 800f9e4:	2a00      	cmp	r2, #0
 800f9e6:	f000 80bc 	beq.w	800fb62 <_dtoa_r+0x7ca>
 800f9ea:	b19c      	cbz	r4, 800fa14 <_dtoa_r+0x67c>
 800f9ec:	4629      	mov	r1, r5
 800f9ee:	4622      	mov	r2, r4
 800f9f0:	4648      	mov	r0, r9
 800f9f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9f4:	f000 fb8e 	bl	8010114 <__pow5mult>
 800f9f8:	9a01      	ldr	r2, [sp, #4]
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	4605      	mov	r5, r0
 800f9fe:	4648      	mov	r0, r9
 800fa00:	f000 fade 	bl	800ffc0 <__multiply>
 800fa04:	9901      	ldr	r1, [sp, #4]
 800fa06:	9004      	str	r0, [sp, #16]
 800fa08:	4648      	mov	r0, r9
 800fa0a:	f000 fa28 	bl	800fe5e <_Bfree>
 800fa0e:	9a04      	ldr	r2, [sp, #16]
 800fa10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa12:	9201      	str	r2, [sp, #4]
 800fa14:	1b1a      	subs	r2, r3, r4
 800fa16:	d004      	beq.n	800fa22 <_dtoa_r+0x68a>
 800fa18:	9901      	ldr	r1, [sp, #4]
 800fa1a:	4648      	mov	r0, r9
 800fa1c:	f000 fb7a 	bl	8010114 <__pow5mult>
 800fa20:	9001      	str	r0, [sp, #4]
 800fa22:	2101      	movs	r1, #1
 800fa24:	4648      	mov	r0, r9
 800fa26:	f000 fab5 	bl	800ff94 <__i2b>
 800fa2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f000 81cb 	beq.w	800fdca <_dtoa_r+0xa32>
 800fa34:	461a      	mov	r2, r3
 800fa36:	4601      	mov	r1, r0
 800fa38:	4648      	mov	r0, r9
 800fa3a:	f000 fb6b 	bl	8010114 <__pow5mult>
 800fa3e:	9b07      	ldr	r3, [sp, #28]
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	4604      	mov	r4, r0
 800fa44:	f300 8095 	bgt.w	800fb72 <_dtoa_r+0x7da>
 800fa48:	9b02      	ldr	r3, [sp, #8]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	f040 808b 	bne.w	800fb66 <_dtoa_r+0x7ce>
 800fa50:	9b03      	ldr	r3, [sp, #12]
 800fa52:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fa56:	2a00      	cmp	r2, #0
 800fa58:	f040 8087 	bne.w	800fb6a <_dtoa_r+0x7d2>
 800fa5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fa60:	0d12      	lsrs	r2, r2, #20
 800fa62:	0512      	lsls	r2, r2, #20
 800fa64:	2a00      	cmp	r2, #0
 800fa66:	f000 8082 	beq.w	800fb6e <_dtoa_r+0x7d6>
 800fa6a:	9b05      	ldr	r3, [sp, #20]
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	9305      	str	r3, [sp, #20]
 800fa70:	9b06      	ldr	r3, [sp, #24]
 800fa72:	3301      	adds	r3, #1
 800fa74:	9306      	str	r3, [sp, #24]
 800fa76:	2301      	movs	r3, #1
 800fa78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 81aa 	beq.w	800fdd6 <_dtoa_r+0xa3e>
 800fa82:	6922      	ldr	r2, [r4, #16]
 800fa84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fa88:	6910      	ldr	r0, [r2, #16]
 800fa8a:	f000 fa37 	bl	800fefc <__hi0bits>
 800fa8e:	f1c0 0020 	rsb	r0, r0, #32
 800fa92:	9b06      	ldr	r3, [sp, #24]
 800fa94:	4418      	add	r0, r3
 800fa96:	f010 001f 	ands.w	r0, r0, #31
 800fa9a:	d076      	beq.n	800fb8a <_dtoa_r+0x7f2>
 800fa9c:	f1c0 0220 	rsb	r2, r0, #32
 800faa0:	2a04      	cmp	r2, #4
 800faa2:	dd69      	ble.n	800fb78 <_dtoa_r+0x7e0>
 800faa4:	9b05      	ldr	r3, [sp, #20]
 800faa6:	f1c0 001c 	rsb	r0, r0, #28
 800faaa:	4403      	add	r3, r0
 800faac:	9305      	str	r3, [sp, #20]
 800faae:	9b06      	ldr	r3, [sp, #24]
 800fab0:	4406      	add	r6, r0
 800fab2:	4403      	add	r3, r0
 800fab4:	9306      	str	r3, [sp, #24]
 800fab6:	9b05      	ldr	r3, [sp, #20]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	dd05      	ble.n	800fac8 <_dtoa_r+0x730>
 800fabc:	9901      	ldr	r1, [sp, #4]
 800fabe:	461a      	mov	r2, r3
 800fac0:	4648      	mov	r0, r9
 800fac2:	f000 fb67 	bl	8010194 <__lshift>
 800fac6:	9001      	str	r0, [sp, #4]
 800fac8:	9b06      	ldr	r3, [sp, #24]
 800faca:	2b00      	cmp	r3, #0
 800facc:	dd05      	ble.n	800fada <_dtoa_r+0x742>
 800face:	4621      	mov	r1, r4
 800fad0:	461a      	mov	r2, r3
 800fad2:	4648      	mov	r0, r9
 800fad4:	f000 fb5e 	bl	8010194 <__lshift>
 800fad8:	4604      	mov	r4, r0
 800fada:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d056      	beq.n	800fb8e <_dtoa_r+0x7f6>
 800fae0:	9801      	ldr	r0, [sp, #4]
 800fae2:	4621      	mov	r1, r4
 800fae4:	f000 fbc2 	bl	801026c <__mcmp>
 800fae8:	2800      	cmp	r0, #0
 800faea:	da50      	bge.n	800fb8e <_dtoa_r+0x7f6>
 800faec:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800faf0:	9304      	str	r3, [sp, #16]
 800faf2:	9901      	ldr	r1, [sp, #4]
 800faf4:	2300      	movs	r3, #0
 800faf6:	220a      	movs	r2, #10
 800faf8:	4648      	mov	r0, r9
 800fafa:	f000 f9b9 	bl	800fe70 <__multadd>
 800fafe:	9b08      	ldr	r3, [sp, #32]
 800fb00:	9001      	str	r0, [sp, #4]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f000 8169 	beq.w	800fdda <_dtoa_r+0xa42>
 800fb08:	4629      	mov	r1, r5
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	220a      	movs	r2, #10
 800fb0e:	4648      	mov	r0, r9
 800fb10:	f000 f9ae 	bl	800fe70 <__multadd>
 800fb14:	f1bb 0f00 	cmp.w	fp, #0
 800fb18:	4605      	mov	r5, r0
 800fb1a:	dc64      	bgt.n	800fbe6 <_dtoa_r+0x84e>
 800fb1c:	9b07      	ldr	r3, [sp, #28]
 800fb1e:	2b02      	cmp	r3, #2
 800fb20:	dc3e      	bgt.n	800fba0 <_dtoa_r+0x808>
 800fb22:	e060      	b.n	800fbe6 <_dtoa_r+0x84e>
 800fb24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb26:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fb2a:	e73c      	b.n	800f9a6 <_dtoa_r+0x60e>
 800fb2c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800fb30:	42a3      	cmp	r3, r4
 800fb32:	bfbf      	itttt	lt
 800fb34:	1ae2      	sublt	r2, r4, r3
 800fb36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fb38:	189b      	addlt	r3, r3, r2
 800fb3a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800fb3c:	bfae      	itee	ge
 800fb3e:	1b1c      	subge	r4, r3, r4
 800fb40:	4623      	movlt	r3, r4
 800fb42:	2400      	movlt	r4, #0
 800fb44:	f1ba 0f00 	cmp.w	sl, #0
 800fb48:	bfb5      	itete	lt
 800fb4a:	9a05      	ldrlt	r2, [sp, #20]
 800fb4c:	9e05      	ldrge	r6, [sp, #20]
 800fb4e:	eba2 060a 	sublt.w	r6, r2, sl
 800fb52:	4652      	movge	r2, sl
 800fb54:	bfb8      	it	lt
 800fb56:	2200      	movlt	r2, #0
 800fb58:	e727      	b.n	800f9aa <_dtoa_r+0x612>
 800fb5a:	9e05      	ldr	r6, [sp, #20]
 800fb5c:	9d08      	ldr	r5, [sp, #32]
 800fb5e:	461c      	mov	r4, r3
 800fb60:	e730      	b.n	800f9c4 <_dtoa_r+0x62c>
 800fb62:	461a      	mov	r2, r3
 800fb64:	e758      	b.n	800fa18 <_dtoa_r+0x680>
 800fb66:	2300      	movs	r3, #0
 800fb68:	e786      	b.n	800fa78 <_dtoa_r+0x6e0>
 800fb6a:	9b02      	ldr	r3, [sp, #8]
 800fb6c:	e784      	b.n	800fa78 <_dtoa_r+0x6e0>
 800fb6e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fb70:	e783      	b.n	800fa7a <_dtoa_r+0x6e2>
 800fb72:	2300      	movs	r3, #0
 800fb74:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb76:	e784      	b.n	800fa82 <_dtoa_r+0x6ea>
 800fb78:	d09d      	beq.n	800fab6 <_dtoa_r+0x71e>
 800fb7a:	9b05      	ldr	r3, [sp, #20]
 800fb7c:	321c      	adds	r2, #28
 800fb7e:	4413      	add	r3, r2
 800fb80:	9305      	str	r3, [sp, #20]
 800fb82:	9b06      	ldr	r3, [sp, #24]
 800fb84:	4416      	add	r6, r2
 800fb86:	4413      	add	r3, r2
 800fb88:	e794      	b.n	800fab4 <_dtoa_r+0x71c>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	e7f5      	b.n	800fb7a <_dtoa_r+0x7e2>
 800fb8e:	f1ba 0f00 	cmp.w	sl, #0
 800fb92:	f8cd 8010 	str.w	r8, [sp, #16]
 800fb96:	46d3      	mov	fp, sl
 800fb98:	dc21      	bgt.n	800fbde <_dtoa_r+0x846>
 800fb9a:	9b07      	ldr	r3, [sp, #28]
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	dd1e      	ble.n	800fbde <_dtoa_r+0x846>
 800fba0:	f1bb 0f00 	cmp.w	fp, #0
 800fba4:	f47f aeb8 	bne.w	800f918 <_dtoa_r+0x580>
 800fba8:	4621      	mov	r1, r4
 800fbaa:	465b      	mov	r3, fp
 800fbac:	2205      	movs	r2, #5
 800fbae:	4648      	mov	r0, r9
 800fbb0:	f000 f95e 	bl	800fe70 <__multadd>
 800fbb4:	4601      	mov	r1, r0
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	9801      	ldr	r0, [sp, #4]
 800fbba:	f000 fb57 	bl	801026c <__mcmp>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	f77f aeaa 	ble.w	800f918 <_dtoa_r+0x580>
 800fbc4:	463e      	mov	r6, r7
 800fbc6:	2331      	movs	r3, #49	@ 0x31
 800fbc8:	f806 3b01 	strb.w	r3, [r6], #1
 800fbcc:	9b04      	ldr	r3, [sp, #16]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	9304      	str	r3, [sp, #16]
 800fbd2:	e6a5      	b.n	800f920 <_dtoa_r+0x588>
 800fbd4:	f8cd 8010 	str.w	r8, [sp, #16]
 800fbd8:	4654      	mov	r4, sl
 800fbda:	4625      	mov	r5, r4
 800fbdc:	e7f2      	b.n	800fbc4 <_dtoa_r+0x82c>
 800fbde:	9b08      	ldr	r3, [sp, #32]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f000 80fe 	beq.w	800fde2 <_dtoa_r+0xa4a>
 800fbe6:	2e00      	cmp	r6, #0
 800fbe8:	dd05      	ble.n	800fbf6 <_dtoa_r+0x85e>
 800fbea:	4629      	mov	r1, r5
 800fbec:	4632      	mov	r2, r6
 800fbee:	4648      	mov	r0, r9
 800fbf0:	f000 fad0 	bl	8010194 <__lshift>
 800fbf4:	4605      	mov	r5, r0
 800fbf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d057      	beq.n	800fcac <_dtoa_r+0x914>
 800fbfc:	6869      	ldr	r1, [r5, #4]
 800fbfe:	4648      	mov	r0, r9
 800fc00:	f000 f908 	bl	800fe14 <_Balloc>
 800fc04:	4606      	mov	r6, r0
 800fc06:	b920      	cbnz	r0, 800fc12 <_dtoa_r+0x87a>
 800fc08:	4b80      	ldr	r3, [pc, #512]	@ (800fe0c <_dtoa_r+0xa74>)
 800fc0a:	4602      	mov	r2, r0
 800fc0c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fc10:	e4d3      	b.n	800f5ba <_dtoa_r+0x222>
 800fc12:	692a      	ldr	r2, [r5, #16]
 800fc14:	3202      	adds	r2, #2
 800fc16:	0092      	lsls	r2, r2, #2
 800fc18:	f105 010c 	add.w	r1, r5, #12
 800fc1c:	300c      	adds	r0, #12
 800fc1e:	f000 fccb 	bl	80105b8 <memcpy>
 800fc22:	2201      	movs	r2, #1
 800fc24:	4631      	mov	r1, r6
 800fc26:	4648      	mov	r0, r9
 800fc28:	f000 fab4 	bl	8010194 <__lshift>
 800fc2c:	1c7b      	adds	r3, r7, #1
 800fc2e:	9305      	str	r3, [sp, #20]
 800fc30:	eb07 030b 	add.w	r3, r7, fp
 800fc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc36:	9b02      	ldr	r3, [sp, #8]
 800fc38:	f003 0301 	and.w	r3, r3, #1
 800fc3c:	46a8      	mov	r8, r5
 800fc3e:	9308      	str	r3, [sp, #32]
 800fc40:	4605      	mov	r5, r0
 800fc42:	9b05      	ldr	r3, [sp, #20]
 800fc44:	9801      	ldr	r0, [sp, #4]
 800fc46:	4621      	mov	r1, r4
 800fc48:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800fc4c:	f7ff fb1c 	bl	800f288 <quorem>
 800fc50:	4641      	mov	r1, r8
 800fc52:	9002      	str	r0, [sp, #8]
 800fc54:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fc58:	9801      	ldr	r0, [sp, #4]
 800fc5a:	f000 fb07 	bl	801026c <__mcmp>
 800fc5e:	462a      	mov	r2, r5
 800fc60:	9006      	str	r0, [sp, #24]
 800fc62:	4621      	mov	r1, r4
 800fc64:	4648      	mov	r0, r9
 800fc66:	f000 fb1d 	bl	80102a4 <__mdiff>
 800fc6a:	68c2      	ldr	r2, [r0, #12]
 800fc6c:	4606      	mov	r6, r0
 800fc6e:	b9fa      	cbnz	r2, 800fcb0 <_dtoa_r+0x918>
 800fc70:	4601      	mov	r1, r0
 800fc72:	9801      	ldr	r0, [sp, #4]
 800fc74:	f000 fafa 	bl	801026c <__mcmp>
 800fc78:	4602      	mov	r2, r0
 800fc7a:	4631      	mov	r1, r6
 800fc7c:	4648      	mov	r0, r9
 800fc7e:	920a      	str	r2, [sp, #40]	@ 0x28
 800fc80:	f000 f8ed 	bl	800fe5e <_Bfree>
 800fc84:	9b07      	ldr	r3, [sp, #28]
 800fc86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc88:	9e05      	ldr	r6, [sp, #20]
 800fc8a:	ea43 0102 	orr.w	r1, r3, r2
 800fc8e:	9b08      	ldr	r3, [sp, #32]
 800fc90:	4319      	orrs	r1, r3
 800fc92:	d10f      	bne.n	800fcb4 <_dtoa_r+0x91c>
 800fc94:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fc98:	d028      	beq.n	800fcec <_dtoa_r+0x954>
 800fc9a:	9b06      	ldr	r3, [sp, #24]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	dd02      	ble.n	800fca6 <_dtoa_r+0x90e>
 800fca0:	9b02      	ldr	r3, [sp, #8]
 800fca2:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fca6:	f88b a000 	strb.w	sl, [fp]
 800fcaa:	e63b      	b.n	800f924 <_dtoa_r+0x58c>
 800fcac:	4628      	mov	r0, r5
 800fcae:	e7bd      	b.n	800fc2c <_dtoa_r+0x894>
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	e7e2      	b.n	800fc7a <_dtoa_r+0x8e2>
 800fcb4:	9b06      	ldr	r3, [sp, #24]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	db04      	blt.n	800fcc4 <_dtoa_r+0x92c>
 800fcba:	9907      	ldr	r1, [sp, #28]
 800fcbc:	430b      	orrs	r3, r1
 800fcbe:	9908      	ldr	r1, [sp, #32]
 800fcc0:	430b      	orrs	r3, r1
 800fcc2:	d120      	bne.n	800fd06 <_dtoa_r+0x96e>
 800fcc4:	2a00      	cmp	r2, #0
 800fcc6:	ddee      	ble.n	800fca6 <_dtoa_r+0x90e>
 800fcc8:	9901      	ldr	r1, [sp, #4]
 800fcca:	2201      	movs	r2, #1
 800fccc:	4648      	mov	r0, r9
 800fcce:	f000 fa61 	bl	8010194 <__lshift>
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	9001      	str	r0, [sp, #4]
 800fcd6:	f000 fac9 	bl	801026c <__mcmp>
 800fcda:	2800      	cmp	r0, #0
 800fcdc:	dc03      	bgt.n	800fce6 <_dtoa_r+0x94e>
 800fcde:	d1e2      	bne.n	800fca6 <_dtoa_r+0x90e>
 800fce0:	f01a 0f01 	tst.w	sl, #1
 800fce4:	d0df      	beq.n	800fca6 <_dtoa_r+0x90e>
 800fce6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fcea:	d1d9      	bne.n	800fca0 <_dtoa_r+0x908>
 800fcec:	2339      	movs	r3, #57	@ 0x39
 800fcee:	f88b 3000 	strb.w	r3, [fp]
 800fcf2:	4633      	mov	r3, r6
 800fcf4:	461e      	mov	r6, r3
 800fcf6:	3b01      	subs	r3, #1
 800fcf8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fcfc:	2a39      	cmp	r2, #57	@ 0x39
 800fcfe:	d053      	beq.n	800fda8 <_dtoa_r+0xa10>
 800fd00:	3201      	adds	r2, #1
 800fd02:	701a      	strb	r2, [r3, #0]
 800fd04:	e60e      	b.n	800f924 <_dtoa_r+0x58c>
 800fd06:	2a00      	cmp	r2, #0
 800fd08:	dd07      	ble.n	800fd1a <_dtoa_r+0x982>
 800fd0a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fd0e:	d0ed      	beq.n	800fcec <_dtoa_r+0x954>
 800fd10:	f10a 0301 	add.w	r3, sl, #1
 800fd14:	f88b 3000 	strb.w	r3, [fp]
 800fd18:	e604      	b.n	800f924 <_dtoa_r+0x58c>
 800fd1a:	9b05      	ldr	r3, [sp, #20]
 800fd1c:	9a05      	ldr	r2, [sp, #20]
 800fd1e:	f803 ac01 	strb.w	sl, [r3, #-1]
 800fd22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d029      	beq.n	800fd7c <_dtoa_r+0x9e4>
 800fd28:	9901      	ldr	r1, [sp, #4]
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	220a      	movs	r2, #10
 800fd2e:	4648      	mov	r0, r9
 800fd30:	f000 f89e 	bl	800fe70 <__multadd>
 800fd34:	45a8      	cmp	r8, r5
 800fd36:	9001      	str	r0, [sp, #4]
 800fd38:	f04f 0300 	mov.w	r3, #0
 800fd3c:	f04f 020a 	mov.w	r2, #10
 800fd40:	4641      	mov	r1, r8
 800fd42:	4648      	mov	r0, r9
 800fd44:	d107      	bne.n	800fd56 <_dtoa_r+0x9be>
 800fd46:	f000 f893 	bl	800fe70 <__multadd>
 800fd4a:	4680      	mov	r8, r0
 800fd4c:	4605      	mov	r5, r0
 800fd4e:	9b05      	ldr	r3, [sp, #20]
 800fd50:	3301      	adds	r3, #1
 800fd52:	9305      	str	r3, [sp, #20]
 800fd54:	e775      	b.n	800fc42 <_dtoa_r+0x8aa>
 800fd56:	f000 f88b 	bl	800fe70 <__multadd>
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	4680      	mov	r8, r0
 800fd5e:	2300      	movs	r3, #0
 800fd60:	220a      	movs	r2, #10
 800fd62:	4648      	mov	r0, r9
 800fd64:	f000 f884 	bl	800fe70 <__multadd>
 800fd68:	4605      	mov	r5, r0
 800fd6a:	e7f0      	b.n	800fd4e <_dtoa_r+0x9b6>
 800fd6c:	f1bb 0f00 	cmp.w	fp, #0
 800fd70:	bfcc      	ite	gt
 800fd72:	465e      	movgt	r6, fp
 800fd74:	2601      	movle	r6, #1
 800fd76:	443e      	add	r6, r7
 800fd78:	f04f 0800 	mov.w	r8, #0
 800fd7c:	9901      	ldr	r1, [sp, #4]
 800fd7e:	2201      	movs	r2, #1
 800fd80:	4648      	mov	r0, r9
 800fd82:	f000 fa07 	bl	8010194 <__lshift>
 800fd86:	4621      	mov	r1, r4
 800fd88:	9001      	str	r0, [sp, #4]
 800fd8a:	f000 fa6f 	bl	801026c <__mcmp>
 800fd8e:	2800      	cmp	r0, #0
 800fd90:	dcaf      	bgt.n	800fcf2 <_dtoa_r+0x95a>
 800fd92:	d102      	bne.n	800fd9a <_dtoa_r+0xa02>
 800fd94:	f01a 0f01 	tst.w	sl, #1
 800fd98:	d1ab      	bne.n	800fcf2 <_dtoa_r+0x95a>
 800fd9a:	4633      	mov	r3, r6
 800fd9c:	461e      	mov	r6, r3
 800fd9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fda2:	2a30      	cmp	r2, #48	@ 0x30
 800fda4:	d0fa      	beq.n	800fd9c <_dtoa_r+0xa04>
 800fda6:	e5bd      	b.n	800f924 <_dtoa_r+0x58c>
 800fda8:	429f      	cmp	r7, r3
 800fdaa:	d1a3      	bne.n	800fcf4 <_dtoa_r+0x95c>
 800fdac:	9b04      	ldr	r3, [sp, #16]
 800fdae:	3301      	adds	r3, #1
 800fdb0:	9304      	str	r3, [sp, #16]
 800fdb2:	2331      	movs	r3, #49	@ 0x31
 800fdb4:	703b      	strb	r3, [r7, #0]
 800fdb6:	e5b5      	b.n	800f924 <_dtoa_r+0x58c>
 800fdb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fdba:	4f15      	ldr	r7, [pc, #84]	@ (800fe10 <_dtoa_r+0xa78>)
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f43f ab22 	beq.w	800f406 <_dtoa_r+0x6e>
 800fdc2:	f107 0308 	add.w	r3, r7, #8
 800fdc6:	f7ff bb1c 	b.w	800f402 <_dtoa_r+0x6a>
 800fdca:	9b07      	ldr	r3, [sp, #28]
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	f77f ae3b 	ble.w	800fa48 <_dtoa_r+0x6b0>
 800fdd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdd6:	2001      	movs	r0, #1
 800fdd8:	e65b      	b.n	800fa92 <_dtoa_r+0x6fa>
 800fdda:	f1bb 0f00 	cmp.w	fp, #0
 800fdde:	f77f aedc 	ble.w	800fb9a <_dtoa_r+0x802>
 800fde2:	463e      	mov	r6, r7
 800fde4:	9801      	ldr	r0, [sp, #4]
 800fde6:	4621      	mov	r1, r4
 800fde8:	f7ff fa4e 	bl	800f288 <quorem>
 800fdec:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fdf0:	f806 ab01 	strb.w	sl, [r6], #1
 800fdf4:	1bf2      	subs	r2, r6, r7
 800fdf6:	4593      	cmp	fp, r2
 800fdf8:	ddb8      	ble.n	800fd6c <_dtoa_r+0x9d4>
 800fdfa:	9901      	ldr	r1, [sp, #4]
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	220a      	movs	r2, #10
 800fe00:	4648      	mov	r0, r9
 800fe02:	f000 f835 	bl	800fe70 <__multadd>
 800fe06:	9001      	str	r0, [sp, #4]
 800fe08:	e7ec      	b.n	800fde4 <_dtoa_r+0xa4c>
 800fe0a:	bf00      	nop
 800fe0c:	08011bc9 	.word	0x08011bc9
 800fe10:	08011bbc 	.word	0x08011bbc

0800fe14 <_Balloc>:
 800fe14:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800fe16:	b570      	push	{r4, r5, r6, lr}
 800fe18:	4605      	mov	r5, r0
 800fe1a:	460c      	mov	r4, r1
 800fe1c:	b17b      	cbz	r3, 800fe3e <_Balloc+0x2a>
 800fe1e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800fe20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800fe24:	b9a0      	cbnz	r0, 800fe50 <_Balloc+0x3c>
 800fe26:	2101      	movs	r1, #1
 800fe28:	fa01 f604 	lsl.w	r6, r1, r4
 800fe2c:	1d72      	adds	r2, r6, #5
 800fe2e:	0092      	lsls	r2, r2, #2
 800fe30:	4628      	mov	r0, r5
 800fe32:	f000 fbed 	bl	8010610 <_calloc_r>
 800fe36:	b148      	cbz	r0, 800fe4c <_Balloc+0x38>
 800fe38:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800fe3c:	e00b      	b.n	800fe56 <_Balloc+0x42>
 800fe3e:	2221      	movs	r2, #33	@ 0x21
 800fe40:	2104      	movs	r1, #4
 800fe42:	f000 fbe5 	bl	8010610 <_calloc_r>
 800fe46:	6468      	str	r0, [r5, #68]	@ 0x44
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	d1e8      	bne.n	800fe1e <_Balloc+0xa>
 800fe4c:	2000      	movs	r0, #0
 800fe4e:	bd70      	pop	{r4, r5, r6, pc}
 800fe50:	6802      	ldr	r2, [r0, #0]
 800fe52:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800fe56:	2300      	movs	r3, #0
 800fe58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe5c:	e7f7      	b.n	800fe4e <_Balloc+0x3a>

0800fe5e <_Bfree>:
 800fe5e:	b131      	cbz	r1, 800fe6e <_Bfree+0x10>
 800fe60:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800fe62:	684a      	ldr	r2, [r1, #4]
 800fe64:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fe68:	6008      	str	r0, [r1, #0]
 800fe6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800fe6e:	4770      	bx	lr

0800fe70 <__multadd>:
 800fe70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe74:	690d      	ldr	r5, [r1, #16]
 800fe76:	4607      	mov	r7, r0
 800fe78:	460c      	mov	r4, r1
 800fe7a:	461e      	mov	r6, r3
 800fe7c:	f101 0c14 	add.w	ip, r1, #20
 800fe80:	2000      	movs	r0, #0
 800fe82:	f8dc 3000 	ldr.w	r3, [ip]
 800fe86:	b299      	uxth	r1, r3
 800fe88:	fb02 6101 	mla	r1, r2, r1, r6
 800fe8c:	0c1e      	lsrs	r6, r3, #16
 800fe8e:	0c0b      	lsrs	r3, r1, #16
 800fe90:	fb02 3306 	mla	r3, r2, r6, r3
 800fe94:	b289      	uxth	r1, r1
 800fe96:	3001      	adds	r0, #1
 800fe98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe9c:	4285      	cmp	r5, r0
 800fe9e:	f84c 1b04 	str.w	r1, [ip], #4
 800fea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fea6:	dcec      	bgt.n	800fe82 <__multadd+0x12>
 800fea8:	b30e      	cbz	r6, 800feee <__multadd+0x7e>
 800feaa:	68a3      	ldr	r3, [r4, #8]
 800feac:	42ab      	cmp	r3, r5
 800feae:	dc19      	bgt.n	800fee4 <__multadd+0x74>
 800feb0:	6861      	ldr	r1, [r4, #4]
 800feb2:	4638      	mov	r0, r7
 800feb4:	3101      	adds	r1, #1
 800feb6:	f7ff ffad 	bl	800fe14 <_Balloc>
 800feba:	4680      	mov	r8, r0
 800febc:	b928      	cbnz	r0, 800feca <__multadd+0x5a>
 800febe:	4602      	mov	r2, r0
 800fec0:	4b0c      	ldr	r3, [pc, #48]	@ (800fef4 <__multadd+0x84>)
 800fec2:	480d      	ldr	r0, [pc, #52]	@ (800fef8 <__multadd+0x88>)
 800fec4:	21ba      	movs	r1, #186	@ 0xba
 800fec6:	f000 fb85 	bl	80105d4 <__assert_func>
 800feca:	6922      	ldr	r2, [r4, #16]
 800fecc:	3202      	adds	r2, #2
 800fece:	f104 010c 	add.w	r1, r4, #12
 800fed2:	0092      	lsls	r2, r2, #2
 800fed4:	300c      	adds	r0, #12
 800fed6:	f000 fb6f 	bl	80105b8 <memcpy>
 800feda:	4621      	mov	r1, r4
 800fedc:	4638      	mov	r0, r7
 800fede:	f7ff ffbe 	bl	800fe5e <_Bfree>
 800fee2:	4644      	mov	r4, r8
 800fee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fee8:	3501      	adds	r5, #1
 800feea:	615e      	str	r6, [r3, #20]
 800feec:	6125      	str	r5, [r4, #16]
 800feee:	4620      	mov	r0, r4
 800fef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fef4:	08011bc9 	.word	0x08011bc9
 800fef8:	08011c32 	.word	0x08011c32

0800fefc <__hi0bits>:
 800fefc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ff00:	4603      	mov	r3, r0
 800ff02:	bf36      	itet	cc
 800ff04:	0403      	lslcc	r3, r0, #16
 800ff06:	2000      	movcs	r0, #0
 800ff08:	2010      	movcc	r0, #16
 800ff0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ff0e:	bf3c      	itt	cc
 800ff10:	021b      	lslcc	r3, r3, #8
 800ff12:	3008      	addcc	r0, #8
 800ff14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff18:	bf3c      	itt	cc
 800ff1a:	011b      	lslcc	r3, r3, #4
 800ff1c:	3004      	addcc	r0, #4
 800ff1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff22:	bf3c      	itt	cc
 800ff24:	009b      	lslcc	r3, r3, #2
 800ff26:	3002      	addcc	r0, #2
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	db05      	blt.n	800ff38 <__hi0bits+0x3c>
 800ff2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ff30:	f100 0001 	add.w	r0, r0, #1
 800ff34:	bf08      	it	eq
 800ff36:	2020      	moveq	r0, #32
 800ff38:	4770      	bx	lr

0800ff3a <__lo0bits>:
 800ff3a:	6803      	ldr	r3, [r0, #0]
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	f013 0007 	ands.w	r0, r3, #7
 800ff42:	d00b      	beq.n	800ff5c <__lo0bits+0x22>
 800ff44:	07d9      	lsls	r1, r3, #31
 800ff46:	d421      	bmi.n	800ff8c <__lo0bits+0x52>
 800ff48:	0798      	lsls	r0, r3, #30
 800ff4a:	bf49      	itett	mi
 800ff4c:	085b      	lsrmi	r3, r3, #1
 800ff4e:	089b      	lsrpl	r3, r3, #2
 800ff50:	2001      	movmi	r0, #1
 800ff52:	6013      	strmi	r3, [r2, #0]
 800ff54:	bf5c      	itt	pl
 800ff56:	6013      	strpl	r3, [r2, #0]
 800ff58:	2002      	movpl	r0, #2
 800ff5a:	4770      	bx	lr
 800ff5c:	b299      	uxth	r1, r3
 800ff5e:	b909      	cbnz	r1, 800ff64 <__lo0bits+0x2a>
 800ff60:	0c1b      	lsrs	r3, r3, #16
 800ff62:	2010      	movs	r0, #16
 800ff64:	b2d9      	uxtb	r1, r3
 800ff66:	b909      	cbnz	r1, 800ff6c <__lo0bits+0x32>
 800ff68:	3008      	adds	r0, #8
 800ff6a:	0a1b      	lsrs	r3, r3, #8
 800ff6c:	0719      	lsls	r1, r3, #28
 800ff6e:	bf04      	itt	eq
 800ff70:	091b      	lsreq	r3, r3, #4
 800ff72:	3004      	addeq	r0, #4
 800ff74:	0799      	lsls	r1, r3, #30
 800ff76:	bf04      	itt	eq
 800ff78:	089b      	lsreq	r3, r3, #2
 800ff7a:	3002      	addeq	r0, #2
 800ff7c:	07d9      	lsls	r1, r3, #31
 800ff7e:	d403      	bmi.n	800ff88 <__lo0bits+0x4e>
 800ff80:	085b      	lsrs	r3, r3, #1
 800ff82:	f100 0001 	add.w	r0, r0, #1
 800ff86:	d003      	beq.n	800ff90 <__lo0bits+0x56>
 800ff88:	6013      	str	r3, [r2, #0]
 800ff8a:	4770      	bx	lr
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	4770      	bx	lr
 800ff90:	2020      	movs	r0, #32
 800ff92:	4770      	bx	lr

0800ff94 <__i2b>:
 800ff94:	b510      	push	{r4, lr}
 800ff96:	460c      	mov	r4, r1
 800ff98:	2101      	movs	r1, #1
 800ff9a:	f7ff ff3b 	bl	800fe14 <_Balloc>
 800ff9e:	4602      	mov	r2, r0
 800ffa0:	b928      	cbnz	r0, 800ffae <__i2b+0x1a>
 800ffa2:	4b05      	ldr	r3, [pc, #20]	@ (800ffb8 <__i2b+0x24>)
 800ffa4:	4805      	ldr	r0, [pc, #20]	@ (800ffbc <__i2b+0x28>)
 800ffa6:	f240 1145 	movw	r1, #325	@ 0x145
 800ffaa:	f000 fb13 	bl	80105d4 <__assert_func>
 800ffae:	2301      	movs	r3, #1
 800ffb0:	6144      	str	r4, [r0, #20]
 800ffb2:	6103      	str	r3, [r0, #16]
 800ffb4:	bd10      	pop	{r4, pc}
 800ffb6:	bf00      	nop
 800ffb8:	08011bc9 	.word	0x08011bc9
 800ffbc:	08011c32 	.word	0x08011c32

0800ffc0 <__multiply>:
 800ffc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc4:	4614      	mov	r4, r2
 800ffc6:	690a      	ldr	r2, [r1, #16]
 800ffc8:	6923      	ldr	r3, [r4, #16]
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	bfa8      	it	ge
 800ffce:	4623      	movge	r3, r4
 800ffd0:	460f      	mov	r7, r1
 800ffd2:	bfa4      	itt	ge
 800ffd4:	460c      	movge	r4, r1
 800ffd6:	461f      	movge	r7, r3
 800ffd8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ffdc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ffe0:	68a3      	ldr	r3, [r4, #8]
 800ffe2:	6861      	ldr	r1, [r4, #4]
 800ffe4:	eb0a 0609 	add.w	r6, sl, r9
 800ffe8:	42b3      	cmp	r3, r6
 800ffea:	b085      	sub	sp, #20
 800ffec:	bfb8      	it	lt
 800ffee:	3101      	addlt	r1, #1
 800fff0:	f7ff ff10 	bl	800fe14 <_Balloc>
 800fff4:	b930      	cbnz	r0, 8010004 <__multiply+0x44>
 800fff6:	4602      	mov	r2, r0
 800fff8:	4b44      	ldr	r3, [pc, #272]	@ (801010c <__multiply+0x14c>)
 800fffa:	4845      	ldr	r0, [pc, #276]	@ (8010110 <__multiply+0x150>)
 800fffc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010000:	f000 fae8 	bl	80105d4 <__assert_func>
 8010004:	f100 0514 	add.w	r5, r0, #20
 8010008:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801000c:	462b      	mov	r3, r5
 801000e:	2200      	movs	r2, #0
 8010010:	4543      	cmp	r3, r8
 8010012:	d321      	bcc.n	8010058 <__multiply+0x98>
 8010014:	f107 0114 	add.w	r1, r7, #20
 8010018:	f104 0214 	add.w	r2, r4, #20
 801001c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010020:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010024:	9302      	str	r3, [sp, #8]
 8010026:	1b13      	subs	r3, r2, r4
 8010028:	3b15      	subs	r3, #21
 801002a:	f023 0303 	bic.w	r3, r3, #3
 801002e:	3304      	adds	r3, #4
 8010030:	f104 0715 	add.w	r7, r4, #21
 8010034:	42ba      	cmp	r2, r7
 8010036:	bf38      	it	cc
 8010038:	2304      	movcc	r3, #4
 801003a:	9301      	str	r3, [sp, #4]
 801003c:	9b02      	ldr	r3, [sp, #8]
 801003e:	9103      	str	r1, [sp, #12]
 8010040:	428b      	cmp	r3, r1
 8010042:	d80c      	bhi.n	801005e <__multiply+0x9e>
 8010044:	2e00      	cmp	r6, #0
 8010046:	dd03      	ble.n	8010050 <__multiply+0x90>
 8010048:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801004c:	2b00      	cmp	r3, #0
 801004e:	d05b      	beq.n	8010108 <__multiply+0x148>
 8010050:	6106      	str	r6, [r0, #16]
 8010052:	b005      	add	sp, #20
 8010054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010058:	f843 2b04 	str.w	r2, [r3], #4
 801005c:	e7d8      	b.n	8010010 <__multiply+0x50>
 801005e:	f8b1 a000 	ldrh.w	sl, [r1]
 8010062:	f1ba 0f00 	cmp.w	sl, #0
 8010066:	d024      	beq.n	80100b2 <__multiply+0xf2>
 8010068:	f104 0e14 	add.w	lr, r4, #20
 801006c:	46a9      	mov	r9, r5
 801006e:	f04f 0c00 	mov.w	ip, #0
 8010072:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010076:	f8d9 3000 	ldr.w	r3, [r9]
 801007a:	fa1f fb87 	uxth.w	fp, r7
 801007e:	b29b      	uxth	r3, r3
 8010080:	fb0a 330b 	mla	r3, sl, fp, r3
 8010084:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010088:	f8d9 7000 	ldr.w	r7, [r9]
 801008c:	4463      	add	r3, ip
 801008e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010092:	fb0a c70b 	mla	r7, sl, fp, ip
 8010096:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801009a:	b29b      	uxth	r3, r3
 801009c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80100a0:	4572      	cmp	r2, lr
 80100a2:	f849 3b04 	str.w	r3, [r9], #4
 80100a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80100aa:	d8e2      	bhi.n	8010072 <__multiply+0xb2>
 80100ac:	9b01      	ldr	r3, [sp, #4]
 80100ae:	f845 c003 	str.w	ip, [r5, r3]
 80100b2:	9b03      	ldr	r3, [sp, #12]
 80100b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80100b8:	3104      	adds	r1, #4
 80100ba:	f1b9 0f00 	cmp.w	r9, #0
 80100be:	d021      	beq.n	8010104 <__multiply+0x144>
 80100c0:	682b      	ldr	r3, [r5, #0]
 80100c2:	f104 0c14 	add.w	ip, r4, #20
 80100c6:	46ae      	mov	lr, r5
 80100c8:	f04f 0a00 	mov.w	sl, #0
 80100cc:	f8bc b000 	ldrh.w	fp, [ip]
 80100d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80100d4:	fb09 770b 	mla	r7, r9, fp, r7
 80100d8:	4457      	add	r7, sl
 80100da:	b29b      	uxth	r3, r3
 80100dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80100e0:	f84e 3b04 	str.w	r3, [lr], #4
 80100e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80100e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100ec:	f8be 3000 	ldrh.w	r3, [lr]
 80100f0:	fb09 330a 	mla	r3, r9, sl, r3
 80100f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80100f8:	4562      	cmp	r2, ip
 80100fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100fe:	d8e5      	bhi.n	80100cc <__multiply+0x10c>
 8010100:	9f01      	ldr	r7, [sp, #4]
 8010102:	51eb      	str	r3, [r5, r7]
 8010104:	3504      	adds	r5, #4
 8010106:	e799      	b.n	801003c <__multiply+0x7c>
 8010108:	3e01      	subs	r6, #1
 801010a:	e79b      	b.n	8010044 <__multiply+0x84>
 801010c:	08011bc9 	.word	0x08011bc9
 8010110:	08011c32 	.word	0x08011c32

08010114 <__pow5mult>:
 8010114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010118:	4615      	mov	r5, r2
 801011a:	f012 0203 	ands.w	r2, r2, #3
 801011e:	4607      	mov	r7, r0
 8010120:	460e      	mov	r6, r1
 8010122:	d007      	beq.n	8010134 <__pow5mult+0x20>
 8010124:	4c1a      	ldr	r4, [pc, #104]	@ (8010190 <__pow5mult+0x7c>)
 8010126:	3a01      	subs	r2, #1
 8010128:	2300      	movs	r3, #0
 801012a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801012e:	f7ff fe9f 	bl	800fe70 <__multadd>
 8010132:	4606      	mov	r6, r0
 8010134:	10ad      	asrs	r5, r5, #2
 8010136:	d027      	beq.n	8010188 <__pow5mult+0x74>
 8010138:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 801013a:	b944      	cbnz	r4, 801014e <__pow5mult+0x3a>
 801013c:	f240 2171 	movw	r1, #625	@ 0x271
 8010140:	4638      	mov	r0, r7
 8010142:	f7ff ff27 	bl	800ff94 <__i2b>
 8010146:	2300      	movs	r3, #0
 8010148:	6438      	str	r0, [r7, #64]	@ 0x40
 801014a:	4604      	mov	r4, r0
 801014c:	6003      	str	r3, [r0, #0]
 801014e:	f04f 0900 	mov.w	r9, #0
 8010152:	07eb      	lsls	r3, r5, #31
 8010154:	d50a      	bpl.n	801016c <__pow5mult+0x58>
 8010156:	4631      	mov	r1, r6
 8010158:	4622      	mov	r2, r4
 801015a:	4638      	mov	r0, r7
 801015c:	f7ff ff30 	bl	800ffc0 <__multiply>
 8010160:	4631      	mov	r1, r6
 8010162:	4680      	mov	r8, r0
 8010164:	4638      	mov	r0, r7
 8010166:	f7ff fe7a 	bl	800fe5e <_Bfree>
 801016a:	4646      	mov	r6, r8
 801016c:	106d      	asrs	r5, r5, #1
 801016e:	d00b      	beq.n	8010188 <__pow5mult+0x74>
 8010170:	6820      	ldr	r0, [r4, #0]
 8010172:	b938      	cbnz	r0, 8010184 <__pow5mult+0x70>
 8010174:	4622      	mov	r2, r4
 8010176:	4621      	mov	r1, r4
 8010178:	4638      	mov	r0, r7
 801017a:	f7ff ff21 	bl	800ffc0 <__multiply>
 801017e:	6020      	str	r0, [r4, #0]
 8010180:	f8c0 9000 	str.w	r9, [r0]
 8010184:	4604      	mov	r4, r0
 8010186:	e7e4      	b.n	8010152 <__pow5mult+0x3e>
 8010188:	4630      	mov	r0, r6
 801018a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801018e:	bf00      	nop
 8010190:	08011c8c 	.word	0x08011c8c

08010194 <__lshift>:
 8010194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010198:	460c      	mov	r4, r1
 801019a:	6849      	ldr	r1, [r1, #4]
 801019c:	6923      	ldr	r3, [r4, #16]
 801019e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80101a2:	68a3      	ldr	r3, [r4, #8]
 80101a4:	4607      	mov	r7, r0
 80101a6:	4691      	mov	r9, r2
 80101a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80101ac:	f108 0601 	add.w	r6, r8, #1
 80101b0:	42b3      	cmp	r3, r6
 80101b2:	db0b      	blt.n	80101cc <__lshift+0x38>
 80101b4:	4638      	mov	r0, r7
 80101b6:	f7ff fe2d 	bl	800fe14 <_Balloc>
 80101ba:	4605      	mov	r5, r0
 80101bc:	b948      	cbnz	r0, 80101d2 <__lshift+0x3e>
 80101be:	4602      	mov	r2, r0
 80101c0:	4b28      	ldr	r3, [pc, #160]	@ (8010264 <__lshift+0xd0>)
 80101c2:	4829      	ldr	r0, [pc, #164]	@ (8010268 <__lshift+0xd4>)
 80101c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80101c8:	f000 fa04 	bl	80105d4 <__assert_func>
 80101cc:	3101      	adds	r1, #1
 80101ce:	005b      	lsls	r3, r3, #1
 80101d0:	e7ee      	b.n	80101b0 <__lshift+0x1c>
 80101d2:	2300      	movs	r3, #0
 80101d4:	f100 0114 	add.w	r1, r0, #20
 80101d8:	f100 0210 	add.w	r2, r0, #16
 80101dc:	4618      	mov	r0, r3
 80101de:	4553      	cmp	r3, sl
 80101e0:	db33      	blt.n	801024a <__lshift+0xb6>
 80101e2:	6920      	ldr	r0, [r4, #16]
 80101e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80101e8:	f104 0314 	add.w	r3, r4, #20
 80101ec:	f019 091f 	ands.w	r9, r9, #31
 80101f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80101f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80101f8:	d02b      	beq.n	8010252 <__lshift+0xbe>
 80101fa:	f1c9 0e20 	rsb	lr, r9, #32
 80101fe:	468a      	mov	sl, r1
 8010200:	2200      	movs	r2, #0
 8010202:	6818      	ldr	r0, [r3, #0]
 8010204:	fa00 f009 	lsl.w	r0, r0, r9
 8010208:	4310      	orrs	r0, r2
 801020a:	f84a 0b04 	str.w	r0, [sl], #4
 801020e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010212:	459c      	cmp	ip, r3
 8010214:	fa22 f20e 	lsr.w	r2, r2, lr
 8010218:	d8f3      	bhi.n	8010202 <__lshift+0x6e>
 801021a:	ebac 0304 	sub.w	r3, ip, r4
 801021e:	3b15      	subs	r3, #21
 8010220:	f023 0303 	bic.w	r3, r3, #3
 8010224:	3304      	adds	r3, #4
 8010226:	f104 0015 	add.w	r0, r4, #21
 801022a:	4584      	cmp	ip, r0
 801022c:	bf38      	it	cc
 801022e:	2304      	movcc	r3, #4
 8010230:	50ca      	str	r2, [r1, r3]
 8010232:	b10a      	cbz	r2, 8010238 <__lshift+0xa4>
 8010234:	f108 0602 	add.w	r6, r8, #2
 8010238:	3e01      	subs	r6, #1
 801023a:	4638      	mov	r0, r7
 801023c:	612e      	str	r6, [r5, #16]
 801023e:	4621      	mov	r1, r4
 8010240:	f7ff fe0d 	bl	800fe5e <_Bfree>
 8010244:	4628      	mov	r0, r5
 8010246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801024a:	f842 0f04 	str.w	r0, [r2, #4]!
 801024e:	3301      	adds	r3, #1
 8010250:	e7c5      	b.n	80101de <__lshift+0x4a>
 8010252:	3904      	subs	r1, #4
 8010254:	f853 2b04 	ldr.w	r2, [r3], #4
 8010258:	f841 2f04 	str.w	r2, [r1, #4]!
 801025c:	459c      	cmp	ip, r3
 801025e:	d8f9      	bhi.n	8010254 <__lshift+0xc0>
 8010260:	e7ea      	b.n	8010238 <__lshift+0xa4>
 8010262:	bf00      	nop
 8010264:	08011bc9 	.word	0x08011bc9
 8010268:	08011c32 	.word	0x08011c32

0801026c <__mcmp>:
 801026c:	690a      	ldr	r2, [r1, #16]
 801026e:	4603      	mov	r3, r0
 8010270:	6900      	ldr	r0, [r0, #16]
 8010272:	1a80      	subs	r0, r0, r2
 8010274:	b530      	push	{r4, r5, lr}
 8010276:	d10e      	bne.n	8010296 <__mcmp+0x2a>
 8010278:	3314      	adds	r3, #20
 801027a:	3114      	adds	r1, #20
 801027c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010280:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010284:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010288:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801028c:	4295      	cmp	r5, r2
 801028e:	d003      	beq.n	8010298 <__mcmp+0x2c>
 8010290:	d205      	bcs.n	801029e <__mcmp+0x32>
 8010292:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010296:	bd30      	pop	{r4, r5, pc}
 8010298:	42a3      	cmp	r3, r4
 801029a:	d3f3      	bcc.n	8010284 <__mcmp+0x18>
 801029c:	e7fb      	b.n	8010296 <__mcmp+0x2a>
 801029e:	2001      	movs	r0, #1
 80102a0:	e7f9      	b.n	8010296 <__mcmp+0x2a>
	...

080102a4 <__mdiff>:
 80102a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a8:	4689      	mov	r9, r1
 80102aa:	4606      	mov	r6, r0
 80102ac:	4611      	mov	r1, r2
 80102ae:	4648      	mov	r0, r9
 80102b0:	4614      	mov	r4, r2
 80102b2:	f7ff ffdb 	bl	801026c <__mcmp>
 80102b6:	1e05      	subs	r5, r0, #0
 80102b8:	d112      	bne.n	80102e0 <__mdiff+0x3c>
 80102ba:	4629      	mov	r1, r5
 80102bc:	4630      	mov	r0, r6
 80102be:	f7ff fda9 	bl	800fe14 <_Balloc>
 80102c2:	4602      	mov	r2, r0
 80102c4:	b928      	cbnz	r0, 80102d2 <__mdiff+0x2e>
 80102c6:	4b3f      	ldr	r3, [pc, #252]	@ (80103c4 <__mdiff+0x120>)
 80102c8:	f240 2137 	movw	r1, #567	@ 0x237
 80102cc:	483e      	ldr	r0, [pc, #248]	@ (80103c8 <__mdiff+0x124>)
 80102ce:	f000 f981 	bl	80105d4 <__assert_func>
 80102d2:	2301      	movs	r3, #1
 80102d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80102d8:	4610      	mov	r0, r2
 80102da:	b003      	add	sp, #12
 80102dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e0:	bfbc      	itt	lt
 80102e2:	464b      	movlt	r3, r9
 80102e4:	46a1      	movlt	r9, r4
 80102e6:	4630      	mov	r0, r6
 80102e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80102ec:	bfba      	itte	lt
 80102ee:	461c      	movlt	r4, r3
 80102f0:	2501      	movlt	r5, #1
 80102f2:	2500      	movge	r5, #0
 80102f4:	f7ff fd8e 	bl	800fe14 <_Balloc>
 80102f8:	4602      	mov	r2, r0
 80102fa:	b918      	cbnz	r0, 8010304 <__mdiff+0x60>
 80102fc:	4b31      	ldr	r3, [pc, #196]	@ (80103c4 <__mdiff+0x120>)
 80102fe:	f240 2145 	movw	r1, #581	@ 0x245
 8010302:	e7e3      	b.n	80102cc <__mdiff+0x28>
 8010304:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010308:	6926      	ldr	r6, [r4, #16]
 801030a:	60c5      	str	r5, [r0, #12]
 801030c:	f109 0310 	add.w	r3, r9, #16
 8010310:	f109 0514 	add.w	r5, r9, #20
 8010314:	f104 0e14 	add.w	lr, r4, #20
 8010318:	f100 0b14 	add.w	fp, r0, #20
 801031c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010320:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010324:	9301      	str	r3, [sp, #4]
 8010326:	46d9      	mov	r9, fp
 8010328:	f04f 0c00 	mov.w	ip, #0
 801032c:	9b01      	ldr	r3, [sp, #4]
 801032e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010332:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010336:	9301      	str	r3, [sp, #4]
 8010338:	fa1f f38a 	uxth.w	r3, sl
 801033c:	4619      	mov	r1, r3
 801033e:	b283      	uxth	r3, r0
 8010340:	1acb      	subs	r3, r1, r3
 8010342:	0c00      	lsrs	r0, r0, #16
 8010344:	4463      	add	r3, ip
 8010346:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801034a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801034e:	b29b      	uxth	r3, r3
 8010350:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010354:	4576      	cmp	r6, lr
 8010356:	f849 3b04 	str.w	r3, [r9], #4
 801035a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801035e:	d8e5      	bhi.n	801032c <__mdiff+0x88>
 8010360:	1b33      	subs	r3, r6, r4
 8010362:	3b15      	subs	r3, #21
 8010364:	f023 0303 	bic.w	r3, r3, #3
 8010368:	3415      	adds	r4, #21
 801036a:	3304      	adds	r3, #4
 801036c:	42a6      	cmp	r6, r4
 801036e:	bf38      	it	cc
 8010370:	2304      	movcc	r3, #4
 8010372:	441d      	add	r5, r3
 8010374:	445b      	add	r3, fp
 8010376:	461e      	mov	r6, r3
 8010378:	462c      	mov	r4, r5
 801037a:	4544      	cmp	r4, r8
 801037c:	d30e      	bcc.n	801039c <__mdiff+0xf8>
 801037e:	f108 0103 	add.w	r1, r8, #3
 8010382:	1b49      	subs	r1, r1, r5
 8010384:	f021 0103 	bic.w	r1, r1, #3
 8010388:	3d03      	subs	r5, #3
 801038a:	45a8      	cmp	r8, r5
 801038c:	bf38      	it	cc
 801038e:	2100      	movcc	r1, #0
 8010390:	440b      	add	r3, r1
 8010392:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010396:	b191      	cbz	r1, 80103be <__mdiff+0x11a>
 8010398:	6117      	str	r7, [r2, #16]
 801039a:	e79d      	b.n	80102d8 <__mdiff+0x34>
 801039c:	f854 1b04 	ldr.w	r1, [r4], #4
 80103a0:	46e6      	mov	lr, ip
 80103a2:	0c08      	lsrs	r0, r1, #16
 80103a4:	fa1c fc81 	uxtah	ip, ip, r1
 80103a8:	4471      	add	r1, lr
 80103aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80103ae:	b289      	uxth	r1, r1
 80103b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80103b4:	f846 1b04 	str.w	r1, [r6], #4
 80103b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80103bc:	e7dd      	b.n	801037a <__mdiff+0xd6>
 80103be:	3f01      	subs	r7, #1
 80103c0:	e7e7      	b.n	8010392 <__mdiff+0xee>
 80103c2:	bf00      	nop
 80103c4:	08011bc9 	.word	0x08011bc9
 80103c8:	08011c32 	.word	0x08011c32

080103cc <__d2b>:
 80103cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80103d0:	460f      	mov	r7, r1
 80103d2:	2101      	movs	r1, #1
 80103d4:	ec59 8b10 	vmov	r8, r9, d0
 80103d8:	4616      	mov	r6, r2
 80103da:	f7ff fd1b 	bl	800fe14 <_Balloc>
 80103de:	4604      	mov	r4, r0
 80103e0:	b930      	cbnz	r0, 80103f0 <__d2b+0x24>
 80103e2:	4602      	mov	r2, r0
 80103e4:	4b23      	ldr	r3, [pc, #140]	@ (8010474 <__d2b+0xa8>)
 80103e6:	4824      	ldr	r0, [pc, #144]	@ (8010478 <__d2b+0xac>)
 80103e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80103ec:	f000 f8f2 	bl	80105d4 <__assert_func>
 80103f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80103f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80103f8:	b10d      	cbz	r5, 80103fe <__d2b+0x32>
 80103fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80103fe:	9301      	str	r3, [sp, #4]
 8010400:	f1b8 0300 	subs.w	r3, r8, #0
 8010404:	d023      	beq.n	801044e <__d2b+0x82>
 8010406:	4668      	mov	r0, sp
 8010408:	9300      	str	r3, [sp, #0]
 801040a:	f7ff fd96 	bl	800ff3a <__lo0bits>
 801040e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010412:	b1d0      	cbz	r0, 801044a <__d2b+0x7e>
 8010414:	f1c0 0320 	rsb	r3, r0, #32
 8010418:	fa02 f303 	lsl.w	r3, r2, r3
 801041c:	430b      	orrs	r3, r1
 801041e:	40c2      	lsrs	r2, r0
 8010420:	6163      	str	r3, [r4, #20]
 8010422:	9201      	str	r2, [sp, #4]
 8010424:	9b01      	ldr	r3, [sp, #4]
 8010426:	61a3      	str	r3, [r4, #24]
 8010428:	2b00      	cmp	r3, #0
 801042a:	bf0c      	ite	eq
 801042c:	2201      	moveq	r2, #1
 801042e:	2202      	movne	r2, #2
 8010430:	6122      	str	r2, [r4, #16]
 8010432:	b1a5      	cbz	r5, 801045e <__d2b+0x92>
 8010434:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010438:	4405      	add	r5, r0
 801043a:	603d      	str	r5, [r7, #0]
 801043c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010440:	6030      	str	r0, [r6, #0]
 8010442:	4620      	mov	r0, r4
 8010444:	b003      	add	sp, #12
 8010446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801044a:	6161      	str	r1, [r4, #20]
 801044c:	e7ea      	b.n	8010424 <__d2b+0x58>
 801044e:	a801      	add	r0, sp, #4
 8010450:	f7ff fd73 	bl	800ff3a <__lo0bits>
 8010454:	9b01      	ldr	r3, [sp, #4]
 8010456:	6163      	str	r3, [r4, #20]
 8010458:	3020      	adds	r0, #32
 801045a:	2201      	movs	r2, #1
 801045c:	e7e8      	b.n	8010430 <__d2b+0x64>
 801045e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010462:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010466:	6038      	str	r0, [r7, #0]
 8010468:	6918      	ldr	r0, [r3, #16]
 801046a:	f7ff fd47 	bl	800fefc <__hi0bits>
 801046e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010472:	e7e5      	b.n	8010440 <__d2b+0x74>
 8010474:	08011bc9 	.word	0x08011bc9
 8010478:	08011c32 	.word	0x08011c32

0801047c <__ssprint_r>:
 801047c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010480:	6893      	ldr	r3, [r2, #8]
 8010482:	f8d2 b000 	ldr.w	fp, [r2]
 8010486:	9001      	str	r0, [sp, #4]
 8010488:	460c      	mov	r4, r1
 801048a:	4617      	mov	r7, r2
 801048c:	2b00      	cmp	r3, #0
 801048e:	d157      	bne.n	8010540 <__ssprint_r+0xc4>
 8010490:	2000      	movs	r0, #0
 8010492:	2300      	movs	r3, #0
 8010494:	607b      	str	r3, [r7, #4]
 8010496:	b003      	add	sp, #12
 8010498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801049c:	e9db a800 	ldrd	sl, r8, [fp]
 80104a0:	f10b 0b08 	add.w	fp, fp, #8
 80104a4:	68a6      	ldr	r6, [r4, #8]
 80104a6:	6820      	ldr	r0, [r4, #0]
 80104a8:	f1b8 0f00 	cmp.w	r8, #0
 80104ac:	d0f6      	beq.n	801049c <__ssprint_r+0x20>
 80104ae:	45b0      	cmp	r8, r6
 80104b0:	d32e      	bcc.n	8010510 <__ssprint_r+0x94>
 80104b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104b6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80104ba:	d029      	beq.n	8010510 <__ssprint_r+0x94>
 80104bc:	6921      	ldr	r1, [r4, #16]
 80104be:	6965      	ldr	r5, [r4, #20]
 80104c0:	eba0 0901 	sub.w	r9, r0, r1
 80104c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80104cc:	f109 0001 	add.w	r0, r9, #1
 80104d0:	106d      	asrs	r5, r5, #1
 80104d2:	4440      	add	r0, r8
 80104d4:	4285      	cmp	r5, r0
 80104d6:	bf38      	it	cc
 80104d8:	4605      	movcc	r5, r0
 80104da:	0553      	lsls	r3, r2, #21
 80104dc:	d534      	bpl.n	8010548 <__ssprint_r+0xcc>
 80104de:	9801      	ldr	r0, [sp, #4]
 80104e0:	4629      	mov	r1, r5
 80104e2:	f7fd f941 	bl	800d768 <_malloc_r>
 80104e6:	4606      	mov	r6, r0
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d038      	beq.n	801055e <__ssprint_r+0xe2>
 80104ec:	464a      	mov	r2, r9
 80104ee:	6921      	ldr	r1, [r4, #16]
 80104f0:	f000 f862 	bl	80105b8 <memcpy>
 80104f4:	89a2      	ldrh	r2, [r4, #12]
 80104f6:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80104fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80104fe:	81a2      	strh	r2, [r4, #12]
 8010500:	6126      	str	r6, [r4, #16]
 8010502:	6165      	str	r5, [r4, #20]
 8010504:	444e      	add	r6, r9
 8010506:	eba5 0509 	sub.w	r5, r5, r9
 801050a:	6026      	str	r6, [r4, #0]
 801050c:	60a5      	str	r5, [r4, #8]
 801050e:	4646      	mov	r6, r8
 8010510:	4546      	cmp	r6, r8
 8010512:	bf28      	it	cs
 8010514:	4646      	movcs	r6, r8
 8010516:	4632      	mov	r2, r6
 8010518:	4651      	mov	r1, sl
 801051a:	6820      	ldr	r0, [r4, #0]
 801051c:	f000 f82b 	bl	8010576 <memmove>
 8010520:	68a2      	ldr	r2, [r4, #8]
 8010522:	1b92      	subs	r2, r2, r6
 8010524:	60a2      	str	r2, [r4, #8]
 8010526:	6822      	ldr	r2, [r4, #0]
 8010528:	4432      	add	r2, r6
 801052a:	6022      	str	r2, [r4, #0]
 801052c:	68ba      	ldr	r2, [r7, #8]
 801052e:	eba2 0308 	sub.w	r3, r2, r8
 8010532:	44c2      	add	sl, r8
 8010534:	60bb      	str	r3, [r7, #8]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d0aa      	beq.n	8010490 <__ssprint_r+0x14>
 801053a:	f04f 0800 	mov.w	r8, #0
 801053e:	e7b1      	b.n	80104a4 <__ssprint_r+0x28>
 8010540:	f04f 0a00 	mov.w	sl, #0
 8010544:	46d0      	mov	r8, sl
 8010546:	e7ad      	b.n	80104a4 <__ssprint_r+0x28>
 8010548:	9801      	ldr	r0, [sp, #4]
 801054a:	462a      	mov	r2, r5
 801054c:	f000 f8a8 	bl	80106a0 <_realloc_r>
 8010550:	4606      	mov	r6, r0
 8010552:	2800      	cmp	r0, #0
 8010554:	d1d4      	bne.n	8010500 <__ssprint_r+0x84>
 8010556:	6921      	ldr	r1, [r4, #16]
 8010558:	9801      	ldr	r0, [sp, #4]
 801055a:	f7fd f845 	bl	800d5e8 <_free_r>
 801055e:	9a01      	ldr	r2, [sp, #4]
 8010560:	230c      	movs	r3, #12
 8010562:	6013      	str	r3, [r2, #0]
 8010564:	89a3      	ldrh	r3, [r4, #12]
 8010566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801056a:	81a3      	strh	r3, [r4, #12]
 801056c:	2300      	movs	r3, #0
 801056e:	60bb      	str	r3, [r7, #8]
 8010570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010574:	e78d      	b.n	8010492 <__ssprint_r+0x16>

08010576 <memmove>:
 8010576:	4288      	cmp	r0, r1
 8010578:	b510      	push	{r4, lr}
 801057a:	eb01 0402 	add.w	r4, r1, r2
 801057e:	d902      	bls.n	8010586 <memmove+0x10>
 8010580:	4284      	cmp	r4, r0
 8010582:	4623      	mov	r3, r4
 8010584:	d807      	bhi.n	8010596 <memmove+0x20>
 8010586:	1e43      	subs	r3, r0, #1
 8010588:	42a1      	cmp	r1, r4
 801058a:	d008      	beq.n	801059e <memmove+0x28>
 801058c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010590:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010594:	e7f8      	b.n	8010588 <memmove+0x12>
 8010596:	4402      	add	r2, r0
 8010598:	4601      	mov	r1, r0
 801059a:	428a      	cmp	r2, r1
 801059c:	d100      	bne.n	80105a0 <memmove+0x2a>
 801059e:	bd10      	pop	{r4, pc}
 80105a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80105a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80105a8:	e7f7      	b.n	801059a <memmove+0x24>
	...

080105ac <__locale_mb_cur_max>:
 80105ac:	4b01      	ldr	r3, [pc, #4]	@ (80105b4 <__locale_mb_cur_max+0x8>)
 80105ae:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 80105b2:	4770      	bx	lr
 80105b4:	24000554 	.word	0x24000554

080105b8 <memcpy>:
 80105b8:	440a      	add	r2, r1
 80105ba:	4291      	cmp	r1, r2
 80105bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80105c0:	d100      	bne.n	80105c4 <memcpy+0xc>
 80105c2:	4770      	bx	lr
 80105c4:	b510      	push	{r4, lr}
 80105c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105ce:	4291      	cmp	r1, r2
 80105d0:	d1f9      	bne.n	80105c6 <memcpy+0xe>
 80105d2:	bd10      	pop	{r4, pc}

080105d4 <__assert_func>:
 80105d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105d6:	4614      	mov	r4, r2
 80105d8:	461a      	mov	r2, r3
 80105da:	4b09      	ldr	r3, [pc, #36]	@ (8010600 <__assert_func+0x2c>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4605      	mov	r5, r0
 80105e0:	68d8      	ldr	r0, [r3, #12]
 80105e2:	b954      	cbnz	r4, 80105fa <__assert_func+0x26>
 80105e4:	4b07      	ldr	r3, [pc, #28]	@ (8010604 <__assert_func+0x30>)
 80105e6:	461c      	mov	r4, r3
 80105e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80105ec:	9100      	str	r1, [sp, #0]
 80105ee:	462b      	mov	r3, r5
 80105f0:	4905      	ldr	r1, [pc, #20]	@ (8010608 <__assert_func+0x34>)
 80105f2:	f000 fa0b 	bl	8010a0c <fiprintf>
 80105f6:	f001 f921 	bl	801183c <abort>
 80105fa:	4b04      	ldr	r3, [pc, #16]	@ (801060c <__assert_func+0x38>)
 80105fc:	e7f4      	b.n	80105e8 <__assert_func+0x14>
 80105fe:	bf00      	nop
 8010600:	2400001c 	.word	0x2400001c
 8010604:	08011dcd 	.word	0x08011dcd
 8010608:	08011d9f 	.word	0x08011d9f
 801060c:	08011d92 	.word	0x08011d92

08010610 <_calloc_r>:
 8010610:	b538      	push	{r3, r4, r5, lr}
 8010612:	fba1 1502 	umull	r1, r5, r1, r2
 8010616:	b935      	cbnz	r5, 8010626 <_calloc_r+0x16>
 8010618:	f7fd f8a6 	bl	800d768 <_malloc_r>
 801061c:	4604      	mov	r4, r0
 801061e:	b938      	cbnz	r0, 8010630 <_calloc_r+0x20>
 8010620:	2400      	movs	r4, #0
 8010622:	4620      	mov	r0, r4
 8010624:	bd38      	pop	{r3, r4, r5, pc}
 8010626:	f7fc ff4b 	bl	800d4c0 <__errno>
 801062a:	230c      	movs	r3, #12
 801062c:	6003      	str	r3, [r0, #0]
 801062e:	e7f7      	b.n	8010620 <_calloc_r+0x10>
 8010630:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010634:	f022 0203 	bic.w	r2, r2, #3
 8010638:	3a04      	subs	r2, #4
 801063a:	2a24      	cmp	r2, #36	@ 0x24
 801063c:	d819      	bhi.n	8010672 <_calloc_r+0x62>
 801063e:	2a13      	cmp	r2, #19
 8010640:	d915      	bls.n	801066e <_calloc_r+0x5e>
 8010642:	2a1b      	cmp	r2, #27
 8010644:	e9c0 5500 	strd	r5, r5, [r0]
 8010648:	d806      	bhi.n	8010658 <_calloc_r+0x48>
 801064a:	f100 0308 	add.w	r3, r0, #8
 801064e:	2200      	movs	r2, #0
 8010650:	e9c3 2200 	strd	r2, r2, [r3]
 8010654:	609a      	str	r2, [r3, #8]
 8010656:	e7e4      	b.n	8010622 <_calloc_r+0x12>
 8010658:	2a24      	cmp	r2, #36	@ 0x24
 801065a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801065e:	bf11      	iteee	ne
 8010660:	f100 0310 	addne.w	r3, r0, #16
 8010664:	6105      	streq	r5, [r0, #16]
 8010666:	f100 0318 	addeq.w	r3, r0, #24
 801066a:	6145      	streq	r5, [r0, #20]
 801066c:	e7ef      	b.n	801064e <_calloc_r+0x3e>
 801066e:	4603      	mov	r3, r0
 8010670:	e7ed      	b.n	801064e <_calloc_r+0x3e>
 8010672:	4629      	mov	r1, r5
 8010674:	f7fc fed5 	bl	800d422 <memset>
 8010678:	e7d3      	b.n	8010622 <_calloc_r+0x12>

0801067a <__ascii_mbtowc>:
 801067a:	b082      	sub	sp, #8
 801067c:	b901      	cbnz	r1, 8010680 <__ascii_mbtowc+0x6>
 801067e:	a901      	add	r1, sp, #4
 8010680:	b142      	cbz	r2, 8010694 <__ascii_mbtowc+0x1a>
 8010682:	b14b      	cbz	r3, 8010698 <__ascii_mbtowc+0x1e>
 8010684:	7813      	ldrb	r3, [r2, #0]
 8010686:	600b      	str	r3, [r1, #0]
 8010688:	7812      	ldrb	r2, [r2, #0]
 801068a:	1e10      	subs	r0, r2, #0
 801068c:	bf18      	it	ne
 801068e:	2001      	movne	r0, #1
 8010690:	b002      	add	sp, #8
 8010692:	4770      	bx	lr
 8010694:	4610      	mov	r0, r2
 8010696:	e7fb      	b.n	8010690 <__ascii_mbtowc+0x16>
 8010698:	f06f 0001 	mvn.w	r0, #1
 801069c:	e7f8      	b.n	8010690 <__ascii_mbtowc+0x16>
	...

080106a0 <_realloc_r>:
 80106a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a4:	4682      	mov	sl, r0
 80106a6:	4693      	mov	fp, r2
 80106a8:	460c      	mov	r4, r1
 80106aa:	b929      	cbnz	r1, 80106b8 <_realloc_r+0x18>
 80106ac:	4611      	mov	r1, r2
 80106ae:	b003      	add	sp, #12
 80106b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b4:	f7fd b858 	b.w	800d768 <_malloc_r>
 80106b8:	f7fd fa90 	bl	800dbdc <__malloc_lock>
 80106bc:	f10b 080b 	add.w	r8, fp, #11
 80106c0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80106c4:	f1b8 0f16 	cmp.w	r8, #22
 80106c8:	f1a4 0908 	sub.w	r9, r4, #8
 80106cc:	f025 0603 	bic.w	r6, r5, #3
 80106d0:	d908      	bls.n	80106e4 <_realloc_r+0x44>
 80106d2:	f038 0807 	bics.w	r8, r8, #7
 80106d6:	d507      	bpl.n	80106e8 <_realloc_r+0x48>
 80106d8:	230c      	movs	r3, #12
 80106da:	f8ca 3000 	str.w	r3, [sl]
 80106de:	f04f 0b00 	mov.w	fp, #0
 80106e2:	e032      	b.n	801074a <_realloc_r+0xaa>
 80106e4:	f04f 0810 	mov.w	r8, #16
 80106e8:	45c3      	cmp	fp, r8
 80106ea:	d8f5      	bhi.n	80106d8 <_realloc_r+0x38>
 80106ec:	4546      	cmp	r6, r8
 80106ee:	f280 8174 	bge.w	80109da <_realloc_r+0x33a>
 80106f2:	4b9e      	ldr	r3, [pc, #632]	@ (801096c <_realloc_r+0x2cc>)
 80106f4:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80106f8:	eb09 0106 	add.w	r1, r9, r6
 80106fc:	458c      	cmp	ip, r1
 80106fe:	6848      	ldr	r0, [r1, #4]
 8010700:	d005      	beq.n	801070e <_realloc_r+0x6e>
 8010702:	f020 0201 	bic.w	r2, r0, #1
 8010706:	440a      	add	r2, r1
 8010708:	6852      	ldr	r2, [r2, #4]
 801070a:	07d7      	lsls	r7, r2, #31
 801070c:	d449      	bmi.n	80107a2 <_realloc_r+0x102>
 801070e:	f020 0003 	bic.w	r0, r0, #3
 8010712:	458c      	cmp	ip, r1
 8010714:	eb06 0700 	add.w	r7, r6, r0
 8010718:	d11b      	bne.n	8010752 <_realloc_r+0xb2>
 801071a:	f108 0210 	add.w	r2, r8, #16
 801071e:	42ba      	cmp	r2, r7
 8010720:	dc41      	bgt.n	80107a6 <_realloc_r+0x106>
 8010722:	eb09 0208 	add.w	r2, r9, r8
 8010726:	eba7 0708 	sub.w	r7, r7, r8
 801072a:	f047 0701 	orr.w	r7, r7, #1
 801072e:	609a      	str	r2, [r3, #8]
 8010730:	6057      	str	r7, [r2, #4]
 8010732:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010736:	f003 0301 	and.w	r3, r3, #1
 801073a:	ea43 0308 	orr.w	r3, r3, r8
 801073e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010742:	4650      	mov	r0, sl
 8010744:	f7fd fa50 	bl	800dbe8 <__malloc_unlock>
 8010748:	46a3      	mov	fp, r4
 801074a:	4658      	mov	r0, fp
 801074c:	b003      	add	sp, #12
 801074e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010752:	45b8      	cmp	r8, r7
 8010754:	dc27      	bgt.n	80107a6 <_realloc_r+0x106>
 8010756:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801075a:	60d3      	str	r3, [r2, #12]
 801075c:	609a      	str	r2, [r3, #8]
 801075e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010762:	eba7 0008 	sub.w	r0, r7, r8
 8010766:	280f      	cmp	r0, #15
 8010768:	f003 0301 	and.w	r3, r3, #1
 801076c:	eb09 0207 	add.w	r2, r9, r7
 8010770:	f240 8135 	bls.w	80109de <_realloc_r+0x33e>
 8010774:	eb09 0108 	add.w	r1, r9, r8
 8010778:	ea48 0303 	orr.w	r3, r8, r3
 801077c:	f040 0001 	orr.w	r0, r0, #1
 8010780:	f8c9 3004 	str.w	r3, [r9, #4]
 8010784:	6048      	str	r0, [r1, #4]
 8010786:	6853      	ldr	r3, [r2, #4]
 8010788:	f043 0301 	orr.w	r3, r3, #1
 801078c:	6053      	str	r3, [r2, #4]
 801078e:	3108      	adds	r1, #8
 8010790:	4650      	mov	r0, sl
 8010792:	f7fc ff29 	bl	800d5e8 <_free_r>
 8010796:	4650      	mov	r0, sl
 8010798:	f7fd fa26 	bl	800dbe8 <__malloc_unlock>
 801079c:	f109 0b08 	add.w	fp, r9, #8
 80107a0:	e7d3      	b.n	801074a <_realloc_r+0xaa>
 80107a2:	2000      	movs	r0, #0
 80107a4:	4601      	mov	r1, r0
 80107a6:	07ea      	lsls	r2, r5, #31
 80107a8:	f100 80c7 	bmi.w	801093a <_realloc_r+0x29a>
 80107ac:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80107b0:	eba9 0505 	sub.w	r5, r9, r5
 80107b4:	686a      	ldr	r2, [r5, #4]
 80107b6:	f022 0203 	bic.w	r2, r2, #3
 80107ba:	4432      	add	r2, r6
 80107bc:	9201      	str	r2, [sp, #4]
 80107be:	2900      	cmp	r1, #0
 80107c0:	f000 8086 	beq.w	80108d0 <_realloc_r+0x230>
 80107c4:	458c      	cmp	ip, r1
 80107c6:	eb00 0702 	add.w	r7, r0, r2
 80107ca:	d149      	bne.n	8010860 <_realloc_r+0x1c0>
 80107cc:	f108 0210 	add.w	r2, r8, #16
 80107d0:	42ba      	cmp	r2, r7
 80107d2:	dc7d      	bgt.n	80108d0 <_realloc_r+0x230>
 80107d4:	46ab      	mov	fp, r5
 80107d6:	68ea      	ldr	r2, [r5, #12]
 80107d8:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 80107dc:	60ca      	str	r2, [r1, #12]
 80107de:	6091      	str	r1, [r2, #8]
 80107e0:	1f32      	subs	r2, r6, #4
 80107e2:	2a24      	cmp	r2, #36	@ 0x24
 80107e4:	d836      	bhi.n	8010854 <_realloc_r+0x1b4>
 80107e6:	2a13      	cmp	r2, #19
 80107e8:	d932      	bls.n	8010850 <_realloc_r+0x1b0>
 80107ea:	6821      	ldr	r1, [r4, #0]
 80107ec:	60a9      	str	r1, [r5, #8]
 80107ee:	6861      	ldr	r1, [r4, #4]
 80107f0:	60e9      	str	r1, [r5, #12]
 80107f2:	2a1b      	cmp	r2, #27
 80107f4:	d81a      	bhi.n	801082c <_realloc_r+0x18c>
 80107f6:	3408      	adds	r4, #8
 80107f8:	f105 0210 	add.w	r2, r5, #16
 80107fc:	6821      	ldr	r1, [r4, #0]
 80107fe:	6011      	str	r1, [r2, #0]
 8010800:	6861      	ldr	r1, [r4, #4]
 8010802:	6051      	str	r1, [r2, #4]
 8010804:	68a1      	ldr	r1, [r4, #8]
 8010806:	6091      	str	r1, [r2, #8]
 8010808:	eb05 0208 	add.w	r2, r5, r8
 801080c:	eba7 0708 	sub.w	r7, r7, r8
 8010810:	f047 0701 	orr.w	r7, r7, #1
 8010814:	609a      	str	r2, [r3, #8]
 8010816:	6057      	str	r7, [r2, #4]
 8010818:	686b      	ldr	r3, [r5, #4]
 801081a:	f003 0301 	and.w	r3, r3, #1
 801081e:	ea43 0308 	orr.w	r3, r3, r8
 8010822:	606b      	str	r3, [r5, #4]
 8010824:	4650      	mov	r0, sl
 8010826:	f7fd f9df 	bl	800dbe8 <__malloc_unlock>
 801082a:	e78e      	b.n	801074a <_realloc_r+0xaa>
 801082c:	68a1      	ldr	r1, [r4, #8]
 801082e:	6129      	str	r1, [r5, #16]
 8010830:	68e1      	ldr	r1, [r4, #12]
 8010832:	6169      	str	r1, [r5, #20]
 8010834:	2a24      	cmp	r2, #36	@ 0x24
 8010836:	bf01      	itttt	eq
 8010838:	6922      	ldreq	r2, [r4, #16]
 801083a:	61aa      	streq	r2, [r5, #24]
 801083c:	6961      	ldreq	r1, [r4, #20]
 801083e:	61e9      	streq	r1, [r5, #28]
 8010840:	bf19      	ittee	ne
 8010842:	3410      	addne	r4, #16
 8010844:	f105 0218 	addne.w	r2, r5, #24
 8010848:	f105 0220 	addeq.w	r2, r5, #32
 801084c:	3418      	addeq	r4, #24
 801084e:	e7d5      	b.n	80107fc <_realloc_r+0x15c>
 8010850:	465a      	mov	r2, fp
 8010852:	e7d3      	b.n	80107fc <_realloc_r+0x15c>
 8010854:	4621      	mov	r1, r4
 8010856:	4658      	mov	r0, fp
 8010858:	f7ff fe8d 	bl	8010576 <memmove>
 801085c:	4b43      	ldr	r3, [pc, #268]	@ (801096c <_realloc_r+0x2cc>)
 801085e:	e7d3      	b.n	8010808 <_realloc_r+0x168>
 8010860:	45b8      	cmp	r8, r7
 8010862:	dc35      	bgt.n	80108d0 <_realloc_r+0x230>
 8010864:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8010868:	4628      	mov	r0, r5
 801086a:	60d3      	str	r3, [r2, #12]
 801086c:	609a      	str	r2, [r3, #8]
 801086e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8010872:	68eb      	ldr	r3, [r5, #12]
 8010874:	60d3      	str	r3, [r2, #12]
 8010876:	609a      	str	r2, [r3, #8]
 8010878:	1f32      	subs	r2, r6, #4
 801087a:	2a24      	cmp	r2, #36	@ 0x24
 801087c:	d824      	bhi.n	80108c8 <_realloc_r+0x228>
 801087e:	2a13      	cmp	r2, #19
 8010880:	d908      	bls.n	8010894 <_realloc_r+0x1f4>
 8010882:	6823      	ldr	r3, [r4, #0]
 8010884:	60ab      	str	r3, [r5, #8]
 8010886:	6863      	ldr	r3, [r4, #4]
 8010888:	60eb      	str	r3, [r5, #12]
 801088a:	2a1b      	cmp	r2, #27
 801088c:	d80a      	bhi.n	80108a4 <_realloc_r+0x204>
 801088e:	3408      	adds	r4, #8
 8010890:	f105 0010 	add.w	r0, r5, #16
 8010894:	6823      	ldr	r3, [r4, #0]
 8010896:	6003      	str	r3, [r0, #0]
 8010898:	6863      	ldr	r3, [r4, #4]
 801089a:	6043      	str	r3, [r0, #4]
 801089c:	68a3      	ldr	r3, [r4, #8]
 801089e:	6083      	str	r3, [r0, #8]
 80108a0:	46a9      	mov	r9, r5
 80108a2:	e75c      	b.n	801075e <_realloc_r+0xbe>
 80108a4:	68a3      	ldr	r3, [r4, #8]
 80108a6:	612b      	str	r3, [r5, #16]
 80108a8:	68e3      	ldr	r3, [r4, #12]
 80108aa:	616b      	str	r3, [r5, #20]
 80108ac:	2a24      	cmp	r2, #36	@ 0x24
 80108ae:	bf01      	itttt	eq
 80108b0:	6923      	ldreq	r3, [r4, #16]
 80108b2:	61ab      	streq	r3, [r5, #24]
 80108b4:	6963      	ldreq	r3, [r4, #20]
 80108b6:	61eb      	streq	r3, [r5, #28]
 80108b8:	bf19      	ittee	ne
 80108ba:	3410      	addne	r4, #16
 80108bc:	f105 0018 	addne.w	r0, r5, #24
 80108c0:	f105 0020 	addeq.w	r0, r5, #32
 80108c4:	3418      	addeq	r4, #24
 80108c6:	e7e5      	b.n	8010894 <_realloc_r+0x1f4>
 80108c8:	4621      	mov	r1, r4
 80108ca:	f7ff fe54 	bl	8010576 <memmove>
 80108ce:	e7e7      	b.n	80108a0 <_realloc_r+0x200>
 80108d0:	9b01      	ldr	r3, [sp, #4]
 80108d2:	4598      	cmp	r8, r3
 80108d4:	dc31      	bgt.n	801093a <_realloc_r+0x29a>
 80108d6:	4628      	mov	r0, r5
 80108d8:	68eb      	ldr	r3, [r5, #12]
 80108da:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80108de:	60d3      	str	r3, [r2, #12]
 80108e0:	609a      	str	r2, [r3, #8]
 80108e2:	1f32      	subs	r2, r6, #4
 80108e4:	2a24      	cmp	r2, #36	@ 0x24
 80108e6:	d824      	bhi.n	8010932 <_realloc_r+0x292>
 80108e8:	2a13      	cmp	r2, #19
 80108ea:	d908      	bls.n	80108fe <_realloc_r+0x25e>
 80108ec:	6823      	ldr	r3, [r4, #0]
 80108ee:	60ab      	str	r3, [r5, #8]
 80108f0:	6863      	ldr	r3, [r4, #4]
 80108f2:	60eb      	str	r3, [r5, #12]
 80108f4:	2a1b      	cmp	r2, #27
 80108f6:	d80a      	bhi.n	801090e <_realloc_r+0x26e>
 80108f8:	3408      	adds	r4, #8
 80108fa:	f105 0010 	add.w	r0, r5, #16
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	6003      	str	r3, [r0, #0]
 8010902:	6863      	ldr	r3, [r4, #4]
 8010904:	6043      	str	r3, [r0, #4]
 8010906:	68a3      	ldr	r3, [r4, #8]
 8010908:	6083      	str	r3, [r0, #8]
 801090a:	9f01      	ldr	r7, [sp, #4]
 801090c:	e7c8      	b.n	80108a0 <_realloc_r+0x200>
 801090e:	68a3      	ldr	r3, [r4, #8]
 8010910:	612b      	str	r3, [r5, #16]
 8010912:	68e3      	ldr	r3, [r4, #12]
 8010914:	616b      	str	r3, [r5, #20]
 8010916:	2a24      	cmp	r2, #36	@ 0x24
 8010918:	bf01      	itttt	eq
 801091a:	6923      	ldreq	r3, [r4, #16]
 801091c:	61ab      	streq	r3, [r5, #24]
 801091e:	6963      	ldreq	r3, [r4, #20]
 8010920:	61eb      	streq	r3, [r5, #28]
 8010922:	bf19      	ittee	ne
 8010924:	3410      	addne	r4, #16
 8010926:	f105 0018 	addne.w	r0, r5, #24
 801092a:	f105 0020 	addeq.w	r0, r5, #32
 801092e:	3418      	addeq	r4, #24
 8010930:	e7e5      	b.n	80108fe <_realloc_r+0x25e>
 8010932:	4621      	mov	r1, r4
 8010934:	f7ff fe1f 	bl	8010576 <memmove>
 8010938:	e7e7      	b.n	801090a <_realloc_r+0x26a>
 801093a:	4659      	mov	r1, fp
 801093c:	4650      	mov	r0, sl
 801093e:	f7fc ff13 	bl	800d768 <_malloc_r>
 8010942:	4683      	mov	fp, r0
 8010944:	b918      	cbnz	r0, 801094e <_realloc_r+0x2ae>
 8010946:	4650      	mov	r0, sl
 8010948:	f7fd f94e 	bl	800dbe8 <__malloc_unlock>
 801094c:	e6c7      	b.n	80106de <_realloc_r+0x3e>
 801094e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010952:	f023 0301 	bic.w	r3, r3, #1
 8010956:	444b      	add	r3, r9
 8010958:	f1a0 0208 	sub.w	r2, r0, #8
 801095c:	4293      	cmp	r3, r2
 801095e:	d107      	bne.n	8010970 <_realloc_r+0x2d0>
 8010960:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8010964:	f027 0703 	bic.w	r7, r7, #3
 8010968:	4437      	add	r7, r6
 801096a:	e6f8      	b.n	801075e <_realloc_r+0xbe>
 801096c:	2400014c 	.word	0x2400014c
 8010970:	1f32      	subs	r2, r6, #4
 8010972:	2a24      	cmp	r2, #36	@ 0x24
 8010974:	d82d      	bhi.n	80109d2 <_realloc_r+0x332>
 8010976:	2a13      	cmp	r2, #19
 8010978:	d928      	bls.n	80109cc <_realloc_r+0x32c>
 801097a:	6823      	ldr	r3, [r4, #0]
 801097c:	6003      	str	r3, [r0, #0]
 801097e:	6863      	ldr	r3, [r4, #4]
 8010980:	6043      	str	r3, [r0, #4]
 8010982:	2a1b      	cmp	r2, #27
 8010984:	d80e      	bhi.n	80109a4 <_realloc_r+0x304>
 8010986:	f104 0208 	add.w	r2, r4, #8
 801098a:	f100 0308 	add.w	r3, r0, #8
 801098e:	6811      	ldr	r1, [r2, #0]
 8010990:	6019      	str	r1, [r3, #0]
 8010992:	6851      	ldr	r1, [r2, #4]
 8010994:	6059      	str	r1, [r3, #4]
 8010996:	6892      	ldr	r2, [r2, #8]
 8010998:	609a      	str	r2, [r3, #8]
 801099a:	4621      	mov	r1, r4
 801099c:	4650      	mov	r0, sl
 801099e:	f7fc fe23 	bl	800d5e8 <_free_r>
 80109a2:	e73f      	b.n	8010824 <_realloc_r+0x184>
 80109a4:	68a3      	ldr	r3, [r4, #8]
 80109a6:	6083      	str	r3, [r0, #8]
 80109a8:	68e3      	ldr	r3, [r4, #12]
 80109aa:	60c3      	str	r3, [r0, #12]
 80109ac:	2a24      	cmp	r2, #36	@ 0x24
 80109ae:	bf01      	itttt	eq
 80109b0:	6923      	ldreq	r3, [r4, #16]
 80109b2:	6103      	streq	r3, [r0, #16]
 80109b4:	6961      	ldreq	r1, [r4, #20]
 80109b6:	6141      	streq	r1, [r0, #20]
 80109b8:	bf19      	ittee	ne
 80109ba:	f104 0210 	addne.w	r2, r4, #16
 80109be:	f100 0310 	addne.w	r3, r0, #16
 80109c2:	f104 0218 	addeq.w	r2, r4, #24
 80109c6:	f100 0318 	addeq.w	r3, r0, #24
 80109ca:	e7e0      	b.n	801098e <_realloc_r+0x2ee>
 80109cc:	4603      	mov	r3, r0
 80109ce:	4622      	mov	r2, r4
 80109d0:	e7dd      	b.n	801098e <_realloc_r+0x2ee>
 80109d2:	4621      	mov	r1, r4
 80109d4:	f7ff fdcf 	bl	8010576 <memmove>
 80109d8:	e7df      	b.n	801099a <_realloc_r+0x2fa>
 80109da:	4637      	mov	r7, r6
 80109dc:	e6bf      	b.n	801075e <_realloc_r+0xbe>
 80109de:	431f      	orrs	r7, r3
 80109e0:	f8c9 7004 	str.w	r7, [r9, #4]
 80109e4:	6853      	ldr	r3, [r2, #4]
 80109e6:	f043 0301 	orr.w	r3, r3, #1
 80109ea:	6053      	str	r3, [r2, #4]
 80109ec:	e6d3      	b.n	8010796 <_realloc_r+0xf6>
 80109ee:	bf00      	nop

080109f0 <__ascii_wctomb>:
 80109f0:	4603      	mov	r3, r0
 80109f2:	4608      	mov	r0, r1
 80109f4:	b141      	cbz	r1, 8010a08 <__ascii_wctomb+0x18>
 80109f6:	2aff      	cmp	r2, #255	@ 0xff
 80109f8:	d904      	bls.n	8010a04 <__ascii_wctomb+0x14>
 80109fa:	228a      	movs	r2, #138	@ 0x8a
 80109fc:	601a      	str	r2, [r3, #0]
 80109fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a02:	4770      	bx	lr
 8010a04:	700a      	strb	r2, [r1, #0]
 8010a06:	2001      	movs	r0, #1
 8010a08:	4770      	bx	lr
	...

08010a0c <fiprintf>:
 8010a0c:	b40e      	push	{r1, r2, r3}
 8010a0e:	b503      	push	{r0, r1, lr}
 8010a10:	4601      	mov	r1, r0
 8010a12:	ab03      	add	r3, sp, #12
 8010a14:	4805      	ldr	r0, [pc, #20]	@ (8010a2c <fiprintf+0x20>)
 8010a16:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a1a:	6800      	ldr	r0, [r0, #0]
 8010a1c:	9301      	str	r3, [sp, #4]
 8010a1e:	f000 f839 	bl	8010a94 <_vfiprintf_r>
 8010a22:	b002      	add	sp, #8
 8010a24:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a28:	b003      	add	sp, #12
 8010a2a:	4770      	bx	lr
 8010a2c:	2400001c 	.word	0x2400001c

08010a30 <__sprint_r>:
 8010a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a34:	6893      	ldr	r3, [r2, #8]
 8010a36:	4680      	mov	r8, r0
 8010a38:	460e      	mov	r6, r1
 8010a3a:	4614      	mov	r4, r2
 8010a3c:	b343      	cbz	r3, 8010a90 <__sprint_r+0x60>
 8010a3e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8010a40:	049d      	lsls	r5, r3, #18
 8010a42:	d522      	bpl.n	8010a8a <__sprint_r+0x5a>
 8010a44:	6815      	ldr	r5, [r2, #0]
 8010a46:	68a0      	ldr	r0, [r4, #8]
 8010a48:	3508      	adds	r5, #8
 8010a4a:	b928      	cbnz	r0, 8010a58 <__sprint_r+0x28>
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	60a3      	str	r3, [r4, #8]
 8010a50:	2300      	movs	r3, #0
 8010a52:	6063      	str	r3, [r4, #4]
 8010a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a58:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8010a5c:	f04f 0900 	mov.w	r9, #0
 8010a60:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8010a64:	45ca      	cmp	sl, r9
 8010a66:	dc05      	bgt.n	8010a74 <__sprint_r+0x44>
 8010a68:	68a3      	ldr	r3, [r4, #8]
 8010a6a:	f027 0703 	bic.w	r7, r7, #3
 8010a6e:	1bdb      	subs	r3, r3, r7
 8010a70:	60a3      	str	r3, [r4, #8]
 8010a72:	e7e8      	b.n	8010a46 <__sprint_r+0x16>
 8010a74:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8010a78:	4632      	mov	r2, r6
 8010a7a:	4640      	mov	r0, r8
 8010a7c:	f000 feb5 	bl	80117ea <_fputwc_r>
 8010a80:	1c43      	adds	r3, r0, #1
 8010a82:	d0e3      	beq.n	8010a4c <__sprint_r+0x1c>
 8010a84:	f109 0901 	add.w	r9, r9, #1
 8010a88:	e7ec      	b.n	8010a64 <__sprint_r+0x34>
 8010a8a:	f000 fccb 	bl	8011424 <__sfvwrite_r>
 8010a8e:	e7dd      	b.n	8010a4c <__sprint_r+0x1c>
 8010a90:	4618      	mov	r0, r3
 8010a92:	e7dd      	b.n	8010a50 <__sprint_r+0x20>

08010a94 <_vfiprintf_r>:
 8010a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a98:	b0bb      	sub	sp, #236	@ 0xec
 8010a9a:	460f      	mov	r7, r1
 8010a9c:	4693      	mov	fp, r2
 8010a9e:	461c      	mov	r4, r3
 8010aa0:	461d      	mov	r5, r3
 8010aa2:	9000      	str	r0, [sp, #0]
 8010aa4:	b118      	cbz	r0, 8010aae <_vfiprintf_r+0x1a>
 8010aa6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010aa8:	b90b      	cbnz	r3, 8010aae <_vfiprintf_r+0x1a>
 8010aaa:	f7fc fc21 	bl	800d2f0 <__sinit>
 8010aae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ab0:	07db      	lsls	r3, r3, #31
 8010ab2:	d405      	bmi.n	8010ac0 <_vfiprintf_r+0x2c>
 8010ab4:	89bb      	ldrh	r3, [r7, #12]
 8010ab6:	059e      	lsls	r6, r3, #22
 8010ab8:	d402      	bmi.n	8010ac0 <_vfiprintf_r+0x2c>
 8010aba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010abc:	f7fc fd2c 	bl	800d518 <__retarget_lock_acquire_recursive>
 8010ac0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010ac4:	0498      	lsls	r0, r3, #18
 8010ac6:	d406      	bmi.n	8010ad6 <_vfiprintf_r+0x42>
 8010ac8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010acc:	81bb      	strh	r3, [r7, #12]
 8010ace:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ad0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010ad4:	667b      	str	r3, [r7, #100]	@ 0x64
 8010ad6:	89bb      	ldrh	r3, [r7, #12]
 8010ad8:	0719      	lsls	r1, r3, #28
 8010ada:	d501      	bpl.n	8010ae0 <_vfiprintf_r+0x4c>
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	b9ab      	cbnz	r3, 8010b0c <_vfiprintf_r+0x78>
 8010ae0:	9800      	ldr	r0, [sp, #0]
 8010ae2:	4639      	mov	r1, r7
 8010ae4:	f000 fdea 	bl	80116bc <__swsetup_r>
 8010ae8:	b180      	cbz	r0, 8010b0c <_vfiprintf_r+0x78>
 8010aea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010aec:	07da      	lsls	r2, r3, #31
 8010aee:	d506      	bpl.n	8010afe <_vfiprintf_r+0x6a>
 8010af0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010af4:	9303      	str	r3, [sp, #12]
 8010af6:	9803      	ldr	r0, [sp, #12]
 8010af8:	b03b      	add	sp, #236	@ 0xec
 8010afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010afe:	89bb      	ldrh	r3, [r7, #12]
 8010b00:	059b      	lsls	r3, r3, #22
 8010b02:	d4f5      	bmi.n	8010af0 <_vfiprintf_r+0x5c>
 8010b04:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010b06:	f7fc fd08 	bl	800d51a <__retarget_lock_release_recursive>
 8010b0a:	e7f1      	b.n	8010af0 <_vfiprintf_r+0x5c>
 8010b0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010b10:	f003 021a 	and.w	r2, r3, #26
 8010b14:	2a0a      	cmp	r2, #10
 8010b16:	d114      	bne.n	8010b42 <_vfiprintf_r+0xae>
 8010b18:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010b1c:	2a00      	cmp	r2, #0
 8010b1e:	db10      	blt.n	8010b42 <_vfiprintf_r+0xae>
 8010b20:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010b22:	07d6      	lsls	r6, r2, #31
 8010b24:	d404      	bmi.n	8010b30 <_vfiprintf_r+0x9c>
 8010b26:	059d      	lsls	r5, r3, #22
 8010b28:	d402      	bmi.n	8010b30 <_vfiprintf_r+0x9c>
 8010b2a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010b2c:	f7fc fcf5 	bl	800d51a <__retarget_lock_release_recursive>
 8010b30:	9800      	ldr	r0, [sp, #0]
 8010b32:	4623      	mov	r3, r4
 8010b34:	465a      	mov	r2, fp
 8010b36:	4639      	mov	r1, r7
 8010b38:	b03b      	add	sp, #236	@ 0xec
 8010b3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b3e:	f000 bc31 	b.w	80113a4 <__sbprintf>
 8010b42:	2300      	movs	r3, #0
 8010b44:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8010b48:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8010b4c:	ae11      	add	r6, sp, #68	@ 0x44
 8010b4e:	960e      	str	r6, [sp, #56]	@ 0x38
 8010b50:	9307      	str	r3, [sp, #28]
 8010b52:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b54:	9303      	str	r3, [sp, #12]
 8010b56:	465b      	mov	r3, fp
 8010b58:	461c      	mov	r4, r3
 8010b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b5e:	b10a      	cbz	r2, 8010b64 <_vfiprintf_r+0xd0>
 8010b60:	2a25      	cmp	r2, #37	@ 0x25
 8010b62:	d1f9      	bne.n	8010b58 <_vfiprintf_r+0xc4>
 8010b64:	ebb4 080b 	subs.w	r8, r4, fp
 8010b68:	d00d      	beq.n	8010b86 <_vfiprintf_r+0xf2>
 8010b6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b6c:	4443      	add	r3, r8
 8010b6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010b70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b72:	3301      	adds	r3, #1
 8010b74:	2b07      	cmp	r3, #7
 8010b76:	e9c6 b800 	strd	fp, r8, [r6]
 8010b7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b7c:	dc75      	bgt.n	8010c6a <_vfiprintf_r+0x1d6>
 8010b7e:	3608      	adds	r6, #8
 8010b80:	9b03      	ldr	r3, [sp, #12]
 8010b82:	4443      	add	r3, r8
 8010b84:	9303      	str	r3, [sp, #12]
 8010b86:	7823      	ldrb	r3, [r4, #0]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f000 83cd 	beq.w	8011328 <_vfiprintf_r+0x894>
 8010b8e:	2300      	movs	r3, #0
 8010b90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b94:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8010b98:	3401      	adds	r4, #1
 8010b9a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8010b9e:	469a      	mov	sl, r3
 8010ba0:	46a3      	mov	fp, r4
 8010ba2:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8010ba6:	f1a3 0220 	sub.w	r2, r3, #32
 8010baa:	2a5a      	cmp	r2, #90	@ 0x5a
 8010bac:	f200 8316 	bhi.w	80111dc <_vfiprintf_r+0x748>
 8010bb0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8010bb4:	0314009a 	.word	0x0314009a
 8010bb8:	00a20314 	.word	0x00a20314
 8010bbc:	03140314 	.word	0x03140314
 8010bc0:	00820314 	.word	0x00820314
 8010bc4:	03140314 	.word	0x03140314
 8010bc8:	00af00a5 	.word	0x00af00a5
 8010bcc:	00ac0314 	.word	0x00ac0314
 8010bd0:	031400b1 	.word	0x031400b1
 8010bd4:	00d000cd 	.word	0x00d000cd
 8010bd8:	00d000d0 	.word	0x00d000d0
 8010bdc:	00d000d0 	.word	0x00d000d0
 8010be0:	00d000d0 	.word	0x00d000d0
 8010be4:	00d000d0 	.word	0x00d000d0
 8010be8:	03140314 	.word	0x03140314
 8010bec:	03140314 	.word	0x03140314
 8010bf0:	03140314 	.word	0x03140314
 8010bf4:	03140314 	.word	0x03140314
 8010bf8:	00f70314 	.word	0x00f70314
 8010bfc:	03140104 	.word	0x03140104
 8010c00:	03140314 	.word	0x03140314
 8010c04:	03140314 	.word	0x03140314
 8010c08:	03140314 	.word	0x03140314
 8010c0c:	03140314 	.word	0x03140314
 8010c10:	01520314 	.word	0x01520314
 8010c14:	03140314 	.word	0x03140314
 8010c18:	019a0314 	.word	0x019a0314
 8010c1c:	027a0314 	.word	0x027a0314
 8010c20:	03140314 	.word	0x03140314
 8010c24:	0314029a 	.word	0x0314029a
 8010c28:	03140314 	.word	0x03140314
 8010c2c:	03140314 	.word	0x03140314
 8010c30:	03140314 	.word	0x03140314
 8010c34:	03140314 	.word	0x03140314
 8010c38:	00f70314 	.word	0x00f70314
 8010c3c:	03140106 	.word	0x03140106
 8010c40:	03140314 	.word	0x03140314
 8010c44:	010600e0 	.word	0x010600e0
 8010c48:	031400f1 	.word	0x031400f1
 8010c4c:	031400eb 	.word	0x031400eb
 8010c50:	01540132 	.word	0x01540132
 8010c54:	00f10189 	.word	0x00f10189
 8010c58:	019a0314 	.word	0x019a0314
 8010c5c:	027c0098 	.word	0x027c0098
 8010c60:	03140314 	.word	0x03140314
 8010c64:	03140065 	.word	0x03140065
 8010c68:	0098      	.short	0x0098
 8010c6a:	9800      	ldr	r0, [sp, #0]
 8010c6c:	aa0e      	add	r2, sp, #56	@ 0x38
 8010c6e:	4639      	mov	r1, r7
 8010c70:	f7ff fede 	bl	8010a30 <__sprint_r>
 8010c74:	2800      	cmp	r0, #0
 8010c76:	f040 8336 	bne.w	80112e6 <_vfiprintf_r+0x852>
 8010c7a:	ae11      	add	r6, sp, #68	@ 0x44
 8010c7c:	e780      	b.n	8010b80 <_vfiprintf_r+0xec>
 8010c7e:	4a99      	ldr	r2, [pc, #612]	@ (8010ee4 <_vfiprintf_r+0x450>)
 8010c80:	9205      	str	r2, [sp, #20]
 8010c82:	f01a 0220 	ands.w	r2, sl, #32
 8010c86:	f000 8231 	beq.w	80110ec <_vfiprintf_r+0x658>
 8010c8a:	3507      	adds	r5, #7
 8010c8c:	f025 0507 	bic.w	r5, r5, #7
 8010c90:	46a8      	mov	r8, r5
 8010c92:	686d      	ldr	r5, [r5, #4]
 8010c94:	f858 4b08 	ldr.w	r4, [r8], #8
 8010c98:	f01a 0f01 	tst.w	sl, #1
 8010c9c:	d009      	beq.n	8010cb2 <_vfiprintf_r+0x21e>
 8010c9e:	ea54 0205 	orrs.w	r2, r4, r5
 8010ca2:	bf1f      	itttt	ne
 8010ca4:	2230      	movne	r2, #48	@ 0x30
 8010ca6:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8010caa:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8010cae:	f04a 0a02 	orrne.w	sl, sl, #2
 8010cb2:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8010cb6:	e112      	b.n	8010ede <_vfiprintf_r+0x44a>
 8010cb8:	9800      	ldr	r0, [sp, #0]
 8010cba:	f7fe fa37 	bl	800f12c <_localeconv_r>
 8010cbe:	6843      	ldr	r3, [r0, #4]
 8010cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7ef fb5c 	bl	8000380 <strlen>
 8010cc8:	9007      	str	r0, [sp, #28]
 8010cca:	9800      	ldr	r0, [sp, #0]
 8010ccc:	f7fe fa2e 	bl	800f12c <_localeconv_r>
 8010cd0:	6883      	ldr	r3, [r0, #8]
 8010cd2:	9306      	str	r3, [sp, #24]
 8010cd4:	9b07      	ldr	r3, [sp, #28]
 8010cd6:	b12b      	cbz	r3, 8010ce4 <_vfiprintf_r+0x250>
 8010cd8:	9b06      	ldr	r3, [sp, #24]
 8010cda:	b11b      	cbz	r3, 8010ce4 <_vfiprintf_r+0x250>
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	b10b      	cbz	r3, 8010ce4 <_vfiprintf_r+0x250>
 8010ce0:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8010ce4:	465c      	mov	r4, fp
 8010ce6:	e75b      	b.n	8010ba0 <_vfiprintf_r+0x10c>
 8010ce8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d1f9      	bne.n	8010ce4 <_vfiprintf_r+0x250>
 8010cf0:	2320      	movs	r3, #32
 8010cf2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8010cf6:	e7f5      	b.n	8010ce4 <_vfiprintf_r+0x250>
 8010cf8:	f04a 0a01 	orr.w	sl, sl, #1
 8010cfc:	e7f2      	b.n	8010ce4 <_vfiprintf_r+0x250>
 8010cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d02:	9302      	str	r3, [sp, #8]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	daed      	bge.n	8010ce4 <_vfiprintf_r+0x250>
 8010d08:	425b      	negs	r3, r3
 8010d0a:	9302      	str	r3, [sp, #8]
 8010d0c:	f04a 0a04 	orr.w	sl, sl, #4
 8010d10:	e7e8      	b.n	8010ce4 <_vfiprintf_r+0x250>
 8010d12:	232b      	movs	r3, #43	@ 0x2b
 8010d14:	e7ed      	b.n	8010cf2 <_vfiprintf_r+0x25e>
 8010d16:	465a      	mov	r2, fp
 8010d18:	f812 3b01 	ldrb.w	r3, [r2], #1
 8010d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d1e:	d112      	bne.n	8010d46 <_vfiprintf_r+0x2b2>
 8010d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d28:	9301      	str	r3, [sp, #4]
 8010d2a:	4693      	mov	fp, r2
 8010d2c:	e7da      	b.n	8010ce4 <_vfiprintf_r+0x250>
 8010d2e:	9b01      	ldr	r3, [sp, #4]
 8010d30:	fb00 1303 	mla	r3, r0, r3, r1
 8010d34:	9301      	str	r3, [sp, #4]
 8010d36:	f812 3b01 	ldrb.w	r3, [r2], #1
 8010d3a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8010d3e:	2909      	cmp	r1, #9
 8010d40:	d9f5      	bls.n	8010d2e <_vfiprintf_r+0x29a>
 8010d42:	4693      	mov	fp, r2
 8010d44:	e72f      	b.n	8010ba6 <_vfiprintf_r+0x112>
 8010d46:	2100      	movs	r1, #0
 8010d48:	9101      	str	r1, [sp, #4]
 8010d4a:	200a      	movs	r0, #10
 8010d4c:	e7f5      	b.n	8010d3a <_vfiprintf_r+0x2a6>
 8010d4e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8010d52:	e7c7      	b.n	8010ce4 <_vfiprintf_r+0x250>
 8010d54:	2100      	movs	r1, #0
 8010d56:	465a      	mov	r2, fp
 8010d58:	9102      	str	r1, [sp, #8]
 8010d5a:	200a      	movs	r0, #10
 8010d5c:	9902      	ldr	r1, [sp, #8]
 8010d5e:	3b30      	subs	r3, #48	@ 0x30
 8010d60:	fb00 3301 	mla	r3, r0, r1, r3
 8010d64:	9302      	str	r3, [sp, #8]
 8010d66:	f812 3b01 	ldrb.w	r3, [r2], #1
 8010d6a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8010d6e:	2909      	cmp	r1, #9
 8010d70:	d9f4      	bls.n	8010d5c <_vfiprintf_r+0x2c8>
 8010d72:	e7e6      	b.n	8010d42 <_vfiprintf_r+0x2ae>
 8010d74:	f89b 3000 	ldrb.w	r3, [fp]
 8010d78:	2b68      	cmp	r3, #104	@ 0x68
 8010d7a:	bf06      	itte	eq
 8010d7c:	f10b 0b01 	addeq.w	fp, fp, #1
 8010d80:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8010d84:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8010d88:	e7ac      	b.n	8010ce4 <_vfiprintf_r+0x250>
 8010d8a:	f89b 3000 	ldrb.w	r3, [fp]
 8010d8e:	2b6c      	cmp	r3, #108	@ 0x6c
 8010d90:	d104      	bne.n	8010d9c <_vfiprintf_r+0x308>
 8010d92:	f10b 0b01 	add.w	fp, fp, #1
 8010d96:	f04a 0a20 	orr.w	sl, sl, #32
 8010d9a:	e7a3      	b.n	8010ce4 <_vfiprintf_r+0x250>
 8010d9c:	f04a 0a10 	orr.w	sl, sl, #16
 8010da0:	e7a0      	b.n	8010ce4 <_vfiprintf_r+0x250>
 8010da2:	46a8      	mov	r8, r5
 8010da4:	2400      	movs	r4, #0
 8010da6:	f858 3b04 	ldr.w	r3, [r8], #4
 8010daa:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8010dae:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8010db2:	2301      	movs	r3, #1
 8010db4:	9301      	str	r3, [sp, #4]
 8010db6:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8010dba:	e0ab      	b.n	8010f14 <_vfiprintf_r+0x480>
 8010dbc:	f04a 0a10 	orr.w	sl, sl, #16
 8010dc0:	f01a 0f20 	tst.w	sl, #32
 8010dc4:	d011      	beq.n	8010dea <_vfiprintf_r+0x356>
 8010dc6:	3507      	adds	r5, #7
 8010dc8:	f025 0507 	bic.w	r5, r5, #7
 8010dcc:	46a8      	mov	r8, r5
 8010dce:	686d      	ldr	r5, [r5, #4]
 8010dd0:	f858 4b08 	ldr.w	r4, [r8], #8
 8010dd4:	2d00      	cmp	r5, #0
 8010dd6:	da06      	bge.n	8010de6 <_vfiprintf_r+0x352>
 8010dd8:	4264      	negs	r4, r4
 8010dda:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8010dde:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8010de2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8010de6:	2301      	movs	r3, #1
 8010de8:	e048      	b.n	8010e7c <_vfiprintf_r+0x3e8>
 8010dea:	46a8      	mov	r8, r5
 8010dec:	f01a 0f10 	tst.w	sl, #16
 8010df0:	f858 5b04 	ldr.w	r5, [r8], #4
 8010df4:	d002      	beq.n	8010dfc <_vfiprintf_r+0x368>
 8010df6:	462c      	mov	r4, r5
 8010df8:	17ed      	asrs	r5, r5, #31
 8010dfa:	e7eb      	b.n	8010dd4 <_vfiprintf_r+0x340>
 8010dfc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8010e00:	d003      	beq.n	8010e0a <_vfiprintf_r+0x376>
 8010e02:	b22c      	sxth	r4, r5
 8010e04:	f345 35c0 	sbfx	r5, r5, #15, #1
 8010e08:	e7e4      	b.n	8010dd4 <_vfiprintf_r+0x340>
 8010e0a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8010e0e:	d0f2      	beq.n	8010df6 <_vfiprintf_r+0x362>
 8010e10:	b26c      	sxtb	r4, r5
 8010e12:	f345 15c0 	sbfx	r5, r5, #7, #1
 8010e16:	e7dd      	b.n	8010dd4 <_vfiprintf_r+0x340>
 8010e18:	f01a 0f20 	tst.w	sl, #32
 8010e1c:	d007      	beq.n	8010e2e <_vfiprintf_r+0x39a>
 8010e1e:	9a03      	ldr	r2, [sp, #12]
 8010e20:	682b      	ldr	r3, [r5, #0]
 8010e22:	9903      	ldr	r1, [sp, #12]
 8010e24:	17d2      	asrs	r2, r2, #31
 8010e26:	e9c3 1200 	strd	r1, r2, [r3]
 8010e2a:	3504      	adds	r5, #4
 8010e2c:	e693      	b.n	8010b56 <_vfiprintf_r+0xc2>
 8010e2e:	f01a 0f10 	tst.w	sl, #16
 8010e32:	d003      	beq.n	8010e3c <_vfiprintf_r+0x3a8>
 8010e34:	682b      	ldr	r3, [r5, #0]
 8010e36:	9a03      	ldr	r2, [sp, #12]
 8010e38:	601a      	str	r2, [r3, #0]
 8010e3a:	e7f6      	b.n	8010e2a <_vfiprintf_r+0x396>
 8010e3c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8010e40:	d003      	beq.n	8010e4a <_vfiprintf_r+0x3b6>
 8010e42:	682b      	ldr	r3, [r5, #0]
 8010e44:	9a03      	ldr	r2, [sp, #12]
 8010e46:	801a      	strh	r2, [r3, #0]
 8010e48:	e7ef      	b.n	8010e2a <_vfiprintf_r+0x396>
 8010e4a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8010e4e:	d0f1      	beq.n	8010e34 <_vfiprintf_r+0x3a0>
 8010e50:	682b      	ldr	r3, [r5, #0]
 8010e52:	9a03      	ldr	r2, [sp, #12]
 8010e54:	701a      	strb	r2, [r3, #0]
 8010e56:	e7e8      	b.n	8010e2a <_vfiprintf_r+0x396>
 8010e58:	f04a 0a10 	orr.w	sl, sl, #16
 8010e5c:	f01a 0320 	ands.w	r3, sl, #32
 8010e60:	d01f      	beq.n	8010ea2 <_vfiprintf_r+0x40e>
 8010e62:	3507      	adds	r5, #7
 8010e64:	f025 0507 	bic.w	r5, r5, #7
 8010e68:	46a8      	mov	r8, r5
 8010e6a:	686d      	ldr	r5, [r5, #4]
 8010e6c:	f858 4b08 	ldr.w	r4, [r8], #8
 8010e70:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8010e74:	2300      	movs	r3, #0
 8010e76:	2200      	movs	r2, #0
 8010e78:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8010e7c:	9a01      	ldr	r2, [sp, #4]
 8010e7e:	3201      	adds	r2, #1
 8010e80:	f000 825f 	beq.w	8011342 <_vfiprintf_r+0x8ae>
 8010e84:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8010e88:	9204      	str	r2, [sp, #16]
 8010e8a:	ea54 0205 	orrs.w	r2, r4, r5
 8010e8e:	f040 825e 	bne.w	801134e <_vfiprintf_r+0x8ba>
 8010e92:	9a01      	ldr	r2, [sp, #4]
 8010e94:	2a00      	cmp	r2, #0
 8010e96:	f000 8198 	beq.w	80111ca <_vfiprintf_r+0x736>
 8010e9a:	2b01      	cmp	r3, #1
 8010e9c:	f040 825a 	bne.w	8011354 <_vfiprintf_r+0x8c0>
 8010ea0:	e13b      	b.n	801111a <_vfiprintf_r+0x686>
 8010ea2:	46a8      	mov	r8, r5
 8010ea4:	f01a 0510 	ands.w	r5, sl, #16
 8010ea8:	f858 4b04 	ldr.w	r4, [r8], #4
 8010eac:	d001      	beq.n	8010eb2 <_vfiprintf_r+0x41e>
 8010eae:	461d      	mov	r5, r3
 8010eb0:	e7de      	b.n	8010e70 <_vfiprintf_r+0x3dc>
 8010eb2:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8010eb6:	d001      	beq.n	8010ebc <_vfiprintf_r+0x428>
 8010eb8:	b2a4      	uxth	r4, r4
 8010eba:	e7d9      	b.n	8010e70 <_vfiprintf_r+0x3dc>
 8010ebc:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8010ec0:	d0d6      	beq.n	8010e70 <_vfiprintf_r+0x3dc>
 8010ec2:	b2e4      	uxtb	r4, r4
 8010ec4:	e7f3      	b.n	8010eae <_vfiprintf_r+0x41a>
 8010ec6:	46a8      	mov	r8, r5
 8010ec8:	f647 0330 	movw	r3, #30768	@ 0x7830
 8010ecc:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8010ed0:	f858 4b04 	ldr.w	r4, [r8], #4
 8010ed4:	4b03      	ldr	r3, [pc, #12]	@ (8010ee4 <_vfiprintf_r+0x450>)
 8010ed6:	9305      	str	r3, [sp, #20]
 8010ed8:	2500      	movs	r5, #0
 8010eda:	f04a 0a02 	orr.w	sl, sl, #2
 8010ede:	2302      	movs	r3, #2
 8010ee0:	e7c9      	b.n	8010e76 <_vfiprintf_r+0x3e2>
 8010ee2:	bf00      	nop
 8010ee4:	08011b78 	.word	0x08011b78
 8010ee8:	9b01      	ldr	r3, [sp, #4]
 8010eea:	46a8      	mov	r8, r5
 8010eec:	1c5c      	adds	r4, r3, #1
 8010eee:	f04f 0500 	mov.w	r5, #0
 8010ef2:	f858 9b04 	ldr.w	r9, [r8], #4
 8010ef6:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8010efa:	f000 80d0 	beq.w	801109e <_vfiprintf_r+0x60a>
 8010efe:	461a      	mov	r2, r3
 8010f00:	4629      	mov	r1, r5
 8010f02:	4648      	mov	r0, r9
 8010f04:	f7ef f9ec 	bl	80002e0 <memchr>
 8010f08:	4604      	mov	r4, r0
 8010f0a:	b118      	cbz	r0, 8010f14 <_vfiprintf_r+0x480>
 8010f0c:	eba0 0309 	sub.w	r3, r0, r9
 8010f10:	9301      	str	r3, [sp, #4]
 8010f12:	462c      	mov	r4, r5
 8010f14:	9b01      	ldr	r3, [sp, #4]
 8010f16:	42a3      	cmp	r3, r4
 8010f18:	bfb8      	it	lt
 8010f1a:	4623      	movlt	r3, r4
 8010f1c:	9304      	str	r3, [sp, #16]
 8010f1e:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8010f22:	b113      	cbz	r3, 8010f2a <_vfiprintf_r+0x496>
 8010f24:	9b04      	ldr	r3, [sp, #16]
 8010f26:	3301      	adds	r3, #1
 8010f28:	9304      	str	r3, [sp, #16]
 8010f2a:	f01a 0302 	ands.w	r3, sl, #2
 8010f2e:	9308      	str	r3, [sp, #32]
 8010f30:	bf1e      	ittt	ne
 8010f32:	9b04      	ldrne	r3, [sp, #16]
 8010f34:	3302      	addne	r3, #2
 8010f36:	9304      	strne	r3, [sp, #16]
 8010f38:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8010f3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f3e:	d11f      	bne.n	8010f80 <_vfiprintf_r+0x4ec>
 8010f40:	9b02      	ldr	r3, [sp, #8]
 8010f42:	9a04      	ldr	r2, [sp, #16]
 8010f44:	1a9d      	subs	r5, r3, r2
 8010f46:	2d00      	cmp	r5, #0
 8010f48:	dd1a      	ble.n	8010f80 <_vfiprintf_r+0x4ec>
 8010f4a:	4ba9      	ldr	r3, [pc, #676]	@ (80111f0 <_vfiprintf_r+0x75c>)
 8010f4c:	6033      	str	r3, [r6, #0]
 8010f4e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8010f52:	2d10      	cmp	r5, #16
 8010f54:	f102 0201 	add.w	r2, r2, #1
 8010f58:	f106 0008 	add.w	r0, r6, #8
 8010f5c:	f300 814e 	bgt.w	80111fc <_vfiprintf_r+0x768>
 8010f60:	6075      	str	r5, [r6, #4]
 8010f62:	2a07      	cmp	r2, #7
 8010f64:	4465      	add	r5, ip
 8010f66:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8010f6a:	f340 815a 	ble.w	8011222 <_vfiprintf_r+0x78e>
 8010f6e:	9800      	ldr	r0, [sp, #0]
 8010f70:	aa0e      	add	r2, sp, #56	@ 0x38
 8010f72:	4639      	mov	r1, r7
 8010f74:	f7ff fd5c 	bl	8010a30 <__sprint_r>
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	f040 81b4 	bne.w	80112e6 <_vfiprintf_r+0x852>
 8010f7e:	ae11      	add	r6, sp, #68	@ 0x44
 8010f80:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8010f84:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8010f88:	b161      	cbz	r1, 8010fa4 <_vfiprintf_r+0x510>
 8010f8a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8010f8e:	3301      	adds	r3, #1
 8010f90:	6031      	str	r1, [r6, #0]
 8010f92:	2101      	movs	r1, #1
 8010f94:	440a      	add	r2, r1
 8010f96:	2b07      	cmp	r3, #7
 8010f98:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010f9c:	6071      	str	r1, [r6, #4]
 8010f9e:	f300 8142 	bgt.w	8011226 <_vfiprintf_r+0x792>
 8010fa2:	3608      	adds	r6, #8
 8010fa4:	9908      	ldr	r1, [sp, #32]
 8010fa6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8010faa:	b159      	cbz	r1, 8010fc4 <_vfiprintf_r+0x530>
 8010fac:	a90d      	add	r1, sp, #52	@ 0x34
 8010fae:	3301      	adds	r3, #1
 8010fb0:	6031      	str	r1, [r6, #0]
 8010fb2:	2102      	movs	r1, #2
 8010fb4:	440a      	add	r2, r1
 8010fb6:	2b07      	cmp	r3, #7
 8010fb8:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010fbc:	6071      	str	r1, [r6, #4]
 8010fbe:	f300 813b 	bgt.w	8011238 <_vfiprintf_r+0x7a4>
 8010fc2:	3608      	adds	r6, #8
 8010fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fc6:	2b80      	cmp	r3, #128	@ 0x80
 8010fc8:	d11f      	bne.n	801100a <_vfiprintf_r+0x576>
 8010fca:	9b02      	ldr	r3, [sp, #8]
 8010fcc:	9a04      	ldr	r2, [sp, #16]
 8010fce:	1a9d      	subs	r5, r3, r2
 8010fd0:	2d00      	cmp	r5, #0
 8010fd2:	dd1a      	ble.n	801100a <_vfiprintf_r+0x576>
 8010fd4:	4b87      	ldr	r3, [pc, #540]	@ (80111f4 <_vfiprintf_r+0x760>)
 8010fd6:	6033      	str	r3, [r6, #0]
 8010fd8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8010fdc:	2d10      	cmp	r5, #16
 8010fde:	f102 0201 	add.w	r2, r2, #1
 8010fe2:	f106 0008 	add.w	r0, r6, #8
 8010fe6:	f300 8130 	bgt.w	801124a <_vfiprintf_r+0x7b6>
 8010fea:	6075      	str	r5, [r6, #4]
 8010fec:	2a07      	cmp	r2, #7
 8010fee:	4465      	add	r5, ip
 8010ff0:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8010ff4:	f340 813c 	ble.w	8011270 <_vfiprintf_r+0x7dc>
 8010ff8:	9800      	ldr	r0, [sp, #0]
 8010ffa:	aa0e      	add	r2, sp, #56	@ 0x38
 8010ffc:	4639      	mov	r1, r7
 8010ffe:	f7ff fd17 	bl	8010a30 <__sprint_r>
 8011002:	2800      	cmp	r0, #0
 8011004:	f040 816f 	bne.w	80112e6 <_vfiprintf_r+0x852>
 8011008:	ae11      	add	r6, sp, #68	@ 0x44
 801100a:	9b01      	ldr	r3, [sp, #4]
 801100c:	1ae4      	subs	r4, r4, r3
 801100e:	2c00      	cmp	r4, #0
 8011010:	dd1a      	ble.n	8011048 <_vfiprintf_r+0x5b4>
 8011012:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8011016:	4877      	ldr	r0, [pc, #476]	@ (80111f4 <_vfiprintf_r+0x760>)
 8011018:	6030      	str	r0, [r6, #0]
 801101a:	2c10      	cmp	r4, #16
 801101c:	f103 0301 	add.w	r3, r3, #1
 8011020:	f106 0108 	add.w	r1, r6, #8
 8011024:	f300 8126 	bgt.w	8011274 <_vfiprintf_r+0x7e0>
 8011028:	6074      	str	r4, [r6, #4]
 801102a:	2b07      	cmp	r3, #7
 801102c:	4414      	add	r4, r2
 801102e:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8011032:	f340 8130 	ble.w	8011296 <_vfiprintf_r+0x802>
 8011036:	9800      	ldr	r0, [sp, #0]
 8011038:	aa0e      	add	r2, sp, #56	@ 0x38
 801103a:	4639      	mov	r1, r7
 801103c:	f7ff fcf8 	bl	8010a30 <__sprint_r>
 8011040:	2800      	cmp	r0, #0
 8011042:	f040 8150 	bne.w	80112e6 <_vfiprintf_r+0x852>
 8011046:	ae11      	add	r6, sp, #68	@ 0x44
 8011048:	9b01      	ldr	r3, [sp, #4]
 801104a:	9a01      	ldr	r2, [sp, #4]
 801104c:	6073      	str	r3, [r6, #4]
 801104e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011050:	f8c6 9000 	str.w	r9, [r6]
 8011054:	4413      	add	r3, r2
 8011056:	9310      	str	r3, [sp, #64]	@ 0x40
 8011058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801105a:	3301      	adds	r3, #1
 801105c:	2b07      	cmp	r3, #7
 801105e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011060:	f300 811b 	bgt.w	801129a <_vfiprintf_r+0x806>
 8011064:	f106 0308 	add.w	r3, r6, #8
 8011068:	f01a 0f04 	tst.w	sl, #4
 801106c:	f040 811d 	bne.w	80112aa <_vfiprintf_r+0x816>
 8011070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011074:	9904      	ldr	r1, [sp, #16]
 8011076:	428a      	cmp	r2, r1
 8011078:	bfac      	ite	ge
 801107a:	189b      	addge	r3, r3, r2
 801107c:	185b      	addlt	r3, r3, r1
 801107e:	9303      	str	r3, [sp, #12]
 8011080:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011082:	b13b      	cbz	r3, 8011094 <_vfiprintf_r+0x600>
 8011084:	9800      	ldr	r0, [sp, #0]
 8011086:	aa0e      	add	r2, sp, #56	@ 0x38
 8011088:	4639      	mov	r1, r7
 801108a:	f7ff fcd1 	bl	8010a30 <__sprint_r>
 801108e:	2800      	cmp	r0, #0
 8011090:	f040 8129 	bne.w	80112e6 <_vfiprintf_r+0x852>
 8011094:	2300      	movs	r3, #0
 8011096:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011098:	4645      	mov	r5, r8
 801109a:	ae11      	add	r6, sp, #68	@ 0x44
 801109c:	e55b      	b.n	8010b56 <_vfiprintf_r+0xc2>
 801109e:	4648      	mov	r0, r9
 80110a0:	f7ef f96e 	bl	8000380 <strlen>
 80110a4:	9001      	str	r0, [sp, #4]
 80110a6:	e734      	b.n	8010f12 <_vfiprintf_r+0x47e>
 80110a8:	f04a 0a10 	orr.w	sl, sl, #16
 80110ac:	f01a 0320 	ands.w	r3, sl, #32
 80110b0:	d008      	beq.n	80110c4 <_vfiprintf_r+0x630>
 80110b2:	3507      	adds	r5, #7
 80110b4:	f025 0507 	bic.w	r5, r5, #7
 80110b8:	46a8      	mov	r8, r5
 80110ba:	686d      	ldr	r5, [r5, #4]
 80110bc:	f858 4b08 	ldr.w	r4, [r8], #8
 80110c0:	2301      	movs	r3, #1
 80110c2:	e6d8      	b.n	8010e76 <_vfiprintf_r+0x3e2>
 80110c4:	46a8      	mov	r8, r5
 80110c6:	f01a 0510 	ands.w	r5, sl, #16
 80110ca:	f858 4b04 	ldr.w	r4, [r8], #4
 80110ce:	d001      	beq.n	80110d4 <_vfiprintf_r+0x640>
 80110d0:	461d      	mov	r5, r3
 80110d2:	e7f5      	b.n	80110c0 <_vfiprintf_r+0x62c>
 80110d4:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80110d8:	d001      	beq.n	80110de <_vfiprintf_r+0x64a>
 80110da:	b2a4      	uxth	r4, r4
 80110dc:	e7f0      	b.n	80110c0 <_vfiprintf_r+0x62c>
 80110de:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80110e2:	d0ed      	beq.n	80110c0 <_vfiprintf_r+0x62c>
 80110e4:	b2e4      	uxtb	r4, r4
 80110e6:	e7f3      	b.n	80110d0 <_vfiprintf_r+0x63c>
 80110e8:	4a43      	ldr	r2, [pc, #268]	@ (80111f8 <_vfiprintf_r+0x764>)
 80110ea:	e5c9      	b.n	8010c80 <_vfiprintf_r+0x1ec>
 80110ec:	46a8      	mov	r8, r5
 80110ee:	f01a 0510 	ands.w	r5, sl, #16
 80110f2:	f858 4b04 	ldr.w	r4, [r8], #4
 80110f6:	d001      	beq.n	80110fc <_vfiprintf_r+0x668>
 80110f8:	4615      	mov	r5, r2
 80110fa:	e5cd      	b.n	8010c98 <_vfiprintf_r+0x204>
 80110fc:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8011100:	d001      	beq.n	8011106 <_vfiprintf_r+0x672>
 8011102:	b2a4      	uxth	r4, r4
 8011104:	e5c8      	b.n	8010c98 <_vfiprintf_r+0x204>
 8011106:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801110a:	f43f adc5 	beq.w	8010c98 <_vfiprintf_r+0x204>
 801110e:	b2e4      	uxtb	r4, r4
 8011110:	e7f2      	b.n	80110f8 <_vfiprintf_r+0x664>
 8011112:	2c0a      	cmp	r4, #10
 8011114:	f175 0300 	sbcs.w	r3, r5, #0
 8011118:	d206      	bcs.n	8011128 <_vfiprintf_r+0x694>
 801111a:	3430      	adds	r4, #48	@ 0x30
 801111c:	b2e4      	uxtb	r4, r4
 801111e:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8011122:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8011126:	e131      	b.n	801138c <_vfiprintf_r+0x8f8>
 8011128:	ab3a      	add	r3, sp, #232	@ 0xe8
 801112a:	9308      	str	r3, [sp, #32]
 801112c:	9b04      	ldr	r3, [sp, #16]
 801112e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011132:	f04f 0a00 	mov.w	sl, #0
 8011136:	930a      	str	r3, [sp, #40]	@ 0x28
 8011138:	220a      	movs	r2, #10
 801113a:	2300      	movs	r3, #0
 801113c:	4620      	mov	r0, r4
 801113e:	4629      	mov	r1, r5
 8011140:	f7ef f926 	bl	8000390 <__aeabi_uldivmod>
 8011144:	460b      	mov	r3, r1
 8011146:	9908      	ldr	r1, [sp, #32]
 8011148:	900b      	str	r0, [sp, #44]	@ 0x2c
 801114a:	3230      	adds	r2, #48	@ 0x30
 801114c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8011150:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011152:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8011156:	f10a 0a01 	add.w	sl, sl, #1
 801115a:	b1e2      	cbz	r2, 8011196 <_vfiprintf_r+0x702>
 801115c:	9a06      	ldr	r2, [sp, #24]
 801115e:	7812      	ldrb	r2, [r2, #0]
 8011160:	4552      	cmp	r2, sl
 8011162:	d118      	bne.n	8011196 <_vfiprintf_r+0x702>
 8011164:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8011168:	d015      	beq.n	8011196 <_vfiprintf_r+0x702>
 801116a:	2c0a      	cmp	r4, #10
 801116c:	f175 0200 	sbcs.w	r2, r5, #0
 8011170:	d311      	bcc.n	8011196 <_vfiprintf_r+0x702>
 8011172:	9308      	str	r3, [sp, #32]
 8011174:	9b07      	ldr	r3, [sp, #28]
 8011176:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011178:	eba9 0903 	sub.w	r9, r9, r3
 801117c:	461a      	mov	r2, r3
 801117e:	4648      	mov	r0, r9
 8011180:	f7fd ffc1 	bl	800f106 <strncpy>
 8011184:	9b06      	ldr	r3, [sp, #24]
 8011186:	785a      	ldrb	r2, [r3, #1]
 8011188:	9b08      	ldr	r3, [sp, #32]
 801118a:	b172      	cbz	r2, 80111aa <_vfiprintf_r+0x716>
 801118c:	9a06      	ldr	r2, [sp, #24]
 801118e:	3201      	adds	r2, #1
 8011190:	9206      	str	r2, [sp, #24]
 8011192:	f04f 0a00 	mov.w	sl, #0
 8011196:	2c0a      	cmp	r4, #10
 8011198:	f175 0500 	sbcs.w	r5, r5, #0
 801119c:	f0c0 80f6 	bcc.w	801138c <_vfiprintf_r+0x8f8>
 80111a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80111a2:	f8cd 9020 	str.w	r9, [sp, #32]
 80111a6:	461d      	mov	r5, r3
 80111a8:	e7c6      	b.n	8011138 <_vfiprintf_r+0x6a4>
 80111aa:	4692      	mov	sl, r2
 80111ac:	e7f3      	b.n	8011196 <_vfiprintf_r+0x702>
 80111ae:	f004 030f 	and.w	r3, r4, #15
 80111b2:	9a05      	ldr	r2, [sp, #20]
 80111b4:	0924      	lsrs	r4, r4, #4
 80111b6:	5cd3      	ldrb	r3, [r2, r3]
 80111b8:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80111bc:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 80111c0:	092d      	lsrs	r5, r5, #4
 80111c2:	ea54 0305 	orrs.w	r3, r4, r5
 80111c6:	d1f2      	bne.n	80111ae <_vfiprintf_r+0x71a>
 80111c8:	e0e0      	b.n	801138c <_vfiprintf_r+0x8f8>
 80111ca:	b923      	cbnz	r3, 80111d6 <_vfiprintf_r+0x742>
 80111cc:	f01a 0f01 	tst.w	sl, #1
 80111d0:	d001      	beq.n	80111d6 <_vfiprintf_r+0x742>
 80111d2:	2430      	movs	r4, #48	@ 0x30
 80111d4:	e7a3      	b.n	801111e <_vfiprintf_r+0x68a>
 80111d6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80111da:	e0d7      	b.n	801138c <_vfiprintf_r+0x8f8>
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f000 80a3 	beq.w	8011328 <_vfiprintf_r+0x894>
 80111e2:	2400      	movs	r4, #0
 80111e4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80111e8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80111ec:	46a8      	mov	r8, r5
 80111ee:	e5e0      	b.n	8010db2 <_vfiprintf_r+0x31e>
 80111f0:	08011edf 	.word	0x08011edf
 80111f4:	08011ecf 	.word	0x08011ecf
 80111f8:	08011b89 	.word	0x08011b89
 80111fc:	2110      	movs	r1, #16
 80111fe:	6071      	str	r1, [r6, #4]
 8011200:	2a07      	cmp	r2, #7
 8011202:	4461      	add	r1, ip
 8011204:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8011208:	dd08      	ble.n	801121c <_vfiprintf_r+0x788>
 801120a:	9800      	ldr	r0, [sp, #0]
 801120c:	aa0e      	add	r2, sp, #56	@ 0x38
 801120e:	4639      	mov	r1, r7
 8011210:	f7ff fc0e 	bl	8010a30 <__sprint_r>
 8011214:	2800      	cmp	r0, #0
 8011216:	d166      	bne.n	80112e6 <_vfiprintf_r+0x852>
 8011218:	4b60      	ldr	r3, [pc, #384]	@ (801139c <_vfiprintf_r+0x908>)
 801121a:	a811      	add	r0, sp, #68	@ 0x44
 801121c:	3d10      	subs	r5, #16
 801121e:	4606      	mov	r6, r0
 8011220:	e694      	b.n	8010f4c <_vfiprintf_r+0x4b8>
 8011222:	4606      	mov	r6, r0
 8011224:	e6ac      	b.n	8010f80 <_vfiprintf_r+0x4ec>
 8011226:	9800      	ldr	r0, [sp, #0]
 8011228:	aa0e      	add	r2, sp, #56	@ 0x38
 801122a:	4639      	mov	r1, r7
 801122c:	f7ff fc00 	bl	8010a30 <__sprint_r>
 8011230:	2800      	cmp	r0, #0
 8011232:	d158      	bne.n	80112e6 <_vfiprintf_r+0x852>
 8011234:	ae11      	add	r6, sp, #68	@ 0x44
 8011236:	e6b5      	b.n	8010fa4 <_vfiprintf_r+0x510>
 8011238:	9800      	ldr	r0, [sp, #0]
 801123a:	aa0e      	add	r2, sp, #56	@ 0x38
 801123c:	4639      	mov	r1, r7
 801123e:	f7ff fbf7 	bl	8010a30 <__sprint_r>
 8011242:	2800      	cmp	r0, #0
 8011244:	d14f      	bne.n	80112e6 <_vfiprintf_r+0x852>
 8011246:	ae11      	add	r6, sp, #68	@ 0x44
 8011248:	e6bc      	b.n	8010fc4 <_vfiprintf_r+0x530>
 801124a:	2110      	movs	r1, #16
 801124c:	6071      	str	r1, [r6, #4]
 801124e:	2a07      	cmp	r2, #7
 8011250:	4461      	add	r1, ip
 8011252:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8011256:	dd08      	ble.n	801126a <_vfiprintf_r+0x7d6>
 8011258:	9800      	ldr	r0, [sp, #0]
 801125a:	aa0e      	add	r2, sp, #56	@ 0x38
 801125c:	4639      	mov	r1, r7
 801125e:	f7ff fbe7 	bl	8010a30 <__sprint_r>
 8011262:	2800      	cmp	r0, #0
 8011264:	d13f      	bne.n	80112e6 <_vfiprintf_r+0x852>
 8011266:	4b4e      	ldr	r3, [pc, #312]	@ (80113a0 <_vfiprintf_r+0x90c>)
 8011268:	a811      	add	r0, sp, #68	@ 0x44
 801126a:	3d10      	subs	r5, #16
 801126c:	4606      	mov	r6, r0
 801126e:	e6b2      	b.n	8010fd6 <_vfiprintf_r+0x542>
 8011270:	4606      	mov	r6, r0
 8011272:	e6ca      	b.n	801100a <_vfiprintf_r+0x576>
 8011274:	2010      	movs	r0, #16
 8011276:	4402      	add	r2, r0
 8011278:	2b07      	cmp	r3, #7
 801127a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801127e:	6070      	str	r0, [r6, #4]
 8011280:	dd06      	ble.n	8011290 <_vfiprintf_r+0x7fc>
 8011282:	9800      	ldr	r0, [sp, #0]
 8011284:	aa0e      	add	r2, sp, #56	@ 0x38
 8011286:	4639      	mov	r1, r7
 8011288:	f7ff fbd2 	bl	8010a30 <__sprint_r>
 801128c:	bb58      	cbnz	r0, 80112e6 <_vfiprintf_r+0x852>
 801128e:	a911      	add	r1, sp, #68	@ 0x44
 8011290:	3c10      	subs	r4, #16
 8011292:	460e      	mov	r6, r1
 8011294:	e6bd      	b.n	8011012 <_vfiprintf_r+0x57e>
 8011296:	460e      	mov	r6, r1
 8011298:	e6d6      	b.n	8011048 <_vfiprintf_r+0x5b4>
 801129a:	9800      	ldr	r0, [sp, #0]
 801129c:	aa0e      	add	r2, sp, #56	@ 0x38
 801129e:	4639      	mov	r1, r7
 80112a0:	f7ff fbc6 	bl	8010a30 <__sprint_r>
 80112a4:	b9f8      	cbnz	r0, 80112e6 <_vfiprintf_r+0x852>
 80112a6:	ab11      	add	r3, sp, #68	@ 0x44
 80112a8:	e6de      	b.n	8011068 <_vfiprintf_r+0x5d4>
 80112aa:	9a02      	ldr	r2, [sp, #8]
 80112ac:	9904      	ldr	r1, [sp, #16]
 80112ae:	1a54      	subs	r4, r2, r1
 80112b0:	2c00      	cmp	r4, #0
 80112b2:	f77f aedd 	ble.w	8011070 <_vfiprintf_r+0x5dc>
 80112b6:	4d39      	ldr	r5, [pc, #228]	@ (801139c <_vfiprintf_r+0x908>)
 80112b8:	2610      	movs	r6, #16
 80112ba:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 80112be:	2c10      	cmp	r4, #16
 80112c0:	f102 0201 	add.w	r2, r2, #1
 80112c4:	601d      	str	r5, [r3, #0]
 80112c6:	dc1d      	bgt.n	8011304 <_vfiprintf_r+0x870>
 80112c8:	605c      	str	r4, [r3, #4]
 80112ca:	2a07      	cmp	r2, #7
 80112cc:	440c      	add	r4, r1
 80112ce:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80112d2:	f77f aecd 	ble.w	8011070 <_vfiprintf_r+0x5dc>
 80112d6:	9800      	ldr	r0, [sp, #0]
 80112d8:	aa0e      	add	r2, sp, #56	@ 0x38
 80112da:	4639      	mov	r1, r7
 80112dc:	f7ff fba8 	bl	8010a30 <__sprint_r>
 80112e0:	2800      	cmp	r0, #0
 80112e2:	f43f aec5 	beq.w	8011070 <_vfiprintf_r+0x5dc>
 80112e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80112e8:	07d9      	lsls	r1, r3, #31
 80112ea:	d405      	bmi.n	80112f8 <_vfiprintf_r+0x864>
 80112ec:	89bb      	ldrh	r3, [r7, #12]
 80112ee:	059a      	lsls	r2, r3, #22
 80112f0:	d402      	bmi.n	80112f8 <_vfiprintf_r+0x864>
 80112f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80112f4:	f7fc f911 	bl	800d51a <__retarget_lock_release_recursive>
 80112f8:	89bb      	ldrh	r3, [r7, #12]
 80112fa:	065b      	lsls	r3, r3, #25
 80112fc:	f57f abfb 	bpl.w	8010af6 <_vfiprintf_r+0x62>
 8011300:	f7ff bbf6 	b.w	8010af0 <_vfiprintf_r+0x5c>
 8011304:	3110      	adds	r1, #16
 8011306:	2a07      	cmp	r2, #7
 8011308:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801130c:	605e      	str	r6, [r3, #4]
 801130e:	dc02      	bgt.n	8011316 <_vfiprintf_r+0x882>
 8011310:	3308      	adds	r3, #8
 8011312:	3c10      	subs	r4, #16
 8011314:	e7d1      	b.n	80112ba <_vfiprintf_r+0x826>
 8011316:	9800      	ldr	r0, [sp, #0]
 8011318:	aa0e      	add	r2, sp, #56	@ 0x38
 801131a:	4639      	mov	r1, r7
 801131c:	f7ff fb88 	bl	8010a30 <__sprint_r>
 8011320:	2800      	cmp	r0, #0
 8011322:	d1e0      	bne.n	80112e6 <_vfiprintf_r+0x852>
 8011324:	ab11      	add	r3, sp, #68	@ 0x44
 8011326:	e7f4      	b.n	8011312 <_vfiprintf_r+0x87e>
 8011328:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801132a:	b913      	cbnz	r3, 8011332 <_vfiprintf_r+0x89e>
 801132c:	2300      	movs	r3, #0
 801132e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011330:	e7d9      	b.n	80112e6 <_vfiprintf_r+0x852>
 8011332:	9800      	ldr	r0, [sp, #0]
 8011334:	aa0e      	add	r2, sp, #56	@ 0x38
 8011336:	4639      	mov	r1, r7
 8011338:	f7ff fb7a 	bl	8010a30 <__sprint_r>
 801133c:	2800      	cmp	r0, #0
 801133e:	d0f5      	beq.n	801132c <_vfiprintf_r+0x898>
 8011340:	e7d1      	b.n	80112e6 <_vfiprintf_r+0x852>
 8011342:	ea54 0205 	orrs.w	r2, r4, r5
 8011346:	f8cd a010 	str.w	sl, [sp, #16]
 801134a:	f43f ada6 	beq.w	8010e9a <_vfiprintf_r+0x406>
 801134e:	2b01      	cmp	r3, #1
 8011350:	f43f aedf 	beq.w	8011112 <_vfiprintf_r+0x67e>
 8011354:	2b02      	cmp	r3, #2
 8011356:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801135a:	f43f af28 	beq.w	80111ae <_vfiprintf_r+0x71a>
 801135e:	f004 0307 	and.w	r3, r4, #7
 8011362:	08e4      	lsrs	r4, r4, #3
 8011364:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8011368:	08ed      	lsrs	r5, r5, #3
 801136a:	3330      	adds	r3, #48	@ 0x30
 801136c:	ea54 0105 	orrs.w	r1, r4, r5
 8011370:	464a      	mov	r2, r9
 8011372:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011376:	d1f2      	bne.n	801135e <_vfiprintf_r+0x8ca>
 8011378:	9904      	ldr	r1, [sp, #16]
 801137a:	07c8      	lsls	r0, r1, #31
 801137c:	d506      	bpl.n	801138c <_vfiprintf_r+0x8f8>
 801137e:	2b30      	cmp	r3, #48	@ 0x30
 8011380:	d004      	beq.n	801138c <_vfiprintf_r+0x8f8>
 8011382:	2330      	movs	r3, #48	@ 0x30
 8011384:	f809 3c01 	strb.w	r3, [r9, #-1]
 8011388:	f1a2 0902 	sub.w	r9, r2, #2
 801138c:	ab3a      	add	r3, sp, #232	@ 0xe8
 801138e:	eba3 0309 	sub.w	r3, r3, r9
 8011392:	9c01      	ldr	r4, [sp, #4]
 8011394:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011398:	9301      	str	r3, [sp, #4]
 801139a:	e5bb      	b.n	8010f14 <_vfiprintf_r+0x480>
 801139c:	08011edf 	.word	0x08011edf
 80113a0:	08011ecf 	.word	0x08011ecf

080113a4 <__sbprintf>:
 80113a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113a6:	461f      	mov	r7, r3
 80113a8:	898b      	ldrh	r3, [r1, #12]
 80113aa:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 80113ae:	f023 0302 	bic.w	r3, r3, #2
 80113b2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80113b6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80113b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80113ba:	89cb      	ldrh	r3, [r1, #14]
 80113bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80113c0:	69cb      	ldr	r3, [r1, #28]
 80113c2:	9307      	str	r3, [sp, #28]
 80113c4:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80113c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80113c8:	ab1a      	add	r3, sp, #104	@ 0x68
 80113ca:	9300      	str	r3, [sp, #0]
 80113cc:	9304      	str	r3, [sp, #16]
 80113ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113d2:	4615      	mov	r5, r2
 80113d4:	4606      	mov	r6, r0
 80113d6:	9302      	str	r3, [sp, #8]
 80113d8:	9305      	str	r3, [sp, #20]
 80113da:	a816      	add	r0, sp, #88	@ 0x58
 80113dc:	2300      	movs	r3, #0
 80113de:	460c      	mov	r4, r1
 80113e0:	9306      	str	r3, [sp, #24]
 80113e2:	f7fc f897 	bl	800d514 <__retarget_lock_init_recursive>
 80113e6:	462a      	mov	r2, r5
 80113e8:	463b      	mov	r3, r7
 80113ea:	4669      	mov	r1, sp
 80113ec:	4630      	mov	r0, r6
 80113ee:	f7ff fb51 	bl	8010a94 <_vfiprintf_r>
 80113f2:	1e05      	subs	r5, r0, #0
 80113f4:	db07      	blt.n	8011406 <__sbprintf+0x62>
 80113f6:	4669      	mov	r1, sp
 80113f8:	4630      	mov	r0, r6
 80113fa:	f7fd fe5f 	bl	800f0bc <_fflush_r>
 80113fe:	2800      	cmp	r0, #0
 8011400:	bf18      	it	ne
 8011402:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8011406:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801140a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801140c:	065b      	lsls	r3, r3, #25
 801140e:	bf42      	ittt	mi
 8011410:	89a3      	ldrhmi	r3, [r4, #12]
 8011412:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8011416:	81a3      	strhmi	r3, [r4, #12]
 8011418:	f7fc f87d 	bl	800d516 <__retarget_lock_close_recursive>
 801141c:	4628      	mov	r0, r5
 801141e:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8011422:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011424 <__sfvwrite_r>:
 8011424:	6893      	ldr	r3, [r2, #8]
 8011426:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801142a:	4606      	mov	r6, r0
 801142c:	460c      	mov	r4, r1
 801142e:	4691      	mov	r9, r2
 8011430:	b91b      	cbnz	r3, 801143a <__sfvwrite_r+0x16>
 8011432:	2000      	movs	r0, #0
 8011434:	b003      	add	sp, #12
 8011436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801143a:	898b      	ldrh	r3, [r1, #12]
 801143c:	0718      	lsls	r0, r3, #28
 801143e:	d550      	bpl.n	80114e2 <__sfvwrite_r+0xbe>
 8011440:	690b      	ldr	r3, [r1, #16]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d04d      	beq.n	80114e2 <__sfvwrite_r+0xbe>
 8011446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801144a:	f8d9 8000 	ldr.w	r8, [r9]
 801144e:	f013 0702 	ands.w	r7, r3, #2
 8011452:	d16b      	bne.n	801152c <__sfvwrite_r+0x108>
 8011454:	f013 0301 	ands.w	r3, r3, #1
 8011458:	f000 809c 	beq.w	8011594 <__sfvwrite_r+0x170>
 801145c:	4638      	mov	r0, r7
 801145e:	46ba      	mov	sl, r7
 8011460:	46bb      	mov	fp, r7
 8011462:	f1bb 0f00 	cmp.w	fp, #0
 8011466:	f000 8103 	beq.w	8011670 <__sfvwrite_r+0x24c>
 801146a:	b950      	cbnz	r0, 8011482 <__sfvwrite_r+0x5e>
 801146c:	465a      	mov	r2, fp
 801146e:	210a      	movs	r1, #10
 8011470:	4650      	mov	r0, sl
 8011472:	f7ee ff35 	bl	80002e0 <memchr>
 8011476:	2800      	cmp	r0, #0
 8011478:	f000 8100 	beq.w	801167c <__sfvwrite_r+0x258>
 801147c:	3001      	adds	r0, #1
 801147e:	eba0 070a 	sub.w	r7, r0, sl
 8011482:	6820      	ldr	r0, [r4, #0]
 8011484:	6921      	ldr	r1, [r4, #16]
 8011486:	68a5      	ldr	r5, [r4, #8]
 8011488:	6963      	ldr	r3, [r4, #20]
 801148a:	455f      	cmp	r7, fp
 801148c:	463a      	mov	r2, r7
 801148e:	bf28      	it	cs
 8011490:	465a      	movcs	r2, fp
 8011492:	4288      	cmp	r0, r1
 8011494:	f240 80f5 	bls.w	8011682 <__sfvwrite_r+0x25e>
 8011498:	441d      	add	r5, r3
 801149a:	42aa      	cmp	r2, r5
 801149c:	f340 80f1 	ble.w	8011682 <__sfvwrite_r+0x25e>
 80114a0:	4651      	mov	r1, sl
 80114a2:	462a      	mov	r2, r5
 80114a4:	f7ff f867 	bl	8010576 <memmove>
 80114a8:	6823      	ldr	r3, [r4, #0]
 80114aa:	442b      	add	r3, r5
 80114ac:	6023      	str	r3, [r4, #0]
 80114ae:	4621      	mov	r1, r4
 80114b0:	4630      	mov	r0, r6
 80114b2:	f7fd fe03 	bl	800f0bc <_fflush_r>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	d167      	bne.n	801158a <__sfvwrite_r+0x166>
 80114ba:	1b7f      	subs	r7, r7, r5
 80114bc:	f040 80f9 	bne.w	80116b2 <__sfvwrite_r+0x28e>
 80114c0:	4621      	mov	r1, r4
 80114c2:	4630      	mov	r0, r6
 80114c4:	f7fd fdfa 	bl	800f0bc <_fflush_r>
 80114c8:	2800      	cmp	r0, #0
 80114ca:	d15e      	bne.n	801158a <__sfvwrite_r+0x166>
 80114cc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80114d0:	1b5b      	subs	r3, r3, r5
 80114d2:	44aa      	add	sl, r5
 80114d4:	ebab 0b05 	sub.w	fp, fp, r5
 80114d8:	f8c9 3008 	str.w	r3, [r9, #8]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d1c0      	bne.n	8011462 <__sfvwrite_r+0x3e>
 80114e0:	e7a7      	b.n	8011432 <__sfvwrite_r+0xe>
 80114e2:	4621      	mov	r1, r4
 80114e4:	4630      	mov	r0, r6
 80114e6:	f000 f8e9 	bl	80116bc <__swsetup_r>
 80114ea:	2800      	cmp	r0, #0
 80114ec:	d0ab      	beq.n	8011446 <__sfvwrite_r+0x22>
 80114ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80114f2:	e79f      	b.n	8011434 <__sfvwrite_r+0x10>
 80114f4:	e9d8 a500 	ldrd	sl, r5, [r8]
 80114f8:	f108 0808 	add.w	r8, r8, #8
 80114fc:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8011500:	69e1      	ldr	r1, [r4, #28]
 8011502:	2d00      	cmp	r5, #0
 8011504:	d0f6      	beq.n	80114f4 <__sfvwrite_r+0xd0>
 8011506:	42bd      	cmp	r5, r7
 8011508:	462b      	mov	r3, r5
 801150a:	4652      	mov	r2, sl
 801150c:	bf28      	it	cs
 801150e:	463b      	movcs	r3, r7
 8011510:	4630      	mov	r0, r6
 8011512:	47d8      	blx	fp
 8011514:	2800      	cmp	r0, #0
 8011516:	dd38      	ble.n	801158a <__sfvwrite_r+0x166>
 8011518:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801151c:	1a1b      	subs	r3, r3, r0
 801151e:	4482      	add	sl, r0
 8011520:	1a2d      	subs	r5, r5, r0
 8011522:	f8c9 3008 	str.w	r3, [r9, #8]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1e8      	bne.n	80114fc <__sfvwrite_r+0xd8>
 801152a:	e782      	b.n	8011432 <__sfvwrite_r+0xe>
 801152c:	f04f 0a00 	mov.w	sl, #0
 8011530:	4f61      	ldr	r7, [pc, #388]	@ (80116b8 <__sfvwrite_r+0x294>)
 8011532:	4655      	mov	r5, sl
 8011534:	e7e2      	b.n	80114fc <__sfvwrite_r+0xd8>
 8011536:	e9d8 7a00 	ldrd	r7, sl, [r8]
 801153a:	f108 0808 	add.w	r8, r8, #8
 801153e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011542:	6820      	ldr	r0, [r4, #0]
 8011544:	68a2      	ldr	r2, [r4, #8]
 8011546:	f1ba 0f00 	cmp.w	sl, #0
 801154a:	d0f4      	beq.n	8011536 <__sfvwrite_r+0x112>
 801154c:	0599      	lsls	r1, r3, #22
 801154e:	d563      	bpl.n	8011618 <__sfvwrite_r+0x1f4>
 8011550:	4552      	cmp	r2, sl
 8011552:	d836      	bhi.n	80115c2 <__sfvwrite_r+0x19e>
 8011554:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8011558:	d033      	beq.n	80115c2 <__sfvwrite_r+0x19e>
 801155a:	6921      	ldr	r1, [r4, #16]
 801155c:	6965      	ldr	r5, [r4, #20]
 801155e:	eba0 0b01 	sub.w	fp, r0, r1
 8011562:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011566:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801156a:	f10b 0201 	add.w	r2, fp, #1
 801156e:	106d      	asrs	r5, r5, #1
 8011570:	4452      	add	r2, sl
 8011572:	4295      	cmp	r5, r2
 8011574:	bf38      	it	cc
 8011576:	4615      	movcc	r5, r2
 8011578:	055b      	lsls	r3, r3, #21
 801157a:	d53d      	bpl.n	80115f8 <__sfvwrite_r+0x1d4>
 801157c:	4629      	mov	r1, r5
 801157e:	4630      	mov	r0, r6
 8011580:	f7fc f8f2 	bl	800d768 <_malloc_r>
 8011584:	b948      	cbnz	r0, 801159a <__sfvwrite_r+0x176>
 8011586:	230c      	movs	r3, #12
 8011588:	6033      	str	r3, [r6, #0]
 801158a:	89a3      	ldrh	r3, [r4, #12]
 801158c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011590:	81a3      	strh	r3, [r4, #12]
 8011592:	e7ac      	b.n	80114ee <__sfvwrite_r+0xca>
 8011594:	461f      	mov	r7, r3
 8011596:	469a      	mov	sl, r3
 8011598:	e7d1      	b.n	801153e <__sfvwrite_r+0x11a>
 801159a:	465a      	mov	r2, fp
 801159c:	6921      	ldr	r1, [r4, #16]
 801159e:	9001      	str	r0, [sp, #4]
 80115a0:	f7ff f80a 	bl	80105b8 <memcpy>
 80115a4:	89a2      	ldrh	r2, [r4, #12]
 80115a6:	9b01      	ldr	r3, [sp, #4]
 80115a8:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80115ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80115b0:	81a2      	strh	r2, [r4, #12]
 80115b2:	6123      	str	r3, [r4, #16]
 80115b4:	6165      	str	r5, [r4, #20]
 80115b6:	445b      	add	r3, fp
 80115b8:	eba5 050b 	sub.w	r5, r5, fp
 80115bc:	6023      	str	r3, [r4, #0]
 80115be:	4652      	mov	r2, sl
 80115c0:	60a5      	str	r5, [r4, #8]
 80115c2:	4552      	cmp	r2, sl
 80115c4:	bf28      	it	cs
 80115c6:	4652      	movcs	r2, sl
 80115c8:	6820      	ldr	r0, [r4, #0]
 80115ca:	9201      	str	r2, [sp, #4]
 80115cc:	4639      	mov	r1, r7
 80115ce:	f7fe ffd2 	bl	8010576 <memmove>
 80115d2:	68a3      	ldr	r3, [r4, #8]
 80115d4:	9a01      	ldr	r2, [sp, #4]
 80115d6:	1a9b      	subs	r3, r3, r2
 80115d8:	60a3      	str	r3, [r4, #8]
 80115da:	6823      	ldr	r3, [r4, #0]
 80115dc:	4413      	add	r3, r2
 80115de:	4655      	mov	r5, sl
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80115e6:	1b5b      	subs	r3, r3, r5
 80115e8:	442f      	add	r7, r5
 80115ea:	ebaa 0a05 	sub.w	sl, sl, r5
 80115ee:	f8c9 3008 	str.w	r3, [r9, #8]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d1a3      	bne.n	801153e <__sfvwrite_r+0x11a>
 80115f6:	e71c      	b.n	8011432 <__sfvwrite_r+0xe>
 80115f8:	462a      	mov	r2, r5
 80115fa:	4630      	mov	r0, r6
 80115fc:	f7ff f850 	bl	80106a0 <_realloc_r>
 8011600:	4603      	mov	r3, r0
 8011602:	2800      	cmp	r0, #0
 8011604:	d1d5      	bne.n	80115b2 <__sfvwrite_r+0x18e>
 8011606:	6921      	ldr	r1, [r4, #16]
 8011608:	4630      	mov	r0, r6
 801160a:	f7fb ffed 	bl	800d5e8 <_free_r>
 801160e:	89a3      	ldrh	r3, [r4, #12]
 8011610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011614:	81a3      	strh	r3, [r4, #12]
 8011616:	e7b6      	b.n	8011586 <__sfvwrite_r+0x162>
 8011618:	6923      	ldr	r3, [r4, #16]
 801161a:	4283      	cmp	r3, r0
 801161c:	d302      	bcc.n	8011624 <__sfvwrite_r+0x200>
 801161e:	6961      	ldr	r1, [r4, #20]
 8011620:	4551      	cmp	r1, sl
 8011622:	d915      	bls.n	8011650 <__sfvwrite_r+0x22c>
 8011624:	4552      	cmp	r2, sl
 8011626:	bf28      	it	cs
 8011628:	4652      	movcs	r2, sl
 801162a:	4639      	mov	r1, r7
 801162c:	4615      	mov	r5, r2
 801162e:	f7fe ffa2 	bl	8010576 <memmove>
 8011632:	68a3      	ldr	r3, [r4, #8]
 8011634:	6822      	ldr	r2, [r4, #0]
 8011636:	1b5b      	subs	r3, r3, r5
 8011638:	442a      	add	r2, r5
 801163a:	60a3      	str	r3, [r4, #8]
 801163c:	6022      	str	r2, [r4, #0]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d1cf      	bne.n	80115e2 <__sfvwrite_r+0x1be>
 8011642:	4621      	mov	r1, r4
 8011644:	4630      	mov	r0, r6
 8011646:	f7fd fd39 	bl	800f0bc <_fflush_r>
 801164a:	2800      	cmp	r0, #0
 801164c:	d0c9      	beq.n	80115e2 <__sfvwrite_r+0x1be>
 801164e:	e79c      	b.n	801158a <__sfvwrite_r+0x166>
 8011650:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011654:	4553      	cmp	r3, sl
 8011656:	bf28      	it	cs
 8011658:	4653      	movcs	r3, sl
 801165a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801165c:	fb93 f3f1 	sdiv	r3, r3, r1
 8011660:	463a      	mov	r2, r7
 8011662:	434b      	muls	r3, r1
 8011664:	4630      	mov	r0, r6
 8011666:	69e1      	ldr	r1, [r4, #28]
 8011668:	47a8      	blx	r5
 801166a:	1e05      	subs	r5, r0, #0
 801166c:	dcb9      	bgt.n	80115e2 <__sfvwrite_r+0x1be>
 801166e:	e78c      	b.n	801158a <__sfvwrite_r+0x166>
 8011670:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8011674:	2000      	movs	r0, #0
 8011676:	f108 0808 	add.w	r8, r8, #8
 801167a:	e6f2      	b.n	8011462 <__sfvwrite_r+0x3e>
 801167c:	f10b 0701 	add.w	r7, fp, #1
 8011680:	e6ff      	b.n	8011482 <__sfvwrite_r+0x5e>
 8011682:	4293      	cmp	r3, r2
 8011684:	dc08      	bgt.n	8011698 <__sfvwrite_r+0x274>
 8011686:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8011688:	69e1      	ldr	r1, [r4, #28]
 801168a:	4652      	mov	r2, sl
 801168c:	4630      	mov	r0, r6
 801168e:	47a8      	blx	r5
 8011690:	1e05      	subs	r5, r0, #0
 8011692:	f73f af12 	bgt.w	80114ba <__sfvwrite_r+0x96>
 8011696:	e778      	b.n	801158a <__sfvwrite_r+0x166>
 8011698:	4651      	mov	r1, sl
 801169a:	9201      	str	r2, [sp, #4]
 801169c:	f7fe ff6b 	bl	8010576 <memmove>
 80116a0:	9a01      	ldr	r2, [sp, #4]
 80116a2:	68a3      	ldr	r3, [r4, #8]
 80116a4:	1a9b      	subs	r3, r3, r2
 80116a6:	60a3      	str	r3, [r4, #8]
 80116a8:	6823      	ldr	r3, [r4, #0]
 80116aa:	4413      	add	r3, r2
 80116ac:	6023      	str	r3, [r4, #0]
 80116ae:	4615      	mov	r5, r2
 80116b0:	e703      	b.n	80114ba <__sfvwrite_r+0x96>
 80116b2:	2001      	movs	r0, #1
 80116b4:	e70a      	b.n	80114cc <__sfvwrite_r+0xa8>
 80116b6:	bf00      	nop
 80116b8:	7ffffc00 	.word	0x7ffffc00

080116bc <__swsetup_r>:
 80116bc:	b538      	push	{r3, r4, r5, lr}
 80116be:	4b29      	ldr	r3, [pc, #164]	@ (8011764 <__swsetup_r+0xa8>)
 80116c0:	4605      	mov	r5, r0
 80116c2:	6818      	ldr	r0, [r3, #0]
 80116c4:	460c      	mov	r4, r1
 80116c6:	b118      	cbz	r0, 80116d0 <__swsetup_r+0x14>
 80116c8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80116ca:	b90b      	cbnz	r3, 80116d0 <__swsetup_r+0x14>
 80116cc:	f7fb fe10 	bl	800d2f0 <__sinit>
 80116d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116d4:	0719      	lsls	r1, r3, #28
 80116d6:	d422      	bmi.n	801171e <__swsetup_r+0x62>
 80116d8:	06da      	lsls	r2, r3, #27
 80116da:	d407      	bmi.n	80116ec <__swsetup_r+0x30>
 80116dc:	2209      	movs	r2, #9
 80116de:	602a      	str	r2, [r5, #0]
 80116e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116e4:	81a3      	strh	r3, [r4, #12]
 80116e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80116ea:	e033      	b.n	8011754 <__swsetup_r+0x98>
 80116ec:	0758      	lsls	r0, r3, #29
 80116ee:	d512      	bpl.n	8011716 <__swsetup_r+0x5a>
 80116f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80116f2:	b141      	cbz	r1, 8011706 <__swsetup_r+0x4a>
 80116f4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80116f8:	4299      	cmp	r1, r3
 80116fa:	d002      	beq.n	8011702 <__swsetup_r+0x46>
 80116fc:	4628      	mov	r0, r5
 80116fe:	f7fb ff73 	bl	800d5e8 <_free_r>
 8011702:	2300      	movs	r3, #0
 8011704:	6323      	str	r3, [r4, #48]	@ 0x30
 8011706:	89a3      	ldrh	r3, [r4, #12]
 8011708:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801170c:	81a3      	strh	r3, [r4, #12]
 801170e:	2300      	movs	r3, #0
 8011710:	6063      	str	r3, [r4, #4]
 8011712:	6923      	ldr	r3, [r4, #16]
 8011714:	6023      	str	r3, [r4, #0]
 8011716:	89a3      	ldrh	r3, [r4, #12]
 8011718:	f043 0308 	orr.w	r3, r3, #8
 801171c:	81a3      	strh	r3, [r4, #12]
 801171e:	6923      	ldr	r3, [r4, #16]
 8011720:	b94b      	cbnz	r3, 8011736 <__swsetup_r+0x7a>
 8011722:	89a3      	ldrh	r3, [r4, #12]
 8011724:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801172c:	d003      	beq.n	8011736 <__swsetup_r+0x7a>
 801172e:	4621      	mov	r1, r4
 8011730:	4628      	mov	r0, r5
 8011732:	f000 f8c9 	bl	80118c8 <__smakebuf_r>
 8011736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801173a:	f013 0201 	ands.w	r2, r3, #1
 801173e:	d00a      	beq.n	8011756 <__swsetup_r+0x9a>
 8011740:	2200      	movs	r2, #0
 8011742:	60a2      	str	r2, [r4, #8]
 8011744:	6962      	ldr	r2, [r4, #20]
 8011746:	4252      	negs	r2, r2
 8011748:	61a2      	str	r2, [r4, #24]
 801174a:	6922      	ldr	r2, [r4, #16]
 801174c:	b942      	cbnz	r2, 8011760 <__swsetup_r+0xa4>
 801174e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011752:	d1c5      	bne.n	80116e0 <__swsetup_r+0x24>
 8011754:	bd38      	pop	{r3, r4, r5, pc}
 8011756:	0799      	lsls	r1, r3, #30
 8011758:	bf58      	it	pl
 801175a:	6962      	ldrpl	r2, [r4, #20]
 801175c:	60a2      	str	r2, [r4, #8]
 801175e:	e7f4      	b.n	801174a <__swsetup_r+0x8e>
 8011760:	2000      	movs	r0, #0
 8011762:	e7f7      	b.n	8011754 <__swsetup_r+0x98>
 8011764:	2400001c 	.word	0x2400001c

08011768 <__fputwc>:
 8011768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801176c:	4680      	mov	r8, r0
 801176e:	460f      	mov	r7, r1
 8011770:	4614      	mov	r4, r2
 8011772:	f7fe ff1b 	bl	80105ac <__locale_mb_cur_max>
 8011776:	2801      	cmp	r0, #1
 8011778:	4605      	mov	r5, r0
 801177a:	d11b      	bne.n	80117b4 <__fputwc+0x4c>
 801177c:	1e7b      	subs	r3, r7, #1
 801177e:	2bfe      	cmp	r3, #254	@ 0xfe
 8011780:	d818      	bhi.n	80117b4 <__fputwc+0x4c>
 8011782:	f88d 7004 	strb.w	r7, [sp, #4]
 8011786:	2600      	movs	r6, #0
 8011788:	f10d 0904 	add.w	r9, sp, #4
 801178c:	42ae      	cmp	r6, r5
 801178e:	d021      	beq.n	80117d4 <__fputwc+0x6c>
 8011790:	68a3      	ldr	r3, [r4, #8]
 8011792:	f816 1009 	ldrb.w	r1, [r6, r9]
 8011796:	3b01      	subs	r3, #1
 8011798:	2b00      	cmp	r3, #0
 801179a:	60a3      	str	r3, [r4, #8]
 801179c:	da04      	bge.n	80117a8 <__fputwc+0x40>
 801179e:	69a2      	ldr	r2, [r4, #24]
 80117a0:	4293      	cmp	r3, r2
 80117a2:	db1b      	blt.n	80117dc <__fputwc+0x74>
 80117a4:	290a      	cmp	r1, #10
 80117a6:	d019      	beq.n	80117dc <__fputwc+0x74>
 80117a8:	6823      	ldr	r3, [r4, #0]
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	6022      	str	r2, [r4, #0]
 80117ae:	7019      	strb	r1, [r3, #0]
 80117b0:	3601      	adds	r6, #1
 80117b2:	e7eb      	b.n	801178c <__fputwc+0x24>
 80117b4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 80117b8:	463a      	mov	r2, r7
 80117ba:	a901      	add	r1, sp, #4
 80117bc:	4640      	mov	r0, r8
 80117be:	f000 f845 	bl	801184c <_wcrtomb_r>
 80117c2:	1c43      	adds	r3, r0, #1
 80117c4:	4605      	mov	r5, r0
 80117c6:	d1de      	bne.n	8011786 <__fputwc+0x1e>
 80117c8:	89a3      	ldrh	r3, [r4, #12]
 80117ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117ce:	81a3      	strh	r3, [r4, #12]
 80117d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80117d4:	4638      	mov	r0, r7
 80117d6:	b003      	add	sp, #12
 80117d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117dc:	4622      	mov	r2, r4
 80117de:	4640      	mov	r0, r8
 80117e0:	f000 f8ae 	bl	8011940 <__swbuf_r>
 80117e4:	3001      	adds	r0, #1
 80117e6:	d1e3      	bne.n	80117b0 <__fputwc+0x48>
 80117e8:	e7f2      	b.n	80117d0 <__fputwc+0x68>

080117ea <_fputwc_r>:
 80117ea:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 80117ec:	07db      	lsls	r3, r3, #31
 80117ee:	b570      	push	{r4, r5, r6, lr}
 80117f0:	4605      	mov	r5, r0
 80117f2:	460e      	mov	r6, r1
 80117f4:	4614      	mov	r4, r2
 80117f6:	d405      	bmi.n	8011804 <_fputwc_r+0x1a>
 80117f8:	8993      	ldrh	r3, [r2, #12]
 80117fa:	0598      	lsls	r0, r3, #22
 80117fc:	d402      	bmi.n	8011804 <_fputwc_r+0x1a>
 80117fe:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8011800:	f7fb fe8a 	bl	800d518 <__retarget_lock_acquire_recursive>
 8011804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011808:	0499      	lsls	r1, r3, #18
 801180a:	d406      	bmi.n	801181a <_fputwc_r+0x30>
 801180c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011810:	81a3      	strh	r3, [r4, #12]
 8011812:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011814:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011818:	6663      	str	r3, [r4, #100]	@ 0x64
 801181a:	4622      	mov	r2, r4
 801181c:	4628      	mov	r0, r5
 801181e:	4631      	mov	r1, r6
 8011820:	f7ff ffa2 	bl	8011768 <__fputwc>
 8011824:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011826:	07da      	lsls	r2, r3, #31
 8011828:	4605      	mov	r5, r0
 801182a:	d405      	bmi.n	8011838 <_fputwc_r+0x4e>
 801182c:	89a3      	ldrh	r3, [r4, #12]
 801182e:	059b      	lsls	r3, r3, #22
 8011830:	d402      	bmi.n	8011838 <_fputwc_r+0x4e>
 8011832:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011834:	f7fb fe71 	bl	800d51a <__retarget_lock_release_recursive>
 8011838:	4628      	mov	r0, r5
 801183a:	bd70      	pop	{r4, r5, r6, pc}

0801183c <abort>:
 801183c:	b508      	push	{r3, lr}
 801183e:	2006      	movs	r0, #6
 8011840:	f000 f8f0 	bl	8011a24 <raise>
 8011844:	2001      	movs	r0, #1
 8011846:	f7ef fd7d 	bl	8001344 <_exit>
	...

0801184c <_wcrtomb_r>:
 801184c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801184e:	4c09      	ldr	r4, [pc, #36]	@ (8011874 <_wcrtomb_r+0x28>)
 8011850:	b085      	sub	sp, #20
 8011852:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8011856:	4605      	mov	r5, r0
 8011858:	461e      	mov	r6, r3
 801185a:	b909      	cbnz	r1, 8011860 <_wcrtomb_r+0x14>
 801185c:	460a      	mov	r2, r1
 801185e:	a901      	add	r1, sp, #4
 8011860:	47b8      	blx	r7
 8011862:	1c43      	adds	r3, r0, #1
 8011864:	bf01      	itttt	eq
 8011866:	2300      	moveq	r3, #0
 8011868:	6033      	streq	r3, [r6, #0]
 801186a:	238a      	moveq	r3, #138	@ 0x8a
 801186c:	602b      	streq	r3, [r5, #0]
 801186e:	b005      	add	sp, #20
 8011870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011872:	bf00      	nop
 8011874:	24000554 	.word	0x24000554

08011878 <__swhatbuf_r>:
 8011878:	b570      	push	{r4, r5, r6, lr}
 801187a:	460c      	mov	r4, r1
 801187c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011880:	2900      	cmp	r1, #0
 8011882:	b096      	sub	sp, #88	@ 0x58
 8011884:	4615      	mov	r5, r2
 8011886:	461e      	mov	r6, r3
 8011888:	da07      	bge.n	801189a <__swhatbuf_r+0x22>
 801188a:	89a1      	ldrh	r1, [r4, #12]
 801188c:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8011890:	d117      	bne.n	80118c2 <__swhatbuf_r+0x4a>
 8011892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011896:	4608      	mov	r0, r1
 8011898:	e00f      	b.n	80118ba <__swhatbuf_r+0x42>
 801189a:	466a      	mov	r2, sp
 801189c:	f000 f8ca 	bl	8011a34 <_fstat_r>
 80118a0:	2800      	cmp	r0, #0
 80118a2:	dbf2      	blt.n	801188a <__swhatbuf_r+0x12>
 80118a4:	9901      	ldr	r1, [sp, #4]
 80118a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80118aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80118ae:	4259      	negs	r1, r3
 80118b0:	4159      	adcs	r1, r3
 80118b2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80118b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80118ba:	6031      	str	r1, [r6, #0]
 80118bc:	602b      	str	r3, [r5, #0]
 80118be:	b016      	add	sp, #88	@ 0x58
 80118c0:	bd70      	pop	{r4, r5, r6, pc}
 80118c2:	2100      	movs	r1, #0
 80118c4:	2340      	movs	r3, #64	@ 0x40
 80118c6:	e7e6      	b.n	8011896 <__swhatbuf_r+0x1e>

080118c8 <__smakebuf_r>:
 80118c8:	898b      	ldrh	r3, [r1, #12]
 80118ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118cc:	079d      	lsls	r5, r3, #30
 80118ce:	4606      	mov	r6, r0
 80118d0:	460c      	mov	r4, r1
 80118d2:	d507      	bpl.n	80118e4 <__smakebuf_r+0x1c>
 80118d4:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80118d8:	6023      	str	r3, [r4, #0]
 80118da:	6123      	str	r3, [r4, #16]
 80118dc:	2301      	movs	r3, #1
 80118de:	6163      	str	r3, [r4, #20]
 80118e0:	b003      	add	sp, #12
 80118e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118e4:	ab01      	add	r3, sp, #4
 80118e6:	466a      	mov	r2, sp
 80118e8:	f7ff ffc6 	bl	8011878 <__swhatbuf_r>
 80118ec:	9f00      	ldr	r7, [sp, #0]
 80118ee:	4605      	mov	r5, r0
 80118f0:	4639      	mov	r1, r7
 80118f2:	4630      	mov	r0, r6
 80118f4:	f7fb ff38 	bl	800d768 <_malloc_r>
 80118f8:	b948      	cbnz	r0, 801190e <__smakebuf_r+0x46>
 80118fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118fe:	059a      	lsls	r2, r3, #22
 8011900:	d4ee      	bmi.n	80118e0 <__smakebuf_r+0x18>
 8011902:	f023 0303 	bic.w	r3, r3, #3
 8011906:	f043 0302 	orr.w	r3, r3, #2
 801190a:	81a3      	strh	r3, [r4, #12]
 801190c:	e7e2      	b.n	80118d4 <__smakebuf_r+0xc>
 801190e:	89a3      	ldrh	r3, [r4, #12]
 8011910:	6020      	str	r0, [r4, #0]
 8011912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011916:	81a3      	strh	r3, [r4, #12]
 8011918:	9b01      	ldr	r3, [sp, #4]
 801191a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801191e:	b15b      	cbz	r3, 8011938 <__smakebuf_r+0x70>
 8011920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011924:	4630      	mov	r0, r6
 8011926:	f000 f897 	bl	8011a58 <_isatty_r>
 801192a:	b128      	cbz	r0, 8011938 <__smakebuf_r+0x70>
 801192c:	89a3      	ldrh	r3, [r4, #12]
 801192e:	f023 0303 	bic.w	r3, r3, #3
 8011932:	f043 0301 	orr.w	r3, r3, #1
 8011936:	81a3      	strh	r3, [r4, #12]
 8011938:	89a3      	ldrh	r3, [r4, #12]
 801193a:	431d      	orrs	r5, r3
 801193c:	81a5      	strh	r5, [r4, #12]
 801193e:	e7cf      	b.n	80118e0 <__smakebuf_r+0x18>

08011940 <__swbuf_r>:
 8011940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011942:	460e      	mov	r6, r1
 8011944:	4614      	mov	r4, r2
 8011946:	4605      	mov	r5, r0
 8011948:	b118      	cbz	r0, 8011952 <__swbuf_r+0x12>
 801194a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801194c:	b90b      	cbnz	r3, 8011952 <__swbuf_r+0x12>
 801194e:	f7fb fccf 	bl	800d2f0 <__sinit>
 8011952:	69a3      	ldr	r3, [r4, #24]
 8011954:	60a3      	str	r3, [r4, #8]
 8011956:	89a3      	ldrh	r3, [r4, #12]
 8011958:	0719      	lsls	r1, r3, #28
 801195a:	d501      	bpl.n	8011960 <__swbuf_r+0x20>
 801195c:	6923      	ldr	r3, [r4, #16]
 801195e:	b943      	cbnz	r3, 8011972 <__swbuf_r+0x32>
 8011960:	4621      	mov	r1, r4
 8011962:	4628      	mov	r0, r5
 8011964:	f7ff feaa 	bl	80116bc <__swsetup_r>
 8011968:	b118      	cbz	r0, 8011972 <__swbuf_r+0x32>
 801196a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801196e:	4638      	mov	r0, r7
 8011970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011976:	b2f6      	uxtb	r6, r6
 8011978:	049a      	lsls	r2, r3, #18
 801197a:	4637      	mov	r7, r6
 801197c:	d406      	bmi.n	801198c <__swbuf_r+0x4c>
 801197e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011982:	81a3      	strh	r3, [r4, #12]
 8011984:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011986:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801198a:	6663      	str	r3, [r4, #100]	@ 0x64
 801198c:	6823      	ldr	r3, [r4, #0]
 801198e:	6922      	ldr	r2, [r4, #16]
 8011990:	1a98      	subs	r0, r3, r2
 8011992:	6963      	ldr	r3, [r4, #20]
 8011994:	4283      	cmp	r3, r0
 8011996:	dc05      	bgt.n	80119a4 <__swbuf_r+0x64>
 8011998:	4621      	mov	r1, r4
 801199a:	4628      	mov	r0, r5
 801199c:	f7fd fb8e 	bl	800f0bc <_fflush_r>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	d1e2      	bne.n	801196a <__swbuf_r+0x2a>
 80119a4:	68a3      	ldr	r3, [r4, #8]
 80119a6:	3b01      	subs	r3, #1
 80119a8:	60a3      	str	r3, [r4, #8]
 80119aa:	6823      	ldr	r3, [r4, #0]
 80119ac:	1c5a      	adds	r2, r3, #1
 80119ae:	6022      	str	r2, [r4, #0]
 80119b0:	701e      	strb	r6, [r3, #0]
 80119b2:	6962      	ldr	r2, [r4, #20]
 80119b4:	1c43      	adds	r3, r0, #1
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d004      	beq.n	80119c4 <__swbuf_r+0x84>
 80119ba:	89a3      	ldrh	r3, [r4, #12]
 80119bc:	07db      	lsls	r3, r3, #31
 80119be:	d5d6      	bpl.n	801196e <__swbuf_r+0x2e>
 80119c0:	2e0a      	cmp	r6, #10
 80119c2:	d1d4      	bne.n	801196e <__swbuf_r+0x2e>
 80119c4:	4621      	mov	r1, r4
 80119c6:	4628      	mov	r0, r5
 80119c8:	f7fd fb78 	bl	800f0bc <_fflush_r>
 80119cc:	2800      	cmp	r0, #0
 80119ce:	d0ce      	beq.n	801196e <__swbuf_r+0x2e>
 80119d0:	e7cb      	b.n	801196a <__swbuf_r+0x2a>

080119d2 <_raise_r>:
 80119d2:	291f      	cmp	r1, #31
 80119d4:	b538      	push	{r3, r4, r5, lr}
 80119d6:	4605      	mov	r5, r0
 80119d8:	460c      	mov	r4, r1
 80119da:	d904      	bls.n	80119e6 <_raise_r+0x14>
 80119dc:	2316      	movs	r3, #22
 80119de:	6003      	str	r3, [r0, #0]
 80119e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80119e4:	bd38      	pop	{r3, r4, r5, pc}
 80119e6:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80119ea:	b112      	cbz	r2, 80119f2 <_raise_r+0x20>
 80119ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119f0:	b94b      	cbnz	r3, 8011a06 <_raise_r+0x34>
 80119f2:	4628      	mov	r0, r5
 80119f4:	f000 f852 	bl	8011a9c <_getpid_r>
 80119f8:	4622      	mov	r2, r4
 80119fa:	4601      	mov	r1, r0
 80119fc:	4628      	mov	r0, r5
 80119fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a02:	f000 b839 	b.w	8011a78 <_kill_r>
 8011a06:	2b01      	cmp	r3, #1
 8011a08:	d00a      	beq.n	8011a20 <_raise_r+0x4e>
 8011a0a:	1c59      	adds	r1, r3, #1
 8011a0c:	d103      	bne.n	8011a16 <_raise_r+0x44>
 8011a0e:	2316      	movs	r3, #22
 8011a10:	6003      	str	r3, [r0, #0]
 8011a12:	2001      	movs	r0, #1
 8011a14:	e7e6      	b.n	80119e4 <_raise_r+0x12>
 8011a16:	2100      	movs	r1, #0
 8011a18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	4798      	blx	r3
 8011a20:	2000      	movs	r0, #0
 8011a22:	e7df      	b.n	80119e4 <_raise_r+0x12>

08011a24 <raise>:
 8011a24:	4b02      	ldr	r3, [pc, #8]	@ (8011a30 <raise+0xc>)
 8011a26:	4601      	mov	r1, r0
 8011a28:	6818      	ldr	r0, [r3, #0]
 8011a2a:	f7ff bfd2 	b.w	80119d2 <_raise_r>
 8011a2e:	bf00      	nop
 8011a30:	2400001c 	.word	0x2400001c

08011a34 <_fstat_r>:
 8011a34:	b538      	push	{r3, r4, r5, lr}
 8011a36:	4d07      	ldr	r5, [pc, #28]	@ (8011a54 <_fstat_r+0x20>)
 8011a38:	2300      	movs	r3, #0
 8011a3a:	4604      	mov	r4, r0
 8011a3c:	4608      	mov	r0, r1
 8011a3e:	4611      	mov	r1, r2
 8011a40:	602b      	str	r3, [r5, #0]
 8011a42:	f7ef fccf 	bl	80013e4 <_fstat>
 8011a46:	1c43      	adds	r3, r0, #1
 8011a48:	d102      	bne.n	8011a50 <_fstat_r+0x1c>
 8011a4a:	682b      	ldr	r3, [r5, #0]
 8011a4c:	b103      	cbz	r3, 8011a50 <_fstat_r+0x1c>
 8011a4e:	6023      	str	r3, [r4, #0]
 8011a50:	bd38      	pop	{r3, r4, r5, pc}
 8011a52:	bf00      	nop
 8011a54:	24003310 	.word	0x24003310

08011a58 <_isatty_r>:
 8011a58:	b538      	push	{r3, r4, r5, lr}
 8011a5a:	4d06      	ldr	r5, [pc, #24]	@ (8011a74 <_isatty_r+0x1c>)
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	4604      	mov	r4, r0
 8011a60:	4608      	mov	r0, r1
 8011a62:	602b      	str	r3, [r5, #0]
 8011a64:	f7ef fcce 	bl	8001404 <_isatty>
 8011a68:	1c43      	adds	r3, r0, #1
 8011a6a:	d102      	bne.n	8011a72 <_isatty_r+0x1a>
 8011a6c:	682b      	ldr	r3, [r5, #0]
 8011a6e:	b103      	cbz	r3, 8011a72 <_isatty_r+0x1a>
 8011a70:	6023      	str	r3, [r4, #0]
 8011a72:	bd38      	pop	{r3, r4, r5, pc}
 8011a74:	24003310 	.word	0x24003310

08011a78 <_kill_r>:
 8011a78:	b538      	push	{r3, r4, r5, lr}
 8011a7a:	4d07      	ldr	r5, [pc, #28]	@ (8011a98 <_kill_r+0x20>)
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	4604      	mov	r4, r0
 8011a80:	4608      	mov	r0, r1
 8011a82:	4611      	mov	r1, r2
 8011a84:	602b      	str	r3, [r5, #0]
 8011a86:	f7ef fc4d 	bl	8001324 <_kill>
 8011a8a:	1c43      	adds	r3, r0, #1
 8011a8c:	d102      	bne.n	8011a94 <_kill_r+0x1c>
 8011a8e:	682b      	ldr	r3, [r5, #0]
 8011a90:	b103      	cbz	r3, 8011a94 <_kill_r+0x1c>
 8011a92:	6023      	str	r3, [r4, #0]
 8011a94:	bd38      	pop	{r3, r4, r5, pc}
 8011a96:	bf00      	nop
 8011a98:	24003310 	.word	0x24003310

08011a9c <_getpid_r>:
 8011a9c:	f7ef bc3a 	b.w	8001314 <_getpid>

08011aa0 <_init>:
 8011aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aa2:	bf00      	nop
 8011aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aa6:	bc08      	pop	{r3}
 8011aa8:	469e      	mov	lr, r3
 8011aaa:	4770      	bx	lr

08011aac <_fini>:
 8011aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aae:	bf00      	nop
 8011ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ab2:	bc08      	pop	{r3}
 8011ab4:	469e      	mov	lr, r3
 8011ab6:	4770      	bx	lr
