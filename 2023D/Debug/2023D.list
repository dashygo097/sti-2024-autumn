
2023D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014314  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002870  080145b8  080145b8  000155b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016e28  08016e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08016e30  08016e30  00017e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016e38  08016e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000006c4  24000000  08016e3c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00004000  240006e0  08017500  000186e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ARM.__at_0x38000000 00000190  240046e0  0801b500  0001c6e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010cac  24004870  0801b690  0001c870  2**3
                  ALLOC
 10 ._user_heap_stack 00004004  2401551c  0801b690  0001d51c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001c870  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024f67  00000000  00000000  0001c89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004845  00000000  00000000  00041805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b58  00000000  00000000  00046050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000153f  00000000  00000000  00047ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d76d  00000000  00000000  000490e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000275d1  00000000  00000000  00086854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017bcbf  00000000  00000000  000ade25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00229ae4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c34  00000000  00000000  00229b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  002327a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004870 	.word	0x24004870
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801459c 	.word	0x0801459c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004874 	.word	0x24004874
 80002dc:	0801459c 	.word	0x0801459c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 bac6 	b.w	8000934 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f962 	bl	8000678 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__muldc3>:
 80003c0:	ee20 5b02 	vmul.f64	d5, d0, d2
 80003c4:	ee21 4b03 	vmul.f64	d4, d1, d3
 80003c8:	ee35 7b44 	vsub.f64	d7, d5, d4
 80003cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80003d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d4:	ed2d 8b0a 	vpush	{d8-d12}
 80003d8:	ee20 9b03 	vmul.f64	d9, d0, d3
 80003dc:	ee22 8b01 	vmul.f64	d8, d2, d1
 80003e0:	ee39 6b08 	vadd.f64	d6, d9, d8
 80003e4:	d606      	bvs.n	80003f4 <__muldc3+0x34>
 80003e6:	eeb0 0b47 	vmov.f64	d0, d7
 80003ea:	eeb0 1b46 	vmov.f64	d1, d6
 80003ee:	ecbd 8b0a 	vpop	{d8-d12}
 80003f2:	4770      	bx	lr
 80003f4:	eeb4 6b46 	vcmp.f64	d6, d6
 80003f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003fc:	d7f3      	bvc.n	80003e6 <__muldc3+0x26>
 80003fe:	eeb0 bbc0 	vabs.f64	d11, d0
 8000402:	eeb0 cbc1 	vabs.f64	d12, d1
 8000406:	ed9f ab94 	vldr	d10, [pc, #592]	@ 8000658 <__muldc3+0x298>
 800040a:	eeb4 bb4a 	vcmp.f64	d11, d10
 800040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000412:	f300 809d 	bgt.w	8000550 <__muldc3+0x190>
 8000416:	eeb4 cb4a 	vcmp.f64	d12, d10
 800041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041e:	f300 8097 	bgt.w	8000550 <__muldc3+0x190>
 8000422:	2300      	movs	r3, #0
 8000424:	ed9f ab8c 	vldr	d10, [pc, #560]	@ 8000658 <__muldc3+0x298>
 8000428:	eeb0 bbc2 	vabs.f64	d11, d2
 800042c:	eeb0 cbc3 	vabs.f64	d12, d3
 8000430:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000438:	dc48      	bgt.n	80004cc <__muldc3+0x10c>
 800043a:	eeb4 cb4a 	vcmp.f64	d12, d10
 800043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000442:	dc43      	bgt.n	80004cc <__muldc3+0x10c>
 8000444:	bb9b      	cbnz	r3, 80004ae <__muldc3+0xee>
 8000446:	eeb0 5bc5 	vabs.f64	d5, d5
 800044a:	eeb4 5b4a 	vcmp.f64	d5, d10
 800044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000452:	dc14      	bgt.n	800047e <__muldc3+0xbe>
 8000454:	eeb0 4bc4 	vabs.f64	d4, d4
 8000458:	eeb4 4b4a 	vcmp.f64	d4, d10
 800045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000460:	dc0d      	bgt.n	800047e <__muldc3+0xbe>
 8000462:	eeb0 9bc9 	vabs.f64	d9, d9
 8000466:	eeb4 9b4a 	vcmp.f64	d9, d10
 800046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046e:	dc06      	bgt.n	800047e <__muldc3+0xbe>
 8000470:	eeb0 8bc8 	vabs.f64	d8, d8
 8000474:	eeb4 8b4a 	vcmp.f64	d8, d10
 8000478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047c:	ddb3      	ble.n	80003e6 <__muldc3+0x26>
 800047e:	eeb4 0b40 	vcmp.f64	d0, d0
 8000482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000486:	f180 80dc 	bvs.w	8000642 <__muldc3+0x282>
 800048a:	eeb4 1b41 	vcmp.f64	d1, d1
 800048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000492:	f180 80cc 	bvs.w	800062e <__muldc3+0x26e>
 8000496:	eeb4 2b42 	vcmp.f64	d2, d2
 800049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049e:	f180 80bc 	bvs.w	800061a <__muldc3+0x25a>
 80004a2:	eeb4 3b43 	vcmp.f64	d3, d3
 80004a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004aa:	f180 80ac 	bvs.w	8000606 <__muldc3+0x246>
 80004ae:	ee23 7b41 	vnmul.f64	d7, d3, d1
 80004b2:	ee21 1b02 	vmul.f64	d1, d1, d2
 80004b6:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000660 <__muldc3+0x2a0>
 80004ba:	eea0 7b02 	vfma.f64	d7, d0, d2
 80004be:	eea0 1b03 	vfma.f64	d1, d0, d3
 80004c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80004c6:	ee21 6b06 	vmul.f64	d6, d1, d6
 80004ca:	e78c      	b.n	80003e6 <__muldc3+0x26>
 80004cc:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8000658 <__muldc3+0x298>
 80004d0:	eeb4 bb47 	vcmp.f64	d11, d7
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	bfcc      	ite	gt
 80004da:	2301      	movgt	r3, #1
 80004dc:	2300      	movle	r3, #0
 80004de:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000658 <__muldc3+0x298>
 80004e2:	ee07 3a10 	vmov	s14, r3
 80004e6:	eeb4 cb46 	vcmp.f64	d12, d6
 80004ea:	ee12 3a90 	vmov	r3, s5
 80004ee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80004f8:	bfb8      	it	lt
 80004fa:	eeb1 7b47 	vneglt.f64	d7, d7
 80004fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000502:	bfcc      	ite	gt
 8000504:	2301      	movgt	r3, #1
 8000506:	2300      	movle	r3, #0
 8000508:	eeb0 2b47 	vmov.f64	d2, d7
 800050c:	ee07 3a10 	vmov	s14, r3
 8000510:	eeb4 0b40 	vcmp.f64	d0, d0
 8000514:	ee13 3a90 	vmov	r3, s7
 8000518:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800051c:	2b00      	cmp	r3, #0
 800051e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000522:	bfb8      	it	lt
 8000524:	eeb1 7b47 	vneglt.f64	d7, d7
 8000528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052c:	eeb0 3b47 	vmov.f64	d3, d7
 8000530:	d655      	bvs.n	80005de <__muldc3+0x21e>
 8000532:	eeb4 1b41 	vcmp.f64	d1, d1
 8000536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053a:	d7b8      	bvc.n	80004ae <__muldc3+0xee>
 800053c:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000668 <__muldc3+0x2a8>
 8000540:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8000670 <__muldc3+0x2b0>
 8000544:	ee11 3a90 	vmov	r3, s3
 8000548:	2b00      	cmp	r3, #0
 800054a:	fe26 1b07 	vselge.f64	d1, d6, d7
 800054e:	e7ae      	b.n	80004ae <__muldc3+0xee>
 8000550:	ed9f ab41 	vldr	d10, [pc, #260]	@ 8000658 <__muldc3+0x298>
 8000554:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055c:	bfcc      	ite	gt
 800055e:	2301      	movgt	r3, #1
 8000560:	2300      	movle	r3, #0
 8000562:	ee0a 3a10 	vmov	s20, r3
 8000566:	ee10 3a90 	vmov	r3, s1
 800056a:	eeb8 abca 	vcvt.f64.s32	d10, s20
 800056e:	2b00      	cmp	r3, #0
 8000570:	eeb0 abca 	vabs.f64	d10, d10
 8000574:	bfb8      	it	lt
 8000576:	eeb1 ab4a 	vneglt.f64	d10, d10
 800057a:	eeb0 0b4a 	vmov.f64	d0, d10
 800057e:	ed9f ab36 	vldr	d10, [pc, #216]	@ 8000658 <__muldc3+0x298>
 8000582:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	bfcc      	ite	gt
 800058c:	2301      	movgt	r3, #1
 800058e:	2300      	movle	r3, #0
 8000590:	ee0a 3a10 	vmov	s20, r3
 8000594:	eeb4 2b42 	vcmp.f64	d2, d2
 8000598:	ee11 3a90 	vmov	r3, s3
 800059c:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	eeb0 abca 	vabs.f64	d10, d10
 80005a6:	bfb8      	it	lt
 80005a8:	eeb1 ab4a 	vneglt.f64	d10, d10
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	eeb0 1b4a 	vmov.f64	d1, d10
 80005b4:	d61d      	bvs.n	80005f2 <__muldc3+0x232>
 80005b6:	eeb4 3b43 	vcmp.f64	d3, d3
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	bf78      	it	vc
 80005c0:	2301      	movvc	r3, #1
 80005c2:	f5ff af2f 	bvc.w	8000424 <__muldc3+0x64>
 80005c6:	ee13 3a90 	vmov	r3, s7
 80005ca:	ed9f ab29 	vldr	d10, [pc, #164]	@ 8000670 <__muldc3+0x2b0>
 80005ce:	ed9f 3b26 	vldr	d3, [pc, #152]	@ 8000668 <__muldc3+0x2a8>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f04f 0301 	mov.w	r3, #1
 80005d8:	fe23 3b0a 	vselge.f64	d3, d3, d10
 80005dc:	e722      	b.n	8000424 <__muldc3+0x64>
 80005de:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8000668 <__muldc3+0x2a8>
 80005e2:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8000670 <__muldc3+0x2b0>
 80005e6:	ee10 3a90 	vmov	r3, s1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe26 0b07 	vselge.f64	d0, d6, d7
 80005f0:	e79f      	b.n	8000532 <__muldc3+0x172>
 80005f2:	ee12 3a90 	vmov	r3, s5
 80005f6:	ed9f ab1e 	vldr	d10, [pc, #120]	@ 8000670 <__muldc3+0x2b0>
 80005fa:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 8000668 <__muldc3+0x2a8>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe22 2b0a 	vselge.f64	d2, d2, d10
 8000604:	e7d7      	b.n	80005b6 <__muldc3+0x1f6>
 8000606:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000668 <__muldc3+0x2a8>
 800060a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8000670 <__muldc3+0x2b0>
 800060e:	ee13 3a90 	vmov	r3, s7
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe26 3b07 	vselge.f64	d3, d6, d7
 8000618:	e749      	b.n	80004ae <__muldc3+0xee>
 800061a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000668 <__muldc3+0x2a8>
 800061e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000670 <__muldc3+0x2b0>
 8000622:	ee12 3a90 	vmov	r3, s5
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe26 2b07 	vselge.f64	d2, d6, d7
 800062c:	e739      	b.n	80004a2 <__muldc3+0xe2>
 800062e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000668 <__muldc3+0x2a8>
 8000632:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000670 <__muldc3+0x2b0>
 8000636:	ee11 3a90 	vmov	r3, s3
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000640:	e729      	b.n	8000496 <__muldc3+0xd6>
 8000642:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000668 <__muldc3+0x2a8>
 8000646:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8000670 <__muldc3+0x2b0>
 800064a:	ee10 3a90 	vmov	r3, s1
 800064e:	2b00      	cmp	r3, #0
 8000650:	fe26 0b07 	vselge.f64	d0, d6, d7
 8000654:	e719      	b.n	800048a <__muldc3+0xca>
 8000656:	bf00      	nop
 8000658:	ffffffff 	.word	0xffffffff
 800065c:	7fefffff 	.word	0x7fefffff
 8000660:	00000000 	.word	0x00000000
 8000664:	7ff00000 	.word	0x7ff00000
	...
 8000674:	80000000 	.word	0x80000000

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <rev>:
    }
    return A;
}

int rev(int size , int index)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	ed2d 8b02 	vpush	{d8}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
    int k = floor(log2(size)) , reg = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000950:	eeb0 0b47 	vmov.f64	d0, d7
 8000954:	f012 fb30 	bl	8012fb8 <log>
 8000958:	eeb0 6b40 	vmov.f64	d6, d0
 800095c:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000a18 <rev+0xe0>
 8000960:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000964:	eeb0 0b47 	vmov.f64	d0, d7
 8000968:	f012 ff3a 	bl	80137e0 <floor>
 800096c:	eeb0 7b40 	vmov.f64	d7, d0
 8000970:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000974:	ee17 3a90 	vmov	r3, s15
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
    int ans = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
    for (int i =size/2 ; i>0 ; i/=2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da00      	bge.n	800098a <rev+0x52>
 8000988:	3301      	adds	r3, #1
 800098a:	105b      	asrs	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e036      	b.n	80009fe <rev+0xc6>
    {
        reg = index%2;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
        ans += reg * pow(2 , k - 1) ;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009b4:	eeb0 1b47 	vmov.f64	d1, d7
 80009b8:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 80009bc:	f012 fc24 	bl	8013208 <pow>
 80009c0:	eeb0 7b40 	vmov.f64	d7, d0
 80009c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009da:	ee17 3a90 	vmov	r3, s15
 80009de:	613b      	str	r3, [r7, #16]
        k--;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
        index/= 2;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da00      	bge.n	80009ee <rev+0xb6>
 80009ec:	3301      	adds	r3, #1
 80009ee:	105b      	asrs	r3, r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
    for (int i =size/2 ; i>0 ; i/=2)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da00      	bge.n	80009fa <rev+0xc2>
 80009f8:	3301      	adds	r3, #1
 80009fa:	105b      	asrs	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dcc5      	bgt.n	8000990 <rev+0x58>
    }
    return ans;
 8000a04:	693b      	ldr	r3, [r7, #16]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	f3af 8000 	nop.w
 8000a18:	fefa39ef 	.word	0xfefa39ef
 8000a1c:	3fe62e42 	.word	0x3fe62e42

08000a20 <FFT>:
    }
    return X;
}

double complex* FFT(int size , double x[])
{
 8000a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	ed2d 8b02 	vpush	{d8}
 8000a28:	b0a9      	sub	sp, #164	@ 0xa4
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	466b      	mov	r3, sp
 8000a32:	461e      	mov	r6, r3
    double complex W[size/2];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <FFT+0x1c>
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	105b      	asrs	r3, r3, #1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	1e4b      	subs	r3, r1, #1
 8000a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a46:	460a      	mov	r2, r1
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	01c3      	lsls	r3, r0, #7
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	01c2      	lsls	r2, r0, #7
 8000a64:	460a      	mov	r2, r1
 8000a66:	2300      	movs	r3, #0
 8000a68:	4692      	mov	sl, r2
 8000a6a:	469b      	mov	fp, r3
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8000a78:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8000a7c:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8000a80:	460b      	mov	r3, r1
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	466b      	mov	r3, sp
 8000a90:	3307      	adds	r3, #7
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    for (int i = 0 ; i < size/2 ; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000aa0:	e049      	b.n	8000b36 <FFT+0x116>
    {
        W[i] = cos(2*M_PI*i/size) + I*sin(2*M_PI*i/size);
 8000aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aae:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8000c50 <FFT+0x230>
 8000ab2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ac0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ac4:	eeb0 0b45 	vmov.f64	d0, d5
 8000ac8:	f012 fe3a 	bl	8013740 <sin>
 8000acc:	eeb0 8b40 	vmov.f64	d8, d0
 8000ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000adc:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 8000c50 <FFT+0x230>
 8000ae0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000af2:	eeb0 0b45 	vmov.f64	d0, d5
 8000af6:	f012 fdd7 	bl	80136a8 <cos>
 8000afa:	eeb0 6b40 	vmov.f64	d6, d0
 8000afe:	ed9f 7b56 	vldr	d7, [pc, #344]	@ 8000c58 <FFT+0x238>
 8000b02:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4413      	add	r3, r2
 8000b16:	ed83 7b00 	vstr	d7, [r3]
 8000b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	4413      	add	r3, r2
 8000b26:	3308      	adds	r3, #8
 8000b28:	ed83 8b00 	vstr	d8, [r3]
    for (int i = 0 ; i < size/2 ; i++)
 8000b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <FFT+0x11e>
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	105b      	asrs	r3, r3, #1
 8000b40:	461a      	mov	r2, r3
 8000b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dbab      	blt.n	8000aa2 <FFT+0x82>
    }

    double complex A[size];
 8000b4a:	68f9      	ldr	r1, [r7, #12]
 8000b4c:	1e4b      	subs	r3, r1, #1
 8000b4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b52:	460a      	mov	r2, r1
 8000b54:	2300      	movs	r3, #0
 8000b56:	4690      	mov	r8, r2
 8000b58:	4699      	mov	r9, r3
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000b66:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000b6a:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000b6e:	460a      	mov	r2, r1
 8000b70:	2300      	movs	r3, #0
 8000b72:	4614      	mov	r4, r2
 8000b74:	461d      	mov	r5, r3
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	01eb      	lsls	r3, r5, #7
 8000b80:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000b84:	01e2      	lsls	r2, r4, #7
 8000b86:	460b      	mov	r3, r1
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	3307      	adds	r3, #7
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	ebad 0d03 	sub.w	sp, sp, r3
 8000b94:	466b      	mov	r3, sp
 8000b96:	3307      	adds	r3, #7
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    double complex *X = A;
 8000b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0;i < size ; i ++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ba8:	e027      	b.n	8000bfa <FFT+0x1da>
    {
    	A[i] = x[rev(size,i)] + 0*I;
 8000baa:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff fec2 	bl	8000938 <rev>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	4413      	add	r3, r2
 8000bbc:	ed93 7b00 	vldr	d7, [r3]
 8000bc0:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8000c58 <FFT+0x238>
 8000bc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bc8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	ed83 7b00 	vstr	d7, [r3]
 8000bd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	4413      	add	r3, r2
 8000be0:	f103 0108 	add.w	r1, r3, #8
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0;i < size ; i ++)
 8000bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbd2      	blt.n	8000baa <FFT+0x18a>
    }
    
    int s ,m ,k ,j;
    double complex omega , t, u;

    for(s = 1 ; s <size ; s*=2)
 8000c04:	2301      	movs	r3, #1
 8000c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000c0a:	e0f6      	b.n	8000dfa <FFT+0x3da>
    {
        m = s * 2;
 8000c0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	677b      	str	r3, [r7, #116]	@ 0x74
        for ( k = 0 ; k< size ; k += m)
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000c1a:	e0e3      	b.n	8000de4 <FFT+0x3c4>
        {
            omega = 1;
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <FFT+0x240>)
 8000c22:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
            for (j = 0; j < m/2; j++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <FFT+0x240>)
 8000c4a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000c4e:	e0b8      	b.n	8000dc2 <FFT+0x3a2>
 8000c50:	54442d18 	.word	0x54442d18
 8000c54:	401921fb 	.word	0x401921fb
	...
 8000c60:	3ff00000 	.word	0x3ff00000
            {
                t = omega * A[k+j+m/2];
 8000c64:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c6c:	441a      	add	r2, r3
 8000c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da00      	bge.n	8000c76 <FFT+0x256>
 8000c74:	3301      	adds	r3, #1
 8000c76:	105b      	asrs	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000c7c:	011a      	lsls	r2, r3, #4
 8000c7e:	440a      	add	r2, r1
 8000c80:	ed92 7b00 	vldr	d7, [r2]
 8000c84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	4413      	add	r3, r2
 8000c8a:	ed93 6b02 	vldr	d6, [r3, #8]
 8000c8e:	eeb0 3b46 	vmov.f64	d3, d6
 8000c92:	eeb0 2b47 	vmov.f64	d2, d7
 8000c96:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000c9a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000c9e:	f7ff fb8f 	bl	80003c0 <__muldc3>
 8000ca2:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 8000ca6:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 8000caa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000cb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
                u = A[k+j];
 8000cba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cc2:	18d1      	adds	r1, r2, r3
 8000cc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cc6:	010b      	lsls	r3, r1, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cd4:	010b      	lsls	r3, r1, #4
 8000cd6:	4413      	add	r3, r2
 8000cd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ce4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ce8:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8000cec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
                A[k+j] = u + t;
 8000cf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cf8:	4413      	add	r3, r2
 8000cfa:	ed97 6b06 	vldr	d6, [r7, #24]
 8000cfe:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d02:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d06:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d0a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d0e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d14:	011a      	lsls	r2, r3, #4
 8000d16:	440a      	add	r2, r1
 8000d18:	ed82 6b00 	vstr	d6, [r2]
 8000d1c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4413      	add	r3, r2
 8000d22:	3308      	adds	r3, #8
 8000d24:	ed83 7b00 	vstr	d7, [r3]
                A[k+j+m/2] = u - t;
 8000d28:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d30:	441a      	add	r2, r3
 8000d32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da00      	bge.n	8000d3a <FFT+0x31a>
 8000d38:	3301      	adds	r3, #1
 8000d3a:	105b      	asrs	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d42:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d4a:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d4e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d58:	011a      	lsls	r2, r3, #4
 8000d5a:	440a      	add	r2, r1
 8000d5c:	ed82 6b00 	vstr	d6, [r2]
 8000d60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4413      	add	r3, r2
 8000d66:	3308      	adds	r3, #8
 8000d68:	ed83 7b00 	vstr	d7, [r3]
                omega = omega * W[size/m];
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d74:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000d78:	011a      	lsls	r2, r3, #4
 8000d7a:	440a      	add	r2, r1
 8000d7c:	ed92 7b00 	vldr	d7, [r2]
 8000d80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	4413      	add	r3, r2
 8000d88:	ed93 6b02 	vldr	d6, [r3, #8]
 8000d8c:	eeb0 3b46 	vmov.f64	d3, d6
 8000d90:	eeb0 2b47 	vmov.f64	d2, d7
 8000d94:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000d98:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000d9c:	f7ff fb10 	bl	80003c0 <__muldc3>
 8000da0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8000da4:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8000da8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000dac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000db0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000db4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            for (j = 0; j < m/2; j++)
 8000db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da00      	bge.n	8000dca <FFT+0x3aa>
 8000dc8:	3301      	adds	r3, #1
 8000dca:	105b      	asrs	r3, r3, #1
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f6ff af46 	blt.w	8000c64 <FFT+0x244>
        for ( k = 0 ; k< size ; k += m)
 8000dd8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000ddc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dde:	4413      	add	r3, r2
 8000de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000de4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	f6ff af16 	blt.w	8000c1c <FFT+0x1fc>
    for(s = 1 ; s <size ; s*=2)
 8000df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f6ff af03 	blt.w	8000c0c <FFT+0x1ec>
            } 
        }
    }
    return X;
 8000e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e08:	46b5      	mov	sp, r6

}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	37a4      	adds	r7, #164	@ 0xa4
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	ecbd 8b02 	vpop	{d8}
 8000e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e18 <FFT_Mag_sqrt>:
    }
}


void FFT_Mag_sqrt(int size , double x[])
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    double complex* X = FFT(size , x);
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fdfb 	bl	8000a20 <FFT>
 8000e2a:	60b8      	str	r0, [r7, #8]
    for (int i = 0 ; i < size ; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	e01c      	b.n	8000e6c <FFT_Mag_sqrt+0x54>
    {
        x[i] = cabs(X[i]);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	4413      	add	r3, r2
 8000e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e42:	68fc      	ldr	r4, [r7, #12]
 8000e44:	00e4      	lsls	r4, r4, #3
 8000e46:	683d      	ldr	r5, [r7, #0]
 8000e48:	442c      	add	r4, r5
 8000e4a:	ec41 0b16 	vmov	d6, r0, r1
 8000e4e:	ec43 2b17 	vmov	d7, r2, r3
 8000e52:	eeb0 0b46 	vmov.f64	d0, d6
 8000e56:	eeb0 1b47 	vmov.f64	d1, d7
 8000e5a:	f012 f891 	bl	8012f80 <cabs>
 8000e5e:	eeb0 7b40 	vmov.f64	d7, d0
 8000e62:	ed84 7b00 	vstr	d7, [r4]
    for (int i = 0 ; i < size ; i++)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbde      	blt.n	8000e32 <FFT_Mag_sqrt+0x1a>
    }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e80 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea4:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ea6:	4a31      	ldr	r2, [pc, #196]	@ (8000f6c <MX_ADC1_Init+0xec>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ec2:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ec8:	4b27      	ldr	r3, [pc, #156]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ece:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed4:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000eda:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000edc:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ee4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000eea:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000eec:	2203      	movs	r2, #3
 8000eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f04:	4818      	ldr	r0, [pc, #96]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000f06:	f002 f8f5 	bl	80030f4 <HAL_ADC_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000f10:	f001 f9ea 	bl	80022e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4812      	ldr	r0, [pc, #72]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000f20:	f003 fc36 	bl	8004790 <HAL_ADCEx_MultiModeConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000f2a:	f001 f9dd 	bl	80022e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <MX_ADC1_Init+0xf0>)
 8000f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f32:	2306      	movs	r3, #6
 8000f34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000f36:	2306      	movs	r3, #6
 8000f38:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f3a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000f3e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f40:	2304      	movs	r3, #4
 8000f42:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_ADC1_Init+0xe8>)
 8000f52:	f002 fcc9 	bl	80038e8 <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000f5c:	f001 f9c4 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	@ 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2400488c 	.word	0x2400488c
 8000f6c:	40022000 	.word	0x40022000
 8000f70:	0c900008 	.word	0x0c900008

08000f74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b0bc      	sub	sp, #240	@ 0xf0
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	22c0      	movs	r2, #192	@ 0xc0
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f00e fc41 	bl	800f81c <memset>
  if(adcHandle->Instance==ADC1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a53      	ldr	r2, [pc, #332]	@ (80010ec <HAL_ADC_MspInit+0x178>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	f040 809e 	bne.w	80010e2 <HAL_ADC_MspInit+0x16e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fa6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 10;
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 384;
 8000fb6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 6;
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000fc8:	2340      	movs	r3, #64	@ 0x40
 8000fca:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f008 fd24 	bl	8009a2c <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8000fea:	f001 f97d 	bl	80022e8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fee:	4b40      	ldr	r3, [pc, #256]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 8000ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ff4:	4a3e      	ldr	r2, [pc, #248]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 8000ff6:	f043 0320 	orr.w	r3, r3, #32
 8000ffa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 8001000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001004:	f003 0320 	and.w	r3, r3, #32
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100c:	4b38      	ldr	r3, [pc, #224]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001012:	4a37      	ldr	r2, [pc, #220]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800101c:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001030:	4a2f      	ldr	r2, [pc, #188]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103a:	4b2d      	ldr	r3, [pc, #180]	@ (80010f0 <HAL_ADC_MspInit+0x17c>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001048:	2340      	movs	r3, #64	@ 0x40
 800104a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104e:	2303      	movs	r3, #3
 8001050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800105e:	4619      	mov	r1, r3
 8001060:	4824      	ldr	r0, [pc, #144]	@ (80010f4 <HAL_ADC_MspInit+0x180>)
 8001062:	f007 f8c5 	bl	80081f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001066:	2310      	movs	r3, #16
 8001068:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106c:	2303      	movs	r3, #3
 800106e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800107c:	4619      	mov	r1, r3
 800107e:	481e      	ldr	r0, [pc, #120]	@ (80010f8 <HAL_ADC_MspInit+0x184>)
 8001080:	f007 f8b6 	bl	80081f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 8001086:	4a1e      	ldr	r2, [pc, #120]	@ (8001100 <HAL_ADC_MspInit+0x18c>)
 8001088:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 800108c:	2209      	movs	r2, #9
 800108e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 800109e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010c0:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010c6:	480d      	ldr	r0, [pc, #52]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010c8:	f004 f8a0 	bl	800520c <HAL_DMA_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_ADC_MspInit+0x162>
    {
      Error_Handler();
 80010d2:	f001 f909 	bl	80022e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <HAL_ADC_MspInit+0x188>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	37f0      	adds	r7, #240	@ 0xf0
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58020000 	.word	0x58020000
 80010f8:	58020800 	.word	0x58020800
 80010fc:	240048f0 	.word	0x240048f0
 8001100:	40020010 	.word	0x40020010

08001104 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <HAL_ADC_MspDeInit+0x44>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d114      	bne.n	8001140 <HAL_ADC_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 8001116:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <HAL_ADC_MspDeInit+0x48>)
 8001118:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800111c:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <HAL_ADC_MspDeInit+0x48>)
 800111e:	f023 0320 	bic.w	r3, r3, #32
 8001122:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8001126:	2140      	movs	r1, #64	@ 0x40
 8001128:	4809      	ldr	r0, [pc, #36]	@ (8001150 <HAL_ADC_MspDeInit+0x4c>)
 800112a:	f007 fa11 	bl	8008550 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 800112e:	2110      	movs	r1, #16
 8001130:	4808      	ldr	r0, [pc, #32]	@ (8001154 <HAL_ADC_MspDeInit+0x50>)
 8001132:	f007 fa0d 	bl	8008550 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fbc2 	bl	80058c4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40022000 	.word	0x40022000
 800114c:	58024400 	.word	0x58024400
 8001150:	58020000 	.word	0x58020000
 8001154:	58020800 	.word	0x58020800

08001158 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2224      	movs	r2, #36	@ 0x24
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00e fb59 	bl	800f81c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 800116c:	4a12      	ldr	r2, [pc, #72]	@ (80011b8 <MX_DAC1_Init+0x60>)
 800116e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001170:	4810      	ldr	r0, [pc, #64]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 8001172:	f003 fd77 	bl	8004c64 <HAL_DAC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800117c:	f001 f8b4 	bl	80022e8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001184:	2316      	movs	r3, #22
 8001186:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001188:	2302      	movs	r3, #2
 800118a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800118c:	2301      	movs	r3, #1
 800118e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2210      	movs	r2, #16
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <MX_DAC1_Init+0x5c>)
 800119c:	f003 fe6e 	bl	8004e7c <HAL_DAC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011a6:	f001 f89f 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	@ 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24004968 	.word	0x24004968
 80011b8:	40007400 	.word	0x40007400

080011bc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a30      	ldr	r2, [pc, #192]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d159      	bne.n	8001292 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80011de:	4b30      	ldr	r3, [pc, #192]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 80011e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011e4:	4a2e      	ldr	r2, [pc, #184]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 80011e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80011ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011ee:	4b2c      	ldr	r3, [pc, #176]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 80011f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001202:	4a27      	ldr	r2, [pc, #156]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800121a:	2320      	movs	r3, #32
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	481d      	ldr	r0, [pc, #116]	@ (80012a4 <HAL_DAC_MspInit+0xe8>)
 800122e:	f006 ffdf 	bl	80081f0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001234:	4a1d      	ldr	r2, [pc, #116]	@ (80012ac <HAL_DAC_MspInit+0xf0>)
 8001236:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800123a:	2244      	movs	r2, #68	@ 0x44
 800123c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800123e:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001240:	2240      	movs	r2, #64	@ 0x40
 8001242:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001244:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800124c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001250:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001254:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001258:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b13      	ldr	r3, [pc, #76]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800125c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001260:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001268:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001270:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001276:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 8001278:	f003 ffc8 	bl	800520c <HAL_DMA_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001282:	f001 f831 	bl	80022e8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a07      	ldr	r2, [pc, #28]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	4a06      	ldr	r2, [pc, #24]	@ (80012a8 <HAL_DAC_MspInit+0xec>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40007400 	.word	0x40007400
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58020000 	.word	0x58020000
 80012a8:	2400497c 	.word	0x2400497c
 80012ac:	40020028 	.word	0x40020028

080012b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <MX_DMA_Init+0x4c>)
 80012b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012bc:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <MX_DMA_Init+0x4c>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <MX_DMA_Init+0x4c>)
 80012c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	200b      	movs	r0, #11
 80012da:	f003 fc12 	bl	8004b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012de:	200b      	movs	r0, #11
 80012e0:	f003 fc29 	bl	8004b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	200c      	movs	r0, #12
 80012ea:	f003 fc0a 	bl	8004b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012ee:	200c      	movs	r0, #12
 80012f0:	f003 fc21 	bl	8004b36 <HAL_NVIC_EnableIRQ>

}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	58024400 	.word	0x58024400

08001300 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	4b39      	ldr	r3, [pc, #228]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131c:	4a37      	ldr	r2, [pc, #220]	@ (80013fc <MX_GPIO_Init+0xfc>)
 800131e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001326:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	4a30      	ldr	r2, [pc, #192]	@ (80013fc <MX_GPIO_Init+0xfc>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001358:	4a28      	ldr	r2, [pc, #160]	@ (80013fc <MX_GPIO_Init+0xfc>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001362:	4b26      	ldr	r3, [pc, #152]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	4b22      	ldr	r3, [pc, #136]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001376:	4a21      	ldr	r2, [pc, #132]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001380:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138e:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001394:	4a19      	ldr	r2, [pc, #100]	@ (80013fc <MX_GPIO_Init+0xfc>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139e:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <MX_GPIO_Init+0xfc>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2
 80013ac:	2200      	movs	r2, #0
 80013ae:	f24c 011e 	movw	r1, #49182	@ 0xc01e
 80013b2:	4813      	ldr	r0, [pc, #76]	@ (8001400 <MX_GPIO_Init+0x100>)
 80013b4:	f007 f9d6 	bl	8008764 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013b8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	@ (8001400 <MX_GPIO_Init+0x100>)
 80013d2:	f006 ff0d 	bl	80081f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80013d6:	231e      	movs	r3, #30
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e2:	2302      	movs	r3, #2
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4804      	ldr	r0, [pc, #16]	@ (8001400 <MX_GPIO_Init+0x100>)
 80013ee:	f006 feff 	bl	80081f0 <HAL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	@ 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	58024400 	.word	0x58024400
 8001400:	58020c00 	.word	0x58020c00

08001404 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_I2C1_Init+0x74>)
 800140a:	4a1c      	ldr	r2, [pc, #112]	@ (800147c <MX_I2C1_Init+0x78>)
 800140c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001410:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <MX_I2C1_Init+0x7c>)
 8001412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_I2C1_Init+0x74>)
 800141c:	2201      	movs	r2, #1
 800141e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_I2C1_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_I2C1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143e:	480e      	ldr	r0, [pc, #56]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001440:	f007 f9aa 	bl	8008798 <HAL_I2C_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800144a:	f000 ff4d 	bl	80022e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144e:	2100      	movs	r1, #0
 8001450:	4809      	ldr	r0, [pc, #36]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001452:	f007 fa31 	bl	80088b8 <HAL_I2CEx_ConfigAnalogFilter>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800145c:	f000 ff44 	bl	80022e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001460:	2100      	movs	r1, #0
 8001462:	4805      	ldr	r0, [pc, #20]	@ (8001478 <MX_I2C1_Init+0x74>)
 8001464:	f007 fa73 	bl	800894e <HAL_I2CEx_ConfigDigitalFilter>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800146e:	f000 ff3b 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	240049f4 	.word	0x240049f4
 800147c:	40005400 	.word	0x40005400
 8001480:	00b03fdb 	.word	0x00b03fdb

08001484 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b0ba      	sub	sp, #232	@ 0xe8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	22c0      	movs	r2, #192	@ 0xc0
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00e f9b9 	bl	800f81c <memset>
  if(i2cHandle->Instance==I2C1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a26      	ldr	r2, [pc, #152]	@ (8001548 <HAL_I2C_MspInit+0xc4>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d145      	bne.n	8001540 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014b4:	f04f 0208 	mov.w	r2, #8
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4618      	mov	r0, r3
 80014cc:	f008 faae 	bl	8009a2c <HAL_RCCEx_PeriphCLKConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014d6:	f000 ff07 	bl	80022e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e0:	4a1a      	ldr	r2, [pc, #104]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 80014e2:	f043 0302 	orr.w	r3, r3, #2
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ea:	4b18      	ldr	r3, [pc, #96]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f8:	23c0      	movs	r3, #192	@ 0xc0
 80014fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001510:	2304      	movs	r3, #4
 8001512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <HAL_I2C_MspInit+0xcc>)
 800151e:	f006 fe67 	bl	80081f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 8001524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001528:	4a08      	ldr	r2, [pc, #32]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 800152a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800152e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_I2C_MspInit+0xc8>)
 8001534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001540:	bf00      	nop
 8001542:	37e8      	adds	r7, #232	@ 0xe8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40005400 	.word	0x40005400
 800154c:	58024400 	.word	0x58024400
 8001550:	58020400 	.word	0x58020400
 8001554:	00000000 	.word	0x00000000

08001558 <Analog_Judge>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"

int Analog_Judge(double x[])
{
 8001558:	b580      	push	{r7, lr}
 800155a:	f5ad 4d40 	sub.w	sp, sp, #49152	@ 0xc000
 800155e:	b09e      	sub	sp, #120	@ 0x78
 8001560:	af00      	add	r7, sp, #0
 8001562:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001566:	f843 0c74 	str.w	r0, [r3, #-116]
    double bands[FO_LENGTH / 2];
    int bands_idx[FO_LENGTH / 2];
    double bands_sum = 0;
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	f24c 0170 	movw	r1, #49264	@ 0xc070
 8001576:	4439      	add	r1, r7
 8001578:	e9c1 2300 	strd	r2, r3, [r1]
    int main_band_idx = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	f24c 026c 	movw	r2, #49260	@ 0xc06c
 8001582:	443a      	add	r2, r7
 8001584:	6013      	str	r3, [r2, #0]
    int n_bands = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	f24c 0268 	movw	r2, #49256	@ 0xc068
 800158c:	443a      	add	r2, r7
 800158e:	6013      	str	r3, [r2, #0]
    int bands_gap = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	f24c 024c 	movw	r2, #49228	@ 0xc04c
 8001596:	443a      	add	r2, r7
 8001598:	6013      	str	r3, [r2, #0]
    char str[50];


    // This can be optimized with specific threshold
    double main_band = 0;
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f24c 0160 	movw	r1, #49248	@ 0xc060
 80015a6:	4439      	add	r1, r7
 80015a8:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 100; i < FO_LENGTH / 2 - 100; i++)
 80015ac:	2364      	movs	r3, #100	@ 0x64
 80015ae:	f24c 025c 	movw	r2, #49244	@ 0xc05c
 80015b2:	443a      	add	r2, r7
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e037      	b.n	8001628 <Analog_Judge+0xd0>
    {
        if (x[i] > main_band)
 80015b8:	f24c 035c 	movw	r3, #49244	@ 0xc05c
 80015bc:	443b      	add	r3, r7
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80015c6:	f852 2c74 	ldr.w	r2, [r2, #-116]
 80015ca:	4413      	add	r3, r2
 80015cc:	ed93 7b00 	vldr	d7, [r3]
 80015d0:	f24c 0360 	movw	r3, #49248	@ 0xc060
 80015d4:	443b      	add	r3, r7
 80015d6:	ed93 6b00 	vldr	d6, [r3]
 80015da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	d518      	bpl.n	8001616 <Analog_Judge+0xbe>
        {
            main_band = x[i];
 80015e4:	f24c 035c 	movw	r3, #49244	@ 0xc05c
 80015e8:	443b      	add	r3, r7
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80015f2:	f852 2c74 	ldr.w	r2, [r2, #-116]
 80015f6:	4413      	add	r3, r2
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f24c 0160 	movw	r1, #49248	@ 0xc060
 8001600:	4439      	add	r1, r7
 8001602:	e9c1 2300 	strd	r2, r3, [r1]
            main_band_idx = i;
 8001606:	f24c 035c 	movw	r3, #49244	@ 0xc05c
 800160a:	443b      	add	r3, r7
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f24c 026c 	movw	r2, #49260	@ 0xc06c
 8001612:	443a      	add	r2, r7
 8001614:	6013      	str	r3, [r2, #0]
    for (int i = 100; i < FO_LENGTH / 2 - 100; i++)
 8001616:	f24c 035c 	movw	r3, #49244	@ 0xc05c
 800161a:	443b      	add	r3, r7
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	f24c 025c 	movw	r2, #49244	@ 0xc05c
 8001624:	443a      	add	r2, r7
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	f24c 035c 	movw	r3, #49244	@ 0xc05c
 800162c:	443b      	add	r3, r7
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f640 729b 	movw	r2, #3995	@ 0xf9b
 8001634:	4293      	cmp	r3, r2
 8001636:	ddbf      	ble.n	80015b8 <Analog_Judge+0x60>
        }
    }
    double threshold = main_band * 0.1;
 8001638:	f24c 0360 	movw	r3, #49248	@ 0xc060
 800163c:	443b      	add	r3, r7
 800163e:	ed93 7b00 	vldr	d7, [r3]
 8001642:	ed9f 6bbf 	vldr	d6, [pc, #764]	@ 8001940 <Analog_Judge+0x3e8>
 8001646:	ee27 7b06 	vmul.f64	d7, d7, d6
 800164a:	f24c 0340 	movw	r3, #49216	@ 0xc040
 800164e:	443b      	add	r3, r7
 8001650:	ed83 7b00 	vstr	d7, [r3]
    
    for(int i = main_band_idx - FO_LENGTH / 16; i < main_band_idx +  FO_LENGTH / 16 ; i++)
 8001654:	f24c 036c 	movw	r3, #49260	@ 0xc06c
 8001658:	443b      	add	r3, r7
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8001660:	f24c 0258 	movw	r2, #49240	@ 0xc058
 8001664:	443a      	add	r2, r7
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	e0c7      	b.n	80017fa <Analog_Judge+0x2a2>
    {
        if(x[i] > threshold && x[i] > 20)
 800166a:	f24c 0358 	movw	r3, #49240	@ 0xc058
 800166e:	443b      	add	r3, r7
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001678:	f852 2c74 	ldr.w	r2, [r2, #-116]
 800167c:	4413      	add	r3, r2
 800167e:	ed93 7b00 	vldr	d7, [r3]
 8001682:	f24c 0340 	movw	r3, #49216	@ 0xc040
 8001686:	443b      	add	r3, r7
 8001688:	ed93 6b00 	vldr	d6, [r3]
 800168c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	f140 80a8 	bpl.w	80017e8 <Analog_Judge+0x290>
 8001698:	f24c 0358 	movw	r3, #49240	@ 0xc058
 800169c:	443b      	add	r3, r7
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80016a6:	f852 2c74 	ldr.w	r2, [r2, #-116]
 80016aa:	4413      	add	r3, r2
 80016ac:	ed93 7b00 	vldr	d7, [r3]
 80016b0:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 80016b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80016b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016bc:	f340 8094 	ble.w	80017e8 <Analog_Judge+0x290>
        {
        	int flag = 1 ;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f24c 0254 	movw	r2, #49236	@ 0xc054
 80016c6:	443a      	add	r2, r7
 80016c8:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 80016ca:	f24c 0358 	movw	r3, #49240	@ 0xc058
 80016ce:	443b      	add	r3, r7
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3b02      	subs	r3, #2
 80016d4:	f24c 0250 	movw	r2, #49232	@ 0xc050
 80016d8:	443a      	add	r2, r7
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	e02a      	b.n	8001734 <Analog_Judge+0x1dc>
        	{
        		if (x[j] > x[i])flag = 0;
 80016de:	f24c 0350 	movw	r3, #49232	@ 0xc050
 80016e2:	443b      	add	r3, r7
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80016ec:	f852 2c74 	ldr.w	r2, [r2, #-116]
 80016f0:	4413      	add	r3, r2
 80016f2:	ed93 6b00 	vldr	d6, [r3]
 80016f6:	f24c 0358 	movw	r3, #49240	@ 0xc058
 80016fa:	443b      	add	r3, r7
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001704:	f852 2c74 	ldr.w	r2, [r2, #-116]
 8001708:	4413      	add	r3, r2
 800170a:	ed93 7b00 	vldr	d7, [r3]
 800170e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	dd04      	ble.n	8001722 <Analog_Judge+0x1ca>
 8001718:	2300      	movs	r3, #0
 800171a:	f24c 0254 	movw	r2, #49236	@ 0xc054
 800171e:	443a      	add	r2, r7
 8001720:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 8001722:	f24c 0350 	movw	r3, #49232	@ 0xc050
 8001726:	443b      	add	r3, r7
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	f24c 0250 	movw	r2, #49232	@ 0xc050
 8001730:	443a      	add	r2, r7
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	f24c 0358 	movw	r3, #49240	@ 0xc058
 8001738:	443b      	add	r3, r7
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	f24c 0250 	movw	r2, #49232	@ 0xc050
 8001742:	443a      	add	r2, r7
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	ddc9      	ble.n	80016de <Analog_Judge+0x186>
        	}
        	if (flag == 1)
 800174a:	f24c 0354 	movw	r3, #49236	@ 0xc054
 800174e:	443b      	add	r3, r7
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d148      	bne.n	80017e8 <Analog_Judge+0x290>
        	{
        		bands_sum += x[i];
 8001756:	f24c 0358 	movw	r3, #49240	@ 0xc058
 800175a:	443b      	add	r3, r7
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001764:	f852 2c74 	ldr.w	r2, [r2, #-116]
 8001768:	4413      	add	r3, r2
 800176a:	ed93 7b00 	vldr	d7, [r3]
 800176e:	f24c 0370 	movw	r3, #49264	@ 0xc070
 8001772:	443b      	add	r3, r7
 8001774:	ed93 6b00 	vldr	d6, [r3]
 8001778:	ee36 7b07 	vadd.f64	d7, d6, d7
 800177c:	f24c 0370 	movw	r3, #49264	@ 0xc070
 8001780:	443b      	add	r3, r7
 8001782:	ed83 7b00 	vstr	d7, [r3]
        		bands[n_bands] = x[i];
 8001786:	f24c 0358 	movw	r3, #49240	@ 0xc058
 800178a:	443b      	add	r3, r7
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8001794:	f852 2c74 	ldr.w	r2, [r2, #-116]
 8001798:	4413      	add	r3, r2
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f244 0178 	movw	r1, #16504	@ 0x4078
 80017a2:	4439      	add	r1, r7
 80017a4:	4608      	mov	r0, r1
 80017a6:	f24c 0168 	movw	r1, #49256	@ 0xc068
 80017aa:	4439      	add	r1, r7
 80017ac:	6809      	ldr	r1, [r1, #0]
 80017ae:	00c9      	lsls	r1, r1, #3
 80017b0:	4401      	add	r1, r0
 80017b2:	3938      	subs	r1, #56	@ 0x38
 80017b4:	e9c1 2300 	strd	r2, r3, [r1]
        		bands_idx[n_bands] = i;
 80017b8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80017bc:	461a      	mov	r2, r3
 80017be:	f24c 0368 	movw	r3, #49256	@ 0xc068
 80017c2:	443b      	add	r3, r7
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	f24c 0258 	movw	r2, #49240	@ 0xc058
 80017ce:	443a      	add	r2, r7
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	f843 2c38 	str.w	r2, [r3, #-56]
        		n_bands++;
 80017d6:	f24c 0368 	movw	r3, #49256	@ 0xc068
 80017da:	443b      	add	r3, r7
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	f24c 0268 	movw	r2, #49256	@ 0xc068
 80017e4:	443a      	add	r2, r7
 80017e6:	6013      	str	r3, [r2, #0]
    for(int i = main_band_idx - FO_LENGTH / 16; i < main_band_idx +  FO_LENGTH / 16 ; i++)
 80017e8:	f24c 0358 	movw	r3, #49240	@ 0xc058
 80017ec:	443b      	add	r3, r7
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	f24c 0258 	movw	r2, #49240	@ 0xc058
 80017f6:	443a      	add	r2, r7
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	f24c 036c 	movw	r3, #49260	@ 0xc06c
 80017fe:	443b      	add	r3, r7
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8001806:	f24c 0258 	movw	r2, #49240	@ 0xc058
 800180a:	443a      	add	r2, r7
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	f77f af2b 	ble.w	800166a <Analog_Judge+0x112>
        	}
        }
    }

    bands_gap = bands_idx[n_bands / 2 + 1] - bands_idx[n_bands / 2];
 8001814:	f24c 0368 	movw	r3, #49256	@ 0xc068
 8001818:	443b      	add	r3, r7
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	da00      	bge.n	8001822 <Analog_Judge+0x2ca>
 8001820:	3301      	adds	r3, #1
 8001822:	105b      	asrs	r3, r3, #1
 8001824:	3301      	adds	r3, #1
 8001826:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8001832:	f24c 0368 	movw	r3, #49256	@ 0xc068
 8001836:	443b      	add	r3, r7
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	da00      	bge.n	8001840 <Analog_Judge+0x2e8>
 800183e:	3301      	adds	r3, #1
 8001840:	105b      	asrs	r3, r3, #1
 8001842:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f24c 024c 	movw	r2, #49228	@ 0xc04c
 8001854:	443a      	add	r2, r7
 8001856:	6013      	str	r3, [r2, #0]
	sprintf(str , "number of separated bands: %d." , n_bands);
 8001858:	4b3d      	ldr	r3, [pc, #244]	@ (8001950 <Analog_Judge+0x3f8>)
 800185a:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 800185e:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8001862:	443b      	add	r3, r7
 8001864:	f24c 0268 	movw	r2, #49256	@ 0xc068
 8001868:	443a      	add	r2, r7
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	4939      	ldr	r1, [pc, #228]	@ (8001954 <Analog_Judge+0x3fc>)
 800186e:	4618      	mov	r0, r3
 8001870:	f00d fccc 	bl	800f20c <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001874:	4936      	ldr	r1, [pc, #216]	@ (8001950 <Analog_Judge+0x3f8>)
 8001876:	f24c 0378 	movw	r3, #49272	@ 0xc078
 800187a:	440b      	add	r3, r1
 800187c:	19d9      	adds	r1, r3, r7
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001882:	221c      	movs	r2, #28
 8001884:	4834      	ldr	r0, [pc, #208]	@ (8001958 <Analog_Judge+0x400>)
 8001886:	f00b f9cd 	bl	800cc24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 800188a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800188e:	2201      	movs	r2, #1
 8001890:	4932      	ldr	r1, [pc, #200]	@ (800195c <Analog_Judge+0x404>)
 8001892:	4831      	ldr	r0, [pc, #196]	@ (8001958 <Analog_Judge+0x400>)
 8001894:	f00b f9c6 	bl	800cc24 <HAL_UART_Transmit>

	sprintf(str , "bands' gap: %d." , bands_gap);
 8001898:	4b2d      	ldr	r3, [pc, #180]	@ (8001950 <Analog_Judge+0x3f8>)
 800189a:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 800189e:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80018a2:	443b      	add	r3, r7
 80018a4:	f24c 024c 	movw	r2, #49228	@ 0xc04c
 80018a8:	443a      	add	r2, r7
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	492c      	ldr	r1, [pc, #176]	@ (8001960 <Analog_Judge+0x408>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00d fcac 	bl	800f20c <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 15   ,HAL_MAX_DELAY);
 80018b4:	4926      	ldr	r1, [pc, #152]	@ (8001950 <Analog_Judge+0x3f8>)
 80018b6:	f24c 0378 	movw	r3, #49272	@ 0xc078
 80018ba:	440b      	add	r3, r1
 80018bc:	19d9      	adds	r1, r3, r7
 80018be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018c2:	220f      	movs	r2, #15
 80018c4:	4824      	ldr	r0, [pc, #144]	@ (8001958 <Analog_Judge+0x400>)
 80018c6:	f00b f9ad 	bl	800cc24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018ce:	2201      	movs	r2, #1
 80018d0:	4922      	ldr	r1, [pc, #136]	@ (800195c <Analog_Judge+0x404>)
 80018d2:	4821      	ldr	r0, [pc, #132]	@ (8001958 <Analog_Judge+0x400>)
 80018d4:	f00b f9a6 	bl	800cc24 <HAL_UART_Transmit>

	sprintf(str , "frequency: %.2lf kHz." , (double)bands_gap / 40.6);
 80018d8:	f24c 034c 	movw	r3, #49228	@ 0xc04c
 80018dc:	443b      	add	r3, r7
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018e8:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8001948 <Analog_Judge+0x3f0>
 80018ec:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80018f0:	4817      	ldr	r0, [pc, #92]	@ (8001950 <Analog_Judge+0x3f8>)
 80018f2:	f24c 0378 	movw	r3, #49272	@ 0xc078
 80018f6:	4403      	add	r3, r0
 80018f8:	19d8      	adds	r0, r3, r7
 80018fa:	ec53 2b15 	vmov	r2, r3, d5
 80018fe:	4919      	ldr	r1, [pc, #100]	@ (8001964 <Analog_Judge+0x40c>)
 8001900:	f00d fc84 	bl	800f20c <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 8001904:	4912      	ldr	r1, [pc, #72]	@ (8001950 <Analog_Judge+0x3f8>)
 8001906:	f24c 0378 	movw	r3, #49272	@ 0xc078
 800190a:	440b      	add	r3, r1
 800190c:	19d9      	adds	r1, r3, r7
 800190e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001912:	2214      	movs	r2, #20
 8001914:	4810      	ldr	r0, [pc, #64]	@ (8001958 <Analog_Judge+0x400>)
 8001916:	f00b f985 	bl	800cc24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 800191a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800191e:	2201      	movs	r2, #1
 8001920:	490e      	ldr	r1, [pc, #56]	@ (800195c <Analog_Judge+0x404>)
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <Analog_Judge+0x400>)
 8001924:	f00b f97e 	bl	800cc24 <HAL_UART_Transmit>

	if (n_bands == 0)
 8001928:	f24c 0368 	movw	r3, #49256	@ 0xc068
 800192c:	443b      	add	r3, r7
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d119      	bne.n	8001968 <Analog_Judge+0x410>
	{
		return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001938:	e080      	b.n	8001a3c <Analog_Judge+0x4e4>
 800193a:	bf00      	nop
 800193c:	f3af 8000 	nop.w
 8001940:	9999999a 	.word	0x9999999a
 8001944:	3fb99999 	.word	0x3fb99999
 8001948:	cccccccd 	.word	0xcccccccd
 800194c:	40444ccc 	.word	0x40444ccc
 8001950:	ffff3f94 	.word	0xffff3f94
 8001954:	080145b8 	.word	0x080145b8
 8001958:	24015178 	.word	0x24015178
 800195c:	080145d8 	.word	0x080145d8
 8001960:	080145dc 	.word	0x080145dc
 8001964:	080145ec 	.word	0x080145ec
	}
	else if (n_bands == 1)
 8001968:	f24c 0368 	movw	r3, #49256	@ 0xc068
 800196c:	443b      	add	r3, r7
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <Analog_Judge+0x420>
    {
        return 0;
 8001974:	2300      	movs	r3, #0
 8001976:	e061      	b.n	8001a3c <Analog_Judge+0x4e4>
    }
    else if (n_bands <= 3)
 8001978:	f24c 0368 	movw	r3, #49256	@ 0xc068
 800197c:	443b      	add	r3, r7
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b03      	cmp	r3, #3
 8001982:	dc46      	bgt.n	8001a12 <Analog_Judge+0x4ba>
    {
    	sprintf(str , "degree of moderation: %.2lf" ,(bands_sum - bands[n_bands / 2]) / bands[n_bands / 2]);
 8001984:	f24c 0368 	movw	r3, #49256	@ 0xc068
 8001988:	443b      	add	r3, r7
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	da00      	bge.n	8001992 <Analog_Judge+0x43a>
 8001990:	3301      	adds	r3, #1
 8001992:	105b      	asrs	r3, r3, #1
 8001994:	f244 0278 	movw	r2, #16504	@ 0x4078
 8001998:	443a      	add	r2, r7
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	3b38      	subs	r3, #56	@ 0x38
 80019a0:	ed93 7b00 	vldr	d7, [r3]
 80019a4:	f24c 0370 	movw	r3, #49264	@ 0xc070
 80019a8:	443b      	add	r3, r7
 80019aa:	ed93 6b00 	vldr	d6, [r3]
 80019ae:	ee36 6b47 	vsub.f64	d6, d6, d7
 80019b2:	f24c 0368 	movw	r3, #49256	@ 0xc068
 80019b6:	443b      	add	r3, r7
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da00      	bge.n	80019c0 <Analog_Judge+0x468>
 80019be:	3301      	adds	r3, #1
 80019c0:	105b      	asrs	r3, r3, #1
 80019c2:	f244 0278 	movw	r2, #16504	@ 0x4078
 80019c6:	443a      	add	r2, r7
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	3b38      	subs	r3, #56	@ 0x38
 80019ce:	ed93 7b00 	vldr	d7, [r3]
 80019d2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80019d6:	481c      	ldr	r0, [pc, #112]	@ (8001a48 <Analog_Judge+0x4f0>)
 80019d8:	f24c 0378 	movw	r3, #49272	@ 0xc078
 80019dc:	4403      	add	r3, r0
 80019de:	19d8      	adds	r0, r3, r7
 80019e0:	ec53 2b15 	vmov	r2, r3, d5
 80019e4:	4919      	ldr	r1, [pc, #100]	@ (8001a4c <Analog_Judge+0x4f4>)
 80019e6:	f00d fc11 	bl	800f20c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 26   ,HAL_MAX_DELAY);
 80019ea:	4917      	ldr	r1, [pc, #92]	@ (8001a48 <Analog_Judge+0x4f0>)
 80019ec:	f24c 0378 	movw	r3, #49272	@ 0xc078
 80019f0:	440b      	add	r3, r1
 80019f2:	19d9      	adds	r1, r3, r7
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019f8:	221a      	movs	r2, #26
 80019fa:	4815      	ldr	r0, [pc, #84]	@ (8001a50 <Analog_Judge+0x4f8>)
 80019fc:	f00b f912 	bl	800cc24 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a04:	2201      	movs	r2, #1
 8001a06:	4913      	ldr	r1, [pc, #76]	@ (8001a54 <Analog_Judge+0x4fc>)
 8001a08:	4811      	ldr	r0, [pc, #68]	@ (8001a50 <Analog_Judge+0x4f8>)
 8001a0a:	f00b f90b 	bl	800cc24 <HAL_UART_Transmit>
        return 1; 
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e014      	b.n	8001a3c <Analog_Judge+0x4e4>
    } 
    else if (n_bands > 3 && n_bands < 20)
 8001a12:	f24c 0368 	movw	r3, #49256	@ 0xc068
 8001a16:	443b      	add	r3, r7
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	dd07      	ble.n	8001a2e <Analog_Judge+0x4d6>
 8001a1e:	f24c 0368 	movw	r3, #49256	@ 0xc068
 8001a22:	443b      	add	r3, r7
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b13      	cmp	r3, #19
 8001a28:	dc01      	bgt.n	8001a2e <Analog_Judge+0x4d6>
    {
        return 2; 
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e006      	b.n	8001a3c <Analog_Judge+0x4e4>
    }
    else
    {
        return Digital_Judge(x);
 8001a2e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001a32:	f853 0c74 	ldr.w	r0, [r3, #-116]
 8001a36:	f000 f80f 	bl	8001a58 <Digital_Judge>
 8001a3a:	4603      	mov	r3, r0
    }
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f507 4740 	add.w	r7, r7, #49152	@ 0xc000
 8001a42:	3778      	adds	r7, #120	@ 0x78
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	ffff3f94 	.word	0xffff3f94
 8001a4c:	08014604 	.word	0x08014604
 8001a50:	24015178 	.word	0x24015178
 8001a54:	080145d8 	.word	0x080145d8

08001a58 <Digital_Judge>:
    

int Digital_Judge(double x[])
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b09e      	sub	sp, #120	@ 0x78
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    double main_band = 0;
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    int main_band_idx = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    char str[50];

    for (int i = 50; i < FO_LENGTH / 2 - 50; i++)
 8001a70:	2332      	movs	r3, #50	@ 0x32
 8001a72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a74:	e019      	b.n	8001aaa <Digital_Judge+0x52>
    {
        if (x[i] > main_band)
 8001a76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	ed93 7b00 	vldr	d7, [r3]
 8001a82:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8001a86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	d509      	bpl.n	8001aa4 <Digital_Judge+0x4c>
        {
            main_band = x[i];
 8001a90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
            main_band_idx = i;
 8001aa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    for (int i = 50; i < FO_LENGTH / 2 - 50; i++)
 8001aa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001aaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aac:	f640 72cd 	movw	r2, #4045	@ 0xfcd
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	dde0      	ble.n	8001a76 <Digital_Judge+0x1e>
        }
    }

    double threshold = main_band * 0.4;
 8001ab4:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 8001ab8:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8001bc0 <Digital_Judge+0x168>
 8001abc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ac0:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    int significant_bands = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	667b      	str	r3, [r7, #100]	@ 0x64
    double band_sum = 0;
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    for (int i = main_band_idx - 100; i <= main_band_idx + 100; i++)
 8001ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ad6:	3b64      	subs	r3, #100	@ 0x64
 8001ad8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ada:	e049      	b.n	8001b70 <Digital_Judge+0x118>
    {
        if (i >= 100 && i < FO_LENGTH / 2 && x[i] > threshold)
 8001adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ade:	2b63      	cmp	r3, #99	@ 0x63
 8001ae0:	dd43      	ble.n	8001b6a <Digital_Judge+0x112>
 8001ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ae8:	da3f      	bge.n	8001b6a <Digital_Judge+0x112>
 8001aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	ed93 7b00 	vldr	d7, [r3]
 8001af6:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 8001afa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	d532      	bpl.n	8001b6a <Digital_Judge+0x112>
        {
            int flag = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	653b      	str	r3, [r7, #80]	@ 0x50
            for (int j = i - 5; j < i + 5; j++)
 8001b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0a:	3b05      	subs	r3, #5
 8001b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b0e:	e015      	b.n	8001b3c <Digital_Judge+0xe4>
            {
                if (x[j] > x[i])
 8001b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	ed93 6b00 	vldr	d6, [r3]
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	ed93 7b00 	vldr	d7, [r3]
 8001b28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	dd01      	ble.n	8001b36 <Digital_Judge+0xde>
                    flag = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	653b      	str	r3, [r7, #80]	@ 0x50
            for (int j = i - 5; j < i + 5; j++)
 8001b36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b38:	3301      	adds	r3, #1
 8001b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3e:	3304      	adds	r3, #4
 8001b40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dde4      	ble.n	8001b10 <Digital_Judge+0xb8>
            }
            if (flag == 1)
 8001b46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d10e      	bne.n	8001b6a <Digital_Judge+0x112>
            {
                significant_bands++;
 8001b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b4e:	3301      	adds	r3, #1
 8001b50:	667b      	str	r3, [r7, #100]	@ 0x64
                band_sum += x[i];
 8001b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	ed93 7b00 	vldr	d7, [r3]
 8001b5e:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8001b62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b66:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (int i = main_band_idx - 100; i <= main_band_idx + 100; i++)
 8001b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b72:	3364      	adds	r3, #100	@ 0x64
 8001b74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b76:	429a      	cmp	r2, r3
 8001b78:	ddb0      	ble.n	8001adc <Digital_Judge+0x84>
            }
        }
    }
	sprintf(str , "number of significant bands: %d." , significant_bands);
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001b80:	4911      	ldr	r1, [pc, #68]	@ (8001bc8 <Digital_Judge+0x170>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f00d fb42 	bl	800f20c <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 31   ,HAL_MAX_DELAY);
 8001b88:	f107 010c 	add.w	r1, r7, #12
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b90:	221f      	movs	r2, #31
 8001b92:	480e      	ldr	r0, [pc, #56]	@ (8001bcc <Digital_Judge+0x174>)
 8001b94:	f00b f846 	bl	800cc24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	490c      	ldr	r1, [pc, #48]	@ (8001bd0 <Digital_Judge+0x178>)
 8001ba0:	480a      	ldr	r0, [pc, #40]	@ (8001bcc <Digital_Judge+0x174>)
 8001ba2:	f00b f83f 	bl	800cc24 <HAL_UART_Transmit>

    if (significant_bands < 2)
 8001ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	dc01      	bgt.n	8001bb0 <Digital_Judge+0x158>
    {
        return 3;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <Digital_Judge+0x15a>
    }
    else
    {
        return 4;
 8001bb0:	2304      	movs	r3, #4
    }
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3778      	adds	r7, #120	@ 0x78
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	f3af 8000 	nop.w
 8001bc0:	9999999a 	.word	0x9999999a
 8001bc4:	3fd99999 	.word	0x3fd99999
 8001bc8:	08014620 	.word	0x08014620
 8001bcc:	24015178 	.word	0x24015178
 8001bd0:	080145d8 	.word	0x080145d8

08001bd4 <Judger>:

 


void Judger(int value)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b0b4      	sub	sp, #208	@ 0xd0
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	char str[200];

	if (value == -1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001be2:	d10e      	bne.n	8001c02 <Judger+0x2e>
	{
    	sprintf(str , "No signal.\n");
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	493c      	ldr	r1, [pc, #240]	@ (8001cdc <Judger+0x108>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f00d fb0e 	bl	800f20c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 8001bf0:	f107 0108 	add.w	r1, r7, #8
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	4839      	ldr	r0, [pc, #228]	@ (8001ce0 <Judger+0x10c>)
 8001bfc:	f00b f812 	bl	800cc24 <HAL_UART_Transmit>
    else
    {
    	sprintf(str , "Unknown signal.\n");
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
	}
}
 8001c00:	e067      	b.n	8001cd2 <Judger+0xfe>
	else if (value == 0)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10e      	bne.n	8001c26 <Judger+0x52>
    	sprintf(str , "Sin signal.\n");
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	4935      	ldr	r1, [pc, #212]	@ (8001ce4 <Judger+0x110>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f00d fafc 	bl	800f20c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 8001c14:	f107 0108 	add.w	r1, r7, #8
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c1c:	220c      	movs	r2, #12
 8001c1e:	4830      	ldr	r0, [pc, #192]	@ (8001ce0 <Judger+0x10c>)
 8001c20:	f00b f800 	bl	800cc24 <HAL_UART_Transmit>
}
 8001c24:	e055      	b.n	8001cd2 <Judger+0xfe>
    else if (value == 1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d10e      	bne.n	8001c4a <Judger+0x76>
    	sprintf(str , "AM signal.\n");
 8001c2c:	f107 0308 	add.w	r3, r7, #8
 8001c30:	492d      	ldr	r1, [pc, #180]	@ (8001ce8 <Judger+0x114>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f00d faea 	bl	800f20c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 8001c38:	f107 0108 	add.w	r1, r7, #8
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c40:	220b      	movs	r2, #11
 8001c42:	4827      	ldr	r0, [pc, #156]	@ (8001ce0 <Judger+0x10c>)
 8001c44:	f00a ffee 	bl	800cc24 <HAL_UART_Transmit>
}
 8001c48:	e043      	b.n	8001cd2 <Judger+0xfe>
    else if (value == 2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d10e      	bne.n	8001c6e <Judger+0x9a>
    	sprintf(str , "FM signal.\n");
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	4925      	ldr	r1, [pc, #148]	@ (8001cec <Judger+0x118>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	f00d fad8 	bl	800f20c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 8001c5c:	f107 0108 	add.w	r1, r7, #8
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c64:	220b      	movs	r2, #11
 8001c66:	481e      	ldr	r0, [pc, #120]	@ (8001ce0 <Judger+0x10c>)
 8001c68:	f00a ffdc 	bl	800cc24 <HAL_UART_Transmit>
}
 8001c6c:	e031      	b.n	8001cd2 <Judger+0xfe>
    else if (value == 3)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d10e      	bne.n	8001c92 <Judger+0xbe>
    	sprintf(str , "ASK signal.\n");
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	491d      	ldr	r1, [pc, #116]	@ (8001cf0 <Judger+0x11c>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00d fac6 	bl	800f20c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001c80:	f107 0108 	add.w	r1, r7, #8
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c88:	221c      	movs	r2, #28
 8001c8a:	4815      	ldr	r0, [pc, #84]	@ (8001ce0 <Judger+0x10c>)
 8001c8c:	f00a ffca 	bl	800cc24 <HAL_UART_Transmit>
}
 8001c90:	e01f      	b.n	8001cd2 <Judger+0xfe>
    else if (value == 4)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d10e      	bne.n	8001cb6 <Judger+0xe2>
    	sprintf(str , "FSK signal.\n");
 8001c98:	f107 0308 	add.w	r3, r7, #8
 8001c9c:	4915      	ldr	r1, [pc, #84]	@ (8001cf4 <Judger+0x120>)
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f00d fab4 	bl	800f20c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001ca4:	f107 0108 	add.w	r1, r7, #8
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cac:	221c      	movs	r2, #28
 8001cae:	480c      	ldr	r0, [pc, #48]	@ (8001ce0 <Judger+0x10c>)
 8001cb0:	f00a ffb8 	bl	800cc24 <HAL_UART_Transmit>
}
 8001cb4:	e00d      	b.n	8001cd2 <Judger+0xfe>
    	sprintf(str , "Unknown signal.\n");
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	490f      	ldr	r1, [pc, #60]	@ (8001cf8 <Judger+0x124>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f00d faa5 	bl	800f20c <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001cc2:	f107 0108 	add.w	r1, r7, #8
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cca:	221c      	movs	r2, #28
 8001ccc:	4804      	ldr	r0, [pc, #16]	@ (8001ce0 <Judger+0x10c>)
 8001cce:	f00a ffa9 	bl	800cc24 <HAL_UART_Transmit>
}
 8001cd2:	bf00      	nop
 8001cd4:	37d0      	adds	r7, #208	@ 0xd0
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	08014644 	.word	0x08014644
 8001ce0:	24015178 	.word	0x24015178
 8001ce4:	08014650 	.word	0x08014650
 8001ce8:	08014660 	.word	0x08014660
 8001cec:	0801466c 	.word	0x0801466c
 8001cf0:	08014678 	.word	0x08014678
 8001cf4:	08014688 	.word	0x08014688
 8001cf8:	08014698 	.word	0x08014698

08001cfc <adc_init>:

double v[FO_LENGTH];
double demodulated_signal[200];

void adc_init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d04:	220b      	movs	r2, #11
 8001d06:	4920      	ldr	r1, [pc, #128]	@ (8001d88 <adc_init+0x8c>)
 8001d08:	4820      	ldr	r0, [pc, #128]	@ (8001d8c <adc_init+0x90>)
 8001d0a:	f00a ff8b 	bl	800cc24 <HAL_UART_Transmit>
	MX_ADC1_Init();
 8001d0e:	f7ff f8b7 	bl	8000e80 <MX_ADC1_Init>
	HAL_Delay(1);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f000 ff86 	bl	8002c24 <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8001d18:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	481c      	ldr	r0, [pc, #112]	@ (8001d90 <adc_init+0x94>)
 8001d20:	f002 fcd2 	bl	80046c8 <HAL_ADCEx_Calibration_Start>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <adc_init+0x40>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d2e:	222f      	movs	r2, #47	@ 0x2f
 8001d30:	4918      	ldr	r1, [pc, #96]	@ (8001d94 <adc_init+0x98>)
 8001d32:	4816      	ldr	r0, [pc, #88]	@ (8001d8c <adc_init+0x90>)
 8001d34:	f00a ff76 	bl	800cc24 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001d38:	f000 fad6 	bl	80022e8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH) != HAL_OK)
 8001d3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d40:	4915      	ldr	r1, [pc, #84]	@ (8001d98 <adc_init+0x9c>)
 8001d42:	4813      	ldr	r0, [pc, #76]	@ (8001d90 <adc_init+0x94>)
 8001d44:	f001 fcf8 	bl	8003738 <HAL_ADC_Start_DMA>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d008      	beq.n	8001d60 <adc_init+0x64>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d52:	2225      	movs	r2, #37	@ 0x25
 8001d54:	4911      	ldr	r1, [pc, #68]	@ (8001d9c <adc_init+0xa0>)
 8001d56:	480d      	ldr	r0, [pc, #52]	@ (8001d8c <adc_init+0x90>)
 8001d58:	f00a ff64 	bl	800cc24 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001d5c:	f000 fac4 	bl	80022e8 <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8001d60:	480f      	ldr	r0, [pc, #60]	@ (8001da0 <adc_init+0xa4>)
 8001d62:	f00a fbb9 	bl	800c4d8 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 8001d66:	bf00      	nop
 8001d68:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <adc_init+0xa8>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0fa      	beq.n	8001d68 <adc_init+0x6c>
	AdcConvEnd = 0;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <adc_init+0xa8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 8001d78:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <adc_init+0x94>)
 8001d7a:	f001 fb5d 	bl	8003438 <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 8001d7e:	4808      	ldr	r0, [pc, #32]	@ (8001da0 <adc_init+0xa4>)
 8001d80:	f00a fc1a 	bl	800c5b8 <HAL_TIM_Base_Stop>
}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	080146b0 	.word	0x080146b0
 8001d8c:	24015178 	.word	0x24015178
 8001d90:	2400488c 	.word	0x2400488c
 8001d94:	080146bc 	.word	0x080146bc
 8001d98:	240006e0 	.word	0x240006e0
 8001d9c:	080146ec 	.word	0x080146ec
 8001da0:	2401512c 	.word	0x2401512c
 8001da4:	24004a48 	.word	0x24004a48

08001da8 <ADC_Get>:


void ADC_Get(double arr[])
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	adc_init();
 8001db0:	f7ff ffa4 	bl	8001cfc <adc_init>
	double voltage;
//	char str[50];

	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 8001db4:	2300      	movs	r3, #0
 8001db6:	82fb      	strh	r3, [r7, #22]
 8001db8:	e020      	b.n	8001dfc <ADC_Get+0x54>
		voltage = ((double)adc1_data[temp]*3.3)/65535 *3;
 8001dba:	8afb      	ldrh	r3, [r7, #22]
 8001dbc:	4a18      	ldr	r2, [pc, #96]	@ (8001e20 <ADC_Get+0x78>)
 8001dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001dca:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8001e10 <ADC_Get+0x68>
 8001dce:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001dd2:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001e18 <ADC_Get+0x70>
 8001dd6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dda:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8001dde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001de2:	ed87 7b02 	vstr	d7, [r7, #8]

		arr[temp] = voltage;
 8001de6:	8afb      	ldrh	r3, [r7, #22]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	18d1      	adds	r1, r2, r3
 8001dee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001df2:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 8001df6:	8afb      	ldrh	r3, [r7, #22]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	82fb      	strh	r3, [r7, #22]
 8001dfc:	8afb      	ldrh	r3, [r7, #22]
 8001dfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e02:	d3da      	bcc.n	8001dba <ADC_Get+0x12>
//		sprintf(str , "%.5f" , v[temp]);
//		HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//		HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
	}
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	66666666 	.word	0x66666666
 8001e14:	400a6666 	.word	0x400a6666
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40efffe0 	.word	0x40efffe0
 8001e20:	240006e0 	.word	0x240006e0
 8001e24:	00000000 	.word	0x00000000

08001e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e28:	b5b0      	push	{r4, r5, r7, lr}
 8001e2a:	b09c      	sub	sp, #112	@ 0x70
 8001e2c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001e2e:	f000 f9fd 	bl	800222c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e32:	4b91      	ldr	r3, [pc, #580]	@ (8002078 <main+0x250>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d11b      	bne.n	8001e76 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3e:	f3bf 8f4f 	dsb	sy
}
 8001e42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e44:	f3bf 8f6f 	isb	sy
}
 8001e48:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	@ (8002078 <main+0x250>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e52:	f3bf 8f4f 	dsb	sy
}
 8001e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e58:	f3bf 8f6f 	isb	sy
}
 8001e5c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e5e:	4b86      	ldr	r3, [pc, #536]	@ (8002078 <main+0x250>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	4a85      	ldr	r2, [pc, #532]	@ (8002078 <main+0x250>)
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e68:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e6a:	f3bf 8f4f 	dsb	sy
}
 8001e6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e70:	f3bf 8f6f 	isb	sy
}
 8001e74:	e000      	b.n	8001e78 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e76:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001e78:	4b7f      	ldr	r3, [pc, #508]	@ (8002078 <main+0x250>)
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d138      	bne.n	8001ef6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001e84:	4b7c      	ldr	r3, [pc, #496]	@ (8002078 <main+0x250>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001e8c:	f3bf 8f4f 	dsb	sy
}
 8001e90:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001e92:	4b79      	ldr	r3, [pc, #484]	@ (8002078 <main+0x250>)
 8001e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e98:	657b      	str	r3, [r7, #84]	@ 0x54

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9c:	0b5b      	lsrs	r3, r3, #13
 8001e9e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ea2:	653b      	str	r3, [r7, #80]	@ 0x50
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea6:	08db      	lsrs	r3, r3, #3
 8001ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001eb6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001eba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ebc:	496e      	ldr	r1, [pc, #440]	@ (8002078 <main+0x250>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001ec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ec6:	1e5a      	subs	r2, r3, #1
 8001ec8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ef      	bne.n	8001eae <main+0x86>
    } while(sets-- != 0U);
 8001ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ed0:	1e5a      	subs	r2, r3, #1
 8001ed2:	653a      	str	r2, [r7, #80]	@ 0x50
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1e5      	bne.n	8001ea4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed8:	f3bf 8f4f 	dsb	sy
}
 8001edc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001ede:	4b66      	ldr	r3, [pc, #408]	@ (8002078 <main+0x250>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4a65      	ldr	r2, [pc, #404]	@ (8002078 <main+0x250>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eea:	f3bf 8f4f 	dsb	sy
}
 8001eee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef0:	f3bf 8f6f 	isb	sy
}
 8001ef4:	e000      	b.n	8001ef8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001ef6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef8:	f000 fe02 	bl	8002b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efc:	f000 f8d0 	bl	80020a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f00:	f7ff f9fe 	bl	8001300 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f04:	f7ff f9d4 	bl	80012b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001f08:	f7ff fa7c 	bl	8001404 <MX_I2C1_Init>
  MX_TIM15_Init();
 8001f0c:	f000 fc6e 	bl	80027ec <MX_TIM15_Init>
  MX_DAC1_Init();
 8001f10:	f7ff f922 	bl	8001158 <MX_DAC1_Init>
  MX_TIM7_Init();
 8001f14:	f000 fc34 	bl	8002780 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8001f18:	f000 fd0a 	bl	8002930 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001f1c:	f7fe ffb0 	bl	8000e80 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001f20:	f000 fbf8 	bl	8002714 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  char str[50];
  ADC_Get(v);
 8001f24:	4855      	ldr	r0, [pc, #340]	@ (800207c <main+0x254>)
 8001f26:	f7ff ff3f 	bl	8001da8 <ADC_Get>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f2e:	e01c      	b.n	8001f6a <main+0x142>
  {
	  sprintf(str , "%.5f" , v[i]);
 8001f30:	4a52      	ldr	r2, [pc, #328]	@ (800207c <main+0x254>)
 8001f32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	f107 0018 	add.w	r0, r7, #24
 8001f40:	494f      	ldr	r1, [pc, #316]	@ (8002080 <main+0x258>)
 8001f42:	f00d f963 	bl	800f20c <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 8001f46:	f107 0118 	add.w	r1, r7, #24
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f4e:	2207      	movs	r2, #7
 8001f50:	484c      	ldr	r0, [pc, #304]	@ (8002084 <main+0x25c>)
 8001f52:	f00a fe67 	bl	800cc24 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	494a      	ldr	r1, [pc, #296]	@ (8002088 <main+0x260>)
 8001f5e:	4849      	ldr	r0, [pc, #292]	@ (8002084 <main+0x25c>)
 8001f60:	f00a fe60 	bl	800cc24 <HAL_UART_Transmit>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 8001f64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f66:	3301      	adds	r3, #1
 8001f68:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f70:	dbde      	blt.n	8001f30 <main+0x108>
  }
  FFT_Mag_sqrt(FO_LENGTH, v);
 8001f72:	4942      	ldr	r1, [pc, #264]	@ (800207c <main+0x254>)
 8001f74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f78:	f7fe ff4e 	bl	8000e18 <FFT_Mag_sqrt>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f80:	e01c      	b.n	8001fbc <main+0x194>
  {
	  sprintf(str , "%.5f" , v[i]);
 8001f82:	4a3e      	ldr	r2, [pc, #248]	@ (800207c <main+0x254>)
 8001f84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f107 0018 	add.w	r0, r7, #24
 8001f92:	493b      	ldr	r1, [pc, #236]	@ (8002080 <main+0x258>)
 8001f94:	f00d f93a 	bl	800f20c <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 8001f98:	f107 0118 	add.w	r1, r7, #24
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	4838      	ldr	r0, [pc, #224]	@ (8002084 <main+0x25c>)
 8001fa4:	f00a fe3e 	bl	800cc24 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001fa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fac:	2201      	movs	r2, #1
 8001fae:	4936      	ldr	r1, [pc, #216]	@ (8002088 <main+0x260>)
 8001fb0:	4834      	ldr	r0, [pc, #208]	@ (8002084 <main+0x25c>)
 8001fb2:	f00a fe37 	bl	800cc24 <HAL_UART_Transmit>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 8001fb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fb8:	3301      	adds	r3, #1
 8001fba:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fc2:	dbde      	blt.n	8001f82 <main+0x15a>
  }
  int value = Analog_Judge(v);
 8001fc4:	482d      	ldr	r0, [pc, #180]	@ (800207c <main+0x254>)
 8001fc6:	f7ff fac7 	bl	8001558 <Analog_Judge>
 8001fca:	65b8      	str	r0, [r7, #88]	@ 0x58
  Judger(value);
 8001fcc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001fce:	f7ff fe01 	bl	8001bd4 <Judger>

  wave_arg arg = {0.5, 1000.0, 0.0};
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800208c <main+0x264>)
 8001fd4:	463c      	mov	r4, r7
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fe0:	e884 0003 	stmia.w	r4, {r0, r1}



  SineWave_Generator(demodulated_signal, 200, 1, arg);
 8001fe4:	ed97 5b00 	vldr	d5, [r7]
 8001fe8:	ed97 6b02 	vldr	d6, [r7, #8]
 8001fec:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ff0:	eeb0 1b45 	vmov.f64	d1, d5
 8001ff4:	eeb0 2b46 	vmov.f64	d2, d6
 8001ff8:	eeb0 3b47 	vmov.f64	d3, d7
 8001ffc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8002000:	21c8      	movs	r1, #200	@ 0xc8
 8002002:	4823      	ldr	r0, [pc, #140]	@ (8002090 <main+0x268>)
 8002004:	f000 f978 	bl	80022f8 <SineWave_Generator>
  for (int i = 0 ; i < 200 ; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800200c:	e019      	b.n	8002042 <main+0x21a>
  {
	  Dat[i] = (uint16_t)(demodulated_signal[i] * 4095 + 2048);
 800200e:	4a20      	ldr	r2, [pc, #128]	@ (8002090 <main+0x268>)
 8002010:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	ed93 7b00 	vldr	d7, [r3]
 800201a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002068 <main+0x240>
 800201e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002022:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8002070 <main+0x248>
 8002026:	ee37 7b06 	vadd.f64	d7, d7, d6
 800202a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800202e:	ee17 3a90 	vmov	r3, s15
 8002032:	b299      	uxth	r1, r3
 8002034:	4a17      	ldr	r2, [pc, #92]	@ (8002094 <main+0x26c>)
 8002036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002038:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0 ; i < 200 ; i++)
 800203c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800203e:	3301      	adds	r3, #1
 8002040:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002044:	2bc7      	cmp	r3, #199	@ 0xc7
 8002046:	dde2      	ble.n	800200e <main+0x1e6>
  }
  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2,(uint32_t *)Dat,200,DAC_ALIGN_12B_R);
 8002048:	2300      	movs	r3, #0
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	23c8      	movs	r3, #200	@ 0xc8
 800204e:	4a11      	ldr	r2, [pc, #68]	@ (8002094 <main+0x26c>)
 8002050:	2110      	movs	r1, #16
 8002052:	4811      	ldr	r0, [pc, #68]	@ (8002098 <main+0x270>)
 8002054:	f002 fe28 	bl	8004ca8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8002058:	4810      	ldr	r0, [pc, #64]	@ (800209c <main+0x274>)
 800205a:	f00a fa3d 	bl	800c4d8 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800205e:	bf00      	nop
 8002060:	e7fd      	b.n	800205e <main+0x236>
 8002062:	bf00      	nop
 8002064:	f3af 8000 	nop.w
 8002068:	00000000 	.word	0x00000000
 800206c:	40affe00 	.word	0x40affe00
 8002070:	00000000 	.word	0x00000000
 8002074:	40a00000 	.word	0x40a00000
 8002078:	e000ed00 	.word	0xe000ed00
 800207c:	24004a50 	.word	0x24004a50
 8002080:	08014714 	.word	0x08014714
 8002084:	24015178 	.word	0x24015178
 8002088:	0801471c 	.word	0x0801471c
 800208c:	08014720 	.word	0x08014720
 8002090:	24014a50 	.word	0x24014a50
 8002094:	240046e0 	.word	0x240046e0
 8002098:	24004968 	.word	0x24004968
 800209c:	24015094 	.word	0x24015094

080020a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b09e      	sub	sp, #120	@ 0x78
 80020a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020aa:	224c      	movs	r2, #76	@ 0x4c
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f00d fbb4 	bl	800f81c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	2220      	movs	r2, #32
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f00d fbad 	bl	800f81c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80020c2:	2002      	movs	r0, #2
 80020c4:	f006 fc90 	bl	80089e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002200 <SystemClock_Config+0x160>)
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002200 <SystemClock_Config+0x160>)
 80020d2:	f023 0301 	bic.w	r3, r3, #1
 80020d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80020d8:	4b49      	ldr	r3, [pc, #292]	@ (8002200 <SystemClock_Config+0x160>)
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b48      	ldr	r3, [pc, #288]	@ (8002204 <SystemClock_Config+0x164>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	4a47      	ldr	r2, [pc, #284]	@ (8002204 <SystemClock_Config+0x164>)
 80020e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020ec:	6193      	str	r3, [r2, #24]
 80020ee:	4b45      	ldr	r3, [pc, #276]	@ (8002204 <SystemClock_Config+0x164>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80020fa:	bf00      	nop
 80020fc:	4b41      	ldr	r3, [pc, #260]	@ (8002204 <SystemClock_Config+0x164>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002108:	d1f8      	bne.n	80020fc <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	4b3f      	ldr	r3, [pc, #252]	@ (8002208 <SystemClock_Config+0x168>)
 800210c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002110:	4a3d      	ldr	r2, [pc, #244]	@ (8002208 <SystemClock_Config+0x168>)
 8002112:	f043 0302 	orr.w	r3, r3, #2
 8002116:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800211a:	4b3b      	ldr	r3, [pc, #236]	@ (8002208 <SystemClock_Config+0x168>)
 800211c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002128:	2300      	movs	r3, #0
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	4b35      	ldr	r3, [pc, #212]	@ (8002204 <SystemClock_Config+0x164>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4a34      	ldr	r2, [pc, #208]	@ (8002204 <SystemClock_Config+0x164>)
 8002132:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002136:	6193      	str	r3, [r2, #24]
 8002138:	4b32      	ldr	r3, [pc, #200]	@ (8002204 <SystemClock_Config+0x164>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	4b2f      	ldr	r3, [pc, #188]	@ (8002200 <SystemClock_Config+0x160>)
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	4a2e      	ldr	r2, [pc, #184]	@ (8002200 <SystemClock_Config+0x160>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800214e:	4b2c      	ldr	r3, [pc, #176]	@ (8002200 <SystemClock_Config+0x160>)
 8002150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800215a:	bf00      	nop
 800215c:	4b29      	ldr	r3, [pc, #164]	@ (8002204 <SystemClock_Config+0x164>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002168:	d1f8      	bne.n	800215c <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800216a:	4b27      	ldr	r3, [pc, #156]	@ (8002208 <SystemClock_Config+0x168>)
 800216c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	4a25      	ldr	r2, [pc, #148]	@ (8002208 <SystemClock_Config+0x168>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800217a:	2301      	movs	r3, #1
 800217c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800217e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002182:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002184:	2302      	movs	r3, #2
 8002186:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002188:	2302      	movs	r3, #2
 800218a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800218c:	2305      	movs	r3, #5
 800218e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002190:	23c0      	movs	r3, #192	@ 0xc0
 8002192:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002194:	2302      	movs	r3, #2
 8002196:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002198:	2302      	movs	r3, #2
 800219a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800219c:	2302      	movs	r3, #2
 800219e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80021a0:	2308      	movs	r3, #8
 80021a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021b0:	4618      	mov	r0, r3
 80021b2:	f006 fc53 	bl	8008a5c <HAL_RCC_OscConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80021bc:	f000 f894 	bl	80022e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c0:	233f      	movs	r3, #63	@ 0x3f
 80021c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c4:	2303      	movs	r3, #3
 80021c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80021cc:	2308      	movs	r3, #8
 80021ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80021d0:	2340      	movs	r3, #64	@ 0x40
 80021d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80021d4:	2340      	movs	r3, #64	@ 0x40
 80021d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80021d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80021de:	2340      	movs	r3, #64	@ 0x40
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	2104      	movs	r1, #4
 80021e8:	4618      	mov	r0, r3
 80021ea:	f007 f893 	bl	8009314 <HAL_RCC_ClockConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 80021f4:	f000 f878 	bl	80022e8 <Error_Handler>
  }
}
 80021f8:	bf00      	nop
 80021fa:	3778      	adds	r7, #120	@ 0x78
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	58000400 	.word	0x58000400
 8002204:	58024800 	.word	0x58024800
 8002208:	58024400 	.word	0x58024400

0800220c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 8002214:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	24004a48 	.word	0x24004a48

0800222c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002232:	463b      	mov	r3, r7
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800223e:	f002 fc95 	bl	8004b6c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002242:	2301      	movs	r3, #1
 8002244:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002246:	2300      	movs	r3, #0
 8002248:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800224a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800224e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002250:	2312      	movs	r3, #18
 8002252:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002254:	2300      	movs	r3, #0
 8002256:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002258:	2301      	movs	r3, #1
 800225a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800225c:	2303      	movs	r3, #3
 800225e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002268:	2301      	movs	r3, #1
 800226a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002270:	463b      	mov	r3, r7
 8002272:	4618      	mov	r0, r3
 8002274:	f002 fcb2 	bl	8004bdc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002278:	2301      	movs	r3, #1
 800227a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800227c:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002280:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002282:	2310      	movs	r3, #16
 8002284:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800228e:	463b      	mov	r3, r7
 8002290:	4618      	mov	r0, r3
 8002292:	f002 fca3 	bl	8004bdc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002296:	2302      	movs	r3, #2
 8002298:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 800229a:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <MPU_Config+0xb4>)
 800229c:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800229e:	463b      	mov	r3, r7
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fc9b 	bl	8004bdc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80022a6:	2303      	movs	r3, #3
 80022a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <MPU_Config+0xb8>)
 80022ac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80022ae:	230e      	movs	r3, #14
 80022b0:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80022b2:	463b      	mov	r3, r7
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fc91 	bl	8004bdc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80022ba:	2304      	movs	r3, #4
 80022bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 80022be:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80022c2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80022c4:	230f      	movs	r3, #15
 80022c6:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80022c8:	463b      	mov	r3, r7
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 fc86 	bl	8004bdc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80022d0:	2004      	movs	r0, #4
 80022d2:	f002 fc63 	bl	8004b9c <HAL_MPU_Enable>

}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	30020000 	.word	0x30020000
 80022e4:	30040000 	.word	0x30040000

080022e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <Error_Handler+0x8>
 80022f4:	0000      	movs	r0, r0
	...

080022f8 <SineWave_Generator>:
#include "signals.h"

void SineWave_Generator(double wave[], int size, double time, wave_arg arg)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	ed2d 8b02 	vpush	{d8}
 80022fe:	b08e      	sub	sp, #56	@ 0x38
 8002300:	af00      	add	r7, sp, #0
 8002302:	6278      	str	r0, [r7, #36]	@ 0x24
 8002304:	6239      	str	r1, [r7, #32]
 8002306:	ed87 0b06 	vstr	d0, [r7, #24]
 800230a:	eeb0 5b41 	vmov.f64	d5, d1
 800230e:	eeb0 6b42 	vmov.f64	d6, d2
 8002312:	eeb0 7b43 	vmov.f64	d7, d3
 8002316:	ed87 5b00 	vstr	d5, [r7]
 800231a:	ed87 6b02 	vstr	d6, [r7, #8]
 800231e:	ed87 7b04 	vstr	d7, [r7, #16]
    double time_step = (double)time / size;
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800232c:	ed97 5b06 	vldr	d5, [r7, #24]
 8002330:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002334:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    for (int i = 0; i < size; i++)
 8002338:	2300      	movs	r3, #0
 800233a:	637b      	str	r3, [r7, #52]	@ 0x34
 800233c:	e023      	b.n	8002386 <SineWave_Generator+0x8e>
    {
        wave[i] = arg.amp * sin(2 * M_PI * i * time_step + arg.phase);
 800233e:	ed97 8b00 	vldr	d8, [r7]
 8002342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800234c:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 80023a0 <SineWave_Generator+0xa8>
 8002350:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002354:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002358:	ee26 6b07 	vmul.f64	d6, d6, d7
 800235c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002360:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002364:	eeb0 0b47 	vmov.f64	d0, d7
 8002368:	f011 f9ea 	bl	8013740 <sin>
 800236c:	eeb0 7b40 	vmov.f64	d7, d0
 8002370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002376:	4413      	add	r3, r2
 8002378:	ee28 7b07 	vmul.f64	d7, d8, d7
 800237c:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < size; i++)
 8002380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002382:	3301      	adds	r3, #1
 8002384:	637b      	str	r3, [r7, #52]	@ 0x34
 8002386:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	429a      	cmp	r2, r3
 800238c:	dbd7      	blt.n	800233e <SineWave_Generator+0x46>
    }
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	3738      	adds	r7, #56	@ 0x38
 8002394:	46bd      	mov	sp, r7
 8002396:	ecbd 8b02 	vpop	{d8}
 800239a:	bd80      	pop	{r7, pc}
 800239c:	f3af 8000 	nop.w
 80023a0:	54442d18 	.word	0x54442d18
 80023a4:	401921fb 	.word	0x401921fb

080023a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <HAL_MspInit+0x30>)
 80023b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023b4:	4a08      	ldr	r2, [pc, #32]	@ (80023d8 <HAL_MspInit+0x30>)
 80023b6:	f043 0302 	orr.w	r3, r3, #2
 80023ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_MspInit+0x30>)
 80023c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	58024400 	.word	0x58024400

080023dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <NMI_Handler+0x4>

080023e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <MemManage_Handler+0x4>

080023f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <UsageFault_Handler+0x4>

08002404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002432:	f000 fbd7 	bl	8002be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <DMA1_Stream0_IRQHandler+0x10>)
 8002442:	f004 fbc3 	bl	8006bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	240048f0 	.word	0x240048f0

08002450 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002454:	4802      	ldr	r0, [pc, #8]	@ (8002460 <DMA1_Stream1_IRQHandler+0x10>)
 8002456:	f004 fbb9 	bl	8006bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2400497c 	.word	0x2400497c

08002464 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <USART1_IRQHandler+0x10>)
 800246a:	f00a fc69 	bl	800cd40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	24015178 	.word	0x24015178

08002478 <_getpid>:
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
 800247c:	2301      	movs	r3, #1
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_kill>:
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	f00d f9e9 	bl	800f868 <__errno>
 8002496:	4603      	mov	r3, r0
 8002498:	2216      	movs	r2, #22
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <_exit>:
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ffe7 	bl	8002488 <_kill>
 80024ba:	bf00      	nop
 80024bc:	e7fd      	b.n	80024ba <_exit+0x12>

080024be <_read>:
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e00a      	b.n	80024e6 <_read+0x28>
 80024d0:	f3af 8000 	nop.w
 80024d4:	4601      	mov	r1, r0
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	60ba      	str	r2, [r7, #8]
 80024dc:	b2ca      	uxtb	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3301      	adds	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	dbf0      	blt.n	80024d0 <_read+0x12>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <_write>:
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e009      	b.n	800251e <_write+0x26>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	60ba      	str	r2, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f3af 8000 	nop.w
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	dbf1      	blt.n	800250a <_write+0x12>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_close>:
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_fstat>:
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	2300      	movs	r3, #0
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_isatty>:
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	2301      	movs	r3, #1
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_lseek>:
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	2300      	movs	r3, #0
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_sbrk>:
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	4a14      	ldr	r2, [pc, #80]	@ (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	@ (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
 80025c8:	f00d f94e 	bl	800f868 <__errno>
 80025cc:	4603      	mov	r3, r0
 80025ce:	220c      	movs	r2, #12
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
 80025d8:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b07      	ldr	r3, [pc, #28]	@ (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a05      	ldr	r2, [pc, #20]	@ (80025fc <_sbrk+0x64>)
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	24080000 	.word	0x24080000
 80025f8:	00001000 	.word	0x00001000
 80025fc:	24015090 	.word	0x24015090
 8002600:	24015520 	.word	0x24015520

08002604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002608:	4b37      	ldr	r3, [pc, #220]	@ (80026e8 <SystemInit+0xe4>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	4a36      	ldr	r2, [pc, #216]	@ (80026e8 <SystemInit+0xe4>)
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002618:	4b34      	ldr	r3, [pc, #208]	@ (80026ec <SystemInit+0xe8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	2b06      	cmp	r3, #6
 8002622:	d807      	bhi.n	8002634 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002624:	4b31      	ldr	r3, [pc, #196]	@ (80026ec <SystemInit+0xe8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 030f 	bic.w	r3, r3, #15
 800262c:	4a2f      	ldr	r2, [pc, #188]	@ (80026ec <SystemInit+0xe8>)
 800262e:	f043 0307 	orr.w	r3, r3, #7
 8002632:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002634:	4b2e      	ldr	r3, [pc, #184]	@ (80026f0 <SystemInit+0xec>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a2d      	ldr	r2, [pc, #180]	@ (80026f0 <SystemInit+0xec>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002640:	4b2b      	ldr	r3, [pc, #172]	@ (80026f0 <SystemInit+0xec>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002646:	4b2a      	ldr	r3, [pc, #168]	@ (80026f0 <SystemInit+0xec>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4929      	ldr	r1, [pc, #164]	@ (80026f0 <SystemInit+0xec>)
 800264c:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <SystemInit+0xf0>)
 800264e:	4013      	ands	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002652:	4b26      	ldr	r3, [pc, #152]	@ (80026ec <SystemInit+0xe8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800265e:	4b23      	ldr	r3, [pc, #140]	@ (80026ec <SystemInit+0xe8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 030f 	bic.w	r3, r3, #15
 8002666:	4a21      	ldr	r2, [pc, #132]	@ (80026ec <SystemInit+0xe8>)
 8002668:	f043 0307 	orr.w	r3, r3, #7
 800266c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800266e:	4b20      	ldr	r3, [pc, #128]	@ (80026f0 <SystemInit+0xec>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002674:	4b1e      	ldr	r3, [pc, #120]	@ (80026f0 <SystemInit+0xec>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800267a:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <SystemInit+0xec>)
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002680:	4b1b      	ldr	r3, [pc, #108]	@ (80026f0 <SystemInit+0xec>)
 8002682:	4a1d      	ldr	r2, [pc, #116]	@ (80026f8 <SystemInit+0xf4>)
 8002684:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002686:	4b1a      	ldr	r3, [pc, #104]	@ (80026f0 <SystemInit+0xec>)
 8002688:	4a1c      	ldr	r2, [pc, #112]	@ (80026fc <SystemInit+0xf8>)
 800268a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800268c:	4b18      	ldr	r3, [pc, #96]	@ (80026f0 <SystemInit+0xec>)
 800268e:	4a1c      	ldr	r2, [pc, #112]	@ (8002700 <SystemInit+0xfc>)
 8002690:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002692:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <SystemInit+0xec>)
 8002694:	2200      	movs	r2, #0
 8002696:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002698:	4b15      	ldr	r3, [pc, #84]	@ (80026f0 <SystemInit+0xec>)
 800269a:	4a19      	ldr	r2, [pc, #100]	@ (8002700 <SystemInit+0xfc>)
 800269c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800269e:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <SystemInit+0xec>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026a4:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <SystemInit+0xec>)
 80026a6:	4a16      	ldr	r2, [pc, #88]	@ (8002700 <SystemInit+0xfc>)
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026aa:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <SystemInit+0xec>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026b0:	4b0f      	ldr	r3, [pc, #60]	@ (80026f0 <SystemInit+0xec>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0e      	ldr	r2, [pc, #56]	@ (80026f0 <SystemInit+0xec>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <SystemInit+0xec>)
 80026be:	2200      	movs	r2, #0
 80026c0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80026c2:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <SystemInit+0x100>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <SystemInit+0x104>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026ce:	d202      	bcs.n	80026d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80026d0:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <SystemInit+0x108>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <SystemInit+0x10c>)
 80026d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80026dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00
 80026ec:	52002000 	.word	0x52002000
 80026f0:	58024400 	.word	0x58024400
 80026f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80026f8:	02020200 	.word	0x02020200
 80026fc:	01ff0000 	.word	0x01ff0000
 8002700:	01010280 	.word	0x01010280
 8002704:	5c001000 	.word	0x5c001000
 8002708:	ffff0000 	.word	0xffff0000
 800270c:	51008108 	.word	0x51008108
 8002710:	52004000 	.word	0x52004000

08002714 <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002724:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <MX_TIM6_Init+0x64>)
 8002726:	4a15      	ldr	r2, [pc, #84]	@ (800277c <MX_TIM6_Init+0x68>)
 8002728:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 12 - 1;
 800272a:	4b13      	ldr	r3, [pc, #76]	@ (8002778 <MX_TIM6_Init+0x64>)
 800272c:	220b      	movs	r2, #11
 800272e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002730:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <MX_TIM6_Init+0x64>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <MX_TIM6_Init+0x64>)
 8002738:	22c7      	movs	r2, #199	@ 0xc7
 800273a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800273c:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <MX_TIM6_Init+0x64>)
 800273e:	2280      	movs	r2, #128	@ 0x80
 8002740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002742:	480d      	ldr	r0, [pc, #52]	@ (8002778 <MX_TIM6_Init+0x64>)
 8002744:	f009 fe70 	bl	800c428 <HAL_TIM_Base_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800274e:	f7ff fdcb 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002752:	2320      	movs	r3, #32
 8002754:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4806      	ldr	r0, [pc, #24]	@ (8002778 <MX_TIM6_Init+0x64>)
 8002760:	f00a f982 	bl	800ca68 <HAL_TIMEx_MasterConfigSynchronization>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800276a:	f7ff fdbd 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	24015094 	.word	0x24015094
 800277c:	40001000 	.word	0x40001000

08002780 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002790:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <MX_TIM7_Init+0x64>)
 8002792:	4a15      	ldr	r2, [pc, #84]	@ (80027e8 <MX_TIM7_Init+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8002796:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <MX_TIM7_Init+0x64>)
 8002798:	22ef      	movs	r2, #239	@ 0xef
 800279a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279c:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <MX_TIM7_Init+0x64>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <MX_TIM7_Init+0x64>)
 80027a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027a8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <MX_TIM7_Init+0x64>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80027b0:	480c      	ldr	r0, [pc, #48]	@ (80027e4 <MX_TIM7_Init+0x64>)
 80027b2:	f009 fe39 	bl	800c428 <HAL_TIM_Base_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80027bc:	f7ff fd94 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c0:	2300      	movs	r3, #0
 80027c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	4619      	mov	r1, r3
 80027cc:	4805      	ldr	r0, [pc, #20]	@ (80027e4 <MX_TIM7_Init+0x64>)
 80027ce:	f00a f94b 	bl	800ca68 <HAL_TIMEx_MasterConfigSynchronization>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80027d8:	f7ff fd86 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	240150e0 	.word	0x240150e0
 80027e8:	40001400 	.word	0x40001400

080027ec <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027f2:	f107 0310 	add.w	r3, r7, #16
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800280a:	4b1f      	ldr	r3, [pc, #124]	@ (8002888 <MX_TIM15_Init+0x9c>)
 800280c:	4a1f      	ldr	r2, [pc, #124]	@ (800288c <MX_TIM15_Init+0xa0>)
 800280e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2-1;
 8002810:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <MX_TIM15_Init+0x9c>)
 8002812:	2201      	movs	r2, #1
 8002814:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002816:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <MX_TIM15_Init+0x9c>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2-1;
 800281c:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <MX_TIM15_Init+0x9c>)
 800281e:	2201      	movs	r2, #1
 8002820:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002822:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <MX_TIM15_Init+0x9c>)
 8002824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002828:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800282a:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <MX_TIM15_Init+0x9c>)
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <MX_TIM15_Init+0x9c>)
 8002832:	2280      	movs	r2, #128	@ 0x80
 8002834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002836:	4814      	ldr	r0, [pc, #80]	@ (8002888 <MX_TIM15_Init+0x9c>)
 8002838:	f009 fdf6 	bl	800c428 <HAL_TIM_Base_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002842:	f7ff fd51 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800284a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	4619      	mov	r1, r3
 8002852:	480d      	ldr	r0, [pc, #52]	@ (8002888 <MX_TIM15_Init+0x9c>)
 8002854:	f009 fed8 	bl	800c608 <HAL_TIM_ConfigClockSource>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800285e:	f7ff fd43 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002862:	2310      	movs	r3, #16
 8002864:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4806      	ldr	r0, [pc, #24]	@ (8002888 <MX_TIM15_Init+0x9c>)
 8002870:	f00a f8fa 	bl	800ca68 <HAL_TIMEx_MasterConfigSynchronization>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800287a:	f7ff fd35 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2401512c 	.word	0x2401512c
 800288c:	40014000 	.word	0x40014000

08002890 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a20      	ldr	r2, [pc, #128]	@ (8002920 <HAL_TIM_Base_MspInit+0x90>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d10f      	bne.n	80028c2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <HAL_TIM_Base_MspInit+0x94>)
 80028a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002924 <HAL_TIM_Base_MspInit+0x94>)
 80028aa:	f043 0310 	orr.w	r3, r3, #16
 80028ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002924 <HAL_TIM_Base_MspInit+0x94>)
 80028b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80028c0:	e028      	b.n	8002914 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM7)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a18      	ldr	r2, [pc, #96]	@ (8002928 <HAL_TIM_Base_MspInit+0x98>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d10f      	bne.n	80028ec <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <HAL_TIM_Base_MspInit+0x94>)
 80028ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028d2:	4a14      	ldr	r2, [pc, #80]	@ (8002924 <HAL_TIM_Base_MspInit+0x94>)
 80028d4:	f043 0320 	orr.w	r3, r3, #32
 80028d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028dc:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <HAL_TIM_Base_MspInit+0x94>)
 80028de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
}
 80028ea:	e013      	b.n	8002914 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM15)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0e      	ldr	r2, [pc, #56]	@ (800292c <HAL_TIM_Base_MspInit+0x9c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80028f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <HAL_TIM_Base_MspInit+0x94>)
 80028f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028fc:	4a09      	ldr	r2, [pc, #36]	@ (8002924 <HAL_TIM_Base_MspInit+0x94>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002902:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002906:	4b07      	ldr	r3, [pc, #28]	@ (8002924 <HAL_TIM_Base_MspInit+0x94>)
 8002908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800290c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	bf00      	nop
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40001000 	.word	0x40001000
 8002924:	58024400 	.word	0x58024400
 8002928:	40001400 	.word	0x40001400
 800292c:	40014000 	.word	0x40014000

08002930 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002934:	4b22      	ldr	r3, [pc, #136]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 8002936:	4a23      	ldr	r2, [pc, #140]	@ (80029c4 <MX_USART1_UART_Init+0x94>)
 8002938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800293a:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 800293c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002942:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800294e:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002954:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 8002956:	220c      	movs	r2, #12
 8002958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295a:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002960:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002966:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800296c:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 800296e:	2200      	movs	r2, #0
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002972:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 8002974:	2200      	movs	r2, #0
 8002976:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002978:	4811      	ldr	r0, [pc, #68]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 800297a:	f00a f903 	bl	800cb84 <HAL_UART_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002984:	f7ff fcb0 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002988:	2100      	movs	r1, #0
 800298a:	480d      	ldr	r0, [pc, #52]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 800298c:	f00b fdcc 	bl	800e528 <HAL_UARTEx_SetTxFifoThreshold>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002996:	f7ff fca7 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800299a:	2100      	movs	r1, #0
 800299c:	4808      	ldr	r0, [pc, #32]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 800299e:	f00b fe01 	bl	800e5a4 <HAL_UARTEx_SetRxFifoThreshold>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80029a8:	f7ff fc9e 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80029ac:	4804      	ldr	r0, [pc, #16]	@ (80029c0 <MX_USART1_UART_Init+0x90>)
 80029ae:	f00b fd82 	bl	800e4b6 <HAL_UARTEx_DisableFifoMode>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80029b8:	f7ff fc96 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	24015178 	.word	0x24015178
 80029c4:	40011000 	.word	0x40011000

080029c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b0ba      	sub	sp, #232	@ 0xe8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	22c0      	movs	r2, #192	@ 0xc0
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f00c ff17 	bl	800f81c <memset>
  if(uartHandle->Instance==USART1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2b      	ldr	r2, [pc, #172]	@ (8002aa0 <HAL_UART_MspInit+0xd8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d14e      	bne.n	8002a96 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029f8:	f04f 0201 	mov.w	r2, #1
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a0a:	f107 0310 	add.w	r3, r7, #16
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f007 f80c 	bl	8009a2c <HAL_RCCEx_PeriphCLKConfig>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002a1a:	f7ff fc65 	bl	80022e8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a1e:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <HAL_UART_MspInit+0xdc>)
 8002a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a24:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa4 <HAL_UART_MspInit+0xdc>)
 8002a26:	f043 0310 	orr.w	r3, r3, #16
 8002a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <HAL_UART_MspInit+0xdc>)
 8002a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3c:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <HAL_UART_MspInit+0xdc>)
 8002a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a42:	4a18      	ldr	r2, [pc, #96]	@ (8002aa4 <HAL_UART_MspInit+0xdc>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a4c:	4b15      	ldr	r3, [pc, #84]	@ (8002aa4 <HAL_UART_MspInit+0xdc>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002a5a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002a74:	2304      	movs	r3, #4
 8002a76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4809      	ldr	r0, [pc, #36]	@ (8002aa8 <HAL_UART_MspInit+0xe0>)
 8002a82:	f005 fbb5 	bl	80081f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2025      	movs	r0, #37	@ 0x25
 8002a8c:	f002 f839 	bl	8004b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a90:	2025      	movs	r0, #37	@ 0x25
 8002a92:	f002 f850 	bl	8004b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a96:	bf00      	nop
 8002a98:	37e8      	adds	r7, #232	@ 0xe8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40011000 	.word	0x40011000
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	58020400 	.word	0x58020400

08002aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ae4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ab0:	f7ff fda8 	bl	8002604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ab4:	480c      	ldr	r0, [pc, #48]	@ (8002ae8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ab6:	490d      	ldr	r1, [pc, #52]	@ (8002aec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8002af0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002abc:	e002      	b.n	8002ac4 <LoopCopyDataInit>

08002abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ac2:	3304      	adds	r3, #4

08002ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac8:	d3f9      	bcc.n	8002abe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aca:	4a0a      	ldr	r2, [pc, #40]	@ (8002af4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002acc:	4c0a      	ldr	r4, [pc, #40]	@ (8002af8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ad0:	e001      	b.n	8002ad6 <LoopFillZerobss>

08002ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad4:	3204      	adds	r2, #4

08002ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad8:	d3fb      	bcc.n	8002ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ada:	f00c fecb 	bl	800f874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ade:	f7ff f9a3 	bl	8001e28 <main>
  bx  lr
 8002ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ae4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002ae8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002aec:	240006c4 	.word	0x240006c4
  ldr r2, =_sidata
 8002af0:	08016e3c 	.word	0x08016e3c
  ldr r2, =_sbss
 8002af4:	24004870 	.word	0x24004870
  ldr r4, =_ebss
 8002af8:	2401551c 	.word	0x2401551c

08002afc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002afc:	e7fe      	b.n	8002afc <ADC3_IRQHandler>
	...

08002b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b06:	2003      	movs	r0, #3
 8002b08:	f001 fff0 	bl	8004aec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b0c:	f006 fdb8 	bl	8009680 <HAL_RCC_GetSysClockFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b15      	ldr	r3, [pc, #84]	@ (8002b68 <HAL_Init+0x68>)
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	4913      	ldr	r1, [pc, #76]	@ (8002b6c <HAL_Init+0x6c>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b68 <HAL_Init+0x68>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	4a0e      	ldr	r2, [pc, #56]	@ (8002b6c <HAL_Init+0x6c>)
 8002b34:	5cd3      	ldrb	r3, [r2, r3]
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	4a0b      	ldr	r2, [pc, #44]	@ (8002b70 <HAL_Init+0x70>)
 8002b42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b44:	4a0b      	ldr	r2, [pc, #44]	@ (8002b74 <HAL_Init+0x74>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b4a:	200f      	movs	r0, #15
 8002b4c:	f000 f814 	bl	8002b78 <HAL_InitTick>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e002      	b.n	8002b60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b5a:	f7ff fc25 	bl	80023a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	08014738 	.word	0x08014738
 8002b70:	24000004 	.word	0x24000004
 8002b74:	24000000 	.word	0x24000000

08002b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b80:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_InitTick+0x60>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e021      	b.n	8002bd0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b8c:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <HAL_InitTick+0x64>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <HAL_InitTick+0x60>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 ffd5 	bl	8004b52 <HAL_SYSTICK_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00e      	b.n	8002bd0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d80a      	bhi.n	8002bce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bc0:	f001 ff9f 	bl	8004b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc4:	4a06      	ldr	r2, [pc, #24]	@ (8002be0 <HAL_InitTick+0x68>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	2400000c 	.word	0x2400000c
 8002bdc:	24000000 	.word	0x24000000
 8002be0:	24000008 	.word	0x24000008

08002be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <HAL_IncTick+0x20>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_IncTick+0x24>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a04      	ldr	r2, [pc, #16]	@ (8002c08 <HAL_IncTick+0x24>)
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	2400000c 	.word	0x2400000c
 8002c08:	2401520c 	.word	0x2401520c

08002c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c10:	4b03      	ldr	r3, [pc, #12]	@ (8002c20 <HAL_GetTick+0x14>)
 8002c12:	681b      	ldr	r3, [r3, #0]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	2401520c 	.word	0x2401520c

08002c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c2c:	f7ff ffee 	bl	8002c0c <HAL_GetTick>
 8002c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c3c:	d005      	beq.n	8002c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_Delay+0x44>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4413      	add	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c4a:	bf00      	nop
 8002c4c:	f7ff ffde 	bl	8002c0c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d8f7      	bhi.n	8002c4c <HAL_Delay+0x28>
  {
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	2400000c 	.word	0x2400000c

08002c6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c70:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_GetREVID+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0c1b      	lsrs	r3, r3, #16
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	5c001000 	.word	0x5c001000

08002c84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	609a      	str	r2, [r3, #8]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3360      	adds	r3, #96	@ 0x60
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	611a      	str	r2, [r3, #16]
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b087      	sub	sp, #28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3360      	adds	r3, #96	@ 0x60
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	601a      	str	r2, [r3, #0]
  }
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b087      	sub	sp, #28
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3330      	adds	r3, #48	@ 0x30
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	4413      	add	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	211f      	movs	r1, #31
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	401a      	ands	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	f003 011f 	and.w	r1, r3, #31
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	431a      	orrs	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f023 0203 	bic.w	r2, r3, #3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	60da      	str	r2, [r3, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3314      	adds	r3, #20
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	0e5b      	lsrs	r3, r3, #25
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	4413      	add	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	0d1b      	lsrs	r3, r3, #20
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2107      	movs	r1, #7
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	0d1b      	lsrs	r3, r3, #20
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0318 	and.w	r3, r3, #24
 8002eb2:	4908      	ldr	r1, [pc, #32]	@ (8002ed4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002eb4:	40d9      	lsrs	r1, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	400b      	ands	r3, r1
 8002eba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	000fffff 	.word	0x000fffff

08002ed8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 031f 	and.w	r3, r3, #31
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6093      	str	r3, [r2, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	5fffffc0 	.word	0x5fffffc0

08002f18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f2c:	d101      	bne.n	8002f32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	6fffffc0 	.word	0x6fffffc0

08002f68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f7c:	d101      	bne.n	8002f82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <LL_ADC_Enable+0x24>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	7fffffc0 	.word	0x7fffffc0

08002fb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <LL_ADC_Disable+0x24>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	f043 0202 	orr.w	r2, r3, #2
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	7fffffc0 	.word	0x7fffffc0

08002fe0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <LL_ADC_IsEnabled+0x18>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <LL_ADC_IsEnabled+0x1a>
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d101      	bne.n	800301e <LL_ADC_IsDisableOngoing+0x18>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <LL_ADC_IsDisableOngoing+0x1a>
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <LL_ADC_REG_StartConversion+0x24>)
 800303a:	4013      	ands	r3, r2
 800303c:	f043 0204 	orr.w	r2, r3, #4
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	7fffffc0 	.word	0x7fffffc0

08003054 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <LL_ADC_REG_StopConversion+0x24>)
 8003062:	4013      	ands	r3, r2
 8003064:	f043 0210 	orr.w	r2, r3, #16
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	7fffffc0 	.word	0x7fffffc0

0800307c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b04      	cmp	r3, #4
 800308e:	d101      	bne.n	8003094 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <LL_ADC_INJ_StopConversion+0x24>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	7fffffc0 	.word	0x7fffffc0

080030cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d101      	bne.n	80030e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b089      	sub	sp, #36	@ 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003100:	2300      	movs	r3, #0
 8003102:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e18f      	b.n	800342e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fd ff29 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff feef 	bl	8002f18 <LL_ADC_IsDeepPowerDownEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fed5 	bl	8002ef4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ff0a 	bl	8002f68 <LL_ADC_IsInternalRegulatorEnabled>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d114      	bne.n	8003184 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff feee 	bl	8002f40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003164:	4b87      	ldr	r3, [pc, #540]	@ (8003384 <HAL_ADC_Init+0x290>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	4a87      	ldr	r2, [pc, #540]	@ (8003388 <HAL_ADC_Init+0x294>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	3301      	adds	r3, #1
 8003174:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003176:	e002      	b.n	800317e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	3b01      	subs	r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f9      	bne.n	8003178 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff feed 	bl	8002f68 <LL_ADC_IsInternalRegulatorEnabled>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10d      	bne.n	80031b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003198:	f043 0210 	orr.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a4:	f043 0201 	orr.w	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff61 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 80031ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f040 8129 	bne.w	800341c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f040 8125 	bne.w	800341c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80031da:	f043 0202 	orr.w	r2, r3, #2
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fefa 	bl	8002fe0 <LL_ADC_IsEnabled>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d136      	bne.n	8003260 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a65      	ldr	r2, [pc, #404]	@ (800338c <HAL_ADC_Init+0x298>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <HAL_ADC_Init+0x112>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a63      	ldr	r2, [pc, #396]	@ (8003390 <HAL_ADC_Init+0x29c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10e      	bne.n	8003224 <HAL_ADC_Init+0x130>
 8003206:	4861      	ldr	r0, [pc, #388]	@ (800338c <HAL_ADC_Init+0x298>)
 8003208:	f7ff feea 	bl	8002fe0 <LL_ADC_IsEnabled>
 800320c:	4604      	mov	r4, r0
 800320e:	4860      	ldr	r0, [pc, #384]	@ (8003390 <HAL_ADC_Init+0x29c>)
 8003210:	f7ff fee6 	bl	8002fe0 <LL_ADC_IsEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	4323      	orrs	r3, r4
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e008      	b.n	8003236 <HAL_ADC_Init+0x142>
 8003224:	485b      	ldr	r0, [pc, #364]	@ (8003394 <HAL_ADC_Init+0x2a0>)
 8003226:	f7ff fedb 	bl	8002fe0 <LL_ADC_IsEnabled>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d012      	beq.n	8003260 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a53      	ldr	r2, [pc, #332]	@ (800338c <HAL_ADC_Init+0x298>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_ADC_Init+0x15a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a51      	ldr	r2, [pc, #324]	@ (8003390 <HAL_ADC_Init+0x29c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_ADC_Init+0x15e>
 800324e:	4a52      	ldr	r2, [pc, #328]	@ (8003398 <HAL_ADC_Init+0x2a4>)
 8003250:	e000      	b.n	8003254 <HAL_ADC_Init+0x160>
 8003252:	4a52      	ldr	r2, [pc, #328]	@ (800339c <HAL_ADC_Init+0x2a8>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f7ff fd12 	bl	8002c84 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003260:	f7ff fd04 	bl	8002c6c <HAL_GetREVID>
 8003264:	4603      	mov	r3, r0
 8003266:	f241 0203 	movw	r2, #4099	@ 0x1003
 800326a:	4293      	cmp	r3, r2
 800326c:	d914      	bls.n	8003298 <HAL_ADC_Init+0x1a4>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b10      	cmp	r3, #16
 8003274:	d110      	bne.n	8003298 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7d5b      	ldrb	r3, [r3, #21]
 800327a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003280:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003286:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7f1b      	ldrb	r3, [r3, #28]
 800328c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800328e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003290:	f043 030c 	orr.w	r3, r3, #12
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	e00d      	b.n	80032b4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7d5b      	ldrb	r3, [r3, #21]
 800329c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032a2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80032a8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7f1b      	ldrb	r3, [r3, #28]
 80032ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7f1b      	ldrb	r3, [r3, #28]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d106      	bne.n	80032ca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	045b      	lsls	r3, r3, #17
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	4b2c      	ldr	r3, [pc, #176]	@ (80033a0 <HAL_ADC_Init+0x2ac>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	69b9      	ldr	r1, [r7, #24]
 80032f6:	430b      	orrs	r3, r1
 80032f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff febc 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 8003304:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fede 	bl	80030cc <LL_ADC_INJ_IsConversionOngoing>
 8003310:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d15f      	bne.n	80033d8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d15c      	bne.n	80033d8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7d1b      	ldrb	r3, [r3, #20]
 8003322:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	4b1c      	ldr	r3, [pc, #112]	@ (80033a4 <HAL_ADC_Init+0x2b0>)
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	69b9      	ldr	r1, [r7, #24]
 800333c:	430b      	orrs	r3, r1
 800333e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003346:	2b01      	cmp	r3, #1
 8003348:	d130      	bne.n	80033ac <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <HAL_ADC_Init+0x2b4>)
 8003358:	4013      	ands	r3, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800335e:	3a01      	subs	r2, #1
 8003360:	0411      	lsls	r1, r2, #16
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003366:	4311      	orrs	r1, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800336c:	4311      	orrs	r1, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003372:	430a      	orrs	r2, r1
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	611a      	str	r2, [r3, #16]
 8003380:	e01c      	b.n	80033bc <HAL_ADC_Init+0x2c8>
 8003382:	bf00      	nop
 8003384:	24000000 	.word	0x24000000
 8003388:	053e2d63 	.word	0x053e2d63
 800338c:	40022000 	.word	0x40022000
 8003390:	40022100 	.word	0x40022100
 8003394:	58026000 	.word	0x58026000
 8003398:	40022300 	.word	0x40022300
 800339c:	58026300 	.word	0x58026300
 80033a0:	fff0c003 	.word	0xfff0c003
 80033a4:	ffffbffc 	.word	0xffffbffc
 80033a8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f001 f812 	bl	80043fc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d10c      	bne.n	80033fa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	f023 010f 	bic.w	r1, r3, #15
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	1e5a      	subs	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80033f8:	e007      	b.n	800340a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 020f 	bic.w	r2, r2, #15
 8003408:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	f023 0303 	bic.w	r3, r3, #3
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	655a      	str	r2, [r3, #84]	@ 0x54
 800341a:	e007      	b.n	800342c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	f043 0210 	orr.w	r2, r3, #16
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800342c:	7ffb      	ldrb	r3, [r7, #31]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	@ 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}
 8003436:	bf00      	nop

08003438 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e16e      	b.n	8003728 <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344e:	f043 0202 	orr.w	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003456:	2103      	movs	r1, #3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fd95 	bl	8003f88 <ADC_ConversionStop>
 800345e:	4603      	mov	r3, r0
 8003460:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003470:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10a      	bne.n	800348e <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fecb 	bl	8004214 <ADC_Disable>
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4b8c      	ldr	r3, [pc, #560]	@ (80036cc <HAL_ADC_DeInit+0x294>)
 800349a:	400b      	ands	r3, r1
 800349c:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80034a6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 80034b6:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80034c6:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 80034d6:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80034e6:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6919      	ldr	r1, [r3, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4b77      	ldr	r3, [pc, #476]	@ (80036d0 <HAL_ADC_DeInit+0x298>)
 80034f4:	400b      	ands	r3, r1
 80034f6:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8003506:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 8003516:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a1a      	ldr	r2, [r3, #32]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003526:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003536:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003548:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 800355c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003570:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003584:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4b50      	ldr	r3, [pc, #320]	@ (80036d4 <HAL_ADC_DeInit+0x29c>)
 8003594:	400b      	ands	r3, r1
 8003596:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4b4d      	ldr	r3, [pc, #308]	@ (80036d8 <HAL_ADC_DeInit+0x2a0>)
 80035a4:	400b      	ands	r3, r1
 80035a6:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4b49      	ldr	r3, [pc, #292]	@ (80036d8 <HAL_ADC_DeInit+0x2a0>)
 80035b4:	400b      	ands	r3, r1
 80035b6:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4b46      	ldr	r3, [pc, #280]	@ (80036dc <HAL_ADC_DeInit+0x2a4>)
 80035c4:	400b      	ands	r3, r1
 80035c6:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2200      	movs	r2, #0
 80035d4:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2200      	movs	r2, #0
 80035e2:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2200      	movs	r2, #0
 80035f0:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2200      	movs	r2, #0
 80035fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b34      	ldr	r3, [pc, #208]	@ (80036e0 <HAL_ADC_DeInit+0x2a8>)
 800360e:	400b      	ands	r3, r1
 8003610:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b2f      	ldr	r3, [pc, #188]	@ (80036e0 <HAL_ADC_DeInit+0x2a8>)
 8003622:	400b      	ands	r3, r1
 8003624:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b2a      	ldr	r3, [pc, #168]	@ (80036e0 <HAL_ADC_DeInit+0x2a8>)
 8003636:	400b      	ands	r3, r1
 8003638:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 800364c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a23      	ldr	r2, [pc, #140]	@ (80036e4 <HAL_ADC_DeInit+0x2ac>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_ADC_DeInit+0x22c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a22      	ldr	r2, [pc, #136]	@ (80036e8 <HAL_ADC_DeInit+0x2b0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d10e      	bne.n	8003682 <HAL_ADC_DeInit+0x24a>
 8003664:	481f      	ldr	r0, [pc, #124]	@ (80036e4 <HAL_ADC_DeInit+0x2ac>)
 8003666:	f7ff fcbb 	bl	8002fe0 <LL_ADC_IsEnabled>
 800366a:	4604      	mov	r4, r0
 800366c:	481e      	ldr	r0, [pc, #120]	@ (80036e8 <HAL_ADC_DeInit+0x2b0>)
 800366e:	f7ff fcb7 	bl	8002fe0 <LL_ADC_IsEnabled>
 8003672:	4603      	mov	r3, r0
 8003674:	4323      	orrs	r3, r4
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	e008      	b.n	8003694 <HAL_ADC_DeInit+0x25c>
 8003682:	481a      	ldr	r0, [pc, #104]	@ (80036ec <HAL_ADC_DeInit+0x2b4>)
 8003684:	f7ff fcac 	bl	8002fe0 <LL_ADC_IsEnabled>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf0c      	ite	eq
 800368e:	2301      	moveq	r3, #1
 8003690:	2300      	movne	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d036      	beq.n	8003706 <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a11      	ldr	r2, [pc, #68]	@ (80036e4 <HAL_ADC_DeInit+0x2ac>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_ADC_DeInit+0x274>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a10      	ldr	r2, [pc, #64]	@ (80036e8 <HAL_ADC_DeInit+0x2b0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_DeInit+0x278>
 80036ac:	4b10      	ldr	r3, [pc, #64]	@ (80036f0 <HAL_ADC_DeInit+0x2b8>)
 80036ae:	e000      	b.n	80036b2 <HAL_ADC_DeInit+0x27a>
 80036b0:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <HAL_ADC_DeInit+0x2bc>)
 80036b2:	6899      	ldr	r1, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <HAL_ADC_DeInit+0x2ac>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_ADC_DeInit+0x290>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a09      	ldr	r2, [pc, #36]	@ (80036e8 <HAL_ADC_DeInit+0x2b0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d117      	bne.n	80036f8 <HAL_ADC_DeInit+0x2c0>
 80036c8:	4a09      	ldr	r2, [pc, #36]	@ (80036f0 <HAL_ADC_DeInit+0x2b8>)
 80036ca:	e016      	b.n	80036fa <HAL_ADC_DeInit+0x2c2>
 80036cc:	fffff800 	.word	0xfffff800
 80036d0:	fc00f81c 	.word	0xfc00f81c
 80036d4:	e0820830 	.word	0xe0820830
 80036d8:	e0820820 	.word	0xe0820820
 80036dc:	fffff820 	.word	0xfffff820
 80036e0:	fff00000 	.word	0xfff00000
 80036e4:	40022000 	.word	0x40022000
 80036e8:	40022100 	.word	0x40022100
 80036ec:	58026000 	.word	0x58026000
 80036f0:	40022300 	.word	0x40022300
 80036f4:	58026300 	.word	0x58026300
 80036f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003730 <HAL_ADC_DeInit+0x2f8>)
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <HAL_ADC_DeInit+0x2fc>)
 80036fc:	400b      	ands	r3, r1
 80036fe:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7fd fcff 	bl	8001104 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	bd90      	pop	{r4, r7, pc}
 8003730:	58026300 	.word	0x58026300
 8003734:	fe0030e0 	.word	0xfe0030e0

08003738 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a55      	ldr	r2, [pc, #340]	@ (80038a0 <HAL_ADC_Start_DMA+0x168>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d004      	beq.n	8003758 <HAL_ADC_Start_DMA+0x20>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a54      	ldr	r2, [pc, #336]	@ (80038a4 <HAL_ADC_Start_DMA+0x16c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d101      	bne.n	800375c <HAL_ADC_Start_DMA+0x24>
 8003758:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <HAL_ADC_Start_DMA+0x170>)
 800375a:	e000      	b.n	800375e <HAL_ADC_Start_DMA+0x26>
 800375c:	4b53      	ldr	r3, [pc, #332]	@ (80038ac <HAL_ADC_Start_DMA+0x174>)
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fbba 	bl	8002ed8 <LL_ADC_GetMultimode>
 8003764:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff fc86 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	f040 808c 	bne.w	8003890 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_ADC_Start_DMA+0x4e>
 8003782:	2302      	movs	r3, #2
 8003784:	e087      	b.n	8003896 <HAL_ADC_Start_DMA+0x15e>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b05      	cmp	r3, #5
 8003798:	d002      	beq.n	80037a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b09      	cmp	r3, #9
 800379e:	d170      	bne.n	8003882 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fcad 	bl	8004100 <ADC_Enable>
 80037a6:	4603      	mov	r3, r0
 80037a8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d163      	bne.n	8003878 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037b4:	4b3e      	ldr	r3, [pc, #248]	@ (80038b0 <HAL_ADC_Start_DMA+0x178>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a37      	ldr	r2, [pc, #220]	@ (80038a4 <HAL_ADC_Start_DMA+0x16c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d002      	beq.n	80037d0 <HAL_ADC_Start_DMA+0x98>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	e000      	b.n	80037d2 <HAL_ADC_Start_DMA+0x9a>
 80037d0:	4b33      	ldr	r3, [pc, #204]	@ (80038a0 <HAL_ADC_Start_DMA+0x168>)
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d002      	beq.n	80037e0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d105      	bne.n	80037ec <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fc:	f023 0206 	bic.w	r2, r3, #6
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	659a      	str	r2, [r3, #88]	@ 0x58
 8003804:	e002      	b.n	800380c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003810:	4a28      	ldr	r2, [pc, #160]	@ (80038b4 <HAL_ADC_Start_DMA+0x17c>)
 8003812:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003818:	4a27      	ldr	r2, [pc, #156]	@ (80038b8 <HAL_ADC_Start_DMA+0x180>)
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003820:	4a26      	ldr	r2, [pc, #152]	@ (80038bc <HAL_ADC_Start_DMA+0x184>)
 8003822:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	221c      	movs	r2, #28
 800382a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0210 	orr.w	r2, r2, #16
 8003842:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f7ff fadf 	bl	8002e12 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3340      	adds	r3, #64	@ 0x40
 800385e:	4619      	mov	r1, r3
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f002 f9e4 	bl	8005c30 <HAL_DMA_Start_IT>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fbdb 	bl	800302c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003876:	e00d      	b.n	8003894 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003880:	e008      	b.n	8003894 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800388e:	e001      	b.n	8003894 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003890:	2302      	movs	r3, #2
 8003892:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003894:	7dfb      	ldrb	r3, [r7, #23]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40022000 	.word	0x40022000
 80038a4:	40022100 	.word	0x40022100
 80038a8:	40022300 	.word	0x40022300
 80038ac:	58026300 	.word	0x58026300
 80038b0:	fffff0fe 	.word	0xfffff0fe
 80038b4:	080042d3 	.word	0x080042d3
 80038b8:	080043ab 	.word	0x080043ab
 80038bc:	080043c7 	.word	0x080043c7

080038c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b0a1      	sub	sp, #132	@ 0x84
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4a9d      	ldr	r2, [pc, #628]	@ (8003b78 <HAL_ADC_ConfigChannel+0x290>)
 8003902:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x2a>
 800390e:	2302      	movs	r3, #2
 8003910:	e321      	b.n	8003f56 <HAL_ADC_ConfigChannel+0x66e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fbac 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 8306 	bne.w	8003f38 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003934:	2b00      	cmp	r3, #0
 8003936:	d108      	bne.n	800394a <HAL_ADC_ConfigChannel+0x62>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	0e9b      	lsrs	r3, r3, #26
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2201      	movs	r2, #1
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	e016      	b.n	8003978 <HAL_ADC_ConfigChannel+0x90>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003958:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800395a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800395c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003962:	2320      	movs	r3, #32
 8003964:	e003      	b.n	800396e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003966:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	2201      	movs	r2, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	69d1      	ldr	r1, [r2, #28]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	430b      	orrs	r3, r1
 8003984:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	f7ff fa11 	bl	8002dba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fb6d 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 80039a2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fb8f 	bl	80030cc <LL_ADC_INJ_IsConversionOngoing>
 80039ae:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 80b3 	bne.w	8003b1e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 80af 	bne.w	8003b1e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	461a      	mov	r2, r3
 80039ce:	f7ff fa33 	bl	8002e38 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039d2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b7c <HAL_ADC_ConfigChannel+0x294>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80039da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039de:	d10b      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x110>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	e01d      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x14c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10b      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x136>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	e00a      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x14c>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d027      	beq.n	8003a8e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6919      	ldr	r1, [r3, #16]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a4c:	f7ff f94e 	bl	8002cec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6919      	ldr	r1, [r3, #16]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	7e5b      	ldrb	r3, [r3, #25]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d102      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x17e>
 8003a60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003a64:	e000      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x180>
 8003a66:	2300      	movs	r3, #0
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f7ff f978 	bl	8002d5e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6919      	ldr	r1, [r3, #16]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	7e1b      	ldrb	r3, [r3, #24]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d102      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x19c>
 8003a7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a82:	e000      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x19e>
 8003a84:	2300      	movs	r3, #0
 8003a86:	461a      	mov	r2, r3
 8003a88:	f7ff f950 	bl	8002d2c <LL_ADC_SetDataRightShift>
 8003a8c:	e047      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	069b      	lsls	r3, r3, #26
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d107      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ab0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	069b      	lsls	r3, r3, #26
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ad4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003adc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	069b      	lsls	r3, r3, #26
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d107      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003af8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	069b      	lsls	r3, r3, #26
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d107      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fa5c 	bl	8002fe0 <LL_ADC_IsEnabled>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f040 820d 	bne.w	8003f4a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6819      	ldr	r1, [r3, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f7ff f9a7 	bl	8002e90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a0c      	ldr	r2, [pc, #48]	@ (8003b78 <HAL_ADC_ConfigChannel+0x290>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	f040 8133 	bne.w	8003db4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d110      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x298>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	0e9b      	lsrs	r3, r3, #26
 8003b64:	3301      	adds	r3, #1
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2b09      	cmp	r3, #9
 8003b6c:	bf94      	ite	ls
 8003b6e:	2301      	movls	r3, #1
 8003b70:	2300      	movhi	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	e01e      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x2cc>
 8003b76:	bf00      	nop
 8003b78:	47ff0000 	.word	0x47ff0000
 8003b7c:	5c001000 	.word	0x5c001000
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003b98:	2320      	movs	r3, #32
 8003b9a:	e003      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003b9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2b09      	cmp	r3, #9
 8003bac:	bf94      	ite	ls
 8003bae:	2301      	movls	r3, #1
 8003bb0:	2300      	movhi	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d079      	beq.n	8003cac <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x2ec>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0e9b      	lsrs	r3, r3, #26
 8003bca:	3301      	adds	r3, #1
 8003bcc:	069b      	lsls	r3, r3, #26
 8003bce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bd2:	e015      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x318>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003be4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003be6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003bec:	2320      	movs	r3, #32
 8003bee:	e003      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	069b      	lsls	r3, r3, #26
 8003bfc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x338>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0e9b      	lsrs	r3, r3, #26
 8003c12:	3301      	adds	r3, #1
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	2101      	movs	r1, #1
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	e017      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x368>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c30:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003c38:	2320      	movs	r3, #32
 8003c3a:	e003      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	3301      	adds	r3, #1
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	ea42 0103 	orr.w	r1, r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x38e>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	3301      	adds	r3, #1
 8003c68:	f003 021f 	and.w	r2, r3, #31
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4413      	add	r3, r2
 8003c72:	051b      	lsls	r3, r3, #20
 8003c74:	e018      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x3c0>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003c8e:	2320      	movs	r3, #32
 8003c90:	e003      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	f003 021f 	and.w	r2, r3, #31
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	4413      	add	r3, r2
 8003ca6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	e07e      	b.n	8003daa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d107      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x3e0>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0e9b      	lsrs	r3, r3, #26
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	069b      	lsls	r3, r3, #26
 8003cc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cc6:	e015      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x40c>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	e003      	b.n	8003cec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	069b      	lsls	r3, r3, #26
 8003cf0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x42c>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	0e9b      	lsrs	r3, r3, #26
 8003d06:	3301      	adds	r3, #1
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	e017      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x45c>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	61bb      	str	r3, [r7, #24]
  return result;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	e003      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	fab3 f383 	clz	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2101      	movs	r1, #1
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	ea42 0103 	orr.w	r1, r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x488>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	0e9b      	lsrs	r3, r3, #26
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f003 021f 	and.w	r2, r3, #31
 8003d60:	4613      	mov	r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4413      	add	r3, r2
 8003d66:	3b1e      	subs	r3, #30
 8003d68:	051b      	lsls	r3, r3, #20
 8003d6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	e01b      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x4c0>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	60fb      	str	r3, [r7, #12]
  return result;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	e003      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	f003 021f 	and.w	r2, r3, #31
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4413      	add	r3, r2
 8003da0:	3b1e      	subs	r3, #30
 8003da2:	051b      	lsls	r3, r3, #20
 8003da4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003da8:	430b      	orrs	r3, r1
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	6892      	ldr	r2, [r2, #8]
 8003dae:	4619      	mov	r1, r3
 8003db0:	f7ff f842 	bl	8002e38 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f280 80c6 	bge.w	8003f4a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a67      	ldr	r2, [pc, #412]	@ (8003f60 <HAL_ADC_ConfigChannel+0x678>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_ADC_ConfigChannel+0x4ea>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a65      	ldr	r2, [pc, #404]	@ (8003f64 <HAL_ADC_ConfigChannel+0x67c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x4ee>
 8003dd2:	4b65      	ldr	r3, [pc, #404]	@ (8003f68 <HAL_ADC_ConfigChannel+0x680>)
 8003dd4:	e000      	b.n	8003dd8 <HAL_ADC_ConfigChannel+0x4f0>
 8003dd6:	4b65      	ldr	r3, [pc, #404]	@ (8003f6c <HAL_ADC_ConfigChannel+0x684>)
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe ff79 	bl	8002cd0 <LL_ADC_GetCommonPathInternalCh>
 8003dde:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5e      	ldr	r2, [pc, #376]	@ (8003f60 <HAL_ADC_ConfigChannel+0x678>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_ADC_ConfigChannel+0x50c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a5d      	ldr	r2, [pc, #372]	@ (8003f64 <HAL_ADC_ConfigChannel+0x67c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d10e      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x52a>
 8003df4:	485a      	ldr	r0, [pc, #360]	@ (8003f60 <HAL_ADC_ConfigChannel+0x678>)
 8003df6:	f7ff f8f3 	bl	8002fe0 <LL_ADC_IsEnabled>
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4859      	ldr	r0, [pc, #356]	@ (8003f64 <HAL_ADC_ConfigChannel+0x67c>)
 8003dfe:	f7ff f8ef 	bl	8002fe0 <LL_ADC_IsEnabled>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4323      	orrs	r3, r4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	e008      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x53c>
 8003e12:	4857      	ldr	r0, [pc, #348]	@ (8003f70 <HAL_ADC_ConfigChannel+0x688>)
 8003e14:	f7ff f8e4 	bl	8002fe0 <LL_ADC_IsEnabled>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bf0c      	ite	eq
 8003e1e:	2301      	moveq	r3, #1
 8003e20:	2300      	movne	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d07d      	beq.n	8003f24 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a51      	ldr	r2, [pc, #324]	@ (8003f74 <HAL_ADC_ConfigChannel+0x68c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d130      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x5ac>
 8003e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d12b      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a4b      	ldr	r2, [pc, #300]	@ (8003f70 <HAL_ADC_ConfigChannel+0x688>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	f040 8081 	bne.w	8003f4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a44      	ldr	r2, [pc, #272]	@ (8003f60 <HAL_ADC_ConfigChannel+0x678>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d004      	beq.n	8003e5c <HAL_ADC_ConfigChannel+0x574>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a43      	ldr	r2, [pc, #268]	@ (8003f64 <HAL_ADC_ConfigChannel+0x67c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d101      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x578>
 8003e5c:	4a42      	ldr	r2, [pc, #264]	@ (8003f68 <HAL_ADC_ConfigChannel+0x680>)
 8003e5e:	e000      	b.n	8003e62 <HAL_ADC_ConfigChannel+0x57a>
 8003e60:	4a42      	ldr	r2, [pc, #264]	@ (8003f6c <HAL_ADC_ConfigChannel+0x684>)
 8003e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f7fe ff1d 	bl	8002caa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e70:	4b41      	ldr	r3, [pc, #260]	@ (8003f78 <HAL_ADC_ConfigChannel+0x690>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	4a41      	ldr	r2, [pc, #260]	@ (8003f7c <HAL_ADC_ConfigChannel+0x694>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	3301      	adds	r3, #1
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e84:	e002      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f9      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e92:	e05a      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a39      	ldr	r2, [pc, #228]	@ (8003f80 <HAL_ADC_ConfigChannel+0x698>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d11e      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x5f4>
 8003e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d119      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a30      	ldr	r2, [pc, #192]	@ (8003f70 <HAL_ADC_ConfigChannel+0x688>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d14b      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003f60 <HAL_ADC_ConfigChannel+0x678>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_ADC_ConfigChannel+0x5de>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a28      	ldr	r2, [pc, #160]	@ (8003f64 <HAL_ADC_ConfigChannel+0x67c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x5e2>
 8003ec6:	4a28      	ldr	r2, [pc, #160]	@ (8003f68 <HAL_ADC_ConfigChannel+0x680>)
 8003ec8:	e000      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x5e4>
 8003eca:	4a28      	ldr	r2, [pc, #160]	@ (8003f6c <HAL_ADC_ConfigChannel+0x684>)
 8003ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7fe fee8 	bl	8002caa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eda:	e036      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a28      	ldr	r2, [pc, #160]	@ (8003f84 <HAL_ADC_ConfigChannel+0x69c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d131      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x662>
 8003ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d12c      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f70 <HAL_ADC_ConfigChannel+0x688>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d127      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a18      	ldr	r2, [pc, #96]	@ (8003f60 <HAL_ADC_ConfigChannel+0x678>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_ADC_ConfigChannel+0x626>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a16      	ldr	r2, [pc, #88]	@ (8003f64 <HAL_ADC_ConfigChannel+0x67c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x62a>
 8003f0e:	4a16      	ldr	r2, [pc, #88]	@ (8003f68 <HAL_ADC_ConfigChannel+0x680>)
 8003f10:	e000      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x62c>
 8003f12:	4a16      	ldr	r2, [pc, #88]	@ (8003f6c <HAL_ADC_ConfigChannel+0x684>)
 8003f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f7fe fec4 	bl	8002caa <LL_ADC_SetCommonPathInternalCh>
 8003f22:	e012      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003f36:	e008      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3784      	adds	r7, #132	@ 0x84
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd90      	pop	{r4, r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40022000 	.word	0x40022000
 8003f64:	40022100 	.word	0x40022100
 8003f68:	40022300 	.word	0x40022300
 8003f6c:	58026300 	.word	0x58026300
 8003f70:	58026000 	.word	0x58026000
 8003f74:	cb840000 	.word	0xcb840000
 8003f78:	24000000 	.word	0x24000000
 8003f7c:	053e2d63 	.word	0x053e2d63
 8003f80:	c7520000 	.word	0xc7520000
 8003f84:	cfb80000 	.word	0xcfb80000

08003f88 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff f86c 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 8003fa4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff f88e 	bl	80030cc <LL_ADC_INJ_IsConversionOngoing>
 8003fb0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d103      	bne.n	8003fc0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8098 	beq.w	80040f0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d02a      	beq.n	8004024 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7d5b      	ldrb	r3, [r3, #21]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d126      	bne.n	8004024 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	7d1b      	ldrb	r3, [r3, #20]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d122      	bne.n	8004024 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003fe2:	e014      	b.n	800400e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4a45      	ldr	r2, [pc, #276]	@ (80040fc <ADC_ConversionStop+0x174>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d90d      	bls.n	8004008 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff0:	f043 0210 	orr.w	r2, r3, #16
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffc:	f043 0201 	orr.w	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e074      	b.n	80040f2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	3301      	adds	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004018:	2b40      	cmp	r3, #64	@ 0x40
 800401a:	d1e3      	bne.n	8003fe4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2240      	movs	r2, #64	@ 0x40
 8004022:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d014      	beq.n	8004054 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff f824 	bl	800307c <LL_ADC_REG_IsConversionOngoing>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe ffe1 	bl	8003006 <LL_ADC_IsDisableOngoing>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f800 	bl	8003054 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d014      	beq.n	8004084 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff f834 	bl	80030cc <LL_ADC_INJ_IsConversionOngoing>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00c      	beq.n	8004084 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe ffc9 	bl	8003006 <LL_ADC_IsDisableOngoing>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff f810 	bl	80030a4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d005      	beq.n	8004096 <ADC_ConversionStop+0x10e>
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d105      	bne.n	800409c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004090:	230c      	movs	r3, #12
 8004092:	617b      	str	r3, [r7, #20]
        break;
 8004094:	e005      	b.n	80040a2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004096:	2308      	movs	r3, #8
 8004098:	617b      	str	r3, [r7, #20]
        break;
 800409a:	e002      	b.n	80040a2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800409c:	2304      	movs	r3, #4
 800409e:	617b      	str	r3, [r7, #20]
        break;
 80040a0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80040a2:	f7fe fdb3 	bl	8002c0c <HAL_GetTick>
 80040a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80040a8:	e01b      	b.n	80040e2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80040aa:	f7fe fdaf 	bl	8002c0c <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d914      	bls.n	80040e2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	f043 0210 	orr.w	r2, r3, #16
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d6:	f043 0201 	orr.w	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e007      	b.n	80040f2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1dc      	bne.n	80040aa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	000cdbff 	.word	0x000cdbff

08004100 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7fe ff67 	bl	8002fe0 <LL_ADC_IsEnabled>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d16e      	bne.n	80041f6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	4b38      	ldr	r3, [pc, #224]	@ (8004200 <ADC_Enable+0x100>)
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412a:	f043 0210 	orr.w	r2, r3, #16
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004136:	f043 0201 	orr.w	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e05a      	b.n	80041f8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe ff22 	bl	8002f90 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800414c:	f7fe fd5e 	bl	8002c0c <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2b      	ldr	r2, [pc, #172]	@ (8004204 <ADC_Enable+0x104>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <ADC_Enable+0x66>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a29      	ldr	r2, [pc, #164]	@ (8004208 <ADC_Enable+0x108>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <ADC_Enable+0x6a>
 8004166:	4b29      	ldr	r3, [pc, #164]	@ (800420c <ADC_Enable+0x10c>)
 8004168:	e000      	b.n	800416c <ADC_Enable+0x6c>
 800416a:	4b29      	ldr	r3, [pc, #164]	@ (8004210 <ADC_Enable+0x110>)
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe feb3 	bl	8002ed8 <LL_ADC_GetMultimode>
 8004172:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a23      	ldr	r2, [pc, #140]	@ (8004208 <ADC_Enable+0x108>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d002      	beq.n	8004184 <ADC_Enable+0x84>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	e000      	b.n	8004186 <ADC_Enable+0x86>
 8004184:	4b1f      	ldr	r3, [pc, #124]	@ (8004204 <ADC_Enable+0x104>)
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6812      	ldr	r2, [r2, #0]
 800418a:	4293      	cmp	r3, r2
 800418c:	d02c      	beq.n	80041e8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d130      	bne.n	80041f6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004194:	e028      	b.n	80041e8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe ff20 	bl	8002fe0 <LL_ADC_IsEnabled>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d104      	bne.n	80041b0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fef0 	bl	8002f90 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041b0:	f7fe fd2c 	bl	8002c0c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d914      	bls.n	80041e8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d00d      	beq.n	80041e8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	f043 0210 	orr.w	r2, r3, #16
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041dc:	f043 0201 	orr.w	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e007      	b.n	80041f8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d1cf      	bne.n	8004196 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	8000003f 	.word	0x8000003f
 8004204:	40022000 	.word	0x40022000
 8004208:	40022100 	.word	0x40022100
 800420c:	40022300 	.word	0x40022300
 8004210:	58026300 	.word	0x58026300

08004214 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f7fe fef0 	bl	8003006 <LL_ADC_IsDisableOngoing>
 8004226:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe fed7 	bl	8002fe0 <LL_ADC_IsEnabled>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d047      	beq.n	80042c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d144      	bne.n	80042c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030d 	and.w	r3, r3, #13
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10c      	bne.n	8004266 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe feb1 	bl	8002fb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2203      	movs	r2, #3
 800425c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800425e:	f7fe fcd5 	bl	8002c0c <HAL_GetTick>
 8004262:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004264:	e029      	b.n	80042ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426a:	f043 0210 	orr.w	r2, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e023      	b.n	80042ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004282:	f7fe fcc3 	bl	8002c0c <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d914      	bls.n	80042ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a2:	f043 0210 	orr.w	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ae:	f043 0201 	orr.w	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e007      	b.n	80042ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1dc      	bne.n	8004282 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042de:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d14b      	bne.n	8004384 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d021      	beq.n	800434a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fd42 	bl	8002d94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d032      	beq.n	800437c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d12b      	bne.n	800437c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004328:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004334:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d11f      	bne.n	800437c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004340:	f043 0201 	orr.w	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	655a      	str	r2, [r3, #84]	@ 0x54
 8004348:	e018      	b.n	800437c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d111      	bne.n	800437c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004374:	f043 0201 	orr.w	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7fd ff45 	bl	800220c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004382:	e00e      	b.n	80043a2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7ff fa9f 	bl	80038d4 <HAL_ADC_ErrorCallback>
}
 8004396:	e004      	b.n	80043a2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	4798      	blx	r3
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f7ff fa81 	bl	80038c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e4:	f043 0204 	orr.w	r2, r3, #4
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff fa71 	bl	80038d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043f2:	bf00      	nop
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a7a      	ldr	r2, [pc, #488]	@ (80045f4 <ADC_ConfigureBoostMode+0x1f8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <ADC_ConfigureBoostMode+0x1c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a79      	ldr	r2, [pc, #484]	@ (80045f8 <ADC_ConfigureBoostMode+0x1fc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d109      	bne.n	800442c <ADC_ConfigureBoostMode+0x30>
 8004418:	4b78      	ldr	r3, [pc, #480]	@ (80045fc <ADC_ConfigureBoostMode+0x200>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e008      	b.n	800443e <ADC_ConfigureBoostMode+0x42>
 800442c:	4b74      	ldr	r3, [pc, #464]	@ (8004600 <ADC_ConfigureBoostMode+0x204>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004434:	2b00      	cmp	r3, #0
 8004436:	bf14      	ite	ne
 8004438:	2301      	movne	r3, #1
 800443a:	2300      	moveq	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01c      	beq.n	800447c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004442:	f005 fa97 	bl	8009974 <HAL_RCC_GetHCLKFreq>
 8004446:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004450:	d010      	beq.n	8004474 <ADC_ConfigureBoostMode+0x78>
 8004452:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004456:	d873      	bhi.n	8004540 <ADC_ConfigureBoostMode+0x144>
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800445c:	d002      	beq.n	8004464 <ADC_ConfigureBoostMode+0x68>
 800445e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004462:	d16d      	bne.n	8004540 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	60fb      	str	r3, [r7, #12]
        break;
 8004472:	e068      	b.n	8004546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	60fb      	str	r3, [r7, #12]
        break;
 800447a:	e064      	b.n	8004546 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800447c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	f006 fcdc 	bl	800ae40 <HAL_RCCEx_GetPeriphCLKFreq>
 8004488:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004492:	d051      	beq.n	8004538 <ADC_ConfigureBoostMode+0x13c>
 8004494:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004498:	d854      	bhi.n	8004544 <ADC_ConfigureBoostMode+0x148>
 800449a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800449e:	d047      	beq.n	8004530 <ADC_ConfigureBoostMode+0x134>
 80044a0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80044a4:	d84e      	bhi.n	8004544 <ADC_ConfigureBoostMode+0x148>
 80044a6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80044aa:	d03d      	beq.n	8004528 <ADC_ConfigureBoostMode+0x12c>
 80044ac:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80044b0:	d848      	bhi.n	8004544 <ADC_ConfigureBoostMode+0x148>
 80044b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044b6:	d033      	beq.n	8004520 <ADC_ConfigureBoostMode+0x124>
 80044b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044bc:	d842      	bhi.n	8004544 <ADC_ConfigureBoostMode+0x148>
 80044be:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80044c2:	d029      	beq.n	8004518 <ADC_ConfigureBoostMode+0x11c>
 80044c4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80044c8:	d83c      	bhi.n	8004544 <ADC_ConfigureBoostMode+0x148>
 80044ca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80044ce:	d01a      	beq.n	8004506 <ADC_ConfigureBoostMode+0x10a>
 80044d0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80044d4:	d836      	bhi.n	8004544 <ADC_ConfigureBoostMode+0x148>
 80044d6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80044da:	d014      	beq.n	8004506 <ADC_ConfigureBoostMode+0x10a>
 80044dc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80044e0:	d830      	bhi.n	8004544 <ADC_ConfigureBoostMode+0x148>
 80044e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044e6:	d00e      	beq.n	8004506 <ADC_ConfigureBoostMode+0x10a>
 80044e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ec:	d82a      	bhi.n	8004544 <ADC_ConfigureBoostMode+0x148>
 80044ee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044f2:	d008      	beq.n	8004506 <ADC_ConfigureBoostMode+0x10a>
 80044f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044f8:	d824      	bhi.n	8004544 <ADC_ConfigureBoostMode+0x148>
 80044fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044fe:	d002      	beq.n	8004506 <ADC_ConfigureBoostMode+0x10a>
 8004500:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004504:	d11e      	bne.n	8004544 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	0c9b      	lsrs	r3, r3, #18
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	60fb      	str	r3, [r7, #12]
        break;
 8004516:	e016      	b.n	8004546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	60fb      	str	r3, [r7, #12]
        break;
 800451e:	e012      	b.n	8004546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	60fb      	str	r3, [r7, #12]
        break;
 8004526:	e00e      	b.n	8004546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	099b      	lsrs	r3, r3, #6
 800452c:	60fb      	str	r3, [r7, #12]
        break;
 800452e:	e00a      	b.n	8004546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	09db      	lsrs	r3, r3, #7
 8004534:	60fb      	str	r3, [r7, #12]
        break;
 8004536:	e006      	b.n	8004546 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	60fb      	str	r3, [r7, #12]
        break;
 800453e:	e002      	b.n	8004546 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004540:	bf00      	nop
 8004542:	e000      	b.n	8004546 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004544:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004546:	f7fe fb91 	bl	8002c6c <HAL_GetREVID>
 800454a:	4603      	mov	r3, r0
 800454c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004550:	4293      	cmp	r3, r2
 8004552:	d815      	bhi.n	8004580 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a2b      	ldr	r2, [pc, #172]	@ (8004604 <ADC_ConfigureBoostMode+0x208>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d908      	bls.n	800456e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800456a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800456c:	e03e      	b.n	80045ec <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800457c:	609a      	str	r2, [r3, #8]
}
 800457e:	e035      	b.n	80045ec <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a1f      	ldr	r2, [pc, #124]	@ (8004608 <ADC_ConfigureBoostMode+0x20c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d808      	bhi.n	80045a0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800459c:	609a      	str	r2, [r3, #8]
}
 800459e:	e025      	b.n	80045ec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a1a      	ldr	r2, [pc, #104]	@ (800460c <ADC_ConfigureBoostMode+0x210>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d80a      	bhi.n	80045be <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	e016      	b.n	80045ec <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4a13      	ldr	r2, [pc, #76]	@ (8004610 <ADC_ConfigureBoostMode+0x214>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d80a      	bhi.n	80045dc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d8:	609a      	str	r2, [r3, #8]
}
 80045da:	e007      	b.n	80045ec <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80045ea:	609a      	str	r2, [r3, #8]
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40022000 	.word	0x40022000
 80045f8:	40022100 	.word	0x40022100
 80045fc:	40022300 	.word	0x40022300
 8004600:	58026300 	.word	0x58026300
 8004604:	01312d00 	.word	0x01312d00
 8004608:	005f5e10 	.word	0x005f5e10
 800460c:	00bebc20 	.word	0x00bebc20
 8004610:	017d7840 	.word	0x017d7840

08004614 <LL_ADC_IsEnabled>:
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <LL_ADC_IsEnabled+0x18>
 8004628:	2301      	movs	r3, #1
 800462a:	e000      	b.n	800462e <LL_ADC_IsEnabled+0x1a>
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <LL_ADC_StartCalibration>:
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <LL_ADC_StartCalibration+0x38>)
 800464e:	4013      	ands	r3, r2
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800465c:	430a      	orrs	r2, r1
 800465e:	4313      	orrs	r3, r2
 8004660:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	609a      	str	r2, [r3, #8]
}
 8004668:	bf00      	nop
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	3ffeffc0 	.word	0x3ffeffc0

08004678 <LL_ADC_IsCalibrationOnGoing>:
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800468c:	d101      	bne.n	8004692 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <LL_ADC_REG_IsConversionOngoing>:
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d101      	bne.n	80046b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_ADCEx_Calibration_Start+0x1e>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e04c      	b.n	8004780 <HAL_ADCEx_Calibration_Start+0xb8>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff fd90 	bl	8004214 <ADC_Disable>
 80046f4:	4603      	mov	r3, r0
 80046f6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d135      	bne.n	800476a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004702:	4b21      	ldr	r3, [pc, #132]	@ (8004788 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004704:	4013      	ands	r3, r2
 8004706:	f043 0202 	orr.w	r2, r3, #2
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff ff90 	bl	800463c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800471c:	e014      	b.n	8004748 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3301      	adds	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4a19      	ldr	r2, [pc, #100]	@ (800478c <HAL_ADCEx_Calibration_Start+0xc4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d30d      	bcc.n	8004748 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004730:	f023 0312 	bic.w	r3, r3, #18
 8004734:	f043 0210 	orr.w	r2, r3, #16
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e01b      	b.n	8004780 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ff93 	bl	8004678 <LL_ADC_IsCalibrationOnGoing>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e2      	bne.n	800471e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475c:	f023 0303 	bic.w	r3, r3, #3
 8004760:	f043 0201 	orr.w	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
 8004768:	e005      	b.n	8004776 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476e:	f043 0210 	orr.w	r2, r3, #16
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800477e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	ffffeefd 	.word	0xffffeefd
 800478c:	25c3f800 	.word	0x25c3f800

08004790 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b09f      	sub	sp, #124	@ 0x7c
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047aa:	2302      	movs	r3, #2
 80047ac:	e0be      	b.n	800492c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a5c      	ldr	r2, [pc, #368]	@ (8004934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d102      	bne.n	80047ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047c8:	4b5b      	ldr	r3, [pc, #364]	@ (8004938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	e001      	b.n	80047d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e09d      	b.n	800492c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff ff54 	bl	80046a0 <LL_ADC_REG_IsConversionOngoing>
 80047f8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff ff4e 	bl	80046a0 <LL_ADC_REG_IsConversionOngoing>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d17f      	bne.n	800490a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800480a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800480c:	2b00      	cmp	r3, #0
 800480e:	d17c      	bne.n	800490a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a47      	ldr	r2, [pc, #284]	@ (8004934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d004      	beq.n	8004824 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a46      	ldr	r2, [pc, #280]	@ (8004938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004824:	4b45      	ldr	r3, [pc, #276]	@ (800493c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004826:	e000      	b.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004828:	4b45      	ldr	r3, [pc, #276]	@ (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800482a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d039      	beq.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	431a      	orrs	r2, r3
 8004842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004844:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3a      	ldr	r2, [pc, #232]	@ (8004934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a38      	ldr	r2, [pc, #224]	@ (8004938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d10e      	bne.n	8004878 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800485a:	4836      	ldr	r0, [pc, #216]	@ (8004934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800485c:	f7ff feda 	bl	8004614 <LL_ADC_IsEnabled>
 8004860:	4604      	mov	r4, r0
 8004862:	4835      	ldr	r0, [pc, #212]	@ (8004938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004864:	f7ff fed6 	bl	8004614 <LL_ADC_IsEnabled>
 8004868:	4603      	mov	r3, r0
 800486a:	4323      	orrs	r3, r4
 800486c:	2b00      	cmp	r3, #0
 800486e:	bf0c      	ite	eq
 8004870:	2301      	moveq	r3, #1
 8004872:	2300      	movne	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e008      	b.n	800488a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004878:	4832      	ldr	r0, [pc, #200]	@ (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800487a:	f7ff fecb 	bl	8004614 <LL_ADC_IsEnabled>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d047      	beq.n	800491e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800488e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	4b2d      	ldr	r3, [pc, #180]	@ (8004948 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004894:	4013      	ands	r3, r2
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	6811      	ldr	r1, [r2, #0]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	6892      	ldr	r2, [r2, #8]
 800489e:	430a      	orrs	r2, r1
 80048a0:	431a      	orrs	r2, r3
 80048a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048a4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048a6:	e03a      	b.n	800491e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80048a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d10e      	bne.n	80048e6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80048c8:	481a      	ldr	r0, [pc, #104]	@ (8004934 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048ca:	f7ff fea3 	bl	8004614 <LL_ADC_IsEnabled>
 80048ce:	4604      	mov	r4, r0
 80048d0:	4819      	ldr	r0, [pc, #100]	@ (8004938 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048d2:	f7ff fe9f 	bl	8004614 <LL_ADC_IsEnabled>
 80048d6:	4603      	mov	r3, r0
 80048d8:	4323      	orrs	r3, r4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bf0c      	ite	eq
 80048de:	2301      	moveq	r3, #1
 80048e0:	2300      	movne	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	e008      	b.n	80048f8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80048e6:	4817      	ldr	r0, [pc, #92]	@ (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048e8:	f7ff fe94 	bl	8004614 <LL_ADC_IsEnabled>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bf0c      	ite	eq
 80048f2:	2301      	moveq	r3, #1
 80048f4:	2300      	movne	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d010      	beq.n	800491e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004902:	4013      	ands	r3, r2
 8004904:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004906:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004908:	e009      	b.n	800491e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800491c:	e000      	b.n	8004920 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800491e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004928:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800492c:	4618      	mov	r0, r3
 800492e:	377c      	adds	r7, #124	@ 0x7c
 8004930:	46bd      	mov	sp, r7
 8004932:	bd90      	pop	{r4, r7, pc}
 8004934:	40022000 	.word	0x40022000
 8004938:	40022100 	.word	0x40022100
 800493c:	40022300 	.word	0x40022300
 8004940:	58026300 	.word	0x58026300
 8004944:	58026000 	.word	0x58026000
 8004948:	fffff0e0 	.word	0xfffff0e0

0800494c <__NVIC_SetPriorityGrouping>:
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800495c:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <__NVIC_SetPriorityGrouping+0x40>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004968:	4013      	ands	r3, r2
 800496a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004974:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <__NVIC_SetPriorityGrouping+0x44>)
 8004976:	4313      	orrs	r3, r2
 8004978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800497a:	4a04      	ldr	r2, [pc, #16]	@ (800498c <__NVIC_SetPriorityGrouping+0x40>)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	60d3      	str	r3, [r2, #12]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	e000ed00 	.word	0xe000ed00
 8004990:	05fa0000 	.word	0x05fa0000

08004994 <__NVIC_GetPriorityGrouping>:
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004998:	4b04      	ldr	r3, [pc, #16]	@ (80049ac <__NVIC_GetPriorityGrouping+0x18>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 0307 	and.w	r3, r3, #7
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <__NVIC_EnableIRQ>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	db0b      	blt.n	80049da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	f003 021f 	and.w	r2, r3, #31
 80049c8:	4907      	ldr	r1, [pc, #28]	@ (80049e8 <__NVIC_EnableIRQ+0x38>)
 80049ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	2001      	movs	r0, #1
 80049d2:	fa00 f202 	lsl.w	r2, r0, r2
 80049d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	e000e100 	.word	0xe000e100

080049ec <__NVIC_SetPriority>:
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	6039      	str	r1, [r7, #0]
 80049f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	db0a      	blt.n	8004a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	490c      	ldr	r1, [pc, #48]	@ (8004a38 <__NVIC_SetPriority+0x4c>)
 8004a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a0a:	0112      	lsls	r2, r2, #4
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	440b      	add	r3, r1
 8004a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a14:	e00a      	b.n	8004a2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4908      	ldr	r1, [pc, #32]	@ (8004a3c <__NVIC_SetPriority+0x50>)
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	3b04      	subs	r3, #4
 8004a24:	0112      	lsls	r2, r2, #4
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	440b      	add	r3, r1
 8004a2a:	761a      	strb	r2, [r3, #24]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	e000e100 	.word	0xe000e100
 8004a3c:	e000ed00 	.word	0xe000ed00

08004a40 <NVIC_EncodePriority>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	b089      	sub	sp, #36	@ 0x24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f1c3 0307 	rsb	r3, r3, #7
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	bf28      	it	cs
 8004a5e:	2304      	movcs	r3, #4
 8004a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3304      	adds	r3, #4
 8004a66:	2b06      	cmp	r3, #6
 8004a68:	d902      	bls.n	8004a70 <NVIC_EncodePriority+0x30>
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	3b03      	subs	r3, #3
 8004a6e:	e000      	b.n	8004a72 <NVIC_EncodePriority+0x32>
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	401a      	ands	r2, r3
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	43d9      	mvns	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a98:	4313      	orrs	r3, r2
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3724      	adds	r7, #36	@ 0x24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ab8:	d301      	bcc.n	8004abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aba:	2301      	movs	r3, #1
 8004abc:	e00f      	b.n	8004ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004abe:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae8 <SysTick_Config+0x40>)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ac6:	210f      	movs	r1, #15
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004acc:	f7ff ff8e 	bl	80049ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <SysTick_Config+0x40>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ad6:	4b04      	ldr	r3, [pc, #16]	@ (8004ae8 <SysTick_Config+0x40>)
 8004ad8:	2207      	movs	r2, #7
 8004ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	e000e010 	.word	0xe000e010

08004aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff ff29 	bl	800494c <__NVIC_SetPriorityGrouping>
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b086      	sub	sp, #24
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	4603      	mov	r3, r0
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b10:	f7ff ff40 	bl	8004994 <__NVIC_GetPriorityGrouping>
 8004b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	f7ff ff90 	bl	8004a40 <NVIC_EncodePriority>
 8004b20:	4602      	mov	r2, r0
 8004b22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b26:	4611      	mov	r1, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff5f 	bl	80049ec <__NVIC_SetPriority>
}
 8004b2e:	bf00      	nop
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff33 	bl	80049b0 <__NVIC_EnableIRQ>
}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff ffa4 	bl	8004aa8 <SysTick_Config>
 8004b60:	4603      	mov	r3, r0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004b70:	f3bf 8f5f 	dmb	sy
}
 8004b74:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004b76:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <HAL_MPU_Disable+0x28>)
 8004b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7a:	4a06      	ldr	r2, [pc, #24]	@ (8004b94 <HAL_MPU_Disable+0x28>)
 8004b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b80:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004b82:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <HAL_MPU_Disable+0x2c>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	605a      	str	r2, [r3, #4]
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	e000ed00 	.word	0xe000ed00
 8004b98:	e000ed90 	.word	0xe000ed90

08004b9c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8004bd4 <HAL_MPU_Enable+0x38>)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004bae:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd8 <HAL_MPU_Enable+0x3c>)
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	4a09      	ldr	r2, [pc, #36]	@ (8004bd8 <HAL_MPU_Enable+0x3c>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004bba:	f3bf 8f4f 	dsb	sy
}
 8004bbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bc0:	f3bf 8f6f 	isb	sy
}
 8004bc4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	e000ed90 	.word	0xe000ed90
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	785a      	ldrb	r2, [r3, #1]
 8004be8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <HAL_MPU_ConfigRegion+0x84>)
 8004bea:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d029      	beq.n	8004c48 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c60 <HAL_MPU_ConfigRegion+0x84>)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	7b1b      	ldrb	r3, [r3, #12]
 8004c00:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	7adb      	ldrb	r3, [r3, #11]
 8004c06:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	7a9b      	ldrb	r3, [r3, #10]
 8004c0e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004c10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	7b5b      	ldrb	r3, [r3, #13]
 8004c16:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004c18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	7b9b      	ldrb	r3, [r3, #14]
 8004c1e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004c20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	7bdb      	ldrb	r3, [r3, #15]
 8004c26:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004c28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	7a5b      	ldrb	r3, [r3, #9]
 8004c2e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004c30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	7a1b      	ldrb	r3, [r3, #8]
 8004c36:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004c38:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c40:	4a07      	ldr	r2, [pc, #28]	@ (8004c60 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c42:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c44:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004c46:	e005      	b.n	8004c54 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004c48:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <HAL_MPU_ConfigRegion+0x84>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004c4e:	4b04      	ldr	r3, [pc, #16]	@ (8004c60 <HAL_MPU_ConfigRegion+0x84>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	611a      	str	r2, [r3, #16]
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	e000ed90 	.word	0xe000ed90

08004c64 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e014      	b.n	8004ca0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	791b      	ldrb	r3, [r3, #4]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fc fa98 	bl	80011bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	795b      	ldrb	r3, [r3, #5]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_DAC_Start_DMA+0x1e>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e0ab      	b.n	8004e1e <HAL_DAC_Start_DMA+0x176>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d12f      	bne.n	8004d38 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a52      	ldr	r2, [pc, #328]	@ (8004e28 <HAL_DAC_Start_DMA+0x180>)
 8004cde:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a51      	ldr	r2, [pc, #324]	@ (8004e2c <HAL_DAC_Start_DMA+0x184>)
 8004ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4a50      	ldr	r2, [pc, #320]	@ (8004e30 <HAL_DAC_Start_DMA+0x188>)
 8004cee:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cfe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d013      	beq.n	8004d2e <HAL_DAC_Start_DMA+0x86>
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d845      	bhi.n	8004d98 <HAL_DAC_Start_DMA+0xf0>
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_DAC_Start_DMA+0x72>
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d005      	beq.n	8004d24 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004d18:	e03e      	b.n	8004d98 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	613b      	str	r3, [r7, #16]
        break;
 8004d22:	e03c      	b.n	8004d9e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	613b      	str	r3, [r7, #16]
        break;
 8004d2c:	e037      	b.n	8004d9e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3310      	adds	r3, #16
 8004d34:	613b      	str	r3, [r7, #16]
        break;
 8004d36:	e032      	b.n	8004d9e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e34 <HAL_DAC_Start_DMA+0x18c>)
 8004d3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4a3c      	ldr	r2, [pc, #240]	@ (8004e38 <HAL_DAC_Start_DMA+0x190>)
 8004d46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4a3b      	ldr	r2, [pc, #236]	@ (8004e3c <HAL_DAC_Start_DMA+0x194>)
 8004d4e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d5e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d013      	beq.n	8004d8e <HAL_DAC_Start_DMA+0xe6>
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d817      	bhi.n	8004d9c <HAL_DAC_Start_DMA+0xf4>
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_DAC_Start_DMA+0xd2>
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d005      	beq.n	8004d84 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004d78:	e010      	b.n	8004d9c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3314      	adds	r3, #20
 8004d80:	613b      	str	r3, [r7, #16]
        break;
 8004d82:	e00c      	b.n	8004d9e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3318      	adds	r3, #24
 8004d8a:	613b      	str	r3, [r7, #16]
        break;
 8004d8c:	e007      	b.n	8004d9e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	331c      	adds	r3, #28
 8004d94:	613b      	str	r3, [r7, #16]
        break;
 8004d96:	e002      	b.n	8004d9e <HAL_DAC_Start_DMA+0xf6>
        break;
 8004d98:	bf00      	nop
 8004d9a:	e000      	b.n	8004d9e <HAL_DAC_Start_DMA+0xf6>
        break;
 8004d9c:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d111      	bne.n	8004dc8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004db2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6898      	ldr	r0, [r3, #8]
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	f000 ff37 	bl	8005c30 <HAL_DMA_Start_IT>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	75fb      	strb	r3, [r7, #23]
 8004dc6:	e010      	b.n	8004dea <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004dd6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68d8      	ldr	r0, [r3, #12]
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	f000 ff25 	bl	8005c30 <HAL_DMA_Start_IT>
 8004de6:	4603      	mov	r3, r0
 8004de8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10c      	bne.n	8004e10 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6819      	ldr	r1, [r3, #0]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2201      	movs	r2, #1
 8004e04:	409a      	lsls	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e005      	b.n	8004e1c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	f043 0204 	orr.w	r2, r3, #4
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	080050f9 	.word	0x080050f9
 8004e2c:	0800511b 	.word	0x0800511b
 8004e30:	08005137 	.word	0x08005137
 8004e34:	080051a1 	.word	0x080051a1
 8004e38:	080051c3 	.word	0x080051c3
 8004e3c:	080051df 	.word	0x080051df

08004e40 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	795b      	ldrb	r3, [r3, #5]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_DAC_ConfigChannel+0x18>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e12a      	b.n	80050ea <HAL_DAC_ConfigChannel+0x26e>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	f040 8081 	bne.w	8004fac <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004eaa:	f7fd feaf 	bl	8002c0c <HAL_GetTick>
 8004eae:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d140      	bne.n	8004f38 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004eb6:	e018      	b.n	8004eea <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004eb8:	f7fd fea8 	bl	8002c0c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d911      	bls.n	8004eea <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ecc:	4b89      	ldr	r3, [pc, #548]	@ (80050f4 <HAL_DAC_ConfigChannel+0x278>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f043 0208 	orr.w	r2, r3, #8
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e0ff      	b.n	80050ea <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ef0:	4b80      	ldr	r3, [pc, #512]	@ (80050f4 <HAL_DAC_ConfigChannel+0x278>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1df      	bne.n	8004eb8 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f7fd fe93 	bl	8002c24 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	6992      	ldr	r2, [r2, #24]
 8004f06:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f08:	e023      	b.n	8004f52 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004f0a:	f7fd fe7f 	bl	8002c0c <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d90f      	bls.n	8004f38 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	da0a      	bge.n	8004f38 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f043 0208 	orr.w	r2, r3, #8
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2203      	movs	r2, #3
 8004f32:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e0d8      	b.n	80050ea <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	dbe3      	blt.n	8004f0a <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8004f42:	2001      	movs	r0, #1
 8004f44:	f7fd fe6e 	bl	8002c24 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	6992      	ldr	r2, [r2, #24]
 8004f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	ea02 0103 	and.w	r1, r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	409a      	lsls	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	21ff      	movs	r1, #255	@ 0xff
 8004f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	ea02 0103 	and.w	r1, r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	6a1a      	ldr	r2, [r3, #32]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d11d      	bne.n	8004ff0 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fba:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	221f      	movs	r2, #31
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f003 0310 	and.w	r3, r3, #16
 8004ffe:	2207      	movs	r2, #7
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4013      	ands	r3, r2
 800500a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d102      	bne.n	800501a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005014:	2300      	movs	r3, #0
 8005016:	61fb      	str	r3, [r7, #28]
 8005018:	e00f      	b.n	800503a <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d102      	bne.n	8005028 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005022:	2301      	movs	r3, #1
 8005024:	61fb      	str	r3, [r7, #28]
 8005026:	e008      	b.n	800503a <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005030:	2301      	movs	r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	e001      	b.n	800503a <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	4313      	orrs	r3, r2
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6819      	ldr	r1, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43da      	mvns	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	400a      	ands	r2, r1
 8005080:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	43db      	mvns	r3, r3
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4013      	ands	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6819      	ldr	r1, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	22c0      	movs	r2, #192	@ 0xc0
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43da      	mvns	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	400a      	ands	r2, r1
 80050da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3720      	adds	r7, #32
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20008000 	.word	0x20008000

080050f8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005104:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff fe9a 	bl	8004e40 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	711a      	strb	r2, [r3, #4]
}
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff fe93 	bl	8004e54 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005142:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f043 0204 	orr.w	r2, r3, #4
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7ff fe89 	bl	8004e68 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	711a      	strb	r2, [r3, #4]
}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff ffd8 	bl	8005164 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	711a      	strb	r2, [r3, #4]
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff ffd1 	bl	8005178 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f043 0204 	orr.w	r2, r3, #4
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff ffc7 	bl	800518c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	711a      	strb	r2, [r3, #4]
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005214:	f7fd fcfa 	bl	8002c0c <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e316      	b.n	8005852 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a66      	ldr	r2, [pc, #408]	@ (80053c4 <HAL_DMA_Init+0x1b8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d04a      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a65      	ldr	r2, [pc, #404]	@ (80053c8 <HAL_DMA_Init+0x1bc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d045      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a63      	ldr	r2, [pc, #396]	@ (80053cc <HAL_DMA_Init+0x1c0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d040      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a62      	ldr	r2, [pc, #392]	@ (80053d0 <HAL_DMA_Init+0x1c4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d03b      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a60      	ldr	r2, [pc, #384]	@ (80053d4 <HAL_DMA_Init+0x1c8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d036      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a5f      	ldr	r2, [pc, #380]	@ (80053d8 <HAL_DMA_Init+0x1cc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d031      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a5d      	ldr	r2, [pc, #372]	@ (80053dc <HAL_DMA_Init+0x1d0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d02c      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a5c      	ldr	r2, [pc, #368]	@ (80053e0 <HAL_DMA_Init+0x1d4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d027      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a5a      	ldr	r2, [pc, #360]	@ (80053e4 <HAL_DMA_Init+0x1d8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a59      	ldr	r2, [pc, #356]	@ (80053e8 <HAL_DMA_Init+0x1dc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d01d      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a57      	ldr	r2, [pc, #348]	@ (80053ec <HAL_DMA_Init+0x1e0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a56      	ldr	r2, [pc, #344]	@ (80053f0 <HAL_DMA_Init+0x1e4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a54      	ldr	r2, [pc, #336]	@ (80053f4 <HAL_DMA_Init+0x1e8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a53      	ldr	r2, [pc, #332]	@ (80053f8 <HAL_DMA_Init+0x1ec>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a51      	ldr	r2, [pc, #324]	@ (80053fc <HAL_DMA_Init+0x1f0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_DMA_Init+0xb8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a50      	ldr	r2, [pc, #320]	@ (8005400 <HAL_DMA_Init+0x1f4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d101      	bne.n	80052c8 <HAL_DMA_Init+0xbc>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <HAL_DMA_Init+0xbe>
 80052c8:	2300      	movs	r3, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 813b 	beq.w	8005546 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a37      	ldr	r2, [pc, #220]	@ (80053c4 <HAL_DMA_Init+0x1b8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d04a      	beq.n	8005380 <HAL_DMA_Init+0x174>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a36      	ldr	r2, [pc, #216]	@ (80053c8 <HAL_DMA_Init+0x1bc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d045      	beq.n	8005380 <HAL_DMA_Init+0x174>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a34      	ldr	r2, [pc, #208]	@ (80053cc <HAL_DMA_Init+0x1c0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d040      	beq.n	8005380 <HAL_DMA_Init+0x174>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a33      	ldr	r2, [pc, #204]	@ (80053d0 <HAL_DMA_Init+0x1c4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d03b      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a31      	ldr	r2, [pc, #196]	@ (80053d4 <HAL_DMA_Init+0x1c8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d036      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a30      	ldr	r2, [pc, #192]	@ (80053d8 <HAL_DMA_Init+0x1cc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d031      	beq.n	8005380 <HAL_DMA_Init+0x174>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2e      	ldr	r2, [pc, #184]	@ (80053dc <HAL_DMA_Init+0x1d0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d02c      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2d      	ldr	r2, [pc, #180]	@ (80053e0 <HAL_DMA_Init+0x1d4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d027      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2b      	ldr	r2, [pc, #172]	@ (80053e4 <HAL_DMA_Init+0x1d8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d022      	beq.n	8005380 <HAL_DMA_Init+0x174>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a2a      	ldr	r2, [pc, #168]	@ (80053e8 <HAL_DMA_Init+0x1dc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d01d      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a28      	ldr	r2, [pc, #160]	@ (80053ec <HAL_DMA_Init+0x1e0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d018      	beq.n	8005380 <HAL_DMA_Init+0x174>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a27      	ldr	r2, [pc, #156]	@ (80053f0 <HAL_DMA_Init+0x1e4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a25      	ldr	r2, [pc, #148]	@ (80053f4 <HAL_DMA_Init+0x1e8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00e      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a24      	ldr	r2, [pc, #144]	@ (80053f8 <HAL_DMA_Init+0x1ec>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_DMA_Init+0x174>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a22      	ldr	r2, [pc, #136]	@ (80053fc <HAL_DMA_Init+0x1f0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_DMA_Init+0x174>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a21      	ldr	r2, [pc, #132]	@ (8005400 <HAL_DMA_Init+0x1f4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d108      	bne.n	8005392 <HAL_DMA_Init+0x186>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e007      	b.n	80053a2 <HAL_DMA_Init+0x196>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053a2:	e02f      	b.n	8005404 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053a4:	f7fd fc32 	bl	8002c0c <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d928      	bls.n	8005404 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2203      	movs	r2, #3
 80053bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e246      	b.n	8005852 <HAL_DMA_Init+0x646>
 80053c4:	40020010 	.word	0x40020010
 80053c8:	40020028 	.word	0x40020028
 80053cc:	40020040 	.word	0x40020040
 80053d0:	40020058 	.word	0x40020058
 80053d4:	40020070 	.word	0x40020070
 80053d8:	40020088 	.word	0x40020088
 80053dc:	400200a0 	.word	0x400200a0
 80053e0:	400200b8 	.word	0x400200b8
 80053e4:	40020410 	.word	0x40020410
 80053e8:	40020428 	.word	0x40020428
 80053ec:	40020440 	.word	0x40020440
 80053f0:	40020458 	.word	0x40020458
 80053f4:	40020470 	.word	0x40020470
 80053f8:	40020488 	.word	0x40020488
 80053fc:	400204a0 	.word	0x400204a0
 8005400:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1c8      	bne.n	80053a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4b83      	ldr	r3, [pc, #524]	@ (800562c <HAL_DMA_Init+0x420>)
 800541e:	4013      	ands	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800542a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005436:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005442:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005454:	2b04      	cmp	r3, #4
 8005456:	d107      	bne.n	8005468 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005460:	4313      	orrs	r3, r2
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005468:	4b71      	ldr	r3, [pc, #452]	@ (8005630 <HAL_DMA_Init+0x424>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b71      	ldr	r3, [pc, #452]	@ (8005634 <HAL_DMA_Init+0x428>)
 800546e:	4013      	ands	r3, r2
 8005470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005474:	d328      	bcc.n	80054c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b28      	cmp	r3, #40	@ 0x28
 800547c:	d903      	bls.n	8005486 <HAL_DMA_Init+0x27a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b2e      	cmp	r3, #46	@ 0x2e
 8005484:	d917      	bls.n	80054b6 <HAL_DMA_Init+0x2aa>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b3e      	cmp	r3, #62	@ 0x3e
 800548c:	d903      	bls.n	8005496 <HAL_DMA_Init+0x28a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b42      	cmp	r3, #66	@ 0x42
 8005494:	d90f      	bls.n	80054b6 <HAL_DMA_Init+0x2aa>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b46      	cmp	r3, #70	@ 0x46
 800549c:	d903      	bls.n	80054a6 <HAL_DMA_Init+0x29a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b48      	cmp	r3, #72	@ 0x48
 80054a4:	d907      	bls.n	80054b6 <HAL_DMA_Init+0x2aa>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80054ac:	d905      	bls.n	80054ba <HAL_DMA_Init+0x2ae>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2b52      	cmp	r3, #82	@ 0x52
 80054b4:	d801      	bhi.n	80054ba <HAL_DMA_Init+0x2ae>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <HAL_DMA_Init+0x2b0>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0307 	bic.w	r3, r3, #7
 80054de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d117      	bne.n	8005522 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00e      	beq.n	8005522 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f002 fce9 	bl	8007edc <DMA_CheckFifoParam>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2240      	movs	r2, #64	@ 0x40
 8005514:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e197      	b.n	8005852 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f002 fc24 	bl	8007d78 <DMA_CalcBaseAndBitshift>
 8005530:	4603      	mov	r3, r0
 8005532:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	223f      	movs	r2, #63	@ 0x3f
 800553e:	409a      	lsls	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	609a      	str	r2, [r3, #8]
 8005544:	e0cd      	b.n	80056e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a3b      	ldr	r2, [pc, #236]	@ (8005638 <HAL_DMA_Init+0x42c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d022      	beq.n	8005596 <HAL_DMA_Init+0x38a>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a39      	ldr	r2, [pc, #228]	@ (800563c <HAL_DMA_Init+0x430>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01d      	beq.n	8005596 <HAL_DMA_Init+0x38a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a38      	ldr	r2, [pc, #224]	@ (8005640 <HAL_DMA_Init+0x434>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d018      	beq.n	8005596 <HAL_DMA_Init+0x38a>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a36      	ldr	r2, [pc, #216]	@ (8005644 <HAL_DMA_Init+0x438>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <HAL_DMA_Init+0x38a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a35      	ldr	r2, [pc, #212]	@ (8005648 <HAL_DMA_Init+0x43c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00e      	beq.n	8005596 <HAL_DMA_Init+0x38a>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a33      	ldr	r2, [pc, #204]	@ (800564c <HAL_DMA_Init+0x440>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d009      	beq.n	8005596 <HAL_DMA_Init+0x38a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a32      	ldr	r2, [pc, #200]	@ (8005650 <HAL_DMA_Init+0x444>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d004      	beq.n	8005596 <HAL_DMA_Init+0x38a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a30      	ldr	r2, [pc, #192]	@ (8005654 <HAL_DMA_Init+0x448>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d101      	bne.n	800559a <HAL_DMA_Init+0x38e>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <HAL_DMA_Init+0x390>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8097 	beq.w	80056d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a24      	ldr	r2, [pc, #144]	@ (8005638 <HAL_DMA_Init+0x42c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d021      	beq.n	80055f0 <HAL_DMA_Init+0x3e4>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a22      	ldr	r2, [pc, #136]	@ (800563c <HAL_DMA_Init+0x430>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01c      	beq.n	80055f0 <HAL_DMA_Init+0x3e4>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a21      	ldr	r2, [pc, #132]	@ (8005640 <HAL_DMA_Init+0x434>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d017      	beq.n	80055f0 <HAL_DMA_Init+0x3e4>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005644 <HAL_DMA_Init+0x438>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d012      	beq.n	80055f0 <HAL_DMA_Init+0x3e4>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005648 <HAL_DMA_Init+0x43c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00d      	beq.n	80055f0 <HAL_DMA_Init+0x3e4>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1c      	ldr	r2, [pc, #112]	@ (800564c <HAL_DMA_Init+0x440>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d008      	beq.n	80055f0 <HAL_DMA_Init+0x3e4>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005650 <HAL_DMA_Init+0x444>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d003      	beq.n	80055f0 <HAL_DMA_Init+0x3e4>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a19      	ldr	r2, [pc, #100]	@ (8005654 <HAL_DMA_Init+0x448>)
 80055ee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4b13      	ldr	r3, [pc, #76]	@ (8005658 <HAL_DMA_Init+0x44c>)
 800560c:	4013      	ands	r3, r2
 800560e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2b40      	cmp	r3, #64	@ 0x40
 8005616:	d021      	beq.n	800565c <HAL_DMA_Init+0x450>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b80      	cmp	r3, #128	@ 0x80
 800561e:	d102      	bne.n	8005626 <HAL_DMA_Init+0x41a>
 8005620:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005624:	e01b      	b.n	800565e <HAL_DMA_Init+0x452>
 8005626:	2300      	movs	r3, #0
 8005628:	e019      	b.n	800565e <HAL_DMA_Init+0x452>
 800562a:	bf00      	nop
 800562c:	fe10803f 	.word	0xfe10803f
 8005630:	5c001000 	.word	0x5c001000
 8005634:	ffff0000 	.word	0xffff0000
 8005638:	58025408 	.word	0x58025408
 800563c:	5802541c 	.word	0x5802541c
 8005640:	58025430 	.word	0x58025430
 8005644:	58025444 	.word	0x58025444
 8005648:	58025458 	.word	0x58025458
 800564c:	5802546c 	.word	0x5802546c
 8005650:	58025480 	.word	0x58025480
 8005654:	58025494 	.word	0x58025494
 8005658:	fffe000f 	.word	0xfffe000f
 800565c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68d2      	ldr	r2, [r2, #12]
 8005662:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005664:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800566c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005674:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800567c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005684:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800568c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	4b6e      	ldr	r3, [pc, #440]	@ (800585c <HAL_DMA_Init+0x650>)
 80056a4:	4413      	add	r3, r2
 80056a6:	4a6e      	ldr	r2, [pc, #440]	@ (8005860 <HAL_DMA_Init+0x654>)
 80056a8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	009a      	lsls	r2, r3, #2
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f002 fb5f 	bl	8007d78 <DMA_CalcBaseAndBitshift>
 80056ba:	4603      	mov	r3, r0
 80056bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c2:	f003 031f 	and.w	r3, r3, #31
 80056c6:	2201      	movs	r2, #1
 80056c8:	409a      	lsls	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	e008      	b.n	80056e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2240      	movs	r2, #64	@ 0x40
 80056d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2203      	movs	r2, #3
 80056da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e0b7      	b.n	8005852 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a5f      	ldr	r2, [pc, #380]	@ (8005864 <HAL_DMA_Init+0x658>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d072      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005868 <HAL_DMA_Init+0x65c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d06d      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a5c      	ldr	r2, [pc, #368]	@ (800586c <HAL_DMA_Init+0x660>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d068      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a5a      	ldr	r2, [pc, #360]	@ (8005870 <HAL_DMA_Init+0x664>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d063      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a59      	ldr	r2, [pc, #356]	@ (8005874 <HAL_DMA_Init+0x668>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d05e      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a57      	ldr	r2, [pc, #348]	@ (8005878 <HAL_DMA_Init+0x66c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d059      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a56      	ldr	r2, [pc, #344]	@ (800587c <HAL_DMA_Init+0x670>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d054      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a54      	ldr	r2, [pc, #336]	@ (8005880 <HAL_DMA_Init+0x674>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d04f      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a53      	ldr	r2, [pc, #332]	@ (8005884 <HAL_DMA_Init+0x678>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d04a      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a51      	ldr	r2, [pc, #324]	@ (8005888 <HAL_DMA_Init+0x67c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d045      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a50      	ldr	r2, [pc, #320]	@ (800588c <HAL_DMA_Init+0x680>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d040      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a4e      	ldr	r2, [pc, #312]	@ (8005890 <HAL_DMA_Init+0x684>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d03b      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a4d      	ldr	r2, [pc, #308]	@ (8005894 <HAL_DMA_Init+0x688>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d036      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a4b      	ldr	r2, [pc, #300]	@ (8005898 <HAL_DMA_Init+0x68c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d031      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a4a      	ldr	r2, [pc, #296]	@ (800589c <HAL_DMA_Init+0x690>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d02c      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a48      	ldr	r2, [pc, #288]	@ (80058a0 <HAL_DMA_Init+0x694>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d027      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a47      	ldr	r2, [pc, #284]	@ (80058a4 <HAL_DMA_Init+0x698>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d022      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a45      	ldr	r2, [pc, #276]	@ (80058a8 <HAL_DMA_Init+0x69c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01d      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a44      	ldr	r2, [pc, #272]	@ (80058ac <HAL_DMA_Init+0x6a0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d018      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a42      	ldr	r2, [pc, #264]	@ (80058b0 <HAL_DMA_Init+0x6a4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a41      	ldr	r2, [pc, #260]	@ (80058b4 <HAL_DMA_Init+0x6a8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00e      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a3f      	ldr	r2, [pc, #252]	@ (80058b8 <HAL_DMA_Init+0x6ac>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a3e      	ldr	r2, [pc, #248]	@ (80058bc <HAL_DMA_Init+0x6b0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_DMA_Init+0x5c6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a3c      	ldr	r2, [pc, #240]	@ (80058c0 <HAL_DMA_Init+0x6b4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d101      	bne.n	80057d6 <HAL_DMA_Init+0x5ca>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <HAL_DMA_Init+0x5cc>
 80057d6:	2300      	movs	r3, #0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d032      	beq.n	8005842 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f002 fbf9 	bl	8007fd4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b80      	cmp	r3, #128	@ 0x80
 80057e8:	d102      	bne.n	80057f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005804:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d010      	beq.n	8005830 <HAL_DMA_Init+0x624>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b08      	cmp	r3, #8
 8005814:	d80c      	bhi.n	8005830 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f002 fc76 	bl	8008108 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	e008      	b.n	8005842 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	a7fdabf8 	.word	0xa7fdabf8
 8005860:	cccccccd 	.word	0xcccccccd
 8005864:	40020010 	.word	0x40020010
 8005868:	40020028 	.word	0x40020028
 800586c:	40020040 	.word	0x40020040
 8005870:	40020058 	.word	0x40020058
 8005874:	40020070 	.word	0x40020070
 8005878:	40020088 	.word	0x40020088
 800587c:	400200a0 	.word	0x400200a0
 8005880:	400200b8 	.word	0x400200b8
 8005884:	40020410 	.word	0x40020410
 8005888:	40020428 	.word	0x40020428
 800588c:	40020440 	.word	0x40020440
 8005890:	40020458 	.word	0x40020458
 8005894:	40020470 	.word	0x40020470
 8005898:	40020488 	.word	0x40020488
 800589c:	400204a0 	.word	0x400204a0
 80058a0:	400204b8 	.word	0x400204b8
 80058a4:	58025408 	.word	0x58025408
 80058a8:	5802541c 	.word	0x5802541c
 80058ac:	58025430 	.word	0x58025430
 80058b0:	58025444 	.word	0x58025444
 80058b4:	58025458 	.word	0x58025458
 80058b8:	5802546c 	.word	0x5802546c
 80058bc:	58025480 	.word	0x58025480
 80058c0:	58025494 	.word	0x58025494

080058c4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e1a8      	b.n	8005c28 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a82      	ldr	r2, [pc, #520]	@ (8005ae4 <HAL_DMA_DeInit+0x220>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d04a      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a80      	ldr	r2, [pc, #512]	@ (8005ae8 <HAL_DMA_DeInit+0x224>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d045      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a7f      	ldr	r2, [pc, #508]	@ (8005aec <HAL_DMA_DeInit+0x228>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d040      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a7d      	ldr	r2, [pc, #500]	@ (8005af0 <HAL_DMA_DeInit+0x22c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d03b      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a7c      	ldr	r2, [pc, #496]	@ (8005af4 <HAL_DMA_DeInit+0x230>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d036      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a7a      	ldr	r2, [pc, #488]	@ (8005af8 <HAL_DMA_DeInit+0x234>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d031      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a79      	ldr	r2, [pc, #484]	@ (8005afc <HAL_DMA_DeInit+0x238>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d02c      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a77      	ldr	r2, [pc, #476]	@ (8005b00 <HAL_DMA_DeInit+0x23c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d027      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a76      	ldr	r2, [pc, #472]	@ (8005b04 <HAL_DMA_DeInit+0x240>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d022      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a74      	ldr	r2, [pc, #464]	@ (8005b08 <HAL_DMA_DeInit+0x244>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d01d      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a73      	ldr	r2, [pc, #460]	@ (8005b0c <HAL_DMA_DeInit+0x248>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d018      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a71      	ldr	r2, [pc, #452]	@ (8005b10 <HAL_DMA_DeInit+0x24c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a70      	ldr	r2, [pc, #448]	@ (8005b14 <HAL_DMA_DeInit+0x250>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00e      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a6e      	ldr	r2, [pc, #440]	@ (8005b18 <HAL_DMA_DeInit+0x254>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d009      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a6d      	ldr	r2, [pc, #436]	@ (8005b1c <HAL_DMA_DeInit+0x258>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_DMA_DeInit+0xb2>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a6b      	ldr	r2, [pc, #428]	@ (8005b20 <HAL_DMA_DeInit+0x25c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d108      	bne.n	8005988 <HAL_DMA_DeInit+0xc4>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0201 	bic.w	r2, r2, #1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e007      	b.n	8005998 <HAL_DMA_DeInit+0xd4>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0201 	bic.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a51      	ldr	r2, [pc, #324]	@ (8005ae4 <HAL_DMA_DeInit+0x220>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d04a      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a50      	ldr	r2, [pc, #320]	@ (8005ae8 <HAL_DMA_DeInit+0x224>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d045      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a4e      	ldr	r2, [pc, #312]	@ (8005aec <HAL_DMA_DeInit+0x228>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d040      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a4d      	ldr	r2, [pc, #308]	@ (8005af0 <HAL_DMA_DeInit+0x22c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d03b      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a4b      	ldr	r2, [pc, #300]	@ (8005af4 <HAL_DMA_DeInit+0x230>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d036      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a4a      	ldr	r2, [pc, #296]	@ (8005af8 <HAL_DMA_DeInit+0x234>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d031      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a48      	ldr	r2, [pc, #288]	@ (8005afc <HAL_DMA_DeInit+0x238>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d02c      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a47      	ldr	r2, [pc, #284]	@ (8005b00 <HAL_DMA_DeInit+0x23c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d027      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a45      	ldr	r2, [pc, #276]	@ (8005b04 <HAL_DMA_DeInit+0x240>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d022      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a44      	ldr	r2, [pc, #272]	@ (8005b08 <HAL_DMA_DeInit+0x244>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d01d      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a42      	ldr	r2, [pc, #264]	@ (8005b0c <HAL_DMA_DeInit+0x248>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d018      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a41      	ldr	r2, [pc, #260]	@ (8005b10 <HAL_DMA_DeInit+0x24c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d013      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a3f      	ldr	r2, [pc, #252]	@ (8005b14 <HAL_DMA_DeInit+0x250>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00e      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8005b18 <HAL_DMA_DeInit+0x254>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d009      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a3c      	ldr	r2, [pc, #240]	@ (8005b1c <HAL_DMA_DeInit+0x258>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d004      	beq.n	8005a38 <HAL_DMA_DeInit+0x174>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a3b      	ldr	r2, [pc, #236]	@ (8005b20 <HAL_DMA_DeInit+0x25c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d101      	bne.n	8005a3c <HAL_DMA_DeInit+0x178>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <HAL_DMA_DeInit+0x17a>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d025      	beq.n	8005a8e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2200      	movs	r2, #0
 8005a58:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2200      	movs	r2, #0
 8005a68:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2221      	movs	r2, #33	@ 0x21
 8005a70:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f002 f980 	bl	8007d78 <DMA_CalcBaseAndBitshift>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	223f      	movs	r2, #63	@ 0x3f
 8005a86:	409a      	lsls	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	609a      	str	r2, [r3, #8]
 8005a8c:	e081      	b.n	8005b92 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a24      	ldr	r2, [pc, #144]	@ (8005b24 <HAL_DMA_DeInit+0x260>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d022      	beq.n	8005ade <HAL_DMA_DeInit+0x21a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a22      	ldr	r2, [pc, #136]	@ (8005b28 <HAL_DMA_DeInit+0x264>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01d      	beq.n	8005ade <HAL_DMA_DeInit+0x21a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a21      	ldr	r2, [pc, #132]	@ (8005b2c <HAL_DMA_DeInit+0x268>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d018      	beq.n	8005ade <HAL_DMA_DeInit+0x21a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8005b30 <HAL_DMA_DeInit+0x26c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d013      	beq.n	8005ade <HAL_DMA_DeInit+0x21a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1e      	ldr	r2, [pc, #120]	@ (8005b34 <HAL_DMA_DeInit+0x270>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00e      	beq.n	8005ade <HAL_DMA_DeInit+0x21a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b38 <HAL_DMA_DeInit+0x274>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d009      	beq.n	8005ade <HAL_DMA_DeInit+0x21a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1b      	ldr	r2, [pc, #108]	@ (8005b3c <HAL_DMA_DeInit+0x278>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d004      	beq.n	8005ade <HAL_DMA_DeInit+0x21a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a19      	ldr	r2, [pc, #100]	@ (8005b40 <HAL_DMA_DeInit+0x27c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d132      	bne.n	8005b44 <HAL_DMA_DeInit+0x280>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e031      	b.n	8005b46 <HAL_DMA_DeInit+0x282>
 8005ae2:	bf00      	nop
 8005ae4:	40020010 	.word	0x40020010
 8005ae8:	40020028 	.word	0x40020028
 8005aec:	40020040 	.word	0x40020040
 8005af0:	40020058 	.word	0x40020058
 8005af4:	40020070 	.word	0x40020070
 8005af8:	40020088 	.word	0x40020088
 8005afc:	400200a0 	.word	0x400200a0
 8005b00:	400200b8 	.word	0x400200b8
 8005b04:	40020410 	.word	0x40020410
 8005b08:	40020428 	.word	0x40020428
 8005b0c:	40020440 	.word	0x40020440
 8005b10:	40020458 	.word	0x40020458
 8005b14:	40020470 	.word	0x40020470
 8005b18:	40020488 	.word	0x40020488
 8005b1c:	400204a0 	.word	0x400204a0
 8005b20:	400204b8 	.word	0x400204b8
 8005b24:	58025408 	.word	0x58025408
 8005b28:	5802541c 	.word	0x5802541c
 8005b2c:	58025430 	.word	0x58025430
 8005b30:	58025444 	.word	0x58025444
 8005b34:	58025458 	.word	0x58025458
 8005b38:	5802546c 	.word	0x5802546c
 8005b3c:	58025480 	.word	0x58025480
 8005b40:	58025494 	.word	0x58025494
 8005b44:	2300      	movs	r3, #0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d021      	beq.n	8005b8e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2200      	movs	r2, #0
 8005b58:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2200      	movs	r2, #0
 8005b68:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f002 f900 	bl	8007d78 <DMA_CalcBaseAndBitshift>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	2201      	movs	r2, #1
 8005b86:	409a      	lsls	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	605a      	str	r2, [r3, #4]
 8005b8c:	e001      	b.n	8005b92 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e04a      	b.n	8005c28 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f002 fa1e 	bl	8007fd4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d008      	beq.n	8005bb2 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005bb0:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00f      	beq.n	8005bda <HAL_DMA_DeInit+0x316>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d80b      	bhi.n	8005bda <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f002 faa0 	bl	8008108 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005bd8:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e226      	b.n	800609a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_DMA_Start_IT+0x2a>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e21f      	b.n	800609a <HAL_DMA_Start_IT+0x46a>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	f040 820a 	bne.w	8006084 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a68      	ldr	r2, [pc, #416]	@ (8005e24 <HAL_DMA_Start_IT+0x1f4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d04a      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a66      	ldr	r2, [pc, #408]	@ (8005e28 <HAL_DMA_Start_IT+0x1f8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d045      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a65      	ldr	r2, [pc, #404]	@ (8005e2c <HAL_DMA_Start_IT+0x1fc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d040      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a63      	ldr	r2, [pc, #396]	@ (8005e30 <HAL_DMA_Start_IT+0x200>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d03b      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a62      	ldr	r2, [pc, #392]	@ (8005e34 <HAL_DMA_Start_IT+0x204>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d036      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a60      	ldr	r2, [pc, #384]	@ (8005e38 <HAL_DMA_Start_IT+0x208>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d031      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a5f      	ldr	r2, [pc, #380]	@ (8005e3c <HAL_DMA_Start_IT+0x20c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d02c      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a5d      	ldr	r2, [pc, #372]	@ (8005e40 <HAL_DMA_Start_IT+0x210>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d027      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a5c      	ldr	r2, [pc, #368]	@ (8005e44 <HAL_DMA_Start_IT+0x214>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d022      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a5a      	ldr	r2, [pc, #360]	@ (8005e48 <HAL_DMA_Start_IT+0x218>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d01d      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a59      	ldr	r2, [pc, #356]	@ (8005e4c <HAL_DMA_Start_IT+0x21c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d018      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a57      	ldr	r2, [pc, #348]	@ (8005e50 <HAL_DMA_Start_IT+0x220>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d013      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a56      	ldr	r2, [pc, #344]	@ (8005e54 <HAL_DMA_Start_IT+0x224>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00e      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a54      	ldr	r2, [pc, #336]	@ (8005e58 <HAL_DMA_Start_IT+0x228>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d009      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a53      	ldr	r2, [pc, #332]	@ (8005e5c <HAL_DMA_Start_IT+0x22c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d004      	beq.n	8005d1e <HAL_DMA_Start_IT+0xee>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a51      	ldr	r2, [pc, #324]	@ (8005e60 <HAL_DMA_Start_IT+0x230>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d108      	bne.n	8005d30 <HAL_DMA_Start_IT+0x100>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e007      	b.n	8005d40 <HAL_DMA_Start_IT+0x110>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f001 fe6a 	bl	8007a20 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a34      	ldr	r2, [pc, #208]	@ (8005e24 <HAL_DMA_Start_IT+0x1f4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d04a      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a33      	ldr	r2, [pc, #204]	@ (8005e28 <HAL_DMA_Start_IT+0x1f8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d045      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a31      	ldr	r2, [pc, #196]	@ (8005e2c <HAL_DMA_Start_IT+0x1fc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d040      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a30      	ldr	r2, [pc, #192]	@ (8005e30 <HAL_DMA_Start_IT+0x200>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d03b      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a2e      	ldr	r2, [pc, #184]	@ (8005e34 <HAL_DMA_Start_IT+0x204>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d036      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a2d      	ldr	r2, [pc, #180]	@ (8005e38 <HAL_DMA_Start_IT+0x208>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d031      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005e3c <HAL_DMA_Start_IT+0x20c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d02c      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2a      	ldr	r2, [pc, #168]	@ (8005e40 <HAL_DMA_Start_IT+0x210>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d027      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a28      	ldr	r2, [pc, #160]	@ (8005e44 <HAL_DMA_Start_IT+0x214>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d022      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a27      	ldr	r2, [pc, #156]	@ (8005e48 <HAL_DMA_Start_IT+0x218>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d01d      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a25      	ldr	r2, [pc, #148]	@ (8005e4c <HAL_DMA_Start_IT+0x21c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d018      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a24      	ldr	r2, [pc, #144]	@ (8005e50 <HAL_DMA_Start_IT+0x220>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a22      	ldr	r2, [pc, #136]	@ (8005e54 <HAL_DMA_Start_IT+0x224>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a21      	ldr	r2, [pc, #132]	@ (8005e58 <HAL_DMA_Start_IT+0x228>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d009      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e5c <HAL_DMA_Start_IT+0x22c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <HAL_DMA_Start_IT+0x1bc>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e60 <HAL_DMA_Start_IT+0x230>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d101      	bne.n	8005df0 <HAL_DMA_Start_IT+0x1c0>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <HAL_DMA_Start_IT+0x1c2>
 8005df0:	2300      	movs	r3, #0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d036      	beq.n	8005e64 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f023 021e 	bic.w	r2, r3, #30
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0216 	orr.w	r2, r2, #22
 8005e08:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d03e      	beq.n	8005e90 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0208 	orr.w	r2, r2, #8
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e035      	b.n	8005e90 <HAL_DMA_Start_IT+0x260>
 8005e24:	40020010 	.word	0x40020010
 8005e28:	40020028 	.word	0x40020028
 8005e2c:	40020040 	.word	0x40020040
 8005e30:	40020058 	.word	0x40020058
 8005e34:	40020070 	.word	0x40020070
 8005e38:	40020088 	.word	0x40020088
 8005e3c:	400200a0 	.word	0x400200a0
 8005e40:	400200b8 	.word	0x400200b8
 8005e44:	40020410 	.word	0x40020410
 8005e48:	40020428 	.word	0x40020428
 8005e4c:	40020440 	.word	0x40020440
 8005e50:	40020458 	.word	0x40020458
 8005e54:	40020470 	.word	0x40020470
 8005e58:	40020488 	.word	0x40020488
 8005e5c:	400204a0 	.word	0x400204a0
 8005e60:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f023 020e 	bic.w	r2, r3, #14
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 020a 	orr.w	r2, r2, #10
 8005e76:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0204 	orr.w	r2, r2, #4
 8005e8e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a83      	ldr	r2, [pc, #524]	@ (80060a4 <HAL_DMA_Start_IT+0x474>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d072      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a82      	ldr	r2, [pc, #520]	@ (80060a8 <HAL_DMA_Start_IT+0x478>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d06d      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a80      	ldr	r2, [pc, #512]	@ (80060ac <HAL_DMA_Start_IT+0x47c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d068      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a7f      	ldr	r2, [pc, #508]	@ (80060b0 <HAL_DMA_Start_IT+0x480>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d063      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a7d      	ldr	r2, [pc, #500]	@ (80060b4 <HAL_DMA_Start_IT+0x484>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d05e      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a7c      	ldr	r2, [pc, #496]	@ (80060b8 <HAL_DMA_Start_IT+0x488>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d059      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a7a      	ldr	r2, [pc, #488]	@ (80060bc <HAL_DMA_Start_IT+0x48c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d054      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a79      	ldr	r2, [pc, #484]	@ (80060c0 <HAL_DMA_Start_IT+0x490>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d04f      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a77      	ldr	r2, [pc, #476]	@ (80060c4 <HAL_DMA_Start_IT+0x494>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d04a      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a76      	ldr	r2, [pc, #472]	@ (80060c8 <HAL_DMA_Start_IT+0x498>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d045      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a74      	ldr	r2, [pc, #464]	@ (80060cc <HAL_DMA_Start_IT+0x49c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d040      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a73      	ldr	r2, [pc, #460]	@ (80060d0 <HAL_DMA_Start_IT+0x4a0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d03b      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a71      	ldr	r2, [pc, #452]	@ (80060d4 <HAL_DMA_Start_IT+0x4a4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d036      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a70      	ldr	r2, [pc, #448]	@ (80060d8 <HAL_DMA_Start_IT+0x4a8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d031      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a6e      	ldr	r2, [pc, #440]	@ (80060dc <HAL_DMA_Start_IT+0x4ac>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d02c      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a6d      	ldr	r2, [pc, #436]	@ (80060e0 <HAL_DMA_Start_IT+0x4b0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d027      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a6b      	ldr	r2, [pc, #428]	@ (80060e4 <HAL_DMA_Start_IT+0x4b4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d022      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a6a      	ldr	r2, [pc, #424]	@ (80060e8 <HAL_DMA_Start_IT+0x4b8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d01d      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a68      	ldr	r2, [pc, #416]	@ (80060ec <HAL_DMA_Start_IT+0x4bc>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d018      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a67      	ldr	r2, [pc, #412]	@ (80060f0 <HAL_DMA_Start_IT+0x4c0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a65      	ldr	r2, [pc, #404]	@ (80060f4 <HAL_DMA_Start_IT+0x4c4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00e      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a64      	ldr	r2, [pc, #400]	@ (80060f8 <HAL_DMA_Start_IT+0x4c8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a62      	ldr	r2, [pc, #392]	@ (80060fc <HAL_DMA_Start_IT+0x4cc>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_DMA_Start_IT+0x350>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a61      	ldr	r2, [pc, #388]	@ (8006100 <HAL_DMA_Start_IT+0x4d0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d101      	bne.n	8005f84 <HAL_DMA_Start_IT+0x354>
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <HAL_DMA_Start_IT+0x356>
 8005f84:	2300      	movs	r3, #0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01a      	beq.n	8005fc0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fa6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fbe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a37      	ldr	r2, [pc, #220]	@ (80060a4 <HAL_DMA_Start_IT+0x474>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d04a      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a36      	ldr	r2, [pc, #216]	@ (80060a8 <HAL_DMA_Start_IT+0x478>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d045      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a34      	ldr	r2, [pc, #208]	@ (80060ac <HAL_DMA_Start_IT+0x47c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d040      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a33      	ldr	r2, [pc, #204]	@ (80060b0 <HAL_DMA_Start_IT+0x480>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d03b      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a31      	ldr	r2, [pc, #196]	@ (80060b4 <HAL_DMA_Start_IT+0x484>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d036      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a30      	ldr	r2, [pc, #192]	@ (80060b8 <HAL_DMA_Start_IT+0x488>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d031      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a2e      	ldr	r2, [pc, #184]	@ (80060bc <HAL_DMA_Start_IT+0x48c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d02c      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a2d      	ldr	r2, [pc, #180]	@ (80060c0 <HAL_DMA_Start_IT+0x490>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d027      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a2b      	ldr	r2, [pc, #172]	@ (80060c4 <HAL_DMA_Start_IT+0x494>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d022      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a2a      	ldr	r2, [pc, #168]	@ (80060c8 <HAL_DMA_Start_IT+0x498>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d01d      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a28      	ldr	r2, [pc, #160]	@ (80060cc <HAL_DMA_Start_IT+0x49c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d018      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a27      	ldr	r2, [pc, #156]	@ (80060d0 <HAL_DMA_Start_IT+0x4a0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d013      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a25      	ldr	r2, [pc, #148]	@ (80060d4 <HAL_DMA_Start_IT+0x4a4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00e      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a24      	ldr	r2, [pc, #144]	@ (80060d8 <HAL_DMA_Start_IT+0x4a8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d009      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a22      	ldr	r2, [pc, #136]	@ (80060dc <HAL_DMA_Start_IT+0x4ac>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d004      	beq.n	8006060 <HAL_DMA_Start_IT+0x430>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a21      	ldr	r2, [pc, #132]	@ (80060e0 <HAL_DMA_Start_IT+0x4b0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d108      	bne.n	8006072 <HAL_DMA_Start_IT+0x442>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e012      	b.n	8006098 <HAL_DMA_Start_IT+0x468>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	e009      	b.n	8006098 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800608a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	40020010 	.word	0x40020010
 80060a8:	40020028 	.word	0x40020028
 80060ac:	40020040 	.word	0x40020040
 80060b0:	40020058 	.word	0x40020058
 80060b4:	40020070 	.word	0x40020070
 80060b8:	40020088 	.word	0x40020088
 80060bc:	400200a0 	.word	0x400200a0
 80060c0:	400200b8 	.word	0x400200b8
 80060c4:	40020410 	.word	0x40020410
 80060c8:	40020428 	.word	0x40020428
 80060cc:	40020440 	.word	0x40020440
 80060d0:	40020458 	.word	0x40020458
 80060d4:	40020470 	.word	0x40020470
 80060d8:	40020488 	.word	0x40020488
 80060dc:	400204a0 	.word	0x400204a0
 80060e0:	400204b8 	.word	0x400204b8
 80060e4:	58025408 	.word	0x58025408
 80060e8:	5802541c 	.word	0x5802541c
 80060ec:	58025430 	.word	0x58025430
 80060f0:	58025444 	.word	0x58025444
 80060f4:	58025458 	.word	0x58025458
 80060f8:	5802546c 	.word	0x5802546c
 80060fc:	58025480 	.word	0x58025480
 8006100:	58025494 	.word	0x58025494

08006104 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800610c:	f7fc fd7e 	bl	8002c0c <HAL_GetTick>
 8006110:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e2dc      	b.n	80066d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d008      	beq.n	800613a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2280      	movs	r2, #128	@ 0x80
 800612c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e2cd      	b.n	80066d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a76      	ldr	r2, [pc, #472]	@ (8006318 <HAL_DMA_Abort+0x214>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d04a      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a74      	ldr	r2, [pc, #464]	@ (800631c <HAL_DMA_Abort+0x218>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d045      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a73      	ldr	r2, [pc, #460]	@ (8006320 <HAL_DMA_Abort+0x21c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d040      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a71      	ldr	r2, [pc, #452]	@ (8006324 <HAL_DMA_Abort+0x220>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d03b      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a70      	ldr	r2, [pc, #448]	@ (8006328 <HAL_DMA_Abort+0x224>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d036      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a6e      	ldr	r2, [pc, #440]	@ (800632c <HAL_DMA_Abort+0x228>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d031      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a6d      	ldr	r2, [pc, #436]	@ (8006330 <HAL_DMA_Abort+0x22c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d02c      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a6b      	ldr	r2, [pc, #428]	@ (8006334 <HAL_DMA_Abort+0x230>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d027      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a6a      	ldr	r2, [pc, #424]	@ (8006338 <HAL_DMA_Abort+0x234>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d022      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a68      	ldr	r2, [pc, #416]	@ (800633c <HAL_DMA_Abort+0x238>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01d      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a67      	ldr	r2, [pc, #412]	@ (8006340 <HAL_DMA_Abort+0x23c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d018      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a65      	ldr	r2, [pc, #404]	@ (8006344 <HAL_DMA_Abort+0x240>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a64      	ldr	r2, [pc, #400]	@ (8006348 <HAL_DMA_Abort+0x244>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a62      	ldr	r2, [pc, #392]	@ (800634c <HAL_DMA_Abort+0x248>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a61      	ldr	r2, [pc, #388]	@ (8006350 <HAL_DMA_Abort+0x24c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_DMA_Abort+0xd6>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a5f      	ldr	r2, [pc, #380]	@ (8006354 <HAL_DMA_Abort+0x250>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d101      	bne.n	80061de <HAL_DMA_Abort+0xda>
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <HAL_DMA_Abort+0xdc>
 80061de:	2300      	movs	r3, #0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d013      	beq.n	800620c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 021e 	bic.w	r2, r2, #30
 80061f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006202:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	e00a      	b.n	8006222 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 020e 	bic.w	r2, r2, #14
 800621a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a3c      	ldr	r2, [pc, #240]	@ (8006318 <HAL_DMA_Abort+0x214>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d072      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a3a      	ldr	r2, [pc, #232]	@ (800631c <HAL_DMA_Abort+0x218>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d06d      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a39      	ldr	r2, [pc, #228]	@ (8006320 <HAL_DMA_Abort+0x21c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d068      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a37      	ldr	r2, [pc, #220]	@ (8006324 <HAL_DMA_Abort+0x220>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d063      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a36      	ldr	r2, [pc, #216]	@ (8006328 <HAL_DMA_Abort+0x224>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d05e      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a34      	ldr	r2, [pc, #208]	@ (800632c <HAL_DMA_Abort+0x228>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d059      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a33      	ldr	r2, [pc, #204]	@ (8006330 <HAL_DMA_Abort+0x22c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d054      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a31      	ldr	r2, [pc, #196]	@ (8006334 <HAL_DMA_Abort+0x230>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d04f      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a30      	ldr	r2, [pc, #192]	@ (8006338 <HAL_DMA_Abort+0x234>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d04a      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a2e      	ldr	r2, [pc, #184]	@ (800633c <HAL_DMA_Abort+0x238>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d045      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a2d      	ldr	r2, [pc, #180]	@ (8006340 <HAL_DMA_Abort+0x23c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d040      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2b      	ldr	r2, [pc, #172]	@ (8006344 <HAL_DMA_Abort+0x240>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d03b      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2a      	ldr	r2, [pc, #168]	@ (8006348 <HAL_DMA_Abort+0x244>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d036      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a28      	ldr	r2, [pc, #160]	@ (800634c <HAL_DMA_Abort+0x248>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d031      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a27      	ldr	r2, [pc, #156]	@ (8006350 <HAL_DMA_Abort+0x24c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d02c      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a25      	ldr	r2, [pc, #148]	@ (8006354 <HAL_DMA_Abort+0x250>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d027      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a24      	ldr	r2, [pc, #144]	@ (8006358 <HAL_DMA_Abort+0x254>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d022      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a22      	ldr	r2, [pc, #136]	@ (800635c <HAL_DMA_Abort+0x258>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d01d      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a21      	ldr	r2, [pc, #132]	@ (8006360 <HAL_DMA_Abort+0x25c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d018      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006364 <HAL_DMA_Abort+0x260>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d013      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006368 <HAL_DMA_Abort+0x264>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00e      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1c      	ldr	r2, [pc, #112]	@ (800636c <HAL_DMA_Abort+0x268>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d009      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1b      	ldr	r2, [pc, #108]	@ (8006370 <HAL_DMA_Abort+0x26c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_DMA_Abort+0x20e>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a19      	ldr	r2, [pc, #100]	@ (8006374 <HAL_DMA_Abort+0x270>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d132      	bne.n	8006378 <HAL_DMA_Abort+0x274>
 8006312:	2301      	movs	r3, #1
 8006314:	e031      	b.n	800637a <HAL_DMA_Abort+0x276>
 8006316:	bf00      	nop
 8006318:	40020010 	.word	0x40020010
 800631c:	40020028 	.word	0x40020028
 8006320:	40020040 	.word	0x40020040
 8006324:	40020058 	.word	0x40020058
 8006328:	40020070 	.word	0x40020070
 800632c:	40020088 	.word	0x40020088
 8006330:	400200a0 	.word	0x400200a0
 8006334:	400200b8 	.word	0x400200b8
 8006338:	40020410 	.word	0x40020410
 800633c:	40020428 	.word	0x40020428
 8006340:	40020440 	.word	0x40020440
 8006344:	40020458 	.word	0x40020458
 8006348:	40020470 	.word	0x40020470
 800634c:	40020488 	.word	0x40020488
 8006350:	400204a0 	.word	0x400204a0
 8006354:	400204b8 	.word	0x400204b8
 8006358:	58025408 	.word	0x58025408
 800635c:	5802541c 	.word	0x5802541c
 8006360:	58025430 	.word	0x58025430
 8006364:	58025444 	.word	0x58025444
 8006368:	58025458 	.word	0x58025458
 800636c:	5802546c 	.word	0x5802546c
 8006370:	58025480 	.word	0x58025480
 8006374:	58025494 	.word	0x58025494
 8006378:	2300      	movs	r3, #0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006388:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800638c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a6d      	ldr	r2, [pc, #436]	@ (8006548 <HAL_DMA_Abort+0x444>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d04a      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a6b      	ldr	r2, [pc, #428]	@ (800654c <HAL_DMA_Abort+0x448>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d045      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a6a      	ldr	r2, [pc, #424]	@ (8006550 <HAL_DMA_Abort+0x44c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d040      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a68      	ldr	r2, [pc, #416]	@ (8006554 <HAL_DMA_Abort+0x450>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d03b      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a67      	ldr	r2, [pc, #412]	@ (8006558 <HAL_DMA_Abort+0x454>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d036      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a65      	ldr	r2, [pc, #404]	@ (800655c <HAL_DMA_Abort+0x458>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d031      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a64      	ldr	r2, [pc, #400]	@ (8006560 <HAL_DMA_Abort+0x45c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d02c      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a62      	ldr	r2, [pc, #392]	@ (8006564 <HAL_DMA_Abort+0x460>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d027      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a61      	ldr	r2, [pc, #388]	@ (8006568 <HAL_DMA_Abort+0x464>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d022      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a5f      	ldr	r2, [pc, #380]	@ (800656c <HAL_DMA_Abort+0x468>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01d      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a5e      	ldr	r2, [pc, #376]	@ (8006570 <HAL_DMA_Abort+0x46c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d018      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a5c      	ldr	r2, [pc, #368]	@ (8006574 <HAL_DMA_Abort+0x470>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a5b      	ldr	r2, [pc, #364]	@ (8006578 <HAL_DMA_Abort+0x474>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00e      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a59      	ldr	r2, [pc, #356]	@ (800657c <HAL_DMA_Abort+0x478>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d009      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a58      	ldr	r2, [pc, #352]	@ (8006580 <HAL_DMA_Abort+0x47c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d004      	beq.n	800642e <HAL_DMA_Abort+0x32a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a56      	ldr	r2, [pc, #344]	@ (8006584 <HAL_DMA_Abort+0x480>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d108      	bne.n	8006440 <HAL_DMA_Abort+0x33c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0201 	bic.w	r2, r2, #1
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	e007      	b.n	8006450 <HAL_DMA_Abort+0x34c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0201 	bic.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006450:	e013      	b.n	800647a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006452:	f7fc fbdb 	bl	8002c0c <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b05      	cmp	r3, #5
 800645e:	d90c      	bls.n	800647a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2203      	movs	r2, #3
 800646a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e12d      	b.n	80066d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1e5      	bne.n	8006452 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a2f      	ldr	r2, [pc, #188]	@ (8006548 <HAL_DMA_Abort+0x444>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d04a      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a2d      	ldr	r2, [pc, #180]	@ (800654c <HAL_DMA_Abort+0x448>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d045      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a2c      	ldr	r2, [pc, #176]	@ (8006550 <HAL_DMA_Abort+0x44c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d040      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006554 <HAL_DMA_Abort+0x450>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d03b      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a29      	ldr	r2, [pc, #164]	@ (8006558 <HAL_DMA_Abort+0x454>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d036      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a27      	ldr	r2, [pc, #156]	@ (800655c <HAL_DMA_Abort+0x458>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d031      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a26      	ldr	r2, [pc, #152]	@ (8006560 <HAL_DMA_Abort+0x45c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d02c      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a24      	ldr	r2, [pc, #144]	@ (8006564 <HAL_DMA_Abort+0x460>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d027      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a23      	ldr	r2, [pc, #140]	@ (8006568 <HAL_DMA_Abort+0x464>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d022      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a21      	ldr	r2, [pc, #132]	@ (800656c <HAL_DMA_Abort+0x468>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d01d      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a20      	ldr	r2, [pc, #128]	@ (8006570 <HAL_DMA_Abort+0x46c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d018      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006574 <HAL_DMA_Abort+0x470>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a1d      	ldr	r2, [pc, #116]	@ (8006578 <HAL_DMA_Abort+0x474>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00e      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a1b      	ldr	r2, [pc, #108]	@ (800657c <HAL_DMA_Abort+0x478>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1a      	ldr	r2, [pc, #104]	@ (8006580 <HAL_DMA_Abort+0x47c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d004      	beq.n	8006526 <HAL_DMA_Abort+0x422>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a18      	ldr	r2, [pc, #96]	@ (8006584 <HAL_DMA_Abort+0x480>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d101      	bne.n	800652a <HAL_DMA_Abort+0x426>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <HAL_DMA_Abort+0x428>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d02b      	beq.n	8006588 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006534:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	223f      	movs	r2, #63	@ 0x3f
 8006540:	409a      	lsls	r2, r3
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	609a      	str	r2, [r3, #8]
 8006546:	e02a      	b.n	800659e <HAL_DMA_Abort+0x49a>
 8006548:	40020010 	.word	0x40020010
 800654c:	40020028 	.word	0x40020028
 8006550:	40020040 	.word	0x40020040
 8006554:	40020058 	.word	0x40020058
 8006558:	40020070 	.word	0x40020070
 800655c:	40020088 	.word	0x40020088
 8006560:	400200a0 	.word	0x400200a0
 8006564:	400200b8 	.word	0x400200b8
 8006568:	40020410 	.word	0x40020410
 800656c:	40020428 	.word	0x40020428
 8006570:	40020440 	.word	0x40020440
 8006574:	40020458 	.word	0x40020458
 8006578:	40020470 	.word	0x40020470
 800657c:	40020488 	.word	0x40020488
 8006580:	400204a0 	.word	0x400204a0
 8006584:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	2201      	movs	r2, #1
 8006598:	409a      	lsls	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a4f      	ldr	r2, [pc, #316]	@ (80066e0 <HAL_DMA_Abort+0x5dc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d072      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a4d      	ldr	r2, [pc, #308]	@ (80066e4 <HAL_DMA_Abort+0x5e0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d06d      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a4c      	ldr	r2, [pc, #304]	@ (80066e8 <HAL_DMA_Abort+0x5e4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d068      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a4a      	ldr	r2, [pc, #296]	@ (80066ec <HAL_DMA_Abort+0x5e8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d063      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a49      	ldr	r2, [pc, #292]	@ (80066f0 <HAL_DMA_Abort+0x5ec>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d05e      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a47      	ldr	r2, [pc, #284]	@ (80066f4 <HAL_DMA_Abort+0x5f0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d059      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a46      	ldr	r2, [pc, #280]	@ (80066f8 <HAL_DMA_Abort+0x5f4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d054      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a44      	ldr	r2, [pc, #272]	@ (80066fc <HAL_DMA_Abort+0x5f8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d04f      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a43      	ldr	r2, [pc, #268]	@ (8006700 <HAL_DMA_Abort+0x5fc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d04a      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a41      	ldr	r2, [pc, #260]	@ (8006704 <HAL_DMA_Abort+0x600>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d045      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a40      	ldr	r2, [pc, #256]	@ (8006708 <HAL_DMA_Abort+0x604>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d040      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a3e      	ldr	r2, [pc, #248]	@ (800670c <HAL_DMA_Abort+0x608>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d03b      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a3d      	ldr	r2, [pc, #244]	@ (8006710 <HAL_DMA_Abort+0x60c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d036      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a3b      	ldr	r2, [pc, #236]	@ (8006714 <HAL_DMA_Abort+0x610>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d031      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a3a      	ldr	r2, [pc, #232]	@ (8006718 <HAL_DMA_Abort+0x614>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d02c      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a38      	ldr	r2, [pc, #224]	@ (800671c <HAL_DMA_Abort+0x618>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d027      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a37      	ldr	r2, [pc, #220]	@ (8006720 <HAL_DMA_Abort+0x61c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d022      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a35      	ldr	r2, [pc, #212]	@ (8006724 <HAL_DMA_Abort+0x620>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01d      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a34      	ldr	r2, [pc, #208]	@ (8006728 <HAL_DMA_Abort+0x624>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d018      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a32      	ldr	r2, [pc, #200]	@ (800672c <HAL_DMA_Abort+0x628>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a31      	ldr	r2, [pc, #196]	@ (8006730 <HAL_DMA_Abort+0x62c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a2f      	ldr	r2, [pc, #188]	@ (8006734 <HAL_DMA_Abort+0x630>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2e      	ldr	r2, [pc, #184]	@ (8006738 <HAL_DMA_Abort+0x634>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <HAL_DMA_Abort+0x58a>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a2c      	ldr	r2, [pc, #176]	@ (800673c <HAL_DMA_Abort+0x638>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <HAL_DMA_Abort+0x58e>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <HAL_DMA_Abort+0x590>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d015      	beq.n	80066c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80066a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00c      	beq.n	80066c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80066c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	40020010 	.word	0x40020010
 80066e4:	40020028 	.word	0x40020028
 80066e8:	40020040 	.word	0x40020040
 80066ec:	40020058 	.word	0x40020058
 80066f0:	40020070 	.word	0x40020070
 80066f4:	40020088 	.word	0x40020088
 80066f8:	400200a0 	.word	0x400200a0
 80066fc:	400200b8 	.word	0x400200b8
 8006700:	40020410 	.word	0x40020410
 8006704:	40020428 	.word	0x40020428
 8006708:	40020440 	.word	0x40020440
 800670c:	40020458 	.word	0x40020458
 8006710:	40020470 	.word	0x40020470
 8006714:	40020488 	.word	0x40020488
 8006718:	400204a0 	.word	0x400204a0
 800671c:	400204b8 	.word	0x400204b8
 8006720:	58025408 	.word	0x58025408
 8006724:	5802541c 	.word	0x5802541c
 8006728:	58025430 	.word	0x58025430
 800672c:	58025444 	.word	0x58025444
 8006730:	58025458 	.word	0x58025458
 8006734:	5802546c 	.word	0x5802546c
 8006738:	58025480 	.word	0x58025480
 800673c:	58025494 	.word	0x58025494

08006740 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e237      	b.n	8006bc2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d004      	beq.n	8006768 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2280      	movs	r2, #128	@ 0x80
 8006762:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e22c      	b.n	8006bc2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a5c      	ldr	r2, [pc, #368]	@ (80068e0 <HAL_DMA_Abort_IT+0x1a0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d04a      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a5b      	ldr	r2, [pc, #364]	@ (80068e4 <HAL_DMA_Abort_IT+0x1a4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d045      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a59      	ldr	r2, [pc, #356]	@ (80068e8 <HAL_DMA_Abort_IT+0x1a8>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d040      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a58      	ldr	r2, [pc, #352]	@ (80068ec <HAL_DMA_Abort_IT+0x1ac>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d03b      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a56      	ldr	r2, [pc, #344]	@ (80068f0 <HAL_DMA_Abort_IT+0x1b0>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d036      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a55      	ldr	r2, [pc, #340]	@ (80068f4 <HAL_DMA_Abort_IT+0x1b4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d031      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a53      	ldr	r2, [pc, #332]	@ (80068f8 <HAL_DMA_Abort_IT+0x1b8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d02c      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a52      	ldr	r2, [pc, #328]	@ (80068fc <HAL_DMA_Abort_IT+0x1bc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d027      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a50      	ldr	r2, [pc, #320]	@ (8006900 <HAL_DMA_Abort_IT+0x1c0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d022      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a4f      	ldr	r2, [pc, #316]	@ (8006904 <HAL_DMA_Abort_IT+0x1c4>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d01d      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a4d      	ldr	r2, [pc, #308]	@ (8006908 <HAL_DMA_Abort_IT+0x1c8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d018      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a4c      	ldr	r2, [pc, #304]	@ (800690c <HAL_DMA_Abort_IT+0x1cc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006910 <HAL_DMA_Abort_IT+0x1d0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00e      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a49      	ldr	r2, [pc, #292]	@ (8006914 <HAL_DMA_Abort_IT+0x1d4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d009      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a47      	ldr	r2, [pc, #284]	@ (8006918 <HAL_DMA_Abort_IT+0x1d8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d004      	beq.n	8006808 <HAL_DMA_Abort_IT+0xc8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a46      	ldr	r2, [pc, #280]	@ (800691c <HAL_DMA_Abort_IT+0x1dc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d101      	bne.n	800680c <HAL_DMA_Abort_IT+0xcc>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <HAL_DMA_Abort_IT+0xce>
 800680c:	2300      	movs	r3, #0
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 8086 	beq.w	8006920 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2204      	movs	r2, #4
 8006818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a2f      	ldr	r2, [pc, #188]	@ (80068e0 <HAL_DMA_Abort_IT+0x1a0>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d04a      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a2e      	ldr	r2, [pc, #184]	@ (80068e4 <HAL_DMA_Abort_IT+0x1a4>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d045      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a2c      	ldr	r2, [pc, #176]	@ (80068e8 <HAL_DMA_Abort_IT+0x1a8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d040      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a2b      	ldr	r2, [pc, #172]	@ (80068ec <HAL_DMA_Abort_IT+0x1ac>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d03b      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a29      	ldr	r2, [pc, #164]	@ (80068f0 <HAL_DMA_Abort_IT+0x1b0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d036      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a28      	ldr	r2, [pc, #160]	@ (80068f4 <HAL_DMA_Abort_IT+0x1b4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d031      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a26      	ldr	r2, [pc, #152]	@ (80068f8 <HAL_DMA_Abort_IT+0x1b8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d02c      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a25      	ldr	r2, [pc, #148]	@ (80068fc <HAL_DMA_Abort_IT+0x1bc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d027      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a23      	ldr	r2, [pc, #140]	@ (8006900 <HAL_DMA_Abort_IT+0x1c0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d022      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a22      	ldr	r2, [pc, #136]	@ (8006904 <HAL_DMA_Abort_IT+0x1c4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d01d      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a20      	ldr	r2, [pc, #128]	@ (8006908 <HAL_DMA_Abort_IT+0x1c8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d018      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a1f      	ldr	r2, [pc, #124]	@ (800690c <HAL_DMA_Abort_IT+0x1cc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d013      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a1d      	ldr	r2, [pc, #116]	@ (8006910 <HAL_DMA_Abort_IT+0x1d0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00e      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006914 <HAL_DMA_Abort_IT+0x1d4>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d009      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006918 <HAL_DMA_Abort_IT+0x1d8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d004      	beq.n	80068bc <HAL_DMA_Abort_IT+0x17c>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a19      	ldr	r2, [pc, #100]	@ (800691c <HAL_DMA_Abort_IT+0x1dc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d108      	bne.n	80068ce <HAL_DMA_Abort_IT+0x18e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0201 	bic.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	e178      	b.n	8006bc0 <HAL_DMA_Abort_IT+0x480>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0201 	bic.w	r2, r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	e16f      	b.n	8006bc0 <HAL_DMA_Abort_IT+0x480>
 80068e0:	40020010 	.word	0x40020010
 80068e4:	40020028 	.word	0x40020028
 80068e8:	40020040 	.word	0x40020040
 80068ec:	40020058 	.word	0x40020058
 80068f0:	40020070 	.word	0x40020070
 80068f4:	40020088 	.word	0x40020088
 80068f8:	400200a0 	.word	0x400200a0
 80068fc:	400200b8 	.word	0x400200b8
 8006900:	40020410 	.word	0x40020410
 8006904:	40020428 	.word	0x40020428
 8006908:	40020440 	.word	0x40020440
 800690c:	40020458 	.word	0x40020458
 8006910:	40020470 	.word	0x40020470
 8006914:	40020488 	.word	0x40020488
 8006918:	400204a0 	.word	0x400204a0
 800691c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 020e 	bic.w	r2, r2, #14
 800692e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a6c      	ldr	r2, [pc, #432]	@ (8006ae8 <HAL_DMA_Abort_IT+0x3a8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d04a      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a6b      	ldr	r2, [pc, #428]	@ (8006aec <HAL_DMA_Abort_IT+0x3ac>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d045      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a69      	ldr	r2, [pc, #420]	@ (8006af0 <HAL_DMA_Abort_IT+0x3b0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d040      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a68      	ldr	r2, [pc, #416]	@ (8006af4 <HAL_DMA_Abort_IT+0x3b4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d03b      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a66      	ldr	r2, [pc, #408]	@ (8006af8 <HAL_DMA_Abort_IT+0x3b8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d036      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a65      	ldr	r2, [pc, #404]	@ (8006afc <HAL_DMA_Abort_IT+0x3bc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d031      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a63      	ldr	r2, [pc, #396]	@ (8006b00 <HAL_DMA_Abort_IT+0x3c0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d02c      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a62      	ldr	r2, [pc, #392]	@ (8006b04 <HAL_DMA_Abort_IT+0x3c4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d027      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a60      	ldr	r2, [pc, #384]	@ (8006b08 <HAL_DMA_Abort_IT+0x3c8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d022      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a5f      	ldr	r2, [pc, #380]	@ (8006b0c <HAL_DMA_Abort_IT+0x3cc>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d01d      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a5d      	ldr	r2, [pc, #372]	@ (8006b10 <HAL_DMA_Abort_IT+0x3d0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d018      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a5c      	ldr	r2, [pc, #368]	@ (8006b14 <HAL_DMA_Abort_IT+0x3d4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d013      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a5a      	ldr	r2, [pc, #360]	@ (8006b18 <HAL_DMA_Abort_IT+0x3d8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00e      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a59      	ldr	r2, [pc, #356]	@ (8006b1c <HAL_DMA_Abort_IT+0x3dc>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d009      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a57      	ldr	r2, [pc, #348]	@ (8006b20 <HAL_DMA_Abort_IT+0x3e0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d004      	beq.n	80069d0 <HAL_DMA_Abort_IT+0x290>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a56      	ldr	r2, [pc, #344]	@ (8006b24 <HAL_DMA_Abort_IT+0x3e4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d108      	bne.n	80069e2 <HAL_DMA_Abort_IT+0x2a2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	e007      	b.n	80069f2 <HAL_DMA_Abort_IT+0x2b2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0201 	bic.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a3c      	ldr	r2, [pc, #240]	@ (8006ae8 <HAL_DMA_Abort_IT+0x3a8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d072      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a3a      	ldr	r2, [pc, #232]	@ (8006aec <HAL_DMA_Abort_IT+0x3ac>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d06d      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a39      	ldr	r2, [pc, #228]	@ (8006af0 <HAL_DMA_Abort_IT+0x3b0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d068      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a37      	ldr	r2, [pc, #220]	@ (8006af4 <HAL_DMA_Abort_IT+0x3b4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d063      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a36      	ldr	r2, [pc, #216]	@ (8006af8 <HAL_DMA_Abort_IT+0x3b8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d05e      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a34      	ldr	r2, [pc, #208]	@ (8006afc <HAL_DMA_Abort_IT+0x3bc>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d059      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a33      	ldr	r2, [pc, #204]	@ (8006b00 <HAL_DMA_Abort_IT+0x3c0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d054      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a31      	ldr	r2, [pc, #196]	@ (8006b04 <HAL_DMA_Abort_IT+0x3c4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d04f      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a30      	ldr	r2, [pc, #192]	@ (8006b08 <HAL_DMA_Abort_IT+0x3c8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d04a      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a2e      	ldr	r2, [pc, #184]	@ (8006b0c <HAL_DMA_Abort_IT+0x3cc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d045      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8006b10 <HAL_DMA_Abort_IT+0x3d0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d040      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a2b      	ldr	r2, [pc, #172]	@ (8006b14 <HAL_DMA_Abort_IT+0x3d4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d03b      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8006b18 <HAL_DMA_Abort_IT+0x3d8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d036      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a28      	ldr	r2, [pc, #160]	@ (8006b1c <HAL_DMA_Abort_IT+0x3dc>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d031      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a27      	ldr	r2, [pc, #156]	@ (8006b20 <HAL_DMA_Abort_IT+0x3e0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d02c      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a25      	ldr	r2, [pc, #148]	@ (8006b24 <HAL_DMA_Abort_IT+0x3e4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d027      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a24      	ldr	r2, [pc, #144]	@ (8006b28 <HAL_DMA_Abort_IT+0x3e8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d022      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a22      	ldr	r2, [pc, #136]	@ (8006b2c <HAL_DMA_Abort_IT+0x3ec>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d01d      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a21      	ldr	r2, [pc, #132]	@ (8006b30 <HAL_DMA_Abort_IT+0x3f0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d018      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b34 <HAL_DMA_Abort_IT+0x3f4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d013      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1e      	ldr	r2, [pc, #120]	@ (8006b38 <HAL_DMA_Abort_IT+0x3f8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00e      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8006b3c <HAL_DMA_Abort_IT+0x3fc>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d009      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b40 <HAL_DMA_Abort_IT+0x400>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <HAL_DMA_Abort_IT+0x3a2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a19      	ldr	r2, [pc, #100]	@ (8006b44 <HAL_DMA_Abort_IT+0x404>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d132      	bne.n	8006b48 <HAL_DMA_Abort_IT+0x408>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e031      	b.n	8006b4a <HAL_DMA_Abort_IT+0x40a>
 8006ae6:	bf00      	nop
 8006ae8:	40020010 	.word	0x40020010
 8006aec:	40020028 	.word	0x40020028
 8006af0:	40020040 	.word	0x40020040
 8006af4:	40020058 	.word	0x40020058
 8006af8:	40020070 	.word	0x40020070
 8006afc:	40020088 	.word	0x40020088
 8006b00:	400200a0 	.word	0x400200a0
 8006b04:	400200b8 	.word	0x400200b8
 8006b08:	40020410 	.word	0x40020410
 8006b0c:	40020428 	.word	0x40020428
 8006b10:	40020440 	.word	0x40020440
 8006b14:	40020458 	.word	0x40020458
 8006b18:	40020470 	.word	0x40020470
 8006b1c:	40020488 	.word	0x40020488
 8006b20:	400204a0 	.word	0x400204a0
 8006b24:	400204b8 	.word	0x400204b8
 8006b28:	58025408 	.word	0x58025408
 8006b2c:	5802541c 	.word	0x5802541c
 8006b30:	58025430 	.word	0x58025430
 8006b34:	58025444 	.word	0x58025444
 8006b38:	58025458 	.word	0x58025458
 8006b3c:	5802546c 	.word	0x5802546c
 8006b40:	58025480 	.word	0x58025480
 8006b44:	58025494 	.word	0x58025494
 8006b48:	2300      	movs	r3, #0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d028      	beq.n	8006ba0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b5c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b62:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b68:	f003 031f 	and.w	r3, r3, #31
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	409a      	lsls	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006b7c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00c      	beq.n	8006ba0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b94:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b9e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop

08006bcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	@ 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006bd8:	4b67      	ldr	r3, [pc, #412]	@ (8006d78 <HAL_DMA_IRQHandler+0x1ac>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a67      	ldr	r2, [pc, #412]	@ (8006d7c <HAL_DMA_IRQHandler+0x1b0>)
 8006bde:	fba2 2303 	umull	r2, r3, r2, r3
 8006be2:	0a9b      	lsrs	r3, r3, #10
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a5f      	ldr	r2, [pc, #380]	@ (8006d80 <HAL_DMA_IRQHandler+0x1b4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d04a      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8006d84 <HAL_DMA_IRQHandler+0x1b8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d045      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a5c      	ldr	r2, [pc, #368]	@ (8006d88 <HAL_DMA_IRQHandler+0x1bc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d040      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a5a      	ldr	r2, [pc, #360]	@ (8006d8c <HAL_DMA_IRQHandler+0x1c0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d03b      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a59      	ldr	r2, [pc, #356]	@ (8006d90 <HAL_DMA_IRQHandler+0x1c4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d036      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a57      	ldr	r2, [pc, #348]	@ (8006d94 <HAL_DMA_IRQHandler+0x1c8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d031      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a56      	ldr	r2, [pc, #344]	@ (8006d98 <HAL_DMA_IRQHandler+0x1cc>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d02c      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a54      	ldr	r2, [pc, #336]	@ (8006d9c <HAL_DMA_IRQHandler+0x1d0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d027      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a53      	ldr	r2, [pc, #332]	@ (8006da0 <HAL_DMA_IRQHandler+0x1d4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d022      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a51      	ldr	r2, [pc, #324]	@ (8006da4 <HAL_DMA_IRQHandler+0x1d8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01d      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a50      	ldr	r2, [pc, #320]	@ (8006da8 <HAL_DMA_IRQHandler+0x1dc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d018      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a4e      	ldr	r2, [pc, #312]	@ (8006dac <HAL_DMA_IRQHandler+0x1e0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d013      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8006db0 <HAL_DMA_IRQHandler+0x1e4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00e      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a4b      	ldr	r2, [pc, #300]	@ (8006db4 <HAL_DMA_IRQHandler+0x1e8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d009      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8006db8 <HAL_DMA_IRQHandler+0x1ec>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d004      	beq.n	8006c9e <HAL_DMA_IRQHandler+0xd2>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a48      	ldr	r2, [pc, #288]	@ (8006dbc <HAL_DMA_IRQHandler+0x1f0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d101      	bne.n	8006ca2 <HAL_DMA_IRQHandler+0xd6>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <HAL_DMA_IRQHandler+0xd8>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 842b 	beq.w	8007500 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	2208      	movs	r2, #8
 8006cb4:	409a      	lsls	r2, r3
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 80a2 	beq.w	8006e04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8006d80 <HAL_DMA_IRQHandler+0x1b4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d04a      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a2d      	ldr	r2, [pc, #180]	@ (8006d84 <HAL_DMA_IRQHandler+0x1b8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d045      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8006d88 <HAL_DMA_IRQHandler+0x1bc>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d040      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d8c <HAL_DMA_IRQHandler+0x1c0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d03b      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a28      	ldr	r2, [pc, #160]	@ (8006d90 <HAL_DMA_IRQHandler+0x1c4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d036      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a27      	ldr	r2, [pc, #156]	@ (8006d94 <HAL_DMA_IRQHandler+0x1c8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d031      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a25      	ldr	r2, [pc, #148]	@ (8006d98 <HAL_DMA_IRQHandler+0x1cc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d02c      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a24      	ldr	r2, [pc, #144]	@ (8006d9c <HAL_DMA_IRQHandler+0x1d0>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d027      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a22      	ldr	r2, [pc, #136]	@ (8006da0 <HAL_DMA_IRQHandler+0x1d4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d022      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a21      	ldr	r2, [pc, #132]	@ (8006da4 <HAL_DMA_IRQHandler+0x1d8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d01d      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a1f      	ldr	r2, [pc, #124]	@ (8006da8 <HAL_DMA_IRQHandler+0x1dc>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d018      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a1e      	ldr	r2, [pc, #120]	@ (8006dac <HAL_DMA_IRQHandler+0x1e0>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d013      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8006db0 <HAL_DMA_IRQHandler+0x1e4>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00e      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1b      	ldr	r2, [pc, #108]	@ (8006db4 <HAL_DMA_IRQHandler+0x1e8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d009      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a19      	ldr	r2, [pc, #100]	@ (8006db8 <HAL_DMA_IRQHandler+0x1ec>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x194>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a18      	ldr	r2, [pc, #96]	@ (8006dbc <HAL_DMA_IRQHandler+0x1f0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d12f      	bne.n	8006dc0 <HAL_DMA_IRQHandler+0x1f4>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bf14      	ite	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	2300      	moveq	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	e02e      	b.n	8006dd4 <HAL_DMA_IRQHandler+0x208>
 8006d76:	bf00      	nop
 8006d78:	24000000 	.word	0x24000000
 8006d7c:	1b4e81b5 	.word	0x1b4e81b5
 8006d80:	40020010 	.word	0x40020010
 8006d84:	40020028 	.word	0x40020028
 8006d88:	40020040 	.word	0x40020040
 8006d8c:	40020058 	.word	0x40020058
 8006d90:	40020070 	.word	0x40020070
 8006d94:	40020088 	.word	0x40020088
 8006d98:	400200a0 	.word	0x400200a0
 8006d9c:	400200b8 	.word	0x400200b8
 8006da0:	40020410 	.word	0x40020410
 8006da4:	40020428 	.word	0x40020428
 8006da8:	40020440 	.word	0x40020440
 8006dac:	40020458 	.word	0x40020458
 8006db0:	40020470 	.word	0x40020470
 8006db4:	40020488 	.word	0x40020488
 8006db8:	400204a0 	.word	0x400204a0
 8006dbc:	400204b8 	.word	0x400204b8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bf14      	ite	ne
 8006dce:	2301      	movne	r3, #1
 8006dd0:	2300      	moveq	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d015      	beq.n	8006e04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0204 	bic.w	r2, r2, #4
 8006de6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dec:	f003 031f 	and.w	r3, r3, #31
 8006df0:	2208      	movs	r2, #8
 8006df2:	409a      	lsls	r2, r3
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dfc:	f043 0201 	orr.w	r2, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d06e      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a69      	ldr	r2, [pc, #420]	@ (8006fc4 <HAL_DMA_IRQHandler+0x3f8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d04a      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a67      	ldr	r2, [pc, #412]	@ (8006fc8 <HAL_DMA_IRQHandler+0x3fc>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d045      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a66      	ldr	r2, [pc, #408]	@ (8006fcc <HAL_DMA_IRQHandler+0x400>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d040      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a64      	ldr	r2, [pc, #400]	@ (8006fd0 <HAL_DMA_IRQHandler+0x404>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d03b      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a63      	ldr	r2, [pc, #396]	@ (8006fd4 <HAL_DMA_IRQHandler+0x408>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d036      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a61      	ldr	r2, [pc, #388]	@ (8006fd8 <HAL_DMA_IRQHandler+0x40c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d031      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a60      	ldr	r2, [pc, #384]	@ (8006fdc <HAL_DMA_IRQHandler+0x410>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d02c      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a5e      	ldr	r2, [pc, #376]	@ (8006fe0 <HAL_DMA_IRQHandler+0x414>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d027      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8006fe4 <HAL_DMA_IRQHandler+0x418>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d022      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a5b      	ldr	r2, [pc, #364]	@ (8006fe8 <HAL_DMA_IRQHandler+0x41c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01d      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a5a      	ldr	r2, [pc, #360]	@ (8006fec <HAL_DMA_IRQHandler+0x420>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d018      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a58      	ldr	r2, [pc, #352]	@ (8006ff0 <HAL_DMA_IRQHandler+0x424>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a57      	ldr	r2, [pc, #348]	@ (8006ff4 <HAL_DMA_IRQHandler+0x428>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a55      	ldr	r2, [pc, #340]	@ (8006ff8 <HAL_DMA_IRQHandler+0x42c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a54      	ldr	r2, [pc, #336]	@ (8006ffc <HAL_DMA_IRQHandler+0x430>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_DMA_IRQHandler+0x2ee>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a52      	ldr	r2, [pc, #328]	@ (8007000 <HAL_DMA_IRQHandler+0x434>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d10a      	bne.n	8006ed0 <HAL_DMA_IRQHandler+0x304>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bf14      	ite	ne
 8006ec8:	2301      	movne	r3, #1
 8006eca:	2300      	moveq	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	e003      	b.n	8006ed8 <HAL_DMA_IRQHandler+0x30c>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00d      	beq.n	8006ef8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	409a      	lsls	r2, r3
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ef0:	f043 0202 	orr.w	r2, r3, #2
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006efc:	f003 031f 	and.w	r3, r3, #31
 8006f00:	2204      	movs	r2, #4
 8006f02:	409a      	lsls	r2, r3
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	4013      	ands	r3, r2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 808f 	beq.w	800702c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a2c      	ldr	r2, [pc, #176]	@ (8006fc4 <HAL_DMA_IRQHandler+0x3f8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d04a      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8006fc8 <HAL_DMA_IRQHandler+0x3fc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d045      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a29      	ldr	r2, [pc, #164]	@ (8006fcc <HAL_DMA_IRQHandler+0x400>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d040      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a27      	ldr	r2, [pc, #156]	@ (8006fd0 <HAL_DMA_IRQHandler+0x404>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d03b      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a26      	ldr	r2, [pc, #152]	@ (8006fd4 <HAL_DMA_IRQHandler+0x408>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d036      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a24      	ldr	r2, [pc, #144]	@ (8006fd8 <HAL_DMA_IRQHandler+0x40c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d031      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a23      	ldr	r2, [pc, #140]	@ (8006fdc <HAL_DMA_IRQHandler+0x410>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d02c      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a21      	ldr	r2, [pc, #132]	@ (8006fe0 <HAL_DMA_IRQHandler+0x414>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d027      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a20      	ldr	r2, [pc, #128]	@ (8006fe4 <HAL_DMA_IRQHandler+0x418>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d022      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8006fe8 <HAL_DMA_IRQHandler+0x41c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d01d      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1d      	ldr	r2, [pc, #116]	@ (8006fec <HAL_DMA_IRQHandler+0x420>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d018      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff0 <HAL_DMA_IRQHandler+0x424>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d013      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ff4 <HAL_DMA_IRQHandler+0x428>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00e      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a18      	ldr	r2, [pc, #96]	@ (8006ff8 <HAL_DMA_IRQHandler+0x42c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d009      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a17      	ldr	r2, [pc, #92]	@ (8006ffc <HAL_DMA_IRQHandler+0x430>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d004      	beq.n	8006fae <HAL_DMA_IRQHandler+0x3e2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a15      	ldr	r2, [pc, #84]	@ (8007000 <HAL_DMA_IRQHandler+0x434>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d12a      	bne.n	8007004 <HAL_DMA_IRQHandler+0x438>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bf14      	ite	ne
 8006fbc:	2301      	movne	r3, #1
 8006fbe:	2300      	moveq	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	e023      	b.n	800700c <HAL_DMA_IRQHandler+0x440>
 8006fc4:	40020010 	.word	0x40020010
 8006fc8:	40020028 	.word	0x40020028
 8006fcc:	40020040 	.word	0x40020040
 8006fd0:	40020058 	.word	0x40020058
 8006fd4:	40020070 	.word	0x40020070
 8006fd8:	40020088 	.word	0x40020088
 8006fdc:	400200a0 	.word	0x400200a0
 8006fe0:	400200b8 	.word	0x400200b8
 8006fe4:	40020410 	.word	0x40020410
 8006fe8:	40020428 	.word	0x40020428
 8006fec:	40020440 	.word	0x40020440
 8006ff0:	40020458 	.word	0x40020458
 8006ff4:	40020470 	.word	0x40020470
 8006ff8:	40020488 	.word	0x40020488
 8006ffc:	400204a0 	.word	0x400204a0
 8007000:	400204b8 	.word	0x400204b8
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2300      	movs	r3, #0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00d      	beq.n	800702c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	2204      	movs	r2, #4
 800701a:	409a      	lsls	r2, r3
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007024:	f043 0204 	orr.w	r2, r3, #4
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	2210      	movs	r2, #16
 8007036:	409a      	lsls	r2, r3
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	4013      	ands	r3, r2
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 80a6 	beq.w	800718e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a85      	ldr	r2, [pc, #532]	@ (800725c <HAL_DMA_IRQHandler+0x690>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d04a      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a83      	ldr	r2, [pc, #524]	@ (8007260 <HAL_DMA_IRQHandler+0x694>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d045      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a82      	ldr	r2, [pc, #520]	@ (8007264 <HAL_DMA_IRQHandler+0x698>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d040      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a80      	ldr	r2, [pc, #512]	@ (8007268 <HAL_DMA_IRQHandler+0x69c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d03b      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a7f      	ldr	r2, [pc, #508]	@ (800726c <HAL_DMA_IRQHandler+0x6a0>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d036      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a7d      	ldr	r2, [pc, #500]	@ (8007270 <HAL_DMA_IRQHandler+0x6a4>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d031      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a7c      	ldr	r2, [pc, #496]	@ (8007274 <HAL_DMA_IRQHandler+0x6a8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d02c      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a7a      	ldr	r2, [pc, #488]	@ (8007278 <HAL_DMA_IRQHandler+0x6ac>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d027      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a79      	ldr	r2, [pc, #484]	@ (800727c <HAL_DMA_IRQHandler+0x6b0>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d022      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a77      	ldr	r2, [pc, #476]	@ (8007280 <HAL_DMA_IRQHandler+0x6b4>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d01d      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a76      	ldr	r2, [pc, #472]	@ (8007284 <HAL_DMA_IRQHandler+0x6b8>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d018      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a74      	ldr	r2, [pc, #464]	@ (8007288 <HAL_DMA_IRQHandler+0x6bc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d013      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a73      	ldr	r2, [pc, #460]	@ (800728c <HAL_DMA_IRQHandler+0x6c0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00e      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a71      	ldr	r2, [pc, #452]	@ (8007290 <HAL_DMA_IRQHandler+0x6c4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d009      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a70      	ldr	r2, [pc, #448]	@ (8007294 <HAL_DMA_IRQHandler+0x6c8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d004      	beq.n	80070e2 <HAL_DMA_IRQHandler+0x516>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a6e      	ldr	r2, [pc, #440]	@ (8007298 <HAL_DMA_IRQHandler+0x6cc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d10a      	bne.n	80070f8 <HAL_DMA_IRQHandler+0x52c>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	bf14      	ite	ne
 80070f0:	2301      	movne	r3, #1
 80070f2:	2300      	moveq	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	e009      	b.n	800710c <HAL_DMA_IRQHandler+0x540>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	2b00      	cmp	r3, #0
 8007104:	bf14      	ite	ne
 8007106:	2301      	movne	r3, #1
 8007108:	2300      	moveq	r3, #0
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d03e      	beq.n	800718e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	2210      	movs	r2, #16
 800711a:	409a      	lsls	r2, r3
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d018      	beq.n	8007160 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d108      	bne.n	800714e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007140:	2b00      	cmp	r3, #0
 8007142:	d024      	beq.n	800718e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
 800714c:	e01f      	b.n	800718e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007152:	2b00      	cmp	r3, #0
 8007154:	d01b      	beq.n	800718e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
 800715e:	e016      	b.n	800718e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800716a:	2b00      	cmp	r3, #0
 800716c:	d107      	bne.n	800717e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0208 	bic.w	r2, r2, #8
 800717c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2220      	movs	r2, #32
 8007198:	409a      	lsls	r2, r3
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	4013      	ands	r3, r2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f000 8110 	beq.w	80073c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a2c      	ldr	r2, [pc, #176]	@ (800725c <HAL_DMA_IRQHandler+0x690>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d04a      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a2b      	ldr	r2, [pc, #172]	@ (8007260 <HAL_DMA_IRQHandler+0x694>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d045      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a29      	ldr	r2, [pc, #164]	@ (8007264 <HAL_DMA_IRQHandler+0x698>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d040      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a28      	ldr	r2, [pc, #160]	@ (8007268 <HAL_DMA_IRQHandler+0x69c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d03b      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a26      	ldr	r2, [pc, #152]	@ (800726c <HAL_DMA_IRQHandler+0x6a0>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d036      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a25      	ldr	r2, [pc, #148]	@ (8007270 <HAL_DMA_IRQHandler+0x6a4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d031      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a23      	ldr	r2, [pc, #140]	@ (8007274 <HAL_DMA_IRQHandler+0x6a8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d02c      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a22      	ldr	r2, [pc, #136]	@ (8007278 <HAL_DMA_IRQHandler+0x6ac>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d027      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a20      	ldr	r2, [pc, #128]	@ (800727c <HAL_DMA_IRQHandler+0x6b0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d022      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1f      	ldr	r2, [pc, #124]	@ (8007280 <HAL_DMA_IRQHandler+0x6b4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d01d      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a1d      	ldr	r2, [pc, #116]	@ (8007284 <HAL_DMA_IRQHandler+0x6b8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d018      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1c      	ldr	r2, [pc, #112]	@ (8007288 <HAL_DMA_IRQHandler+0x6bc>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d013      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a1a      	ldr	r2, [pc, #104]	@ (800728c <HAL_DMA_IRQHandler+0x6c0>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d00e      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a19      	ldr	r2, [pc, #100]	@ (8007290 <HAL_DMA_IRQHandler+0x6c4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d009      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a17      	ldr	r2, [pc, #92]	@ (8007294 <HAL_DMA_IRQHandler+0x6c8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d004      	beq.n	8007244 <HAL_DMA_IRQHandler+0x678>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a16      	ldr	r2, [pc, #88]	@ (8007298 <HAL_DMA_IRQHandler+0x6cc>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d12b      	bne.n	800729c <HAL_DMA_IRQHandler+0x6d0>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0310 	and.w	r3, r3, #16
 800724e:	2b00      	cmp	r3, #0
 8007250:	bf14      	ite	ne
 8007252:	2301      	movne	r3, #1
 8007254:	2300      	moveq	r3, #0
 8007256:	b2db      	uxtb	r3, r3
 8007258:	e02a      	b.n	80072b0 <HAL_DMA_IRQHandler+0x6e4>
 800725a:	bf00      	nop
 800725c:	40020010 	.word	0x40020010
 8007260:	40020028 	.word	0x40020028
 8007264:	40020040 	.word	0x40020040
 8007268:	40020058 	.word	0x40020058
 800726c:	40020070 	.word	0x40020070
 8007270:	40020088 	.word	0x40020088
 8007274:	400200a0 	.word	0x400200a0
 8007278:	400200b8 	.word	0x400200b8
 800727c:	40020410 	.word	0x40020410
 8007280:	40020428 	.word	0x40020428
 8007284:	40020440 	.word	0x40020440
 8007288:	40020458 	.word	0x40020458
 800728c:	40020470 	.word	0x40020470
 8007290:	40020488 	.word	0x40020488
 8007294:	400204a0 	.word	0x400204a0
 8007298:	400204b8 	.word	0x400204b8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	bf14      	ite	ne
 80072aa:	2301      	movne	r3, #1
 80072ac:	2300      	moveq	r3, #0
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 8087 	beq.w	80073c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ba:	f003 031f 	and.w	r3, r3, #31
 80072be:	2220      	movs	r2, #32
 80072c0:	409a      	lsls	r2, r3
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d139      	bne.n	8007346 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0216 	bic.w	r2, r2, #22
 80072e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <HAL_DMA_IRQHandler+0x736>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0208 	bic.w	r2, r2, #8
 8007310:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007316:	f003 031f 	and.w	r3, r3, #31
 800731a:	223f      	movs	r2, #63	@ 0x3f
 800731c:	409a      	lsls	r2, r3
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 834a 	beq.w	80079d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	4798      	blx	r3
          }
          return;
 8007344:	e344      	b.n	80079d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d018      	beq.n	8007386 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d108      	bne.n	8007374 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007366:	2b00      	cmp	r3, #0
 8007368:	d02c      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	4798      	blx	r3
 8007372:	e027      	b.n	80073c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007378:	2b00      	cmp	r3, #0
 800737a:	d023      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
 8007384:	e01e      	b.n	80073c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10f      	bne.n	80073b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0210 	bic.w	r2, r2, #16
 80073a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 8306 	beq.w	80079da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 8088 	beq.w	80074ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2204      	movs	r2, #4
 80073e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a7a      	ldr	r2, [pc, #488]	@ (80075d4 <HAL_DMA_IRQHandler+0xa08>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d04a      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a79      	ldr	r2, [pc, #484]	@ (80075d8 <HAL_DMA_IRQHandler+0xa0c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d045      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a77      	ldr	r2, [pc, #476]	@ (80075dc <HAL_DMA_IRQHandler+0xa10>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d040      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a76      	ldr	r2, [pc, #472]	@ (80075e0 <HAL_DMA_IRQHandler+0xa14>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d03b      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a74      	ldr	r2, [pc, #464]	@ (80075e4 <HAL_DMA_IRQHandler+0xa18>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d036      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a73      	ldr	r2, [pc, #460]	@ (80075e8 <HAL_DMA_IRQHandler+0xa1c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d031      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a71      	ldr	r2, [pc, #452]	@ (80075ec <HAL_DMA_IRQHandler+0xa20>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d02c      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a70      	ldr	r2, [pc, #448]	@ (80075f0 <HAL_DMA_IRQHandler+0xa24>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d027      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a6e      	ldr	r2, [pc, #440]	@ (80075f4 <HAL_DMA_IRQHandler+0xa28>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d022      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a6d      	ldr	r2, [pc, #436]	@ (80075f8 <HAL_DMA_IRQHandler+0xa2c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d01d      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a6b      	ldr	r2, [pc, #428]	@ (80075fc <HAL_DMA_IRQHandler+0xa30>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d018      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a6a      	ldr	r2, [pc, #424]	@ (8007600 <HAL_DMA_IRQHandler+0xa34>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d013      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a68      	ldr	r2, [pc, #416]	@ (8007604 <HAL_DMA_IRQHandler+0xa38>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00e      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a67      	ldr	r2, [pc, #412]	@ (8007608 <HAL_DMA_IRQHandler+0xa3c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d009      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a65      	ldr	r2, [pc, #404]	@ (800760c <HAL_DMA_IRQHandler+0xa40>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d004      	beq.n	8007484 <HAL_DMA_IRQHandler+0x8b8>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a64      	ldr	r2, [pc, #400]	@ (8007610 <HAL_DMA_IRQHandler+0xa44>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d108      	bne.n	8007496 <HAL_DMA_IRQHandler+0x8ca>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0201 	bic.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	e007      	b.n	80074a6 <HAL_DMA_IRQHandler+0x8da>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	3301      	adds	r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d307      	bcc.n	80074c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1f2      	bne.n	80074a6 <HAL_DMA_IRQHandler+0x8da>
 80074c0:	e000      	b.n	80074c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80074c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2203      	movs	r2, #3
 80074d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80074da:	e003      	b.n	80074e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 8272 	beq.w	80079da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
 80074fe:	e26c      	b.n	80079da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a43      	ldr	r2, [pc, #268]	@ (8007614 <HAL_DMA_IRQHandler+0xa48>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d022      	beq.n	8007550 <HAL_DMA_IRQHandler+0x984>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a42      	ldr	r2, [pc, #264]	@ (8007618 <HAL_DMA_IRQHandler+0xa4c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d01d      	beq.n	8007550 <HAL_DMA_IRQHandler+0x984>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a40      	ldr	r2, [pc, #256]	@ (800761c <HAL_DMA_IRQHandler+0xa50>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d018      	beq.n	8007550 <HAL_DMA_IRQHandler+0x984>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a3f      	ldr	r2, [pc, #252]	@ (8007620 <HAL_DMA_IRQHandler+0xa54>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d013      	beq.n	8007550 <HAL_DMA_IRQHandler+0x984>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a3d      	ldr	r2, [pc, #244]	@ (8007624 <HAL_DMA_IRQHandler+0xa58>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00e      	beq.n	8007550 <HAL_DMA_IRQHandler+0x984>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a3c      	ldr	r2, [pc, #240]	@ (8007628 <HAL_DMA_IRQHandler+0xa5c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d009      	beq.n	8007550 <HAL_DMA_IRQHandler+0x984>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a3a      	ldr	r2, [pc, #232]	@ (800762c <HAL_DMA_IRQHandler+0xa60>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d004      	beq.n	8007550 <HAL_DMA_IRQHandler+0x984>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a39      	ldr	r2, [pc, #228]	@ (8007630 <HAL_DMA_IRQHandler+0xa64>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d101      	bne.n	8007554 <HAL_DMA_IRQHandler+0x988>
 8007550:	2301      	movs	r3, #1
 8007552:	e000      	b.n	8007556 <HAL_DMA_IRQHandler+0x98a>
 8007554:	2300      	movs	r3, #0
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 823f 	beq.w	80079da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007568:	f003 031f 	and.w	r3, r3, #31
 800756c:	2204      	movs	r2, #4
 800756e:	409a      	lsls	r2, r3
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	4013      	ands	r3, r2
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80cd 	beq.w	8007714 <HAL_DMA_IRQHandler+0xb48>
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 80c7 	beq.w	8007714 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	2204      	movs	r2, #4
 8007590:	409a      	lsls	r2, r3
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d049      	beq.n	8007634 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d109      	bne.n	80075be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 8210 	beq.w	80079d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075bc:	e20a      	b.n	80079d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8206 	beq.w	80079d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075d0:	e200      	b.n	80079d4 <HAL_DMA_IRQHandler+0xe08>
 80075d2:	bf00      	nop
 80075d4:	40020010 	.word	0x40020010
 80075d8:	40020028 	.word	0x40020028
 80075dc:	40020040 	.word	0x40020040
 80075e0:	40020058 	.word	0x40020058
 80075e4:	40020070 	.word	0x40020070
 80075e8:	40020088 	.word	0x40020088
 80075ec:	400200a0 	.word	0x400200a0
 80075f0:	400200b8 	.word	0x400200b8
 80075f4:	40020410 	.word	0x40020410
 80075f8:	40020428 	.word	0x40020428
 80075fc:	40020440 	.word	0x40020440
 8007600:	40020458 	.word	0x40020458
 8007604:	40020470 	.word	0x40020470
 8007608:	40020488 	.word	0x40020488
 800760c:	400204a0 	.word	0x400204a0
 8007610:	400204b8 	.word	0x400204b8
 8007614:	58025408 	.word	0x58025408
 8007618:	5802541c 	.word	0x5802541c
 800761c:	58025430 	.word	0x58025430
 8007620:	58025444 	.word	0x58025444
 8007624:	58025458 	.word	0x58025458
 8007628:	5802546c 	.word	0x5802546c
 800762c:	58025480 	.word	0x58025480
 8007630:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d160      	bne.n	8007700 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a7f      	ldr	r2, [pc, #508]	@ (8007840 <HAL_DMA_IRQHandler+0xc74>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d04a      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a7d      	ldr	r2, [pc, #500]	@ (8007844 <HAL_DMA_IRQHandler+0xc78>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d045      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a7c      	ldr	r2, [pc, #496]	@ (8007848 <HAL_DMA_IRQHandler+0xc7c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d040      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a7a      	ldr	r2, [pc, #488]	@ (800784c <HAL_DMA_IRQHandler+0xc80>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d03b      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a79      	ldr	r2, [pc, #484]	@ (8007850 <HAL_DMA_IRQHandler+0xc84>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d036      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a77      	ldr	r2, [pc, #476]	@ (8007854 <HAL_DMA_IRQHandler+0xc88>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d031      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a76      	ldr	r2, [pc, #472]	@ (8007858 <HAL_DMA_IRQHandler+0xc8c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d02c      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a74      	ldr	r2, [pc, #464]	@ (800785c <HAL_DMA_IRQHandler+0xc90>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d027      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a73      	ldr	r2, [pc, #460]	@ (8007860 <HAL_DMA_IRQHandler+0xc94>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d022      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a71      	ldr	r2, [pc, #452]	@ (8007864 <HAL_DMA_IRQHandler+0xc98>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d01d      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a70      	ldr	r2, [pc, #448]	@ (8007868 <HAL_DMA_IRQHandler+0xc9c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d018      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a6e      	ldr	r2, [pc, #440]	@ (800786c <HAL_DMA_IRQHandler+0xca0>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d013      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a6d      	ldr	r2, [pc, #436]	@ (8007870 <HAL_DMA_IRQHandler+0xca4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d00e      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a6b      	ldr	r2, [pc, #428]	@ (8007874 <HAL_DMA_IRQHandler+0xca8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d009      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a6a      	ldr	r2, [pc, #424]	@ (8007878 <HAL_DMA_IRQHandler+0xcac>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d004      	beq.n	80076de <HAL_DMA_IRQHandler+0xb12>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a68      	ldr	r2, [pc, #416]	@ (800787c <HAL_DMA_IRQHandler+0xcb0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d108      	bne.n	80076f0 <HAL_DMA_IRQHandler+0xb24>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0208 	bic.w	r2, r2, #8
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	e007      	b.n	8007700 <HAL_DMA_IRQHandler+0xb34>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0204 	bic.w	r2, r2, #4
 80076fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8165 	beq.w	80079d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007712:	e15f      	b.n	80079d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007718:	f003 031f 	and.w	r3, r3, #31
 800771c:	2202      	movs	r2, #2
 800771e:	409a      	lsls	r2, r3
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	4013      	ands	r3, r2
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 80c5 	beq.w	80078b4 <HAL_DMA_IRQHandler+0xce8>
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 80bf 	beq.w	80078b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800773a:	f003 031f 	and.w	r3, r3, #31
 800773e:	2202      	movs	r2, #2
 8007740:	409a      	lsls	r2, r3
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d018      	beq.n	8007782 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d109      	bne.n	800776e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 813a 	beq.w	80079d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800776c:	e134      	b.n	80079d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 8130 	beq.w	80079d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007780:	e12a      	b.n	80079d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f003 0320 	and.w	r3, r3, #32
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 8089 	bne.w	80078a0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a2b      	ldr	r2, [pc, #172]	@ (8007840 <HAL_DMA_IRQHandler+0xc74>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d04a      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a29      	ldr	r2, [pc, #164]	@ (8007844 <HAL_DMA_IRQHandler+0xc78>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d045      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a28      	ldr	r2, [pc, #160]	@ (8007848 <HAL_DMA_IRQHandler+0xc7c>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d040      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a26      	ldr	r2, [pc, #152]	@ (800784c <HAL_DMA_IRQHandler+0xc80>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d03b      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a25      	ldr	r2, [pc, #148]	@ (8007850 <HAL_DMA_IRQHandler+0xc84>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d036      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a23      	ldr	r2, [pc, #140]	@ (8007854 <HAL_DMA_IRQHandler+0xc88>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d031      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a22      	ldr	r2, [pc, #136]	@ (8007858 <HAL_DMA_IRQHandler+0xc8c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d02c      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a20      	ldr	r2, [pc, #128]	@ (800785c <HAL_DMA_IRQHandler+0xc90>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d027      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007860 <HAL_DMA_IRQHandler+0xc94>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d022      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007864 <HAL_DMA_IRQHandler+0xc98>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d01d      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007868 <HAL_DMA_IRQHandler+0xc9c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d018      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a1a      	ldr	r2, [pc, #104]	@ (800786c <HAL_DMA_IRQHandler+0xca0>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d013      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a19      	ldr	r2, [pc, #100]	@ (8007870 <HAL_DMA_IRQHandler+0xca4>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d00e      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a17      	ldr	r2, [pc, #92]	@ (8007874 <HAL_DMA_IRQHandler+0xca8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d009      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a16      	ldr	r2, [pc, #88]	@ (8007878 <HAL_DMA_IRQHandler+0xcac>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d004      	beq.n	800782e <HAL_DMA_IRQHandler+0xc62>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a14      	ldr	r2, [pc, #80]	@ (800787c <HAL_DMA_IRQHandler+0xcb0>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d128      	bne.n	8007880 <HAL_DMA_IRQHandler+0xcb4>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0214 	bic.w	r2, r2, #20
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	e027      	b.n	8007890 <HAL_DMA_IRQHandler+0xcc4>
 8007840:	40020010 	.word	0x40020010
 8007844:	40020028 	.word	0x40020028
 8007848:	40020040 	.word	0x40020040
 800784c:	40020058 	.word	0x40020058
 8007850:	40020070 	.word	0x40020070
 8007854:	40020088 	.word	0x40020088
 8007858:	400200a0 	.word	0x400200a0
 800785c:	400200b8 	.word	0x400200b8
 8007860:	40020410 	.word	0x40020410
 8007864:	40020428 	.word	0x40020428
 8007868:	40020440 	.word	0x40020440
 800786c:	40020458 	.word	0x40020458
 8007870:	40020470 	.word	0x40020470
 8007874:	40020488 	.word	0x40020488
 8007878:	400204a0 	.word	0x400204a0
 800787c:	400204b8 	.word	0x400204b8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 020a 	bic.w	r2, r2, #10
 800788e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8097 	beq.w	80079d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078b2:	e091      	b.n	80079d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	2208      	movs	r2, #8
 80078be:	409a      	lsls	r2, r3
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8088 	beq.w	80079da <HAL_DMA_IRQHandler+0xe0e>
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8082 	beq.w	80079da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a41      	ldr	r2, [pc, #260]	@ (80079e0 <HAL_DMA_IRQHandler+0xe14>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d04a      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a3f      	ldr	r2, [pc, #252]	@ (80079e4 <HAL_DMA_IRQHandler+0xe18>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d045      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a3e      	ldr	r2, [pc, #248]	@ (80079e8 <HAL_DMA_IRQHandler+0xe1c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d040      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a3c      	ldr	r2, [pc, #240]	@ (80079ec <HAL_DMA_IRQHandler+0xe20>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d03b      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a3b      	ldr	r2, [pc, #236]	@ (80079f0 <HAL_DMA_IRQHandler+0xe24>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d036      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a39      	ldr	r2, [pc, #228]	@ (80079f4 <HAL_DMA_IRQHandler+0xe28>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d031      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a38      	ldr	r2, [pc, #224]	@ (80079f8 <HAL_DMA_IRQHandler+0xe2c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d02c      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a36      	ldr	r2, [pc, #216]	@ (80079fc <HAL_DMA_IRQHandler+0xe30>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d027      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a35      	ldr	r2, [pc, #212]	@ (8007a00 <HAL_DMA_IRQHandler+0xe34>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d022      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a33      	ldr	r2, [pc, #204]	@ (8007a04 <HAL_DMA_IRQHandler+0xe38>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d01d      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a32      	ldr	r2, [pc, #200]	@ (8007a08 <HAL_DMA_IRQHandler+0xe3c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d018      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a30      	ldr	r2, [pc, #192]	@ (8007a0c <HAL_DMA_IRQHandler+0xe40>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d013      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a2f      	ldr	r2, [pc, #188]	@ (8007a10 <HAL_DMA_IRQHandler+0xe44>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00e      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a2d      	ldr	r2, [pc, #180]	@ (8007a14 <HAL_DMA_IRQHandler+0xe48>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d009      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a2c      	ldr	r2, [pc, #176]	@ (8007a18 <HAL_DMA_IRQHandler+0xe4c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d004      	beq.n	8007976 <HAL_DMA_IRQHandler+0xdaa>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a2a      	ldr	r2, [pc, #168]	@ (8007a1c <HAL_DMA_IRQHandler+0xe50>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d108      	bne.n	8007988 <HAL_DMA_IRQHandler+0xdbc>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 021c 	bic.w	r2, r2, #28
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	e007      	b.n	8007998 <HAL_DMA_IRQHandler+0xdcc>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 020e 	bic.w	r2, r2, #14
 8007996:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800799c:	f003 031f 	and.w	r3, r3, #31
 80079a0:	2201      	movs	r2, #1
 80079a2:	409a      	lsls	r2, r3
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d009      	beq.n	80079da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
 80079ce:	e004      	b.n	80079da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80079d0:	bf00      	nop
 80079d2:	e002      	b.n	80079da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079d4:	bf00      	nop
 80079d6:	e000      	b.n	80079da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80079da:	3728      	adds	r7, #40	@ 0x28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	40020010 	.word	0x40020010
 80079e4:	40020028 	.word	0x40020028
 80079e8:	40020040 	.word	0x40020040
 80079ec:	40020058 	.word	0x40020058
 80079f0:	40020070 	.word	0x40020070
 80079f4:	40020088 	.word	0x40020088
 80079f8:	400200a0 	.word	0x400200a0
 80079fc:	400200b8 	.word	0x400200b8
 8007a00:	40020410 	.word	0x40020410
 8007a04:	40020428 	.word	0x40020428
 8007a08:	40020440 	.word	0x40020440
 8007a0c:	40020458 	.word	0x40020458
 8007a10:	40020470 	.word	0x40020470
 8007a14:	40020488 	.word	0x40020488
 8007a18:	400204a0 	.word	0x400204a0
 8007a1c:	400204b8 	.word	0x400204b8

08007a20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a32:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a38:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a7f      	ldr	r2, [pc, #508]	@ (8007c3c <DMA_SetConfig+0x21c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d072      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a7d      	ldr	r2, [pc, #500]	@ (8007c40 <DMA_SetConfig+0x220>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d06d      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a7c      	ldr	r2, [pc, #496]	@ (8007c44 <DMA_SetConfig+0x224>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d068      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a7a      	ldr	r2, [pc, #488]	@ (8007c48 <DMA_SetConfig+0x228>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d063      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a79      	ldr	r2, [pc, #484]	@ (8007c4c <DMA_SetConfig+0x22c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d05e      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a77      	ldr	r2, [pc, #476]	@ (8007c50 <DMA_SetConfig+0x230>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d059      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a76      	ldr	r2, [pc, #472]	@ (8007c54 <DMA_SetConfig+0x234>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d054      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a74      	ldr	r2, [pc, #464]	@ (8007c58 <DMA_SetConfig+0x238>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d04f      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a73      	ldr	r2, [pc, #460]	@ (8007c5c <DMA_SetConfig+0x23c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d04a      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a71      	ldr	r2, [pc, #452]	@ (8007c60 <DMA_SetConfig+0x240>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d045      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a70      	ldr	r2, [pc, #448]	@ (8007c64 <DMA_SetConfig+0x244>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d040      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a6e      	ldr	r2, [pc, #440]	@ (8007c68 <DMA_SetConfig+0x248>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d03b      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a6d      	ldr	r2, [pc, #436]	@ (8007c6c <DMA_SetConfig+0x24c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d036      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a6b      	ldr	r2, [pc, #428]	@ (8007c70 <DMA_SetConfig+0x250>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d031      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a6a      	ldr	r2, [pc, #424]	@ (8007c74 <DMA_SetConfig+0x254>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d02c      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a68      	ldr	r2, [pc, #416]	@ (8007c78 <DMA_SetConfig+0x258>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d027      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a67      	ldr	r2, [pc, #412]	@ (8007c7c <DMA_SetConfig+0x25c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d022      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a65      	ldr	r2, [pc, #404]	@ (8007c80 <DMA_SetConfig+0x260>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01d      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a64      	ldr	r2, [pc, #400]	@ (8007c84 <DMA_SetConfig+0x264>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a62      	ldr	r2, [pc, #392]	@ (8007c88 <DMA_SetConfig+0x268>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a61      	ldr	r2, [pc, #388]	@ (8007c8c <DMA_SetConfig+0x26c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a5f      	ldr	r2, [pc, #380]	@ (8007c90 <DMA_SetConfig+0x270>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a5e      	ldr	r2, [pc, #376]	@ (8007c94 <DMA_SetConfig+0x274>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <DMA_SetConfig+0x10a>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a5c      	ldr	r2, [pc, #368]	@ (8007c98 <DMA_SetConfig+0x278>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d101      	bne.n	8007b2e <DMA_SetConfig+0x10e>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <DMA_SetConfig+0x110>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00d      	beq.n	8007b50 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007b3c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d004      	beq.n	8007b50 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007b4e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a39      	ldr	r2, [pc, #228]	@ (8007c3c <DMA_SetConfig+0x21c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d04a      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a38      	ldr	r2, [pc, #224]	@ (8007c40 <DMA_SetConfig+0x220>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d045      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a36      	ldr	r2, [pc, #216]	@ (8007c44 <DMA_SetConfig+0x224>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d040      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a35      	ldr	r2, [pc, #212]	@ (8007c48 <DMA_SetConfig+0x228>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d03b      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a33      	ldr	r2, [pc, #204]	@ (8007c4c <DMA_SetConfig+0x22c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d036      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a32      	ldr	r2, [pc, #200]	@ (8007c50 <DMA_SetConfig+0x230>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d031      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a30      	ldr	r2, [pc, #192]	@ (8007c54 <DMA_SetConfig+0x234>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d02c      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8007c58 <DMA_SetConfig+0x238>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d027      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8007c5c <DMA_SetConfig+0x23c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d022      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a2c      	ldr	r2, [pc, #176]	@ (8007c60 <DMA_SetConfig+0x240>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d01d      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a2a      	ldr	r2, [pc, #168]	@ (8007c64 <DMA_SetConfig+0x244>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d018      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a29      	ldr	r2, [pc, #164]	@ (8007c68 <DMA_SetConfig+0x248>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d013      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a27      	ldr	r2, [pc, #156]	@ (8007c6c <DMA_SetConfig+0x24c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00e      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a26      	ldr	r2, [pc, #152]	@ (8007c70 <DMA_SetConfig+0x250>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d009      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a24      	ldr	r2, [pc, #144]	@ (8007c74 <DMA_SetConfig+0x254>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d004      	beq.n	8007bf0 <DMA_SetConfig+0x1d0>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a23      	ldr	r2, [pc, #140]	@ (8007c78 <DMA_SetConfig+0x258>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d101      	bne.n	8007bf4 <DMA_SetConfig+0x1d4>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e000      	b.n	8007bf6 <DMA_SetConfig+0x1d6>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d059      	beq.n	8007cae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bfe:	f003 031f 	and.w	r3, r3, #31
 8007c02:	223f      	movs	r2, #63	@ 0x3f
 8007c04:	409a      	lsls	r2, r3
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007c18:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	2b40      	cmp	r3, #64	@ 0x40
 8007c28:	d138      	bne.n	8007c9c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c3a:	e086      	b.n	8007d4a <DMA_SetConfig+0x32a>
 8007c3c:	40020010 	.word	0x40020010
 8007c40:	40020028 	.word	0x40020028
 8007c44:	40020040 	.word	0x40020040
 8007c48:	40020058 	.word	0x40020058
 8007c4c:	40020070 	.word	0x40020070
 8007c50:	40020088 	.word	0x40020088
 8007c54:	400200a0 	.word	0x400200a0
 8007c58:	400200b8 	.word	0x400200b8
 8007c5c:	40020410 	.word	0x40020410
 8007c60:	40020428 	.word	0x40020428
 8007c64:	40020440 	.word	0x40020440
 8007c68:	40020458 	.word	0x40020458
 8007c6c:	40020470 	.word	0x40020470
 8007c70:	40020488 	.word	0x40020488
 8007c74:	400204a0 	.word	0x400204a0
 8007c78:	400204b8 	.word	0x400204b8
 8007c7c:	58025408 	.word	0x58025408
 8007c80:	5802541c 	.word	0x5802541c
 8007c84:	58025430 	.word	0x58025430
 8007c88:	58025444 	.word	0x58025444
 8007c8c:	58025458 	.word	0x58025458
 8007c90:	5802546c 	.word	0x5802546c
 8007c94:	58025480 	.word	0x58025480
 8007c98:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	60da      	str	r2, [r3, #12]
}
 8007cac:	e04d      	b.n	8007d4a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a29      	ldr	r2, [pc, #164]	@ (8007d58 <DMA_SetConfig+0x338>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d022      	beq.n	8007cfe <DMA_SetConfig+0x2de>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a27      	ldr	r2, [pc, #156]	@ (8007d5c <DMA_SetConfig+0x33c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d01d      	beq.n	8007cfe <DMA_SetConfig+0x2de>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a26      	ldr	r2, [pc, #152]	@ (8007d60 <DMA_SetConfig+0x340>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d018      	beq.n	8007cfe <DMA_SetConfig+0x2de>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a24      	ldr	r2, [pc, #144]	@ (8007d64 <DMA_SetConfig+0x344>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d013      	beq.n	8007cfe <DMA_SetConfig+0x2de>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a23      	ldr	r2, [pc, #140]	@ (8007d68 <DMA_SetConfig+0x348>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00e      	beq.n	8007cfe <DMA_SetConfig+0x2de>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a21      	ldr	r2, [pc, #132]	@ (8007d6c <DMA_SetConfig+0x34c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d009      	beq.n	8007cfe <DMA_SetConfig+0x2de>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a20      	ldr	r2, [pc, #128]	@ (8007d70 <DMA_SetConfig+0x350>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d004      	beq.n	8007cfe <DMA_SetConfig+0x2de>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8007d74 <DMA_SetConfig+0x354>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d101      	bne.n	8007d02 <DMA_SetConfig+0x2e2>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e000      	b.n	8007d04 <DMA_SetConfig+0x2e4>
 8007d02:	2300      	movs	r3, #0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d020      	beq.n	8007d4a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	2201      	movs	r2, #1
 8007d12:	409a      	lsls	r2, r3
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	2b40      	cmp	r3, #64	@ 0x40
 8007d26:	d108      	bne.n	8007d3a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	60da      	str	r2, [r3, #12]
}
 8007d38:	e007      	b.n	8007d4a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	60da      	str	r2, [r3, #12]
}
 8007d4a:	bf00      	nop
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	58025408 	.word	0x58025408
 8007d5c:	5802541c 	.word	0x5802541c
 8007d60:	58025430 	.word	0x58025430
 8007d64:	58025444 	.word	0x58025444
 8007d68:	58025458 	.word	0x58025458
 8007d6c:	5802546c 	.word	0x5802546c
 8007d70:	58025480 	.word	0x58025480
 8007d74:	58025494 	.word	0x58025494

08007d78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a42      	ldr	r2, [pc, #264]	@ (8007e90 <DMA_CalcBaseAndBitshift+0x118>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d04a      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a41      	ldr	r2, [pc, #260]	@ (8007e94 <DMA_CalcBaseAndBitshift+0x11c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d045      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a3f      	ldr	r2, [pc, #252]	@ (8007e98 <DMA_CalcBaseAndBitshift+0x120>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d040      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a3e      	ldr	r2, [pc, #248]	@ (8007e9c <DMA_CalcBaseAndBitshift+0x124>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d03b      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a3c      	ldr	r2, [pc, #240]	@ (8007ea0 <DMA_CalcBaseAndBitshift+0x128>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d036      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a3b      	ldr	r2, [pc, #236]	@ (8007ea4 <DMA_CalcBaseAndBitshift+0x12c>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d031      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a39      	ldr	r2, [pc, #228]	@ (8007ea8 <DMA_CalcBaseAndBitshift+0x130>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d02c      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a38      	ldr	r2, [pc, #224]	@ (8007eac <DMA_CalcBaseAndBitshift+0x134>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d027      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a36      	ldr	r2, [pc, #216]	@ (8007eb0 <DMA_CalcBaseAndBitshift+0x138>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d022      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a35      	ldr	r2, [pc, #212]	@ (8007eb4 <DMA_CalcBaseAndBitshift+0x13c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d01d      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a33      	ldr	r2, [pc, #204]	@ (8007eb8 <DMA_CalcBaseAndBitshift+0x140>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d018      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a32      	ldr	r2, [pc, #200]	@ (8007ebc <DMA_CalcBaseAndBitshift+0x144>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d013      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a30      	ldr	r2, [pc, #192]	@ (8007ec0 <DMA_CalcBaseAndBitshift+0x148>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00e      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a2f      	ldr	r2, [pc, #188]	@ (8007ec4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d009      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a2d      	ldr	r2, [pc, #180]	@ (8007ec8 <DMA_CalcBaseAndBitshift+0x150>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d004      	beq.n	8007e20 <DMA_CalcBaseAndBitshift+0xa8>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8007ecc <DMA_CalcBaseAndBitshift+0x154>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d101      	bne.n	8007e24 <DMA_CalcBaseAndBitshift+0xac>
 8007e20:	2301      	movs	r3, #1
 8007e22:	e000      	b.n	8007e26 <DMA_CalcBaseAndBitshift+0xae>
 8007e24:	2300      	movs	r3, #0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d024      	beq.n	8007e74 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	3b10      	subs	r3, #16
 8007e32:	4a27      	ldr	r2, [pc, #156]	@ (8007ed0 <DMA_CalcBaseAndBitshift+0x158>)
 8007e34:	fba2 2303 	umull	r2, r3, r2, r3
 8007e38:	091b      	lsrs	r3, r3, #4
 8007e3a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	4a24      	ldr	r2, [pc, #144]	@ (8007ed4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007e44:	5cd3      	ldrb	r3, [r2, r3]
 8007e46:	461a      	mov	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d908      	bls.n	8007e64 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	4b1f      	ldr	r3, [pc, #124]	@ (8007ed8 <DMA_CalcBaseAndBitshift+0x160>)
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	1d1a      	adds	r2, r3, #4
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	659a      	str	r2, [r3, #88]	@ 0x58
 8007e62:	e00d      	b.n	8007e80 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ed8 <DMA_CalcBaseAndBitshift+0x160>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e72:	e005      	b.n	8007e80 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	40020010 	.word	0x40020010
 8007e94:	40020028 	.word	0x40020028
 8007e98:	40020040 	.word	0x40020040
 8007e9c:	40020058 	.word	0x40020058
 8007ea0:	40020070 	.word	0x40020070
 8007ea4:	40020088 	.word	0x40020088
 8007ea8:	400200a0 	.word	0x400200a0
 8007eac:	400200b8 	.word	0x400200b8
 8007eb0:	40020410 	.word	0x40020410
 8007eb4:	40020428 	.word	0x40020428
 8007eb8:	40020440 	.word	0x40020440
 8007ebc:	40020458 	.word	0x40020458
 8007ec0:	40020470 	.word	0x40020470
 8007ec4:	40020488 	.word	0x40020488
 8007ec8:	400204a0 	.word	0x400204a0
 8007ecc:	400204b8 	.word	0x400204b8
 8007ed0:	aaaaaaab 	.word	0xaaaaaaab
 8007ed4:	08014748 	.word	0x08014748
 8007ed8:	fffffc00 	.word	0xfffffc00

08007edc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d120      	bne.n	8007f32 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d858      	bhi.n	8007faa <DMA_CheckFifoParam+0xce>
 8007ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8007f00 <DMA_CheckFifoParam+0x24>)
 8007efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efe:	bf00      	nop
 8007f00:	08007f11 	.word	0x08007f11
 8007f04:	08007f23 	.word	0x08007f23
 8007f08:	08007f11 	.word	0x08007f11
 8007f0c:	08007fab 	.word	0x08007fab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d048      	beq.n	8007fae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f20:	e045      	b.n	8007fae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007f2a:	d142      	bne.n	8007fb2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f30:	e03f      	b.n	8007fb2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f3a:	d123      	bne.n	8007f84 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d838      	bhi.n	8007fb6 <DMA_CheckFifoParam+0xda>
 8007f44:	a201      	add	r2, pc, #4	@ (adr r2, 8007f4c <DMA_CheckFifoParam+0x70>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f5d 	.word	0x08007f5d
 8007f50:	08007f63 	.word	0x08007f63
 8007f54:	08007f5d 	.word	0x08007f5d
 8007f58:	08007f75 	.word	0x08007f75
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	73fb      	strb	r3, [r7, #15]
        break;
 8007f60:	e030      	b.n	8007fc4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d025      	beq.n	8007fba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f72:	e022      	b.n	8007fba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007f7c:	d11f      	bne.n	8007fbe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007f82:	e01c      	b.n	8007fbe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d902      	bls.n	8007f92 <DMA_CheckFifoParam+0xb6>
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d003      	beq.n	8007f98 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007f90:	e018      	b.n	8007fc4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	73fb      	strb	r3, [r7, #15]
        break;
 8007f96:	e015      	b.n	8007fc4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00e      	beq.n	8007fc2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa8:	e00b      	b.n	8007fc2 <DMA_CheckFifoParam+0xe6>
        break;
 8007faa:	bf00      	nop
 8007fac:	e00a      	b.n	8007fc4 <DMA_CheckFifoParam+0xe8>
        break;
 8007fae:	bf00      	nop
 8007fb0:	e008      	b.n	8007fc4 <DMA_CheckFifoParam+0xe8>
        break;
 8007fb2:	bf00      	nop
 8007fb4:	e006      	b.n	8007fc4 <DMA_CheckFifoParam+0xe8>
        break;
 8007fb6:	bf00      	nop
 8007fb8:	e004      	b.n	8007fc4 <DMA_CheckFifoParam+0xe8>
        break;
 8007fba:	bf00      	nop
 8007fbc:	e002      	b.n	8007fc4 <DMA_CheckFifoParam+0xe8>
        break;
 8007fbe:	bf00      	nop
 8007fc0:	e000      	b.n	8007fc4 <DMA_CheckFifoParam+0xe8>
    break;
 8007fc2:	bf00      	nop
    }
  }

  return status;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop

08007fd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a38      	ldr	r2, [pc, #224]	@ (80080c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d022      	beq.n	8008032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a36      	ldr	r2, [pc, #216]	@ (80080cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d01d      	beq.n	8008032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a35      	ldr	r2, [pc, #212]	@ (80080d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d018      	beq.n	8008032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a33      	ldr	r2, [pc, #204]	@ (80080d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d013      	beq.n	8008032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a32      	ldr	r2, [pc, #200]	@ (80080d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00e      	beq.n	8008032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a30      	ldr	r2, [pc, #192]	@ (80080dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d009      	beq.n	8008032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a2f      	ldr	r2, [pc, #188]	@ (80080e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d004      	beq.n	8008032 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a2d      	ldr	r2, [pc, #180]	@ (80080e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d101      	bne.n	8008036 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008032:	2301      	movs	r3, #1
 8008034:	e000      	b.n	8008038 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008036:	2300      	movs	r3, #0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01a      	beq.n	8008072 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	3b08      	subs	r3, #8
 8008044:	4a28      	ldr	r2, [pc, #160]	@ (80080e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008046:	fba2 2303 	umull	r2, r3, r2, r3
 800804a:	091b      	lsrs	r3, r3, #4
 800804c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	4b26      	ldr	r3, [pc, #152]	@ (80080ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008052:	4413      	add	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	461a      	mov	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a24      	ldr	r2, [pc, #144]	@ (80080f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008060:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f003 031f 	and.w	r3, r3, #31
 8008068:	2201      	movs	r2, #1
 800806a:	409a      	lsls	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008070:	e024      	b.n	80080bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	3b10      	subs	r3, #16
 800807a:	4a1e      	ldr	r2, [pc, #120]	@ (80080f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800807c:	fba2 2303 	umull	r2, r3, r2, r3
 8008080:	091b      	lsrs	r3, r3, #4
 8008082:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	4a1c      	ldr	r2, [pc, #112]	@ (80080f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d806      	bhi.n	800809a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4a1b      	ldr	r2, [pc, #108]	@ (80080fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d902      	bls.n	800809a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3308      	adds	r3, #8
 8008098:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	4b18      	ldr	r3, [pc, #96]	@ (8008100 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a16      	ldr	r2, [pc, #88]	@ (8008104 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80080ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	2201      	movs	r2, #1
 80080b6:	409a      	lsls	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80080bc:	bf00      	nop
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	58025408 	.word	0x58025408
 80080cc:	5802541c 	.word	0x5802541c
 80080d0:	58025430 	.word	0x58025430
 80080d4:	58025444 	.word	0x58025444
 80080d8:	58025458 	.word	0x58025458
 80080dc:	5802546c 	.word	0x5802546c
 80080e0:	58025480 	.word	0x58025480
 80080e4:	58025494 	.word	0x58025494
 80080e8:	cccccccd 	.word	0xcccccccd
 80080ec:	16009600 	.word	0x16009600
 80080f0:	58025880 	.word	0x58025880
 80080f4:	aaaaaaab 	.word	0xaaaaaaab
 80080f8:	400204b8 	.word	0x400204b8
 80080fc:	4002040f 	.word	0x4002040f
 8008100:	10008200 	.word	0x10008200
 8008104:	40020880 	.word	0x40020880

08008108 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d04a      	beq.n	80081b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b08      	cmp	r3, #8
 8008122:	d847      	bhi.n	80081b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a25      	ldr	r2, [pc, #148]	@ (80081c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d022      	beq.n	8008174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a24      	ldr	r2, [pc, #144]	@ (80081c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d01d      	beq.n	8008174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a22      	ldr	r2, [pc, #136]	@ (80081c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d018      	beq.n	8008174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a21      	ldr	r2, [pc, #132]	@ (80081cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d013      	beq.n	8008174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a1f      	ldr	r2, [pc, #124]	@ (80081d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00e      	beq.n	8008174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a1e      	ldr	r2, [pc, #120]	@ (80081d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d009      	beq.n	8008174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a1c      	ldr	r2, [pc, #112]	@ (80081d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d004      	beq.n	8008174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a1b      	ldr	r2, [pc, #108]	@ (80081dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d101      	bne.n	8008178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008174:	2301      	movs	r3, #1
 8008176:	e000      	b.n	800817a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008178:	2300      	movs	r3, #0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4b17      	ldr	r3, [pc, #92]	@ (80081e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008182:	4413      	add	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	461a      	mov	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a15      	ldr	r2, [pc, #84]	@ (80081e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008190:	671a      	str	r2, [r3, #112]	@ 0x70
 8008192:	e009      	b.n	80081a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	4b14      	ldr	r3, [pc, #80]	@ (80081e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008198:	4413      	add	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	461a      	mov	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a11      	ldr	r2, [pc, #68]	@ (80081ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80081a6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	2201      	movs	r2, #1
 80081ae:	409a      	lsls	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	58025408 	.word	0x58025408
 80081c4:	5802541c 	.word	0x5802541c
 80081c8:	58025430 	.word	0x58025430
 80081cc:	58025444 	.word	0x58025444
 80081d0:	58025458 	.word	0x58025458
 80081d4:	5802546c 	.word	0x5802546c
 80081d8:	58025480 	.word	0x58025480
 80081dc:	58025494 	.word	0x58025494
 80081e0:	1600963f 	.word	0x1600963f
 80081e4:	58025940 	.word	0x58025940
 80081e8:	1000823f 	.word	0x1000823f
 80081ec:	40020940 	.word	0x40020940

080081f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b089      	sub	sp, #36	@ 0x24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80081fe:	4b89      	ldr	r3, [pc, #548]	@ (8008424 <HAL_GPIO_Init+0x234>)
 8008200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008202:	e194      	b.n	800852e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	2101      	movs	r1, #1
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	fa01 f303 	lsl.w	r3, r1, r3
 8008210:	4013      	ands	r3, r2
 8008212:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 8186 	beq.w	8008528 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f003 0303 	and.w	r3, r3, #3
 8008224:	2b01      	cmp	r3, #1
 8008226:	d005      	beq.n	8008234 <HAL_GPIO_Init+0x44>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	f003 0303 	and.w	r3, r3, #3
 8008230:	2b02      	cmp	r3, #2
 8008232:	d130      	bne.n	8008296 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	2203      	movs	r2, #3
 8008240:	fa02 f303 	lsl.w	r3, r2, r3
 8008244:	43db      	mvns	r3, r3
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	4013      	ands	r3, r2
 800824a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	4313      	orrs	r3, r2
 800825c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800826a:	2201      	movs	r2, #1
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	fa02 f303 	lsl.w	r3, r2, r3
 8008272:	43db      	mvns	r3, r3
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	4013      	ands	r3, r2
 8008278:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	091b      	lsrs	r3, r3, #4
 8008280:	f003 0201 	and.w	r2, r3, #1
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	4313      	orrs	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d017      	beq.n	80082d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	2203      	movs	r2, #3
 80082ae:	fa02 f303 	lsl.w	r3, r2, r3
 80082b2:	43db      	mvns	r3, r3
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	4013      	ands	r3, r2
 80082b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	fa02 f303 	lsl.w	r3, r2, r3
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d123      	bne.n	8008326 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	08da      	lsrs	r2, r3, #3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3208      	adds	r2, #8
 80082e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	220f      	movs	r2, #15
 80082f6:	fa02 f303 	lsl.w	r3, r2, r3
 80082fa:	43db      	mvns	r3, r3
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	4013      	ands	r3, r2
 8008300:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	4313      	orrs	r3, r2
 8008316:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	08da      	lsrs	r2, r3, #3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3208      	adds	r2, #8
 8008320:	69b9      	ldr	r1, [r7, #24]
 8008322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	2203      	movs	r2, #3
 8008332:	fa02 f303 	lsl.w	r3, r2, r3
 8008336:	43db      	mvns	r3, r3
 8008338:	69ba      	ldr	r2, [r7, #24]
 800833a:	4013      	ands	r3, r2
 800833c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f003 0203 	and.w	r2, r3, #3
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	fa02 f303 	lsl.w	r3, r2, r3
 800834e:	69ba      	ldr	r2, [r7, #24]
 8008350:	4313      	orrs	r3, r2
 8008352:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 80e0 	beq.w	8008528 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008368:	4b2f      	ldr	r3, [pc, #188]	@ (8008428 <HAL_GPIO_Init+0x238>)
 800836a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800836e:	4a2e      	ldr	r2, [pc, #184]	@ (8008428 <HAL_GPIO_Init+0x238>)
 8008370:	f043 0302 	orr.w	r3, r3, #2
 8008374:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008378:	4b2b      	ldr	r3, [pc, #172]	@ (8008428 <HAL_GPIO_Init+0x238>)
 800837a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008386:	4a29      	ldr	r2, [pc, #164]	@ (800842c <HAL_GPIO_Init+0x23c>)
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	089b      	lsrs	r3, r3, #2
 800838c:	3302      	adds	r3, #2
 800838e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	220f      	movs	r2, #15
 800839e:	fa02 f303 	lsl.w	r3, r2, r3
 80083a2:	43db      	mvns	r3, r3
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	4013      	ands	r3, r2
 80083a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a20      	ldr	r2, [pc, #128]	@ (8008430 <HAL_GPIO_Init+0x240>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d052      	beq.n	8008458 <HAL_GPIO_Init+0x268>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008434 <HAL_GPIO_Init+0x244>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d031      	beq.n	800841e <HAL_GPIO_Init+0x22e>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a1e      	ldr	r2, [pc, #120]	@ (8008438 <HAL_GPIO_Init+0x248>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d02b      	beq.n	800841a <HAL_GPIO_Init+0x22a>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a1d      	ldr	r2, [pc, #116]	@ (800843c <HAL_GPIO_Init+0x24c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d025      	beq.n	8008416 <HAL_GPIO_Init+0x226>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008440 <HAL_GPIO_Init+0x250>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01f      	beq.n	8008412 <HAL_GPIO_Init+0x222>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008444 <HAL_GPIO_Init+0x254>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d019      	beq.n	800840e <HAL_GPIO_Init+0x21e>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a1a      	ldr	r2, [pc, #104]	@ (8008448 <HAL_GPIO_Init+0x258>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <HAL_GPIO_Init+0x21a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a19      	ldr	r2, [pc, #100]	@ (800844c <HAL_GPIO_Init+0x25c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00d      	beq.n	8008406 <HAL_GPIO_Init+0x216>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a18      	ldr	r2, [pc, #96]	@ (8008450 <HAL_GPIO_Init+0x260>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d007      	beq.n	8008402 <HAL_GPIO_Init+0x212>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a17      	ldr	r2, [pc, #92]	@ (8008454 <HAL_GPIO_Init+0x264>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d101      	bne.n	80083fe <HAL_GPIO_Init+0x20e>
 80083fa:	2309      	movs	r3, #9
 80083fc:	e02d      	b.n	800845a <HAL_GPIO_Init+0x26a>
 80083fe:	230a      	movs	r3, #10
 8008400:	e02b      	b.n	800845a <HAL_GPIO_Init+0x26a>
 8008402:	2308      	movs	r3, #8
 8008404:	e029      	b.n	800845a <HAL_GPIO_Init+0x26a>
 8008406:	2307      	movs	r3, #7
 8008408:	e027      	b.n	800845a <HAL_GPIO_Init+0x26a>
 800840a:	2306      	movs	r3, #6
 800840c:	e025      	b.n	800845a <HAL_GPIO_Init+0x26a>
 800840e:	2305      	movs	r3, #5
 8008410:	e023      	b.n	800845a <HAL_GPIO_Init+0x26a>
 8008412:	2304      	movs	r3, #4
 8008414:	e021      	b.n	800845a <HAL_GPIO_Init+0x26a>
 8008416:	2303      	movs	r3, #3
 8008418:	e01f      	b.n	800845a <HAL_GPIO_Init+0x26a>
 800841a:	2302      	movs	r3, #2
 800841c:	e01d      	b.n	800845a <HAL_GPIO_Init+0x26a>
 800841e:	2301      	movs	r3, #1
 8008420:	e01b      	b.n	800845a <HAL_GPIO_Init+0x26a>
 8008422:	bf00      	nop
 8008424:	58000080 	.word	0x58000080
 8008428:	58024400 	.word	0x58024400
 800842c:	58000400 	.word	0x58000400
 8008430:	58020000 	.word	0x58020000
 8008434:	58020400 	.word	0x58020400
 8008438:	58020800 	.word	0x58020800
 800843c:	58020c00 	.word	0x58020c00
 8008440:	58021000 	.word	0x58021000
 8008444:	58021400 	.word	0x58021400
 8008448:	58021800 	.word	0x58021800
 800844c:	58021c00 	.word	0x58021c00
 8008450:	58022000 	.word	0x58022000
 8008454:	58022400 	.word	0x58022400
 8008458:	2300      	movs	r3, #0
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	f002 0203 	and.w	r2, r2, #3
 8008460:	0092      	lsls	r2, r2, #2
 8008462:	4093      	lsls	r3, r2
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	4313      	orrs	r3, r2
 8008468:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800846a:	4938      	ldr	r1, [pc, #224]	@ (800854c <HAL_GPIO_Init+0x35c>)
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	089b      	lsrs	r3, r3, #2
 8008470:	3302      	adds	r3, #2
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	43db      	mvns	r3, r3
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	4013      	ands	r3, r2
 8008488:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4313      	orrs	r3, r2
 800849c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800849e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80084a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	43db      	mvns	r3, r3
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	4013      	ands	r3, r2
 80084b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80084cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	43db      	mvns	r3, r3
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	4013      	ands	r3, r2
 80084e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	69ba      	ldr	r2, [r7, #24]
 80084fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	43db      	mvns	r3, r3
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	4013      	ands	r3, r2
 800850c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	3301      	adds	r3, #1
 800852c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	fa22 f303 	lsr.w	r3, r2, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	f47f ae63 	bne.w	8008204 <HAL_GPIO_Init+0x14>
  }
}
 800853e:	bf00      	nop
 8008540:	bf00      	nop
 8008542:	3724      	adds	r7, #36	@ 0x24
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	58000400 	.word	0x58000400

08008550 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800855e:	4b75      	ldr	r3, [pc, #468]	@ (8008734 <HAL_GPIO_DeInit+0x1e4>)
 8008560:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008562:	e0d9      	b.n	8008718 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008564:	2201      	movs	r2, #1
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	fa02 f303 	lsl.w	r3, r2, r3
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	4013      	ands	r3, r2
 8008570:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 80cc 	beq.w	8008712 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800857a:	4a6f      	ldr	r2, [pc, #444]	@ (8008738 <HAL_GPIO_DeInit+0x1e8>)
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	089b      	lsrs	r3, r3, #2
 8008580:	3302      	adds	r3, #2
 8008582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008586:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f003 0303 	and.w	r3, r3, #3
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	220f      	movs	r2, #15
 8008592:	fa02 f303 	lsl.w	r3, r2, r3
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	4013      	ands	r3, r2
 800859a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a67      	ldr	r2, [pc, #412]	@ (800873c <HAL_GPIO_DeInit+0x1ec>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d037      	beq.n	8008614 <HAL_GPIO_DeInit+0xc4>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a66      	ldr	r2, [pc, #408]	@ (8008740 <HAL_GPIO_DeInit+0x1f0>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d031      	beq.n	8008610 <HAL_GPIO_DeInit+0xc0>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a65      	ldr	r2, [pc, #404]	@ (8008744 <HAL_GPIO_DeInit+0x1f4>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d02b      	beq.n	800860c <HAL_GPIO_DeInit+0xbc>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a64      	ldr	r2, [pc, #400]	@ (8008748 <HAL_GPIO_DeInit+0x1f8>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d025      	beq.n	8008608 <HAL_GPIO_DeInit+0xb8>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a63      	ldr	r2, [pc, #396]	@ (800874c <HAL_GPIO_DeInit+0x1fc>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d01f      	beq.n	8008604 <HAL_GPIO_DeInit+0xb4>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a62      	ldr	r2, [pc, #392]	@ (8008750 <HAL_GPIO_DeInit+0x200>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d019      	beq.n	8008600 <HAL_GPIO_DeInit+0xb0>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a61      	ldr	r2, [pc, #388]	@ (8008754 <HAL_GPIO_DeInit+0x204>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d013      	beq.n	80085fc <HAL_GPIO_DeInit+0xac>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a60      	ldr	r2, [pc, #384]	@ (8008758 <HAL_GPIO_DeInit+0x208>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d00d      	beq.n	80085f8 <HAL_GPIO_DeInit+0xa8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a5f      	ldr	r2, [pc, #380]	@ (800875c <HAL_GPIO_DeInit+0x20c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d007      	beq.n	80085f4 <HAL_GPIO_DeInit+0xa4>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a5e      	ldr	r2, [pc, #376]	@ (8008760 <HAL_GPIO_DeInit+0x210>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d101      	bne.n	80085f0 <HAL_GPIO_DeInit+0xa0>
 80085ec:	2309      	movs	r3, #9
 80085ee:	e012      	b.n	8008616 <HAL_GPIO_DeInit+0xc6>
 80085f0:	230a      	movs	r3, #10
 80085f2:	e010      	b.n	8008616 <HAL_GPIO_DeInit+0xc6>
 80085f4:	2308      	movs	r3, #8
 80085f6:	e00e      	b.n	8008616 <HAL_GPIO_DeInit+0xc6>
 80085f8:	2307      	movs	r3, #7
 80085fa:	e00c      	b.n	8008616 <HAL_GPIO_DeInit+0xc6>
 80085fc:	2306      	movs	r3, #6
 80085fe:	e00a      	b.n	8008616 <HAL_GPIO_DeInit+0xc6>
 8008600:	2305      	movs	r3, #5
 8008602:	e008      	b.n	8008616 <HAL_GPIO_DeInit+0xc6>
 8008604:	2304      	movs	r3, #4
 8008606:	e006      	b.n	8008616 <HAL_GPIO_DeInit+0xc6>
 8008608:	2303      	movs	r3, #3
 800860a:	e004      	b.n	8008616 <HAL_GPIO_DeInit+0xc6>
 800860c:	2302      	movs	r3, #2
 800860e:	e002      	b.n	8008616 <HAL_GPIO_DeInit+0xc6>
 8008610:	2301      	movs	r3, #1
 8008612:	e000      	b.n	8008616 <HAL_GPIO_DeInit+0xc6>
 8008614:	2300      	movs	r3, #0
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	f002 0203 	and.w	r2, r2, #3
 800861c:	0092      	lsls	r2, r2, #2
 800861e:	4093      	lsls	r3, r2
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	429a      	cmp	r2, r3
 8008624:	d136      	bne.n	8008694 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	43db      	mvns	r3, r3
 800862e:	401a      	ands	r2, r3
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	43db      	mvns	r3, r3
 800863c:	401a      	ands	r2, r3
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	43db      	mvns	r3, r3
 800864c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008650:	4013      	ands	r3, r2
 8008652:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	43db      	mvns	r3, r3
 800865e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008662:	4013      	ands	r3, r2
 8008664:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f003 0303 	and.w	r3, r3, #3
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	220f      	movs	r2, #15
 8008670:	fa02 f303 	lsl.w	r3, r2, r3
 8008674:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008676:	4a30      	ldr	r2, [pc, #192]	@ (8008738 <HAL_GPIO_DeInit+0x1e8>)
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	089b      	lsrs	r3, r3, #2
 800867c:	3302      	adds	r3, #2
 800867e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	43da      	mvns	r2, r3
 8008686:	482c      	ldr	r0, [pc, #176]	@ (8008738 <HAL_GPIO_DeInit+0x1e8>)
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	089b      	lsrs	r3, r3, #2
 800868c:	400a      	ands	r2, r1
 800868e:	3302      	adds	r3, #2
 8008690:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	2103      	movs	r1, #3
 800869e:	fa01 f303 	lsl.w	r3, r1, r3
 80086a2:	431a      	orrs	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	08da      	lsrs	r2, r3, #3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3208      	adds	r2, #8
 80086b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	220f      	movs	r2, #15
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	43db      	mvns	r3, r3
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	08d2      	lsrs	r2, r2, #3
 80086c8:	4019      	ands	r1, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3208      	adds	r2, #8
 80086ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68da      	ldr	r2, [r3, #12]
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	2103      	movs	r1, #3
 80086dc:	fa01 f303 	lsl.w	r3, r1, r3
 80086e0:	43db      	mvns	r3, r3
 80086e2:	401a      	ands	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	2101      	movs	r1, #1
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	fa01 f303 	lsl.w	r3, r1, r3
 80086f4:	43db      	mvns	r3, r3
 80086f6:	401a      	ands	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	2103      	movs	r1, #3
 8008706:	fa01 f303 	lsl.w	r3, r1, r3
 800870a:	43db      	mvns	r3, r3
 800870c:	401a      	ands	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	3301      	adds	r3, #1
 8008716:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	fa22 f303 	lsr.w	r3, r2, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	f47f af1f 	bne.w	8008564 <HAL_GPIO_DeInit+0x14>
  }
}
 8008726:	bf00      	nop
 8008728:	bf00      	nop
 800872a:	371c      	adds	r7, #28
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	58000080 	.word	0x58000080
 8008738:	58000400 	.word	0x58000400
 800873c:	58020000 	.word	0x58020000
 8008740:	58020400 	.word	0x58020400
 8008744:	58020800 	.word	0x58020800
 8008748:	58020c00 	.word	0x58020c00
 800874c:	58021000 	.word	0x58021000
 8008750:	58021400 	.word	0x58021400
 8008754:	58021800 	.word	0x58021800
 8008758:	58021c00 	.word	0x58021c00
 800875c:	58022000 	.word	0x58022000
 8008760:	58022400 	.word	0x58022400

08008764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	807b      	strh	r3, [r7, #2]
 8008770:	4613      	mov	r3, r2
 8008772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008774:	787b      	ldrb	r3, [r7, #1]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800877a:	887a      	ldrh	r2, [r7, #2]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008780:	e003      	b.n	800878a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008782:	887b      	ldrh	r3, [r7, #2]
 8008784:	041a      	lsls	r2, r3, #16
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	619a      	str	r2, [r3, #24]
}
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
	...

08008798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e07f      	b.n	80088aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d106      	bne.n	80087c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7f8 fe60 	bl	8001484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2224      	movs	r2, #36	@ 0x24
 80087c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f022 0201 	bic.w	r2, r2, #1
 80087da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80087e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80087f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d107      	bne.n	8008812 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800880e:	609a      	str	r2, [r3, #8]
 8008810:	e006      	b.n	8008820 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800881e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	2b02      	cmp	r3, #2
 8008826:	d104      	bne.n	8008832 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008830:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6859      	ldr	r1, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	4b1d      	ldr	r3, [pc, #116]	@ (80088b4 <HAL_I2C_Init+0x11c>)
 800883e:	430b      	orrs	r3, r1
 8008840:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008850:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	691a      	ldr	r2, [r3, #16]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	69d9      	ldr	r1, [r3, #28]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a1a      	ldr	r2, [r3, #32]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0201 	orr.w	r2, r2, #1
 800888a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2220      	movs	r2, #32
 8008896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	02008000 	.word	0x02008000

080088b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	d138      	bne.n	8008940 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80088d8:	2302      	movs	r3, #2
 80088da:	e032      	b.n	8008942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2224      	movs	r2, #36	@ 0x24
 80088e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0201 	bic.w	r2, r2, #1
 80088fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800890a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6819      	ldr	r1, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0201 	orr.w	r2, r2, #1
 800892a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2220      	movs	r2, #32
 8008930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	e000      	b.n	8008942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008940:	2302      	movs	r3, #2
  }
}
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800894e:	b480      	push	{r7}
 8008950:	b085      	sub	sp, #20
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b20      	cmp	r3, #32
 8008962:	d139      	bne.n	80089d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800896a:	2b01      	cmp	r3, #1
 800896c:	d101      	bne.n	8008972 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800896e:	2302      	movs	r3, #2
 8008970:	e033      	b.n	80089da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2224      	movs	r2, #36	@ 0x24
 800897e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f022 0201 	bic.w	r2, r2, #1
 8008990:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80089a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	021b      	lsls	r3, r3, #8
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0201 	orr.w	r2, r2, #1
 80089c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2220      	movs	r2, #32
 80089c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	e000      	b.n	80089da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80089d8:	2302      	movs	r3, #2
  }
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
	...

080089e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80089f0:	4b19      	ldr	r3, [pc, #100]	@ (8008a58 <HAL_PWREx_ConfigSupply+0x70>)
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b04      	cmp	r3, #4
 80089fa:	d00a      	beq.n	8008a12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80089fc:	4b16      	ldr	r3, [pc, #88]	@ (8008a58 <HAL_PWREx_ConfigSupply+0x70>)
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d001      	beq.n	8008a0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e01f      	b.n	8008a4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	e01d      	b.n	8008a4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008a12:	4b11      	ldr	r3, [pc, #68]	@ (8008a58 <HAL_PWREx_ConfigSupply+0x70>)
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	f023 0207 	bic.w	r2, r3, #7
 8008a1a:	490f      	ldr	r1, [pc, #60]	@ (8008a58 <HAL_PWREx_ConfigSupply+0x70>)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008a22:	f7fa f8f3 	bl	8002c0c <HAL_GetTick>
 8008a26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a28:	e009      	b.n	8008a3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008a2a:	f7fa f8ef 	bl	8002c0c <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a38:	d901      	bls.n	8008a3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e007      	b.n	8008a4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a3e:	4b06      	ldr	r3, [pc, #24]	@ (8008a58 <HAL_PWREx_ConfigSupply+0x70>)
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a4a:	d1ee      	bne.n	8008a2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	58024800 	.word	0x58024800

08008a5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08c      	sub	sp, #48	@ 0x30
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d102      	bne.n	8008a70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f000 bc48 	b.w	8009300 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 808c 	beq.w	8008b96 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a7e:	4b96      	ldr	r3, [pc, #600]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a88:	4b93      	ldr	r3, [pc, #588]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a90:	2b10      	cmp	r3, #16
 8008a92:	d007      	beq.n	8008aa4 <HAL_RCC_OscConfig+0x48>
 8008a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a96:	2b18      	cmp	r3, #24
 8008a98:	d111      	bne.n	8008abe <HAL_RCC_OscConfig+0x62>
 8008a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d10c      	bne.n	8008abe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d071      	beq.n	8008b94 <HAL_RCC_OscConfig+0x138>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d16d      	bne.n	8008b94 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f000 bc21 	b.w	8009300 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ac6:	d106      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x7a>
 8008ac8:	4b83      	ldr	r3, [pc, #524]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a82      	ldr	r2, [pc, #520]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	e02e      	b.n	8008b34 <HAL_RCC_OscConfig+0xd8>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10c      	bne.n	8008af8 <HAL_RCC_OscConfig+0x9c>
 8008ade:	4b7e      	ldr	r3, [pc, #504]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	4b7b      	ldr	r3, [pc, #492]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a7a      	ldr	r2, [pc, #488]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008af0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	e01d      	b.n	8008b34 <HAL_RCC_OscConfig+0xd8>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b00:	d10c      	bne.n	8008b1c <HAL_RCC_OscConfig+0xc0>
 8008b02:	4b75      	ldr	r3, [pc, #468]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a74      	ldr	r2, [pc, #464]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	4b72      	ldr	r3, [pc, #456]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a71      	ldr	r2, [pc, #452]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b18:	6013      	str	r3, [r2, #0]
 8008b1a:	e00b      	b.n	8008b34 <HAL_RCC_OscConfig+0xd8>
 8008b1c:	4b6e      	ldr	r3, [pc, #440]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a6d      	ldr	r2, [pc, #436]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b26:	6013      	str	r3, [r2, #0]
 8008b28:	4b6b      	ldr	r3, [pc, #428]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a6a      	ldr	r2, [pc, #424]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d015      	beq.n	8008b68 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b3c:	f7fa f866 	bl	8002c0c <HAL_GetTick>
 8008b40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b42:	e00a      	b.n	8008b5a <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b44:	f7fa f862 	bl	8002c0c <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d901      	bls.n	8008b5a <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e3d2      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0ee      	beq.n	8008b44 <HAL_RCC_OscConfig+0xe8>
 8008b66:	e016      	b.n	8008b96 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b68:	f7fa f850 	bl	8002c0c <HAL_GetTick>
 8008b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008b6e:	e00a      	b.n	8008b86 <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b70:	f7fa f84c 	bl	8002c0c <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e3bc      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008b86:	4b54      	ldr	r3, [pc, #336]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1ee      	bne.n	8008b70 <HAL_RCC_OscConfig+0x114>
 8008b92:	e000      	b.n	8008b96 <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f000 80cb 	beq.w	8008d3a <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bae:	4b4a      	ldr	r3, [pc, #296]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d007      	beq.n	8008bca <HAL_RCC_OscConfig+0x16e>
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	2b18      	cmp	r3, #24
 8008bbe:	d156      	bne.n	8008c6e <HAL_RCC_OscConfig+0x212>
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	f003 0303 	and.w	r3, r3, #3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d151      	bne.n	8008c6e <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bca:	4b43      	ldr	r3, [pc, #268]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d005      	beq.n	8008be2 <HAL_RCC_OscConfig+0x186>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e38e      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008be2:	4b3d      	ldr	r3, [pc, #244]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f023 0219 	bic.w	r2, r3, #25
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	493a      	ldr	r1, [pc, #232]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf4:	f7fa f80a 	bl	8002c0c <HAL_GetTick>
 8008bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bfc:	f7fa f806 	bl	8002c0c <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e378      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c0e:	4b32      	ldr	r3, [pc, #200]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0f0      	beq.n	8008bfc <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c1a:	f7fa f827 	bl	8002c6c <HAL_GetREVID>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d817      	bhi.n	8008c58 <HAL_RCC_OscConfig+0x1fc>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	2b40      	cmp	r3, #64	@ 0x40
 8008c2e:	d108      	bne.n	8008c42 <HAL_RCC_OscConfig+0x1e6>
 8008c30:	4b29      	ldr	r3, [pc, #164]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008c38:	4a27      	ldr	r2, [pc, #156]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c3e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c40:	e07b      	b.n	8008d3a <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c42:	4b25      	ldr	r3, [pc, #148]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	031b      	lsls	r3, r3, #12
 8008c50:	4921      	ldr	r1, [pc, #132]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c56:	e070      	b.n	8008d3a <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c58:	4b1f      	ldr	r3, [pc, #124]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	061b      	lsls	r3, r3, #24
 8008c66:	491c      	ldr	r1, [pc, #112]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c6c:	e065      	b.n	8008d3a <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d048      	beq.n	8008d08 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c76:	4b18      	ldr	r3, [pc, #96]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f023 0219 	bic.w	r2, r3, #25
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	4915      	ldr	r1, [pc, #84]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c88:	f7f9 ffc0 	bl	8002c0c <HAL_GetTick>
 8008c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c8e:	e008      	b.n	8008ca2 <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c90:	f7f9 ffbc 	bl	8002c0c <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d901      	bls.n	8008ca2 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e32e      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0304 	and.w	r3, r3, #4
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0f0      	beq.n	8008c90 <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cae:	f7f9 ffdd 	bl	8002c6c <HAL_GetREVID>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d81a      	bhi.n	8008cf2 <HAL_RCC_OscConfig+0x296>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	2b40      	cmp	r3, #64	@ 0x40
 8008cc2:	d10b      	bne.n	8008cdc <HAL_RCC_OscConfig+0x280>
 8008cc4:	4b04      	ldr	r3, [pc, #16]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008ccc:	4a02      	ldr	r2, [pc, #8]	@ (8008cd8 <HAL_RCC_OscConfig+0x27c>)
 8008cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cd2:	6053      	str	r3, [r2, #4]
 8008cd4:	e031      	b.n	8008d3a <HAL_RCC_OscConfig+0x2de>
 8008cd6:	bf00      	nop
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	4b9c      	ldr	r3, [pc, #624]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	031b      	lsls	r3, r3, #12
 8008cea:	4999      	ldr	r1, [pc, #612]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	604b      	str	r3, [r1, #4]
 8008cf0:	e023      	b.n	8008d3a <HAL_RCC_OscConfig+0x2de>
 8008cf2:	4b97      	ldr	r3, [pc, #604]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	061b      	lsls	r3, r3, #24
 8008d00:	4993      	ldr	r1, [pc, #588]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	604b      	str	r3, [r1, #4]
 8008d06:	e018      	b.n	8008d3a <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d08:	4b91      	ldr	r3, [pc, #580]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a90      	ldr	r2, [pc, #576]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d0e:	f023 0301 	bic.w	r3, r3, #1
 8008d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d14:	f7f9 ff7a 	bl	8002c0c <HAL_GetTick>
 8008d18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d1a:	e008      	b.n	8008d2e <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d1c:	f7f9 ff76 	bl	8002c0c <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d901      	bls.n	8008d2e <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	e2e8      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d2e:	4b88      	ldr	r3, [pc, #544]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1f0      	bne.n	8008d1c <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0310 	and.w	r3, r3, #16
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 80a9 	beq.w	8008e9a <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d48:	4b81      	ldr	r3, [pc, #516]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d50:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d52:	4b7f      	ldr	r3, [pc, #508]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d56:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	2b08      	cmp	r3, #8
 8008d5c:	d007      	beq.n	8008d6e <HAL_RCC_OscConfig+0x312>
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	2b18      	cmp	r3, #24
 8008d62:	d13a      	bne.n	8008dda <HAL_RCC_OscConfig+0x37e>
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d135      	bne.n	8008dda <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d6e:	4b78      	ldr	r3, [pc, #480]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <HAL_RCC_OscConfig+0x32a>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	2b80      	cmp	r3, #128	@ 0x80
 8008d80:	d001      	beq.n	8008d86 <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e2bc      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d86:	f7f9 ff71 	bl	8002c6c <HAL_GetREVID>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d817      	bhi.n	8008dc4 <HAL_RCC_OscConfig+0x368>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	2b20      	cmp	r3, #32
 8008d9a:	d108      	bne.n	8008dae <HAL_RCC_OscConfig+0x352>
 8008d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008da4:	4a6a      	ldr	r2, [pc, #424]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008da6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008daa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008dac:	e075      	b.n	8008e9a <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008dae:	4b68      	ldr	r3, [pc, #416]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	069b      	lsls	r3, r3, #26
 8008dbc:	4964      	ldr	r1, [pc, #400]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008dc2:	e06a      	b.n	8008e9a <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008dc4:	4b62      	ldr	r3, [pc, #392]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	061b      	lsls	r3, r3, #24
 8008dd2:	495f      	ldr	r1, [pc, #380]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008dd8:	e05f      	b.n	8008e9a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d042      	beq.n	8008e68 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008de2:	4b5b      	ldr	r3, [pc, #364]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a5a      	ldr	r2, [pc, #360]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dee:	f7f9 ff0d 	bl	8002c0c <HAL_GetTick>
 8008df2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008df4:	e008      	b.n	8008e08 <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008df6:	f7f9 ff09 	bl	8002c0c <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d901      	bls.n	8008e08 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e27b      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e08:	4b51      	ldr	r3, [pc, #324]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0f0      	beq.n	8008df6 <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e14:	f7f9 ff2a 	bl	8002c6c <HAL_GetREVID>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d817      	bhi.n	8008e52 <HAL_RCC_OscConfig+0x3f6>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	2b20      	cmp	r3, #32
 8008e28:	d108      	bne.n	8008e3c <HAL_RCC_OscConfig+0x3e0>
 8008e2a:	4b49      	ldr	r3, [pc, #292]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008e32:	4a47      	ldr	r2, [pc, #284]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e38:	6053      	str	r3, [r2, #4]
 8008e3a:	e02e      	b.n	8008e9a <HAL_RCC_OscConfig+0x43e>
 8008e3c:	4b44      	ldr	r3, [pc, #272]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a1b      	ldr	r3, [r3, #32]
 8008e48:	069b      	lsls	r3, r3, #26
 8008e4a:	4941      	ldr	r1, [pc, #260]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	604b      	str	r3, [r1, #4]
 8008e50:	e023      	b.n	8008e9a <HAL_RCC_OscConfig+0x43e>
 8008e52:	4b3f      	ldr	r3, [pc, #252]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	061b      	lsls	r3, r3, #24
 8008e60:	493b      	ldr	r1, [pc, #236]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	60cb      	str	r3, [r1, #12]
 8008e66:	e018      	b.n	8008e9a <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008e68:	4b39      	ldr	r3, [pc, #228]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a38      	ldr	r2, [pc, #224]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e74:	f7f9 feca 	bl	8002c0c <HAL_GetTick>
 8008e78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008e7c:	f7f9 fec6 	bl	8002c0c <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e238      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008e8e:	4b30      	ldr	r3, [pc, #192]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1f0      	bne.n	8008e7c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0308 	and.w	r3, r3, #8
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d036      	beq.n	8008f14 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d019      	beq.n	8008ee2 <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008eae:	4b28      	ldr	r3, [pc, #160]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008eb2:	4a27      	ldr	r2, [pc, #156]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008eb4:	f043 0301 	orr.w	r3, r3, #1
 8008eb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eba:	f7f9 fea7 	bl	8002c0c <HAL_GetTick>
 8008ebe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ec0:	e008      	b.n	8008ed4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ec2:	f7f9 fea3 	bl	8002c0c <HAL_GetTick>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d901      	bls.n	8008ed4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e215      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0f0      	beq.n	8008ec2 <HAL_RCC_OscConfig+0x466>
 8008ee0:	e018      	b.n	8008f14 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008ee8:	f023 0301 	bic.w	r3, r3, #1
 8008eec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eee:	f7f9 fe8d 	bl	8002c0c <HAL_GetTick>
 8008ef2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ef4:	e008      	b.n	8008f08 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ef6:	f7f9 fe89 	bl	8002c0c <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d901      	bls.n	8008f08 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e1fb      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f08:	4b11      	ldr	r3, [pc, #68]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f0c:	f003 0302 	and.w	r3, r3, #2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1f0      	bne.n	8008ef6 <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d039      	beq.n	8008f94 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01c      	beq.n	8008f62 <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008f28:	4b09      	ldr	r3, [pc, #36]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a08      	ldr	r2, [pc, #32]	@ (8008f50 <HAL_RCC_OscConfig+0x4f4>)
 8008f2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008f32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008f34:	f7f9 fe6a 	bl	8002c0c <HAL_GetTick>
 8008f38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f3a:	e00b      	b.n	8008f54 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f3c:	f7f9 fe66 	bl	8002c0c <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d904      	bls.n	8008f54 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e1d8      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
 8008f4e:	bf00      	nop
 8008f50:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f54:	4b65      	ldr	r3, [pc, #404]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0ed      	beq.n	8008f3c <HAL_RCC_OscConfig+0x4e0>
 8008f60:	e018      	b.n	8008f94 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008f62:	4b62      	ldr	r3, [pc, #392]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a61      	ldr	r2, [pc, #388]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8008f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008f6e:	f7f9 fe4d 	bl	8002c0c <HAL_GetTick>
 8008f72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008f74:	e008      	b.n	8008f88 <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f76:	f7f9 fe49 	bl	8002c0c <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d901      	bls.n	8008f88 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e1bb      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008f88:	4b58      	ldr	r3, [pc, #352]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1f0      	bne.n	8008f76 <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 8081 	beq.w	80090a4 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008fa2:	4b53      	ldr	r3, [pc, #332]	@ (80090f0 <HAL_RCC_OscConfig+0x694>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a52      	ldr	r2, [pc, #328]	@ (80090f0 <HAL_RCC_OscConfig+0x694>)
 8008fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fae:	f7f9 fe2d 	bl	8002c0c <HAL_GetTick>
 8008fb2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fb4:	e008      	b.n	8008fc8 <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fb6:	f7f9 fe29 	bl	8002c0c <HAL_GetTick>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	2b64      	cmp	r3, #100	@ 0x64
 8008fc2:	d901      	bls.n	8008fc8 <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e19b      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fc8:	4b49      	ldr	r3, [pc, #292]	@ (80090f0 <HAL_RCC_OscConfig+0x694>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0f0      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d106      	bne.n	8008fea <HAL_RCC_OscConfig+0x58e>
 8008fdc:	4b43      	ldr	r3, [pc, #268]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8008fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fe0:	4a42      	ldr	r2, [pc, #264]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8008fe2:	f043 0301 	orr.w	r3, r3, #1
 8008fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008fe8:	e02d      	b.n	8009046 <HAL_RCC_OscConfig+0x5ea>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10c      	bne.n	800900c <HAL_RCC_OscConfig+0x5b0>
 8008ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8008ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ff6:	4a3d      	ldr	r2, [pc, #244]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8008ff8:	f023 0301 	bic.w	r3, r3, #1
 8008ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8009000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009002:	4a3a      	ldr	r2, [pc, #232]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8009004:	f023 0304 	bic.w	r3, r3, #4
 8009008:	6713      	str	r3, [r2, #112]	@ 0x70
 800900a:	e01c      	b.n	8009046 <HAL_RCC_OscConfig+0x5ea>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	2b05      	cmp	r3, #5
 8009012:	d10c      	bne.n	800902e <HAL_RCC_OscConfig+0x5d2>
 8009014:	4b35      	ldr	r3, [pc, #212]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8009016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009018:	4a34      	ldr	r2, [pc, #208]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 800901a:	f043 0304 	orr.w	r3, r3, #4
 800901e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009020:	4b32      	ldr	r3, [pc, #200]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8009022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009024:	4a31      	ldr	r2, [pc, #196]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8009026:	f043 0301 	orr.w	r3, r3, #1
 800902a:	6713      	str	r3, [r2, #112]	@ 0x70
 800902c:	e00b      	b.n	8009046 <HAL_RCC_OscConfig+0x5ea>
 800902e:	4b2f      	ldr	r3, [pc, #188]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8009030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009032:	4a2e      	ldr	r2, [pc, #184]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8009034:	f023 0301 	bic.w	r3, r3, #1
 8009038:	6713      	str	r3, [r2, #112]	@ 0x70
 800903a:	4b2c      	ldr	r3, [pc, #176]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 800903c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800903e:	4a2b      	ldr	r2, [pc, #172]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 8009040:	f023 0304 	bic.w	r3, r3, #4
 8009044:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d015      	beq.n	800907a <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800904e:	f7f9 fddd 	bl	8002c0c <HAL_GetTick>
 8009052:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009054:	e00a      	b.n	800906c <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009056:	f7f9 fdd9 	bl	8002c0c <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009064:	4293      	cmp	r3, r2
 8009066:	d901      	bls.n	800906c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	e149      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800906c:	4b1f      	ldr	r3, [pc, #124]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 800906e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	2b00      	cmp	r3, #0
 8009076:	d0ee      	beq.n	8009056 <HAL_RCC_OscConfig+0x5fa>
 8009078:	e014      	b.n	80090a4 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800907a:	f7f9 fdc7 	bl	8002c0c <HAL_GetTick>
 800907e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009080:	e00a      	b.n	8009098 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009082:	f7f9 fdc3 	bl	8002c0c <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009090:	4293      	cmp	r3, r2
 8009092:	d901      	bls.n	8009098 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8009094:	2303      	movs	r3, #3
 8009096:	e133      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009098:	4b14      	ldr	r3, [pc, #80]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 800909a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1ee      	bne.n	8009082 <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 8128 	beq.w	80092fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80090ae:	4b0f      	ldr	r3, [pc, #60]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090b6:	2b18      	cmp	r3, #24
 80090b8:	f000 80b8 	beq.w	800922c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	f040 8099 	bne.w	80091f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090c6:	4b09      	ldr	r3, [pc, #36]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a08      	ldr	r2, [pc, #32]	@ (80090ec <HAL_RCC_OscConfig+0x690>)
 80090cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d2:	f7f9 fd9b 	bl	8002c0c <HAL_GetTick>
 80090d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80090d8:	e00c      	b.n	80090f4 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090da:	f7f9 fd97 	bl	8002c0c <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d905      	bls.n	80090f4 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e109      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
 80090ec:	58024400 	.word	0x58024400
 80090f0:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80090f4:	4b84      	ldr	r3, [pc, #528]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1ec      	bne.n	80090da <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009100:	4b81      	ldr	r3, [pc, #516]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 8009102:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009104:	4b81      	ldr	r3, [pc, #516]	@ (800930c <HAL_RCC_OscConfig+0x8b0>)
 8009106:	4013      	ands	r3, r2
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009110:	0112      	lsls	r2, r2, #4
 8009112:	430a      	orrs	r2, r1
 8009114:	497c      	ldr	r1, [pc, #496]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 8009116:	4313      	orrs	r3, r2
 8009118:	628b      	str	r3, [r1, #40]	@ 0x28
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911e:	3b01      	subs	r3, #1
 8009120:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009128:	3b01      	subs	r3, #1
 800912a:	025b      	lsls	r3, r3, #9
 800912c:	b29b      	uxth	r3, r3
 800912e:	431a      	orrs	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009134:	3b01      	subs	r3, #1
 8009136:	041b      	lsls	r3, r3, #16
 8009138:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800913c:	431a      	orrs	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009142:	3b01      	subs	r3, #1
 8009144:	061b      	lsls	r3, r3, #24
 8009146:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800914a:	496f      	ldr	r1, [pc, #444]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 800914c:	4313      	orrs	r3, r2
 800914e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009150:	4b6d      	ldr	r3, [pc, #436]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 8009152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009154:	4a6c      	ldr	r2, [pc, #432]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 8009156:	f023 0301 	bic.w	r3, r3, #1
 800915a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800915c:	4b6a      	ldr	r3, [pc, #424]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 800915e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009160:	4b6b      	ldr	r3, [pc, #428]	@ (8009310 <HAL_RCC_OscConfig+0x8b4>)
 8009162:	4013      	ands	r3, r2
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009168:	00d2      	lsls	r2, r2, #3
 800916a:	4967      	ldr	r1, [pc, #412]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 800916c:	4313      	orrs	r3, r2
 800916e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009170:	4b65      	ldr	r3, [pc, #404]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 8009172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009174:	f023 020c 	bic.w	r2, r3, #12
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917c:	4962      	ldr	r1, [pc, #392]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 800917e:	4313      	orrs	r3, r2
 8009180:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009182:	4b61      	ldr	r3, [pc, #388]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 8009184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009186:	f023 0202 	bic.w	r2, r3, #2
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918e:	495e      	ldr	r1, [pc, #376]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 8009190:	4313      	orrs	r3, r2
 8009192:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009194:	4b5c      	ldr	r3, [pc, #368]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 8009196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009198:	4a5b      	ldr	r2, [pc, #364]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 800919a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800919e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091a0:	4b59      	ldr	r3, [pc, #356]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80091a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a4:	4a58      	ldr	r2, [pc, #352]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80091a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80091ac:	4b56      	ldr	r3, [pc, #344]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80091ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b0:	4a55      	ldr	r2, [pc, #340]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80091b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80091b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80091b8:	4b53      	ldr	r3, [pc, #332]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80091ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091bc:	4a52      	ldr	r2, [pc, #328]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80091be:	f043 0301 	orr.w	r3, r3, #1
 80091c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091c4:	4b50      	ldr	r3, [pc, #320]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a4f      	ldr	r2, [pc, #316]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80091ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80091ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d0:	f7f9 fd1c 	bl	8002c0c <HAL_GetTick>
 80091d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80091d6:	e008      	b.n	80091ea <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091d8:	f7f9 fd18 	bl	8002c0c <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e08a      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80091ea:	4b47      	ldr	r3, [pc, #284]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0f0      	beq.n	80091d8 <HAL_RCC_OscConfig+0x77c>
 80091f6:	e082      	b.n	80092fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091f8:	4b43      	ldr	r3, [pc, #268]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a42      	ldr	r2, [pc, #264]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80091fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009204:	f7f9 fd02 	bl	8002c0c <HAL_GetTick>
 8009208:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800920a:	e008      	b.n	800921e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800920c:	f7f9 fcfe 	bl	8002c0c <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	2b02      	cmp	r3, #2
 8009218:	d901      	bls.n	800921e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e070      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800921e:	4b3a      	ldr	r3, [pc, #232]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d1f0      	bne.n	800920c <HAL_RCC_OscConfig+0x7b0>
 800922a:	e068      	b.n	80092fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800922c:	4b36      	ldr	r3, [pc, #216]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 800922e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009230:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009232:	4b35      	ldr	r3, [pc, #212]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 8009234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009236:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923c:	2b01      	cmp	r3, #1
 800923e:	d031      	beq.n	80092a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f003 0203 	and.w	r2, r3, #3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800924a:	429a      	cmp	r2, r3
 800924c:	d12a      	bne.n	80092a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	091b      	lsrs	r3, r3, #4
 8009252:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800925a:	429a      	cmp	r2, r3
 800925c:	d122      	bne.n	80092a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009268:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800926a:	429a      	cmp	r2, r3
 800926c:	d11a      	bne.n	80092a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	0a5b      	lsrs	r3, r3, #9
 8009272:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800927a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800927c:	429a      	cmp	r2, r3
 800927e:	d111      	bne.n	80092a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	0c1b      	lsrs	r3, r3, #16
 8009284:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800928e:	429a      	cmp	r2, r3
 8009290:	d108      	bne.n	80092a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	0e1b      	lsrs	r3, r3, #24
 8009296:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800929e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d001      	beq.n	80092a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e02b      	b.n	8009300 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80092a8:	4b17      	ldr	r3, [pc, #92]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80092aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ac:	08db      	lsrs	r3, r3, #3
 80092ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d01f      	beq.n	80092fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80092be:	4b12      	ldr	r3, [pc, #72]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80092c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c2:	4a11      	ldr	r2, [pc, #68]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80092c4:	f023 0301 	bic.w	r3, r3, #1
 80092c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80092ca:	f7f9 fc9f 	bl	8002c0c <HAL_GetTick>
 80092ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80092d0:	bf00      	nop
 80092d2:	f7f9 fc9b 	bl	8002c0c <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092da:	4293      	cmp	r3, r2
 80092dc:	d0f9      	beq.n	80092d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80092de:	4b0a      	ldr	r3, [pc, #40]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80092e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092e2:	4b0b      	ldr	r3, [pc, #44]	@ (8009310 <HAL_RCC_OscConfig+0x8b4>)
 80092e4:	4013      	ands	r3, r2
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80092ea:	00d2      	lsls	r2, r2, #3
 80092ec:	4906      	ldr	r1, [pc, #24]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80092f2:	4b05      	ldr	r3, [pc, #20]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80092f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f6:	4a04      	ldr	r2, [pc, #16]	@ (8009308 <HAL_RCC_OscConfig+0x8ac>)
 80092f8:	f043 0301 	orr.w	r3, r3, #1
 80092fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3730      	adds	r7, #48	@ 0x30
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	58024400 	.word	0x58024400
 800930c:	fffffc0c 	.word	0xfffffc0c
 8009310:	ffff0007 	.word	0xffff0007

08009314 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e19c      	b.n	8009662 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009328:	4b8a      	ldr	r3, [pc, #552]	@ (8009554 <HAL_RCC_ClockConfig+0x240>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 030f 	and.w	r3, r3, #15
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	429a      	cmp	r2, r3
 8009334:	d910      	bls.n	8009358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009336:	4b87      	ldr	r3, [pc, #540]	@ (8009554 <HAL_RCC_ClockConfig+0x240>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f023 020f 	bic.w	r2, r3, #15
 800933e:	4985      	ldr	r1, [pc, #532]	@ (8009554 <HAL_RCC_ClockConfig+0x240>)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	4313      	orrs	r3, r2
 8009344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009346:	4b83      	ldr	r3, [pc, #524]	@ (8009554 <HAL_RCC_ClockConfig+0x240>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 030f 	and.w	r3, r3, #15
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d001      	beq.n	8009358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e184      	b.n	8009662 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d010      	beq.n	8009386 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691a      	ldr	r2, [r3, #16]
 8009368:	4b7b      	ldr	r3, [pc, #492]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009370:	429a      	cmp	r2, r3
 8009372:	d908      	bls.n	8009386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009374:	4b78      	ldr	r3, [pc, #480]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	4975      	ldr	r1, [pc, #468]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 8009382:	4313      	orrs	r3, r2
 8009384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0308 	and.w	r3, r3, #8
 800938e:	2b00      	cmp	r3, #0
 8009390:	d010      	beq.n	80093b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	695a      	ldr	r2, [r3, #20]
 8009396:	4b70      	ldr	r3, [pc, #448]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800939e:	429a      	cmp	r2, r3
 80093a0:	d908      	bls.n	80093b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093a2:	4b6d      	ldr	r3, [pc, #436]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	496a      	ldr	r1, [pc, #424]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 80093b0:	4313      	orrs	r3, r2
 80093b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0310 	and.w	r3, r3, #16
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d010      	beq.n	80093e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	699a      	ldr	r2, [r3, #24]
 80093c4:	4b64      	ldr	r3, [pc, #400]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d908      	bls.n	80093e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80093d0:	4b61      	ldr	r3, [pc, #388]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	495e      	ldr	r1, [pc, #376]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d010      	beq.n	8009410 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	69da      	ldr	r2, [r3, #28]
 80093f2:	4b59      	ldr	r3, [pc, #356]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d908      	bls.n	8009410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80093fe:	4b56      	ldr	r3, [pc, #344]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	4953      	ldr	r1, [pc, #332]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 800940c:	4313      	orrs	r3, r2
 800940e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0302 	and.w	r3, r3, #2
 8009418:	2b00      	cmp	r3, #0
 800941a:	d010      	beq.n	800943e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	4b4d      	ldr	r3, [pc, #308]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	f003 030f 	and.w	r3, r3, #15
 8009428:	429a      	cmp	r2, r3
 800942a:	d908      	bls.n	800943e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800942c:	4b4a      	ldr	r3, [pc, #296]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	f023 020f 	bic.w	r2, r3, #15
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	4947      	ldr	r1, [pc, #284]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 800943a:	4313      	orrs	r3, r2
 800943c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	d055      	beq.n	80094f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800944a:	4b43      	ldr	r3, [pc, #268]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	4940      	ldr	r1, [pc, #256]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 8009458:	4313      	orrs	r3, r2
 800945a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	2b02      	cmp	r3, #2
 8009462:	d107      	bne.n	8009474 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009464:	4b3c      	ldr	r3, [pc, #240]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d121      	bne.n	80094b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e0f6      	b.n	8009662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	2b03      	cmp	r3, #3
 800947a:	d107      	bne.n	800948c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800947c:	4b36      	ldr	r3, [pc, #216]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d115      	bne.n	80094b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e0ea      	b.n	8009662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d107      	bne.n	80094a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009494:	4b30      	ldr	r3, [pc, #192]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800949c:	2b00      	cmp	r3, #0
 800949e:	d109      	bne.n	80094b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e0de      	b.n	8009662 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094a4:	4b2c      	ldr	r3, [pc, #176]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d101      	bne.n	80094b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e0d6      	b.n	8009662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80094b4:	4b28      	ldr	r3, [pc, #160]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	f023 0207 	bic.w	r2, r3, #7
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	4925      	ldr	r1, [pc, #148]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094c6:	f7f9 fba1 	bl	8002c0c <HAL_GetTick>
 80094ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094cc:	e00a      	b.n	80094e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094ce:	f7f9 fb9d 	bl	8002c0c <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094dc:	4293      	cmp	r3, r2
 80094de:	d901      	bls.n	80094e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e0be      	b.n	8009662 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d1eb      	bne.n	80094ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d010      	beq.n	8009524 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	4b14      	ldr	r3, [pc, #80]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	f003 030f 	and.w	r3, r3, #15
 800950e:	429a      	cmp	r2, r3
 8009510:	d208      	bcs.n	8009524 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009512:	4b11      	ldr	r3, [pc, #68]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	f023 020f 	bic.w	r2, r3, #15
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	490e      	ldr	r1, [pc, #56]	@ (8009558 <HAL_RCC_ClockConfig+0x244>)
 8009520:	4313      	orrs	r3, r2
 8009522:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009524:	4b0b      	ldr	r3, [pc, #44]	@ (8009554 <HAL_RCC_ClockConfig+0x240>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 030f 	and.w	r3, r3, #15
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d214      	bcs.n	800955c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009532:	4b08      	ldr	r3, [pc, #32]	@ (8009554 <HAL_RCC_ClockConfig+0x240>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f023 020f 	bic.w	r2, r3, #15
 800953a:	4906      	ldr	r1, [pc, #24]	@ (8009554 <HAL_RCC_ClockConfig+0x240>)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	4313      	orrs	r3, r2
 8009540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009542:	4b04      	ldr	r3, [pc, #16]	@ (8009554 <HAL_RCC_ClockConfig+0x240>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 030f 	and.w	r3, r3, #15
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	429a      	cmp	r2, r3
 800954e:	d005      	beq.n	800955c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e086      	b.n	8009662 <HAL_RCC_ClockConfig+0x34e>
 8009554:	52002000 	.word	0x52002000
 8009558:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d010      	beq.n	800958a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	691a      	ldr	r2, [r3, #16]
 800956c:	4b3f      	ldr	r3, [pc, #252]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009574:	429a      	cmp	r2, r3
 8009576:	d208      	bcs.n	800958a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009578:	4b3c      	ldr	r3, [pc, #240]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	4939      	ldr	r1, [pc, #228]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 8009586:	4313      	orrs	r3, r2
 8009588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0308 	and.w	r3, r3, #8
 8009592:	2b00      	cmp	r3, #0
 8009594:	d010      	beq.n	80095b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	695a      	ldr	r2, [r3, #20]
 800959a:	4b34      	ldr	r3, [pc, #208]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 800959c:	69db      	ldr	r3, [r3, #28]
 800959e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d208      	bcs.n	80095b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095a6:	4b31      	ldr	r3, [pc, #196]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	492e      	ldr	r1, [pc, #184]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0310 	and.w	r3, r3, #16
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d010      	beq.n	80095e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	699a      	ldr	r2, [r3, #24]
 80095c8:	4b28      	ldr	r3, [pc, #160]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d208      	bcs.n	80095e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095d4:	4b25      	ldr	r3, [pc, #148]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	4922      	ldr	r1, [pc, #136]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d010      	beq.n	8009614 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	69da      	ldr	r2, [r3, #28]
 80095f6:	4b1d      	ldr	r3, [pc, #116]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095fe:	429a      	cmp	r2, r3
 8009600:	d208      	bcs.n	8009614 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009602:	4b1a      	ldr	r3, [pc, #104]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	69db      	ldr	r3, [r3, #28]
 800960e:	4917      	ldr	r1, [pc, #92]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 8009610:	4313      	orrs	r3, r2
 8009612:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009614:	f000 f834 	bl	8009680 <HAL_RCC_GetSysClockFreq>
 8009618:	4602      	mov	r2, r0
 800961a:	4b14      	ldr	r3, [pc, #80]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	0a1b      	lsrs	r3, r3, #8
 8009620:	f003 030f 	and.w	r3, r3, #15
 8009624:	4912      	ldr	r1, [pc, #72]	@ (8009670 <HAL_RCC_ClockConfig+0x35c>)
 8009626:	5ccb      	ldrb	r3, [r1, r3]
 8009628:	f003 031f 	and.w	r3, r3, #31
 800962c:	fa22 f303 	lsr.w	r3, r2, r3
 8009630:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009632:	4b0e      	ldr	r3, [pc, #56]	@ (800966c <HAL_RCC_ClockConfig+0x358>)
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	f003 030f 	and.w	r3, r3, #15
 800963a:	4a0d      	ldr	r2, [pc, #52]	@ (8009670 <HAL_RCC_ClockConfig+0x35c>)
 800963c:	5cd3      	ldrb	r3, [r2, r3]
 800963e:	f003 031f 	and.w	r3, r3, #31
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	fa22 f303 	lsr.w	r3, r2, r3
 8009648:	4a0a      	ldr	r2, [pc, #40]	@ (8009674 <HAL_RCC_ClockConfig+0x360>)
 800964a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800964c:	4a0a      	ldr	r2, [pc, #40]	@ (8009678 <HAL_RCC_ClockConfig+0x364>)
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009652:	4b0a      	ldr	r3, [pc, #40]	@ (800967c <HAL_RCC_ClockConfig+0x368>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4618      	mov	r0, r3
 8009658:	f7f9 fa8e 	bl	8002b78 <HAL_InitTick>
 800965c:	4603      	mov	r3, r0
 800965e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009660:	7bfb      	ldrb	r3, [r7, #15]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3718      	adds	r7, #24
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	58024400 	.word	0x58024400
 8009670:	08014738 	.word	0x08014738
 8009674:	24000004 	.word	0x24000004
 8009678:	24000000 	.word	0x24000000
 800967c:	24000008 	.word	0x24000008

08009680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009680:	b480      	push	{r7}
 8009682:	b089      	sub	sp, #36	@ 0x24
 8009684:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009686:	4bb3      	ldr	r3, [pc, #716]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800968e:	2b18      	cmp	r3, #24
 8009690:	f200 8155 	bhi.w	800993e <HAL_RCC_GetSysClockFreq+0x2be>
 8009694:	a201      	add	r2, pc, #4	@ (adr r2, 800969c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969a:	bf00      	nop
 800969c:	08009701 	.word	0x08009701
 80096a0:	0800993f 	.word	0x0800993f
 80096a4:	0800993f 	.word	0x0800993f
 80096a8:	0800993f 	.word	0x0800993f
 80096ac:	0800993f 	.word	0x0800993f
 80096b0:	0800993f 	.word	0x0800993f
 80096b4:	0800993f 	.word	0x0800993f
 80096b8:	0800993f 	.word	0x0800993f
 80096bc:	08009727 	.word	0x08009727
 80096c0:	0800993f 	.word	0x0800993f
 80096c4:	0800993f 	.word	0x0800993f
 80096c8:	0800993f 	.word	0x0800993f
 80096cc:	0800993f 	.word	0x0800993f
 80096d0:	0800993f 	.word	0x0800993f
 80096d4:	0800993f 	.word	0x0800993f
 80096d8:	0800993f 	.word	0x0800993f
 80096dc:	0800972d 	.word	0x0800972d
 80096e0:	0800993f 	.word	0x0800993f
 80096e4:	0800993f 	.word	0x0800993f
 80096e8:	0800993f 	.word	0x0800993f
 80096ec:	0800993f 	.word	0x0800993f
 80096f0:	0800993f 	.word	0x0800993f
 80096f4:	0800993f 	.word	0x0800993f
 80096f8:	0800993f 	.word	0x0800993f
 80096fc:	08009733 	.word	0x08009733
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009700:	4b94      	ldr	r3, [pc, #592]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0320 	and.w	r3, r3, #32
 8009708:	2b00      	cmp	r3, #0
 800970a:	d009      	beq.n	8009720 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800970c:	4b91      	ldr	r3, [pc, #580]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	08db      	lsrs	r3, r3, #3
 8009712:	f003 0303 	and.w	r3, r3, #3
 8009716:	4a90      	ldr	r2, [pc, #576]	@ (8009958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009718:	fa22 f303 	lsr.w	r3, r2, r3
 800971c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800971e:	e111      	b.n	8009944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009720:	4b8d      	ldr	r3, [pc, #564]	@ (8009958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009722:	61bb      	str	r3, [r7, #24]
      break;
 8009724:	e10e      	b.n	8009944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009726:	4b8d      	ldr	r3, [pc, #564]	@ (800995c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009728:	61bb      	str	r3, [r7, #24]
      break;
 800972a:	e10b      	b.n	8009944 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800972c:	4b8c      	ldr	r3, [pc, #560]	@ (8009960 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800972e:	61bb      	str	r3, [r7, #24]
      break;
 8009730:	e108      	b.n	8009944 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009732:	4b88      	ldr	r3, [pc, #544]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009736:	f003 0303 	and.w	r3, r3, #3
 800973a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800973c:	4b85      	ldr	r3, [pc, #532]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800973e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009740:	091b      	lsrs	r3, r3, #4
 8009742:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009746:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009748:	4b82      	ldr	r3, [pc, #520]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800974a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009752:	4b80      	ldr	r3, [pc, #512]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009756:	08db      	lsrs	r3, r3, #3
 8009758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	fb02 f303 	mul.w	r3, r2, r3
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 80e1 	beq.w	8009938 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2b02      	cmp	r3, #2
 800977a:	f000 8083 	beq.w	8009884 <HAL_RCC_GetSysClockFreq+0x204>
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	2b02      	cmp	r3, #2
 8009782:	f200 80a1 	bhi.w	80098c8 <HAL_RCC_GetSysClockFreq+0x248>
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d003      	beq.n	8009794 <HAL_RCC_GetSysClockFreq+0x114>
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d056      	beq.n	8009840 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009792:	e099      	b.n	80098c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009794:	4b6f      	ldr	r3, [pc, #444]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0320 	and.w	r3, r3, #32
 800979c:	2b00      	cmp	r3, #0
 800979e:	d02d      	beq.n	80097fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097a0:	4b6c      	ldr	r3, [pc, #432]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	08db      	lsrs	r3, r3, #3
 80097a6:	f003 0303 	and.w	r3, r3, #3
 80097aa:	4a6b      	ldr	r2, [pc, #428]	@ (8009958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097ac:	fa22 f303 	lsr.w	r3, r2, r3
 80097b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	ee07 3a90 	vmov	s15, r3
 80097b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	ee07 3a90 	vmov	s15, r3
 80097c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ca:	4b62      	ldr	r3, [pc, #392]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d2:	ee07 3a90 	vmov	s15, r3
 80097d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097da:	ed97 6a02 	vldr	s12, [r7, #8]
 80097de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80097fa:	e087      	b.n	800990c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	ee07 3a90 	vmov	s15, r3
 8009802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009806:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009968 <HAL_RCC_GetSysClockFreq+0x2e8>
 800980a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800980e:	4b51      	ldr	r3, [pc, #324]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009816:	ee07 3a90 	vmov	s15, r3
 800981a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800981e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009822:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009964 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800982a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800982e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800983a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800983e:	e065      	b.n	800990c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	ee07 3a90 	vmov	s15, r3
 8009846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800996c <HAL_RCC_GetSysClockFreq+0x2ec>
 800984e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009852:	4b40      	ldr	r3, [pc, #256]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009862:	ed97 6a02 	vldr	s12, [r7, #8]
 8009866:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800986a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800986e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800987a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800987e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009882:	e043      	b.n	800990c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	ee07 3a90 	vmov	s15, r3
 800988a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800988e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009970 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009896:	4b2f      	ldr	r3, [pc, #188]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800989a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80098aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80098c6:	e021      	b.n	800990c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800996c <HAL_RCC_GetSysClockFreq+0x2ec>
 80098d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098da:	4b1e      	ldr	r3, [pc, #120]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80098ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800990a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800990c:	4b11      	ldr	r3, [pc, #68]	@ (8009954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800990e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009910:	0a5b      	lsrs	r3, r3, #9
 8009912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009916:	3301      	adds	r3, #1
 8009918:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	ee07 3a90 	vmov	s15, r3
 8009920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009924:	edd7 6a07 	vldr	s13, [r7, #28]
 8009928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800992c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009930:	ee17 3a90 	vmov	r3, s15
 8009934:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009936:	e005      	b.n	8009944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	61bb      	str	r3, [r7, #24]
      break;
 800993c:	e002      	b.n	8009944 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800993e:	4b07      	ldr	r3, [pc, #28]	@ (800995c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009940:	61bb      	str	r3, [r7, #24]
      break;
 8009942:	bf00      	nop
  }

  return sysclockfreq;
 8009944:	69bb      	ldr	r3, [r7, #24]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3724      	adds	r7, #36	@ 0x24
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	58024400 	.word	0x58024400
 8009958:	03d09000 	.word	0x03d09000
 800995c:	003d0900 	.word	0x003d0900
 8009960:	017d7840 	.word	0x017d7840
 8009964:	46000000 	.word	0x46000000
 8009968:	4c742400 	.word	0x4c742400
 800996c:	4a742400 	.word	0x4a742400
 8009970:	4bbebc20 	.word	0x4bbebc20

08009974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800997a:	f7ff fe81 	bl	8009680 <HAL_RCC_GetSysClockFreq>
 800997e:	4602      	mov	r2, r0
 8009980:	4b10      	ldr	r3, [pc, #64]	@ (80099c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	0a1b      	lsrs	r3, r3, #8
 8009986:	f003 030f 	and.w	r3, r3, #15
 800998a:	490f      	ldr	r1, [pc, #60]	@ (80099c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800998c:	5ccb      	ldrb	r3, [r1, r3]
 800998e:	f003 031f 	and.w	r3, r3, #31
 8009992:	fa22 f303 	lsr.w	r3, r2, r3
 8009996:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009998:	4b0a      	ldr	r3, [pc, #40]	@ (80099c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	4a09      	ldr	r2, [pc, #36]	@ (80099c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80099a2:	5cd3      	ldrb	r3, [r2, r3]
 80099a4:	f003 031f 	and.w	r3, r3, #31
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	fa22 f303 	lsr.w	r3, r2, r3
 80099ae:	4a07      	ldr	r2, [pc, #28]	@ (80099cc <HAL_RCC_GetHCLKFreq+0x58>)
 80099b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099b2:	4a07      	ldr	r2, [pc, #28]	@ (80099d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80099b8:	4b04      	ldr	r3, [pc, #16]	@ (80099cc <HAL_RCC_GetHCLKFreq+0x58>)
 80099ba:	681b      	ldr	r3, [r3, #0]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	58024400 	.word	0x58024400
 80099c8:	08014738 	.word	0x08014738
 80099cc:	24000004 	.word	0x24000004
 80099d0:	24000000 	.word	0x24000000

080099d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80099d8:	f7ff ffcc 	bl	8009974 <HAL_RCC_GetHCLKFreq>
 80099dc:	4602      	mov	r2, r0
 80099de:	4b06      	ldr	r3, [pc, #24]	@ (80099f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	091b      	lsrs	r3, r3, #4
 80099e4:	f003 0307 	and.w	r3, r3, #7
 80099e8:	4904      	ldr	r1, [pc, #16]	@ (80099fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80099ea:	5ccb      	ldrb	r3, [r1, r3]
 80099ec:	f003 031f 	and.w	r3, r3, #31
 80099f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	58024400 	.word	0x58024400
 80099fc:	08014738 	.word	0x08014738

08009a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009a04:	f7ff ffb6 	bl	8009974 <HAL_RCC_GetHCLKFreq>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	4b06      	ldr	r3, [pc, #24]	@ (8009a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	0a1b      	lsrs	r3, r3, #8
 8009a10:	f003 0307 	and.w	r3, r3, #7
 8009a14:	4904      	ldr	r1, [pc, #16]	@ (8009a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a16:	5ccb      	ldrb	r3, [r1, r3]
 8009a18:	f003 031f 	and.w	r3, r3, #31
 8009a1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	58024400 	.word	0x58024400
 8009a28:	08014738 	.word	0x08014738

08009a2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a30:	b0ca      	sub	sp, #296	@ 0x128
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a3e:	2300      	movs	r3, #0
 8009a40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009a50:	2500      	movs	r5, #0
 8009a52:	ea54 0305 	orrs.w	r3, r4, r5
 8009a56:	d049      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a62:	d02f      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009a64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a68:	d828      	bhi.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009a6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a6e:	d01a      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009a70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a74:	d822      	bhi.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009a7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a7e:	d007      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009a80:	e01c      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a82:	4bb8      	ldr	r3, [pc, #736]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a86:	4ab7      	ldr	r2, [pc, #732]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009a8e:	e01a      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a94:	3308      	adds	r3, #8
 8009a96:	2102      	movs	r1, #2
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f002 fb61 	bl	800c160 <RCCEx_PLL2_Config>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009aa4:	e00f      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aaa:	3328      	adds	r3, #40	@ 0x28
 8009aac:	2102      	movs	r1, #2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f002 fc08 	bl	800c2c4 <RCCEx_PLL3_Config>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009aba:	e004      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ac2:	e000      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10a      	bne.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009ace:	4ba5      	ldr	r3, [pc, #660]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ada:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009adc:	4aa1      	ldr	r2, [pc, #644]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ade:	430b      	orrs	r3, r1
 8009ae0:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ae2:	e003      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009af8:	f04f 0900 	mov.w	r9, #0
 8009afc:	ea58 0309 	orrs.w	r3, r8, r9
 8009b00:	d047      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b08:	2b04      	cmp	r3, #4
 8009b0a:	d82a      	bhi.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b12:	bf00      	nop
 8009b14:	08009b29 	.word	0x08009b29
 8009b18:	08009b37 	.word	0x08009b37
 8009b1c:	08009b4d 	.word	0x08009b4d
 8009b20:	08009b6b 	.word	0x08009b6b
 8009b24:	08009b6b 	.word	0x08009b6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b28:	4b8e      	ldr	r3, [pc, #568]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2c:	4a8d      	ldr	r2, [pc, #564]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b34:	e01a      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f002 fb0e 	bl	800c160 <RCCEx_PLL2_Config>
 8009b44:	4603      	mov	r3, r0
 8009b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b4a:	e00f      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b50:	3328      	adds	r3, #40	@ 0x28
 8009b52:	2100      	movs	r1, #0
 8009b54:	4618      	mov	r0, r3
 8009b56:	f002 fbb5 	bl	800c2c4 <RCCEx_PLL3_Config>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b60:	e004      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b68:	e000      	b.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b74:	4b7b      	ldr	r3, [pc, #492]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b78:	f023 0107 	bic.w	r1, r3, #7
 8009b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b82:	4a78      	ldr	r2, [pc, #480]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b84:	430b      	orrs	r3, r1
 8009b86:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b88:	e003      	b.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009b9e:	f04f 0b00 	mov.w	fp, #0
 8009ba2:	ea5a 030b 	orrs.w	r3, sl, fp
 8009ba6:	d04c      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bb2:	d030      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009bb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bb8:	d829      	bhi.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009bba:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bbc:	d02d      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009bbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009bc0:	d825      	bhi.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009bc2:	2b80      	cmp	r3, #128	@ 0x80
 8009bc4:	d018      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009bc6:	2b80      	cmp	r3, #128	@ 0x80
 8009bc8:	d821      	bhi.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009bce:	2b40      	cmp	r3, #64	@ 0x40
 8009bd0:	d007      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009bd2:	e01c      	b.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd4:	4b63      	ldr	r3, [pc, #396]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd8:	4a62      	ldr	r2, [pc, #392]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009be0:	e01c      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be6:	3308      	adds	r3, #8
 8009be8:	2100      	movs	r1, #0
 8009bea:	4618      	mov	r0, r3
 8009bec:	f002 fab8 	bl	800c160 <RCCEx_PLL2_Config>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009bf6:	e011      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfc:	3328      	adds	r3, #40	@ 0x28
 8009bfe:	2100      	movs	r1, #0
 8009c00:	4618      	mov	r0, r3
 8009c02:	f002 fb5f 	bl	800c2c4 <RCCEx_PLL3_Config>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009c0c:	e006      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c14:	e002      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009c16:	bf00      	nop
 8009c18:	e000      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10a      	bne.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009c24:	4b4f      	ldr	r3, [pc, #316]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c32:	4a4c      	ldr	r2, [pc, #304]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c34:	430b      	orrs	r3, r1
 8009c36:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c38:	e003      	b.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009c4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009c52:	2300      	movs	r3, #0
 8009c54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009c58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	d053      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009c6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c6e:	d035      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009c70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c74:	d82e      	bhi.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009c76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c7a:	d031      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009c7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c80:	d828      	bhi.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009c82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c86:	d01a      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c8c:	d822      	bhi.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009c92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c96:	d007      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009c98:	e01c      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c9a:	4b32      	ldr	r3, [pc, #200]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9e:	4a31      	ldr	r2, [pc, #196]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ca6:	e01c      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cac:	3308      	adds	r3, #8
 8009cae:	2100      	movs	r1, #0
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f002 fa55 	bl	800c160 <RCCEx_PLL2_Config>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009cbc:	e011      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc2:	3328      	adds	r3, #40	@ 0x28
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f002 fafc 	bl	800c2c4 <RCCEx_PLL3_Config>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cd2:	e006      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cda:	e002      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009cdc:	bf00      	nop
 8009cde:	e000      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10b      	bne.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009cea:	4b1e      	ldr	r3, [pc, #120]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8009d64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cfc:	430b      	orrs	r3, r1
 8009cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d00:	e003      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009d16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009d20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009d24:	460b      	mov	r3, r1
 8009d26:	4313      	orrs	r3, r2
 8009d28:	d056      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009d32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d36:	d038      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009d38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d3c:	d831      	bhi.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009d42:	d034      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009d44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009d48:	d82b      	bhi.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d4e:	d01d      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009d50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d54:	d825      	bhi.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d006      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009d5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d5e:	d00a      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009d60:	e01f      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d62:	bf00      	nop
 8009d64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d68:	4ba2      	ldr	r3, [pc, #648]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d6c:	4aa1      	ldr	r2, [pc, #644]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d74:	e01c      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f002 f9ee 	bl	800c160 <RCCEx_PLL2_Config>
 8009d84:	4603      	mov	r3, r0
 8009d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009d8a:	e011      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d90:	3328      	adds	r3, #40	@ 0x28
 8009d92:	2100      	movs	r1, #0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f002 fa95 	bl	800c2c4 <RCCEx_PLL3_Config>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009da0:	e006      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009da8:	e002      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009daa:	bf00      	nop
 8009dac:	e000      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10b      	bne.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009db8:	4b8e      	ldr	r3, [pc, #568]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009dc8:	4a8a      	ldr	r2, [pc, #552]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dca:	430b      	orrs	r3, r1
 8009dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dce:	e003      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009de4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009de8:	2300      	movs	r3, #0
 8009dea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009dee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009df2:	460b      	mov	r3, r1
 8009df4:	4313      	orrs	r3, r2
 8009df6:	d03a      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dfe:	2b30      	cmp	r3, #48	@ 0x30
 8009e00:	d01f      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009e02:	2b30      	cmp	r3, #48	@ 0x30
 8009e04:	d819      	bhi.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009e06:	2b20      	cmp	r3, #32
 8009e08:	d00c      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	d815      	bhi.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d019      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009e12:	2b10      	cmp	r3, #16
 8009e14:	d111      	bne.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e16:	4b77      	ldr	r3, [pc, #476]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1a:	4a76      	ldr	r2, [pc, #472]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009e22:	e011      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e28:	3308      	adds	r3, #8
 8009e2a:	2102      	movs	r1, #2
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f002 f997 	bl	800c160 <RCCEx_PLL2_Config>
 8009e32:	4603      	mov	r3, r0
 8009e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009e38:	e006      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e40:	e002      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009e42:	bf00      	nop
 8009e44:	e000      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d10a      	bne.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009e50:	4b68      	ldr	r3, [pc, #416]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e5e:	4a65      	ldr	r2, [pc, #404]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e60:	430b      	orrs	r3, r1
 8009e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e64:	e003      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009e7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009e84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	d051      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e98:	d035      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009e9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e9e:	d82e      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ea0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ea4:	d031      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009ea6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009eaa:	d828      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009eb0:	d01a      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009eb6:	d822      	bhi.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ec0:	d007      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009ec2:	e01c      	b.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec8:	4a4a      	ldr	r2, [pc, #296]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ed0:	e01c      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	2100      	movs	r1, #0
 8009eda:	4618      	mov	r0, r3
 8009edc:	f002 f940 	bl	800c160 <RCCEx_PLL2_Config>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ee6:	e011      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eec:	3328      	adds	r3, #40	@ 0x28
 8009eee:	2100      	movs	r1, #0
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f002 f9e7 	bl	800c2c4 <RCCEx_PLL3_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009efc:	e006      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f04:	e002      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009f06:	bf00      	nop
 8009f08:	e000      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009f14:	4b37      	ldr	r3, [pc, #220]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f22:	4a34      	ldr	r2, [pc, #208]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f24:	430b      	orrs	r3, r1
 8009f26:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f28:	e003      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009f42:	2300      	movs	r3, #0
 8009f44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	d056      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f5c:	d033      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009f5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f62:	d82c      	bhi.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f68:	d02f      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009f6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009f6e:	d826      	bhi.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009f74:	d02b      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009f76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009f7a:	d820      	bhi.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f80:	d012      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009f82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f86:	d81a      	bhi.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d022      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f90:	d115      	bne.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f96:	3308      	adds	r3, #8
 8009f98:	2101      	movs	r1, #1
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f002 f8e0 	bl	800c160 <RCCEx_PLL2_Config>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009fa6:	e015      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fac:	3328      	adds	r3, #40	@ 0x28
 8009fae:	2101      	movs	r1, #1
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f002 f987 	bl	800c2c4 <RCCEx_PLL3_Config>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009fbc:	e00a      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fc4:	e006      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009fc6:	bf00      	nop
 8009fc8:	e004      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009fca:	bf00      	nop
 8009fcc:	e002      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009fce:	bf00      	nop
 8009fd0:	e000      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10d      	bne.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009fdc:	4b05      	ldr	r3, [pc, #20]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fea:	4a02      	ldr	r2, [pc, #8]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fec:	430b      	orrs	r3, r1
 8009fee:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ff0:	e006      	b.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009ff2:	bf00      	nop
 8009ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a00c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a010:	2300      	movs	r3, #0
 800a012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a016:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4313      	orrs	r3, r2
 800a01e:	d055      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a02c:	d033      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a02e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a032:	d82c      	bhi.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a038:	d02f      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a03e:	d826      	bhi.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a040:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a044:	d02b      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a04a:	d820      	bhi.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a04c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a050:	d012      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a056:	d81a      	bhi.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d022      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a05c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a060:	d115      	bne.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a066:	3308      	adds	r3, #8
 800a068:	2101      	movs	r1, #1
 800a06a:	4618      	mov	r0, r3
 800a06c:	f002 f878 	bl	800c160 <RCCEx_PLL2_Config>
 800a070:	4603      	mov	r3, r0
 800a072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a076:	e015      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a07c:	3328      	adds	r3, #40	@ 0x28
 800a07e:	2101      	movs	r1, #1
 800a080:	4618      	mov	r0, r3
 800a082:	f002 f91f 	bl	800c2c4 <RCCEx_PLL3_Config>
 800a086:	4603      	mov	r3, r0
 800a088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a08c:	e00a      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a094:	e006      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a096:	bf00      	nop
 800a098:	e004      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a09a:	bf00      	nop
 800a09c:	e002      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a09e:	bf00      	nop
 800a0a0:	e000      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a0a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10b      	bne.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a0ac:	4ba3      	ldr	r3, [pc, #652]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a0bc:	4a9f      	ldr	r2, [pc, #636]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0c2:	e003      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a0d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a0e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	d037      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0f6:	d00e      	beq.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a0f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0fc:	d816      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d018      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a106:	d111      	bne.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a108:	4b8c      	ldr	r3, [pc, #560]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10c:	4a8b      	ldr	r2, [pc, #556]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a10e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a114:	e00f      	b.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11a:	3308      	adds	r3, #8
 800a11c:	2101      	movs	r1, #1
 800a11e:	4618      	mov	r0, r3
 800a120:	f002 f81e 	bl	800c160 <RCCEx_PLL2_Config>
 800a124:	4603      	mov	r3, r0
 800a126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a12a:	e004      	b.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a132:	e000      	b.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a134:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10a      	bne.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a13e:	4b7f      	ldr	r3, [pc, #508]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a142:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a14c:	4a7b      	ldr	r2, [pc, #492]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a14e:	430b      	orrs	r3, r1
 800a150:	6513      	str	r3, [r2, #80]	@ 0x50
 800a152:	e003      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a16c:	2300      	movs	r3, #0
 800a16e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a172:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a176:	460b      	mov	r3, r1
 800a178:	4313      	orrs	r3, r2
 800a17a:	d039      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a182:	2b03      	cmp	r3, #3
 800a184:	d81c      	bhi.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a186:	a201      	add	r2, pc, #4	@ (adr r2, 800a18c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a18c:	0800a1c9 	.word	0x0800a1c9
 800a190:	0800a19d 	.word	0x0800a19d
 800a194:	0800a1ab 	.word	0x0800a1ab
 800a198:	0800a1c9 	.word	0x0800a1c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a19c:	4b67      	ldr	r3, [pc, #412]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a0:	4a66      	ldr	r2, [pc, #408]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a1a8:	e00f      	b.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ae:	3308      	adds	r3, #8
 800a1b0:	2102      	movs	r1, #2
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f001 ffd4 	bl	800c160 <RCCEx_PLL2_Config>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a1be:	e004      	b.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1c6:	e000      	b.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a1c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10a      	bne.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a1d2:	4b5a      	ldr	r3, [pc, #360]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1d6:	f023 0103 	bic.w	r1, r3, #3
 800a1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1e0:	4a56      	ldr	r2, [pc, #344]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1e2:	430b      	orrs	r3, r1
 800a1e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a1e6:	e003      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a1fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a200:	2300      	movs	r3, #0
 800a202:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a206:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a20a:	460b      	mov	r3, r1
 800a20c:	4313      	orrs	r3, r2
 800a20e:	f000 809f 	beq.w	800a350 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a212:	4b4b      	ldr	r3, [pc, #300]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a4a      	ldr	r2, [pc, #296]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a21c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a21e:	f7f8 fcf5 	bl	8002c0c <HAL_GetTick>
 800a222:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a226:	e00b      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a228:	f7f8 fcf0 	bl	8002c0c <HAL_GetTick>
 800a22c:	4602      	mov	r2, r0
 800a22e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	2b64      	cmp	r3, #100	@ 0x64
 800a236:	d903      	bls.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a23e:	e005      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a240:	4b3f      	ldr	r3, [pc, #252]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d0ed      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a24c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a250:	2b00      	cmp	r3, #0
 800a252:	d179      	bne.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a254:	4b39      	ldr	r3, [pc, #228]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a256:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a25c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a260:	4053      	eors	r3, r2
 800a262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a266:	2b00      	cmp	r3, #0
 800a268:	d015      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a26a:	4b34      	ldr	r3, [pc, #208]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a26c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a26e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a272:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a276:	4b31      	ldr	r3, [pc, #196]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a27a:	4a30      	ldr	r2, [pc, #192]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a27c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a280:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a282:	4b2e      	ldr	r3, [pc, #184]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a286:	4a2d      	ldr	r2, [pc, #180]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a28c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a28e:	4a2b      	ldr	r2, [pc, #172]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a290:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a294:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a29a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a29e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2a2:	d118      	bne.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a4:	f7f8 fcb2 	bl	8002c0c <HAL_GetTick>
 800a2a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2ac:	e00d      	b.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2ae:	f7f8 fcad 	bl	8002c0c <HAL_GetTick>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a2b8:	1ad2      	subs	r2, r2, r3
 800a2ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d903      	bls.n	800a2ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a2c8:	e005      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2ca:	4b1c      	ldr	r3, [pc, #112]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0eb      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a2d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d129      	bne.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a2e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2ee:	d10e      	bne.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a2f0:	4b12      	ldr	r3, [pc, #72]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a300:	091a      	lsrs	r2, r3, #4
 800a302:	4b10      	ldr	r3, [pc, #64]	@ (800a344 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a304:	4013      	ands	r3, r2
 800a306:	4a0d      	ldr	r2, [pc, #52]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a308:	430b      	orrs	r3, r1
 800a30a:	6113      	str	r3, [r2, #16]
 800a30c:	e005      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a30e:	4b0b      	ldr	r3, [pc, #44]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	4a0a      	ldr	r2, [pc, #40]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a314:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a318:	6113      	str	r3, [r2, #16]
 800a31a:	4b08      	ldr	r3, [pc, #32]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a31c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a322:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a32a:	4a04      	ldr	r2, [pc, #16]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a32c:	430b      	orrs	r3, r1
 800a32e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a330:	e00e      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a33a:	e009      	b.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a33c:	58024400 	.word	0x58024400
 800a340:	58024800 	.word	0x58024800
 800a344:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a34c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	f002 0301 	and.w	r3, r2, #1
 800a35c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a360:	2300      	movs	r3, #0
 800a362:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a366:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a36a:	460b      	mov	r3, r1
 800a36c:	4313      	orrs	r3, r2
 800a36e:	f000 8089 	beq.w	800a484 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a376:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a378:	2b28      	cmp	r3, #40	@ 0x28
 800a37a:	d86b      	bhi.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a37c:	a201      	add	r2, pc, #4	@ (adr r2, 800a384 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a382:	bf00      	nop
 800a384:	0800a45d 	.word	0x0800a45d
 800a388:	0800a455 	.word	0x0800a455
 800a38c:	0800a455 	.word	0x0800a455
 800a390:	0800a455 	.word	0x0800a455
 800a394:	0800a455 	.word	0x0800a455
 800a398:	0800a455 	.word	0x0800a455
 800a39c:	0800a455 	.word	0x0800a455
 800a3a0:	0800a455 	.word	0x0800a455
 800a3a4:	0800a429 	.word	0x0800a429
 800a3a8:	0800a455 	.word	0x0800a455
 800a3ac:	0800a455 	.word	0x0800a455
 800a3b0:	0800a455 	.word	0x0800a455
 800a3b4:	0800a455 	.word	0x0800a455
 800a3b8:	0800a455 	.word	0x0800a455
 800a3bc:	0800a455 	.word	0x0800a455
 800a3c0:	0800a455 	.word	0x0800a455
 800a3c4:	0800a43f 	.word	0x0800a43f
 800a3c8:	0800a455 	.word	0x0800a455
 800a3cc:	0800a455 	.word	0x0800a455
 800a3d0:	0800a455 	.word	0x0800a455
 800a3d4:	0800a455 	.word	0x0800a455
 800a3d8:	0800a455 	.word	0x0800a455
 800a3dc:	0800a455 	.word	0x0800a455
 800a3e0:	0800a455 	.word	0x0800a455
 800a3e4:	0800a45d 	.word	0x0800a45d
 800a3e8:	0800a455 	.word	0x0800a455
 800a3ec:	0800a455 	.word	0x0800a455
 800a3f0:	0800a455 	.word	0x0800a455
 800a3f4:	0800a455 	.word	0x0800a455
 800a3f8:	0800a455 	.word	0x0800a455
 800a3fc:	0800a455 	.word	0x0800a455
 800a400:	0800a455 	.word	0x0800a455
 800a404:	0800a45d 	.word	0x0800a45d
 800a408:	0800a455 	.word	0x0800a455
 800a40c:	0800a455 	.word	0x0800a455
 800a410:	0800a455 	.word	0x0800a455
 800a414:	0800a455 	.word	0x0800a455
 800a418:	0800a455 	.word	0x0800a455
 800a41c:	0800a455 	.word	0x0800a455
 800a420:	0800a455 	.word	0x0800a455
 800a424:	0800a45d 	.word	0x0800a45d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a42c:	3308      	adds	r3, #8
 800a42e:	2101      	movs	r1, #1
 800a430:	4618      	mov	r0, r3
 800a432:	f001 fe95 	bl	800c160 <RCCEx_PLL2_Config>
 800a436:	4603      	mov	r3, r0
 800a438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a43c:	e00f      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a442:	3328      	adds	r3, #40	@ 0x28
 800a444:	2101      	movs	r1, #1
 800a446:	4618      	mov	r0, r3
 800a448:	f001 ff3c 	bl	800c2c4 <RCCEx_PLL3_Config>
 800a44c:	4603      	mov	r3, r0
 800a44e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a452:	e004      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a45a:	e000      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a45c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a45e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10a      	bne.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a466:	4bbf      	ldr	r3, [pc, #764]	@ (800a764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a46a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a472:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a474:	4abb      	ldr	r2, [pc, #748]	@ (800a764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a476:	430b      	orrs	r3, r1
 800a478:	6553      	str	r3, [r2, #84]	@ 0x54
 800a47a:	e003      	b.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a47c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	f002 0302 	and.w	r3, r2, #2
 800a490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a494:	2300      	movs	r3, #0
 800a496:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a49a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	d041      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4aa:	2b05      	cmp	r3, #5
 800a4ac:	d824      	bhi.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a4ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a501 	.word	0x0800a501
 800a4b8:	0800a4cd 	.word	0x0800a4cd
 800a4bc:	0800a4e3 	.word	0x0800a4e3
 800a4c0:	0800a501 	.word	0x0800a501
 800a4c4:	0800a501 	.word	0x0800a501
 800a4c8:	0800a501 	.word	0x0800a501
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f001 fe43 	bl	800c160 <RCCEx_PLL2_Config>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a4e0:	e00f      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4e6:	3328      	adds	r3, #40	@ 0x28
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f001 feea 	bl	800c2c4 <RCCEx_PLL3_Config>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a4f6:	e004      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a4fe:	e000      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a500:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a506:	2b00      	cmp	r3, #0
 800a508:	d10a      	bne.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a50a:	4b96      	ldr	r3, [pc, #600]	@ (800a764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a50c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a50e:	f023 0107 	bic.w	r1, r3, #7
 800a512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a516:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a518:	4a92      	ldr	r2, [pc, #584]	@ (800a764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a51a:	430b      	orrs	r3, r1
 800a51c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a51e:	e003      	b.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	f002 0304 	and.w	r3, r2, #4
 800a534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a538:	2300      	movs	r3, #0
 800a53a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a53e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a542:	460b      	mov	r3, r1
 800a544:	4313      	orrs	r3, r2
 800a546:	d044      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a54c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a550:	2b05      	cmp	r3, #5
 800a552:	d825      	bhi.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a554:	a201      	add	r2, pc, #4	@ (adr r2, 800a55c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55a:	bf00      	nop
 800a55c:	0800a5a9 	.word	0x0800a5a9
 800a560:	0800a575 	.word	0x0800a575
 800a564:	0800a58b 	.word	0x0800a58b
 800a568:	0800a5a9 	.word	0x0800a5a9
 800a56c:	0800a5a9 	.word	0x0800a5a9
 800a570:	0800a5a9 	.word	0x0800a5a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a578:	3308      	adds	r3, #8
 800a57a:	2101      	movs	r1, #1
 800a57c:	4618      	mov	r0, r3
 800a57e:	f001 fdef 	bl	800c160 <RCCEx_PLL2_Config>
 800a582:	4603      	mov	r3, r0
 800a584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a588:	e00f      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a58e:	3328      	adds	r3, #40	@ 0x28
 800a590:	2101      	movs	r1, #1
 800a592:	4618      	mov	r0, r3
 800a594:	f001 fe96 	bl	800c2c4 <RCCEx_PLL3_Config>
 800a598:	4603      	mov	r3, r0
 800a59a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a59e:	e004      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a5a6:	e000      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a5a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10b      	bne.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a5b2:	4b6c      	ldr	r3, [pc, #432]	@ (800a764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5b6:	f023 0107 	bic.w	r1, r3, #7
 800a5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5c2:	4a68      	ldr	r2, [pc, #416]	@ (800a764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a5c4:	430b      	orrs	r3, r1
 800a5c6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5c8:	e003      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	f002 0320 	and.w	r3, r2, #32
 800a5de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a5e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	d055      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a5fe:	d033      	beq.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a600:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a604:	d82c      	bhi.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a60a:	d02f      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a60c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a610:	d826      	bhi.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a612:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a616:	d02b      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a618:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a61c:	d820      	bhi.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a61e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a622:	d012      	beq.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a628:	d81a      	bhi.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d022      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a62e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a632:	d115      	bne.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a638:	3308      	adds	r3, #8
 800a63a:	2100      	movs	r1, #0
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 fd8f 	bl	800c160 <RCCEx_PLL2_Config>
 800a642:	4603      	mov	r3, r0
 800a644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a648:	e015      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a64e:	3328      	adds	r3, #40	@ 0x28
 800a650:	2102      	movs	r1, #2
 800a652:	4618      	mov	r0, r3
 800a654:	f001 fe36 	bl	800c2c4 <RCCEx_PLL3_Config>
 800a658:	4603      	mov	r3, r0
 800a65a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a65e:	e00a      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a666:	e006      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a668:	bf00      	nop
 800a66a:	e004      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a66c:	bf00      	nop
 800a66e:	e002      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a670:	bf00      	nop
 800a672:	e000      	b.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a674:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10b      	bne.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a67e:	4b39      	ldr	r3, [pc, #228]	@ (800a764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a682:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a68e:	4a35      	ldr	r2, [pc, #212]	@ (800a764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a690:	430b      	orrs	r3, r1
 800a692:	6553      	str	r3, [r2, #84]	@ 0x54
 800a694:	e003      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a69a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a6aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a6b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	d058      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a6c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a6ca:	d033      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a6cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a6d0:	d82c      	bhi.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a6d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6d6:	d02f      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a6d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6dc:	d826      	bhi.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a6de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a6e2:	d02b      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a6e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a6e8:	d820      	bhi.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a6ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6ee:	d012      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a6f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6f4:	d81a      	bhi.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d022      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a6fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6fe:	d115      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a704:	3308      	adds	r3, #8
 800a706:	2100      	movs	r1, #0
 800a708:	4618      	mov	r0, r3
 800a70a:	f001 fd29 	bl	800c160 <RCCEx_PLL2_Config>
 800a70e:	4603      	mov	r3, r0
 800a710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a714:	e015      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a71a:	3328      	adds	r3, #40	@ 0x28
 800a71c:	2102      	movs	r1, #2
 800a71e:	4618      	mov	r0, r3
 800a720:	f001 fdd0 	bl	800c2c4 <RCCEx_PLL3_Config>
 800a724:	4603      	mov	r3, r0
 800a726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a72a:	e00a      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a732:	e006      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a734:	bf00      	nop
 800a736:	e004      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a738:	bf00      	nop
 800a73a:	e002      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a73c:	bf00      	nop
 800a73e:	e000      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a740:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10e      	bne.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a74a:	4b06      	ldr	r3, [pc, #24]	@ (800a764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a74c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a74e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a756:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a75a:	4a02      	ldr	r2, [pc, #8]	@ (800a764 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a75c:	430b      	orrs	r3, r1
 800a75e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a760:	e006      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a762:	bf00      	nop
 800a764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a76c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a77c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a780:	2300      	movs	r3, #0
 800a782:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a786:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a78a:	460b      	mov	r3, r1
 800a78c:	4313      	orrs	r3, r2
 800a78e:	d055      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a794:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a798:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a79c:	d033      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a79e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a7a2:	d82c      	bhi.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a7a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7a8:	d02f      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a7aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7ae:	d826      	bhi.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a7b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a7b4:	d02b      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a7b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a7ba:	d820      	bhi.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a7bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7c0:	d012      	beq.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a7c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7c6:	d81a      	bhi.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d022      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a7cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7d0:	d115      	bne.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7d6:	3308      	adds	r3, #8
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f001 fcc0 	bl	800c160 <RCCEx_PLL2_Config>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a7e6:	e015      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7ec:	3328      	adds	r3, #40	@ 0x28
 800a7ee:	2102      	movs	r1, #2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f001 fd67 	bl	800c2c4 <RCCEx_PLL3_Config>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a7fc:	e00a      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a804:	e006      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a806:	bf00      	nop
 800a808:	e004      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a80a:	bf00      	nop
 800a80c:	e002      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a80e:	bf00      	nop
 800a810:	e000      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a812:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10b      	bne.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a81c:	4ba1      	ldr	r3, [pc, #644]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a81e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a820:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a828:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a82c:	4a9d      	ldr	r2, [pc, #628]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a82e:	430b      	orrs	r3, r1
 800a830:	6593      	str	r3, [r2, #88]	@ 0x58
 800a832:	e003      	b.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f002 0308 	and.w	r3, r2, #8
 800a848:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a84c:	2300      	movs	r3, #0
 800a84e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a852:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a856:	460b      	mov	r3, r1
 800a858:	4313      	orrs	r3, r2
 800a85a:	d01e      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a85c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a868:	d10c      	bne.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a86e:	3328      	adds	r3, #40	@ 0x28
 800a870:	2102      	movs	r1, #2
 800a872:	4618      	mov	r0, r3
 800a874:	f001 fd26 	bl	800c2c4 <RCCEx_PLL3_Config>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d002      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a884:	4b87      	ldr	r3, [pc, #540]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a888:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a894:	4a83      	ldr	r2, [pc, #524]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a896:	430b      	orrs	r3, r1
 800a898:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a2:	f002 0310 	and.w	r3, r2, #16
 800a8a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a8b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	d01e      	beq.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a8ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8c6:	d10c      	bne.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8cc:	3328      	adds	r3, #40	@ 0x28
 800a8ce:	2102      	movs	r1, #2
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f001 fcf7 	bl	800c2c4 <RCCEx_PLL3_Config>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a8e2:	4b70      	ldr	r3, [pc, #448]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8f2:	4a6c      	ldr	r2, [pc, #432]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8f4:	430b      	orrs	r3, r1
 800a8f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a8f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a904:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a908:	2300      	movs	r3, #0
 800a90a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a90e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a912:	460b      	mov	r3, r1
 800a914:	4313      	orrs	r3, r2
 800a916:	d03e      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a91c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a924:	d022      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a926:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a92a:	d81b      	bhi.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d003      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a934:	d00b      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a936:	e015      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a93c:	3308      	adds	r3, #8
 800a93e:	2100      	movs	r1, #0
 800a940:	4618      	mov	r0, r3
 800a942:	f001 fc0d 	bl	800c160 <RCCEx_PLL2_Config>
 800a946:	4603      	mov	r3, r0
 800a948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a94c:	e00f      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a952:	3328      	adds	r3, #40	@ 0x28
 800a954:	2102      	movs	r1, #2
 800a956:	4618      	mov	r0, r3
 800a958:	f001 fcb4 	bl	800c2c4 <RCCEx_PLL3_Config>
 800a95c:	4603      	mov	r3, r0
 800a95e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a962:	e004      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a96a:	e000      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a96c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a96e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10b      	bne.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a976:	4b4b      	ldr	r3, [pc, #300]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a97a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a986:	4a47      	ldr	r2, [pc, #284]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a988:	430b      	orrs	r3, r1
 800a98a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a98c:	e003      	b.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a98e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a9a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a9a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	d03b      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a9be:	d01f      	beq.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a9c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a9c4:	d818      	bhi.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a9c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9ca:	d003      	beq.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a9cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9d0:	d007      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a9d2:	e011      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9d4:	4b33      	ldr	r3, [pc, #204]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d8:	4a32      	ldr	r2, [pc, #200]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a9e0:	e00f      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9e6:	3328      	adds	r3, #40	@ 0x28
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f001 fc6a 	bl	800c2c4 <RCCEx_PLL3_Config>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a9f6:	e004      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9fe:	e000      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800aa00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10b      	bne.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa0a:	4b26      	ldr	r3, [pc, #152]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800aa12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa1a:	4a22      	ldr	r2, [pc, #136]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa1c:	430b      	orrs	r3, r1
 800aa1e:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa20:	e003      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aa2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800aa36:	673b      	str	r3, [r7, #112]	@ 0x70
 800aa38:	2300      	movs	r3, #0
 800aa3a:	677b      	str	r3, [r7, #116]	@ 0x74
 800aa3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800aa40:	460b      	mov	r3, r1
 800aa42:	4313      	orrs	r3, r2
 800aa44:	d034      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800aa46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d003      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800aa50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa54:	d007      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800aa56:	e011      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa58:	4b12      	ldr	r3, [pc, #72]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa5c:	4a11      	ldr	r2, [pc, #68]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa64:	e00e      	b.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	2102      	movs	r1, #2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f001 fb76 	bl	800c160 <RCCEx_PLL2_Config>
 800aa74:	4603      	mov	r3, r0
 800aa76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aa7a:	e003      	b.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10d      	bne.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa8c:	4b05      	ldr	r3, [pc, #20]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aa94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa9a:	4a02      	ldr	r2, [pc, #8]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aaa0:	e006      	b.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800aaa2:	bf00      	nop
 800aaa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800aabc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aabe:	2300      	movs	r3, #0
 800aac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aac2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800aac6:	460b      	mov	r3, r1
 800aac8:	4313      	orrs	r3, r2
 800aaca:	d00c      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad0:	3328      	adds	r3, #40	@ 0x28
 800aad2:	2102      	movs	r1, #2
 800aad4:	4618      	mov	r0, r3
 800aad6:	f001 fbf5 	bl	800c2c4 <RCCEx_PLL3_Config>
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800aaf2:	663b      	str	r3, [r7, #96]	@ 0x60
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	667b      	str	r3, [r7, #100]	@ 0x64
 800aaf8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800aafc:	460b      	mov	r3, r1
 800aafe:	4313      	orrs	r3, r2
 800ab00:	d038      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ab02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab0e:	d018      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ab10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab14:	d811      	bhi.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ab16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab1a:	d014      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ab1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab20:	d80b      	bhi.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d011      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ab26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab2a:	d106      	bne.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab2c:	4bc3      	ldr	r3, [pc, #780]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab30:	4ac2      	ldr	r2, [pc, #776]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ab38:	e008      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab40:	e004      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ab42:	bf00      	nop
 800ab44:	e002      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ab46:	bf00      	nop
 800ab48:	e000      	b.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ab4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10b      	bne.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab54:	4bb9      	ldr	r3, [pc, #740]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ab5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab64:	4ab5      	ldr	r2, [pc, #724]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab66:	430b      	orrs	r3, r1
 800ab68:	6553      	str	r3, [r2, #84]	@ 0x54
 800ab6a:	e003      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ab74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ab80:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ab82:	2300      	movs	r3, #0
 800ab84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	d009      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ab90:	4baa      	ldr	r3, [pc, #680]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ab98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab9e:	4aa7      	ldr	r2, [pc, #668]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aba0:	430b      	orrs	r3, r1
 800aba2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800abb0:	653b      	str	r3, [r7, #80]	@ 0x50
 800abb2:	2300      	movs	r3, #0
 800abb4:	657b      	str	r3, [r7, #84]	@ 0x54
 800abb6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800abba:	460b      	mov	r3, r1
 800abbc:	4313      	orrs	r3, r2
 800abbe:	d00a      	beq.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800abc0:	4b9e      	ldr	r3, [pc, #632]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800abc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800abd0:	4a9a      	ldr	r2, [pc, #616]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abd2:	430b      	orrs	r3, r1
 800abd4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800abd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800abe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abe4:	2300      	movs	r3, #0
 800abe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abe8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800abec:	460b      	mov	r3, r1
 800abee:	4313      	orrs	r3, r2
 800abf0:	d009      	beq.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800abf2:	4b92      	ldr	r3, [pc, #584]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abf6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800abfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac00:	4a8e      	ldr	r2, [pc, #568]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac02:	430b      	orrs	r3, r1
 800ac04:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ac06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ac12:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac14:	2300      	movs	r3, #0
 800ac16:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	d00e      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac22:	4b86      	ldr	r3, [pc, #536]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	4a85      	ldr	r2, [pc, #532]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ac2c:	6113      	str	r3, [r2, #16]
 800ac2e:	4b83      	ldr	r3, [pc, #524]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac30:	6919      	ldr	r1, [r3, #16]
 800ac32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ac3a:	4a80      	ldr	r2, [pc, #512]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac3c:	430b      	orrs	r3, r1
 800ac3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ac40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac48:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ac4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ac4e:	2300      	movs	r3, #0
 800ac50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ac56:	460b      	mov	r3, r1
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	d009      	beq.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ac5c:	4b77      	ldr	r3, [pc, #476]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac60:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ac64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac6a:	4a74      	ldr	r2, [pc, #464]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac6c:	430b      	orrs	r3, r1
 800ac6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ac70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac78:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ac7c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac7e:	2300      	movs	r3, #0
 800ac80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ac86:	460b      	mov	r3, r1
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	d00a      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ac8c:	4b6b      	ldr	r3, [pc, #428]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac90:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ac94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac9c:	4a67      	ldr	r2, [pc, #412]	@ (800ae3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acaa:	2100      	movs	r1, #0
 800acac:	62b9      	str	r1, [r7, #40]	@ 0x28
 800acae:	f003 0301 	and.w	r3, r3, #1
 800acb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800acb8:	460b      	mov	r3, r1
 800acba:	4313      	orrs	r3, r2
 800acbc:	d011      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acc2:	3308      	adds	r3, #8
 800acc4:	2100      	movs	r1, #0
 800acc6:	4618      	mov	r0, r3
 800acc8:	f001 fa4a 	bl	800c160 <RCCEx_PLL2_Config>
 800accc:	4603      	mov	r3, r0
 800acce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800acd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ace2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ace6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acea:	2100      	movs	r1, #0
 800acec:	6239      	str	r1, [r7, #32]
 800acee:	f003 0302 	and.w	r3, r3, #2
 800acf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800acf4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800acf8:	460b      	mov	r3, r1
 800acfa:	4313      	orrs	r3, r2
 800acfc:	d011      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad02:	3308      	adds	r3, #8
 800ad04:	2101      	movs	r1, #1
 800ad06:	4618      	mov	r0, r3
 800ad08:	f001 fa2a 	bl	800c160 <RCCEx_PLL2_Config>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ad12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d003      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ad22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	61b9      	str	r1, [r7, #24]
 800ad2e:	f003 0304 	and.w	r3, r3, #4
 800ad32:	61fb      	str	r3, [r7, #28]
 800ad34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	d011      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad42:	3308      	adds	r3, #8
 800ad44:	2102      	movs	r1, #2
 800ad46:	4618      	mov	r0, r3
 800ad48:	f001 fa0a 	bl	800c160 <RCCEx_PLL2_Config>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ad52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d003      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ad62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	6139      	str	r1, [r7, #16]
 800ad6e:	f003 0308 	and.w	r3, r3, #8
 800ad72:	617b      	str	r3, [r7, #20]
 800ad74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	d011      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad82:	3328      	adds	r3, #40	@ 0x28
 800ad84:	2100      	movs	r1, #0
 800ad86:	4618      	mov	r0, r3
 800ad88:	f001 fa9c 	bl	800c2c4 <RCCEx_PLL3_Config>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ad92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ada2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	2100      	movs	r1, #0
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	f003 0310 	and.w	r3, r3, #16
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800adb8:	460b      	mov	r3, r1
 800adba:	4313      	orrs	r3, r2
 800adbc:	d011      	beq.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adc2:	3328      	adds	r3, #40	@ 0x28
 800adc4:	2101      	movs	r1, #1
 800adc6:	4618      	mov	r0, r3
 800adc8:	f001 fa7c 	bl	800c2c4 <RCCEx_PLL3_Config>
 800adcc:	4603      	mov	r3, r0
 800adce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800add2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ade2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	2100      	movs	r1, #0
 800adec:	6039      	str	r1, [r7, #0]
 800adee:	f003 0320 	and.w	r3, r3, #32
 800adf2:	607b      	str	r3, [r7, #4]
 800adf4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800adf8:	460b      	mov	r3, r1
 800adfa:	4313      	orrs	r3, r2
 800adfc:	d011      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae02:	3328      	adds	r3, #40	@ 0x28
 800ae04:	2102      	movs	r1, #2
 800ae06:	4618      	mov	r0, r3
 800ae08:	f001 fa5c 	bl	800c2c4 <RCCEx_PLL3_Config>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ae12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800ae22:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d101      	bne.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	e000      	b.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800ae36:	46bd      	mov	sp, r7
 800ae38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae3c:	58024400 	.word	0x58024400

0800ae40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b090      	sub	sp, #64	@ 0x40
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ae4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae4e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ae52:	430b      	orrs	r3, r1
 800ae54:	f040 8094 	bne.w	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ae58:	4b9e      	ldr	r3, [pc, #632]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae5c:	f003 0307 	and.w	r3, r3, #7
 800ae60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ae62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae64:	2b04      	cmp	r3, #4
 800ae66:	f200 8087 	bhi.w	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ae6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ae6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae70:	0800ae85 	.word	0x0800ae85
 800ae74:	0800aead 	.word	0x0800aead
 800ae78:	0800aed5 	.word	0x0800aed5
 800ae7c:	0800af71 	.word	0x0800af71
 800ae80:	0800aefd 	.word	0x0800aefd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae84:	4b93      	ldr	r3, [pc, #588]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae90:	d108      	bne.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae96:	4618      	mov	r0, r3
 800ae98:	f001 f810 	bl	800bebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aea0:	f000 bd45 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aea4:	2300      	movs	r3, #0
 800aea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea8:	f000 bd41 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aeac:	4b89      	ldr	r3, [pc, #548]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aeb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeb8:	d108      	bne.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeba:	f107 0318 	add.w	r3, r7, #24
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 fd54 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aec8:	f000 bd31 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed0:	f000 bd2d 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aed4:	4b7f      	ldr	r3, [pc, #508]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aedc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aee0:	d108      	bne.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aee2:	f107 030c 	add.w	r3, r7, #12
 800aee6:	4618      	mov	r0, r3
 800aee8:	f000 fe94 	bl	800bc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aef0:	f000 bd1d 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aef4:	2300      	movs	r3, #0
 800aef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef8:	f000 bd19 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aefc:	4b75      	ldr	r3, [pc, #468]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aefe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af04:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af06:	4b73      	ldr	r3, [pc, #460]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 0304 	and.w	r3, r3, #4
 800af0e:	2b04      	cmp	r3, #4
 800af10:	d10c      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800af12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af14:	2b00      	cmp	r3, #0
 800af16:	d109      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af18:	4b6e      	ldr	r3, [pc, #440]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	08db      	lsrs	r3, r3, #3
 800af1e:	f003 0303 	and.w	r3, r3, #3
 800af22:	4a6d      	ldr	r2, [pc, #436]	@ (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800af24:	fa22 f303 	lsr.w	r3, r2, r3
 800af28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af2a:	e01f      	b.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af2c:	4b69      	ldr	r3, [pc, #420]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af38:	d106      	bne.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800af3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af40:	d102      	bne.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af42:	4b66      	ldr	r3, [pc, #408]	@ (800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800af44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af46:	e011      	b.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af48:	4b62      	ldr	r3, [pc, #392]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af54:	d106      	bne.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800af56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af5c:	d102      	bne.n	800af64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af5e:	4b60      	ldr	r3, [pc, #384]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800af60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af62:	e003      	b.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800af68:	f000 bce1 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af6c:	f000 bcdf 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af70:	4b5c      	ldr	r3, [pc, #368]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800af72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af74:	f000 bcdb 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af7c:	f000 bcd7 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800af80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af84:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800af88:	430b      	orrs	r3, r1
 800af8a:	f040 80ad 	bne.w	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800af8e:	4b51      	ldr	r3, [pc, #324]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af92:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800af96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800af98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af9e:	d056      	beq.n	800b04e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800afa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afa6:	f200 8090 	bhi.w	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800afaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afac:	2bc0      	cmp	r3, #192	@ 0xc0
 800afae:	f000 8088 	beq.w	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	2bc0      	cmp	r3, #192	@ 0xc0
 800afb6:	f200 8088 	bhi.w	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800afba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afbc:	2b80      	cmp	r3, #128	@ 0x80
 800afbe:	d032      	beq.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800afc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc2:	2b80      	cmp	r3, #128	@ 0x80
 800afc4:	f200 8081 	bhi.w	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800afc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d003      	beq.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800afce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd0:	2b40      	cmp	r3, #64	@ 0x40
 800afd2:	d014      	beq.n	800affe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800afd4:	e079      	b.n	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afd6:	4b3f      	ldr	r3, [pc, #252]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afe2:	d108      	bne.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 ff67 	bl	800bebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aff2:	f000 bc9c 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800affa:	f000 bc98 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800affe:	4b35      	ldr	r3, [pc, #212]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b00a:	d108      	bne.n	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b00c:	f107 0318 	add.w	r3, r7, #24
 800b010:	4618      	mov	r0, r3
 800b012:	f000 fcab 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b01a:	f000 bc88 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b022:	f000 bc84 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b026:	4b2b      	ldr	r3, [pc, #172]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b02e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b032:	d108      	bne.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b034:	f107 030c 	add.w	r3, r7, #12
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 fdeb 	bl	800bc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b042:	f000 bc74 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b04a:	f000 bc70 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b04e:	4b21      	ldr	r3, [pc, #132]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b052:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b056:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b058:	4b1e      	ldr	r3, [pc, #120]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0304 	and.w	r3, r3, #4
 800b060:	2b04      	cmp	r3, #4
 800b062:	d10c      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b066:	2b00      	cmp	r3, #0
 800b068:	d109      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b06a:	4b1a      	ldr	r3, [pc, #104]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	08db      	lsrs	r3, r3, #3
 800b070:	f003 0303 	and.w	r3, r3, #3
 800b074:	4a18      	ldr	r2, [pc, #96]	@ (800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b076:	fa22 f303 	lsr.w	r3, r2, r3
 800b07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b07c:	e01f      	b.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b07e:	4b15      	ldr	r3, [pc, #84]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b08a:	d106      	bne.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b08c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b08e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b092:	d102      	bne.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b094:	4b11      	ldr	r3, [pc, #68]	@ (800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b098:	e011      	b.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b09a:	4b0e      	ldr	r3, [pc, #56]	@ (800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0a6:	d106      	bne.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b0a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0ae:	d102      	bne.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0b4:	e003      	b.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b0ba:	f000 bc38 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0be:	f000 bc36 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0c2:	4b08      	ldr	r3, [pc, #32]	@ (800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c6:	f000 bc32 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ce:	f000 bc2e 	b.w	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0d2:	bf00      	nop
 800b0d4:	58024400 	.word	0x58024400
 800b0d8:	03d09000 	.word	0x03d09000
 800b0dc:	003d0900 	.word	0x003d0900
 800b0e0:	017d7840 	.word	0x017d7840
 800b0e4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b0e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0ec:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b0f0:	430b      	orrs	r3, r1
 800b0f2:	f040 809c 	bne.w	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b0f6:	4b9e      	ldr	r3, [pc, #632]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0fa:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b0fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b102:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b106:	d054      	beq.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b10e:	f200 808b 	bhi.w	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b114:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b118:	f000 8083 	beq.w	800b222 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b122:	f200 8081 	bhi.w	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b128:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b12c:	d02f      	beq.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b134:	d878      	bhi.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d004      	beq.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b142:	d012      	beq.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b144:	e070      	b.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b146:	4b8a      	ldr	r3, [pc, #552]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b14e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b152:	d107      	bne.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 feaf 	bl	800bebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b162:	e3e4      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b168:	e3e1      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b16a:	4b81      	ldr	r3, [pc, #516]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b172:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b176:	d107      	bne.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b178:	f107 0318 	add.w	r3, r7, #24
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fbf5 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b186:	e3d2      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b18c:	e3cf      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b18e:	4b78      	ldr	r3, [pc, #480]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b196:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b19a:	d107      	bne.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b19c:	f107 030c 	add.w	r3, r7, #12
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 fd37 	bl	800bc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1aa:	e3c0      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b0:	e3bd      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1b2:	4b6f      	ldr	r3, [pc, #444]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b1ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1bc:	4b6c      	ldr	r3, [pc, #432]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 0304 	and.w	r3, r3, #4
 800b1c4:	2b04      	cmp	r3, #4
 800b1c6:	d10c      	bne.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d109      	bne.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1ce:	4b68      	ldr	r3, [pc, #416]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	08db      	lsrs	r3, r3, #3
 800b1d4:	f003 0303 	and.w	r3, r3, #3
 800b1d8:	4a66      	ldr	r2, [pc, #408]	@ (800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b1da:	fa22 f303 	lsr.w	r3, r2, r3
 800b1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1e0:	e01e      	b.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1e2:	4b63      	ldr	r3, [pc, #396]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1ee:	d106      	bne.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1f6:	d102      	bne.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1f8:	4b5f      	ldr	r3, [pc, #380]	@ (800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1fc:	e010      	b.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1fe:	4b5c      	ldr	r3, [pc, #368]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b206:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b20a:	d106      	bne.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b20e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b212:	d102      	bne.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b214:	4b59      	ldr	r3, [pc, #356]	@ (800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b218:	e002      	b.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b21e:	e386      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b220:	e385      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b222:	4b57      	ldr	r3, [pc, #348]	@ (800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b226:	e382      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b22c:	e37f      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b22e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b232:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b236:	430b      	orrs	r3, r1
 800b238:	f040 80a7 	bne.w	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b23c:	4b4c      	ldr	r3, [pc, #304]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b23e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b240:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b244:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b24c:	d055      	beq.n	800b2fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b250:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b254:	f200 8096 	bhi.w	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b25e:	f000 8084 	beq.w	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b264:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b268:	f200 808c 	bhi.w	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b272:	d030      	beq.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b276:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b27a:	f200 8083 	bhi.w	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b280:	2b00      	cmp	r3, #0
 800b282:	d004      	beq.n	800b28e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b28a:	d012      	beq.n	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b28c:	e07a      	b.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b28e:	4b38      	ldr	r3, [pc, #224]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b296:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b29a:	d107      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b29c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 fe0b 	bl	800bebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2aa:	e340      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b0:	e33d      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2b2:	4b2f      	ldr	r3, [pc, #188]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2be:	d107      	bne.n	800b2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2c0:	f107 0318 	add.w	r3, r7, #24
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f000 fb51 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ce:	e32e      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d4:	e32b      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2d6:	4b26      	ldr	r3, [pc, #152]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2e2:	d107      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2e4:	f107 030c 	add.w	r3, r7, #12
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 fc93 	bl	800bc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2f2:	e31c      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2f8:	e319      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2fa:	4b1d      	ldr	r3, [pc, #116]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b302:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b304:	4b1a      	ldr	r3, [pc, #104]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b04      	cmp	r3, #4
 800b30e:	d10c      	bne.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b312:	2b00      	cmp	r3, #0
 800b314:	d109      	bne.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b316:	4b16      	ldr	r3, [pc, #88]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	08db      	lsrs	r3, r3, #3
 800b31c:	f003 0303 	and.w	r3, r3, #3
 800b320:	4a14      	ldr	r2, [pc, #80]	@ (800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b322:	fa22 f303 	lsr.w	r3, r2, r3
 800b326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b328:	e01e      	b.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b32a:	4b11      	ldr	r3, [pc, #68]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b336:	d106      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b33a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b33e:	d102      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b340:	4b0d      	ldr	r3, [pc, #52]	@ (800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b344:	e010      	b.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b346:	4b0a      	ldr	r3, [pc, #40]	@ (800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b34e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b352:	d106      	bne.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b35a:	d102      	bne.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b35c:	4b07      	ldr	r3, [pc, #28]	@ (800b37c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b360:	e002      	b.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b366:	e2e2      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b368:	e2e1      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b36a:	4b05      	ldr	r3, [pc, #20]	@ (800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b36e:	e2de      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b370:	58024400 	.word	0x58024400
 800b374:	03d09000 	.word	0x03d09000
 800b378:	003d0900 	.word	0x003d0900
 800b37c:	017d7840 	.word	0x017d7840
 800b380:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b388:	e2d1      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b38a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b38e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b392:	430b      	orrs	r3, r1
 800b394:	f040 809c 	bne.w	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b398:	4b93      	ldr	r3, [pc, #588]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b39a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b39c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b3a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3a8:	d054      	beq.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b3b0:	f200 808b 	bhi.w	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3ba:	f000 8083 	beq.w	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b3c4:	f200 8081 	bhi.w	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3ce:	d02f      	beq.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3d6:	d878      	bhi.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d004      	beq.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3e4:	d012      	beq.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b3e6:	e070      	b.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3e8:	4b7f      	ldr	r3, [pc, #508]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3f4:	d107      	bne.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f000 fd5e 	bl	800bebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b404:	e293      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b406:	2300      	movs	r3, #0
 800b408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b40a:	e290      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b40c:	4b76      	ldr	r3, [pc, #472]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b418:	d107      	bne.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b41a:	f107 0318 	add.w	r3, r7, #24
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 faa4 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b428:	e281      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b42e:	e27e      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b430:	4b6d      	ldr	r3, [pc, #436]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b43c:	d107      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b43e:	f107 030c 	add.w	r3, r7, #12
 800b442:	4618      	mov	r0, r3
 800b444:	f000 fbe6 	bl	800bc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b44c:	e26f      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b452:	e26c      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b454:	4b64      	ldr	r3, [pc, #400]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b458:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b45c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b45e:	4b62      	ldr	r3, [pc, #392]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 0304 	and.w	r3, r3, #4
 800b466:	2b04      	cmp	r3, #4
 800b468:	d10c      	bne.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b46a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d109      	bne.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b470:	4b5d      	ldr	r3, [pc, #372]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	08db      	lsrs	r3, r3, #3
 800b476:	f003 0303 	and.w	r3, r3, #3
 800b47a:	4a5c      	ldr	r2, [pc, #368]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b47c:	fa22 f303 	lsr.w	r3, r2, r3
 800b480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b482:	e01e      	b.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b484:	4b58      	ldr	r3, [pc, #352]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b48c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b490:	d106      	bne.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b498:	d102      	bne.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b49a:	4b55      	ldr	r3, [pc, #340]	@ (800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b49e:	e010      	b.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4a0:	4b51      	ldr	r3, [pc, #324]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4ac:	d106      	bne.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4b4:	d102      	bne.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4b6:	4b4f      	ldr	r3, [pc, #316]	@ (800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4ba:	e002      	b.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b4c0:	e235      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4c2:	e234      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4c4:	4b4c      	ldr	r3, [pc, #304]	@ (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4c8:	e231      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ce:	e22e      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b4d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4d4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b4d8:	430b      	orrs	r3, r1
 800b4da:	f040 808f 	bne.w	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b4de:	4b42      	ldr	r3, [pc, #264]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4e2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b4e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4ee:	d06b      	beq.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4f6:	d874      	bhi.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b4fe:	d056      	beq.n	800b5ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b502:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b506:	d86c      	bhi.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b50e:	d03b      	beq.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b512:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b516:	d864      	bhi.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b51a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b51e:	d021      	beq.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b526:	d85c      	bhi.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d004      	beq.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b534:	d004      	beq.n	800b540 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b536:	e054      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b538:	f7fe fa4c 	bl	80099d4 <HAL_RCC_GetPCLK1Freq>
 800b53c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b53e:	e1f6      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b540:	4b29      	ldr	r3, [pc, #164]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b548:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b54c:	d107      	bne.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b54e:	f107 0318 	add.w	r3, r7, #24
 800b552:	4618      	mov	r0, r3
 800b554:	f000 fa0a 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b55c:	e1e7      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b562:	e1e4      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b564:	4b20      	ldr	r3, [pc, #128]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b56c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b570:	d107      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b572:	f107 030c 	add.w	r3, r7, #12
 800b576:	4618      	mov	r0, r3
 800b578:	f000 fb4c 	bl	800bc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b580:	e1d5      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b582:	2300      	movs	r3, #0
 800b584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b586:	e1d2      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b588:	4b17      	ldr	r3, [pc, #92]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 0304 	and.w	r3, r3, #4
 800b590:	2b04      	cmp	r3, #4
 800b592:	d109      	bne.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b594:	4b14      	ldr	r3, [pc, #80]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	08db      	lsrs	r3, r3, #3
 800b59a:	f003 0303 	and.w	r3, r3, #3
 800b59e:	4a13      	ldr	r2, [pc, #76]	@ (800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b5a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5a6:	e1c2      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5ac:	e1bf      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b5ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5ba:	d102      	bne.n	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b5bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5c0:	e1b5      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c6:	e1b2      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5c8:	4b07      	ldr	r3, [pc, #28]	@ (800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5d4:	d102      	bne.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b5d6:	4b07      	ldr	r3, [pc, #28]	@ (800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5da:	e1a8      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e0:	e1a5      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e6:	e1a2      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b5e8:	58024400 	.word	0x58024400
 800b5ec:	03d09000 	.word	0x03d09000
 800b5f0:	003d0900 	.word	0x003d0900
 800b5f4:	017d7840 	.word	0x017d7840
 800b5f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b5fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b600:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b604:	430b      	orrs	r3, r1
 800b606:	d173      	bne.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b608:	4b9c      	ldr	r3, [pc, #624]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b60a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b60c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b610:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b618:	d02f      	beq.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b620:	d863      	bhi.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b624:	2b00      	cmp	r3, #0
 800b626:	d004      	beq.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b62e:	d012      	beq.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b630:	e05b      	b.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b632:	4b92      	ldr	r3, [pc, #584]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b63a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b63e:	d107      	bne.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b640:	f107 0318 	add.w	r3, r7, #24
 800b644:	4618      	mov	r0, r3
 800b646:	f000 f991 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b64e:	e16e      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b650:	2300      	movs	r3, #0
 800b652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b654:	e16b      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b656:	4b89      	ldr	r3, [pc, #548]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b65e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b662:	d107      	bne.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b664:	f107 030c 	add.w	r3, r7, #12
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 fad3 	bl	800bc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b672:	e15c      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b678:	e159      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b67a:	4b80      	ldr	r3, [pc, #512]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b67c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b67e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b682:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b684:	4b7d      	ldr	r3, [pc, #500]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0304 	and.w	r3, r3, #4
 800b68c:	2b04      	cmp	r3, #4
 800b68e:	d10c      	bne.n	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b692:	2b00      	cmp	r3, #0
 800b694:	d109      	bne.n	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b696:	4b79      	ldr	r3, [pc, #484]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	08db      	lsrs	r3, r3, #3
 800b69c:	f003 0303 	and.w	r3, r3, #3
 800b6a0:	4a77      	ldr	r2, [pc, #476]	@ (800b880 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b6a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6a8:	e01e      	b.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6aa:	4b74      	ldr	r3, [pc, #464]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6b6:	d106      	bne.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b6b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6be:	d102      	bne.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6c0:	4b70      	ldr	r3, [pc, #448]	@ (800b884 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6c4:	e010      	b.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6c6:	4b6d      	ldr	r3, [pc, #436]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6d2:	d106      	bne.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6da:	d102      	bne.n	800b6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6dc:	4b6a      	ldr	r3, [pc, #424]	@ (800b888 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6e0:	e002      	b.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b6e6:	e122      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6e8:	e121      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ee:	e11e      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b6f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6f4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b6f8:	430b      	orrs	r3, r1
 800b6fa:	d133      	bne.n	800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b6fc:	4b5f      	ldr	r3, [pc, #380]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b704:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d004      	beq.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b712:	d012      	beq.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b714:	e023      	b.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b716:	4b59      	ldr	r3, [pc, #356]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b71e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b722:	d107      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 fbc7 	bl	800bebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b732:	e0fc      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b734:	2300      	movs	r3, #0
 800b736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b738:	e0f9      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b73a:	4b50      	ldr	r3, [pc, #320]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b746:	d107      	bne.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b748:	f107 0318 	add.w	r3, r7, #24
 800b74c:	4618      	mov	r0, r3
 800b74e:	f000 f90d 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b756:	e0ea      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b758:	2300      	movs	r3, #0
 800b75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b75c:	e0e7      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b762:	e0e4      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b764:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b768:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b76c:	430b      	orrs	r3, r1
 800b76e:	f040 808d 	bne.w	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b772:	4b42      	ldr	r3, [pc, #264]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b776:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b77a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b782:	d06b      	beq.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b786:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b78a:	d874      	bhi.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b792:	d056      	beq.n	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b79a:	d86c      	bhi.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b7a2:	d03b      	beq.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b7aa:	d864      	bhi.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7b2:	d021      	beq.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7ba:	d85c      	bhi.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d004      	beq.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7c8:	d004      	beq.n	800b7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b7ca:	e054      	b.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b7cc:	f000 f8b8 	bl	800b940 <HAL_RCCEx_GetD3PCLK1Freq>
 800b7d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b7d2:	e0ac      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7d4:	4b29      	ldr	r3, [pc, #164]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7e0:	d107      	bne.n	800b7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7e2:	f107 0318 	add.w	r3, r7, #24
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 f8c0 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7f0:	e09d      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7f6:	e09a      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7f8:	4b20      	ldr	r3, [pc, #128]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b804:	d107      	bne.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b806:	f107 030c 	add.w	r3, r7, #12
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 fa02 	bl	800bc14 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b814:	e08b      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b816:	2300      	movs	r3, #0
 800b818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b81a:	e088      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b81c:	4b17      	ldr	r3, [pc, #92]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0304 	and.w	r3, r3, #4
 800b824:	2b04      	cmp	r3, #4
 800b826:	d109      	bne.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b828:	4b14      	ldr	r3, [pc, #80]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	08db      	lsrs	r3, r3, #3
 800b82e:	f003 0303 	and.w	r3, r3, #3
 800b832:	4a13      	ldr	r2, [pc, #76]	@ (800b880 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b834:	fa22 f303 	lsr.w	r3, r2, r3
 800b838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b83a:	e078      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b83c:	2300      	movs	r3, #0
 800b83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b840:	e075      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b842:	4b0e      	ldr	r3, [pc, #56]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b84a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b84e:	d102      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b850:	4b0c      	ldr	r3, [pc, #48]	@ (800b884 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b854:	e06b      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b85a:	e068      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b85c:	4b07      	ldr	r3, [pc, #28]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b868:	d102      	bne.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b86a:	4b07      	ldr	r3, [pc, #28]	@ (800b888 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b86e:	e05e      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b874:	e05b      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b87a:	e058      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b87c:	58024400 	.word	0x58024400
 800b880:	03d09000 	.word	0x03d09000
 800b884:	003d0900 	.word	0x003d0900
 800b888:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b88c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b890:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b894:	430b      	orrs	r3, r1
 800b896:	d148      	bne.n	800b92a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b898:	4b27      	ldr	r3, [pc, #156]	@ (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b89a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b89c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b8a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8a8:	d02a      	beq.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8b0:	d838      	bhi.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d004      	beq.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8be:	d00d      	beq.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b8c0:	e030      	b.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b8c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8ce:	d102      	bne.n	800b8d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b8d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8d4:	e02b      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8da:	e028      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8dc:	4b16      	ldr	r3, [pc, #88]	@ (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b8e8:	d107      	bne.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 fae4 	bl	800bebc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8f8:	e019      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8fe:	e016      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b900:	4b0d      	ldr	r3, [pc, #52]	@ (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b908:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b90c:	d107      	bne.n	800b91e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b90e:	f107 0318 	add.w	r3, r7, #24
 800b912:	4618      	mov	r0, r3
 800b914:	f000 f82a 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b918:	69fb      	ldr	r3, [r7, #28]
 800b91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b91c:	e007      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b91e:	2300      	movs	r3, #0
 800b920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b922:	e004      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b924:	2300      	movs	r3, #0
 800b926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b928:	e001      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b930:	4618      	mov	r0, r3
 800b932:	3740      	adds	r7, #64	@ 0x40
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	58024400 	.word	0x58024400
 800b93c:	017d7840 	.word	0x017d7840

0800b940 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b944:	f7fe f816 	bl	8009974 <HAL_RCC_GetHCLKFreq>
 800b948:	4602      	mov	r2, r0
 800b94a:	4b06      	ldr	r3, [pc, #24]	@ (800b964 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	091b      	lsrs	r3, r3, #4
 800b950:	f003 0307 	and.w	r3, r3, #7
 800b954:	4904      	ldr	r1, [pc, #16]	@ (800b968 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b956:	5ccb      	ldrb	r3, [r1, r3]
 800b958:	f003 031f 	and.w	r3, r3, #31
 800b95c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b960:	4618      	mov	r0, r3
 800b962:	bd80      	pop	{r7, pc}
 800b964:	58024400 	.word	0x58024400
 800b968:	08014738 	.word	0x08014738

0800b96c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b089      	sub	sp, #36	@ 0x24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b974:	4ba1      	ldr	r3, [pc, #644]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b978:	f003 0303 	and.w	r3, r3, #3
 800b97c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b97e:	4b9f      	ldr	r3, [pc, #636]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b982:	0b1b      	lsrs	r3, r3, #12
 800b984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b988:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b98a:	4b9c      	ldr	r3, [pc, #624]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b98e:	091b      	lsrs	r3, r3, #4
 800b990:	f003 0301 	and.w	r3, r3, #1
 800b994:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b996:	4b99      	ldr	r3, [pc, #612]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b99a:	08db      	lsrs	r3, r3, #3
 800b99c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	fb02 f303 	mul.w	r3, r2, r3
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 8111 	beq.w	800bbdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	f000 8083 	beq.w	800bac8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	f200 80a1 	bhi.w	800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d003      	beq.n	800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d056      	beq.n	800ba84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b9d6:	e099      	b.n	800bb0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9d8:	4b88      	ldr	r3, [pc, #544]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0320 	and.w	r3, r3, #32
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d02d      	beq.n	800ba40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9e4:	4b85      	ldr	r3, [pc, #532]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	08db      	lsrs	r3, r3, #3
 800b9ea:	f003 0303 	and.w	r3, r3, #3
 800b9ee:	4a84      	ldr	r2, [pc, #528]	@ (800bc00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b9f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	ee07 3a90 	vmov	s15, r3
 800b9fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	ee07 3a90 	vmov	s15, r3
 800ba06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba0e:	4b7b      	ldr	r3, [pc, #492]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba16:	ee07 3a90 	vmov	s15, r3
 800ba1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bc04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba3e:	e087      	b.n	800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bc08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ba4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba52:	4b6a      	ldr	r3, [pc, #424]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bc04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba82:	e065      	b.n	800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ba92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba96:	4b59      	ldr	r3, [pc, #356]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba9e:	ee07 3a90 	vmov	s15, r3
 800baa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baaa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bc04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800baae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800babe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bac6:	e043      	b.n	800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	ee07 3a90 	vmov	s15, r3
 800bace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bc10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bada:	4b48      	ldr	r3, [pc, #288]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800badc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bae2:	ee07 3a90 	vmov	s15, r3
 800bae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baea:	ed97 6a03 	vldr	s12, [r7, #12]
 800baee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bc04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800baf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bafa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb0a:	e021      	b.n	800bb50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	ee07 3a90 	vmov	s15, r3
 800bb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bc0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb1e:	4b37      	ldr	r3, [pc, #220]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb26:	ee07 3a90 	vmov	s15, r3
 800bb2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bc04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bb50:	4b2a      	ldr	r3, [pc, #168]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb54:	0a5b      	lsrs	r3, r3, #9
 800bb56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb5a:	ee07 3a90 	vmov	s15, r3
 800bb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb76:	ee17 2a90 	vmov	r2, s15
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bb7e:	4b1f      	ldr	r3, [pc, #124]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb82:	0c1b      	lsrs	r3, r3, #16
 800bb84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb88:	ee07 3a90 	vmov	s15, r3
 800bb8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb98:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bba4:	ee17 2a90 	vmov	r2, s15
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bbac:	4b13      	ldr	r3, [pc, #76]	@ (800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbb0:	0e1b      	lsrs	r3, r3, #24
 800bbb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbb6:	ee07 3a90 	vmov	s15, r3
 800bbba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbd2:	ee17 2a90 	vmov	r2, s15
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bbda:	e008      	b.n	800bbee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	609a      	str	r2, [r3, #8]
}
 800bbee:	bf00      	nop
 800bbf0:	3724      	adds	r7, #36	@ 0x24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop
 800bbfc:	58024400 	.word	0x58024400
 800bc00:	03d09000 	.word	0x03d09000
 800bc04:	46000000 	.word	0x46000000
 800bc08:	4c742400 	.word	0x4c742400
 800bc0c:	4a742400 	.word	0x4a742400
 800bc10:	4bbebc20 	.word	0x4bbebc20

0800bc14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b089      	sub	sp, #36	@ 0x24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc1c:	4ba1      	ldr	r3, [pc, #644]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc20:	f003 0303 	and.w	r3, r3, #3
 800bc24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bc26:	4b9f      	ldr	r3, [pc, #636]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc2a:	0d1b      	lsrs	r3, r3, #20
 800bc2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc32:	4b9c      	ldr	r3, [pc, #624]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc36:	0a1b      	lsrs	r3, r3, #8
 800bc38:	f003 0301 	and.w	r3, r3, #1
 800bc3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bc3e:	4b99      	ldr	r3, [pc, #612]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc42:	08db      	lsrs	r3, r3, #3
 800bc44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	fb02 f303 	mul.w	r3, r2, r3
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f000 8111 	beq.w	800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	f000 8083 	beq.w	800bd70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	f200 80a1 	bhi.w	800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d003      	beq.n	800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d056      	beq.n	800bd2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bc7e:	e099      	b.n	800bdb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc80:	4b88      	ldr	r3, [pc, #544]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 0320 	and.w	r3, r3, #32
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d02d      	beq.n	800bce8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc8c:	4b85      	ldr	r3, [pc, #532]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	08db      	lsrs	r3, r3, #3
 800bc92:	f003 0303 	and.w	r3, r3, #3
 800bc96:	4a84      	ldr	r2, [pc, #528]	@ (800bea8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bc98:	fa22 f303 	lsr.w	r3, r2, r3
 800bc9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	ee07 3a90 	vmov	s15, r3
 800bca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	ee07 3a90 	vmov	s15, r3
 800bcae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb6:	4b7b      	ldr	r3, [pc, #492]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcbe:	ee07 3a90 	vmov	s15, r3
 800bcc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800beac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bcce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bce2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bce6:	e087      	b.n	800bdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	ee07 3a90 	vmov	s15, r3
 800bcee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800beb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bcf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcfa:	4b6a      	ldr	r3, [pc, #424]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd02:	ee07 3a90 	vmov	s15, r3
 800bd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800beac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd2a:	e065      	b.n	800bdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800beb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd3e:	4b59      	ldr	r3, [pc, #356]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800beac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd6e:	e043      	b.n	800bdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	ee07 3a90 	vmov	s15, r3
 800bd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800beb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bd7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd82:	4b48      	ldr	r3, [pc, #288]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd8a:	ee07 3a90 	vmov	s15, r3
 800bd8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800beac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bda2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bda6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdb2:	e021      	b.n	800bdf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	ee07 3a90 	vmov	s15, r3
 800bdba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800beb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bdc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdc6:	4b37      	ldr	r3, [pc, #220]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdce:	ee07 3a90 	vmov	s15, r3
 800bdd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800beac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bde2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bde6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bdf8:	4b2a      	ldr	r3, [pc, #168]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdfc:	0a5b      	lsrs	r3, r3, #9
 800bdfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be02:	ee07 3a90 	vmov	s15, r3
 800be06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be12:	edd7 6a07 	vldr	s13, [r7, #28]
 800be16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be1e:	ee17 2a90 	vmov	r2, s15
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800be26:	4b1f      	ldr	r3, [pc, #124]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be2a:	0c1b      	lsrs	r3, r3, #16
 800be2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be30:	ee07 3a90 	vmov	s15, r3
 800be34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be40:	edd7 6a07 	vldr	s13, [r7, #28]
 800be44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be4c:	ee17 2a90 	vmov	r2, s15
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800be54:	4b13      	ldr	r3, [pc, #76]	@ (800bea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be58:	0e1b      	lsrs	r3, r3, #24
 800be5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be5e:	ee07 3a90 	vmov	s15, r3
 800be62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be7a:	ee17 2a90 	vmov	r2, s15
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800be82:	e008      	b.n	800be96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	609a      	str	r2, [r3, #8]
}
 800be96:	bf00      	nop
 800be98:	3724      	adds	r7, #36	@ 0x24
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	58024400 	.word	0x58024400
 800bea8:	03d09000 	.word	0x03d09000
 800beac:	46000000 	.word	0x46000000
 800beb0:	4c742400 	.word	0x4c742400
 800beb4:	4a742400 	.word	0x4a742400
 800beb8:	4bbebc20 	.word	0x4bbebc20

0800bebc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b089      	sub	sp, #36	@ 0x24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bec4:	4ba0      	ldr	r3, [pc, #640]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec8:	f003 0303 	and.w	r3, r3, #3
 800becc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bece:	4b9e      	ldr	r3, [pc, #632]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed2:	091b      	lsrs	r3, r3, #4
 800bed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bed8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800beda:	4b9b      	ldr	r3, [pc, #620]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bee4:	4b98      	ldr	r3, [pc, #608]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bee8:	08db      	lsrs	r3, r3, #3
 800beea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	fb02 f303 	mul.w	r3, r2, r3
 800bef4:	ee07 3a90 	vmov	s15, r3
 800bef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800befc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 8111 	beq.w	800c12a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	f000 8083 	beq.w	800c016 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	f200 80a1 	bhi.w	800c05a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d003      	beq.n	800bf26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d056      	beq.n	800bfd2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bf24:	e099      	b.n	800c05a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf26:	4b88      	ldr	r3, [pc, #544]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f003 0320 	and.w	r3, r3, #32
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d02d      	beq.n	800bf8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf32:	4b85      	ldr	r3, [pc, #532]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	08db      	lsrs	r3, r3, #3
 800bf38:	f003 0303 	and.w	r3, r3, #3
 800bf3c:	4a83      	ldr	r2, [pc, #524]	@ (800c14c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bf3e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	ee07 3a90 	vmov	s15, r3
 800bf4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	ee07 3a90 	vmov	s15, r3
 800bf54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf5c:	4b7a      	ldr	r3, [pc, #488]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf64:	ee07 3a90 	vmov	s15, r3
 800bf68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf70:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bf74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf8c:	e087      	b.n	800c09e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	ee07 3a90 	vmov	s15, r3
 800bf94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf98:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c154 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bf9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa0:	4b69      	ldr	r3, [pc, #420]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa8:	ee07 3a90 	vmov	s15, r3
 800bfac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfb4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfd0:	e065      	b.n	800c09e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	ee07 3a90 	vmov	s15, r3
 800bfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfdc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c158 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bfe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe4:	4b58      	ldr	r3, [pc, #352]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfec:	ee07 3a90 	vmov	s15, r3
 800bff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bff4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bff8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c004:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c014:	e043      	b.n	800c09e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	ee07 3a90 	vmov	s15, r3
 800c01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c020:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c15c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c028:	4b47      	ldr	r3, [pc, #284]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c02a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c030:	ee07 3a90 	vmov	s15, r3
 800c034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c038:	ed97 6a03 	vldr	s12, [r7, #12]
 800c03c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c048:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c04c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c050:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c054:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c058:	e021      	b.n	800c09e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	ee07 3a90 	vmov	s15, r3
 800c060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c064:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c154 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c06c:	4b36      	ldr	r3, [pc, #216]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c06e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c074:	ee07 3a90 	vmov	s15, r3
 800c078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c07c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c080:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c150 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c08c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c094:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c098:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c09c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c09e:	4b2a      	ldr	r3, [pc, #168]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a2:	0a5b      	lsrs	r3, r3, #9
 800c0a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0a8:	ee07 3a90 	vmov	s15, r3
 800c0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0c4:	ee17 2a90 	vmov	r2, s15
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c0cc:	4b1e      	ldr	r3, [pc, #120]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0d0:	0c1b      	lsrs	r3, r3, #16
 800c0d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0d6:	ee07 3a90 	vmov	s15, r3
 800c0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0f2:	ee17 2a90 	vmov	r2, s15
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c0fa:	4b13      	ldr	r3, [pc, #76]	@ (800c148 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0fe:	0e1b      	lsrs	r3, r3, #24
 800c100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c104:	ee07 3a90 	vmov	s15, r3
 800c108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c10c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c110:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c114:	edd7 6a07 	vldr	s13, [r7, #28]
 800c118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c11c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c120:	ee17 2a90 	vmov	r2, s15
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c128:	e008      	b.n	800c13c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	609a      	str	r2, [r3, #8]
}
 800c13c:	bf00      	nop
 800c13e:	3724      	adds	r7, #36	@ 0x24
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	58024400 	.word	0x58024400
 800c14c:	03d09000 	.word	0x03d09000
 800c150:	46000000 	.word	0x46000000
 800c154:	4c742400 	.word	0x4c742400
 800c158:	4a742400 	.word	0x4a742400
 800c15c:	4bbebc20 	.word	0x4bbebc20

0800c160 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c16e:	4b53      	ldr	r3, [pc, #332]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c172:	f003 0303 	and.w	r3, r3, #3
 800c176:	2b03      	cmp	r3, #3
 800c178:	d101      	bne.n	800c17e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e099      	b.n	800c2b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c17e:	4b4f      	ldr	r3, [pc, #316]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a4e      	ldr	r2, [pc, #312]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c184:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c18a:	f7f6 fd3f 	bl	8002c0c <HAL_GetTick>
 800c18e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c190:	e008      	b.n	800c1a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c192:	f7f6 fd3b 	bl	8002c0c <HAL_GetTick>
 800c196:	4602      	mov	r2, r0
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d901      	bls.n	800c1a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1a0:	2303      	movs	r3, #3
 800c1a2:	e086      	b.n	800c2b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1a4:	4b45      	ldr	r3, [pc, #276]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1f0      	bne.n	800c192 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c1b0:	4b42      	ldr	r3, [pc, #264]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	031b      	lsls	r3, r3, #12
 800c1be:	493f      	ldr	r1, [pc, #252]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	628b      	str	r3, [r1, #40]	@ 0x28
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	025b      	lsls	r3, r3, #9
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	431a      	orrs	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	041b      	lsls	r3, r3, #16
 800c1e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c1e6:	431a      	orrs	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	061b      	lsls	r3, r3, #24
 800c1f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c1f4:	4931      	ldr	r1, [pc, #196]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1fa:	4b30      	ldr	r3, [pc, #192]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	695b      	ldr	r3, [r3, #20]
 800c206:	492d      	ldr	r1, [pc, #180]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c208:	4313      	orrs	r3, r2
 800c20a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c20c:	4b2b      	ldr	r3, [pc, #172]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c210:	f023 0220 	bic.w	r2, r3, #32
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	699b      	ldr	r3, [r3, #24]
 800c218:	4928      	ldr	r1, [pc, #160]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c21a:	4313      	orrs	r3, r2
 800c21c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c21e:	4b27      	ldr	r3, [pc, #156]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c222:	4a26      	ldr	r2, [pc, #152]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c224:	f023 0310 	bic.w	r3, r3, #16
 800c228:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c22a:	4b24      	ldr	r3, [pc, #144]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c22c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c22e:	4b24      	ldr	r3, [pc, #144]	@ (800c2c0 <RCCEx_PLL2_Config+0x160>)
 800c230:	4013      	ands	r3, r2
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	69d2      	ldr	r2, [r2, #28]
 800c236:	00d2      	lsls	r2, r2, #3
 800c238:	4920      	ldr	r1, [pc, #128]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c23a:	4313      	orrs	r3, r2
 800c23c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c23e:	4b1f      	ldr	r3, [pc, #124]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c242:	4a1e      	ldr	r2, [pc, #120]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c244:	f043 0310 	orr.w	r3, r3, #16
 800c248:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d106      	bne.n	800c25e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c250:	4b1a      	ldr	r3, [pc, #104]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c254:	4a19      	ldr	r2, [pc, #100]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c256:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c25a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c25c:	e00f      	b.n	800c27e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d106      	bne.n	800c272 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c264:	4b15      	ldr	r3, [pc, #84]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c268:	4a14      	ldr	r2, [pc, #80]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c26a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c26e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c270:	e005      	b.n	800c27e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c272:	4b12      	ldr	r3, [pc, #72]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c276:	4a11      	ldr	r2, [pc, #68]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c278:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c27c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c27e:	4b0f      	ldr	r3, [pc, #60]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a0e      	ldr	r2, [pc, #56]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c284:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c28a:	f7f6 fcbf 	bl	8002c0c <HAL_GetTick>
 800c28e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c290:	e008      	b.n	800c2a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c292:	f7f6 fcbb 	bl	8002c0c <HAL_GetTick>
 800c296:	4602      	mov	r2, r0
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d901      	bls.n	800c2a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2a0:	2303      	movs	r3, #3
 800c2a2:	e006      	b.n	800c2b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2a4:	4b05      	ldr	r3, [pc, #20]	@ (800c2bc <RCCEx_PLL2_Config+0x15c>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d0f0      	beq.n	800c292 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	58024400 	.word	0x58024400
 800c2c0:	ffff0007 	.word	0xffff0007

0800c2c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2d2:	4b53      	ldr	r3, [pc, #332]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d6:	f003 0303 	and.w	r3, r3, #3
 800c2da:	2b03      	cmp	r3, #3
 800c2dc:	d101      	bne.n	800c2e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e099      	b.n	800c416 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c2e2:	4b4f      	ldr	r3, [pc, #316]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a4e      	ldr	r2, [pc, #312]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c2e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2ee:	f7f6 fc8d 	bl	8002c0c <HAL_GetTick>
 800c2f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2f4:	e008      	b.n	800c308 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c2f6:	f7f6 fc89 	bl	8002c0c <HAL_GetTick>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	2b02      	cmp	r3, #2
 800c302:	d901      	bls.n	800c308 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c304:	2303      	movs	r3, #3
 800c306:	e086      	b.n	800c416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c308:	4b45      	ldr	r3, [pc, #276]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d1f0      	bne.n	800c2f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c314:	4b42      	ldr	r3, [pc, #264]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c318:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	051b      	lsls	r3, r3, #20
 800c322:	493f      	ldr	r1, [pc, #252]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c324:	4313      	orrs	r3, r2
 800c326:	628b      	str	r3, [r1, #40]	@ 0x28
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	3b01      	subs	r3, #1
 800c32e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	3b01      	subs	r3, #1
 800c338:	025b      	lsls	r3, r3, #9
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	431a      	orrs	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	3b01      	subs	r3, #1
 800c344:	041b      	lsls	r3, r3, #16
 800c346:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c34a:	431a      	orrs	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	3b01      	subs	r3, #1
 800c352:	061b      	lsls	r3, r3, #24
 800c354:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c358:	4931      	ldr	r1, [pc, #196]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c35a:	4313      	orrs	r3, r2
 800c35c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c35e:	4b30      	ldr	r3, [pc, #192]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c362:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	492d      	ldr	r1, [pc, #180]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c36c:	4313      	orrs	r3, r2
 800c36e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c370:	4b2b      	ldr	r3, [pc, #172]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c374:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	4928      	ldr	r1, [pc, #160]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c37e:	4313      	orrs	r3, r2
 800c380:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c382:	4b27      	ldr	r3, [pc, #156]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c386:	4a26      	ldr	r2, [pc, #152]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c38c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c38e:	4b24      	ldr	r3, [pc, #144]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c392:	4b24      	ldr	r3, [pc, #144]	@ (800c424 <RCCEx_PLL3_Config+0x160>)
 800c394:	4013      	ands	r3, r2
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	69d2      	ldr	r2, [r2, #28]
 800c39a:	00d2      	lsls	r2, r2, #3
 800c39c:	4920      	ldr	r1, [pc, #128]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c3a2:	4b1f      	ldr	r3, [pc, #124]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a6:	4a1e      	ldr	r2, [pc, #120]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c3a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c3ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d106      	bne.n	800c3c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c3b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b8:	4a19      	ldr	r2, [pc, #100]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c3ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c3be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c3c0:	e00f      	b.n	800c3e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d106      	bne.n	800c3d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c3c8:	4b15      	ldr	r3, [pc, #84]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3cc:	4a14      	ldr	r2, [pc, #80]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c3ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c3d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c3d4:	e005      	b.n	800c3e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c3d6:	4b12      	ldr	r3, [pc, #72]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3da:	4a11      	ldr	r2, [pc, #68]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c3dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c3e2:	4b0f      	ldr	r3, [pc, #60]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a0e      	ldr	r2, [pc, #56]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c3e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3ee:	f7f6 fc0d 	bl	8002c0c <HAL_GetTick>
 800c3f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3f4:	e008      	b.n	800c408 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3f6:	f7f6 fc09 	bl	8002c0c <HAL_GetTick>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	1ad3      	subs	r3, r2, r3
 800c400:	2b02      	cmp	r3, #2
 800c402:	d901      	bls.n	800c408 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c404:	2303      	movs	r3, #3
 800c406:	e006      	b.n	800c416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c408:	4b05      	ldr	r3, [pc, #20]	@ (800c420 <RCCEx_PLL3_Config+0x15c>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c410:	2b00      	cmp	r3, #0
 800c412:	d0f0      	beq.n	800c3f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c414:	7bfb      	ldrb	r3, [r7, #15]
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	58024400 	.word	0x58024400
 800c424:	ffff0007 	.word	0xffff0007

0800c428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e049      	b.n	800c4ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c440:	b2db      	uxtb	r3, r3
 800c442:	2b00      	cmp	r3, #0
 800c444:	d106      	bne.n	800c454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f7f6 fa1e 	bl	8002890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2202      	movs	r2, #2
 800c458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3304      	adds	r3, #4
 800c464:	4619      	mov	r1, r3
 800c466:	4610      	mov	r0, r2
 800c468:	f000 f9c6 	bl	800c7f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
	...

0800c4d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d001      	beq.n	800c4f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e04c      	b.n	800c58a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2202      	movs	r2, #2
 800c4f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a26      	ldr	r2, [pc, #152]	@ (800c598 <HAL_TIM_Base_Start+0xc0>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d022      	beq.n	800c548 <HAL_TIM_Base_Start+0x70>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c50a:	d01d      	beq.n	800c548 <HAL_TIM_Base_Start+0x70>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a22      	ldr	r2, [pc, #136]	@ (800c59c <HAL_TIM_Base_Start+0xc4>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d018      	beq.n	800c548 <HAL_TIM_Base_Start+0x70>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a21      	ldr	r2, [pc, #132]	@ (800c5a0 <HAL_TIM_Base_Start+0xc8>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d013      	beq.n	800c548 <HAL_TIM_Base_Start+0x70>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a1f      	ldr	r2, [pc, #124]	@ (800c5a4 <HAL_TIM_Base_Start+0xcc>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d00e      	beq.n	800c548 <HAL_TIM_Base_Start+0x70>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4a1e      	ldr	r2, [pc, #120]	@ (800c5a8 <HAL_TIM_Base_Start+0xd0>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d009      	beq.n	800c548 <HAL_TIM_Base_Start+0x70>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4a1c      	ldr	r2, [pc, #112]	@ (800c5ac <HAL_TIM_Base_Start+0xd4>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d004      	beq.n	800c548 <HAL_TIM_Base_Start+0x70>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a1b      	ldr	r2, [pc, #108]	@ (800c5b0 <HAL_TIM_Base_Start+0xd8>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d115      	bne.n	800c574 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	689a      	ldr	r2, [r3, #8]
 800c54e:	4b19      	ldr	r3, [pc, #100]	@ (800c5b4 <HAL_TIM_Base_Start+0xdc>)
 800c550:	4013      	ands	r3, r2
 800c552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2b06      	cmp	r3, #6
 800c558:	d015      	beq.n	800c586 <HAL_TIM_Base_Start+0xae>
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c560:	d011      	beq.n	800c586 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f042 0201 	orr.w	r2, r2, #1
 800c570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c572:	e008      	b.n	800c586 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f042 0201 	orr.w	r2, r2, #1
 800c582:	601a      	str	r2, [r3, #0]
 800c584:	e000      	b.n	800c588 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c588:	2300      	movs	r3, #0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3714      	adds	r7, #20
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	40010000 	.word	0x40010000
 800c59c:	40000400 	.word	0x40000400
 800c5a0:	40000800 	.word	0x40000800
 800c5a4:	40000c00 	.word	0x40000c00
 800c5a8:	40010400 	.word	0x40010400
 800c5ac:	40001800 	.word	0x40001800
 800c5b0:	40014000 	.word	0x40014000
 800c5b4:	00010007 	.word	0x00010007

0800c5b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6a1a      	ldr	r2, [r3, #32]
 800c5c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10f      	bne.n	800c5f0 <HAL_TIM_Base_Stop+0x38>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	6a1a      	ldr	r2, [r3, #32]
 800c5d6:	f240 4344 	movw	r3, #1092	@ 0x444
 800c5da:	4013      	ands	r3, r2
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d107      	bne.n	800c5f0 <HAL_TIM_Base_Stop+0x38>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f022 0201 	bic.w	r2, r2, #1
 800c5ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	370c      	adds	r7, #12
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
	...

0800c608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c612:	2300      	movs	r3, #0
 800c614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d101      	bne.n	800c624 <HAL_TIM_ConfigClockSource+0x1c>
 800c620:	2302      	movs	r3, #2
 800c622:	e0dc      	b.n	800c7de <HAL_TIM_ConfigClockSource+0x1d6>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2202      	movs	r2, #2
 800c630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c63c:	68ba      	ldr	r2, [r7, #8]
 800c63e:	4b6a      	ldr	r3, [pc, #424]	@ (800c7e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c640:	4013      	ands	r3, r2
 800c642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c64a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a64      	ldr	r2, [pc, #400]	@ (800c7ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	f000 80a9 	beq.w	800c7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c660:	4a62      	ldr	r2, [pc, #392]	@ (800c7ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800c662:	4293      	cmp	r3, r2
 800c664:	f200 80ae 	bhi.w	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c668:	4a61      	ldr	r2, [pc, #388]	@ (800c7f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	f000 80a1 	beq.w	800c7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c670:	4a5f      	ldr	r2, [pc, #380]	@ (800c7f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c672:	4293      	cmp	r3, r2
 800c674:	f200 80a6 	bhi.w	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c678:	4a5e      	ldr	r2, [pc, #376]	@ (800c7f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	f000 8099 	beq.w	800c7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c680:	4a5c      	ldr	r2, [pc, #368]	@ (800c7f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c682:	4293      	cmp	r3, r2
 800c684:	f200 809e 	bhi.w	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c688:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c68c:	f000 8091 	beq.w	800c7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c690:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c694:	f200 8096 	bhi.w	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c698:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c69c:	f000 8089 	beq.w	800c7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c6a4:	f200 808e 	bhi.w	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c6ac:	d03e      	beq.n	800c72c <HAL_TIM_ConfigClockSource+0x124>
 800c6ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c6b2:	f200 8087 	bhi.w	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6ba:	f000 8086 	beq.w	800c7ca <HAL_TIM_ConfigClockSource+0x1c2>
 800c6be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6c2:	d87f      	bhi.n	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6c4:	2b70      	cmp	r3, #112	@ 0x70
 800c6c6:	d01a      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0xf6>
 800c6c8:	2b70      	cmp	r3, #112	@ 0x70
 800c6ca:	d87b      	bhi.n	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6cc:	2b60      	cmp	r3, #96	@ 0x60
 800c6ce:	d050      	beq.n	800c772 <HAL_TIM_ConfigClockSource+0x16a>
 800c6d0:	2b60      	cmp	r3, #96	@ 0x60
 800c6d2:	d877      	bhi.n	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6d4:	2b50      	cmp	r3, #80	@ 0x50
 800c6d6:	d03c      	beq.n	800c752 <HAL_TIM_ConfigClockSource+0x14a>
 800c6d8:	2b50      	cmp	r3, #80	@ 0x50
 800c6da:	d873      	bhi.n	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6dc:	2b40      	cmp	r3, #64	@ 0x40
 800c6de:	d058      	beq.n	800c792 <HAL_TIM_ConfigClockSource+0x18a>
 800c6e0:	2b40      	cmp	r3, #64	@ 0x40
 800c6e2:	d86f      	bhi.n	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6e4:	2b30      	cmp	r3, #48	@ 0x30
 800c6e6:	d064      	beq.n	800c7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6e8:	2b30      	cmp	r3, #48	@ 0x30
 800c6ea:	d86b      	bhi.n	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6ec:	2b20      	cmp	r3, #32
 800c6ee:	d060      	beq.n	800c7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6f0:	2b20      	cmp	r3, #32
 800c6f2:	d867      	bhi.n	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d05c      	beq.n	800c7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6f8:	2b10      	cmp	r3, #16
 800c6fa:	d05a      	beq.n	800c7b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6fc:	e062      	b.n	800c7c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c70e:	f000 f98b 	bl	800ca28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68ba      	ldr	r2, [r7, #8]
 800c728:	609a      	str	r2, [r3, #8]
      break;
 800c72a:	e04f      	b.n	800c7cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c73c:	f000 f974 	bl	800ca28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	689a      	ldr	r2, [r3, #8]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c74e:	609a      	str	r2, [r3, #8]
      break;
 800c750:	e03c      	b.n	800c7cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c75e:	461a      	mov	r2, r3
 800c760:	f000 f8e4 	bl	800c92c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2150      	movs	r1, #80	@ 0x50
 800c76a:	4618      	mov	r0, r3
 800c76c:	f000 f93e 	bl	800c9ec <TIM_ITRx_SetConfig>
      break;
 800c770:	e02c      	b.n	800c7cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c77e:	461a      	mov	r2, r3
 800c780:	f000 f903 	bl	800c98a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2160      	movs	r1, #96	@ 0x60
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 f92e 	bl	800c9ec <TIM_ITRx_SetConfig>
      break;
 800c790:	e01c      	b.n	800c7cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c79e:	461a      	mov	r2, r3
 800c7a0:	f000 f8c4 	bl	800c92c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2140      	movs	r1, #64	@ 0x40
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 f91e 	bl	800c9ec <TIM_ITRx_SetConfig>
      break;
 800c7b0:	e00c      	b.n	800c7cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4610      	mov	r0, r2
 800c7be:	f000 f915 	bl	800c9ec <TIM_ITRx_SetConfig>
      break;
 800c7c2:	e003      	b.n	800c7cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c7c8:	e000      	b.n	800c7cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c7ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	ffceff88 	.word	0xffceff88
 800c7ec:	00100040 	.word	0x00100040
 800c7f0:	00100030 	.word	0x00100030
 800c7f4:	00100020 	.word	0x00100020

0800c7f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b085      	sub	sp, #20
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a40      	ldr	r2, [pc, #256]	@ (800c90c <TIM_Base_SetConfig+0x114>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d013      	beq.n	800c838 <TIM_Base_SetConfig+0x40>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c816:	d00f      	beq.n	800c838 <TIM_Base_SetConfig+0x40>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4a3d      	ldr	r2, [pc, #244]	@ (800c910 <TIM_Base_SetConfig+0x118>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d00b      	beq.n	800c838 <TIM_Base_SetConfig+0x40>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4a3c      	ldr	r2, [pc, #240]	@ (800c914 <TIM_Base_SetConfig+0x11c>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d007      	beq.n	800c838 <TIM_Base_SetConfig+0x40>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a3b      	ldr	r2, [pc, #236]	@ (800c918 <TIM_Base_SetConfig+0x120>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d003      	beq.n	800c838 <TIM_Base_SetConfig+0x40>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4a3a      	ldr	r2, [pc, #232]	@ (800c91c <TIM_Base_SetConfig+0x124>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d108      	bne.n	800c84a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c83e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	4313      	orrs	r3, r2
 800c848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4a2f      	ldr	r2, [pc, #188]	@ (800c90c <TIM_Base_SetConfig+0x114>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d01f      	beq.n	800c892 <TIM_Base_SetConfig+0x9a>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c858:	d01b      	beq.n	800c892 <TIM_Base_SetConfig+0x9a>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	4a2c      	ldr	r2, [pc, #176]	@ (800c910 <TIM_Base_SetConfig+0x118>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d017      	beq.n	800c892 <TIM_Base_SetConfig+0x9a>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a2b      	ldr	r2, [pc, #172]	@ (800c914 <TIM_Base_SetConfig+0x11c>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d013      	beq.n	800c892 <TIM_Base_SetConfig+0x9a>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a2a      	ldr	r2, [pc, #168]	@ (800c918 <TIM_Base_SetConfig+0x120>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d00f      	beq.n	800c892 <TIM_Base_SetConfig+0x9a>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a29      	ldr	r2, [pc, #164]	@ (800c91c <TIM_Base_SetConfig+0x124>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d00b      	beq.n	800c892 <TIM_Base_SetConfig+0x9a>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4a28      	ldr	r2, [pc, #160]	@ (800c920 <TIM_Base_SetConfig+0x128>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d007      	beq.n	800c892 <TIM_Base_SetConfig+0x9a>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a27      	ldr	r2, [pc, #156]	@ (800c924 <TIM_Base_SetConfig+0x12c>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d003      	beq.n	800c892 <TIM_Base_SetConfig+0x9a>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a26      	ldr	r2, [pc, #152]	@ (800c928 <TIM_Base_SetConfig+0x130>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d108      	bne.n	800c8a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	695b      	ldr	r3, [r3, #20]
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	689a      	ldr	r2, [r3, #8]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a10      	ldr	r2, [pc, #64]	@ (800c90c <TIM_Base_SetConfig+0x114>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d00f      	beq.n	800c8f0 <TIM_Base_SetConfig+0xf8>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a12      	ldr	r2, [pc, #72]	@ (800c91c <TIM_Base_SetConfig+0x124>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d00b      	beq.n	800c8f0 <TIM_Base_SetConfig+0xf8>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a11      	ldr	r2, [pc, #68]	@ (800c920 <TIM_Base_SetConfig+0x128>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d007      	beq.n	800c8f0 <TIM_Base_SetConfig+0xf8>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a10      	ldr	r2, [pc, #64]	@ (800c924 <TIM_Base_SetConfig+0x12c>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d003      	beq.n	800c8f0 <TIM_Base_SetConfig+0xf8>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a0f      	ldr	r2, [pc, #60]	@ (800c928 <TIM_Base_SetConfig+0x130>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d103      	bne.n	800c8f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	691a      	ldr	r2, [r3, #16]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	615a      	str	r2, [r3, #20]
}
 800c8fe:	bf00      	nop
 800c900:	3714      	adds	r7, #20
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop
 800c90c:	40010000 	.word	0x40010000
 800c910:	40000400 	.word	0x40000400
 800c914:	40000800 	.word	0x40000800
 800c918:	40000c00 	.word	0x40000c00
 800c91c:	40010400 	.word	0x40010400
 800c920:	40014000 	.word	0x40014000
 800c924:	40014400 	.word	0x40014400
 800c928:	40014800 	.word	0x40014800

0800c92c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b087      	sub	sp, #28
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6a1b      	ldr	r3, [r3, #32]
 800c93c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	6a1b      	ldr	r3, [r3, #32]
 800c942:	f023 0201 	bic.w	r2, r3, #1
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	699b      	ldr	r3, [r3, #24]
 800c94e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	011b      	lsls	r3, r3, #4
 800c95c:	693a      	ldr	r2, [r7, #16]
 800c95e:	4313      	orrs	r3, r2
 800c960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	f023 030a 	bic.w	r3, r3, #10
 800c968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	4313      	orrs	r3, r2
 800c970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	697a      	ldr	r2, [r7, #20]
 800c97c:	621a      	str	r2, [r3, #32]
}
 800c97e:	bf00      	nop
 800c980:	371c      	adds	r7, #28
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b087      	sub	sp, #28
 800c98e:	af00      	add	r7, sp, #0
 800c990:	60f8      	str	r0, [r7, #12]
 800c992:	60b9      	str	r1, [r7, #8]
 800c994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	f023 0210 	bic.w	r2, r3, #16
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	699b      	ldr	r3, [r3, #24]
 800c9a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6a1b      	ldr	r3, [r3, #32]
 800c9ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c9b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	031b      	lsls	r3, r3, #12
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c9c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	011b      	lsls	r3, r3, #4
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	621a      	str	r2, [r3, #32]
}
 800c9de:	bf00      	nop
 800c9e0:	371c      	adds	r7, #28
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr
	...

0800c9ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	4b09      	ldr	r3, [pc, #36]	@ (800ca24 <TIM_ITRx_SetConfig+0x38>)
 800ca00:	4013      	ands	r3, r2
 800ca02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca04:	683a      	ldr	r2, [r7, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	f043 0307 	orr.w	r3, r3, #7
 800ca0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	609a      	str	r2, [r3, #8]
}
 800ca16:	bf00      	nop
 800ca18:	3714      	adds	r7, #20
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	ffcfff8f 	.word	0xffcfff8f

0800ca28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b087      	sub	sp, #28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
 800ca34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	021a      	lsls	r2, r3, #8
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	431a      	orrs	r2, r3
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	697a      	ldr	r2, [r7, #20]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	697a      	ldr	r2, [r7, #20]
 800ca5a:	609a      	str	r2, [r3, #8]
}
 800ca5c:	bf00      	nop
 800ca5e:	371c      	adds	r7, #28
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d101      	bne.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	e06d      	b.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2202      	movs	r2, #2
 800ca8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a30      	ldr	r2, [pc, #192]	@ (800cb68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d004      	beq.n	800cab4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a2f      	ldr	r2, [pc, #188]	@ (800cb6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d108      	bne.n	800cac6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800caba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	4313      	orrs	r3, r2
 800cac4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cacc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a20      	ldr	r2, [pc, #128]	@ (800cb68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d022      	beq.n	800cb30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caf2:	d01d      	beq.n	800cb30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d018      	beq.n	800cb30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4a1c      	ldr	r2, [pc, #112]	@ (800cb74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d013      	beq.n	800cb30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a1a      	ldr	r2, [pc, #104]	@ (800cb78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d00e      	beq.n	800cb30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a15      	ldr	r2, [pc, #84]	@ (800cb6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d009      	beq.n	800cb30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a16      	ldr	r2, [pc, #88]	@ (800cb7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d004      	beq.n	800cb30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a15      	ldr	r2, [pc, #84]	@ (800cb80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d10c      	bne.n	800cb4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3714      	adds	r7, #20
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr
 800cb68:	40010000 	.word	0x40010000
 800cb6c:	40010400 	.word	0x40010400
 800cb70:	40000400 	.word	0x40000400
 800cb74:	40000800 	.word	0x40000800
 800cb78:	40000c00 	.word	0x40000c00
 800cb7c:	40001800 	.word	0x40001800
 800cb80:	40014000 	.word	0x40014000

0800cb84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d101      	bne.n	800cb96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e042      	b.n	800cc1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d106      	bne.n	800cbae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7f5 ff0d 	bl	80029c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2224      	movs	r2, #36	@ 0x24
 800cbb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f022 0201 	bic.w	r2, r2, #1
 800cbc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fc94 	bl	800d4f4 <UART_SetConfig>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d101      	bne.n	800cbd6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e022      	b.n	800cc1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d002      	beq.n	800cbe4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f001 f9f0 	bl	800dfc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	685a      	ldr	r2, [r3, #4]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cbf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	689a      	ldr	r2, [r3, #8]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cc02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f042 0201 	orr.w	r2, r2, #1
 800cc12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f001 fa77 	bl	800e108 <UART_CheckIdleState>
 800cc1a:	4603      	mov	r3, r0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b08a      	sub	sp, #40	@ 0x28
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	4613      	mov	r3, r2
 800cc32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc3a:	2b20      	cmp	r3, #32
 800cc3c:	d17b      	bne.n	800cd36 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d002      	beq.n	800cc4a <HAL_UART_Transmit+0x26>
 800cc44:	88fb      	ldrh	r3, [r7, #6]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d101      	bne.n	800cc4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e074      	b.n	800cd38 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2221      	movs	r2, #33	@ 0x21
 800cc5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc5e:	f7f5 ffd5 	bl	8002c0c <HAL_GetTick>
 800cc62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	88fa      	ldrh	r2, [r7, #6]
 800cc68:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	88fa      	ldrh	r2, [r7, #6]
 800cc70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc7c:	d108      	bne.n	800cc90 <HAL_UART_Transmit+0x6c>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d104      	bne.n	800cc90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	61bb      	str	r3, [r7, #24]
 800cc8e:	e003      	b.n	800cc98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cc98:	e030      	b.n	800ccfc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2200      	movs	r2, #0
 800cca2:	2180      	movs	r1, #128	@ 0x80
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f001 fad9 	bl	800e25c <UART_WaitOnFlagUntilTimeout>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d005      	beq.n	800ccbc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2220      	movs	r2, #32
 800ccb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ccb8:	2303      	movs	r3, #3
 800ccba:	e03d      	b.n	800cd38 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10b      	bne.n	800ccda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	881b      	ldrh	r3, [r3, #0]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccd0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	3302      	adds	r3, #2
 800ccd6:	61bb      	str	r3, [r7, #24]
 800ccd8:	e007      	b.n	800ccea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	781a      	ldrb	r2, [r3, #0]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	3301      	adds	r3, #1
 800cce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1c8      	bne.n	800cc9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	2140      	movs	r1, #64	@ 0x40
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f001 faa2 	bl	800e25c <UART_WaitOnFlagUntilTimeout>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d005      	beq.n	800cd2a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2220      	movs	r2, #32
 800cd22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cd26:	2303      	movs	r3, #3
 800cd28:	e006      	b.n	800cd38 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2220      	movs	r2, #32
 800cd2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	e000      	b.n	800cd38 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cd36:	2302      	movs	r3, #2
  }
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3720      	adds	r7, #32
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b0ba      	sub	sp, #232	@ 0xe8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	69db      	ldr	r3, [r3, #28]
 800cd4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cd6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cd6e:	4013      	ands	r3, r2
 800cd70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cd74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d11b      	bne.n	800cdb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd80:	f003 0320 	and.w	r3, r3, #32
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d015      	beq.n	800cdb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd8c:	f003 0320 	and.w	r3, r3, #32
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d105      	bne.n	800cda0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d009      	beq.n	800cdb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f000 8377 	beq.w	800d498 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	4798      	blx	r3
      }
      return;
 800cdb2:	e371      	b.n	800d498 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cdb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f000 8123 	beq.w	800d004 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cdbe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cdc2:	4b8d      	ldr	r3, [pc, #564]	@ (800cff8 <HAL_UART_IRQHandler+0x2b8>)
 800cdc4:	4013      	ands	r3, r2
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d106      	bne.n	800cdd8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cdca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cdce:	4b8b      	ldr	r3, [pc, #556]	@ (800cffc <HAL_UART_IRQHandler+0x2bc>)
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f000 8116 	beq.w	800d004 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cdd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cddc:	f003 0301 	and.w	r3, r3, #1
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d011      	beq.n	800ce08 <HAL_UART_IRQHandler+0xc8>
 800cde4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cde8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00b      	beq.n	800ce08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdfe:	f043 0201 	orr.w	r2, r3, #1
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce0c:	f003 0302 	and.w	r3, r3, #2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d011      	beq.n	800ce38 <HAL_UART_IRQHandler+0xf8>
 800ce14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce18:	f003 0301 	and.w	r3, r3, #1
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00b      	beq.n	800ce38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2202      	movs	r2, #2
 800ce26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce2e:	f043 0204 	orr.w	r2, r3, #4
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce3c:	f003 0304 	and.w	r3, r3, #4
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d011      	beq.n	800ce68 <HAL_UART_IRQHandler+0x128>
 800ce44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00b      	beq.n	800ce68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2204      	movs	r2, #4
 800ce56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce5e:	f043 0202 	orr.w	r2, r3, #2
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce6c:	f003 0308 	and.w	r3, r3, #8
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d017      	beq.n	800cea4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce78:	f003 0320 	and.w	r3, r3, #32
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d105      	bne.n	800ce8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ce80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ce84:	4b5c      	ldr	r3, [pc, #368]	@ (800cff8 <HAL_UART_IRQHandler+0x2b8>)
 800ce86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00b      	beq.n	800cea4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2208      	movs	r2, #8
 800ce92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce9a:	f043 0208 	orr.w	r2, r3, #8
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d012      	beq.n	800ced6 <HAL_UART_IRQHandler+0x196>
 800ceb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ceb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00c      	beq.n	800ced6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cecc:	f043 0220 	orr.w	r2, r3, #32
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f000 82dd 	beq.w	800d49c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cee6:	f003 0320 	and.w	r3, r3, #32
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d013      	beq.n	800cf16 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ceee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cef2:	f003 0320 	and.w	r3, r3, #32
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d105      	bne.n	800cf06 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cefa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cefe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d007      	beq.n	800cf16 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf2a:	2b40      	cmp	r3, #64	@ 0x40
 800cf2c:	d005      	beq.n	800cf3a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d054      	beq.n	800cfe4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f001 f9f6 	bl	800e32c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf4a:	2b40      	cmp	r3, #64	@ 0x40
 800cf4c:	d146      	bne.n	800cfdc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	3308      	adds	r3, #8
 800cf54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf5c:	e853 3f00 	ldrex	r3, [r3]
 800cf60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cf64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cf68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	3308      	adds	r3, #8
 800cf76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cf7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cf7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cf86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cf8a:	e841 2300 	strex	r3, r2, [r1]
 800cf8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cf92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1d9      	bne.n	800cf4e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d017      	beq.n	800cfd4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfaa:	4a15      	ldr	r2, [pc, #84]	@ (800d000 <HAL_UART_IRQHandler+0x2c0>)
 800cfac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7f9 fbc3 	bl	8006740 <HAL_DMA_Abort_IT>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d019      	beq.n	800cff4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cfce:	4610      	mov	r0, r2
 800cfd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfd2:	e00f      	b.n	800cff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 fa77 	bl	800d4c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfda:	e00b      	b.n	800cff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 fa73 	bl	800d4c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfe2:	e007      	b.n	800cff4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 fa6f 	bl	800d4c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cff2:	e253      	b.n	800d49c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cff4:	bf00      	nop
    return;
 800cff6:	e251      	b.n	800d49c <HAL_UART_IRQHandler+0x75c>
 800cff8:	10000001 	.word	0x10000001
 800cffc:	04000120 	.word	0x04000120
 800d000:	0800e3f9 	.word	0x0800e3f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d008:	2b01      	cmp	r3, #1
 800d00a:	f040 81e7 	bne.w	800d3dc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d012:	f003 0310 	and.w	r3, r3, #16
 800d016:	2b00      	cmp	r3, #0
 800d018:	f000 81e0 	beq.w	800d3dc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d020:	f003 0310 	and.w	r3, r3, #16
 800d024:	2b00      	cmp	r3, #0
 800d026:	f000 81d9 	beq.w	800d3dc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2210      	movs	r2, #16
 800d030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d03c:	2b40      	cmp	r3, #64	@ 0x40
 800d03e:	f040 8151 	bne.w	800d2e4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4a96      	ldr	r2, [pc, #600]	@ (800d2a4 <HAL_UART_IRQHandler+0x564>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d068      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a93      	ldr	r2, [pc, #588]	@ (800d2a8 <HAL_UART_IRQHandler+0x568>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d061      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	4a91      	ldr	r2, [pc, #580]	@ (800d2ac <HAL_UART_IRQHandler+0x56c>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d05a      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a8e      	ldr	r2, [pc, #568]	@ (800d2b0 <HAL_UART_IRQHandler+0x570>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d053      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a8c      	ldr	r2, [pc, #560]	@ (800d2b4 <HAL_UART_IRQHandler+0x574>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d04c      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a89      	ldr	r2, [pc, #548]	@ (800d2b8 <HAL_UART_IRQHandler+0x578>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d045      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4a87      	ldr	r2, [pc, #540]	@ (800d2bc <HAL_UART_IRQHandler+0x57c>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d03e      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a84      	ldr	r2, [pc, #528]	@ (800d2c0 <HAL_UART_IRQHandler+0x580>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d037      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a82      	ldr	r2, [pc, #520]	@ (800d2c4 <HAL_UART_IRQHandler+0x584>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d030      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a7f      	ldr	r2, [pc, #508]	@ (800d2c8 <HAL_UART_IRQHandler+0x588>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d029      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a7d      	ldr	r2, [pc, #500]	@ (800d2cc <HAL_UART_IRQHandler+0x58c>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d022      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a7a      	ldr	r2, [pc, #488]	@ (800d2d0 <HAL_UART_IRQHandler+0x590>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d01b      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	4a78      	ldr	r2, [pc, #480]	@ (800d2d4 <HAL_UART_IRQHandler+0x594>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d014      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a75      	ldr	r2, [pc, #468]	@ (800d2d8 <HAL_UART_IRQHandler+0x598>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d00d      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4a73      	ldr	r2, [pc, #460]	@ (800d2dc <HAL_UART_IRQHandler+0x59c>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d006      	beq.n	800d122 <HAL_UART_IRQHandler+0x3e2>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a70      	ldr	r2, [pc, #448]	@ (800d2e0 <HAL_UART_IRQHandler+0x5a0>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d106      	bne.n	800d130 <HAL_UART_IRQHandler+0x3f0>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	e005      	b.n	800d13c <HAL_UART_IRQHandler+0x3fc>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d140:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d144:	2b00      	cmp	r3, #0
 800d146:	f000 81ab 	beq.w	800d4a0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d150:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d154:	429a      	cmp	r2, r3
 800d156:	f080 81a3 	bcs.w	800d4a0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d160:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d16a:	69db      	ldr	r3, [r3, #28]
 800d16c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d170:	f000 8087 	beq.w	800d282 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d180:	e853 3f00 	ldrex	r3, [r3]
 800d184:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d188:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d18c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	461a      	mov	r2, r3
 800d19a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d19e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d1a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d1aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d1ae:	e841 2300 	strex	r3, r2, [r1]
 800d1b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d1b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1da      	bne.n	800d174 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d1c8:	e853 3f00 	ldrex	r3, [r3]
 800d1cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d1ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d1d0:	f023 0301 	bic.w	r3, r3, #1
 800d1d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3308      	adds	r3, #8
 800d1de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d1e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d1e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d1ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d1ee:	e841 2300 	strex	r3, r2, [r1]
 800d1f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d1f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1e1      	bne.n	800d1be <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	3308      	adds	r3, #8
 800d200:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d202:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d204:	e853 3f00 	ldrex	r3, [r3]
 800d208:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d20a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d20c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	3308      	adds	r3, #8
 800d21a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d21e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d220:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d222:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d224:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d226:	e841 2300 	strex	r3, r2, [r1]
 800d22a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d22c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1e3      	bne.n	800d1fa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2220      	movs	r2, #32
 800d236:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d248:	e853 3f00 	ldrex	r3, [r3]
 800d24c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d24e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d250:	f023 0310 	bic.w	r3, r3, #16
 800d254:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	461a      	mov	r2, r3
 800d25e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d262:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d264:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d266:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d268:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d26a:	e841 2300 	strex	r3, r2, [r1]
 800d26e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1e4      	bne.n	800d240 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7f8 ff41 	bl	8006104 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2202      	movs	r2, #2
 800d286:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d294:	b29b      	uxth	r3, r3
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	b29b      	uxth	r3, r3
 800d29a:	4619      	mov	r1, r3
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f91d 	bl	800d4dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d2a2:	e0fd      	b.n	800d4a0 <HAL_UART_IRQHandler+0x760>
 800d2a4:	40020010 	.word	0x40020010
 800d2a8:	40020028 	.word	0x40020028
 800d2ac:	40020040 	.word	0x40020040
 800d2b0:	40020058 	.word	0x40020058
 800d2b4:	40020070 	.word	0x40020070
 800d2b8:	40020088 	.word	0x40020088
 800d2bc:	400200a0 	.word	0x400200a0
 800d2c0:	400200b8 	.word	0x400200b8
 800d2c4:	40020410 	.word	0x40020410
 800d2c8:	40020428 	.word	0x40020428
 800d2cc:	40020440 	.word	0x40020440
 800d2d0:	40020458 	.word	0x40020458
 800d2d4:	40020470 	.word	0x40020470
 800d2d8:	40020488 	.word	0x40020488
 800d2dc:	400204a0 	.word	0x400204a0
 800d2e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 80cf 	beq.w	800d4a4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d306:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 80ca 	beq.w	800d4a4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d318:	e853 3f00 	ldrex	r3, [r3]
 800d31c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d324:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	461a      	mov	r2, r3
 800d32e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d332:	647b      	str	r3, [r7, #68]	@ 0x44
 800d334:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d336:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d338:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d33a:	e841 2300 	strex	r3, r2, [r1]
 800d33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1e4      	bne.n	800d310 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	3308      	adds	r3, #8
 800d34c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d350:	e853 3f00 	ldrex	r3, [r3]
 800d354:	623b      	str	r3, [r7, #32]
   return(result);
 800d356:	6a3a      	ldr	r2, [r7, #32]
 800d358:	4b55      	ldr	r3, [pc, #340]	@ (800d4b0 <HAL_UART_IRQHandler+0x770>)
 800d35a:	4013      	ands	r3, r2
 800d35c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3308      	adds	r3, #8
 800d366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d36a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d372:	e841 2300 	strex	r3, r2, [r1]
 800d376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1e3      	bne.n	800d346 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2220      	movs	r2, #32
 800d382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	e853 3f00 	ldrex	r3, [r3]
 800d39e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f023 0310 	bic.w	r3, r3, #16
 800d3a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d3b4:	61fb      	str	r3, [r7, #28]
 800d3b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b8:	69b9      	ldr	r1, [r7, #24]
 800d3ba:	69fa      	ldr	r2, [r7, #28]
 800d3bc:	e841 2300 	strex	r3, r2, [r1]
 800d3c0:	617b      	str	r3, [r7, #20]
   return(result);
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1e4      	bne.n	800d392 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2202      	movs	r2, #2
 800d3cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d3ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f000 f881 	bl	800d4dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3da:	e063      	b.n	800d4a4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00e      	beq.n	800d406 <HAL_UART_IRQHandler+0x6c6>
 800d3e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d008      	beq.n	800d406 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d3fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f001 f83b 	bl	800e47a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d404:	e051      	b.n	800d4aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d40a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d014      	beq.n	800d43c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d105      	bne.n	800d42a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d41e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d422:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d426:	2b00      	cmp	r3, #0
 800d428:	d008      	beq.n	800d43c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d03a      	beq.n	800d4a8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	4798      	blx	r3
    }
    return;
 800d43a:	e035      	b.n	800d4a8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d444:	2b00      	cmp	r3, #0
 800d446:	d009      	beq.n	800d45c <HAL_UART_IRQHandler+0x71c>
 800d448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d44c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d450:	2b00      	cmp	r3, #0
 800d452:	d003      	beq.n	800d45c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 ffe5 	bl	800e424 <UART_EndTransmit_IT>
    return;
 800d45a:	e026      	b.n	800d4aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d460:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d464:	2b00      	cmp	r3, #0
 800d466:	d009      	beq.n	800d47c <HAL_UART_IRQHandler+0x73c>
 800d468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d46c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d470:	2b00      	cmp	r3, #0
 800d472:	d003      	beq.n	800d47c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f001 f814 	bl	800e4a2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d47a:	e016      	b.n	800d4aa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d480:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d484:	2b00      	cmp	r3, #0
 800d486:	d010      	beq.n	800d4aa <HAL_UART_IRQHandler+0x76a>
 800d488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	da0c      	bge.n	800d4aa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 fffc 	bl	800e48e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d496:	e008      	b.n	800d4aa <HAL_UART_IRQHandler+0x76a>
      return;
 800d498:	bf00      	nop
 800d49a:	e006      	b.n	800d4aa <HAL_UART_IRQHandler+0x76a>
    return;
 800d49c:	bf00      	nop
 800d49e:	e004      	b.n	800d4aa <HAL_UART_IRQHandler+0x76a>
      return;
 800d4a0:	bf00      	nop
 800d4a2:	e002      	b.n	800d4aa <HAL_UART_IRQHandler+0x76a>
      return;
 800d4a4:	bf00      	nop
 800d4a6:	e000      	b.n	800d4aa <HAL_UART_IRQHandler+0x76a>
    return;
 800d4a8:	bf00      	nop
  }
}
 800d4aa:	37e8      	adds	r7, #232	@ 0xe8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	effffffe 	.word	0xeffffffe

0800d4b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d4e8:	bf00      	nop
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4f8:	b092      	sub	sp, #72	@ 0x48
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d4fe:	2300      	movs	r3, #0
 800d500:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	689a      	ldr	r2, [r3, #8]
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	431a      	orrs	r2, r3
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	431a      	orrs	r2, r3
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	69db      	ldr	r3, [r3, #28]
 800d518:	4313      	orrs	r3, r2
 800d51a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	4bbe      	ldr	r3, [pc, #760]	@ (800d81c <UART_SetConfig+0x328>)
 800d524:	4013      	ands	r3, r2
 800d526:	697a      	ldr	r2, [r7, #20]
 800d528:	6812      	ldr	r2, [r2, #0]
 800d52a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d52c:	430b      	orrs	r3, r1
 800d52e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	68da      	ldr	r2, [r3, #12]
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	430a      	orrs	r2, r1
 800d544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	699b      	ldr	r3, [r3, #24]
 800d54a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4ab3      	ldr	r2, [pc, #716]	@ (800d820 <UART_SetConfig+0x32c>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d004      	beq.n	800d560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	6a1b      	ldr	r3, [r3, #32]
 800d55a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d55c:	4313      	orrs	r3, r2
 800d55e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	689a      	ldr	r2, [r3, #8]
 800d566:	4baf      	ldr	r3, [pc, #700]	@ (800d824 <UART_SetConfig+0x330>)
 800d568:	4013      	ands	r3, r2
 800d56a:	697a      	ldr	r2, [r7, #20]
 800d56c:	6812      	ldr	r2, [r2, #0]
 800d56e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d570:	430b      	orrs	r3, r1
 800d572:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d57a:	f023 010f 	bic.w	r1, r3, #15
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	430a      	orrs	r2, r1
 800d588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4aa6      	ldr	r2, [pc, #664]	@ (800d828 <UART_SetConfig+0x334>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d177      	bne.n	800d684 <UART_SetConfig+0x190>
 800d594:	4ba5      	ldr	r3, [pc, #660]	@ (800d82c <UART_SetConfig+0x338>)
 800d596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d598:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d59c:	2b28      	cmp	r3, #40	@ 0x28
 800d59e:	d86d      	bhi.n	800d67c <UART_SetConfig+0x188>
 800d5a0:	a201      	add	r2, pc, #4	@ (adr r2, 800d5a8 <UART_SetConfig+0xb4>)
 800d5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a6:	bf00      	nop
 800d5a8:	0800d64d 	.word	0x0800d64d
 800d5ac:	0800d67d 	.word	0x0800d67d
 800d5b0:	0800d67d 	.word	0x0800d67d
 800d5b4:	0800d67d 	.word	0x0800d67d
 800d5b8:	0800d67d 	.word	0x0800d67d
 800d5bc:	0800d67d 	.word	0x0800d67d
 800d5c0:	0800d67d 	.word	0x0800d67d
 800d5c4:	0800d67d 	.word	0x0800d67d
 800d5c8:	0800d655 	.word	0x0800d655
 800d5cc:	0800d67d 	.word	0x0800d67d
 800d5d0:	0800d67d 	.word	0x0800d67d
 800d5d4:	0800d67d 	.word	0x0800d67d
 800d5d8:	0800d67d 	.word	0x0800d67d
 800d5dc:	0800d67d 	.word	0x0800d67d
 800d5e0:	0800d67d 	.word	0x0800d67d
 800d5e4:	0800d67d 	.word	0x0800d67d
 800d5e8:	0800d65d 	.word	0x0800d65d
 800d5ec:	0800d67d 	.word	0x0800d67d
 800d5f0:	0800d67d 	.word	0x0800d67d
 800d5f4:	0800d67d 	.word	0x0800d67d
 800d5f8:	0800d67d 	.word	0x0800d67d
 800d5fc:	0800d67d 	.word	0x0800d67d
 800d600:	0800d67d 	.word	0x0800d67d
 800d604:	0800d67d 	.word	0x0800d67d
 800d608:	0800d665 	.word	0x0800d665
 800d60c:	0800d67d 	.word	0x0800d67d
 800d610:	0800d67d 	.word	0x0800d67d
 800d614:	0800d67d 	.word	0x0800d67d
 800d618:	0800d67d 	.word	0x0800d67d
 800d61c:	0800d67d 	.word	0x0800d67d
 800d620:	0800d67d 	.word	0x0800d67d
 800d624:	0800d67d 	.word	0x0800d67d
 800d628:	0800d66d 	.word	0x0800d66d
 800d62c:	0800d67d 	.word	0x0800d67d
 800d630:	0800d67d 	.word	0x0800d67d
 800d634:	0800d67d 	.word	0x0800d67d
 800d638:	0800d67d 	.word	0x0800d67d
 800d63c:	0800d67d 	.word	0x0800d67d
 800d640:	0800d67d 	.word	0x0800d67d
 800d644:	0800d67d 	.word	0x0800d67d
 800d648:	0800d675 	.word	0x0800d675
 800d64c:	2301      	movs	r3, #1
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d652:	e222      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d654:	2304      	movs	r3, #4
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d65a:	e21e      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d65c:	2308      	movs	r3, #8
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d662:	e21a      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d664:	2310      	movs	r3, #16
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d66a:	e216      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d66c:	2320      	movs	r3, #32
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d672:	e212      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d674:	2340      	movs	r3, #64	@ 0x40
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67a:	e20e      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d67c:	2380      	movs	r3, #128	@ 0x80
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d682:	e20a      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a69      	ldr	r2, [pc, #420]	@ (800d830 <UART_SetConfig+0x33c>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d130      	bne.n	800d6f0 <UART_SetConfig+0x1fc>
 800d68e:	4b67      	ldr	r3, [pc, #412]	@ (800d82c <UART_SetConfig+0x338>)
 800d690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d692:	f003 0307 	and.w	r3, r3, #7
 800d696:	2b05      	cmp	r3, #5
 800d698:	d826      	bhi.n	800d6e8 <UART_SetConfig+0x1f4>
 800d69a:	a201      	add	r2, pc, #4	@ (adr r2, 800d6a0 <UART_SetConfig+0x1ac>)
 800d69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a0:	0800d6b9 	.word	0x0800d6b9
 800d6a4:	0800d6c1 	.word	0x0800d6c1
 800d6a8:	0800d6c9 	.word	0x0800d6c9
 800d6ac:	0800d6d1 	.word	0x0800d6d1
 800d6b0:	0800d6d9 	.word	0x0800d6d9
 800d6b4:	0800d6e1 	.word	0x0800d6e1
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6be:	e1ec      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d6c0:	2304      	movs	r3, #4
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6c6:	e1e8      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d6c8:	2308      	movs	r3, #8
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ce:	e1e4      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d6d0:	2310      	movs	r3, #16
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6d6:	e1e0      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d6d8:	2320      	movs	r3, #32
 800d6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6de:	e1dc      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d6e0:	2340      	movs	r3, #64	@ 0x40
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6e6:	e1d8      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d6e8:	2380      	movs	r3, #128	@ 0x80
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ee:	e1d4      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a4f      	ldr	r2, [pc, #316]	@ (800d834 <UART_SetConfig+0x340>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d130      	bne.n	800d75c <UART_SetConfig+0x268>
 800d6fa:	4b4c      	ldr	r3, [pc, #304]	@ (800d82c <UART_SetConfig+0x338>)
 800d6fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6fe:	f003 0307 	and.w	r3, r3, #7
 800d702:	2b05      	cmp	r3, #5
 800d704:	d826      	bhi.n	800d754 <UART_SetConfig+0x260>
 800d706:	a201      	add	r2, pc, #4	@ (adr r2, 800d70c <UART_SetConfig+0x218>)
 800d708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d70c:	0800d725 	.word	0x0800d725
 800d710:	0800d72d 	.word	0x0800d72d
 800d714:	0800d735 	.word	0x0800d735
 800d718:	0800d73d 	.word	0x0800d73d
 800d71c:	0800d745 	.word	0x0800d745
 800d720:	0800d74d 	.word	0x0800d74d
 800d724:	2300      	movs	r3, #0
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d72a:	e1b6      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d72c:	2304      	movs	r3, #4
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d732:	e1b2      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d734:	2308      	movs	r3, #8
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d73a:	e1ae      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d73c:	2310      	movs	r3, #16
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d742:	e1aa      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d744:	2320      	movs	r3, #32
 800d746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d74a:	e1a6      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d74c:	2340      	movs	r3, #64	@ 0x40
 800d74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d752:	e1a2      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d754:	2380      	movs	r3, #128	@ 0x80
 800d756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d75a:	e19e      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4a35      	ldr	r2, [pc, #212]	@ (800d838 <UART_SetConfig+0x344>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d130      	bne.n	800d7c8 <UART_SetConfig+0x2d4>
 800d766:	4b31      	ldr	r3, [pc, #196]	@ (800d82c <UART_SetConfig+0x338>)
 800d768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d76a:	f003 0307 	and.w	r3, r3, #7
 800d76e:	2b05      	cmp	r3, #5
 800d770:	d826      	bhi.n	800d7c0 <UART_SetConfig+0x2cc>
 800d772:	a201      	add	r2, pc, #4	@ (adr r2, 800d778 <UART_SetConfig+0x284>)
 800d774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d778:	0800d791 	.word	0x0800d791
 800d77c:	0800d799 	.word	0x0800d799
 800d780:	0800d7a1 	.word	0x0800d7a1
 800d784:	0800d7a9 	.word	0x0800d7a9
 800d788:	0800d7b1 	.word	0x0800d7b1
 800d78c:	0800d7b9 	.word	0x0800d7b9
 800d790:	2300      	movs	r3, #0
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d796:	e180      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d798:	2304      	movs	r3, #4
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d79e:	e17c      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d7a0:	2308      	movs	r3, #8
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7a6:	e178      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d7a8:	2310      	movs	r3, #16
 800d7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ae:	e174      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d7b0:	2320      	movs	r3, #32
 800d7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7b6:	e170      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d7b8:	2340      	movs	r3, #64	@ 0x40
 800d7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7be:	e16c      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d7c0:	2380      	movs	r3, #128	@ 0x80
 800d7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7c6:	e168      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4a1b      	ldr	r2, [pc, #108]	@ (800d83c <UART_SetConfig+0x348>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d142      	bne.n	800d858 <UART_SetConfig+0x364>
 800d7d2:	4b16      	ldr	r3, [pc, #88]	@ (800d82c <UART_SetConfig+0x338>)
 800d7d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7d6:	f003 0307 	and.w	r3, r3, #7
 800d7da:	2b05      	cmp	r3, #5
 800d7dc:	d838      	bhi.n	800d850 <UART_SetConfig+0x35c>
 800d7de:	a201      	add	r2, pc, #4	@ (adr r2, 800d7e4 <UART_SetConfig+0x2f0>)
 800d7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7e4:	0800d7fd 	.word	0x0800d7fd
 800d7e8:	0800d805 	.word	0x0800d805
 800d7ec:	0800d80d 	.word	0x0800d80d
 800d7f0:	0800d815 	.word	0x0800d815
 800d7f4:	0800d841 	.word	0x0800d841
 800d7f8:	0800d849 	.word	0x0800d849
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d802:	e14a      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d804:	2304      	movs	r3, #4
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d80a:	e146      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d80c:	2308      	movs	r3, #8
 800d80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d812:	e142      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d814:	2310      	movs	r3, #16
 800d816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d81a:	e13e      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d81c:	cfff69f3 	.word	0xcfff69f3
 800d820:	58000c00 	.word	0x58000c00
 800d824:	11fff4ff 	.word	0x11fff4ff
 800d828:	40011000 	.word	0x40011000
 800d82c:	58024400 	.word	0x58024400
 800d830:	40004400 	.word	0x40004400
 800d834:	40004800 	.word	0x40004800
 800d838:	40004c00 	.word	0x40004c00
 800d83c:	40005000 	.word	0x40005000
 800d840:	2320      	movs	r3, #32
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d846:	e128      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d848:	2340      	movs	r3, #64	@ 0x40
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d84e:	e124      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d850:	2380      	movs	r3, #128	@ 0x80
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d856:	e120      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4acb      	ldr	r2, [pc, #812]	@ (800db8c <UART_SetConfig+0x698>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d176      	bne.n	800d950 <UART_SetConfig+0x45c>
 800d862:	4bcb      	ldr	r3, [pc, #812]	@ (800db90 <UART_SetConfig+0x69c>)
 800d864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d866:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d86a:	2b28      	cmp	r3, #40	@ 0x28
 800d86c:	d86c      	bhi.n	800d948 <UART_SetConfig+0x454>
 800d86e:	a201      	add	r2, pc, #4	@ (adr r2, 800d874 <UART_SetConfig+0x380>)
 800d870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d874:	0800d919 	.word	0x0800d919
 800d878:	0800d949 	.word	0x0800d949
 800d87c:	0800d949 	.word	0x0800d949
 800d880:	0800d949 	.word	0x0800d949
 800d884:	0800d949 	.word	0x0800d949
 800d888:	0800d949 	.word	0x0800d949
 800d88c:	0800d949 	.word	0x0800d949
 800d890:	0800d949 	.word	0x0800d949
 800d894:	0800d921 	.word	0x0800d921
 800d898:	0800d949 	.word	0x0800d949
 800d89c:	0800d949 	.word	0x0800d949
 800d8a0:	0800d949 	.word	0x0800d949
 800d8a4:	0800d949 	.word	0x0800d949
 800d8a8:	0800d949 	.word	0x0800d949
 800d8ac:	0800d949 	.word	0x0800d949
 800d8b0:	0800d949 	.word	0x0800d949
 800d8b4:	0800d929 	.word	0x0800d929
 800d8b8:	0800d949 	.word	0x0800d949
 800d8bc:	0800d949 	.word	0x0800d949
 800d8c0:	0800d949 	.word	0x0800d949
 800d8c4:	0800d949 	.word	0x0800d949
 800d8c8:	0800d949 	.word	0x0800d949
 800d8cc:	0800d949 	.word	0x0800d949
 800d8d0:	0800d949 	.word	0x0800d949
 800d8d4:	0800d931 	.word	0x0800d931
 800d8d8:	0800d949 	.word	0x0800d949
 800d8dc:	0800d949 	.word	0x0800d949
 800d8e0:	0800d949 	.word	0x0800d949
 800d8e4:	0800d949 	.word	0x0800d949
 800d8e8:	0800d949 	.word	0x0800d949
 800d8ec:	0800d949 	.word	0x0800d949
 800d8f0:	0800d949 	.word	0x0800d949
 800d8f4:	0800d939 	.word	0x0800d939
 800d8f8:	0800d949 	.word	0x0800d949
 800d8fc:	0800d949 	.word	0x0800d949
 800d900:	0800d949 	.word	0x0800d949
 800d904:	0800d949 	.word	0x0800d949
 800d908:	0800d949 	.word	0x0800d949
 800d90c:	0800d949 	.word	0x0800d949
 800d910:	0800d949 	.word	0x0800d949
 800d914:	0800d941 	.word	0x0800d941
 800d918:	2301      	movs	r3, #1
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d91e:	e0bc      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d920:	2304      	movs	r3, #4
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d926:	e0b8      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d928:	2308      	movs	r3, #8
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d92e:	e0b4      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d930:	2310      	movs	r3, #16
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d936:	e0b0      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d938:	2320      	movs	r3, #32
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d93e:	e0ac      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d940:	2340      	movs	r3, #64	@ 0x40
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d946:	e0a8      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d948:	2380      	movs	r3, #128	@ 0x80
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94e:	e0a4      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a8f      	ldr	r2, [pc, #572]	@ (800db94 <UART_SetConfig+0x6a0>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d130      	bne.n	800d9bc <UART_SetConfig+0x4c8>
 800d95a:	4b8d      	ldr	r3, [pc, #564]	@ (800db90 <UART_SetConfig+0x69c>)
 800d95c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d95e:	f003 0307 	and.w	r3, r3, #7
 800d962:	2b05      	cmp	r3, #5
 800d964:	d826      	bhi.n	800d9b4 <UART_SetConfig+0x4c0>
 800d966:	a201      	add	r2, pc, #4	@ (adr r2, 800d96c <UART_SetConfig+0x478>)
 800d968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d96c:	0800d985 	.word	0x0800d985
 800d970:	0800d98d 	.word	0x0800d98d
 800d974:	0800d995 	.word	0x0800d995
 800d978:	0800d99d 	.word	0x0800d99d
 800d97c:	0800d9a5 	.word	0x0800d9a5
 800d980:	0800d9ad 	.word	0x0800d9ad
 800d984:	2300      	movs	r3, #0
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98a:	e086      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d98c:	2304      	movs	r3, #4
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d992:	e082      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d994:	2308      	movs	r3, #8
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99a:	e07e      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d99c:	2310      	movs	r3, #16
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a2:	e07a      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d9a4:	2320      	movs	r3, #32
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9aa:	e076      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d9ac:	2340      	movs	r3, #64	@ 0x40
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9b2:	e072      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d9b4:	2380      	movs	r3, #128	@ 0x80
 800d9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ba:	e06e      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a75      	ldr	r2, [pc, #468]	@ (800db98 <UART_SetConfig+0x6a4>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d130      	bne.n	800da28 <UART_SetConfig+0x534>
 800d9c6:	4b72      	ldr	r3, [pc, #456]	@ (800db90 <UART_SetConfig+0x69c>)
 800d9c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9ca:	f003 0307 	and.w	r3, r3, #7
 800d9ce:	2b05      	cmp	r3, #5
 800d9d0:	d826      	bhi.n	800da20 <UART_SetConfig+0x52c>
 800d9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d9d8 <UART_SetConfig+0x4e4>)
 800d9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d8:	0800d9f1 	.word	0x0800d9f1
 800d9dc:	0800d9f9 	.word	0x0800d9f9
 800d9e0:	0800da01 	.word	0x0800da01
 800d9e4:	0800da09 	.word	0x0800da09
 800d9e8:	0800da11 	.word	0x0800da11
 800d9ec:	0800da19 	.word	0x0800da19
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9f6:	e050      	b.n	800da9a <UART_SetConfig+0x5a6>
 800d9f8:	2304      	movs	r3, #4
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fe:	e04c      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da00:	2308      	movs	r3, #8
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da06:	e048      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da08:	2310      	movs	r3, #16
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0e:	e044      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da10:	2320      	movs	r3, #32
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da16:	e040      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da18:	2340      	movs	r3, #64	@ 0x40
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1e:	e03c      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da20:	2380      	movs	r3, #128	@ 0x80
 800da22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da26:	e038      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a5b      	ldr	r2, [pc, #364]	@ (800db9c <UART_SetConfig+0x6a8>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d130      	bne.n	800da94 <UART_SetConfig+0x5a0>
 800da32:	4b57      	ldr	r3, [pc, #348]	@ (800db90 <UART_SetConfig+0x69c>)
 800da34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da36:	f003 0307 	and.w	r3, r3, #7
 800da3a:	2b05      	cmp	r3, #5
 800da3c:	d826      	bhi.n	800da8c <UART_SetConfig+0x598>
 800da3e:	a201      	add	r2, pc, #4	@ (adr r2, 800da44 <UART_SetConfig+0x550>)
 800da40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da44:	0800da5d 	.word	0x0800da5d
 800da48:	0800da65 	.word	0x0800da65
 800da4c:	0800da6d 	.word	0x0800da6d
 800da50:	0800da75 	.word	0x0800da75
 800da54:	0800da7d 	.word	0x0800da7d
 800da58:	0800da85 	.word	0x0800da85
 800da5c:	2302      	movs	r3, #2
 800da5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da62:	e01a      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da64:	2304      	movs	r3, #4
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6a:	e016      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da6c:	2308      	movs	r3, #8
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da72:	e012      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da74:	2310      	movs	r3, #16
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7a:	e00e      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da7c:	2320      	movs	r3, #32
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da82:	e00a      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da84:	2340      	movs	r3, #64	@ 0x40
 800da86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da8a:	e006      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da8c:	2380      	movs	r3, #128	@ 0x80
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da92:	e002      	b.n	800da9a <UART_SetConfig+0x5a6>
 800da94:	2380      	movs	r3, #128	@ 0x80
 800da96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a3f      	ldr	r2, [pc, #252]	@ (800db9c <UART_SetConfig+0x6a8>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	f040 80f8 	bne.w	800dc96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800daa6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800daaa:	2b20      	cmp	r3, #32
 800daac:	dc46      	bgt.n	800db3c <UART_SetConfig+0x648>
 800daae:	2b02      	cmp	r3, #2
 800dab0:	f2c0 8082 	blt.w	800dbb8 <UART_SetConfig+0x6c4>
 800dab4:	3b02      	subs	r3, #2
 800dab6:	2b1e      	cmp	r3, #30
 800dab8:	d87e      	bhi.n	800dbb8 <UART_SetConfig+0x6c4>
 800daba:	a201      	add	r2, pc, #4	@ (adr r2, 800dac0 <UART_SetConfig+0x5cc>)
 800dabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac0:	0800db43 	.word	0x0800db43
 800dac4:	0800dbb9 	.word	0x0800dbb9
 800dac8:	0800db4b 	.word	0x0800db4b
 800dacc:	0800dbb9 	.word	0x0800dbb9
 800dad0:	0800dbb9 	.word	0x0800dbb9
 800dad4:	0800dbb9 	.word	0x0800dbb9
 800dad8:	0800db5b 	.word	0x0800db5b
 800dadc:	0800dbb9 	.word	0x0800dbb9
 800dae0:	0800dbb9 	.word	0x0800dbb9
 800dae4:	0800dbb9 	.word	0x0800dbb9
 800dae8:	0800dbb9 	.word	0x0800dbb9
 800daec:	0800dbb9 	.word	0x0800dbb9
 800daf0:	0800dbb9 	.word	0x0800dbb9
 800daf4:	0800dbb9 	.word	0x0800dbb9
 800daf8:	0800db6b 	.word	0x0800db6b
 800dafc:	0800dbb9 	.word	0x0800dbb9
 800db00:	0800dbb9 	.word	0x0800dbb9
 800db04:	0800dbb9 	.word	0x0800dbb9
 800db08:	0800dbb9 	.word	0x0800dbb9
 800db0c:	0800dbb9 	.word	0x0800dbb9
 800db10:	0800dbb9 	.word	0x0800dbb9
 800db14:	0800dbb9 	.word	0x0800dbb9
 800db18:	0800dbb9 	.word	0x0800dbb9
 800db1c:	0800dbb9 	.word	0x0800dbb9
 800db20:	0800dbb9 	.word	0x0800dbb9
 800db24:	0800dbb9 	.word	0x0800dbb9
 800db28:	0800dbb9 	.word	0x0800dbb9
 800db2c:	0800dbb9 	.word	0x0800dbb9
 800db30:	0800dbb9 	.word	0x0800dbb9
 800db34:	0800dbb9 	.word	0x0800dbb9
 800db38:	0800dbab 	.word	0x0800dbab
 800db3c:	2b40      	cmp	r3, #64	@ 0x40
 800db3e:	d037      	beq.n	800dbb0 <UART_SetConfig+0x6bc>
 800db40:	e03a      	b.n	800dbb8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800db42:	f7fd fefd 	bl	800b940 <HAL_RCCEx_GetD3PCLK1Freq>
 800db46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db48:	e03c      	b.n	800dbc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800db4e:	4618      	mov	r0, r3
 800db50:	f7fd ff0c 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db58:	e034      	b.n	800dbc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db5a:	f107 0318 	add.w	r3, r7, #24
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fe f858 	bl	800bc14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db68:	e02c      	b.n	800dbc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db6a:	4b09      	ldr	r3, [pc, #36]	@ (800db90 <UART_SetConfig+0x69c>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f003 0320 	and.w	r3, r3, #32
 800db72:	2b00      	cmp	r3, #0
 800db74:	d016      	beq.n	800dba4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db76:	4b06      	ldr	r3, [pc, #24]	@ (800db90 <UART_SetConfig+0x69c>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	08db      	lsrs	r3, r3, #3
 800db7c:	f003 0303 	and.w	r3, r3, #3
 800db80:	4a07      	ldr	r2, [pc, #28]	@ (800dba0 <UART_SetConfig+0x6ac>)
 800db82:	fa22 f303 	lsr.w	r3, r2, r3
 800db86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db88:	e01c      	b.n	800dbc4 <UART_SetConfig+0x6d0>
 800db8a:	bf00      	nop
 800db8c:	40011400 	.word	0x40011400
 800db90:	58024400 	.word	0x58024400
 800db94:	40007800 	.word	0x40007800
 800db98:	40007c00 	.word	0x40007c00
 800db9c:	58000c00 	.word	0x58000c00
 800dba0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dba4:	4b9d      	ldr	r3, [pc, #628]	@ (800de1c <UART_SetConfig+0x928>)
 800dba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dba8:	e00c      	b.n	800dbc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dbaa:	4b9d      	ldr	r3, [pc, #628]	@ (800de20 <UART_SetConfig+0x92c>)
 800dbac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbae:	e009      	b.n	800dbc4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dbb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbb6:	e005      	b.n	800dbc4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dbc2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dbc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	f000 81de 	beq.w	800df88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd0:	4a94      	ldr	r2, [pc, #592]	@ (800de24 <UART_SetConfig+0x930>)
 800dbd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbda:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbde:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	005b      	lsls	r3, r3, #1
 800dbe8:	4413      	add	r3, r2
 800dbea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d305      	bcc.n	800dbfc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d903      	bls.n	800dc04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc02:	e1c1      	b.n	800df88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc06:	2200      	movs	r2, #0
 800dc08:	60bb      	str	r3, [r7, #8]
 800dc0a:	60fa      	str	r2, [r7, #12]
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc10:	4a84      	ldr	r2, [pc, #528]	@ (800de24 <UART_SetConfig+0x930>)
 800dc12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	2200      	movs	r2, #0
 800dc1a:	603b      	str	r3, [r7, #0]
 800dc1c:	607a      	str	r2, [r7, #4]
 800dc1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc26:	f7f2 fbb3 	bl	8000390 <__aeabi_uldivmod>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	4610      	mov	r0, r2
 800dc30:	4619      	mov	r1, r3
 800dc32:	f04f 0200 	mov.w	r2, #0
 800dc36:	f04f 0300 	mov.w	r3, #0
 800dc3a:	020b      	lsls	r3, r1, #8
 800dc3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc40:	0202      	lsls	r2, r0, #8
 800dc42:	6979      	ldr	r1, [r7, #20]
 800dc44:	6849      	ldr	r1, [r1, #4]
 800dc46:	0849      	lsrs	r1, r1, #1
 800dc48:	2000      	movs	r0, #0
 800dc4a:	460c      	mov	r4, r1
 800dc4c:	4605      	mov	r5, r0
 800dc4e:	eb12 0804 	adds.w	r8, r2, r4
 800dc52:	eb43 0905 	adc.w	r9, r3, r5
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	469a      	mov	sl, r3
 800dc5e:	4693      	mov	fp, r2
 800dc60:	4652      	mov	r2, sl
 800dc62:	465b      	mov	r3, fp
 800dc64:	4640      	mov	r0, r8
 800dc66:	4649      	mov	r1, r9
 800dc68:	f7f2 fb92 	bl	8000390 <__aeabi_uldivmod>
 800dc6c:	4602      	mov	r2, r0
 800dc6e:	460b      	mov	r3, r1
 800dc70:	4613      	mov	r3, r2
 800dc72:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc7a:	d308      	bcc.n	800dc8e <UART_SetConfig+0x79a>
 800dc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc82:	d204      	bcs.n	800dc8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc8a:	60da      	str	r2, [r3, #12]
 800dc8c:	e17c      	b.n	800df88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc94:	e178      	b.n	800df88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	69db      	ldr	r3, [r3, #28]
 800dc9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc9e:	f040 80c5 	bne.w	800de2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dca2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dca6:	2b20      	cmp	r3, #32
 800dca8:	dc48      	bgt.n	800dd3c <UART_SetConfig+0x848>
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	db7b      	blt.n	800dda6 <UART_SetConfig+0x8b2>
 800dcae:	2b20      	cmp	r3, #32
 800dcb0:	d879      	bhi.n	800dda6 <UART_SetConfig+0x8b2>
 800dcb2:	a201      	add	r2, pc, #4	@ (adr r2, 800dcb8 <UART_SetConfig+0x7c4>)
 800dcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb8:	0800dd43 	.word	0x0800dd43
 800dcbc:	0800dd4b 	.word	0x0800dd4b
 800dcc0:	0800dda7 	.word	0x0800dda7
 800dcc4:	0800dda7 	.word	0x0800dda7
 800dcc8:	0800dd53 	.word	0x0800dd53
 800dccc:	0800dda7 	.word	0x0800dda7
 800dcd0:	0800dda7 	.word	0x0800dda7
 800dcd4:	0800dda7 	.word	0x0800dda7
 800dcd8:	0800dd63 	.word	0x0800dd63
 800dcdc:	0800dda7 	.word	0x0800dda7
 800dce0:	0800dda7 	.word	0x0800dda7
 800dce4:	0800dda7 	.word	0x0800dda7
 800dce8:	0800dda7 	.word	0x0800dda7
 800dcec:	0800dda7 	.word	0x0800dda7
 800dcf0:	0800dda7 	.word	0x0800dda7
 800dcf4:	0800dda7 	.word	0x0800dda7
 800dcf8:	0800dd73 	.word	0x0800dd73
 800dcfc:	0800dda7 	.word	0x0800dda7
 800dd00:	0800dda7 	.word	0x0800dda7
 800dd04:	0800dda7 	.word	0x0800dda7
 800dd08:	0800dda7 	.word	0x0800dda7
 800dd0c:	0800dda7 	.word	0x0800dda7
 800dd10:	0800dda7 	.word	0x0800dda7
 800dd14:	0800dda7 	.word	0x0800dda7
 800dd18:	0800dda7 	.word	0x0800dda7
 800dd1c:	0800dda7 	.word	0x0800dda7
 800dd20:	0800dda7 	.word	0x0800dda7
 800dd24:	0800dda7 	.word	0x0800dda7
 800dd28:	0800dda7 	.word	0x0800dda7
 800dd2c:	0800dda7 	.word	0x0800dda7
 800dd30:	0800dda7 	.word	0x0800dda7
 800dd34:	0800dda7 	.word	0x0800dda7
 800dd38:	0800dd99 	.word	0x0800dd99
 800dd3c:	2b40      	cmp	r3, #64	@ 0x40
 800dd3e:	d02e      	beq.n	800dd9e <UART_SetConfig+0x8aa>
 800dd40:	e031      	b.n	800dda6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd42:	f7fb fe47 	bl	80099d4 <HAL_RCC_GetPCLK1Freq>
 800dd46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd48:	e033      	b.n	800ddb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd4a:	f7fb fe59 	bl	8009a00 <HAL_RCC_GetPCLK2Freq>
 800dd4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dd50:	e02f      	b.n	800ddb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fd fe08 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd60:	e027      	b.n	800ddb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd62:	f107 0318 	add.w	r3, r7, #24
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fd ff54 	bl	800bc14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd70:	e01f      	b.n	800ddb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd72:	4b2d      	ldr	r3, [pc, #180]	@ (800de28 <UART_SetConfig+0x934>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f003 0320 	and.w	r3, r3, #32
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d009      	beq.n	800dd92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd7e:	4b2a      	ldr	r3, [pc, #168]	@ (800de28 <UART_SetConfig+0x934>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	08db      	lsrs	r3, r3, #3
 800dd84:	f003 0303 	and.w	r3, r3, #3
 800dd88:	4a24      	ldr	r2, [pc, #144]	@ (800de1c <UART_SetConfig+0x928>)
 800dd8a:	fa22 f303 	lsr.w	r3, r2, r3
 800dd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd90:	e00f      	b.n	800ddb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dd92:	4b22      	ldr	r3, [pc, #136]	@ (800de1c <UART_SetConfig+0x928>)
 800dd94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd96:	e00c      	b.n	800ddb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd98:	4b21      	ldr	r3, [pc, #132]	@ (800de20 <UART_SetConfig+0x92c>)
 800dd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd9c:	e009      	b.n	800ddb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dda4:	e005      	b.n	800ddb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dda6:	2300      	movs	r3, #0
 800dda8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ddaa:	2301      	movs	r3, #1
 800ddac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ddb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ddb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f000 80e7 	beq.w	800df88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddbe:	4a19      	ldr	r2, [pc, #100]	@ (800de24 <UART_SetConfig+0x930>)
 800ddc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddcc:	005a      	lsls	r2, r3, #1
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	085b      	lsrs	r3, r3, #1
 800ddd4:	441a      	add	r2, r3
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde2:	2b0f      	cmp	r3, #15
 800dde4:	d916      	bls.n	800de14 <UART_SetConfig+0x920>
 800dde6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddec:	d212      	bcs.n	800de14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ddee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	f023 030f 	bic.w	r3, r3, #15
 800ddf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ddf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddfa:	085b      	lsrs	r3, r3, #1
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	f003 0307 	and.w	r3, r3, #7
 800de02:	b29a      	uxth	r2, r3
 800de04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de06:	4313      	orrs	r3, r2
 800de08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800de10:	60da      	str	r2, [r3, #12]
 800de12:	e0b9      	b.n	800df88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800de14:	2301      	movs	r3, #1
 800de16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800de1a:	e0b5      	b.n	800df88 <UART_SetConfig+0xa94>
 800de1c:	03d09000 	.word	0x03d09000
 800de20:	003d0900 	.word	0x003d0900
 800de24:	08014750 	.word	0x08014750
 800de28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800de2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800de30:	2b20      	cmp	r3, #32
 800de32:	dc49      	bgt.n	800dec8 <UART_SetConfig+0x9d4>
 800de34:	2b00      	cmp	r3, #0
 800de36:	db7c      	blt.n	800df32 <UART_SetConfig+0xa3e>
 800de38:	2b20      	cmp	r3, #32
 800de3a:	d87a      	bhi.n	800df32 <UART_SetConfig+0xa3e>
 800de3c:	a201      	add	r2, pc, #4	@ (adr r2, 800de44 <UART_SetConfig+0x950>)
 800de3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de42:	bf00      	nop
 800de44:	0800decf 	.word	0x0800decf
 800de48:	0800ded7 	.word	0x0800ded7
 800de4c:	0800df33 	.word	0x0800df33
 800de50:	0800df33 	.word	0x0800df33
 800de54:	0800dedf 	.word	0x0800dedf
 800de58:	0800df33 	.word	0x0800df33
 800de5c:	0800df33 	.word	0x0800df33
 800de60:	0800df33 	.word	0x0800df33
 800de64:	0800deef 	.word	0x0800deef
 800de68:	0800df33 	.word	0x0800df33
 800de6c:	0800df33 	.word	0x0800df33
 800de70:	0800df33 	.word	0x0800df33
 800de74:	0800df33 	.word	0x0800df33
 800de78:	0800df33 	.word	0x0800df33
 800de7c:	0800df33 	.word	0x0800df33
 800de80:	0800df33 	.word	0x0800df33
 800de84:	0800deff 	.word	0x0800deff
 800de88:	0800df33 	.word	0x0800df33
 800de8c:	0800df33 	.word	0x0800df33
 800de90:	0800df33 	.word	0x0800df33
 800de94:	0800df33 	.word	0x0800df33
 800de98:	0800df33 	.word	0x0800df33
 800de9c:	0800df33 	.word	0x0800df33
 800dea0:	0800df33 	.word	0x0800df33
 800dea4:	0800df33 	.word	0x0800df33
 800dea8:	0800df33 	.word	0x0800df33
 800deac:	0800df33 	.word	0x0800df33
 800deb0:	0800df33 	.word	0x0800df33
 800deb4:	0800df33 	.word	0x0800df33
 800deb8:	0800df33 	.word	0x0800df33
 800debc:	0800df33 	.word	0x0800df33
 800dec0:	0800df33 	.word	0x0800df33
 800dec4:	0800df25 	.word	0x0800df25
 800dec8:	2b40      	cmp	r3, #64	@ 0x40
 800deca:	d02e      	beq.n	800df2a <UART_SetConfig+0xa36>
 800decc:	e031      	b.n	800df32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dece:	f7fb fd81 	bl	80099d4 <HAL_RCC_GetPCLK1Freq>
 800ded2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ded4:	e033      	b.n	800df3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ded6:	f7fb fd93 	bl	8009a00 <HAL_RCC_GetPCLK2Freq>
 800deda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dedc:	e02f      	b.n	800df3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fd fd42 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800deec:	e027      	b.n	800df3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800deee:	f107 0318 	add.w	r3, r7, #24
 800def2:	4618      	mov	r0, r3
 800def4:	f7fd fe8e 	bl	800bc14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800defc:	e01f      	b.n	800df3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800defe:	4b2d      	ldr	r3, [pc, #180]	@ (800dfb4 <UART_SetConfig+0xac0>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f003 0320 	and.w	r3, r3, #32
 800df06:	2b00      	cmp	r3, #0
 800df08:	d009      	beq.n	800df1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df0a:	4b2a      	ldr	r3, [pc, #168]	@ (800dfb4 <UART_SetConfig+0xac0>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	08db      	lsrs	r3, r3, #3
 800df10:	f003 0303 	and.w	r3, r3, #3
 800df14:	4a28      	ldr	r2, [pc, #160]	@ (800dfb8 <UART_SetConfig+0xac4>)
 800df16:	fa22 f303 	lsr.w	r3, r2, r3
 800df1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df1c:	e00f      	b.n	800df3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800df1e:	4b26      	ldr	r3, [pc, #152]	@ (800dfb8 <UART_SetConfig+0xac4>)
 800df20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df22:	e00c      	b.n	800df3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df24:	4b25      	ldr	r3, [pc, #148]	@ (800dfbc <UART_SetConfig+0xac8>)
 800df26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df28:	e009      	b.n	800df3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df30:	e005      	b.n	800df3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800df32:	2300      	movs	r3, #0
 800df34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800df36:	2301      	movs	r3, #1
 800df38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800df3c:	bf00      	nop
    }

    if (pclk != 0U)
 800df3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df40:	2b00      	cmp	r3, #0
 800df42:	d021      	beq.n	800df88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df48:	4a1d      	ldr	r2, [pc, #116]	@ (800dfc0 <UART_SetConfig+0xacc>)
 800df4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df4e:	461a      	mov	r2, r3
 800df50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df52:	fbb3 f2f2 	udiv	r2, r3, r2
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	085b      	lsrs	r3, r3, #1
 800df5c:	441a      	add	r2, r3
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	fbb2 f3f3 	udiv	r3, r2, r3
 800df66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df6a:	2b0f      	cmp	r3, #15
 800df6c:	d909      	bls.n	800df82 <UART_SetConfig+0xa8e>
 800df6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df74:	d205      	bcs.n	800df82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df78:	b29a      	uxth	r2, r3
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	60da      	str	r2, [r3, #12]
 800df80:	e002      	b.n	800df88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800df82:	2301      	movs	r3, #1
 800df84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	2201      	movs	r2, #1
 800df94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	2200      	movs	r2, #0
 800df9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dfa4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3748      	adds	r7, #72	@ 0x48
 800dfac:	46bd      	mov	sp, r7
 800dfae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfb2:	bf00      	nop
 800dfb4:	58024400 	.word	0x58024400
 800dfb8:	03d09000 	.word	0x03d09000
 800dfbc:	003d0900 	.word	0x003d0900
 800dfc0:	08014750 	.word	0x08014750

0800dfc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfd0:	f003 0301 	and.w	r3, r3, #1
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00a      	beq.n	800dfee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	430a      	orrs	r2, r1
 800dfec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff2:	f003 0302 	and.w	r3, r3, #2
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00a      	beq.n	800e010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	430a      	orrs	r2, r1
 800e00e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e014:	f003 0304 	and.w	r3, r3, #4
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00a      	beq.n	800e032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	430a      	orrs	r2, r1
 800e030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e036:	f003 0308 	and.w	r3, r3, #8
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d00a      	beq.n	800e054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	430a      	orrs	r2, r1
 800e052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e058:	f003 0310 	and.w	r3, r3, #16
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00a      	beq.n	800e076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	430a      	orrs	r2, r1
 800e074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e07a:	f003 0320 	and.w	r3, r3, #32
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00a      	beq.n	800e098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	430a      	orrs	r2, r1
 800e096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d01a      	beq.n	800e0da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	430a      	orrs	r2, r1
 800e0b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e0c2:	d10a      	bne.n	800e0da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	430a      	orrs	r2, r1
 800e0d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00a      	beq.n	800e0fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	430a      	orrs	r2, r1
 800e0fa:	605a      	str	r2, [r3, #4]
  }
}
 800e0fc:	bf00      	nop
 800e0fe:	370c      	adds	r7, #12
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b098      	sub	sp, #96	@ 0x60
 800e10c:	af02      	add	r7, sp, #8
 800e10e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e118:	f7f4 fd78 	bl	8002c0c <HAL_GetTick>
 800e11c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f003 0308 	and.w	r3, r3, #8
 800e128:	2b08      	cmp	r3, #8
 800e12a:	d12f      	bne.n	800e18c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e12c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e134:	2200      	movs	r2, #0
 800e136:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 f88e 	bl	800e25c <UART_WaitOnFlagUntilTimeout>
 800e140:	4603      	mov	r3, r0
 800e142:	2b00      	cmp	r3, #0
 800e144:	d022      	beq.n	800e18c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e14e:	e853 3f00 	ldrex	r3, [r3]
 800e152:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e15a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	461a      	mov	r2, r3
 800e162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e164:	647b      	str	r3, [r7, #68]	@ 0x44
 800e166:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e168:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e16a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e16c:	e841 2300 	strex	r3, r2, [r1]
 800e170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1e6      	bne.n	800e146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2220      	movs	r2, #32
 800e17c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e188:	2303      	movs	r3, #3
 800e18a:	e063      	b.n	800e254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f003 0304 	and.w	r3, r3, #4
 800e196:	2b04      	cmp	r3, #4
 800e198:	d149      	bne.n	800e22e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e19a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 f857 	bl	800e25c <UART_WaitOnFlagUntilTimeout>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d03c      	beq.n	800e22e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1bc:	e853 3f00 	ldrex	r3, [r3]
 800e1c0:	623b      	str	r3, [r7, #32]
   return(result);
 800e1c2:	6a3b      	ldr	r3, [r7, #32]
 800e1c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e1c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e1d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1da:	e841 2300 	strex	r3, r2, [r1]
 800e1de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d1e6      	bne.n	800e1b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	3308      	adds	r3, #8
 800e1ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	e853 3f00 	ldrex	r3, [r3]
 800e1f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f023 0301 	bic.w	r3, r3, #1
 800e1fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	3308      	adds	r3, #8
 800e204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e206:	61fa      	str	r2, [r7, #28]
 800e208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e20a:	69b9      	ldr	r1, [r7, #24]
 800e20c:	69fa      	ldr	r2, [r7, #28]
 800e20e:	e841 2300 	strex	r3, r2, [r1]
 800e212:	617b      	str	r3, [r7, #20]
   return(result);
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1e5      	bne.n	800e1e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2220      	movs	r2, #32
 800e21e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2200      	movs	r2, #0
 800e226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e22a:	2303      	movs	r3, #3
 800e22c:	e012      	b.n	800e254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2220      	movs	r2, #32
 800e232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2220      	movs	r2, #32
 800e23a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2200      	movs	r2, #0
 800e248:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2200      	movs	r2, #0
 800e24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e252:	2300      	movs	r3, #0
}
 800e254:	4618      	mov	r0, r3
 800e256:	3758      	adds	r7, #88	@ 0x58
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	60f8      	str	r0, [r7, #12]
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	603b      	str	r3, [r7, #0]
 800e268:	4613      	mov	r3, r2
 800e26a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e26c:	e049      	b.n	800e302 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e274:	d045      	beq.n	800e302 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e276:	f7f4 fcc9 	bl	8002c0c <HAL_GetTick>
 800e27a:	4602      	mov	r2, r0
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	1ad3      	subs	r3, r2, r3
 800e280:	69ba      	ldr	r2, [r7, #24]
 800e282:	429a      	cmp	r2, r3
 800e284:	d302      	bcc.n	800e28c <UART_WaitOnFlagUntilTimeout+0x30>
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d101      	bne.n	800e290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e28c:	2303      	movs	r3, #3
 800e28e:	e048      	b.n	800e322 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f003 0304 	and.w	r3, r3, #4
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d031      	beq.n	800e302 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	69db      	ldr	r3, [r3, #28]
 800e2a4:	f003 0308 	and.w	r3, r3, #8
 800e2a8:	2b08      	cmp	r3, #8
 800e2aa:	d110      	bne.n	800e2ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2208      	movs	r2, #8
 800e2b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e2b4:	68f8      	ldr	r0, [r7, #12]
 800e2b6:	f000 f839 	bl	800e32c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2208      	movs	r2, #8
 800e2be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	e029      	b.n	800e322 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	69db      	ldr	r3, [r3, #28]
 800e2d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e2d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e2dc:	d111      	bne.n	800e302 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e2e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e2e8:	68f8      	ldr	r0, [r7, #12]
 800e2ea:	f000 f81f 	bl	800e32c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2220      	movs	r2, #32
 800e2f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e2fe:	2303      	movs	r3, #3
 800e300:	e00f      	b.n	800e322 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	69da      	ldr	r2, [r3, #28]
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	4013      	ands	r3, r2
 800e30c:	68ba      	ldr	r2, [r7, #8]
 800e30e:	429a      	cmp	r2, r3
 800e310:	bf0c      	ite	eq
 800e312:	2301      	moveq	r3, #1
 800e314:	2300      	movne	r3, #0
 800e316:	b2db      	uxtb	r3, r3
 800e318:	461a      	mov	r2, r3
 800e31a:	79fb      	ldrb	r3, [r7, #7]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d0a6      	beq.n	800e26e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e320:	2300      	movs	r3, #0
}
 800e322:	4618      	mov	r0, r3
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
	...

0800e32c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b095      	sub	sp, #84	@ 0x54
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e33a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e33c:	e853 3f00 	ldrex	r3, [r3]
 800e340:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e344:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e348:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	461a      	mov	r2, r3
 800e350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e352:	643b      	str	r3, [r7, #64]	@ 0x40
 800e354:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e356:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e358:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e35a:	e841 2300 	strex	r3, r2, [r1]
 800e35e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e362:	2b00      	cmp	r3, #0
 800e364:	d1e6      	bne.n	800e334 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3308      	adds	r3, #8
 800e36c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e36e:	6a3b      	ldr	r3, [r7, #32]
 800e370:	e853 3f00 	ldrex	r3, [r3]
 800e374:	61fb      	str	r3, [r7, #28]
   return(result);
 800e376:	69fa      	ldr	r2, [r7, #28]
 800e378:	4b1e      	ldr	r3, [pc, #120]	@ (800e3f4 <UART_EndRxTransfer+0xc8>)
 800e37a:	4013      	ands	r3, r2
 800e37c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	3308      	adds	r3, #8
 800e384:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e386:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e388:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e38a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e38c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e38e:	e841 2300 	strex	r3, r2, [r1]
 800e392:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e396:	2b00      	cmp	r3, #0
 800e398:	d1e5      	bne.n	800e366 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d118      	bne.n	800e3d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	e853 3f00 	ldrex	r3, [r3]
 800e3ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	f023 0310 	bic.w	r3, r3, #16
 800e3b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	461a      	mov	r2, r3
 800e3be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3c0:	61bb      	str	r3, [r7, #24]
 800e3c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c4:	6979      	ldr	r1, [r7, #20]
 800e3c6:	69ba      	ldr	r2, [r7, #24]
 800e3c8:	e841 2300 	strex	r3, r2, [r1]
 800e3cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d1e6      	bne.n	800e3a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2220      	movs	r2, #32
 800e3d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e3e8:	bf00      	nop
 800e3ea:	3754      	adds	r7, #84	@ 0x54
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr
 800e3f4:	effffffe 	.word	0xeffffffe

0800e3f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e404:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2200      	movs	r2, #0
 800e40a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2200      	movs	r2, #0
 800e412:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e416:	68f8      	ldr	r0, [r7, #12]
 800e418:	f7ff f856 	bl	800d4c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e41c:	bf00      	nop
 800e41e:	3710      	adds	r7, #16
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b088      	sub	sp, #32
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	e853 3f00 	ldrex	r3, [r3]
 800e438:	60bb      	str	r3, [r7, #8]
   return(result);
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e440:	61fb      	str	r3, [r7, #28]
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	461a      	mov	r2, r3
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	61bb      	str	r3, [r7, #24]
 800e44c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44e:	6979      	ldr	r1, [r7, #20]
 800e450:	69ba      	ldr	r2, [r7, #24]
 800e452:	e841 2300 	strex	r3, r2, [r1]
 800e456:	613b      	str	r3, [r7, #16]
   return(result);
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1e6      	bne.n	800e42c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2220      	movs	r2, #32
 800e462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2200      	movs	r2, #0
 800e46a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f7ff f821 	bl	800d4b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e472:	bf00      	nop
 800e474:	3720      	adds	r7, #32
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e47a:	b480      	push	{r7}
 800e47c:	b083      	sub	sp, #12
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e482:	bf00      	nop
 800e484:	370c      	adds	r7, #12
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr

0800e48e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e48e:	b480      	push	{r7}
 800e490:	b083      	sub	sp, #12
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e496:	bf00      	nop
 800e498:	370c      	adds	r7, #12
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr

0800e4a2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e4a2:	b480      	push	{r7}
 800e4a4:	b083      	sub	sp, #12
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e4aa:	bf00      	nop
 800e4ac:	370c      	adds	r7, #12
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr

0800e4b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e4b6:	b480      	push	{r7}
 800e4b8:	b085      	sub	sp, #20
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d101      	bne.n	800e4cc <HAL_UARTEx_DisableFifoMode+0x16>
 800e4c8:	2302      	movs	r3, #2
 800e4ca:	e027      	b.n	800e51c <HAL_UARTEx_DisableFifoMode+0x66>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2224      	movs	r2, #36	@ 0x24
 800e4d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f022 0201 	bic.w	r2, r2, #1
 800e4f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e4fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68fa      	ldr	r2, [r7, #12]
 800e508:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2220      	movs	r2, #32
 800e50e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3714      	adds	r7, #20
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d101      	bne.n	800e540 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e53c:	2302      	movs	r3, #2
 800e53e:	e02d      	b.n	800e59c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2224      	movs	r2, #36	@ 0x24
 800e54c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f022 0201 	bic.w	r2, r2, #1
 800e566:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	683a      	ldr	r2, [r7, #0]
 800e578:	430a      	orrs	r2, r1
 800e57a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 f84f 	bl	800e620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	68fa      	ldr	r2, [r7, #12]
 800e588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2220      	movs	r2, #32
 800e58e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2200      	movs	r2, #0
 800e596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3710      	adds	r7, #16
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d101      	bne.n	800e5bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e5b8:	2302      	movs	r3, #2
 800e5ba:	e02d      	b.n	800e618 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2201      	movs	r2, #1
 800e5c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2224      	movs	r2, #36	@ 0x24
 800e5c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f022 0201 	bic.w	r2, r2, #1
 800e5e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	689b      	ldr	r3, [r3, #8]
 800e5ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	683a      	ldr	r2, [r7, #0]
 800e5f4:	430a      	orrs	r2, r1
 800e5f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f000 f811 	bl	800e620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2220      	movs	r2, #32
 800e60a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3710      	adds	r7, #16
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e620:	b480      	push	{r7}
 800e622:	b085      	sub	sp, #20
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d108      	bne.n	800e642 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2201      	movs	r2, #1
 800e634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2201      	movs	r2, #1
 800e63c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e640:	e031      	b.n	800e6a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e642:	2310      	movs	r3, #16
 800e644:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e646:	2310      	movs	r3, #16
 800e648:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	689b      	ldr	r3, [r3, #8]
 800e650:	0e5b      	lsrs	r3, r3, #25
 800e652:	b2db      	uxtb	r3, r3
 800e654:	f003 0307 	and.w	r3, r3, #7
 800e658:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	0f5b      	lsrs	r3, r3, #29
 800e662:	b2db      	uxtb	r3, r3
 800e664:	f003 0307 	and.w	r3, r3, #7
 800e668:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e66a:	7bbb      	ldrb	r3, [r7, #14]
 800e66c:	7b3a      	ldrb	r2, [r7, #12]
 800e66e:	4911      	ldr	r1, [pc, #68]	@ (800e6b4 <UARTEx_SetNbDataToProcess+0x94>)
 800e670:	5c8a      	ldrb	r2, [r1, r2]
 800e672:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e676:	7b3a      	ldrb	r2, [r7, #12]
 800e678:	490f      	ldr	r1, [pc, #60]	@ (800e6b8 <UARTEx_SetNbDataToProcess+0x98>)
 800e67a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e67c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e680:	b29a      	uxth	r2, r3
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e688:	7bfb      	ldrb	r3, [r7, #15]
 800e68a:	7b7a      	ldrb	r2, [r7, #13]
 800e68c:	4909      	ldr	r1, [pc, #36]	@ (800e6b4 <UARTEx_SetNbDataToProcess+0x94>)
 800e68e:	5c8a      	ldrb	r2, [r1, r2]
 800e690:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e694:	7b7a      	ldrb	r2, [r7, #13]
 800e696:	4908      	ldr	r1, [pc, #32]	@ (800e6b8 <UARTEx_SetNbDataToProcess+0x98>)
 800e698:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e69a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e6a6:	bf00      	nop
 800e6a8:	3714      	adds	r7, #20
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	08014768 	.word	0x08014768
 800e6b8:	08014770 	.word	0x08014770

0800e6bc <__sprint_r>:
 800e6bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c0:	6893      	ldr	r3, [r2, #8]
 800e6c2:	4680      	mov	r8, r0
 800e6c4:	460e      	mov	r6, r1
 800e6c6:	4614      	mov	r4, r2
 800e6c8:	b343      	cbz	r3, 800e71c <__sprint_r+0x60>
 800e6ca:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800e6cc:	049d      	lsls	r5, r3, #18
 800e6ce:	d522      	bpl.n	800e716 <__sprint_r+0x5a>
 800e6d0:	6815      	ldr	r5, [r2, #0]
 800e6d2:	68a0      	ldr	r0, [r4, #8]
 800e6d4:	3508      	adds	r5, #8
 800e6d6:	b928      	cbnz	r0, 800e6e4 <__sprint_r+0x28>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	60a3      	str	r3, [r4, #8]
 800e6dc:	2300      	movs	r3, #0
 800e6de:	6063      	str	r3, [r4, #4]
 800e6e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e4:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800e6e8:	f04f 0900 	mov.w	r9, #0
 800e6ec:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800e6f0:	45ca      	cmp	sl, r9
 800e6f2:	dc05      	bgt.n	800e700 <__sprint_r+0x44>
 800e6f4:	68a3      	ldr	r3, [r4, #8]
 800e6f6:	f027 0703 	bic.w	r7, r7, #3
 800e6fa:	1bdb      	subs	r3, r3, r7
 800e6fc:	60a3      	str	r3, [r4, #8]
 800e6fe:	e7e8      	b.n	800e6d2 <__sprint_r+0x16>
 800e700:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800e704:	4632      	mov	r2, r6
 800e706:	4640      	mov	r0, r8
 800e708:	f001 f845 	bl	800f796 <_fputwc_r>
 800e70c:	1c43      	adds	r3, r0, #1
 800e70e:	d0e3      	beq.n	800e6d8 <__sprint_r+0x1c>
 800e710:	f109 0901 	add.w	r9, r9, #1
 800e714:	e7ec      	b.n	800e6f0 <__sprint_r+0x34>
 800e716:	f000 fe3d 	bl	800f394 <__sfvwrite_r>
 800e71a:	e7dd      	b.n	800e6d8 <__sprint_r+0x1c>
 800e71c:	4618      	mov	r0, r3
 800e71e:	e7dd      	b.n	800e6dc <__sprint_r+0x20>

0800e720 <_vfiprintf_r>:
 800e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	b0bb      	sub	sp, #236	@ 0xec
 800e726:	460f      	mov	r7, r1
 800e728:	4693      	mov	fp, r2
 800e72a:	461c      	mov	r4, r3
 800e72c:	461d      	mov	r5, r3
 800e72e:	9000      	str	r0, [sp, #0]
 800e730:	b118      	cbz	r0, 800e73a <_vfiprintf_r+0x1a>
 800e732:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e734:	b90b      	cbnz	r3, 800e73a <_vfiprintf_r+0x1a>
 800e736:	f000 fe15 	bl	800f364 <__sinit>
 800e73a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e73c:	07db      	lsls	r3, r3, #31
 800e73e:	d405      	bmi.n	800e74c <_vfiprintf_r+0x2c>
 800e740:	89bb      	ldrh	r3, [r7, #12]
 800e742:	059e      	lsls	r6, r3, #22
 800e744:	d402      	bmi.n	800e74c <_vfiprintf_r+0x2c>
 800e746:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e748:	f001 f8ba 	bl	800f8c0 <__retarget_lock_acquire_recursive>
 800e74c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e750:	0498      	lsls	r0, r3, #18
 800e752:	d406      	bmi.n	800e762 <_vfiprintf_r+0x42>
 800e754:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e758:	81bb      	strh	r3, [r7, #12]
 800e75a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e75c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e760:	667b      	str	r3, [r7, #100]	@ 0x64
 800e762:	89bb      	ldrh	r3, [r7, #12]
 800e764:	0719      	lsls	r1, r3, #28
 800e766:	d501      	bpl.n	800e76c <_vfiprintf_r+0x4c>
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	b9ab      	cbnz	r3, 800e798 <_vfiprintf_r+0x78>
 800e76c:	9800      	ldr	r0, [sp, #0]
 800e76e:	4639      	mov	r1, r7
 800e770:	f000 ff7a 	bl	800f668 <__swsetup_r>
 800e774:	b180      	cbz	r0, 800e798 <_vfiprintf_r+0x78>
 800e776:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e778:	07da      	lsls	r2, r3, #31
 800e77a:	d506      	bpl.n	800e78a <_vfiprintf_r+0x6a>
 800e77c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e780:	9303      	str	r3, [sp, #12]
 800e782:	9803      	ldr	r0, [sp, #12]
 800e784:	b03b      	add	sp, #236	@ 0xec
 800e786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e78a:	89bb      	ldrh	r3, [r7, #12]
 800e78c:	059b      	lsls	r3, r3, #22
 800e78e:	d4f5      	bmi.n	800e77c <_vfiprintf_r+0x5c>
 800e790:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e792:	f001 f896 	bl	800f8c2 <__retarget_lock_release_recursive>
 800e796:	e7f1      	b.n	800e77c <_vfiprintf_r+0x5c>
 800e798:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e79c:	f003 021a 	and.w	r2, r3, #26
 800e7a0:	2a0a      	cmp	r2, #10
 800e7a2:	d114      	bne.n	800e7ce <_vfiprintf_r+0xae>
 800e7a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e7a8:	2a00      	cmp	r2, #0
 800e7aa:	db10      	blt.n	800e7ce <_vfiprintf_r+0xae>
 800e7ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e7ae:	07d6      	lsls	r6, r2, #31
 800e7b0:	d404      	bmi.n	800e7bc <_vfiprintf_r+0x9c>
 800e7b2:	059d      	lsls	r5, r3, #22
 800e7b4:	d402      	bmi.n	800e7bc <_vfiprintf_r+0x9c>
 800e7b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e7b8:	f001 f883 	bl	800f8c2 <__retarget_lock_release_recursive>
 800e7bc:	9800      	ldr	r0, [sp, #0]
 800e7be:	4623      	mov	r3, r4
 800e7c0:	465a      	mov	r2, fp
 800e7c2:	4639      	mov	r1, r7
 800e7c4:	b03b      	add	sp, #236	@ 0xec
 800e7c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ca:	f000 bc31 	b.w	800f030 <__sbprintf>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800e7d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800e7d8:	ae11      	add	r6, sp, #68	@ 0x44
 800e7da:	960e      	str	r6, [sp, #56]	@ 0x38
 800e7dc:	9307      	str	r3, [sp, #28]
 800e7de:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7e0:	9303      	str	r3, [sp, #12]
 800e7e2:	465b      	mov	r3, fp
 800e7e4:	461c      	mov	r4, r3
 800e7e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e7ea:	b10a      	cbz	r2, 800e7f0 <_vfiprintf_r+0xd0>
 800e7ec:	2a25      	cmp	r2, #37	@ 0x25
 800e7ee:	d1f9      	bne.n	800e7e4 <_vfiprintf_r+0xc4>
 800e7f0:	ebb4 080b 	subs.w	r8, r4, fp
 800e7f4:	d00d      	beq.n	800e812 <_vfiprintf_r+0xf2>
 800e7f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e7f8:	4443      	add	r3, r8
 800e7fa:	9310      	str	r3, [sp, #64]	@ 0x40
 800e7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7fe:	3301      	adds	r3, #1
 800e800:	2b07      	cmp	r3, #7
 800e802:	e9c6 b800 	strd	fp, r8, [r6]
 800e806:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e808:	dc75      	bgt.n	800e8f6 <_vfiprintf_r+0x1d6>
 800e80a:	3608      	adds	r6, #8
 800e80c:	9b03      	ldr	r3, [sp, #12]
 800e80e:	4443      	add	r3, r8
 800e810:	9303      	str	r3, [sp, #12]
 800e812:	7823      	ldrb	r3, [r4, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	f000 83cd 	beq.w	800efb4 <_vfiprintf_r+0x894>
 800e81a:	2300      	movs	r3, #0
 800e81c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e820:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800e824:	3401      	adds	r4, #1
 800e826:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800e82a:	469a      	mov	sl, r3
 800e82c:	46a3      	mov	fp, r4
 800e82e:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800e832:	f1a3 0220 	sub.w	r2, r3, #32
 800e836:	2a5a      	cmp	r2, #90	@ 0x5a
 800e838:	f200 8316 	bhi.w	800ee68 <_vfiprintf_r+0x748>
 800e83c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e840:	0314009a 	.word	0x0314009a
 800e844:	00a20314 	.word	0x00a20314
 800e848:	03140314 	.word	0x03140314
 800e84c:	00820314 	.word	0x00820314
 800e850:	03140314 	.word	0x03140314
 800e854:	00af00a5 	.word	0x00af00a5
 800e858:	00ac0314 	.word	0x00ac0314
 800e85c:	031400b1 	.word	0x031400b1
 800e860:	00d000cd 	.word	0x00d000cd
 800e864:	00d000d0 	.word	0x00d000d0
 800e868:	00d000d0 	.word	0x00d000d0
 800e86c:	00d000d0 	.word	0x00d000d0
 800e870:	00d000d0 	.word	0x00d000d0
 800e874:	03140314 	.word	0x03140314
 800e878:	03140314 	.word	0x03140314
 800e87c:	03140314 	.word	0x03140314
 800e880:	03140314 	.word	0x03140314
 800e884:	00f70314 	.word	0x00f70314
 800e888:	03140104 	.word	0x03140104
 800e88c:	03140314 	.word	0x03140314
 800e890:	03140314 	.word	0x03140314
 800e894:	03140314 	.word	0x03140314
 800e898:	03140314 	.word	0x03140314
 800e89c:	01520314 	.word	0x01520314
 800e8a0:	03140314 	.word	0x03140314
 800e8a4:	019a0314 	.word	0x019a0314
 800e8a8:	027a0314 	.word	0x027a0314
 800e8ac:	03140314 	.word	0x03140314
 800e8b0:	0314029a 	.word	0x0314029a
 800e8b4:	03140314 	.word	0x03140314
 800e8b8:	03140314 	.word	0x03140314
 800e8bc:	03140314 	.word	0x03140314
 800e8c0:	03140314 	.word	0x03140314
 800e8c4:	00f70314 	.word	0x00f70314
 800e8c8:	03140106 	.word	0x03140106
 800e8cc:	03140314 	.word	0x03140314
 800e8d0:	010600e0 	.word	0x010600e0
 800e8d4:	031400f1 	.word	0x031400f1
 800e8d8:	031400eb 	.word	0x031400eb
 800e8dc:	01540132 	.word	0x01540132
 800e8e0:	00f10189 	.word	0x00f10189
 800e8e4:	019a0314 	.word	0x019a0314
 800e8e8:	027c0098 	.word	0x027c0098
 800e8ec:	03140314 	.word	0x03140314
 800e8f0:	03140065 	.word	0x03140065
 800e8f4:	0098      	.short	0x0098
 800e8f6:	9800      	ldr	r0, [sp, #0]
 800e8f8:	aa0e      	add	r2, sp, #56	@ 0x38
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	f7ff fede 	bl	800e6bc <__sprint_r>
 800e900:	2800      	cmp	r0, #0
 800e902:	f040 8336 	bne.w	800ef72 <_vfiprintf_r+0x852>
 800e906:	ae11      	add	r6, sp, #68	@ 0x44
 800e908:	e780      	b.n	800e80c <_vfiprintf_r+0xec>
 800e90a:	4a99      	ldr	r2, [pc, #612]	@ (800eb70 <_vfiprintf_r+0x450>)
 800e90c:	9205      	str	r2, [sp, #20]
 800e90e:	f01a 0220 	ands.w	r2, sl, #32
 800e912:	f000 8231 	beq.w	800ed78 <_vfiprintf_r+0x658>
 800e916:	3507      	adds	r5, #7
 800e918:	f025 0507 	bic.w	r5, r5, #7
 800e91c:	46a8      	mov	r8, r5
 800e91e:	686d      	ldr	r5, [r5, #4]
 800e920:	f858 4b08 	ldr.w	r4, [r8], #8
 800e924:	f01a 0f01 	tst.w	sl, #1
 800e928:	d009      	beq.n	800e93e <_vfiprintf_r+0x21e>
 800e92a:	ea54 0205 	orrs.w	r2, r4, r5
 800e92e:	bf1f      	itttt	ne
 800e930:	2230      	movne	r2, #48	@ 0x30
 800e932:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800e936:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800e93a:	f04a 0a02 	orrne.w	sl, sl, #2
 800e93e:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800e942:	e112      	b.n	800eb6a <_vfiprintf_r+0x44a>
 800e944:	9800      	ldr	r0, [sp, #0]
 800e946:	f000 ff8b 	bl	800f860 <_localeconv_r>
 800e94a:	6843      	ldr	r3, [r0, #4]
 800e94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e94e:	4618      	mov	r0, r3
 800e950:	f7f1 fd16 	bl	8000380 <strlen>
 800e954:	9007      	str	r0, [sp, #28]
 800e956:	9800      	ldr	r0, [sp, #0]
 800e958:	f000 ff82 	bl	800f860 <_localeconv_r>
 800e95c:	6883      	ldr	r3, [r0, #8]
 800e95e:	9306      	str	r3, [sp, #24]
 800e960:	9b07      	ldr	r3, [sp, #28]
 800e962:	b12b      	cbz	r3, 800e970 <_vfiprintf_r+0x250>
 800e964:	9b06      	ldr	r3, [sp, #24]
 800e966:	b11b      	cbz	r3, 800e970 <_vfiprintf_r+0x250>
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	b10b      	cbz	r3, 800e970 <_vfiprintf_r+0x250>
 800e96c:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800e970:	465c      	mov	r4, fp
 800e972:	e75b      	b.n	800e82c <_vfiprintf_r+0x10c>
 800e974:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d1f9      	bne.n	800e970 <_vfiprintf_r+0x250>
 800e97c:	2320      	movs	r3, #32
 800e97e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800e982:	e7f5      	b.n	800e970 <_vfiprintf_r+0x250>
 800e984:	f04a 0a01 	orr.w	sl, sl, #1
 800e988:	e7f2      	b.n	800e970 <_vfiprintf_r+0x250>
 800e98a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e98e:	9302      	str	r3, [sp, #8]
 800e990:	2b00      	cmp	r3, #0
 800e992:	daed      	bge.n	800e970 <_vfiprintf_r+0x250>
 800e994:	425b      	negs	r3, r3
 800e996:	9302      	str	r3, [sp, #8]
 800e998:	f04a 0a04 	orr.w	sl, sl, #4
 800e99c:	e7e8      	b.n	800e970 <_vfiprintf_r+0x250>
 800e99e:	232b      	movs	r3, #43	@ 0x2b
 800e9a0:	e7ed      	b.n	800e97e <_vfiprintf_r+0x25e>
 800e9a2:	465a      	mov	r2, fp
 800e9a4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e9a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9aa:	d112      	bne.n	800e9d2 <_vfiprintf_r+0x2b2>
 800e9ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e9b4:	9301      	str	r3, [sp, #4]
 800e9b6:	4693      	mov	fp, r2
 800e9b8:	e7da      	b.n	800e970 <_vfiprintf_r+0x250>
 800e9ba:	9b01      	ldr	r3, [sp, #4]
 800e9bc:	fb00 1303 	mla	r3, r0, r3, r1
 800e9c0:	9301      	str	r3, [sp, #4]
 800e9c2:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e9c6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800e9ca:	2909      	cmp	r1, #9
 800e9cc:	d9f5      	bls.n	800e9ba <_vfiprintf_r+0x29a>
 800e9ce:	4693      	mov	fp, r2
 800e9d0:	e72f      	b.n	800e832 <_vfiprintf_r+0x112>
 800e9d2:	2100      	movs	r1, #0
 800e9d4:	9101      	str	r1, [sp, #4]
 800e9d6:	200a      	movs	r0, #10
 800e9d8:	e7f5      	b.n	800e9c6 <_vfiprintf_r+0x2a6>
 800e9da:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800e9de:	e7c7      	b.n	800e970 <_vfiprintf_r+0x250>
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	465a      	mov	r2, fp
 800e9e4:	9102      	str	r1, [sp, #8]
 800e9e6:	200a      	movs	r0, #10
 800e9e8:	9902      	ldr	r1, [sp, #8]
 800e9ea:	3b30      	subs	r3, #48	@ 0x30
 800e9ec:	fb00 3301 	mla	r3, r0, r1, r3
 800e9f0:	9302      	str	r3, [sp, #8]
 800e9f2:	f812 3b01 	ldrb.w	r3, [r2], #1
 800e9f6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800e9fa:	2909      	cmp	r1, #9
 800e9fc:	d9f4      	bls.n	800e9e8 <_vfiprintf_r+0x2c8>
 800e9fe:	e7e6      	b.n	800e9ce <_vfiprintf_r+0x2ae>
 800ea00:	f89b 3000 	ldrb.w	r3, [fp]
 800ea04:	2b68      	cmp	r3, #104	@ 0x68
 800ea06:	bf06      	itte	eq
 800ea08:	f10b 0b01 	addeq.w	fp, fp, #1
 800ea0c:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800ea10:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800ea14:	e7ac      	b.n	800e970 <_vfiprintf_r+0x250>
 800ea16:	f89b 3000 	ldrb.w	r3, [fp]
 800ea1a:	2b6c      	cmp	r3, #108	@ 0x6c
 800ea1c:	d104      	bne.n	800ea28 <_vfiprintf_r+0x308>
 800ea1e:	f10b 0b01 	add.w	fp, fp, #1
 800ea22:	f04a 0a20 	orr.w	sl, sl, #32
 800ea26:	e7a3      	b.n	800e970 <_vfiprintf_r+0x250>
 800ea28:	f04a 0a10 	orr.w	sl, sl, #16
 800ea2c:	e7a0      	b.n	800e970 <_vfiprintf_r+0x250>
 800ea2e:	46a8      	mov	r8, r5
 800ea30:	2400      	movs	r4, #0
 800ea32:	f858 3b04 	ldr.w	r3, [r8], #4
 800ea36:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800ea3a:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800ea3e:	2301      	movs	r3, #1
 800ea40:	9301      	str	r3, [sp, #4]
 800ea42:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800ea46:	e0ab      	b.n	800eba0 <_vfiprintf_r+0x480>
 800ea48:	f04a 0a10 	orr.w	sl, sl, #16
 800ea4c:	f01a 0f20 	tst.w	sl, #32
 800ea50:	d011      	beq.n	800ea76 <_vfiprintf_r+0x356>
 800ea52:	3507      	adds	r5, #7
 800ea54:	f025 0507 	bic.w	r5, r5, #7
 800ea58:	46a8      	mov	r8, r5
 800ea5a:	686d      	ldr	r5, [r5, #4]
 800ea5c:	f858 4b08 	ldr.w	r4, [r8], #8
 800ea60:	2d00      	cmp	r5, #0
 800ea62:	da06      	bge.n	800ea72 <_vfiprintf_r+0x352>
 800ea64:	4264      	negs	r4, r4
 800ea66:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800ea6a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ea6e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ea72:	2301      	movs	r3, #1
 800ea74:	e048      	b.n	800eb08 <_vfiprintf_r+0x3e8>
 800ea76:	46a8      	mov	r8, r5
 800ea78:	f01a 0f10 	tst.w	sl, #16
 800ea7c:	f858 5b04 	ldr.w	r5, [r8], #4
 800ea80:	d002      	beq.n	800ea88 <_vfiprintf_r+0x368>
 800ea82:	462c      	mov	r4, r5
 800ea84:	17ed      	asrs	r5, r5, #31
 800ea86:	e7eb      	b.n	800ea60 <_vfiprintf_r+0x340>
 800ea88:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ea8c:	d003      	beq.n	800ea96 <_vfiprintf_r+0x376>
 800ea8e:	b22c      	sxth	r4, r5
 800ea90:	f345 35c0 	sbfx	r5, r5, #15, #1
 800ea94:	e7e4      	b.n	800ea60 <_vfiprintf_r+0x340>
 800ea96:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ea9a:	d0f2      	beq.n	800ea82 <_vfiprintf_r+0x362>
 800ea9c:	b26c      	sxtb	r4, r5
 800ea9e:	f345 15c0 	sbfx	r5, r5, #7, #1
 800eaa2:	e7dd      	b.n	800ea60 <_vfiprintf_r+0x340>
 800eaa4:	f01a 0f20 	tst.w	sl, #32
 800eaa8:	d007      	beq.n	800eaba <_vfiprintf_r+0x39a>
 800eaaa:	9a03      	ldr	r2, [sp, #12]
 800eaac:	682b      	ldr	r3, [r5, #0]
 800eaae:	9903      	ldr	r1, [sp, #12]
 800eab0:	17d2      	asrs	r2, r2, #31
 800eab2:	e9c3 1200 	strd	r1, r2, [r3]
 800eab6:	3504      	adds	r5, #4
 800eab8:	e693      	b.n	800e7e2 <_vfiprintf_r+0xc2>
 800eaba:	f01a 0f10 	tst.w	sl, #16
 800eabe:	d003      	beq.n	800eac8 <_vfiprintf_r+0x3a8>
 800eac0:	682b      	ldr	r3, [r5, #0]
 800eac2:	9a03      	ldr	r2, [sp, #12]
 800eac4:	601a      	str	r2, [r3, #0]
 800eac6:	e7f6      	b.n	800eab6 <_vfiprintf_r+0x396>
 800eac8:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800eacc:	d003      	beq.n	800ead6 <_vfiprintf_r+0x3b6>
 800eace:	682b      	ldr	r3, [r5, #0]
 800ead0:	9a03      	ldr	r2, [sp, #12]
 800ead2:	801a      	strh	r2, [r3, #0]
 800ead4:	e7ef      	b.n	800eab6 <_vfiprintf_r+0x396>
 800ead6:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800eada:	d0f1      	beq.n	800eac0 <_vfiprintf_r+0x3a0>
 800eadc:	682b      	ldr	r3, [r5, #0]
 800eade:	9a03      	ldr	r2, [sp, #12]
 800eae0:	701a      	strb	r2, [r3, #0]
 800eae2:	e7e8      	b.n	800eab6 <_vfiprintf_r+0x396>
 800eae4:	f04a 0a10 	orr.w	sl, sl, #16
 800eae8:	f01a 0320 	ands.w	r3, sl, #32
 800eaec:	d01f      	beq.n	800eb2e <_vfiprintf_r+0x40e>
 800eaee:	3507      	adds	r5, #7
 800eaf0:	f025 0507 	bic.w	r5, r5, #7
 800eaf4:	46a8      	mov	r8, r5
 800eaf6:	686d      	ldr	r5, [r5, #4]
 800eaf8:	f858 4b08 	ldr.w	r4, [r8], #8
 800eafc:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800eb00:	2300      	movs	r3, #0
 800eb02:	2200      	movs	r2, #0
 800eb04:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800eb08:	9a01      	ldr	r2, [sp, #4]
 800eb0a:	3201      	adds	r2, #1
 800eb0c:	f000 825f 	beq.w	800efce <_vfiprintf_r+0x8ae>
 800eb10:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800eb14:	9204      	str	r2, [sp, #16]
 800eb16:	ea54 0205 	orrs.w	r2, r4, r5
 800eb1a:	f040 825e 	bne.w	800efda <_vfiprintf_r+0x8ba>
 800eb1e:	9a01      	ldr	r2, [sp, #4]
 800eb20:	2a00      	cmp	r2, #0
 800eb22:	f000 8198 	beq.w	800ee56 <_vfiprintf_r+0x736>
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	f040 825a 	bne.w	800efe0 <_vfiprintf_r+0x8c0>
 800eb2c:	e13b      	b.n	800eda6 <_vfiprintf_r+0x686>
 800eb2e:	46a8      	mov	r8, r5
 800eb30:	f01a 0510 	ands.w	r5, sl, #16
 800eb34:	f858 4b04 	ldr.w	r4, [r8], #4
 800eb38:	d001      	beq.n	800eb3e <_vfiprintf_r+0x41e>
 800eb3a:	461d      	mov	r5, r3
 800eb3c:	e7de      	b.n	800eafc <_vfiprintf_r+0x3dc>
 800eb3e:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800eb42:	d001      	beq.n	800eb48 <_vfiprintf_r+0x428>
 800eb44:	b2a4      	uxth	r4, r4
 800eb46:	e7d9      	b.n	800eafc <_vfiprintf_r+0x3dc>
 800eb48:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800eb4c:	d0d6      	beq.n	800eafc <_vfiprintf_r+0x3dc>
 800eb4e:	b2e4      	uxtb	r4, r4
 800eb50:	e7f3      	b.n	800eb3a <_vfiprintf_r+0x41a>
 800eb52:	46a8      	mov	r8, r5
 800eb54:	f647 0330 	movw	r3, #30768	@ 0x7830
 800eb58:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800eb5c:	f858 4b04 	ldr.w	r4, [r8], #4
 800eb60:	4b03      	ldr	r3, [pc, #12]	@ (800eb70 <_vfiprintf_r+0x450>)
 800eb62:	9305      	str	r3, [sp, #20]
 800eb64:	2500      	movs	r5, #0
 800eb66:	f04a 0a02 	orr.w	sl, sl, #2
 800eb6a:	2302      	movs	r3, #2
 800eb6c:	e7c9      	b.n	800eb02 <_vfiprintf_r+0x3e2>
 800eb6e:	bf00      	nop
 800eb70:	08014789 	.word	0x08014789
 800eb74:	9b01      	ldr	r3, [sp, #4]
 800eb76:	46a8      	mov	r8, r5
 800eb78:	1c5c      	adds	r4, r3, #1
 800eb7a:	f04f 0500 	mov.w	r5, #0
 800eb7e:	f858 9b04 	ldr.w	r9, [r8], #4
 800eb82:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800eb86:	f000 80d0 	beq.w	800ed2a <_vfiprintf_r+0x60a>
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	4629      	mov	r1, r5
 800eb8e:	4648      	mov	r0, r9
 800eb90:	f7f1 fba6 	bl	80002e0 <memchr>
 800eb94:	4604      	mov	r4, r0
 800eb96:	b118      	cbz	r0, 800eba0 <_vfiprintf_r+0x480>
 800eb98:	eba0 0309 	sub.w	r3, r0, r9
 800eb9c:	9301      	str	r3, [sp, #4]
 800eb9e:	462c      	mov	r4, r5
 800eba0:	9b01      	ldr	r3, [sp, #4]
 800eba2:	42a3      	cmp	r3, r4
 800eba4:	bfb8      	it	lt
 800eba6:	4623      	movlt	r3, r4
 800eba8:	9304      	str	r3, [sp, #16]
 800ebaa:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ebae:	b113      	cbz	r3, 800ebb6 <_vfiprintf_r+0x496>
 800ebb0:	9b04      	ldr	r3, [sp, #16]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	9304      	str	r3, [sp, #16]
 800ebb6:	f01a 0302 	ands.w	r3, sl, #2
 800ebba:	9308      	str	r3, [sp, #32]
 800ebbc:	bf1e      	ittt	ne
 800ebbe:	9b04      	ldrne	r3, [sp, #16]
 800ebc0:	3302      	addne	r3, #2
 800ebc2:	9304      	strne	r3, [sp, #16]
 800ebc4:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800ebc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebca:	d11f      	bne.n	800ec0c <_vfiprintf_r+0x4ec>
 800ebcc:	9b02      	ldr	r3, [sp, #8]
 800ebce:	9a04      	ldr	r2, [sp, #16]
 800ebd0:	1a9d      	subs	r5, r3, r2
 800ebd2:	2d00      	cmp	r5, #0
 800ebd4:	dd1a      	ble.n	800ec0c <_vfiprintf_r+0x4ec>
 800ebd6:	4ba9      	ldr	r3, [pc, #676]	@ (800ee7c <_vfiprintf_r+0x75c>)
 800ebd8:	6033      	str	r3, [r6, #0]
 800ebda:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800ebde:	2d10      	cmp	r5, #16
 800ebe0:	f102 0201 	add.w	r2, r2, #1
 800ebe4:	f106 0008 	add.w	r0, r6, #8
 800ebe8:	f300 814e 	bgt.w	800ee88 <_vfiprintf_r+0x768>
 800ebec:	6075      	str	r5, [r6, #4]
 800ebee:	2a07      	cmp	r2, #7
 800ebf0:	4465      	add	r5, ip
 800ebf2:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800ebf6:	f340 815a 	ble.w	800eeae <_vfiprintf_r+0x78e>
 800ebfa:	9800      	ldr	r0, [sp, #0]
 800ebfc:	aa0e      	add	r2, sp, #56	@ 0x38
 800ebfe:	4639      	mov	r1, r7
 800ec00:	f7ff fd5c 	bl	800e6bc <__sprint_r>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	f040 81b4 	bne.w	800ef72 <_vfiprintf_r+0x852>
 800ec0a:	ae11      	add	r6, sp, #68	@ 0x44
 800ec0c:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800ec10:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800ec14:	b161      	cbz	r1, 800ec30 <_vfiprintf_r+0x510>
 800ec16:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	6031      	str	r1, [r6, #0]
 800ec1e:	2101      	movs	r1, #1
 800ec20:	440a      	add	r2, r1
 800ec22:	2b07      	cmp	r3, #7
 800ec24:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800ec28:	6071      	str	r1, [r6, #4]
 800ec2a:	f300 8142 	bgt.w	800eeb2 <_vfiprintf_r+0x792>
 800ec2e:	3608      	adds	r6, #8
 800ec30:	9908      	ldr	r1, [sp, #32]
 800ec32:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800ec36:	b159      	cbz	r1, 800ec50 <_vfiprintf_r+0x530>
 800ec38:	a90d      	add	r1, sp, #52	@ 0x34
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	6031      	str	r1, [r6, #0]
 800ec3e:	2102      	movs	r1, #2
 800ec40:	440a      	add	r2, r1
 800ec42:	2b07      	cmp	r3, #7
 800ec44:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800ec48:	6071      	str	r1, [r6, #4]
 800ec4a:	f300 813b 	bgt.w	800eec4 <_vfiprintf_r+0x7a4>
 800ec4e:	3608      	adds	r6, #8
 800ec50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec52:	2b80      	cmp	r3, #128	@ 0x80
 800ec54:	d11f      	bne.n	800ec96 <_vfiprintf_r+0x576>
 800ec56:	9b02      	ldr	r3, [sp, #8]
 800ec58:	9a04      	ldr	r2, [sp, #16]
 800ec5a:	1a9d      	subs	r5, r3, r2
 800ec5c:	2d00      	cmp	r5, #0
 800ec5e:	dd1a      	ble.n	800ec96 <_vfiprintf_r+0x576>
 800ec60:	4b87      	ldr	r3, [pc, #540]	@ (800ee80 <_vfiprintf_r+0x760>)
 800ec62:	6033      	str	r3, [r6, #0]
 800ec64:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800ec68:	2d10      	cmp	r5, #16
 800ec6a:	f102 0201 	add.w	r2, r2, #1
 800ec6e:	f106 0008 	add.w	r0, r6, #8
 800ec72:	f300 8130 	bgt.w	800eed6 <_vfiprintf_r+0x7b6>
 800ec76:	6075      	str	r5, [r6, #4]
 800ec78:	2a07      	cmp	r2, #7
 800ec7a:	4465      	add	r5, ip
 800ec7c:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800ec80:	f340 813c 	ble.w	800eefc <_vfiprintf_r+0x7dc>
 800ec84:	9800      	ldr	r0, [sp, #0]
 800ec86:	aa0e      	add	r2, sp, #56	@ 0x38
 800ec88:	4639      	mov	r1, r7
 800ec8a:	f7ff fd17 	bl	800e6bc <__sprint_r>
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	f040 816f 	bne.w	800ef72 <_vfiprintf_r+0x852>
 800ec94:	ae11      	add	r6, sp, #68	@ 0x44
 800ec96:	9b01      	ldr	r3, [sp, #4]
 800ec98:	1ae4      	subs	r4, r4, r3
 800ec9a:	2c00      	cmp	r4, #0
 800ec9c:	dd1a      	ble.n	800ecd4 <_vfiprintf_r+0x5b4>
 800ec9e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800eca2:	4877      	ldr	r0, [pc, #476]	@ (800ee80 <_vfiprintf_r+0x760>)
 800eca4:	6030      	str	r0, [r6, #0]
 800eca6:	2c10      	cmp	r4, #16
 800eca8:	f103 0301 	add.w	r3, r3, #1
 800ecac:	f106 0108 	add.w	r1, r6, #8
 800ecb0:	f300 8126 	bgt.w	800ef00 <_vfiprintf_r+0x7e0>
 800ecb4:	6074      	str	r4, [r6, #4]
 800ecb6:	2b07      	cmp	r3, #7
 800ecb8:	4414      	add	r4, r2
 800ecba:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800ecbe:	f340 8130 	ble.w	800ef22 <_vfiprintf_r+0x802>
 800ecc2:	9800      	ldr	r0, [sp, #0]
 800ecc4:	aa0e      	add	r2, sp, #56	@ 0x38
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	f7ff fcf8 	bl	800e6bc <__sprint_r>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	f040 8150 	bne.w	800ef72 <_vfiprintf_r+0x852>
 800ecd2:	ae11      	add	r6, sp, #68	@ 0x44
 800ecd4:	9b01      	ldr	r3, [sp, #4]
 800ecd6:	9a01      	ldr	r2, [sp, #4]
 800ecd8:	6073      	str	r3, [r6, #4]
 800ecda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ecdc:	f8c6 9000 	str.w	r9, [r6]
 800ece0:	4413      	add	r3, r2
 800ece2:	9310      	str	r3, [sp, #64]	@ 0x40
 800ece4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ece6:	3301      	adds	r3, #1
 800ece8:	2b07      	cmp	r3, #7
 800ecea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ecec:	f300 811b 	bgt.w	800ef26 <_vfiprintf_r+0x806>
 800ecf0:	f106 0308 	add.w	r3, r6, #8
 800ecf4:	f01a 0f04 	tst.w	sl, #4
 800ecf8:	f040 811d 	bne.w	800ef36 <_vfiprintf_r+0x816>
 800ecfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed00:	9904      	ldr	r1, [sp, #16]
 800ed02:	428a      	cmp	r2, r1
 800ed04:	bfac      	ite	ge
 800ed06:	189b      	addge	r3, r3, r2
 800ed08:	185b      	addlt	r3, r3, r1
 800ed0a:	9303      	str	r3, [sp, #12]
 800ed0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed0e:	b13b      	cbz	r3, 800ed20 <_vfiprintf_r+0x600>
 800ed10:	9800      	ldr	r0, [sp, #0]
 800ed12:	aa0e      	add	r2, sp, #56	@ 0x38
 800ed14:	4639      	mov	r1, r7
 800ed16:	f7ff fcd1 	bl	800e6bc <__sprint_r>
 800ed1a:	2800      	cmp	r0, #0
 800ed1c:	f040 8129 	bne.w	800ef72 <_vfiprintf_r+0x852>
 800ed20:	2300      	movs	r3, #0
 800ed22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ed24:	4645      	mov	r5, r8
 800ed26:	ae11      	add	r6, sp, #68	@ 0x44
 800ed28:	e55b      	b.n	800e7e2 <_vfiprintf_r+0xc2>
 800ed2a:	4648      	mov	r0, r9
 800ed2c:	f7f1 fb28 	bl	8000380 <strlen>
 800ed30:	9001      	str	r0, [sp, #4]
 800ed32:	e734      	b.n	800eb9e <_vfiprintf_r+0x47e>
 800ed34:	f04a 0a10 	orr.w	sl, sl, #16
 800ed38:	f01a 0320 	ands.w	r3, sl, #32
 800ed3c:	d008      	beq.n	800ed50 <_vfiprintf_r+0x630>
 800ed3e:	3507      	adds	r5, #7
 800ed40:	f025 0507 	bic.w	r5, r5, #7
 800ed44:	46a8      	mov	r8, r5
 800ed46:	686d      	ldr	r5, [r5, #4]
 800ed48:	f858 4b08 	ldr.w	r4, [r8], #8
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e6d8      	b.n	800eb02 <_vfiprintf_r+0x3e2>
 800ed50:	46a8      	mov	r8, r5
 800ed52:	f01a 0510 	ands.w	r5, sl, #16
 800ed56:	f858 4b04 	ldr.w	r4, [r8], #4
 800ed5a:	d001      	beq.n	800ed60 <_vfiprintf_r+0x640>
 800ed5c:	461d      	mov	r5, r3
 800ed5e:	e7f5      	b.n	800ed4c <_vfiprintf_r+0x62c>
 800ed60:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800ed64:	d001      	beq.n	800ed6a <_vfiprintf_r+0x64a>
 800ed66:	b2a4      	uxth	r4, r4
 800ed68:	e7f0      	b.n	800ed4c <_vfiprintf_r+0x62c>
 800ed6a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800ed6e:	d0ed      	beq.n	800ed4c <_vfiprintf_r+0x62c>
 800ed70:	b2e4      	uxtb	r4, r4
 800ed72:	e7f3      	b.n	800ed5c <_vfiprintf_r+0x63c>
 800ed74:	4a43      	ldr	r2, [pc, #268]	@ (800ee84 <_vfiprintf_r+0x764>)
 800ed76:	e5c9      	b.n	800e90c <_vfiprintf_r+0x1ec>
 800ed78:	46a8      	mov	r8, r5
 800ed7a:	f01a 0510 	ands.w	r5, sl, #16
 800ed7e:	f858 4b04 	ldr.w	r4, [r8], #4
 800ed82:	d001      	beq.n	800ed88 <_vfiprintf_r+0x668>
 800ed84:	4615      	mov	r5, r2
 800ed86:	e5cd      	b.n	800e924 <_vfiprintf_r+0x204>
 800ed88:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800ed8c:	d001      	beq.n	800ed92 <_vfiprintf_r+0x672>
 800ed8e:	b2a4      	uxth	r4, r4
 800ed90:	e5c8      	b.n	800e924 <_vfiprintf_r+0x204>
 800ed92:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800ed96:	f43f adc5 	beq.w	800e924 <_vfiprintf_r+0x204>
 800ed9a:	b2e4      	uxtb	r4, r4
 800ed9c:	e7f2      	b.n	800ed84 <_vfiprintf_r+0x664>
 800ed9e:	2c0a      	cmp	r4, #10
 800eda0:	f175 0300 	sbcs.w	r3, r5, #0
 800eda4:	d206      	bcs.n	800edb4 <_vfiprintf_r+0x694>
 800eda6:	3430      	adds	r4, #48	@ 0x30
 800eda8:	b2e4      	uxtb	r4, r4
 800edaa:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800edae:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800edb2:	e131      	b.n	800f018 <_vfiprintf_r+0x8f8>
 800edb4:	ab3a      	add	r3, sp, #232	@ 0xe8
 800edb6:	9308      	str	r3, [sp, #32]
 800edb8:	9b04      	ldr	r3, [sp, #16]
 800edba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800edbe:	f04f 0a00 	mov.w	sl, #0
 800edc2:	930a      	str	r3, [sp, #40]	@ 0x28
 800edc4:	220a      	movs	r2, #10
 800edc6:	2300      	movs	r3, #0
 800edc8:	4620      	mov	r0, r4
 800edca:	4629      	mov	r1, r5
 800edcc:	f7f1 fae0 	bl	8000390 <__aeabi_uldivmod>
 800edd0:	460b      	mov	r3, r1
 800edd2:	9908      	ldr	r1, [sp, #32]
 800edd4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800edd6:	3230      	adds	r2, #48	@ 0x30
 800edd8:	f801 2c01 	strb.w	r2, [r1, #-1]
 800eddc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800edde:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 800ede2:	f10a 0a01 	add.w	sl, sl, #1
 800ede6:	b1e2      	cbz	r2, 800ee22 <_vfiprintf_r+0x702>
 800ede8:	9a06      	ldr	r2, [sp, #24]
 800edea:	7812      	ldrb	r2, [r2, #0]
 800edec:	4552      	cmp	r2, sl
 800edee:	d118      	bne.n	800ee22 <_vfiprintf_r+0x702>
 800edf0:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800edf4:	d015      	beq.n	800ee22 <_vfiprintf_r+0x702>
 800edf6:	2c0a      	cmp	r4, #10
 800edf8:	f175 0200 	sbcs.w	r2, r5, #0
 800edfc:	d311      	bcc.n	800ee22 <_vfiprintf_r+0x702>
 800edfe:	9308      	str	r3, [sp, #32]
 800ee00:	9b07      	ldr	r3, [sp, #28]
 800ee02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee04:	eba9 0903 	sub.w	r9, r9, r3
 800ee08:	461a      	mov	r2, r3
 800ee0a:	4648      	mov	r0, r9
 800ee0c:	f000 fd0e 	bl	800f82c <strncpy>
 800ee10:	9b06      	ldr	r3, [sp, #24]
 800ee12:	785a      	ldrb	r2, [r3, #1]
 800ee14:	9b08      	ldr	r3, [sp, #32]
 800ee16:	b172      	cbz	r2, 800ee36 <_vfiprintf_r+0x716>
 800ee18:	9a06      	ldr	r2, [sp, #24]
 800ee1a:	3201      	adds	r2, #1
 800ee1c:	9206      	str	r2, [sp, #24]
 800ee1e:	f04f 0a00 	mov.w	sl, #0
 800ee22:	2c0a      	cmp	r4, #10
 800ee24:	f175 0500 	sbcs.w	r5, r5, #0
 800ee28:	f0c0 80f6 	bcc.w	800f018 <_vfiprintf_r+0x8f8>
 800ee2c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ee2e:	f8cd 9020 	str.w	r9, [sp, #32]
 800ee32:	461d      	mov	r5, r3
 800ee34:	e7c6      	b.n	800edc4 <_vfiprintf_r+0x6a4>
 800ee36:	4692      	mov	sl, r2
 800ee38:	e7f3      	b.n	800ee22 <_vfiprintf_r+0x702>
 800ee3a:	f004 030f 	and.w	r3, r4, #15
 800ee3e:	9a05      	ldr	r2, [sp, #20]
 800ee40:	0924      	lsrs	r4, r4, #4
 800ee42:	5cd3      	ldrb	r3, [r2, r3]
 800ee44:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800ee48:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800ee4c:	092d      	lsrs	r5, r5, #4
 800ee4e:	ea54 0305 	orrs.w	r3, r4, r5
 800ee52:	d1f2      	bne.n	800ee3a <_vfiprintf_r+0x71a>
 800ee54:	e0e0      	b.n	800f018 <_vfiprintf_r+0x8f8>
 800ee56:	b923      	cbnz	r3, 800ee62 <_vfiprintf_r+0x742>
 800ee58:	f01a 0f01 	tst.w	sl, #1
 800ee5c:	d001      	beq.n	800ee62 <_vfiprintf_r+0x742>
 800ee5e:	2430      	movs	r4, #48	@ 0x30
 800ee60:	e7a3      	b.n	800edaa <_vfiprintf_r+0x68a>
 800ee62:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800ee66:	e0d7      	b.n	800f018 <_vfiprintf_r+0x8f8>
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	f000 80a3 	beq.w	800efb4 <_vfiprintf_r+0x894>
 800ee6e:	2400      	movs	r4, #0
 800ee70:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800ee74:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800ee78:	46a8      	mov	r8, r5
 800ee7a:	e5e0      	b.n	800ea3e <_vfiprintf_r+0x31e>
 800ee7c:	080147aa 	.word	0x080147aa
 800ee80:	0801479a 	.word	0x0801479a
 800ee84:	08014778 	.word	0x08014778
 800ee88:	2110      	movs	r1, #16
 800ee8a:	6071      	str	r1, [r6, #4]
 800ee8c:	2a07      	cmp	r2, #7
 800ee8e:	4461      	add	r1, ip
 800ee90:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800ee94:	dd08      	ble.n	800eea8 <_vfiprintf_r+0x788>
 800ee96:	9800      	ldr	r0, [sp, #0]
 800ee98:	aa0e      	add	r2, sp, #56	@ 0x38
 800ee9a:	4639      	mov	r1, r7
 800ee9c:	f7ff fc0e 	bl	800e6bc <__sprint_r>
 800eea0:	2800      	cmp	r0, #0
 800eea2:	d166      	bne.n	800ef72 <_vfiprintf_r+0x852>
 800eea4:	4b60      	ldr	r3, [pc, #384]	@ (800f028 <_vfiprintf_r+0x908>)
 800eea6:	a811      	add	r0, sp, #68	@ 0x44
 800eea8:	3d10      	subs	r5, #16
 800eeaa:	4606      	mov	r6, r0
 800eeac:	e694      	b.n	800ebd8 <_vfiprintf_r+0x4b8>
 800eeae:	4606      	mov	r6, r0
 800eeb0:	e6ac      	b.n	800ec0c <_vfiprintf_r+0x4ec>
 800eeb2:	9800      	ldr	r0, [sp, #0]
 800eeb4:	aa0e      	add	r2, sp, #56	@ 0x38
 800eeb6:	4639      	mov	r1, r7
 800eeb8:	f7ff fc00 	bl	800e6bc <__sprint_r>
 800eebc:	2800      	cmp	r0, #0
 800eebe:	d158      	bne.n	800ef72 <_vfiprintf_r+0x852>
 800eec0:	ae11      	add	r6, sp, #68	@ 0x44
 800eec2:	e6b5      	b.n	800ec30 <_vfiprintf_r+0x510>
 800eec4:	9800      	ldr	r0, [sp, #0]
 800eec6:	aa0e      	add	r2, sp, #56	@ 0x38
 800eec8:	4639      	mov	r1, r7
 800eeca:	f7ff fbf7 	bl	800e6bc <__sprint_r>
 800eece:	2800      	cmp	r0, #0
 800eed0:	d14f      	bne.n	800ef72 <_vfiprintf_r+0x852>
 800eed2:	ae11      	add	r6, sp, #68	@ 0x44
 800eed4:	e6bc      	b.n	800ec50 <_vfiprintf_r+0x530>
 800eed6:	2110      	movs	r1, #16
 800eed8:	6071      	str	r1, [r6, #4]
 800eeda:	2a07      	cmp	r2, #7
 800eedc:	4461      	add	r1, ip
 800eede:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800eee2:	dd08      	ble.n	800eef6 <_vfiprintf_r+0x7d6>
 800eee4:	9800      	ldr	r0, [sp, #0]
 800eee6:	aa0e      	add	r2, sp, #56	@ 0x38
 800eee8:	4639      	mov	r1, r7
 800eeea:	f7ff fbe7 	bl	800e6bc <__sprint_r>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d13f      	bne.n	800ef72 <_vfiprintf_r+0x852>
 800eef2:	4b4e      	ldr	r3, [pc, #312]	@ (800f02c <_vfiprintf_r+0x90c>)
 800eef4:	a811      	add	r0, sp, #68	@ 0x44
 800eef6:	3d10      	subs	r5, #16
 800eef8:	4606      	mov	r6, r0
 800eefa:	e6b2      	b.n	800ec62 <_vfiprintf_r+0x542>
 800eefc:	4606      	mov	r6, r0
 800eefe:	e6ca      	b.n	800ec96 <_vfiprintf_r+0x576>
 800ef00:	2010      	movs	r0, #16
 800ef02:	4402      	add	r2, r0
 800ef04:	2b07      	cmp	r3, #7
 800ef06:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800ef0a:	6070      	str	r0, [r6, #4]
 800ef0c:	dd06      	ble.n	800ef1c <_vfiprintf_r+0x7fc>
 800ef0e:	9800      	ldr	r0, [sp, #0]
 800ef10:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef12:	4639      	mov	r1, r7
 800ef14:	f7ff fbd2 	bl	800e6bc <__sprint_r>
 800ef18:	bb58      	cbnz	r0, 800ef72 <_vfiprintf_r+0x852>
 800ef1a:	a911      	add	r1, sp, #68	@ 0x44
 800ef1c:	3c10      	subs	r4, #16
 800ef1e:	460e      	mov	r6, r1
 800ef20:	e6bd      	b.n	800ec9e <_vfiprintf_r+0x57e>
 800ef22:	460e      	mov	r6, r1
 800ef24:	e6d6      	b.n	800ecd4 <_vfiprintf_r+0x5b4>
 800ef26:	9800      	ldr	r0, [sp, #0]
 800ef28:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef2a:	4639      	mov	r1, r7
 800ef2c:	f7ff fbc6 	bl	800e6bc <__sprint_r>
 800ef30:	b9f8      	cbnz	r0, 800ef72 <_vfiprintf_r+0x852>
 800ef32:	ab11      	add	r3, sp, #68	@ 0x44
 800ef34:	e6de      	b.n	800ecf4 <_vfiprintf_r+0x5d4>
 800ef36:	9a02      	ldr	r2, [sp, #8]
 800ef38:	9904      	ldr	r1, [sp, #16]
 800ef3a:	1a54      	subs	r4, r2, r1
 800ef3c:	2c00      	cmp	r4, #0
 800ef3e:	f77f aedd 	ble.w	800ecfc <_vfiprintf_r+0x5dc>
 800ef42:	4d39      	ldr	r5, [pc, #228]	@ (800f028 <_vfiprintf_r+0x908>)
 800ef44:	2610      	movs	r6, #16
 800ef46:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800ef4a:	2c10      	cmp	r4, #16
 800ef4c:	f102 0201 	add.w	r2, r2, #1
 800ef50:	601d      	str	r5, [r3, #0]
 800ef52:	dc1d      	bgt.n	800ef90 <_vfiprintf_r+0x870>
 800ef54:	605c      	str	r4, [r3, #4]
 800ef56:	2a07      	cmp	r2, #7
 800ef58:	440c      	add	r4, r1
 800ef5a:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800ef5e:	f77f aecd 	ble.w	800ecfc <_vfiprintf_r+0x5dc>
 800ef62:	9800      	ldr	r0, [sp, #0]
 800ef64:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef66:	4639      	mov	r1, r7
 800ef68:	f7ff fba8 	bl	800e6bc <__sprint_r>
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	f43f aec5 	beq.w	800ecfc <_vfiprintf_r+0x5dc>
 800ef72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef74:	07d9      	lsls	r1, r3, #31
 800ef76:	d405      	bmi.n	800ef84 <_vfiprintf_r+0x864>
 800ef78:	89bb      	ldrh	r3, [r7, #12]
 800ef7a:	059a      	lsls	r2, r3, #22
 800ef7c:	d402      	bmi.n	800ef84 <_vfiprintf_r+0x864>
 800ef7e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ef80:	f000 fc9f 	bl	800f8c2 <__retarget_lock_release_recursive>
 800ef84:	89bb      	ldrh	r3, [r7, #12]
 800ef86:	065b      	lsls	r3, r3, #25
 800ef88:	f57f abfb 	bpl.w	800e782 <_vfiprintf_r+0x62>
 800ef8c:	f7ff bbf6 	b.w	800e77c <_vfiprintf_r+0x5c>
 800ef90:	3110      	adds	r1, #16
 800ef92:	2a07      	cmp	r2, #7
 800ef94:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800ef98:	605e      	str	r6, [r3, #4]
 800ef9a:	dc02      	bgt.n	800efa2 <_vfiprintf_r+0x882>
 800ef9c:	3308      	adds	r3, #8
 800ef9e:	3c10      	subs	r4, #16
 800efa0:	e7d1      	b.n	800ef46 <_vfiprintf_r+0x826>
 800efa2:	9800      	ldr	r0, [sp, #0]
 800efa4:	aa0e      	add	r2, sp, #56	@ 0x38
 800efa6:	4639      	mov	r1, r7
 800efa8:	f7ff fb88 	bl	800e6bc <__sprint_r>
 800efac:	2800      	cmp	r0, #0
 800efae:	d1e0      	bne.n	800ef72 <_vfiprintf_r+0x852>
 800efb0:	ab11      	add	r3, sp, #68	@ 0x44
 800efb2:	e7f4      	b.n	800ef9e <_vfiprintf_r+0x87e>
 800efb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800efb6:	b913      	cbnz	r3, 800efbe <_vfiprintf_r+0x89e>
 800efb8:	2300      	movs	r3, #0
 800efba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800efbc:	e7d9      	b.n	800ef72 <_vfiprintf_r+0x852>
 800efbe:	9800      	ldr	r0, [sp, #0]
 800efc0:	aa0e      	add	r2, sp, #56	@ 0x38
 800efc2:	4639      	mov	r1, r7
 800efc4:	f7ff fb7a 	bl	800e6bc <__sprint_r>
 800efc8:	2800      	cmp	r0, #0
 800efca:	d0f5      	beq.n	800efb8 <_vfiprintf_r+0x898>
 800efcc:	e7d1      	b.n	800ef72 <_vfiprintf_r+0x852>
 800efce:	ea54 0205 	orrs.w	r2, r4, r5
 800efd2:	f8cd a010 	str.w	sl, [sp, #16]
 800efd6:	f43f ada6 	beq.w	800eb26 <_vfiprintf_r+0x406>
 800efda:	2b01      	cmp	r3, #1
 800efdc:	f43f aedf 	beq.w	800ed9e <_vfiprintf_r+0x67e>
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800efe6:	f43f af28 	beq.w	800ee3a <_vfiprintf_r+0x71a>
 800efea:	f004 0307 	and.w	r3, r4, #7
 800efee:	08e4      	lsrs	r4, r4, #3
 800eff0:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800eff4:	08ed      	lsrs	r5, r5, #3
 800eff6:	3330      	adds	r3, #48	@ 0x30
 800eff8:	ea54 0105 	orrs.w	r1, r4, r5
 800effc:	464a      	mov	r2, r9
 800effe:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f002:	d1f2      	bne.n	800efea <_vfiprintf_r+0x8ca>
 800f004:	9904      	ldr	r1, [sp, #16]
 800f006:	07c8      	lsls	r0, r1, #31
 800f008:	d506      	bpl.n	800f018 <_vfiprintf_r+0x8f8>
 800f00a:	2b30      	cmp	r3, #48	@ 0x30
 800f00c:	d004      	beq.n	800f018 <_vfiprintf_r+0x8f8>
 800f00e:	2330      	movs	r3, #48	@ 0x30
 800f010:	f809 3c01 	strb.w	r3, [r9, #-1]
 800f014:	f1a2 0902 	sub.w	r9, r2, #2
 800f018:	ab3a      	add	r3, sp, #232	@ 0xe8
 800f01a:	eba3 0309 	sub.w	r3, r3, r9
 800f01e:	9c01      	ldr	r4, [sp, #4]
 800f020:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f024:	9301      	str	r3, [sp, #4]
 800f026:	e5bb      	b.n	800eba0 <_vfiprintf_r+0x480>
 800f028:	080147aa 	.word	0x080147aa
 800f02c:	0801479a 	.word	0x0801479a

0800f030 <__sbprintf>:
 800f030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f032:	461f      	mov	r7, r3
 800f034:	898b      	ldrh	r3, [r1, #12]
 800f036:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800f03a:	f023 0302 	bic.w	r3, r3, #2
 800f03e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f042:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800f044:	9319      	str	r3, [sp, #100]	@ 0x64
 800f046:	89cb      	ldrh	r3, [r1, #14]
 800f048:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f04c:	69cb      	ldr	r3, [r1, #28]
 800f04e:	9307      	str	r3, [sp, #28]
 800f050:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800f052:	9309      	str	r3, [sp, #36]	@ 0x24
 800f054:	ab1a      	add	r3, sp, #104	@ 0x68
 800f056:	9300      	str	r3, [sp, #0]
 800f058:	9304      	str	r3, [sp, #16]
 800f05a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f05e:	4615      	mov	r5, r2
 800f060:	4606      	mov	r6, r0
 800f062:	9302      	str	r3, [sp, #8]
 800f064:	9305      	str	r3, [sp, #20]
 800f066:	a816      	add	r0, sp, #88	@ 0x58
 800f068:	2300      	movs	r3, #0
 800f06a:	460c      	mov	r4, r1
 800f06c:	9306      	str	r3, [sp, #24]
 800f06e:	f000 fc25 	bl	800f8bc <__retarget_lock_init_recursive>
 800f072:	462a      	mov	r2, r5
 800f074:	463b      	mov	r3, r7
 800f076:	4669      	mov	r1, sp
 800f078:	4630      	mov	r0, r6
 800f07a:	f7ff fb51 	bl	800e720 <_vfiprintf_r>
 800f07e:	1e05      	subs	r5, r0, #0
 800f080:	db07      	blt.n	800f092 <__sbprintf+0x62>
 800f082:	4669      	mov	r1, sp
 800f084:	4630      	mov	r0, r6
 800f086:	f000 f89b 	bl	800f1c0 <_fflush_r>
 800f08a:	2800      	cmp	r0, #0
 800f08c:	bf18      	it	ne
 800f08e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 800f092:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f096:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800f098:	065b      	lsls	r3, r3, #25
 800f09a:	bf42      	ittt	mi
 800f09c:	89a3      	ldrhmi	r3, [r4, #12]
 800f09e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800f0a2:	81a3      	strhmi	r3, [r4, #12]
 800f0a4:	f000 fc0b 	bl	800f8be <__retarget_lock_close_recursive>
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800f0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0b0 <__sflush_r>:
 800f0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b4:	4605      	mov	r5, r0
 800f0b6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800f0ba:	0706      	lsls	r6, r0, #28
 800f0bc:	460c      	mov	r4, r1
 800f0be:	d457      	bmi.n	800f170 <__sflush_r+0xc0>
 800f0c0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800f0c4:	818b      	strh	r3, [r1, #12]
 800f0c6:	684b      	ldr	r3, [r1, #4]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	dc02      	bgt.n	800f0d2 <__sflush_r+0x22>
 800f0cc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	dd4c      	ble.n	800f16c <__sflush_r+0xbc>
 800f0d2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f0d4:	2e00      	cmp	r6, #0
 800f0d6:	d049      	beq.n	800f16c <__sflush_r+0xbc>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800f0de:	682f      	ldr	r7, [r5, #0]
 800f0e0:	69e1      	ldr	r1, [r4, #28]
 800f0e2:	602b      	str	r3, [r5, #0]
 800f0e4:	d034      	beq.n	800f150 <__sflush_r+0xa0>
 800f0e6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800f0e8:	89a3      	ldrh	r3, [r4, #12]
 800f0ea:	0759      	lsls	r1, r3, #29
 800f0ec:	d505      	bpl.n	800f0fa <__sflush_r+0x4a>
 800f0ee:	6863      	ldr	r3, [r4, #4]
 800f0f0:	1ad2      	subs	r2, r2, r3
 800f0f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f0f4:	b10b      	cbz	r3, 800f0fa <__sflush_r+0x4a>
 800f0f6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f0f8:	1ad2      	subs	r2, r2, r3
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f0fe:	69e1      	ldr	r1, [r4, #28]
 800f100:	4628      	mov	r0, r5
 800f102:	47b0      	blx	r6
 800f104:	1c43      	adds	r3, r0, #1
 800f106:	d106      	bne.n	800f116 <__sflush_r+0x66>
 800f108:	682a      	ldr	r2, [r5, #0]
 800f10a:	2a1d      	cmp	r2, #29
 800f10c:	d848      	bhi.n	800f1a0 <__sflush_r+0xf0>
 800f10e:	4b2b      	ldr	r3, [pc, #172]	@ (800f1bc <__sflush_r+0x10c>)
 800f110:	4113      	asrs	r3, r2
 800f112:	07de      	lsls	r6, r3, #31
 800f114:	d444      	bmi.n	800f1a0 <__sflush_r+0xf0>
 800f116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f11a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f11e:	81a2      	strh	r2, [r4, #12]
 800f120:	2200      	movs	r2, #0
 800f122:	6062      	str	r2, [r4, #4]
 800f124:	04d9      	lsls	r1, r3, #19
 800f126:	6922      	ldr	r2, [r4, #16]
 800f128:	6022      	str	r2, [r4, #0]
 800f12a:	d504      	bpl.n	800f136 <__sflush_r+0x86>
 800f12c:	1c42      	adds	r2, r0, #1
 800f12e:	d101      	bne.n	800f134 <__sflush_r+0x84>
 800f130:	682b      	ldr	r3, [r5, #0]
 800f132:	b903      	cbnz	r3, 800f136 <__sflush_r+0x86>
 800f134:	6520      	str	r0, [r4, #80]	@ 0x50
 800f136:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f138:	602f      	str	r7, [r5, #0]
 800f13a:	b1b9      	cbz	r1, 800f16c <__sflush_r+0xbc>
 800f13c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800f140:	4299      	cmp	r1, r3
 800f142:	d002      	beq.n	800f14a <__sflush_r+0x9a>
 800f144:	4628      	mov	r0, r5
 800f146:	f001 fa47 	bl	80105d8 <_free_r>
 800f14a:	2300      	movs	r3, #0
 800f14c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f14e:	e00d      	b.n	800f16c <__sflush_r+0xbc>
 800f150:	2301      	movs	r3, #1
 800f152:	4628      	mov	r0, r5
 800f154:	47b0      	blx	r6
 800f156:	4602      	mov	r2, r0
 800f158:	1c50      	adds	r0, r2, #1
 800f15a:	d1c5      	bne.n	800f0e8 <__sflush_r+0x38>
 800f15c:	682b      	ldr	r3, [r5, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d0c2      	beq.n	800f0e8 <__sflush_r+0x38>
 800f162:	2b1d      	cmp	r3, #29
 800f164:	d001      	beq.n	800f16a <__sflush_r+0xba>
 800f166:	2b16      	cmp	r3, #22
 800f168:	d11a      	bne.n	800f1a0 <__sflush_r+0xf0>
 800f16a:	602f      	str	r7, [r5, #0]
 800f16c:	2000      	movs	r0, #0
 800f16e:	e01e      	b.n	800f1ae <__sflush_r+0xfe>
 800f170:	690f      	ldr	r7, [r1, #16]
 800f172:	2f00      	cmp	r7, #0
 800f174:	d0fa      	beq.n	800f16c <__sflush_r+0xbc>
 800f176:	0783      	lsls	r3, r0, #30
 800f178:	680e      	ldr	r6, [r1, #0]
 800f17a:	bf08      	it	eq
 800f17c:	694b      	ldreq	r3, [r1, #20]
 800f17e:	600f      	str	r7, [r1, #0]
 800f180:	bf18      	it	ne
 800f182:	2300      	movne	r3, #0
 800f184:	eba6 0807 	sub.w	r8, r6, r7
 800f188:	608b      	str	r3, [r1, #8]
 800f18a:	f1b8 0f00 	cmp.w	r8, #0
 800f18e:	dded      	ble.n	800f16c <__sflush_r+0xbc>
 800f190:	69e1      	ldr	r1, [r4, #28]
 800f192:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800f194:	4643      	mov	r3, r8
 800f196:	463a      	mov	r2, r7
 800f198:	4628      	mov	r0, r5
 800f19a:	47b0      	blx	r6
 800f19c:	2800      	cmp	r0, #0
 800f19e:	dc08      	bgt.n	800f1b2 <__sflush_r+0x102>
 800f1a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1a8:	81a3      	strh	r3, [r4, #12]
 800f1aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1b2:	4407      	add	r7, r0
 800f1b4:	eba8 0800 	sub.w	r8, r8, r0
 800f1b8:	e7e7      	b.n	800f18a <__sflush_r+0xda>
 800f1ba:	bf00      	nop
 800f1bc:	dfbffffe 	.word	0xdfbffffe

0800f1c0 <_fflush_r>:
 800f1c0:	b538      	push	{r3, r4, r5, lr}
 800f1c2:	460c      	mov	r4, r1
 800f1c4:	4605      	mov	r5, r0
 800f1c6:	b118      	cbz	r0, 800f1d0 <_fflush_r+0x10>
 800f1c8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f1ca:	b90b      	cbnz	r3, 800f1d0 <_fflush_r+0x10>
 800f1cc:	f000 f8ca 	bl	800f364 <__sinit>
 800f1d0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800f1d4:	b1b8      	cbz	r0, 800f206 <_fflush_r+0x46>
 800f1d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1d8:	07db      	lsls	r3, r3, #31
 800f1da:	d404      	bmi.n	800f1e6 <_fflush_r+0x26>
 800f1dc:	0581      	lsls	r1, r0, #22
 800f1de:	d402      	bmi.n	800f1e6 <_fflush_r+0x26>
 800f1e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1e2:	f000 fb6d 	bl	800f8c0 <__retarget_lock_acquire_recursive>
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	4621      	mov	r1, r4
 800f1ea:	f7ff ff61 	bl	800f0b0 <__sflush_r>
 800f1ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1f0:	07da      	lsls	r2, r3, #31
 800f1f2:	4605      	mov	r5, r0
 800f1f4:	d405      	bmi.n	800f202 <_fflush_r+0x42>
 800f1f6:	89a3      	ldrh	r3, [r4, #12]
 800f1f8:	059b      	lsls	r3, r3, #22
 800f1fa:	d402      	bmi.n	800f202 <_fflush_r+0x42>
 800f1fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1fe:	f000 fb60 	bl	800f8c2 <__retarget_lock_release_recursive>
 800f202:	4628      	mov	r0, r5
 800f204:	bd38      	pop	{r3, r4, r5, pc}
 800f206:	4605      	mov	r5, r0
 800f208:	e7fb      	b.n	800f202 <_fflush_r+0x42>
	...

0800f20c <sprintf>:
 800f20c:	b40e      	push	{r1, r2, r3}
 800f20e:	b500      	push	{lr}
 800f210:	b09c      	sub	sp, #112	@ 0x70
 800f212:	ab1d      	add	r3, sp, #116	@ 0x74
 800f214:	9002      	str	r0, [sp, #8]
 800f216:	9006      	str	r0, [sp, #24]
 800f218:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f21c:	4809      	ldr	r0, [pc, #36]	@ (800f244 <sprintf+0x38>)
 800f21e:	9107      	str	r1, [sp, #28]
 800f220:	9104      	str	r1, [sp, #16]
 800f222:	4909      	ldr	r1, [pc, #36]	@ (800f248 <sprintf+0x3c>)
 800f224:	f853 2b04 	ldr.w	r2, [r3], #4
 800f228:	9105      	str	r1, [sp, #20]
 800f22a:	6800      	ldr	r0, [r0, #0]
 800f22c:	9301      	str	r3, [sp, #4]
 800f22e:	a902      	add	r1, sp, #8
 800f230:	f001 fcde 	bl	8010bf0 <_svfprintf_r>
 800f234:	9b02      	ldr	r3, [sp, #8]
 800f236:	2200      	movs	r2, #0
 800f238:	701a      	strb	r2, [r3, #0]
 800f23a:	b01c      	add	sp, #112	@ 0x70
 800f23c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f240:	b003      	add	sp, #12
 800f242:	4770      	bx	lr
 800f244:	24000188 	.word	0x24000188
 800f248:	ffff0208 	.word	0xffff0208

0800f24c <std>:
 800f24c:	2300      	movs	r3, #0
 800f24e:	b510      	push	{r4, lr}
 800f250:	4604      	mov	r4, r0
 800f252:	e9c0 3300 	strd	r3, r3, [r0]
 800f256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f25a:	6083      	str	r3, [r0, #8]
 800f25c:	8181      	strh	r1, [r0, #12]
 800f25e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f260:	81c2      	strh	r2, [r0, #14]
 800f262:	6183      	str	r3, [r0, #24]
 800f264:	4619      	mov	r1, r3
 800f266:	2208      	movs	r2, #8
 800f268:	305c      	adds	r0, #92	@ 0x5c
 800f26a:	f000 fad7 	bl	800f81c <memset>
 800f26e:	4b0d      	ldr	r3, [pc, #52]	@ (800f2a4 <std+0x58>)
 800f270:	6223      	str	r3, [r4, #32]
 800f272:	4b0d      	ldr	r3, [pc, #52]	@ (800f2a8 <std+0x5c>)
 800f274:	6263      	str	r3, [r4, #36]	@ 0x24
 800f276:	4b0d      	ldr	r3, [pc, #52]	@ (800f2ac <std+0x60>)
 800f278:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f27a:	4b0d      	ldr	r3, [pc, #52]	@ (800f2b0 <std+0x64>)
 800f27c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f27e:	4b0d      	ldr	r3, [pc, #52]	@ (800f2b4 <std+0x68>)
 800f280:	61e4      	str	r4, [r4, #28]
 800f282:	429c      	cmp	r4, r3
 800f284:	d006      	beq.n	800f294 <std+0x48>
 800f286:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f28a:	4294      	cmp	r4, r2
 800f28c:	d002      	beq.n	800f294 <std+0x48>
 800f28e:	33d0      	adds	r3, #208	@ 0xd0
 800f290:	429c      	cmp	r4, r3
 800f292:	d105      	bne.n	800f2a0 <std+0x54>
 800f294:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f29c:	f000 bb0e 	b.w	800f8bc <__retarget_lock_init_recursive>
 800f2a0:	bd10      	pop	{r4, pc}
 800f2a2:	bf00      	nop
 800f2a4:	08012a3d 	.word	0x08012a3d
 800f2a8:	08012a5f 	.word	0x08012a5f
 800f2ac:	08012a97 	.word	0x08012a97
 800f2b0:	08012abb 	.word	0x08012abb
 800f2b4:	24015210 	.word	0x24015210

0800f2b8 <stdio_exit_handler>:
 800f2b8:	4a02      	ldr	r2, [pc, #8]	@ (800f2c4 <stdio_exit_handler+0xc>)
 800f2ba:	4903      	ldr	r1, [pc, #12]	@ (800f2c8 <stdio_exit_handler+0x10>)
 800f2bc:	4803      	ldr	r0, [pc, #12]	@ (800f2cc <stdio_exit_handler+0x14>)
 800f2be:	f000 b9b5 	b.w	800f62c <_fwalk_sglue>
 800f2c2:	bf00      	nop
 800f2c4:	24000010 	.word	0x24000010
 800f2c8:	08012641 	.word	0x08012641
 800f2cc:	24000190 	.word	0x24000190

0800f2d0 <cleanup_stdio>:
 800f2d0:	6841      	ldr	r1, [r0, #4]
 800f2d2:	4b0c      	ldr	r3, [pc, #48]	@ (800f304 <cleanup_stdio+0x34>)
 800f2d4:	4299      	cmp	r1, r3
 800f2d6:	b510      	push	{r4, lr}
 800f2d8:	4604      	mov	r4, r0
 800f2da:	d001      	beq.n	800f2e0 <cleanup_stdio+0x10>
 800f2dc:	f003 f9b0 	bl	8012640 <_fclose_r>
 800f2e0:	68a1      	ldr	r1, [r4, #8]
 800f2e2:	4b09      	ldr	r3, [pc, #36]	@ (800f308 <cleanup_stdio+0x38>)
 800f2e4:	4299      	cmp	r1, r3
 800f2e6:	d002      	beq.n	800f2ee <cleanup_stdio+0x1e>
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f003 f9a9 	bl	8012640 <_fclose_r>
 800f2ee:	68e1      	ldr	r1, [r4, #12]
 800f2f0:	4b06      	ldr	r3, [pc, #24]	@ (800f30c <cleanup_stdio+0x3c>)
 800f2f2:	4299      	cmp	r1, r3
 800f2f4:	d004      	beq.n	800f300 <cleanup_stdio+0x30>
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2fc:	f003 b9a0 	b.w	8012640 <_fclose_r>
 800f300:	bd10      	pop	{r4, pc}
 800f302:	bf00      	nop
 800f304:	24015210 	.word	0x24015210
 800f308:	24015278 	.word	0x24015278
 800f30c:	240152e0 	.word	0x240152e0

0800f310 <global_stdio_init.part.0>:
 800f310:	b510      	push	{r4, lr}
 800f312:	4b0b      	ldr	r3, [pc, #44]	@ (800f340 <global_stdio_init.part.0+0x30>)
 800f314:	4c0b      	ldr	r4, [pc, #44]	@ (800f344 <global_stdio_init.part.0+0x34>)
 800f316:	4a0c      	ldr	r2, [pc, #48]	@ (800f348 <global_stdio_init.part.0+0x38>)
 800f318:	601a      	str	r2, [r3, #0]
 800f31a:	4620      	mov	r0, r4
 800f31c:	2200      	movs	r2, #0
 800f31e:	2104      	movs	r1, #4
 800f320:	f7ff ff94 	bl	800f24c <std>
 800f324:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f328:	2201      	movs	r2, #1
 800f32a:	2109      	movs	r1, #9
 800f32c:	f7ff ff8e 	bl	800f24c <std>
 800f330:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f334:	2202      	movs	r2, #2
 800f336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f33a:	2112      	movs	r1, #18
 800f33c:	f7ff bf86 	b.w	800f24c <std>
 800f340:	24015348 	.word	0x24015348
 800f344:	24015210 	.word	0x24015210
 800f348:	0800f2b9 	.word	0x0800f2b9

0800f34c <__sfp_lock_acquire>:
 800f34c:	4801      	ldr	r0, [pc, #4]	@ (800f354 <__sfp_lock_acquire+0x8>)
 800f34e:	f000 bab7 	b.w	800f8c0 <__retarget_lock_acquire_recursive>
 800f352:	bf00      	nop
 800f354:	2401534e 	.word	0x2401534e

0800f358 <__sfp_lock_release>:
 800f358:	4801      	ldr	r0, [pc, #4]	@ (800f360 <__sfp_lock_release+0x8>)
 800f35a:	f000 bab2 	b.w	800f8c2 <__retarget_lock_release_recursive>
 800f35e:	bf00      	nop
 800f360:	2401534e 	.word	0x2401534e

0800f364 <__sinit>:
 800f364:	b510      	push	{r4, lr}
 800f366:	4604      	mov	r4, r0
 800f368:	f7ff fff0 	bl	800f34c <__sfp_lock_acquire>
 800f36c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f36e:	b11b      	cbz	r3, 800f378 <__sinit+0x14>
 800f370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f374:	f7ff bff0 	b.w	800f358 <__sfp_lock_release>
 800f378:	4b04      	ldr	r3, [pc, #16]	@ (800f38c <__sinit+0x28>)
 800f37a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f37c:	4b04      	ldr	r3, [pc, #16]	@ (800f390 <__sinit+0x2c>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d1f5      	bne.n	800f370 <__sinit+0xc>
 800f384:	f7ff ffc4 	bl	800f310 <global_stdio_init.part.0>
 800f388:	e7f2      	b.n	800f370 <__sinit+0xc>
 800f38a:	bf00      	nop
 800f38c:	0800f2d1 	.word	0x0800f2d1
 800f390:	24015348 	.word	0x24015348

0800f394 <__sfvwrite_r>:
 800f394:	6893      	ldr	r3, [r2, #8]
 800f396:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39a:	4606      	mov	r6, r0
 800f39c:	460c      	mov	r4, r1
 800f39e:	4691      	mov	r9, r2
 800f3a0:	b91b      	cbnz	r3, 800f3aa <__sfvwrite_r+0x16>
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	b003      	add	sp, #12
 800f3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3aa:	898b      	ldrh	r3, [r1, #12]
 800f3ac:	0718      	lsls	r0, r3, #28
 800f3ae:	d550      	bpl.n	800f452 <__sfvwrite_r+0xbe>
 800f3b0:	690b      	ldr	r3, [r1, #16]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d04d      	beq.n	800f452 <__sfvwrite_r+0xbe>
 800f3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3ba:	f8d9 8000 	ldr.w	r8, [r9]
 800f3be:	f013 0702 	ands.w	r7, r3, #2
 800f3c2:	d16b      	bne.n	800f49c <__sfvwrite_r+0x108>
 800f3c4:	f013 0301 	ands.w	r3, r3, #1
 800f3c8:	f000 809c 	beq.w	800f504 <__sfvwrite_r+0x170>
 800f3cc:	4638      	mov	r0, r7
 800f3ce:	46ba      	mov	sl, r7
 800f3d0:	46bb      	mov	fp, r7
 800f3d2:	f1bb 0f00 	cmp.w	fp, #0
 800f3d6:	f000 8103 	beq.w	800f5e0 <__sfvwrite_r+0x24c>
 800f3da:	b950      	cbnz	r0, 800f3f2 <__sfvwrite_r+0x5e>
 800f3dc:	465a      	mov	r2, fp
 800f3de:	210a      	movs	r1, #10
 800f3e0:	4650      	mov	r0, sl
 800f3e2:	f7f0 ff7d 	bl	80002e0 <memchr>
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	f000 8100 	beq.w	800f5ec <__sfvwrite_r+0x258>
 800f3ec:	3001      	adds	r0, #1
 800f3ee:	eba0 070a 	sub.w	r7, r0, sl
 800f3f2:	6820      	ldr	r0, [r4, #0]
 800f3f4:	6921      	ldr	r1, [r4, #16]
 800f3f6:	68a5      	ldr	r5, [r4, #8]
 800f3f8:	6963      	ldr	r3, [r4, #20]
 800f3fa:	455f      	cmp	r7, fp
 800f3fc:	463a      	mov	r2, r7
 800f3fe:	bf28      	it	cs
 800f400:	465a      	movcs	r2, fp
 800f402:	4288      	cmp	r0, r1
 800f404:	f240 80f5 	bls.w	800f5f2 <__sfvwrite_r+0x25e>
 800f408:	441d      	add	r5, r3
 800f40a:	42aa      	cmp	r2, r5
 800f40c:	f340 80f1 	ble.w	800f5f2 <__sfvwrite_r+0x25e>
 800f410:	4651      	mov	r1, sl
 800f412:	462a      	mov	r2, r5
 800f414:	f000 f9e8 	bl	800f7e8 <memmove>
 800f418:	6823      	ldr	r3, [r4, #0]
 800f41a:	442b      	add	r3, r5
 800f41c:	6023      	str	r3, [r4, #0]
 800f41e:	4621      	mov	r1, r4
 800f420:	4630      	mov	r0, r6
 800f422:	f7ff fecd 	bl	800f1c0 <_fflush_r>
 800f426:	2800      	cmp	r0, #0
 800f428:	d167      	bne.n	800f4fa <__sfvwrite_r+0x166>
 800f42a:	1b7f      	subs	r7, r7, r5
 800f42c:	f040 80f9 	bne.w	800f622 <__sfvwrite_r+0x28e>
 800f430:	4621      	mov	r1, r4
 800f432:	4630      	mov	r0, r6
 800f434:	f7ff fec4 	bl	800f1c0 <_fflush_r>
 800f438:	2800      	cmp	r0, #0
 800f43a:	d15e      	bne.n	800f4fa <__sfvwrite_r+0x166>
 800f43c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f440:	1b5b      	subs	r3, r3, r5
 800f442:	44aa      	add	sl, r5
 800f444:	ebab 0b05 	sub.w	fp, fp, r5
 800f448:	f8c9 3008 	str.w	r3, [r9, #8]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d1c0      	bne.n	800f3d2 <__sfvwrite_r+0x3e>
 800f450:	e7a7      	b.n	800f3a2 <__sfvwrite_r+0xe>
 800f452:	4621      	mov	r1, r4
 800f454:	4630      	mov	r0, r6
 800f456:	f000 f907 	bl	800f668 <__swsetup_r>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	d0ab      	beq.n	800f3b6 <__sfvwrite_r+0x22>
 800f45e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f462:	e79f      	b.n	800f3a4 <__sfvwrite_r+0x10>
 800f464:	e9d8 a500 	ldrd	sl, r5, [r8]
 800f468:	f108 0808 	add.w	r8, r8, #8
 800f46c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f470:	69e1      	ldr	r1, [r4, #28]
 800f472:	2d00      	cmp	r5, #0
 800f474:	d0f6      	beq.n	800f464 <__sfvwrite_r+0xd0>
 800f476:	42bd      	cmp	r5, r7
 800f478:	462b      	mov	r3, r5
 800f47a:	4652      	mov	r2, sl
 800f47c:	bf28      	it	cs
 800f47e:	463b      	movcs	r3, r7
 800f480:	4630      	mov	r0, r6
 800f482:	47d8      	blx	fp
 800f484:	2800      	cmp	r0, #0
 800f486:	dd38      	ble.n	800f4fa <__sfvwrite_r+0x166>
 800f488:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f48c:	1a1b      	subs	r3, r3, r0
 800f48e:	4482      	add	sl, r0
 800f490:	1a2d      	subs	r5, r5, r0
 800f492:	f8c9 3008 	str.w	r3, [r9, #8]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d1e8      	bne.n	800f46c <__sfvwrite_r+0xd8>
 800f49a:	e782      	b.n	800f3a2 <__sfvwrite_r+0xe>
 800f49c:	f04f 0a00 	mov.w	sl, #0
 800f4a0:	4f61      	ldr	r7, [pc, #388]	@ (800f628 <__sfvwrite_r+0x294>)
 800f4a2:	4655      	mov	r5, sl
 800f4a4:	e7e2      	b.n	800f46c <__sfvwrite_r+0xd8>
 800f4a6:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800f4aa:	f108 0808 	add.w	r8, r8, #8
 800f4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4b2:	6820      	ldr	r0, [r4, #0]
 800f4b4:	68a2      	ldr	r2, [r4, #8]
 800f4b6:	f1ba 0f00 	cmp.w	sl, #0
 800f4ba:	d0f4      	beq.n	800f4a6 <__sfvwrite_r+0x112>
 800f4bc:	0599      	lsls	r1, r3, #22
 800f4be:	d563      	bpl.n	800f588 <__sfvwrite_r+0x1f4>
 800f4c0:	4552      	cmp	r2, sl
 800f4c2:	d836      	bhi.n	800f532 <__sfvwrite_r+0x19e>
 800f4c4:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800f4c8:	d033      	beq.n	800f532 <__sfvwrite_r+0x19e>
 800f4ca:	6921      	ldr	r1, [r4, #16]
 800f4cc:	6965      	ldr	r5, [r4, #20]
 800f4ce:	eba0 0b01 	sub.w	fp, r0, r1
 800f4d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4da:	f10b 0201 	add.w	r2, fp, #1
 800f4de:	106d      	asrs	r5, r5, #1
 800f4e0:	4452      	add	r2, sl
 800f4e2:	4295      	cmp	r5, r2
 800f4e4:	bf38      	it	cc
 800f4e6:	4615      	movcc	r5, r2
 800f4e8:	055b      	lsls	r3, r3, #21
 800f4ea:	d53d      	bpl.n	800f568 <__sfvwrite_r+0x1d4>
 800f4ec:	4629      	mov	r1, r5
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	f001 f932 	bl	8010758 <_malloc_r>
 800f4f4:	b948      	cbnz	r0, 800f50a <__sfvwrite_r+0x176>
 800f4f6:	230c      	movs	r3, #12
 800f4f8:	6033      	str	r3, [r6, #0]
 800f4fa:	89a3      	ldrh	r3, [r4, #12]
 800f4fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f500:	81a3      	strh	r3, [r4, #12]
 800f502:	e7ac      	b.n	800f45e <__sfvwrite_r+0xca>
 800f504:	461f      	mov	r7, r3
 800f506:	469a      	mov	sl, r3
 800f508:	e7d1      	b.n	800f4ae <__sfvwrite_r+0x11a>
 800f50a:	465a      	mov	r2, fp
 800f50c:	6921      	ldr	r1, [r4, #16]
 800f50e:	9001      	str	r0, [sp, #4]
 800f510:	f000 f9d8 	bl	800f8c4 <memcpy>
 800f514:	89a2      	ldrh	r2, [r4, #12]
 800f516:	9b01      	ldr	r3, [sp, #4]
 800f518:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800f51c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800f520:	81a2      	strh	r2, [r4, #12]
 800f522:	6123      	str	r3, [r4, #16]
 800f524:	6165      	str	r5, [r4, #20]
 800f526:	445b      	add	r3, fp
 800f528:	eba5 050b 	sub.w	r5, r5, fp
 800f52c:	6023      	str	r3, [r4, #0]
 800f52e:	4652      	mov	r2, sl
 800f530:	60a5      	str	r5, [r4, #8]
 800f532:	4552      	cmp	r2, sl
 800f534:	bf28      	it	cs
 800f536:	4652      	movcs	r2, sl
 800f538:	6820      	ldr	r0, [r4, #0]
 800f53a:	9201      	str	r2, [sp, #4]
 800f53c:	4639      	mov	r1, r7
 800f53e:	f000 f953 	bl	800f7e8 <memmove>
 800f542:	68a3      	ldr	r3, [r4, #8]
 800f544:	9a01      	ldr	r2, [sp, #4]
 800f546:	1a9b      	subs	r3, r3, r2
 800f548:	60a3      	str	r3, [r4, #8]
 800f54a:	6823      	ldr	r3, [r4, #0]
 800f54c:	4413      	add	r3, r2
 800f54e:	4655      	mov	r5, sl
 800f550:	6023      	str	r3, [r4, #0]
 800f552:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f556:	1b5b      	subs	r3, r3, r5
 800f558:	442f      	add	r7, r5
 800f55a:	ebaa 0a05 	sub.w	sl, sl, r5
 800f55e:	f8c9 3008 	str.w	r3, [r9, #8]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d1a3      	bne.n	800f4ae <__sfvwrite_r+0x11a>
 800f566:	e71c      	b.n	800f3a2 <__sfvwrite_r+0xe>
 800f568:	462a      	mov	r2, r5
 800f56a:	4630      	mov	r0, r6
 800f56c:	f003 f8be 	bl	80126ec <_realloc_r>
 800f570:	4603      	mov	r3, r0
 800f572:	2800      	cmp	r0, #0
 800f574:	d1d5      	bne.n	800f522 <__sfvwrite_r+0x18e>
 800f576:	6921      	ldr	r1, [r4, #16]
 800f578:	4630      	mov	r0, r6
 800f57a:	f001 f82d 	bl	80105d8 <_free_r>
 800f57e:	89a3      	ldrh	r3, [r4, #12]
 800f580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f584:	81a3      	strh	r3, [r4, #12]
 800f586:	e7b6      	b.n	800f4f6 <__sfvwrite_r+0x162>
 800f588:	6923      	ldr	r3, [r4, #16]
 800f58a:	4283      	cmp	r3, r0
 800f58c:	d302      	bcc.n	800f594 <__sfvwrite_r+0x200>
 800f58e:	6961      	ldr	r1, [r4, #20]
 800f590:	4551      	cmp	r1, sl
 800f592:	d915      	bls.n	800f5c0 <__sfvwrite_r+0x22c>
 800f594:	4552      	cmp	r2, sl
 800f596:	bf28      	it	cs
 800f598:	4652      	movcs	r2, sl
 800f59a:	4639      	mov	r1, r7
 800f59c:	4615      	mov	r5, r2
 800f59e:	f000 f923 	bl	800f7e8 <memmove>
 800f5a2:	68a3      	ldr	r3, [r4, #8]
 800f5a4:	6822      	ldr	r2, [r4, #0]
 800f5a6:	1b5b      	subs	r3, r3, r5
 800f5a8:	442a      	add	r2, r5
 800f5aa:	60a3      	str	r3, [r4, #8]
 800f5ac:	6022      	str	r2, [r4, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1cf      	bne.n	800f552 <__sfvwrite_r+0x1be>
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	4630      	mov	r0, r6
 800f5b6:	f7ff fe03 	bl	800f1c0 <_fflush_r>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	d0c9      	beq.n	800f552 <__sfvwrite_r+0x1be>
 800f5be:	e79c      	b.n	800f4fa <__sfvwrite_r+0x166>
 800f5c0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f5c4:	4553      	cmp	r3, sl
 800f5c6:	bf28      	it	cs
 800f5c8:	4653      	movcs	r3, sl
 800f5ca:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f5cc:	fb93 f3f1 	sdiv	r3, r3, r1
 800f5d0:	463a      	mov	r2, r7
 800f5d2:	434b      	muls	r3, r1
 800f5d4:	4630      	mov	r0, r6
 800f5d6:	69e1      	ldr	r1, [r4, #28]
 800f5d8:	47a8      	blx	r5
 800f5da:	1e05      	subs	r5, r0, #0
 800f5dc:	dcb9      	bgt.n	800f552 <__sfvwrite_r+0x1be>
 800f5de:	e78c      	b.n	800f4fa <__sfvwrite_r+0x166>
 800f5e0:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	f108 0808 	add.w	r8, r8, #8
 800f5ea:	e6f2      	b.n	800f3d2 <__sfvwrite_r+0x3e>
 800f5ec:	f10b 0701 	add.w	r7, fp, #1
 800f5f0:	e6ff      	b.n	800f3f2 <__sfvwrite_r+0x5e>
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	dc08      	bgt.n	800f608 <__sfvwrite_r+0x274>
 800f5f6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f5f8:	69e1      	ldr	r1, [r4, #28]
 800f5fa:	4652      	mov	r2, sl
 800f5fc:	4630      	mov	r0, r6
 800f5fe:	47a8      	blx	r5
 800f600:	1e05      	subs	r5, r0, #0
 800f602:	f73f af12 	bgt.w	800f42a <__sfvwrite_r+0x96>
 800f606:	e778      	b.n	800f4fa <__sfvwrite_r+0x166>
 800f608:	4651      	mov	r1, sl
 800f60a:	9201      	str	r2, [sp, #4]
 800f60c:	f000 f8ec 	bl	800f7e8 <memmove>
 800f610:	9a01      	ldr	r2, [sp, #4]
 800f612:	68a3      	ldr	r3, [r4, #8]
 800f614:	1a9b      	subs	r3, r3, r2
 800f616:	60a3      	str	r3, [r4, #8]
 800f618:	6823      	ldr	r3, [r4, #0]
 800f61a:	4413      	add	r3, r2
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	4615      	mov	r5, r2
 800f620:	e703      	b.n	800f42a <__sfvwrite_r+0x96>
 800f622:	2001      	movs	r0, #1
 800f624:	e70a      	b.n	800f43c <__sfvwrite_r+0xa8>
 800f626:	bf00      	nop
 800f628:	7ffffc00 	.word	0x7ffffc00

0800f62c <_fwalk_sglue>:
 800f62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f630:	4607      	mov	r7, r0
 800f632:	4688      	mov	r8, r1
 800f634:	4614      	mov	r4, r2
 800f636:	2600      	movs	r6, #0
 800f638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f63c:	f1b9 0901 	subs.w	r9, r9, #1
 800f640:	d505      	bpl.n	800f64e <_fwalk_sglue+0x22>
 800f642:	6824      	ldr	r4, [r4, #0]
 800f644:	2c00      	cmp	r4, #0
 800f646:	d1f7      	bne.n	800f638 <_fwalk_sglue+0xc>
 800f648:	4630      	mov	r0, r6
 800f64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f64e:	89ab      	ldrh	r3, [r5, #12]
 800f650:	2b01      	cmp	r3, #1
 800f652:	d907      	bls.n	800f664 <_fwalk_sglue+0x38>
 800f654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f658:	3301      	adds	r3, #1
 800f65a:	d003      	beq.n	800f664 <_fwalk_sglue+0x38>
 800f65c:	4629      	mov	r1, r5
 800f65e:	4638      	mov	r0, r7
 800f660:	47c0      	blx	r8
 800f662:	4306      	orrs	r6, r0
 800f664:	3568      	adds	r5, #104	@ 0x68
 800f666:	e7e9      	b.n	800f63c <_fwalk_sglue+0x10>

0800f668 <__swsetup_r>:
 800f668:	b538      	push	{r3, r4, r5, lr}
 800f66a:	4b29      	ldr	r3, [pc, #164]	@ (800f710 <__swsetup_r+0xa8>)
 800f66c:	4605      	mov	r5, r0
 800f66e:	6818      	ldr	r0, [r3, #0]
 800f670:	460c      	mov	r4, r1
 800f672:	b118      	cbz	r0, 800f67c <__swsetup_r+0x14>
 800f674:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f676:	b90b      	cbnz	r3, 800f67c <__swsetup_r+0x14>
 800f678:	f7ff fe74 	bl	800f364 <__sinit>
 800f67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f680:	0719      	lsls	r1, r3, #28
 800f682:	d422      	bmi.n	800f6ca <__swsetup_r+0x62>
 800f684:	06da      	lsls	r2, r3, #27
 800f686:	d407      	bmi.n	800f698 <__swsetup_r+0x30>
 800f688:	2209      	movs	r2, #9
 800f68a:	602a      	str	r2, [r5, #0]
 800f68c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f690:	81a3      	strh	r3, [r4, #12]
 800f692:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f696:	e033      	b.n	800f700 <__swsetup_r+0x98>
 800f698:	0758      	lsls	r0, r3, #29
 800f69a:	d512      	bpl.n	800f6c2 <__swsetup_r+0x5a>
 800f69c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f69e:	b141      	cbz	r1, 800f6b2 <__swsetup_r+0x4a>
 800f6a0:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800f6a4:	4299      	cmp	r1, r3
 800f6a6:	d002      	beq.n	800f6ae <__swsetup_r+0x46>
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	f000 ff95 	bl	80105d8 <_free_r>
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800f6b2:	89a3      	ldrh	r3, [r4, #12]
 800f6b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f6b8:	81a3      	strh	r3, [r4, #12]
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	6063      	str	r3, [r4, #4]
 800f6be:	6923      	ldr	r3, [r4, #16]
 800f6c0:	6023      	str	r3, [r4, #0]
 800f6c2:	89a3      	ldrh	r3, [r4, #12]
 800f6c4:	f043 0308 	orr.w	r3, r3, #8
 800f6c8:	81a3      	strh	r3, [r4, #12]
 800f6ca:	6923      	ldr	r3, [r4, #16]
 800f6cc:	b94b      	cbnz	r3, 800f6e2 <__swsetup_r+0x7a>
 800f6ce:	89a3      	ldrh	r3, [r4, #12]
 800f6d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f6d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f6d8:	d003      	beq.n	800f6e2 <__swsetup_r+0x7a>
 800f6da:	4621      	mov	r1, r4
 800f6dc:	4628      	mov	r0, r5
 800f6de:	f002 fc33 	bl	8011f48 <__smakebuf_r>
 800f6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6e6:	f013 0201 	ands.w	r2, r3, #1
 800f6ea:	d00a      	beq.n	800f702 <__swsetup_r+0x9a>
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	60a2      	str	r2, [r4, #8]
 800f6f0:	6962      	ldr	r2, [r4, #20]
 800f6f2:	4252      	negs	r2, r2
 800f6f4:	61a2      	str	r2, [r4, #24]
 800f6f6:	6922      	ldr	r2, [r4, #16]
 800f6f8:	b942      	cbnz	r2, 800f70c <__swsetup_r+0xa4>
 800f6fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f6fe:	d1c5      	bne.n	800f68c <__swsetup_r+0x24>
 800f700:	bd38      	pop	{r3, r4, r5, pc}
 800f702:	0799      	lsls	r1, r3, #30
 800f704:	bf58      	it	pl
 800f706:	6962      	ldrpl	r2, [r4, #20]
 800f708:	60a2      	str	r2, [r4, #8]
 800f70a:	e7f4      	b.n	800f6f6 <__swsetup_r+0x8e>
 800f70c:	2000      	movs	r0, #0
 800f70e:	e7f7      	b.n	800f700 <__swsetup_r+0x98>
 800f710:	24000188 	.word	0x24000188

0800f714 <__fputwc>:
 800f714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f718:	4680      	mov	r8, r0
 800f71a:	460f      	mov	r7, r1
 800f71c:	4614      	mov	r4, r2
 800f71e:	f000 f899 	bl	800f854 <__locale_mb_cur_max>
 800f722:	2801      	cmp	r0, #1
 800f724:	4605      	mov	r5, r0
 800f726:	d11b      	bne.n	800f760 <__fputwc+0x4c>
 800f728:	1e7b      	subs	r3, r7, #1
 800f72a:	2bfe      	cmp	r3, #254	@ 0xfe
 800f72c:	d818      	bhi.n	800f760 <__fputwc+0x4c>
 800f72e:	f88d 7004 	strb.w	r7, [sp, #4]
 800f732:	2600      	movs	r6, #0
 800f734:	f10d 0904 	add.w	r9, sp, #4
 800f738:	42ae      	cmp	r6, r5
 800f73a:	d021      	beq.n	800f780 <__fputwc+0x6c>
 800f73c:	68a3      	ldr	r3, [r4, #8]
 800f73e:	f816 1009 	ldrb.w	r1, [r6, r9]
 800f742:	3b01      	subs	r3, #1
 800f744:	2b00      	cmp	r3, #0
 800f746:	60a3      	str	r3, [r4, #8]
 800f748:	da04      	bge.n	800f754 <__fputwc+0x40>
 800f74a:	69a2      	ldr	r2, [r4, #24]
 800f74c:	4293      	cmp	r3, r2
 800f74e:	db1b      	blt.n	800f788 <__fputwc+0x74>
 800f750:	290a      	cmp	r1, #10
 800f752:	d019      	beq.n	800f788 <__fputwc+0x74>
 800f754:	6823      	ldr	r3, [r4, #0]
 800f756:	1c5a      	adds	r2, r3, #1
 800f758:	6022      	str	r2, [r4, #0]
 800f75a:	7019      	strb	r1, [r3, #0]
 800f75c:	3601      	adds	r6, #1
 800f75e:	e7eb      	b.n	800f738 <__fputwc+0x24>
 800f760:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800f764:	463a      	mov	r2, r7
 800f766:	a901      	add	r1, sp, #4
 800f768:	4640      	mov	r0, r8
 800f76a:	f000 f8b9 	bl	800f8e0 <_wcrtomb_r>
 800f76e:	1c43      	adds	r3, r0, #1
 800f770:	4605      	mov	r5, r0
 800f772:	d1de      	bne.n	800f732 <__fputwc+0x1e>
 800f774:	89a3      	ldrh	r3, [r4, #12]
 800f776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f77a:	81a3      	strh	r3, [r4, #12]
 800f77c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f780:	4638      	mov	r0, r7
 800f782:	b003      	add	sp, #12
 800f784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f788:	4622      	mov	r2, r4
 800f78a:	4640      	mov	r0, r8
 800f78c:	f003 f9a6 	bl	8012adc <__swbuf_r>
 800f790:	3001      	adds	r0, #1
 800f792:	d1e3      	bne.n	800f75c <__fputwc+0x48>
 800f794:	e7f2      	b.n	800f77c <__fputwc+0x68>

0800f796 <_fputwc_r>:
 800f796:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800f798:	07db      	lsls	r3, r3, #31
 800f79a:	b570      	push	{r4, r5, r6, lr}
 800f79c:	4605      	mov	r5, r0
 800f79e:	460e      	mov	r6, r1
 800f7a0:	4614      	mov	r4, r2
 800f7a2:	d405      	bmi.n	800f7b0 <_fputwc_r+0x1a>
 800f7a4:	8993      	ldrh	r3, [r2, #12]
 800f7a6:	0598      	lsls	r0, r3, #22
 800f7a8:	d402      	bmi.n	800f7b0 <_fputwc_r+0x1a>
 800f7aa:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800f7ac:	f000 f888 	bl	800f8c0 <__retarget_lock_acquire_recursive>
 800f7b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7b4:	0499      	lsls	r1, r3, #18
 800f7b6:	d406      	bmi.n	800f7c6 <_fputwc_r+0x30>
 800f7b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f7bc:	81a3      	strh	r3, [r4, #12]
 800f7be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800f7c4:	6663      	str	r3, [r4, #100]	@ 0x64
 800f7c6:	4622      	mov	r2, r4
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	4631      	mov	r1, r6
 800f7cc:	f7ff ffa2 	bl	800f714 <__fputwc>
 800f7d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7d2:	07da      	lsls	r2, r3, #31
 800f7d4:	4605      	mov	r5, r0
 800f7d6:	d405      	bmi.n	800f7e4 <_fputwc_r+0x4e>
 800f7d8:	89a3      	ldrh	r3, [r4, #12]
 800f7da:	059b      	lsls	r3, r3, #22
 800f7dc:	d402      	bmi.n	800f7e4 <_fputwc_r+0x4e>
 800f7de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7e0:	f000 f86f 	bl	800f8c2 <__retarget_lock_release_recursive>
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	bd70      	pop	{r4, r5, r6, pc}

0800f7e8 <memmove>:
 800f7e8:	4288      	cmp	r0, r1
 800f7ea:	b510      	push	{r4, lr}
 800f7ec:	eb01 0402 	add.w	r4, r1, r2
 800f7f0:	d902      	bls.n	800f7f8 <memmove+0x10>
 800f7f2:	4284      	cmp	r4, r0
 800f7f4:	4623      	mov	r3, r4
 800f7f6:	d807      	bhi.n	800f808 <memmove+0x20>
 800f7f8:	1e43      	subs	r3, r0, #1
 800f7fa:	42a1      	cmp	r1, r4
 800f7fc:	d008      	beq.n	800f810 <memmove+0x28>
 800f7fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f802:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f806:	e7f8      	b.n	800f7fa <memmove+0x12>
 800f808:	4402      	add	r2, r0
 800f80a:	4601      	mov	r1, r0
 800f80c:	428a      	cmp	r2, r1
 800f80e:	d100      	bne.n	800f812 <memmove+0x2a>
 800f810:	bd10      	pop	{r4, pc}
 800f812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f81a:	e7f7      	b.n	800f80c <memmove+0x24>

0800f81c <memset>:
 800f81c:	4402      	add	r2, r0
 800f81e:	4603      	mov	r3, r0
 800f820:	4293      	cmp	r3, r2
 800f822:	d100      	bne.n	800f826 <memset+0xa>
 800f824:	4770      	bx	lr
 800f826:	f803 1b01 	strb.w	r1, [r3], #1
 800f82a:	e7f9      	b.n	800f820 <memset+0x4>

0800f82c <strncpy>:
 800f82c:	b510      	push	{r4, lr}
 800f82e:	3901      	subs	r1, #1
 800f830:	4603      	mov	r3, r0
 800f832:	b132      	cbz	r2, 800f842 <strncpy+0x16>
 800f834:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f838:	f803 4b01 	strb.w	r4, [r3], #1
 800f83c:	3a01      	subs	r2, #1
 800f83e:	2c00      	cmp	r4, #0
 800f840:	d1f7      	bne.n	800f832 <strncpy+0x6>
 800f842:	441a      	add	r2, r3
 800f844:	2100      	movs	r1, #0
 800f846:	4293      	cmp	r3, r2
 800f848:	d100      	bne.n	800f84c <strncpy+0x20>
 800f84a:	bd10      	pop	{r4, pc}
 800f84c:	f803 1b01 	strb.w	r1, [r3], #1
 800f850:	e7f9      	b.n	800f846 <strncpy+0x1a>
	...

0800f854 <__locale_mb_cur_max>:
 800f854:	4b01      	ldr	r3, [pc, #4]	@ (800f85c <__locale_mb_cur_max+0x8>)
 800f856:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800f85a:	4770      	bx	lr
 800f85c:	2400001c 	.word	0x2400001c

0800f860 <_localeconv_r>:
 800f860:	4800      	ldr	r0, [pc, #0]	@ (800f864 <_localeconv_r+0x4>)
 800f862:	4770      	bx	lr
 800f864:	2400010c 	.word	0x2400010c

0800f868 <__errno>:
 800f868:	4b01      	ldr	r3, [pc, #4]	@ (800f870 <__errno+0x8>)
 800f86a:	6818      	ldr	r0, [r3, #0]
 800f86c:	4770      	bx	lr
 800f86e:	bf00      	nop
 800f870:	24000188 	.word	0x24000188

0800f874 <__libc_init_array>:
 800f874:	b570      	push	{r4, r5, r6, lr}
 800f876:	4d0d      	ldr	r5, [pc, #52]	@ (800f8ac <__libc_init_array+0x38>)
 800f878:	4c0d      	ldr	r4, [pc, #52]	@ (800f8b0 <__libc_init_array+0x3c>)
 800f87a:	1b64      	subs	r4, r4, r5
 800f87c:	10a4      	asrs	r4, r4, #2
 800f87e:	2600      	movs	r6, #0
 800f880:	42a6      	cmp	r6, r4
 800f882:	d109      	bne.n	800f898 <__libc_init_array+0x24>
 800f884:	4d0b      	ldr	r5, [pc, #44]	@ (800f8b4 <__libc_init_array+0x40>)
 800f886:	4c0c      	ldr	r4, [pc, #48]	@ (800f8b8 <__libc_init_array+0x44>)
 800f888:	f004 fe88 	bl	801459c <_init>
 800f88c:	1b64      	subs	r4, r4, r5
 800f88e:	10a4      	asrs	r4, r4, #2
 800f890:	2600      	movs	r6, #0
 800f892:	42a6      	cmp	r6, r4
 800f894:	d105      	bne.n	800f8a2 <__libc_init_array+0x2e>
 800f896:	bd70      	pop	{r4, r5, r6, pc}
 800f898:	f855 3b04 	ldr.w	r3, [r5], #4
 800f89c:	4798      	blx	r3
 800f89e:	3601      	adds	r6, #1
 800f8a0:	e7ee      	b.n	800f880 <__libc_init_array+0xc>
 800f8a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8a6:	4798      	blx	r3
 800f8a8:	3601      	adds	r6, #1
 800f8aa:	e7f2      	b.n	800f892 <__libc_init_array+0x1e>
 800f8ac:	08016e30 	.word	0x08016e30
 800f8b0:	08016e30 	.word	0x08016e30
 800f8b4:	08016e30 	.word	0x08016e30
 800f8b8:	08016e38 	.word	0x08016e38

0800f8bc <__retarget_lock_init_recursive>:
 800f8bc:	4770      	bx	lr

0800f8be <__retarget_lock_close_recursive>:
 800f8be:	4770      	bx	lr

0800f8c0 <__retarget_lock_acquire_recursive>:
 800f8c0:	4770      	bx	lr

0800f8c2 <__retarget_lock_release_recursive>:
 800f8c2:	4770      	bx	lr

0800f8c4 <memcpy>:
 800f8c4:	440a      	add	r2, r1
 800f8c6:	4291      	cmp	r1, r2
 800f8c8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f8cc:	d100      	bne.n	800f8d0 <memcpy+0xc>
 800f8ce:	4770      	bx	lr
 800f8d0:	b510      	push	{r4, lr}
 800f8d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8da:	4291      	cmp	r1, r2
 800f8dc:	d1f9      	bne.n	800f8d2 <memcpy+0xe>
 800f8de:	bd10      	pop	{r4, pc}

0800f8e0 <_wcrtomb_r>:
 800f8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8e2:	4c09      	ldr	r4, [pc, #36]	@ (800f908 <_wcrtomb_r+0x28>)
 800f8e4:	b085      	sub	sp, #20
 800f8e6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	461e      	mov	r6, r3
 800f8ee:	b909      	cbnz	r1, 800f8f4 <_wcrtomb_r+0x14>
 800f8f0:	460a      	mov	r2, r1
 800f8f2:	a901      	add	r1, sp, #4
 800f8f4:	47b8      	blx	r7
 800f8f6:	1c43      	adds	r3, r0, #1
 800f8f8:	bf01      	itttt	eq
 800f8fa:	2300      	moveq	r3, #0
 800f8fc:	6033      	streq	r3, [r6, #0]
 800f8fe:	238a      	moveq	r3, #138	@ 0x8a
 800f900:	602b      	streq	r3, [r5, #0]
 800f902:	b005      	add	sp, #20
 800f904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f906:	bf00      	nop
 800f908:	2400001c 	.word	0x2400001c
 800f90c:	00000000 	.word	0x00000000

0800f910 <frexp>:
 800f910:	2200      	movs	r2, #0
 800f912:	ee10 1a90 	vmov	r1, s1
 800f916:	6002      	str	r2, [r0, #0]
 800f918:	4a17      	ldr	r2, [pc, #92]	@ (800f978 <frexp+0x68>)
 800f91a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f91e:	4293      	cmp	r3, r2
 800f920:	d823      	bhi.n	800f96a <frexp+0x5a>
 800f922:	ee10 2a10 	vmov	r2, s0
 800f926:	431a      	orrs	r2, r3
 800f928:	d01f      	beq.n	800f96a <frexp+0x5a>
 800f92a:	4a14      	ldr	r2, [pc, #80]	@ (800f97c <frexp+0x6c>)
 800f92c:	400a      	ands	r2, r1
 800f92e:	b952      	cbnz	r2, 800f946 <frexp+0x36>
 800f930:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 800f970 <frexp+0x60>
 800f934:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f938:	ee10 1a90 	vmov	r1, s1
 800f93c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800f940:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f944:	6002      	str	r2, [r0, #0]
 800f946:	6802      	ldr	r2, [r0, #0]
 800f948:	151b      	asrs	r3, r3, #20
 800f94a:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800f94e:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800f952:	441a      	add	r2, r3
 800f954:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800f958:	6002      	str	r2, [r0, #0]
 800f95a:	ec53 2b10 	vmov	r2, r3, d0
 800f95e:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
 800f962:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f966:	ec43 2b10 	vmov	d0, r2, r3
 800f96a:	4770      	bx	lr
 800f96c:	f3af 8000 	nop.w
 800f970:	00000000 	.word	0x00000000
 800f974:	43500000 	.word	0x43500000
 800f978:	7fefffff 	.word	0x7fefffff
 800f97c:	7ff00000 	.word	0x7ff00000

0800f980 <register_fini>:
 800f980:	4b02      	ldr	r3, [pc, #8]	@ (800f98c <register_fini+0xc>)
 800f982:	b113      	cbz	r3, 800f98a <register_fini+0xa>
 800f984:	4802      	ldr	r0, [pc, #8]	@ (800f990 <register_fini+0x10>)
 800f986:	f000 b805 	b.w	800f994 <atexit>
 800f98a:	4770      	bx	lr
 800f98c:	00000000 	.word	0x00000000
 800f990:	08012c79 	.word	0x08012c79

0800f994 <atexit>:
 800f994:	2300      	movs	r3, #0
 800f996:	4601      	mov	r1, r0
 800f998:	461a      	mov	r2, r3
 800f99a:	4618      	mov	r0, r3
 800f99c:	f003 b980 	b.w	8012ca0 <__register_exitproc>

0800f9a0 <quorem>:
 800f9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a4:	6903      	ldr	r3, [r0, #16]
 800f9a6:	690c      	ldr	r4, [r1, #16]
 800f9a8:	42a3      	cmp	r3, r4
 800f9aa:	4607      	mov	r7, r0
 800f9ac:	db7e      	blt.n	800faac <quorem+0x10c>
 800f9ae:	3c01      	subs	r4, #1
 800f9b0:	f101 0814 	add.w	r8, r1, #20
 800f9b4:	00a3      	lsls	r3, r4, #2
 800f9b6:	f100 0514 	add.w	r5, r0, #20
 800f9ba:	9300      	str	r3, [sp, #0]
 800f9bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9c0:	9301      	str	r3, [sp, #4]
 800f9c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f9c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f9d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800f9d6:	d32e      	bcc.n	800fa36 <quorem+0x96>
 800f9d8:	f04f 0a00 	mov.w	sl, #0
 800f9dc:	46c4      	mov	ip, r8
 800f9de:	46ae      	mov	lr, r5
 800f9e0:	46d3      	mov	fp, sl
 800f9e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f9e6:	b298      	uxth	r0, r3
 800f9e8:	fb06 a000 	mla	r0, r6, r0, sl
 800f9ec:	0c02      	lsrs	r2, r0, #16
 800f9ee:	0c1b      	lsrs	r3, r3, #16
 800f9f0:	fb06 2303 	mla	r3, r6, r3, r2
 800f9f4:	f8de 2000 	ldr.w	r2, [lr]
 800f9f8:	b280      	uxth	r0, r0
 800f9fa:	b292      	uxth	r2, r2
 800f9fc:	1a12      	subs	r2, r2, r0
 800f9fe:	445a      	add	r2, fp
 800fa00:	f8de 0000 	ldr.w	r0, [lr]
 800fa04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fa0e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fa12:	b292      	uxth	r2, r2
 800fa14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fa18:	45e1      	cmp	r9, ip
 800fa1a:	f84e 2b04 	str.w	r2, [lr], #4
 800fa1e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fa22:	d2de      	bcs.n	800f9e2 <quorem+0x42>
 800fa24:	9b00      	ldr	r3, [sp, #0]
 800fa26:	58eb      	ldr	r3, [r5, r3]
 800fa28:	b92b      	cbnz	r3, 800fa36 <quorem+0x96>
 800fa2a:	9b01      	ldr	r3, [sp, #4]
 800fa2c:	3b04      	subs	r3, #4
 800fa2e:	429d      	cmp	r5, r3
 800fa30:	461a      	mov	r2, r3
 800fa32:	d32f      	bcc.n	800fa94 <quorem+0xf4>
 800fa34:	613c      	str	r4, [r7, #16]
 800fa36:	4638      	mov	r0, r7
 800fa38:	f002 fcfa 	bl	8012430 <__mcmp>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	db25      	blt.n	800fa8c <quorem+0xec>
 800fa40:	4629      	mov	r1, r5
 800fa42:	2000      	movs	r0, #0
 800fa44:	f858 2b04 	ldr.w	r2, [r8], #4
 800fa48:	f8d1 c000 	ldr.w	ip, [r1]
 800fa4c:	fa1f fe82 	uxth.w	lr, r2
 800fa50:	fa1f f38c 	uxth.w	r3, ip
 800fa54:	eba3 030e 	sub.w	r3, r3, lr
 800fa58:	4403      	add	r3, r0
 800fa5a:	0c12      	lsrs	r2, r2, #16
 800fa5c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fa60:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa6a:	45c1      	cmp	r9, r8
 800fa6c:	f841 3b04 	str.w	r3, [r1], #4
 800fa70:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fa74:	d2e6      	bcs.n	800fa44 <quorem+0xa4>
 800fa76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa7e:	b922      	cbnz	r2, 800fa8a <quorem+0xea>
 800fa80:	3b04      	subs	r3, #4
 800fa82:	429d      	cmp	r5, r3
 800fa84:	461a      	mov	r2, r3
 800fa86:	d30b      	bcc.n	800faa0 <quorem+0x100>
 800fa88:	613c      	str	r4, [r7, #16]
 800fa8a:	3601      	adds	r6, #1
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	b003      	add	sp, #12
 800fa90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa94:	6812      	ldr	r2, [r2, #0]
 800fa96:	3b04      	subs	r3, #4
 800fa98:	2a00      	cmp	r2, #0
 800fa9a:	d1cb      	bne.n	800fa34 <quorem+0x94>
 800fa9c:	3c01      	subs	r4, #1
 800fa9e:	e7c6      	b.n	800fa2e <quorem+0x8e>
 800faa0:	6812      	ldr	r2, [r2, #0]
 800faa2:	3b04      	subs	r3, #4
 800faa4:	2a00      	cmp	r2, #0
 800faa6:	d1ef      	bne.n	800fa88 <quorem+0xe8>
 800faa8:	3c01      	subs	r4, #1
 800faaa:	e7ea      	b.n	800fa82 <quorem+0xe2>
 800faac:	2000      	movs	r0, #0
 800faae:	e7ee      	b.n	800fa8e <quorem+0xee>

0800fab0 <_dtoa_r>:
 800fab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab4:	ed2d 8b02 	vpush	{d8}
 800fab8:	b091      	sub	sp, #68	@ 0x44
 800faba:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fabe:	9107      	str	r1, [sp, #28]
 800fac0:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800fac2:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fac4:	9209      	str	r2, [sp, #36]	@ 0x24
 800fac6:	ec55 4b10 	vmov	r4, r5, d0
 800faca:	4681      	mov	r9, r0
 800facc:	930d      	str	r3, [sp, #52]	@ 0x34
 800face:	b149      	cbz	r1, 800fae4 <_dtoa_r+0x34>
 800fad0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fad2:	604a      	str	r2, [r1, #4]
 800fad4:	2301      	movs	r3, #1
 800fad6:	4093      	lsls	r3, r2
 800fad8:	608b      	str	r3, [r1, #8]
 800fada:	f002 faa2 	bl	8012022 <_Bfree>
 800fade:	2300      	movs	r3, #0
 800fae0:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 800fae4:	1e2b      	subs	r3, r5, #0
 800fae6:	bfbb      	ittet	lt
 800fae8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800faec:	9303      	strlt	r3, [sp, #12]
 800faee:	2300      	movge	r3, #0
 800faf0:	2201      	movlt	r2, #1
 800faf2:	bfac      	ite	ge
 800faf4:	6033      	strge	r3, [r6, #0]
 800faf6:	6032      	strlt	r2, [r6, #0]
 800faf8:	4b91      	ldr	r3, [pc, #580]	@ (800fd40 <_dtoa_r+0x290>)
 800fafa:	9e03      	ldr	r6, [sp, #12]
 800fafc:	43b3      	bics	r3, r6
 800fafe:	d114      	bne.n	800fb2a <_dtoa_r+0x7a>
 800fb00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fb06:	6013      	str	r3, [r2, #0]
 800fb08:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fb0c:	4323      	orrs	r3, r4
 800fb0e:	f000 84df 	beq.w	80104d0 <_dtoa_r+0xa20>
 800fb12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fb14:	4f8b      	ldr	r7, [pc, #556]	@ (800fd44 <_dtoa_r+0x294>)
 800fb16:	b113      	cbz	r3, 800fb1e <_dtoa_r+0x6e>
 800fb18:	1cfb      	adds	r3, r7, #3
 800fb1a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fb1c:	6013      	str	r3, [r2, #0]
 800fb1e:	4638      	mov	r0, r7
 800fb20:	b011      	add	sp, #68	@ 0x44
 800fb22:	ecbd 8b02 	vpop	{d8}
 800fb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb2a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fb2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb36:	d109      	bne.n	800fb4c <_dtoa_r+0x9c>
 800fb38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	6013      	str	r3, [r2, #0]
 800fb3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fb40:	b113      	cbz	r3, 800fb48 <_dtoa_r+0x98>
 800fb42:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fb44:	4b80      	ldr	r3, [pc, #512]	@ (800fd48 <_dtoa_r+0x298>)
 800fb46:	6013      	str	r3, [r2, #0]
 800fb48:	4f80      	ldr	r7, [pc, #512]	@ (800fd4c <_dtoa_r+0x29c>)
 800fb4a:	e7e8      	b.n	800fb1e <_dtoa_r+0x6e>
 800fb4c:	aa0e      	add	r2, sp, #56	@ 0x38
 800fb4e:	a90f      	add	r1, sp, #60	@ 0x3c
 800fb50:	4648      	mov	r0, r9
 800fb52:	eeb0 0b48 	vmov.f64	d0, d8
 800fb56:	f002 fd1b 	bl	8012590 <__d2b>
 800fb5a:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fb5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb60:	9001      	str	r0, [sp, #4]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d045      	beq.n	800fbf2 <_dtoa_r+0x142>
 800fb66:	eeb0 7b48 	vmov.f64	d7, d8
 800fb6a:	ee18 1a90 	vmov	r1, s17
 800fb6e:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fb72:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fb76:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fb7a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fb7e:	2500      	movs	r5, #0
 800fb80:	ee07 1a90 	vmov	s15, r1
 800fb84:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fb88:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 800fd28 <_dtoa_r+0x278>
 800fb8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fb90:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 800fd30 <_dtoa_r+0x280>
 800fb94:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fb98:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 800fd38 <_dtoa_r+0x288>
 800fb9c:	ee07 3a90 	vmov	s15, r3
 800fba0:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fba4:	eeb0 7b46 	vmov.f64	d7, d6
 800fba8:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fbac:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fbb0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbb8:	ee16 8a90 	vmov	r8, s13
 800fbbc:	d508      	bpl.n	800fbd0 <_dtoa_r+0x120>
 800fbbe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fbc2:	eeb4 6b47 	vcmp.f64	d6, d7
 800fbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbca:	bf18      	it	ne
 800fbcc:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800fbd0:	f1b8 0f16 	cmp.w	r8, #22
 800fbd4:	d82b      	bhi.n	800fc2e <_dtoa_r+0x17e>
 800fbd6:	495e      	ldr	r1, [pc, #376]	@ (800fd50 <_dtoa_r+0x2a0>)
 800fbd8:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fbdc:	ed91 7b00 	vldr	d7, [r1]
 800fbe0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe8:	d501      	bpl.n	800fbee <_dtoa_r+0x13e>
 800fbea:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800fbee:	2100      	movs	r1, #0
 800fbf0:	e01e      	b.n	800fc30 <_dtoa_r+0x180>
 800fbf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbf4:	4413      	add	r3, r2
 800fbf6:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fbfa:	2920      	cmp	r1, #32
 800fbfc:	bfc1      	itttt	gt
 800fbfe:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fc02:	408e      	lslgt	r6, r1
 800fc04:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fc08:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fc0c:	bfd6      	itet	le
 800fc0e:	f1c1 0120 	rsble	r1, r1, #32
 800fc12:	4331      	orrgt	r1, r6
 800fc14:	fa04 f101 	lslle.w	r1, r4, r1
 800fc18:	ee07 1a90 	vmov	s15, r1
 800fc1c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fc20:	3b01      	subs	r3, #1
 800fc22:	ee17 1a90 	vmov	r1, s15
 800fc26:	2501      	movs	r5, #1
 800fc28:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fc2c:	e7a8      	b.n	800fb80 <_dtoa_r+0xd0>
 800fc2e:	2101      	movs	r1, #1
 800fc30:	1ad2      	subs	r2, r2, r3
 800fc32:	1e53      	subs	r3, r2, #1
 800fc34:	9306      	str	r3, [sp, #24]
 800fc36:	bf45      	ittet	mi
 800fc38:	f1c2 0301 	rsbmi	r3, r2, #1
 800fc3c:	9305      	strmi	r3, [sp, #20]
 800fc3e:	2300      	movpl	r3, #0
 800fc40:	2300      	movmi	r3, #0
 800fc42:	bf4c      	ite	mi
 800fc44:	9306      	strmi	r3, [sp, #24]
 800fc46:	9305      	strpl	r3, [sp, #20]
 800fc48:	f1b8 0f00 	cmp.w	r8, #0
 800fc4c:	910c      	str	r1, [sp, #48]	@ 0x30
 800fc4e:	db18      	blt.n	800fc82 <_dtoa_r+0x1d2>
 800fc50:	9b06      	ldr	r3, [sp, #24]
 800fc52:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fc56:	4443      	add	r3, r8
 800fc58:	9306      	str	r3, [sp, #24]
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	9a07      	ldr	r2, [sp, #28]
 800fc5e:	2a09      	cmp	r2, #9
 800fc60:	d84a      	bhi.n	800fcf8 <_dtoa_r+0x248>
 800fc62:	2a05      	cmp	r2, #5
 800fc64:	bfc4      	itt	gt
 800fc66:	3a04      	subgt	r2, #4
 800fc68:	9207      	strgt	r2, [sp, #28]
 800fc6a:	9a07      	ldr	r2, [sp, #28]
 800fc6c:	f1a2 0202 	sub.w	r2, r2, #2
 800fc70:	bfcc      	ite	gt
 800fc72:	2400      	movgt	r4, #0
 800fc74:	2401      	movle	r4, #1
 800fc76:	2a03      	cmp	r2, #3
 800fc78:	d849      	bhi.n	800fd0e <_dtoa_r+0x25e>
 800fc7a:	e8df f002 	tbb	[pc, r2]
 800fc7e:	2f0b      	.short	0x2f0b
 800fc80:	3b2d      	.short	0x3b2d
 800fc82:	9b05      	ldr	r3, [sp, #20]
 800fc84:	2200      	movs	r2, #0
 800fc86:	eba3 0308 	sub.w	r3, r3, r8
 800fc8a:	9305      	str	r3, [sp, #20]
 800fc8c:	920a      	str	r2, [sp, #40]	@ 0x28
 800fc8e:	f1c8 0300 	rsb	r3, r8, #0
 800fc92:	e7e3      	b.n	800fc5c <_dtoa_r+0x1ac>
 800fc94:	2200      	movs	r2, #0
 800fc96:	9208      	str	r2, [sp, #32]
 800fc98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc9a:	2a00      	cmp	r2, #0
 800fc9c:	dc3a      	bgt.n	800fd14 <_dtoa_r+0x264>
 800fc9e:	f04f 0b01 	mov.w	fp, #1
 800fca2:	46da      	mov	sl, fp
 800fca4:	465a      	mov	r2, fp
 800fca6:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fcaa:	2100      	movs	r1, #0
 800fcac:	2004      	movs	r0, #4
 800fcae:	f100 0614 	add.w	r6, r0, #20
 800fcb2:	4296      	cmp	r6, r2
 800fcb4:	d933      	bls.n	800fd1e <_dtoa_r+0x26e>
 800fcb6:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 800fcba:	4648      	mov	r0, r9
 800fcbc:	9304      	str	r3, [sp, #16]
 800fcbe:	f002 f98b 	bl	8011fd8 <_Balloc>
 800fcc2:	9b04      	ldr	r3, [sp, #16]
 800fcc4:	4607      	mov	r7, r0
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d148      	bne.n	800fd5c <_dtoa_r+0x2ac>
 800fcca:	4b22      	ldr	r3, [pc, #136]	@ (800fd54 <_dtoa_r+0x2a4>)
 800fccc:	4602      	mov	r2, r0
 800fcce:	f240 11af 	movw	r1, #431	@ 0x1af
 800fcd2:	4821      	ldr	r0, [pc, #132]	@ (800fd58 <_dtoa_r+0x2a8>)
 800fcd4:	f003 f824 	bl	8012d20 <__assert_func>
 800fcd8:	2201      	movs	r2, #1
 800fcda:	e7dc      	b.n	800fc96 <_dtoa_r+0x1e6>
 800fcdc:	2200      	movs	r2, #0
 800fcde:	9208      	str	r2, [sp, #32]
 800fce0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fce2:	eb08 0b02 	add.w	fp, r8, r2
 800fce6:	f10b 0a01 	add.w	sl, fp, #1
 800fcea:	4652      	mov	r2, sl
 800fcec:	2a01      	cmp	r2, #1
 800fcee:	bfb8      	it	lt
 800fcf0:	2201      	movlt	r2, #1
 800fcf2:	e7da      	b.n	800fcaa <_dtoa_r+0x1fa>
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	e7f2      	b.n	800fcde <_dtoa_r+0x22e>
 800fcf8:	2401      	movs	r4, #1
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800fd00:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fd04:	2100      	movs	r1, #0
 800fd06:	46da      	mov	sl, fp
 800fd08:	2212      	movs	r2, #18
 800fd0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fd0c:	e7cd      	b.n	800fcaa <_dtoa_r+0x1fa>
 800fd0e:	2201      	movs	r2, #1
 800fd10:	9208      	str	r2, [sp, #32]
 800fd12:	e7f5      	b.n	800fd00 <_dtoa_r+0x250>
 800fd14:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800fd18:	46da      	mov	sl, fp
 800fd1a:	465a      	mov	r2, fp
 800fd1c:	e7c5      	b.n	800fcaa <_dtoa_r+0x1fa>
 800fd1e:	3101      	adds	r1, #1
 800fd20:	0040      	lsls	r0, r0, #1
 800fd22:	e7c4      	b.n	800fcae <_dtoa_r+0x1fe>
 800fd24:	f3af 8000 	nop.w
 800fd28:	636f4361 	.word	0x636f4361
 800fd2c:	3fd287a7 	.word	0x3fd287a7
 800fd30:	8b60c8b3 	.word	0x8b60c8b3
 800fd34:	3fc68a28 	.word	0x3fc68a28
 800fd38:	509f79fb 	.word	0x509f79fb
 800fd3c:	3fd34413 	.word	0x3fd34413
 800fd40:	7ff00000 	.word	0x7ff00000
 800fd44:	080148ce 	.word	0x080148ce
 800fd48:	080148d3 	.word	0x080148d3
 800fd4c:	080148d2 	.word	0x080148d2
 800fd50:	08014a00 	.word	0x08014a00
 800fd54:	080148d4 	.word	0x080148d4
 800fd58:	080148e5 	.word	0x080148e5
 800fd5c:	f1ba 0f0e 	cmp.w	sl, #14
 800fd60:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 800fd64:	d86f      	bhi.n	800fe46 <_dtoa_r+0x396>
 800fd66:	2c00      	cmp	r4, #0
 800fd68:	d06d      	beq.n	800fe46 <_dtoa_r+0x396>
 800fd6a:	f1b8 0f00 	cmp.w	r8, #0
 800fd6e:	f340 80c2 	ble.w	800fef6 <_dtoa_r+0x446>
 800fd72:	4aca      	ldr	r2, [pc, #808]	@ (801009c <_dtoa_r+0x5ec>)
 800fd74:	f008 010f 	and.w	r1, r8, #15
 800fd78:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fd7c:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800fd80:	ed92 7b00 	vldr	d7, [r2]
 800fd84:	ea4f 1128 	mov.w	r1, r8, asr #4
 800fd88:	f000 80a9 	beq.w	800fede <_dtoa_r+0x42e>
 800fd8c:	4ac4      	ldr	r2, [pc, #784]	@ (80100a0 <_dtoa_r+0x5f0>)
 800fd8e:	ed92 6b08 	vldr	d6, [r2, #32]
 800fd92:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800fd96:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fd9a:	f001 010f 	and.w	r1, r1, #15
 800fd9e:	2203      	movs	r2, #3
 800fda0:	48bf      	ldr	r0, [pc, #764]	@ (80100a0 <_dtoa_r+0x5f0>)
 800fda2:	2900      	cmp	r1, #0
 800fda4:	f040 809d 	bne.w	800fee2 <_dtoa_r+0x432>
 800fda8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fdac:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fdb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fdb4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fdb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fdba:	2900      	cmp	r1, #0
 800fdbc:	f000 80c1 	beq.w	800ff42 <_dtoa_r+0x492>
 800fdc0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800fdc4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdcc:	f140 80b9 	bpl.w	800ff42 <_dtoa_r+0x492>
 800fdd0:	f1ba 0f00 	cmp.w	sl, #0
 800fdd4:	f000 80b5 	beq.w	800ff42 <_dtoa_r+0x492>
 800fdd8:	f1bb 0f00 	cmp.w	fp, #0
 800fddc:	dd31      	ble.n	800fe42 <_dtoa_r+0x392>
 800fdde:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800fde2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fde6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fdea:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800fdee:	9104      	str	r1, [sp, #16]
 800fdf0:	3201      	adds	r2, #1
 800fdf2:	465c      	mov	r4, fp
 800fdf4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fdf8:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800fdfc:	ee07 2a90 	vmov	s15, r2
 800fe00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800fe04:	eea7 5b06 	vfma.f64	d5, d7, d6
 800fe08:	ee15 2a90 	vmov	r2, s11
 800fe0c:	ec51 0b15 	vmov	r0, r1, d5
 800fe10:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800fe14:	2c00      	cmp	r4, #0
 800fe16:	f040 8098 	bne.w	800ff4a <_dtoa_r+0x49a>
 800fe1a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800fe1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fe22:	ec41 0b17 	vmov	d7, r0, r1
 800fe26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fe2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2e:	f300 8260 	bgt.w	80102f2 <_dtoa_r+0x842>
 800fe32:	eeb1 7b47 	vneg.f64	d7, d7
 800fe36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800fe3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe3e:	f100 80f5 	bmi.w	801002c <_dtoa_r+0x57c>
 800fe42:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fe46:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fe48:	2a00      	cmp	r2, #0
 800fe4a:	f2c0 812b 	blt.w	80100a4 <_dtoa_r+0x5f4>
 800fe4e:	f1b8 0f0e 	cmp.w	r8, #14
 800fe52:	f300 8127 	bgt.w	80100a4 <_dtoa_r+0x5f4>
 800fe56:	4b91      	ldr	r3, [pc, #580]	@ (801009c <_dtoa_r+0x5ec>)
 800fe58:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fe5c:	ed93 6b00 	vldr	d6, [r3]
 800fe60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	da03      	bge.n	800fe6e <_dtoa_r+0x3be>
 800fe66:	f1ba 0f00 	cmp.w	sl, #0
 800fe6a:	f340 80d2 	ble.w	8010012 <_dtoa_r+0x562>
 800fe6e:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800fe72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe76:	463e      	mov	r6, r7
 800fe78:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800fe7c:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800fe80:	ee15 3a10 	vmov	r3, s10
 800fe84:	3330      	adds	r3, #48	@ 0x30
 800fe86:	f806 3b01 	strb.w	r3, [r6], #1
 800fe8a:	1bf3      	subs	r3, r6, r7
 800fe8c:	459a      	cmp	sl, r3
 800fe8e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800fe92:	eea3 7b46 	vfms.f64	d7, d3, d6
 800fe96:	f040 80f8 	bne.w	801008a <_dtoa_r+0x5da>
 800fe9a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800fe9e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800fea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea6:	f300 80dd 	bgt.w	8010064 <_dtoa_r+0x5b4>
 800feaa:	eeb4 7b46 	vcmp.f64	d7, d6
 800feae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb2:	d104      	bne.n	800febe <_dtoa_r+0x40e>
 800feb4:	ee15 3a10 	vmov	r3, s10
 800feb8:	07db      	lsls	r3, r3, #31
 800feba:	f100 80d3 	bmi.w	8010064 <_dtoa_r+0x5b4>
 800febe:	9901      	ldr	r1, [sp, #4]
 800fec0:	4648      	mov	r0, r9
 800fec2:	f002 f8ae 	bl	8012022 <_Bfree>
 800fec6:	2300      	movs	r3, #0
 800fec8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800feca:	7033      	strb	r3, [r6, #0]
 800fecc:	f108 0301 	add.w	r3, r8, #1
 800fed0:	6013      	str	r3, [r2, #0]
 800fed2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f43f ae22 	beq.w	800fb1e <_dtoa_r+0x6e>
 800feda:	601e      	str	r6, [r3, #0]
 800fedc:	e61f      	b.n	800fb1e <_dtoa_r+0x6e>
 800fede:	2202      	movs	r2, #2
 800fee0:	e75e      	b.n	800fda0 <_dtoa_r+0x2f0>
 800fee2:	07cc      	lsls	r4, r1, #31
 800fee4:	d504      	bpl.n	800fef0 <_dtoa_r+0x440>
 800fee6:	ed90 6b00 	vldr	d6, [r0]
 800feea:	3201      	adds	r2, #1
 800feec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fef0:	1049      	asrs	r1, r1, #1
 800fef2:	3008      	adds	r0, #8
 800fef4:	e755      	b.n	800fda2 <_dtoa_r+0x2f2>
 800fef6:	d022      	beq.n	800ff3e <_dtoa_r+0x48e>
 800fef8:	f1c8 0100 	rsb	r1, r8, #0
 800fefc:	4a67      	ldr	r2, [pc, #412]	@ (801009c <_dtoa_r+0x5ec>)
 800fefe:	f001 000f 	and.w	r0, r1, #15
 800ff02:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ff06:	ed92 7b00 	vldr	d7, [r2]
 800ff0a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ff0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff12:	4863      	ldr	r0, [pc, #396]	@ (80100a0 <_dtoa_r+0x5f0>)
 800ff14:	1109      	asrs	r1, r1, #4
 800ff16:	2400      	movs	r4, #0
 800ff18:	2202      	movs	r2, #2
 800ff1a:	b929      	cbnz	r1, 800ff28 <_dtoa_r+0x478>
 800ff1c:	2c00      	cmp	r4, #0
 800ff1e:	f43f af49 	beq.w	800fdb4 <_dtoa_r+0x304>
 800ff22:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff26:	e745      	b.n	800fdb4 <_dtoa_r+0x304>
 800ff28:	07ce      	lsls	r6, r1, #31
 800ff2a:	d505      	bpl.n	800ff38 <_dtoa_r+0x488>
 800ff2c:	ed90 6b00 	vldr	d6, [r0]
 800ff30:	3201      	adds	r2, #1
 800ff32:	2401      	movs	r4, #1
 800ff34:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff38:	1049      	asrs	r1, r1, #1
 800ff3a:	3008      	adds	r0, #8
 800ff3c:	e7ed      	b.n	800ff1a <_dtoa_r+0x46a>
 800ff3e:	2202      	movs	r2, #2
 800ff40:	e738      	b.n	800fdb4 <_dtoa_r+0x304>
 800ff42:	f8cd 8010 	str.w	r8, [sp, #16]
 800ff46:	4654      	mov	r4, sl
 800ff48:	e754      	b.n	800fdf4 <_dtoa_r+0x344>
 800ff4a:	4a54      	ldr	r2, [pc, #336]	@ (801009c <_dtoa_r+0x5ec>)
 800ff4c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ff50:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ff54:	9a08      	ldr	r2, [sp, #32]
 800ff56:	ec41 0b17 	vmov	d7, r0, r1
 800ff5a:	443c      	add	r4, r7
 800ff5c:	b34a      	cbz	r2, 800ffb2 <_dtoa_r+0x502>
 800ff5e:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ff62:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800ff66:	463e      	mov	r6, r7
 800ff68:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ff6c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ff70:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ff74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ff78:	ee14 2a90 	vmov	r2, s9
 800ff7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ff80:	3230      	adds	r2, #48	@ 0x30
 800ff82:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ff86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff8e:	f806 2b01 	strb.w	r2, [r6], #1
 800ff92:	d438      	bmi.n	8010006 <_dtoa_r+0x556>
 800ff94:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ff98:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ff9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa0:	d462      	bmi.n	8010068 <_dtoa_r+0x5b8>
 800ffa2:	42a6      	cmp	r6, r4
 800ffa4:	f43f af4d 	beq.w	800fe42 <_dtoa_r+0x392>
 800ffa8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ffac:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ffb0:	e7e0      	b.n	800ff74 <_dtoa_r+0x4c4>
 800ffb2:	4621      	mov	r1, r4
 800ffb4:	463e      	mov	r6, r7
 800ffb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ffba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ffbe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ffc2:	ee14 2a90 	vmov	r2, s9
 800ffc6:	3230      	adds	r2, #48	@ 0x30
 800ffc8:	f806 2b01 	strb.w	r2, [r6], #1
 800ffcc:	42a6      	cmp	r6, r4
 800ffce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ffd2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ffd6:	d119      	bne.n	801000c <_dtoa_r+0x55c>
 800ffd8:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ffdc:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ffe0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ffe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe8:	dc3e      	bgt.n	8010068 <_dtoa_r+0x5b8>
 800ffea:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ffee:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800fff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff6:	f57f af24 	bpl.w	800fe42 <_dtoa_r+0x392>
 800fffa:	460e      	mov	r6, r1
 800fffc:	3901      	subs	r1, #1
 800fffe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010002:	2b30      	cmp	r3, #48	@ 0x30
 8010004:	d0f9      	beq.n	800fffa <_dtoa_r+0x54a>
 8010006:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801000a:	e758      	b.n	800febe <_dtoa_r+0x40e>
 801000c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010010:	e7d5      	b.n	800ffbe <_dtoa_r+0x50e>
 8010012:	d10b      	bne.n	801002c <_dtoa_r+0x57c>
 8010014:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010018:	ee26 6b07 	vmul.f64	d6, d6, d7
 801001c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010020:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010028:	f2c0 8160 	blt.w	80102ec <_dtoa_r+0x83c>
 801002c:	2400      	movs	r4, #0
 801002e:	4625      	mov	r5, r4
 8010030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010032:	43db      	mvns	r3, r3
 8010034:	9304      	str	r3, [sp, #16]
 8010036:	463e      	mov	r6, r7
 8010038:	f04f 0800 	mov.w	r8, #0
 801003c:	4621      	mov	r1, r4
 801003e:	4648      	mov	r0, r9
 8010040:	f001 ffef 	bl	8012022 <_Bfree>
 8010044:	2d00      	cmp	r5, #0
 8010046:	d0de      	beq.n	8010006 <_dtoa_r+0x556>
 8010048:	f1b8 0f00 	cmp.w	r8, #0
 801004c:	d005      	beq.n	801005a <_dtoa_r+0x5aa>
 801004e:	45a8      	cmp	r8, r5
 8010050:	d003      	beq.n	801005a <_dtoa_r+0x5aa>
 8010052:	4641      	mov	r1, r8
 8010054:	4648      	mov	r0, r9
 8010056:	f001 ffe4 	bl	8012022 <_Bfree>
 801005a:	4629      	mov	r1, r5
 801005c:	4648      	mov	r0, r9
 801005e:	f001 ffe0 	bl	8012022 <_Bfree>
 8010062:	e7d0      	b.n	8010006 <_dtoa_r+0x556>
 8010064:	f8cd 8010 	str.w	r8, [sp, #16]
 8010068:	4633      	mov	r3, r6
 801006a:	461e      	mov	r6, r3
 801006c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010070:	2a39      	cmp	r2, #57	@ 0x39
 8010072:	d106      	bne.n	8010082 <_dtoa_r+0x5d2>
 8010074:	429f      	cmp	r7, r3
 8010076:	d1f8      	bne.n	801006a <_dtoa_r+0x5ba>
 8010078:	9a04      	ldr	r2, [sp, #16]
 801007a:	3201      	adds	r2, #1
 801007c:	9204      	str	r2, [sp, #16]
 801007e:	2230      	movs	r2, #48	@ 0x30
 8010080:	703a      	strb	r2, [r7, #0]
 8010082:	781a      	ldrb	r2, [r3, #0]
 8010084:	3201      	adds	r2, #1
 8010086:	701a      	strb	r2, [r3, #0]
 8010088:	e7bd      	b.n	8010006 <_dtoa_r+0x556>
 801008a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801008e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010096:	f47f aeef 	bne.w	800fe78 <_dtoa_r+0x3c8>
 801009a:	e710      	b.n	800febe <_dtoa_r+0x40e>
 801009c:	08014a00 	.word	0x08014a00
 80100a0:	080149d8 	.word	0x080149d8
 80100a4:	9908      	ldr	r1, [sp, #32]
 80100a6:	2900      	cmp	r1, #0
 80100a8:	f000 80e3 	beq.w	8010272 <_dtoa_r+0x7c2>
 80100ac:	9907      	ldr	r1, [sp, #28]
 80100ae:	2901      	cmp	r1, #1
 80100b0:	f300 80c8 	bgt.w	8010244 <_dtoa_r+0x794>
 80100b4:	2d00      	cmp	r5, #0
 80100b6:	f000 80c1 	beq.w	801023c <_dtoa_r+0x78c>
 80100ba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80100be:	9e05      	ldr	r6, [sp, #20]
 80100c0:	461c      	mov	r4, r3
 80100c2:	9304      	str	r3, [sp, #16]
 80100c4:	9b05      	ldr	r3, [sp, #20]
 80100c6:	4413      	add	r3, r2
 80100c8:	9305      	str	r3, [sp, #20]
 80100ca:	9b06      	ldr	r3, [sp, #24]
 80100cc:	2101      	movs	r1, #1
 80100ce:	4413      	add	r3, r2
 80100d0:	4648      	mov	r0, r9
 80100d2:	9306      	str	r3, [sp, #24]
 80100d4:	f002 f840 	bl	8012158 <__i2b>
 80100d8:	9b04      	ldr	r3, [sp, #16]
 80100da:	4605      	mov	r5, r0
 80100dc:	b166      	cbz	r6, 80100f8 <_dtoa_r+0x648>
 80100de:	9a06      	ldr	r2, [sp, #24]
 80100e0:	2a00      	cmp	r2, #0
 80100e2:	dd09      	ble.n	80100f8 <_dtoa_r+0x648>
 80100e4:	42b2      	cmp	r2, r6
 80100e6:	9905      	ldr	r1, [sp, #20]
 80100e8:	bfa8      	it	ge
 80100ea:	4632      	movge	r2, r6
 80100ec:	1a89      	subs	r1, r1, r2
 80100ee:	9105      	str	r1, [sp, #20]
 80100f0:	9906      	ldr	r1, [sp, #24]
 80100f2:	1ab6      	subs	r6, r6, r2
 80100f4:	1a8a      	subs	r2, r1, r2
 80100f6:	9206      	str	r2, [sp, #24]
 80100f8:	b1fb      	cbz	r3, 801013a <_dtoa_r+0x68a>
 80100fa:	9a08      	ldr	r2, [sp, #32]
 80100fc:	2a00      	cmp	r2, #0
 80100fe:	f000 80bc 	beq.w	801027a <_dtoa_r+0x7ca>
 8010102:	b19c      	cbz	r4, 801012c <_dtoa_r+0x67c>
 8010104:	4629      	mov	r1, r5
 8010106:	4622      	mov	r2, r4
 8010108:	4648      	mov	r0, r9
 801010a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801010c:	f002 f8e4 	bl	80122d8 <__pow5mult>
 8010110:	9a01      	ldr	r2, [sp, #4]
 8010112:	4601      	mov	r1, r0
 8010114:	4605      	mov	r5, r0
 8010116:	4648      	mov	r0, r9
 8010118:	f002 f834 	bl	8012184 <__multiply>
 801011c:	9901      	ldr	r1, [sp, #4]
 801011e:	9004      	str	r0, [sp, #16]
 8010120:	4648      	mov	r0, r9
 8010122:	f001 ff7e 	bl	8012022 <_Bfree>
 8010126:	9a04      	ldr	r2, [sp, #16]
 8010128:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801012a:	9201      	str	r2, [sp, #4]
 801012c:	1b1a      	subs	r2, r3, r4
 801012e:	d004      	beq.n	801013a <_dtoa_r+0x68a>
 8010130:	9901      	ldr	r1, [sp, #4]
 8010132:	4648      	mov	r0, r9
 8010134:	f002 f8d0 	bl	80122d8 <__pow5mult>
 8010138:	9001      	str	r0, [sp, #4]
 801013a:	2101      	movs	r1, #1
 801013c:	4648      	mov	r0, r9
 801013e:	f002 f80b 	bl	8012158 <__i2b>
 8010142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010144:	4604      	mov	r4, r0
 8010146:	2b00      	cmp	r3, #0
 8010148:	f000 81cb 	beq.w	80104e2 <_dtoa_r+0xa32>
 801014c:	461a      	mov	r2, r3
 801014e:	4601      	mov	r1, r0
 8010150:	4648      	mov	r0, r9
 8010152:	f002 f8c1 	bl	80122d8 <__pow5mult>
 8010156:	9b07      	ldr	r3, [sp, #28]
 8010158:	2b01      	cmp	r3, #1
 801015a:	4604      	mov	r4, r0
 801015c:	f300 8095 	bgt.w	801028a <_dtoa_r+0x7da>
 8010160:	9b02      	ldr	r3, [sp, #8]
 8010162:	2b00      	cmp	r3, #0
 8010164:	f040 808b 	bne.w	801027e <_dtoa_r+0x7ce>
 8010168:	9b03      	ldr	r3, [sp, #12]
 801016a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801016e:	2a00      	cmp	r2, #0
 8010170:	f040 8087 	bne.w	8010282 <_dtoa_r+0x7d2>
 8010174:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010178:	0d12      	lsrs	r2, r2, #20
 801017a:	0512      	lsls	r2, r2, #20
 801017c:	2a00      	cmp	r2, #0
 801017e:	f000 8082 	beq.w	8010286 <_dtoa_r+0x7d6>
 8010182:	9b05      	ldr	r3, [sp, #20]
 8010184:	3301      	adds	r3, #1
 8010186:	9305      	str	r3, [sp, #20]
 8010188:	9b06      	ldr	r3, [sp, #24]
 801018a:	3301      	adds	r3, #1
 801018c:	9306      	str	r3, [sp, #24]
 801018e:	2301      	movs	r3, #1
 8010190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010194:	2b00      	cmp	r3, #0
 8010196:	f000 81aa 	beq.w	80104ee <_dtoa_r+0xa3e>
 801019a:	6922      	ldr	r2, [r4, #16]
 801019c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80101a0:	6910      	ldr	r0, [r2, #16]
 80101a2:	f001 ff8d 	bl	80120c0 <__hi0bits>
 80101a6:	f1c0 0020 	rsb	r0, r0, #32
 80101aa:	9b06      	ldr	r3, [sp, #24]
 80101ac:	4418      	add	r0, r3
 80101ae:	f010 001f 	ands.w	r0, r0, #31
 80101b2:	d076      	beq.n	80102a2 <_dtoa_r+0x7f2>
 80101b4:	f1c0 0220 	rsb	r2, r0, #32
 80101b8:	2a04      	cmp	r2, #4
 80101ba:	dd69      	ble.n	8010290 <_dtoa_r+0x7e0>
 80101bc:	9b05      	ldr	r3, [sp, #20]
 80101be:	f1c0 001c 	rsb	r0, r0, #28
 80101c2:	4403      	add	r3, r0
 80101c4:	9305      	str	r3, [sp, #20]
 80101c6:	9b06      	ldr	r3, [sp, #24]
 80101c8:	4406      	add	r6, r0
 80101ca:	4403      	add	r3, r0
 80101cc:	9306      	str	r3, [sp, #24]
 80101ce:	9b05      	ldr	r3, [sp, #20]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	dd05      	ble.n	80101e0 <_dtoa_r+0x730>
 80101d4:	9901      	ldr	r1, [sp, #4]
 80101d6:	461a      	mov	r2, r3
 80101d8:	4648      	mov	r0, r9
 80101da:	f002 f8bd 	bl	8012358 <__lshift>
 80101de:	9001      	str	r0, [sp, #4]
 80101e0:	9b06      	ldr	r3, [sp, #24]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	dd05      	ble.n	80101f2 <_dtoa_r+0x742>
 80101e6:	4621      	mov	r1, r4
 80101e8:	461a      	mov	r2, r3
 80101ea:	4648      	mov	r0, r9
 80101ec:	f002 f8b4 	bl	8012358 <__lshift>
 80101f0:	4604      	mov	r4, r0
 80101f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d056      	beq.n	80102a6 <_dtoa_r+0x7f6>
 80101f8:	9801      	ldr	r0, [sp, #4]
 80101fa:	4621      	mov	r1, r4
 80101fc:	f002 f918 	bl	8012430 <__mcmp>
 8010200:	2800      	cmp	r0, #0
 8010202:	da50      	bge.n	80102a6 <_dtoa_r+0x7f6>
 8010204:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8010208:	9304      	str	r3, [sp, #16]
 801020a:	9901      	ldr	r1, [sp, #4]
 801020c:	2300      	movs	r3, #0
 801020e:	220a      	movs	r2, #10
 8010210:	4648      	mov	r0, r9
 8010212:	f001 ff0f 	bl	8012034 <__multadd>
 8010216:	9b08      	ldr	r3, [sp, #32]
 8010218:	9001      	str	r0, [sp, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 8169 	beq.w	80104f2 <_dtoa_r+0xa42>
 8010220:	4629      	mov	r1, r5
 8010222:	2300      	movs	r3, #0
 8010224:	220a      	movs	r2, #10
 8010226:	4648      	mov	r0, r9
 8010228:	f001 ff04 	bl	8012034 <__multadd>
 801022c:	f1bb 0f00 	cmp.w	fp, #0
 8010230:	4605      	mov	r5, r0
 8010232:	dc64      	bgt.n	80102fe <_dtoa_r+0x84e>
 8010234:	9b07      	ldr	r3, [sp, #28]
 8010236:	2b02      	cmp	r3, #2
 8010238:	dc3e      	bgt.n	80102b8 <_dtoa_r+0x808>
 801023a:	e060      	b.n	80102fe <_dtoa_r+0x84e>
 801023c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801023e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010242:	e73c      	b.n	80100be <_dtoa_r+0x60e>
 8010244:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8010248:	42a3      	cmp	r3, r4
 801024a:	bfbf      	itttt	lt
 801024c:	1ae2      	sublt	r2, r4, r3
 801024e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010250:	189b      	addlt	r3, r3, r2
 8010252:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010254:	bfae      	itee	ge
 8010256:	1b1c      	subge	r4, r3, r4
 8010258:	4623      	movlt	r3, r4
 801025a:	2400      	movlt	r4, #0
 801025c:	f1ba 0f00 	cmp.w	sl, #0
 8010260:	bfb5      	itete	lt
 8010262:	9a05      	ldrlt	r2, [sp, #20]
 8010264:	9e05      	ldrge	r6, [sp, #20]
 8010266:	eba2 060a 	sublt.w	r6, r2, sl
 801026a:	4652      	movge	r2, sl
 801026c:	bfb8      	it	lt
 801026e:	2200      	movlt	r2, #0
 8010270:	e727      	b.n	80100c2 <_dtoa_r+0x612>
 8010272:	9e05      	ldr	r6, [sp, #20]
 8010274:	9d08      	ldr	r5, [sp, #32]
 8010276:	461c      	mov	r4, r3
 8010278:	e730      	b.n	80100dc <_dtoa_r+0x62c>
 801027a:	461a      	mov	r2, r3
 801027c:	e758      	b.n	8010130 <_dtoa_r+0x680>
 801027e:	2300      	movs	r3, #0
 8010280:	e786      	b.n	8010190 <_dtoa_r+0x6e0>
 8010282:	9b02      	ldr	r3, [sp, #8]
 8010284:	e784      	b.n	8010190 <_dtoa_r+0x6e0>
 8010286:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010288:	e783      	b.n	8010192 <_dtoa_r+0x6e2>
 801028a:	2300      	movs	r3, #0
 801028c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801028e:	e784      	b.n	801019a <_dtoa_r+0x6ea>
 8010290:	d09d      	beq.n	80101ce <_dtoa_r+0x71e>
 8010292:	9b05      	ldr	r3, [sp, #20]
 8010294:	321c      	adds	r2, #28
 8010296:	4413      	add	r3, r2
 8010298:	9305      	str	r3, [sp, #20]
 801029a:	9b06      	ldr	r3, [sp, #24]
 801029c:	4416      	add	r6, r2
 801029e:	4413      	add	r3, r2
 80102a0:	e794      	b.n	80101cc <_dtoa_r+0x71c>
 80102a2:	4602      	mov	r2, r0
 80102a4:	e7f5      	b.n	8010292 <_dtoa_r+0x7e2>
 80102a6:	f1ba 0f00 	cmp.w	sl, #0
 80102aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80102ae:	46d3      	mov	fp, sl
 80102b0:	dc21      	bgt.n	80102f6 <_dtoa_r+0x846>
 80102b2:	9b07      	ldr	r3, [sp, #28]
 80102b4:	2b02      	cmp	r3, #2
 80102b6:	dd1e      	ble.n	80102f6 <_dtoa_r+0x846>
 80102b8:	f1bb 0f00 	cmp.w	fp, #0
 80102bc:	f47f aeb8 	bne.w	8010030 <_dtoa_r+0x580>
 80102c0:	4621      	mov	r1, r4
 80102c2:	465b      	mov	r3, fp
 80102c4:	2205      	movs	r2, #5
 80102c6:	4648      	mov	r0, r9
 80102c8:	f001 feb4 	bl	8012034 <__multadd>
 80102cc:	4601      	mov	r1, r0
 80102ce:	4604      	mov	r4, r0
 80102d0:	9801      	ldr	r0, [sp, #4]
 80102d2:	f002 f8ad 	bl	8012430 <__mcmp>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	f77f aeaa 	ble.w	8010030 <_dtoa_r+0x580>
 80102dc:	463e      	mov	r6, r7
 80102de:	2331      	movs	r3, #49	@ 0x31
 80102e0:	f806 3b01 	strb.w	r3, [r6], #1
 80102e4:	9b04      	ldr	r3, [sp, #16]
 80102e6:	3301      	adds	r3, #1
 80102e8:	9304      	str	r3, [sp, #16]
 80102ea:	e6a5      	b.n	8010038 <_dtoa_r+0x588>
 80102ec:	f8cd 8010 	str.w	r8, [sp, #16]
 80102f0:	4654      	mov	r4, sl
 80102f2:	4625      	mov	r5, r4
 80102f4:	e7f2      	b.n	80102dc <_dtoa_r+0x82c>
 80102f6:	9b08      	ldr	r3, [sp, #32]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f000 80fe 	beq.w	80104fa <_dtoa_r+0xa4a>
 80102fe:	2e00      	cmp	r6, #0
 8010300:	dd05      	ble.n	801030e <_dtoa_r+0x85e>
 8010302:	4629      	mov	r1, r5
 8010304:	4632      	mov	r2, r6
 8010306:	4648      	mov	r0, r9
 8010308:	f002 f826 	bl	8012358 <__lshift>
 801030c:	4605      	mov	r5, r0
 801030e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010310:	2b00      	cmp	r3, #0
 8010312:	d057      	beq.n	80103c4 <_dtoa_r+0x914>
 8010314:	6869      	ldr	r1, [r5, #4]
 8010316:	4648      	mov	r0, r9
 8010318:	f001 fe5e 	bl	8011fd8 <_Balloc>
 801031c:	4606      	mov	r6, r0
 801031e:	b920      	cbnz	r0, 801032a <_dtoa_r+0x87a>
 8010320:	4b80      	ldr	r3, [pc, #512]	@ (8010524 <_dtoa_r+0xa74>)
 8010322:	4602      	mov	r2, r0
 8010324:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010328:	e4d3      	b.n	800fcd2 <_dtoa_r+0x222>
 801032a:	692a      	ldr	r2, [r5, #16]
 801032c:	3202      	adds	r2, #2
 801032e:	0092      	lsls	r2, r2, #2
 8010330:	f105 010c 	add.w	r1, r5, #12
 8010334:	300c      	adds	r0, #12
 8010336:	f7ff fac5 	bl	800f8c4 <memcpy>
 801033a:	2201      	movs	r2, #1
 801033c:	4631      	mov	r1, r6
 801033e:	4648      	mov	r0, r9
 8010340:	f002 f80a 	bl	8012358 <__lshift>
 8010344:	1c7b      	adds	r3, r7, #1
 8010346:	9305      	str	r3, [sp, #20]
 8010348:	eb07 030b 	add.w	r3, r7, fp
 801034c:	9309      	str	r3, [sp, #36]	@ 0x24
 801034e:	9b02      	ldr	r3, [sp, #8]
 8010350:	f003 0301 	and.w	r3, r3, #1
 8010354:	46a8      	mov	r8, r5
 8010356:	9308      	str	r3, [sp, #32]
 8010358:	4605      	mov	r5, r0
 801035a:	9b05      	ldr	r3, [sp, #20]
 801035c:	9801      	ldr	r0, [sp, #4]
 801035e:	4621      	mov	r1, r4
 8010360:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8010364:	f7ff fb1c 	bl	800f9a0 <quorem>
 8010368:	4641      	mov	r1, r8
 801036a:	9002      	str	r0, [sp, #8]
 801036c:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010370:	9801      	ldr	r0, [sp, #4]
 8010372:	f002 f85d 	bl	8012430 <__mcmp>
 8010376:	462a      	mov	r2, r5
 8010378:	9006      	str	r0, [sp, #24]
 801037a:	4621      	mov	r1, r4
 801037c:	4648      	mov	r0, r9
 801037e:	f002 f873 	bl	8012468 <__mdiff>
 8010382:	68c2      	ldr	r2, [r0, #12]
 8010384:	4606      	mov	r6, r0
 8010386:	b9fa      	cbnz	r2, 80103c8 <_dtoa_r+0x918>
 8010388:	4601      	mov	r1, r0
 801038a:	9801      	ldr	r0, [sp, #4]
 801038c:	f002 f850 	bl	8012430 <__mcmp>
 8010390:	4602      	mov	r2, r0
 8010392:	4631      	mov	r1, r6
 8010394:	4648      	mov	r0, r9
 8010396:	920a      	str	r2, [sp, #40]	@ 0x28
 8010398:	f001 fe43 	bl	8012022 <_Bfree>
 801039c:	9b07      	ldr	r3, [sp, #28]
 801039e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103a0:	9e05      	ldr	r6, [sp, #20]
 80103a2:	ea43 0102 	orr.w	r1, r3, r2
 80103a6:	9b08      	ldr	r3, [sp, #32]
 80103a8:	4319      	orrs	r1, r3
 80103aa:	d10f      	bne.n	80103cc <_dtoa_r+0x91c>
 80103ac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80103b0:	d028      	beq.n	8010404 <_dtoa_r+0x954>
 80103b2:	9b06      	ldr	r3, [sp, #24]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	dd02      	ble.n	80103be <_dtoa_r+0x90e>
 80103b8:	9b02      	ldr	r3, [sp, #8]
 80103ba:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80103be:	f88b a000 	strb.w	sl, [fp]
 80103c2:	e63b      	b.n	801003c <_dtoa_r+0x58c>
 80103c4:	4628      	mov	r0, r5
 80103c6:	e7bd      	b.n	8010344 <_dtoa_r+0x894>
 80103c8:	2201      	movs	r2, #1
 80103ca:	e7e2      	b.n	8010392 <_dtoa_r+0x8e2>
 80103cc:	9b06      	ldr	r3, [sp, #24]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	db04      	blt.n	80103dc <_dtoa_r+0x92c>
 80103d2:	9907      	ldr	r1, [sp, #28]
 80103d4:	430b      	orrs	r3, r1
 80103d6:	9908      	ldr	r1, [sp, #32]
 80103d8:	430b      	orrs	r3, r1
 80103da:	d120      	bne.n	801041e <_dtoa_r+0x96e>
 80103dc:	2a00      	cmp	r2, #0
 80103de:	ddee      	ble.n	80103be <_dtoa_r+0x90e>
 80103e0:	9901      	ldr	r1, [sp, #4]
 80103e2:	2201      	movs	r2, #1
 80103e4:	4648      	mov	r0, r9
 80103e6:	f001 ffb7 	bl	8012358 <__lshift>
 80103ea:	4621      	mov	r1, r4
 80103ec:	9001      	str	r0, [sp, #4]
 80103ee:	f002 f81f 	bl	8012430 <__mcmp>
 80103f2:	2800      	cmp	r0, #0
 80103f4:	dc03      	bgt.n	80103fe <_dtoa_r+0x94e>
 80103f6:	d1e2      	bne.n	80103be <_dtoa_r+0x90e>
 80103f8:	f01a 0f01 	tst.w	sl, #1
 80103fc:	d0df      	beq.n	80103be <_dtoa_r+0x90e>
 80103fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010402:	d1d9      	bne.n	80103b8 <_dtoa_r+0x908>
 8010404:	2339      	movs	r3, #57	@ 0x39
 8010406:	f88b 3000 	strb.w	r3, [fp]
 801040a:	4633      	mov	r3, r6
 801040c:	461e      	mov	r6, r3
 801040e:	3b01      	subs	r3, #1
 8010410:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010414:	2a39      	cmp	r2, #57	@ 0x39
 8010416:	d053      	beq.n	80104c0 <_dtoa_r+0xa10>
 8010418:	3201      	adds	r2, #1
 801041a:	701a      	strb	r2, [r3, #0]
 801041c:	e60e      	b.n	801003c <_dtoa_r+0x58c>
 801041e:	2a00      	cmp	r2, #0
 8010420:	dd07      	ble.n	8010432 <_dtoa_r+0x982>
 8010422:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010426:	d0ed      	beq.n	8010404 <_dtoa_r+0x954>
 8010428:	f10a 0301 	add.w	r3, sl, #1
 801042c:	f88b 3000 	strb.w	r3, [fp]
 8010430:	e604      	b.n	801003c <_dtoa_r+0x58c>
 8010432:	9b05      	ldr	r3, [sp, #20]
 8010434:	9a05      	ldr	r2, [sp, #20]
 8010436:	f803 ac01 	strb.w	sl, [r3, #-1]
 801043a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801043c:	4293      	cmp	r3, r2
 801043e:	d029      	beq.n	8010494 <_dtoa_r+0x9e4>
 8010440:	9901      	ldr	r1, [sp, #4]
 8010442:	2300      	movs	r3, #0
 8010444:	220a      	movs	r2, #10
 8010446:	4648      	mov	r0, r9
 8010448:	f001 fdf4 	bl	8012034 <__multadd>
 801044c:	45a8      	cmp	r8, r5
 801044e:	9001      	str	r0, [sp, #4]
 8010450:	f04f 0300 	mov.w	r3, #0
 8010454:	f04f 020a 	mov.w	r2, #10
 8010458:	4641      	mov	r1, r8
 801045a:	4648      	mov	r0, r9
 801045c:	d107      	bne.n	801046e <_dtoa_r+0x9be>
 801045e:	f001 fde9 	bl	8012034 <__multadd>
 8010462:	4680      	mov	r8, r0
 8010464:	4605      	mov	r5, r0
 8010466:	9b05      	ldr	r3, [sp, #20]
 8010468:	3301      	adds	r3, #1
 801046a:	9305      	str	r3, [sp, #20]
 801046c:	e775      	b.n	801035a <_dtoa_r+0x8aa>
 801046e:	f001 fde1 	bl	8012034 <__multadd>
 8010472:	4629      	mov	r1, r5
 8010474:	4680      	mov	r8, r0
 8010476:	2300      	movs	r3, #0
 8010478:	220a      	movs	r2, #10
 801047a:	4648      	mov	r0, r9
 801047c:	f001 fdda 	bl	8012034 <__multadd>
 8010480:	4605      	mov	r5, r0
 8010482:	e7f0      	b.n	8010466 <_dtoa_r+0x9b6>
 8010484:	f1bb 0f00 	cmp.w	fp, #0
 8010488:	bfcc      	ite	gt
 801048a:	465e      	movgt	r6, fp
 801048c:	2601      	movle	r6, #1
 801048e:	443e      	add	r6, r7
 8010490:	f04f 0800 	mov.w	r8, #0
 8010494:	9901      	ldr	r1, [sp, #4]
 8010496:	2201      	movs	r2, #1
 8010498:	4648      	mov	r0, r9
 801049a:	f001 ff5d 	bl	8012358 <__lshift>
 801049e:	4621      	mov	r1, r4
 80104a0:	9001      	str	r0, [sp, #4]
 80104a2:	f001 ffc5 	bl	8012430 <__mcmp>
 80104a6:	2800      	cmp	r0, #0
 80104a8:	dcaf      	bgt.n	801040a <_dtoa_r+0x95a>
 80104aa:	d102      	bne.n	80104b2 <_dtoa_r+0xa02>
 80104ac:	f01a 0f01 	tst.w	sl, #1
 80104b0:	d1ab      	bne.n	801040a <_dtoa_r+0x95a>
 80104b2:	4633      	mov	r3, r6
 80104b4:	461e      	mov	r6, r3
 80104b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104ba:	2a30      	cmp	r2, #48	@ 0x30
 80104bc:	d0fa      	beq.n	80104b4 <_dtoa_r+0xa04>
 80104be:	e5bd      	b.n	801003c <_dtoa_r+0x58c>
 80104c0:	429f      	cmp	r7, r3
 80104c2:	d1a3      	bne.n	801040c <_dtoa_r+0x95c>
 80104c4:	9b04      	ldr	r3, [sp, #16]
 80104c6:	3301      	adds	r3, #1
 80104c8:	9304      	str	r3, [sp, #16]
 80104ca:	2331      	movs	r3, #49	@ 0x31
 80104cc:	703b      	strb	r3, [r7, #0]
 80104ce:	e5b5      	b.n	801003c <_dtoa_r+0x58c>
 80104d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80104d2:	4f15      	ldr	r7, [pc, #84]	@ (8010528 <_dtoa_r+0xa78>)
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	f43f ab22 	beq.w	800fb1e <_dtoa_r+0x6e>
 80104da:	f107 0308 	add.w	r3, r7, #8
 80104de:	f7ff bb1c 	b.w	800fb1a <_dtoa_r+0x6a>
 80104e2:	9b07      	ldr	r3, [sp, #28]
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	f77f ae3b 	ble.w	8010160 <_dtoa_r+0x6b0>
 80104ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80104ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80104ee:	2001      	movs	r0, #1
 80104f0:	e65b      	b.n	80101aa <_dtoa_r+0x6fa>
 80104f2:	f1bb 0f00 	cmp.w	fp, #0
 80104f6:	f77f aedc 	ble.w	80102b2 <_dtoa_r+0x802>
 80104fa:	463e      	mov	r6, r7
 80104fc:	9801      	ldr	r0, [sp, #4]
 80104fe:	4621      	mov	r1, r4
 8010500:	f7ff fa4e 	bl	800f9a0 <quorem>
 8010504:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010508:	f806 ab01 	strb.w	sl, [r6], #1
 801050c:	1bf2      	subs	r2, r6, r7
 801050e:	4593      	cmp	fp, r2
 8010510:	ddb8      	ble.n	8010484 <_dtoa_r+0x9d4>
 8010512:	9901      	ldr	r1, [sp, #4]
 8010514:	2300      	movs	r3, #0
 8010516:	220a      	movs	r2, #10
 8010518:	4648      	mov	r0, r9
 801051a:	f001 fd8b 	bl	8012034 <__multadd>
 801051e:	9001      	str	r0, [sp, #4]
 8010520:	e7ec      	b.n	80104fc <_dtoa_r+0xa4c>
 8010522:	bf00      	nop
 8010524:	080148d4 	.word	0x080148d4
 8010528:	080148c5 	.word	0x080148c5

0801052c <_malloc_trim_r>:
 801052c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010530:	4606      	mov	r6, r0
 8010532:	2008      	movs	r0, #8
 8010534:	4689      	mov	r9, r1
 8010536:	f002 fb93 	bl	8012c60 <sysconf>
 801053a:	4f24      	ldr	r7, [pc, #144]	@ (80105cc <_malloc_trim_r+0xa0>)
 801053c:	4680      	mov	r8, r0
 801053e:	4630      	mov	r0, r6
 8010540:	f001 fd3e 	bl	8011fc0 <__malloc_lock>
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	685d      	ldr	r5, [r3, #4]
 8010548:	f025 0503 	bic.w	r5, r5, #3
 801054c:	f1a5 0411 	sub.w	r4, r5, #17
 8010550:	eba4 0409 	sub.w	r4, r4, r9
 8010554:	4444      	add	r4, r8
 8010556:	fbb4 f4f8 	udiv	r4, r4, r8
 801055a:	3c01      	subs	r4, #1
 801055c:	fb08 f404 	mul.w	r4, r8, r4
 8010560:	45a0      	cmp	r8, r4
 8010562:	dd05      	ble.n	8010570 <_malloc_trim_r+0x44>
 8010564:	4630      	mov	r0, r6
 8010566:	f001 fd31 	bl	8011fcc <__malloc_unlock>
 801056a:	2000      	movs	r0, #0
 801056c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010570:	2100      	movs	r1, #0
 8010572:	4630      	mov	r0, r6
 8010574:	f002 fb52 	bl	8012c1c <_sbrk_r>
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	442b      	add	r3, r5
 801057c:	4298      	cmp	r0, r3
 801057e:	d1f1      	bne.n	8010564 <_malloc_trim_r+0x38>
 8010580:	4261      	negs	r1, r4
 8010582:	4630      	mov	r0, r6
 8010584:	f002 fb4a 	bl	8012c1c <_sbrk_r>
 8010588:	3001      	adds	r0, #1
 801058a:	d110      	bne.n	80105ae <_malloc_trim_r+0x82>
 801058c:	2100      	movs	r1, #0
 801058e:	4630      	mov	r0, r6
 8010590:	f002 fb44 	bl	8012c1c <_sbrk_r>
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	1a83      	subs	r3, r0, r2
 8010598:	2b0f      	cmp	r3, #15
 801059a:	dde3      	ble.n	8010564 <_malloc_trim_r+0x38>
 801059c:	490c      	ldr	r1, [pc, #48]	@ (80105d0 <_malloc_trim_r+0xa4>)
 801059e:	6809      	ldr	r1, [r1, #0]
 80105a0:	1a40      	subs	r0, r0, r1
 80105a2:	490c      	ldr	r1, [pc, #48]	@ (80105d4 <_malloc_trim_r+0xa8>)
 80105a4:	f043 0301 	orr.w	r3, r3, #1
 80105a8:	6008      	str	r0, [r1, #0]
 80105aa:	6053      	str	r3, [r2, #4]
 80105ac:	e7da      	b.n	8010564 <_malloc_trim_r+0x38>
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	4a08      	ldr	r2, [pc, #32]	@ (80105d4 <_malloc_trim_r+0xa8>)
 80105b2:	1b2d      	subs	r5, r5, r4
 80105b4:	f045 0501 	orr.w	r5, r5, #1
 80105b8:	605d      	str	r5, [r3, #4]
 80105ba:	6813      	ldr	r3, [r2, #0]
 80105bc:	4630      	mov	r0, r6
 80105be:	1b1b      	subs	r3, r3, r4
 80105c0:	6013      	str	r3, [r2, #0]
 80105c2:	f001 fd03 	bl	8011fcc <__malloc_unlock>
 80105c6:	2001      	movs	r0, #1
 80105c8:	e7d0      	b.n	801056c <_malloc_trim_r+0x40>
 80105ca:	bf00      	nop
 80105cc:	240002bc 	.word	0x240002bc
 80105d0:	240002b4 	.word	0x240002b4
 80105d4:	24015354 	.word	0x24015354

080105d8 <_free_r>:
 80105d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105da:	4604      	mov	r4, r0
 80105dc:	460f      	mov	r7, r1
 80105de:	2900      	cmp	r1, #0
 80105e0:	f000 80b1 	beq.w	8010746 <_free_r+0x16e>
 80105e4:	f001 fcec 	bl	8011fc0 <__malloc_lock>
 80105e8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80105ec:	4d56      	ldr	r5, [pc, #344]	@ (8010748 <_free_r+0x170>)
 80105ee:	f022 0001 	bic.w	r0, r2, #1
 80105f2:	f1a7 0308 	sub.w	r3, r7, #8
 80105f6:	eb03 0c00 	add.w	ip, r3, r0
 80105fa:	68a9      	ldr	r1, [r5, #8]
 80105fc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8010600:	4561      	cmp	r1, ip
 8010602:	f026 0603 	bic.w	r6, r6, #3
 8010606:	f002 0201 	and.w	r2, r2, #1
 801060a:	d11b      	bne.n	8010644 <_free_r+0x6c>
 801060c:	4406      	add	r6, r0
 801060e:	b93a      	cbnz	r2, 8010620 <_free_r+0x48>
 8010610:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8010614:	1a9b      	subs	r3, r3, r2
 8010616:	4416      	add	r6, r2
 8010618:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801061c:	60ca      	str	r2, [r1, #12]
 801061e:	6091      	str	r1, [r2, #8]
 8010620:	f046 0201 	orr.w	r2, r6, #1
 8010624:	605a      	str	r2, [r3, #4]
 8010626:	60ab      	str	r3, [r5, #8]
 8010628:	4b48      	ldr	r3, [pc, #288]	@ (801074c <_free_r+0x174>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	42b3      	cmp	r3, r6
 801062e:	d804      	bhi.n	801063a <_free_r+0x62>
 8010630:	4b47      	ldr	r3, [pc, #284]	@ (8010750 <_free_r+0x178>)
 8010632:	4620      	mov	r0, r4
 8010634:	6819      	ldr	r1, [r3, #0]
 8010636:	f7ff ff79 	bl	801052c <_malloc_trim_r>
 801063a:	4620      	mov	r0, r4
 801063c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010640:	f001 bcc4 	b.w	8011fcc <__malloc_unlock>
 8010644:	f8cc 6004 	str.w	r6, [ip, #4]
 8010648:	2a00      	cmp	r2, #0
 801064a:	d138      	bne.n	80106be <_free_r+0xe6>
 801064c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8010650:	1a5b      	subs	r3, r3, r1
 8010652:	4408      	add	r0, r1
 8010654:	6899      	ldr	r1, [r3, #8]
 8010656:	f105 0708 	add.w	r7, r5, #8
 801065a:	42b9      	cmp	r1, r7
 801065c:	d031      	beq.n	80106c2 <_free_r+0xea>
 801065e:	68df      	ldr	r7, [r3, #12]
 8010660:	60cf      	str	r7, [r1, #12]
 8010662:	60b9      	str	r1, [r7, #8]
 8010664:	eb0c 0106 	add.w	r1, ip, r6
 8010668:	6849      	ldr	r1, [r1, #4]
 801066a:	07c9      	lsls	r1, r1, #31
 801066c:	d40b      	bmi.n	8010686 <_free_r+0xae>
 801066e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8010672:	4430      	add	r0, r6
 8010674:	bb3a      	cbnz	r2, 80106c6 <_free_r+0xee>
 8010676:	4e37      	ldr	r6, [pc, #220]	@ (8010754 <_free_r+0x17c>)
 8010678:	42b1      	cmp	r1, r6
 801067a:	d124      	bne.n	80106c6 <_free_r+0xee>
 801067c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8010680:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8010684:	2201      	movs	r2, #1
 8010686:	f040 0101 	orr.w	r1, r0, #1
 801068a:	6059      	str	r1, [r3, #4]
 801068c:	5018      	str	r0, [r3, r0]
 801068e:	2a00      	cmp	r2, #0
 8010690:	d1d3      	bne.n	801063a <_free_r+0x62>
 8010692:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8010696:	d21b      	bcs.n	80106d0 <_free_r+0xf8>
 8010698:	08c2      	lsrs	r2, r0, #3
 801069a:	2101      	movs	r1, #1
 801069c:	0940      	lsrs	r0, r0, #5
 801069e:	4081      	lsls	r1, r0
 80106a0:	6868      	ldr	r0, [r5, #4]
 80106a2:	3201      	adds	r2, #1
 80106a4:	4301      	orrs	r1, r0
 80106a6:	6069      	str	r1, [r5, #4]
 80106a8:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 80106ac:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 80106b0:	3908      	subs	r1, #8
 80106b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80106b6:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 80106ba:	60c3      	str	r3, [r0, #12]
 80106bc:	e7bd      	b.n	801063a <_free_r+0x62>
 80106be:	2200      	movs	r2, #0
 80106c0:	e7d0      	b.n	8010664 <_free_r+0x8c>
 80106c2:	2201      	movs	r2, #1
 80106c4:	e7ce      	b.n	8010664 <_free_r+0x8c>
 80106c6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80106ca:	60ce      	str	r6, [r1, #12]
 80106cc:	60b1      	str	r1, [r6, #8]
 80106ce:	e7da      	b.n	8010686 <_free_r+0xae>
 80106d0:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 80106d4:	ea4f 2250 	mov.w	r2, r0, lsr #9
 80106d8:	d214      	bcs.n	8010704 <_free_r+0x12c>
 80106da:	0982      	lsrs	r2, r0, #6
 80106dc:	3238      	adds	r2, #56	@ 0x38
 80106de:	1c51      	adds	r1, r2, #1
 80106e0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80106e4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80106e8:	428e      	cmp	r6, r1
 80106ea:	d125      	bne.n	8010738 <_free_r+0x160>
 80106ec:	2001      	movs	r0, #1
 80106ee:	1092      	asrs	r2, r2, #2
 80106f0:	fa00 f202 	lsl.w	r2, r0, r2
 80106f4:	6868      	ldr	r0, [r5, #4]
 80106f6:	4302      	orrs	r2, r0
 80106f8:	606a      	str	r2, [r5, #4]
 80106fa:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80106fe:	60b3      	str	r3, [r6, #8]
 8010700:	60cb      	str	r3, [r1, #12]
 8010702:	e79a      	b.n	801063a <_free_r+0x62>
 8010704:	2a14      	cmp	r2, #20
 8010706:	d801      	bhi.n	801070c <_free_r+0x134>
 8010708:	325b      	adds	r2, #91	@ 0x5b
 801070a:	e7e8      	b.n	80106de <_free_r+0x106>
 801070c:	2a54      	cmp	r2, #84	@ 0x54
 801070e:	d802      	bhi.n	8010716 <_free_r+0x13e>
 8010710:	0b02      	lsrs	r2, r0, #12
 8010712:	326e      	adds	r2, #110	@ 0x6e
 8010714:	e7e3      	b.n	80106de <_free_r+0x106>
 8010716:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801071a:	d802      	bhi.n	8010722 <_free_r+0x14a>
 801071c:	0bc2      	lsrs	r2, r0, #15
 801071e:	3277      	adds	r2, #119	@ 0x77
 8010720:	e7dd      	b.n	80106de <_free_r+0x106>
 8010722:	f240 5154 	movw	r1, #1364	@ 0x554
 8010726:	428a      	cmp	r2, r1
 8010728:	bf9a      	itte	ls
 801072a:	0c82      	lsrls	r2, r0, #18
 801072c:	327c      	addls	r2, #124	@ 0x7c
 801072e:	227e      	movhi	r2, #126	@ 0x7e
 8010730:	e7d5      	b.n	80106de <_free_r+0x106>
 8010732:	6889      	ldr	r1, [r1, #8]
 8010734:	428e      	cmp	r6, r1
 8010736:	d004      	beq.n	8010742 <_free_r+0x16a>
 8010738:	684a      	ldr	r2, [r1, #4]
 801073a:	f022 0203 	bic.w	r2, r2, #3
 801073e:	4282      	cmp	r2, r0
 8010740:	d8f7      	bhi.n	8010732 <_free_r+0x15a>
 8010742:	68ce      	ldr	r6, [r1, #12]
 8010744:	e7d9      	b.n	80106fa <_free_r+0x122>
 8010746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010748:	240002bc 	.word	0x240002bc
 801074c:	240002b8 	.word	0x240002b8
 8010750:	24015384 	.word	0x24015384
 8010754:	240002c4 	.word	0x240002c4

08010758 <_malloc_r>:
 8010758:	f101 030b 	add.w	r3, r1, #11
 801075c:	2b16      	cmp	r3, #22
 801075e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010762:	4605      	mov	r5, r0
 8010764:	d906      	bls.n	8010774 <_malloc_r+0x1c>
 8010766:	f033 0707 	bics.w	r7, r3, #7
 801076a:	d504      	bpl.n	8010776 <_malloc_r+0x1e>
 801076c:	230c      	movs	r3, #12
 801076e:	602b      	str	r3, [r5, #0]
 8010770:	2400      	movs	r4, #0
 8010772:	e1a3      	b.n	8010abc <_malloc_r+0x364>
 8010774:	2710      	movs	r7, #16
 8010776:	42b9      	cmp	r1, r7
 8010778:	d8f8      	bhi.n	801076c <_malloc_r+0x14>
 801077a:	4628      	mov	r0, r5
 801077c:	f001 fc20 	bl	8011fc0 <__malloc_lock>
 8010780:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8010784:	4eaf      	ldr	r6, [pc, #700]	@ (8010a44 <_malloc_r+0x2ec>)
 8010786:	d237      	bcs.n	80107f8 <_malloc_r+0xa0>
 8010788:	f107 0208 	add.w	r2, r7, #8
 801078c:	4432      	add	r2, r6
 801078e:	f1a2 0108 	sub.w	r1, r2, #8
 8010792:	6854      	ldr	r4, [r2, #4]
 8010794:	428c      	cmp	r4, r1
 8010796:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801079a:	d102      	bne.n	80107a2 <_malloc_r+0x4a>
 801079c:	68d4      	ldr	r4, [r2, #12]
 801079e:	42a2      	cmp	r2, r4
 80107a0:	d010      	beq.n	80107c4 <_malloc_r+0x6c>
 80107a2:	6863      	ldr	r3, [r4, #4]
 80107a4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80107a8:	f023 0303 	bic.w	r3, r3, #3
 80107ac:	60ca      	str	r2, [r1, #12]
 80107ae:	4423      	add	r3, r4
 80107b0:	6091      	str	r1, [r2, #8]
 80107b2:	685a      	ldr	r2, [r3, #4]
 80107b4:	f042 0201 	orr.w	r2, r2, #1
 80107b8:	605a      	str	r2, [r3, #4]
 80107ba:	4628      	mov	r0, r5
 80107bc:	f001 fc06 	bl	8011fcc <__malloc_unlock>
 80107c0:	3408      	adds	r4, #8
 80107c2:	e17b      	b.n	8010abc <_malloc_r+0x364>
 80107c4:	3302      	adds	r3, #2
 80107c6:	6934      	ldr	r4, [r6, #16]
 80107c8:	499f      	ldr	r1, [pc, #636]	@ (8010a48 <_malloc_r+0x2f0>)
 80107ca:	428c      	cmp	r4, r1
 80107cc:	d077      	beq.n	80108be <_malloc_r+0x166>
 80107ce:	6862      	ldr	r2, [r4, #4]
 80107d0:	f022 0c03 	bic.w	ip, r2, #3
 80107d4:	ebac 0007 	sub.w	r0, ip, r7
 80107d8:	280f      	cmp	r0, #15
 80107da:	dd48      	ble.n	801086e <_malloc_r+0x116>
 80107dc:	19e2      	adds	r2, r4, r7
 80107de:	f040 0301 	orr.w	r3, r0, #1
 80107e2:	f047 0701 	orr.w	r7, r7, #1
 80107e6:	6067      	str	r7, [r4, #4]
 80107e8:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80107ec:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80107f0:	6053      	str	r3, [r2, #4]
 80107f2:	f844 000c 	str.w	r0, [r4, ip]
 80107f6:	e7e0      	b.n	80107ba <_malloc_r+0x62>
 80107f8:	0a7b      	lsrs	r3, r7, #9
 80107fa:	d02a      	beq.n	8010852 <_malloc_r+0xfa>
 80107fc:	2b04      	cmp	r3, #4
 80107fe:	d812      	bhi.n	8010826 <_malloc_r+0xce>
 8010800:	09bb      	lsrs	r3, r7, #6
 8010802:	3338      	adds	r3, #56	@ 0x38
 8010804:	1c5a      	adds	r2, r3, #1
 8010806:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801080a:	f1a2 0c08 	sub.w	ip, r2, #8
 801080e:	6854      	ldr	r4, [r2, #4]
 8010810:	4564      	cmp	r4, ip
 8010812:	d006      	beq.n	8010822 <_malloc_r+0xca>
 8010814:	6862      	ldr	r2, [r4, #4]
 8010816:	f022 0203 	bic.w	r2, r2, #3
 801081a:	1bd0      	subs	r0, r2, r7
 801081c:	280f      	cmp	r0, #15
 801081e:	dd1c      	ble.n	801085a <_malloc_r+0x102>
 8010820:	3b01      	subs	r3, #1
 8010822:	3301      	adds	r3, #1
 8010824:	e7cf      	b.n	80107c6 <_malloc_r+0x6e>
 8010826:	2b14      	cmp	r3, #20
 8010828:	d801      	bhi.n	801082e <_malloc_r+0xd6>
 801082a:	335b      	adds	r3, #91	@ 0x5b
 801082c:	e7ea      	b.n	8010804 <_malloc_r+0xac>
 801082e:	2b54      	cmp	r3, #84	@ 0x54
 8010830:	d802      	bhi.n	8010838 <_malloc_r+0xe0>
 8010832:	0b3b      	lsrs	r3, r7, #12
 8010834:	336e      	adds	r3, #110	@ 0x6e
 8010836:	e7e5      	b.n	8010804 <_malloc_r+0xac>
 8010838:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 801083c:	d802      	bhi.n	8010844 <_malloc_r+0xec>
 801083e:	0bfb      	lsrs	r3, r7, #15
 8010840:	3377      	adds	r3, #119	@ 0x77
 8010842:	e7df      	b.n	8010804 <_malloc_r+0xac>
 8010844:	f240 5254 	movw	r2, #1364	@ 0x554
 8010848:	4293      	cmp	r3, r2
 801084a:	d804      	bhi.n	8010856 <_malloc_r+0xfe>
 801084c:	0cbb      	lsrs	r3, r7, #18
 801084e:	337c      	adds	r3, #124	@ 0x7c
 8010850:	e7d8      	b.n	8010804 <_malloc_r+0xac>
 8010852:	233f      	movs	r3, #63	@ 0x3f
 8010854:	e7d6      	b.n	8010804 <_malloc_r+0xac>
 8010856:	237e      	movs	r3, #126	@ 0x7e
 8010858:	e7d4      	b.n	8010804 <_malloc_r+0xac>
 801085a:	2800      	cmp	r0, #0
 801085c:	68e1      	ldr	r1, [r4, #12]
 801085e:	db04      	blt.n	801086a <_malloc_r+0x112>
 8010860:	68a3      	ldr	r3, [r4, #8]
 8010862:	60d9      	str	r1, [r3, #12]
 8010864:	608b      	str	r3, [r1, #8]
 8010866:	18a3      	adds	r3, r4, r2
 8010868:	e7a3      	b.n	80107b2 <_malloc_r+0x5a>
 801086a:	460c      	mov	r4, r1
 801086c:	e7d0      	b.n	8010810 <_malloc_r+0xb8>
 801086e:	2800      	cmp	r0, #0
 8010870:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8010874:	db07      	blt.n	8010886 <_malloc_r+0x12e>
 8010876:	44a4      	add	ip, r4
 8010878:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801087c:	f043 0301 	orr.w	r3, r3, #1
 8010880:	f8cc 3004 	str.w	r3, [ip, #4]
 8010884:	e799      	b.n	80107ba <_malloc_r+0x62>
 8010886:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 801088a:	6870      	ldr	r0, [r6, #4]
 801088c:	f080 8095 	bcs.w	80109ba <_malloc_r+0x262>
 8010890:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8010894:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8010898:	f04f 0c01 	mov.w	ip, #1
 801089c:	3201      	adds	r2, #1
 801089e:	fa0c fc0e 	lsl.w	ip, ip, lr
 80108a2:	ea4c 0000 	orr.w	r0, ip, r0
 80108a6:	6070      	str	r0, [r6, #4]
 80108a8:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80108ac:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80108b0:	3808      	subs	r0, #8
 80108b2:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80108b6:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80108ba:	f8cc 400c 	str.w	r4, [ip, #12]
 80108be:	1098      	asrs	r0, r3, #2
 80108c0:	2201      	movs	r2, #1
 80108c2:	4082      	lsls	r2, r0
 80108c4:	6870      	ldr	r0, [r6, #4]
 80108c6:	4290      	cmp	r0, r2
 80108c8:	d326      	bcc.n	8010918 <_malloc_r+0x1c0>
 80108ca:	4210      	tst	r0, r2
 80108cc:	d106      	bne.n	80108dc <_malloc_r+0x184>
 80108ce:	f023 0303 	bic.w	r3, r3, #3
 80108d2:	0052      	lsls	r2, r2, #1
 80108d4:	4210      	tst	r0, r2
 80108d6:	f103 0304 	add.w	r3, r3, #4
 80108da:	d0fa      	beq.n	80108d2 <_malloc_r+0x17a>
 80108dc:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80108e0:	46c1      	mov	r9, r8
 80108e2:	469e      	mov	lr, r3
 80108e4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80108e8:	454c      	cmp	r4, r9
 80108ea:	f040 80b9 	bne.w	8010a60 <_malloc_r+0x308>
 80108ee:	f10e 0e01 	add.w	lr, lr, #1
 80108f2:	f01e 0f03 	tst.w	lr, #3
 80108f6:	f109 0908 	add.w	r9, r9, #8
 80108fa:	d1f3      	bne.n	80108e4 <_malloc_r+0x18c>
 80108fc:	0798      	lsls	r0, r3, #30
 80108fe:	f040 80e3 	bne.w	8010ac8 <_malloc_r+0x370>
 8010902:	6873      	ldr	r3, [r6, #4]
 8010904:	ea23 0302 	bic.w	r3, r3, r2
 8010908:	6073      	str	r3, [r6, #4]
 801090a:	6870      	ldr	r0, [r6, #4]
 801090c:	0052      	lsls	r2, r2, #1
 801090e:	4290      	cmp	r0, r2
 8010910:	d302      	bcc.n	8010918 <_malloc_r+0x1c0>
 8010912:	2a00      	cmp	r2, #0
 8010914:	f040 80e5 	bne.w	8010ae2 <_malloc_r+0x38a>
 8010918:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801091c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010920:	f023 0903 	bic.w	r9, r3, #3
 8010924:	45b9      	cmp	r9, r7
 8010926:	d304      	bcc.n	8010932 <_malloc_r+0x1da>
 8010928:	eba9 0207 	sub.w	r2, r9, r7
 801092c:	2a0f      	cmp	r2, #15
 801092e:	f300 8141 	bgt.w	8010bb4 <_malloc_r+0x45c>
 8010932:	4b46      	ldr	r3, [pc, #280]	@ (8010a4c <_malloc_r+0x2f4>)
 8010934:	6819      	ldr	r1, [r3, #0]
 8010936:	3110      	adds	r1, #16
 8010938:	4439      	add	r1, r7
 801093a:	2008      	movs	r0, #8
 801093c:	9101      	str	r1, [sp, #4]
 801093e:	f002 f98f 	bl	8012c60 <sysconf>
 8010942:	4a43      	ldr	r2, [pc, #268]	@ (8010a50 <_malloc_r+0x2f8>)
 8010944:	9901      	ldr	r1, [sp, #4]
 8010946:	6813      	ldr	r3, [r2, #0]
 8010948:	3301      	adds	r3, #1
 801094a:	bf1f      	itttt	ne
 801094c:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8010950:	1809      	addne	r1, r1, r0
 8010952:	4243      	negne	r3, r0
 8010954:	4019      	andne	r1, r3
 8010956:	4680      	mov	r8, r0
 8010958:	4628      	mov	r0, r5
 801095a:	9101      	str	r1, [sp, #4]
 801095c:	f002 f95e 	bl	8012c1c <_sbrk_r>
 8010960:	1c42      	adds	r2, r0, #1
 8010962:	eb0a 0b09 	add.w	fp, sl, r9
 8010966:	4604      	mov	r4, r0
 8010968:	f000 80f7 	beq.w	8010b5a <_malloc_r+0x402>
 801096c:	4583      	cmp	fp, r0
 801096e:	9901      	ldr	r1, [sp, #4]
 8010970:	4a37      	ldr	r2, [pc, #220]	@ (8010a50 <_malloc_r+0x2f8>)
 8010972:	d902      	bls.n	801097a <_malloc_r+0x222>
 8010974:	45b2      	cmp	sl, r6
 8010976:	f040 80f0 	bne.w	8010b5a <_malloc_r+0x402>
 801097a:	4b36      	ldr	r3, [pc, #216]	@ (8010a54 <_malloc_r+0x2fc>)
 801097c:	6818      	ldr	r0, [r3, #0]
 801097e:	45a3      	cmp	fp, r4
 8010980:	eb00 0e01 	add.w	lr, r0, r1
 8010984:	f8c3 e000 	str.w	lr, [r3]
 8010988:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 801098c:	f040 80ab 	bne.w	8010ae6 <_malloc_r+0x38e>
 8010990:	ea1b 0f0c 	tst.w	fp, ip
 8010994:	f040 80a7 	bne.w	8010ae6 <_malloc_r+0x38e>
 8010998:	68b2      	ldr	r2, [r6, #8]
 801099a:	4449      	add	r1, r9
 801099c:	f041 0101 	orr.w	r1, r1, #1
 80109a0:	6051      	str	r1, [r2, #4]
 80109a2:	4a2d      	ldr	r2, [pc, #180]	@ (8010a58 <_malloc_r+0x300>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	6811      	ldr	r1, [r2, #0]
 80109a8:	428b      	cmp	r3, r1
 80109aa:	bf88      	it	hi
 80109ac:	6013      	strhi	r3, [r2, #0]
 80109ae:	4a2b      	ldr	r2, [pc, #172]	@ (8010a5c <_malloc_r+0x304>)
 80109b0:	6811      	ldr	r1, [r2, #0]
 80109b2:	428b      	cmp	r3, r1
 80109b4:	bf88      	it	hi
 80109b6:	6013      	strhi	r3, [r2, #0]
 80109b8:	e0cf      	b.n	8010b5a <_malloc_r+0x402>
 80109ba:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 80109be:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80109c2:	d218      	bcs.n	80109f6 <_malloc_r+0x29e>
 80109c4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80109c8:	3238      	adds	r2, #56	@ 0x38
 80109ca:	f102 0e01 	add.w	lr, r2, #1
 80109ce:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80109d2:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80109d6:	45f0      	cmp	r8, lr
 80109d8:	d12b      	bne.n	8010a32 <_malloc_r+0x2da>
 80109da:	1092      	asrs	r2, r2, #2
 80109dc:	f04f 0c01 	mov.w	ip, #1
 80109e0:	fa0c f202 	lsl.w	r2, ip, r2
 80109e4:	4302      	orrs	r2, r0
 80109e6:	6072      	str	r2, [r6, #4]
 80109e8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80109ec:	f8c8 4008 	str.w	r4, [r8, #8]
 80109f0:	f8ce 400c 	str.w	r4, [lr, #12]
 80109f4:	e763      	b.n	80108be <_malloc_r+0x166>
 80109f6:	2a14      	cmp	r2, #20
 80109f8:	d801      	bhi.n	80109fe <_malloc_r+0x2a6>
 80109fa:	325b      	adds	r2, #91	@ 0x5b
 80109fc:	e7e5      	b.n	80109ca <_malloc_r+0x272>
 80109fe:	2a54      	cmp	r2, #84	@ 0x54
 8010a00:	d803      	bhi.n	8010a0a <_malloc_r+0x2b2>
 8010a02:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8010a06:	326e      	adds	r2, #110	@ 0x6e
 8010a08:	e7df      	b.n	80109ca <_malloc_r+0x272>
 8010a0a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8010a0e:	d803      	bhi.n	8010a18 <_malloc_r+0x2c0>
 8010a10:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8010a14:	3277      	adds	r2, #119	@ 0x77
 8010a16:	e7d8      	b.n	80109ca <_malloc_r+0x272>
 8010a18:	f240 5e54 	movw	lr, #1364	@ 0x554
 8010a1c:	4572      	cmp	r2, lr
 8010a1e:	bf9a      	itte	ls
 8010a20:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8010a24:	327c      	addls	r2, #124	@ 0x7c
 8010a26:	227e      	movhi	r2, #126	@ 0x7e
 8010a28:	e7cf      	b.n	80109ca <_malloc_r+0x272>
 8010a2a:	f8de e008 	ldr.w	lr, [lr, #8]
 8010a2e:	45f0      	cmp	r8, lr
 8010a30:	d005      	beq.n	8010a3e <_malloc_r+0x2e6>
 8010a32:	f8de 2004 	ldr.w	r2, [lr, #4]
 8010a36:	f022 0203 	bic.w	r2, r2, #3
 8010a3a:	4562      	cmp	r2, ip
 8010a3c:	d8f5      	bhi.n	8010a2a <_malloc_r+0x2d2>
 8010a3e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8010a42:	e7d1      	b.n	80109e8 <_malloc_r+0x290>
 8010a44:	240002bc 	.word	0x240002bc
 8010a48:	240002c4 	.word	0x240002c4
 8010a4c:	24015384 	.word	0x24015384
 8010a50:	240002b4 	.word	0x240002b4
 8010a54:	24015354 	.word	0x24015354
 8010a58:	24015380 	.word	0x24015380
 8010a5c:	2401537c 	.word	0x2401537c
 8010a60:	6860      	ldr	r0, [r4, #4]
 8010a62:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8010a66:	f020 0003 	bic.w	r0, r0, #3
 8010a6a:	eba0 0a07 	sub.w	sl, r0, r7
 8010a6e:	f1ba 0f0f 	cmp.w	sl, #15
 8010a72:	dd12      	ble.n	8010a9a <_malloc_r+0x342>
 8010a74:	68a3      	ldr	r3, [r4, #8]
 8010a76:	19e2      	adds	r2, r4, r7
 8010a78:	f047 0701 	orr.w	r7, r7, #1
 8010a7c:	6067      	str	r7, [r4, #4]
 8010a7e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8010a82:	f8cc 3008 	str.w	r3, [ip, #8]
 8010a86:	f04a 0301 	orr.w	r3, sl, #1
 8010a8a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8010a8e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8010a92:	6053      	str	r3, [r2, #4]
 8010a94:	f844 a000 	str.w	sl, [r4, r0]
 8010a98:	e68f      	b.n	80107ba <_malloc_r+0x62>
 8010a9a:	f1ba 0f00 	cmp.w	sl, #0
 8010a9e:	db11      	blt.n	8010ac4 <_malloc_r+0x36c>
 8010aa0:	4420      	add	r0, r4
 8010aa2:	6843      	ldr	r3, [r0, #4]
 8010aa4:	f043 0301 	orr.w	r3, r3, #1
 8010aa8:	6043      	str	r3, [r0, #4]
 8010aaa:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8010aae:	4628      	mov	r0, r5
 8010ab0:	f8c3 c00c 	str.w	ip, [r3, #12]
 8010ab4:	f8cc 3008 	str.w	r3, [ip, #8]
 8010ab8:	f001 fa88 	bl	8011fcc <__malloc_unlock>
 8010abc:	4620      	mov	r0, r4
 8010abe:	b003      	add	sp, #12
 8010ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac4:	4664      	mov	r4, ip
 8010ac6:	e70f      	b.n	80108e8 <_malloc_r+0x190>
 8010ac8:	f858 0908 	ldr.w	r0, [r8], #-8
 8010acc:	4540      	cmp	r0, r8
 8010ace:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010ad2:	f43f af13 	beq.w	80108fc <_malloc_r+0x1a4>
 8010ad6:	e718      	b.n	801090a <_malloc_r+0x1b2>
 8010ad8:	3304      	adds	r3, #4
 8010ada:	0052      	lsls	r2, r2, #1
 8010adc:	4210      	tst	r0, r2
 8010ade:	d0fb      	beq.n	8010ad8 <_malloc_r+0x380>
 8010ae0:	e6fc      	b.n	80108dc <_malloc_r+0x184>
 8010ae2:	4673      	mov	r3, lr
 8010ae4:	e7fa      	b.n	8010adc <_malloc_r+0x384>
 8010ae6:	6810      	ldr	r0, [r2, #0]
 8010ae8:	3001      	adds	r0, #1
 8010aea:	bf1b      	ittet	ne
 8010aec:	eba4 0b0b 	subne.w	fp, r4, fp
 8010af0:	eb0b 020e 	addne.w	r2, fp, lr
 8010af4:	6014      	streq	r4, [r2, #0]
 8010af6:	601a      	strne	r2, [r3, #0]
 8010af8:	f014 0b07 	ands.w	fp, r4, #7
 8010afc:	bf1a      	itte	ne
 8010afe:	f1cb 0008 	rsbne	r0, fp, #8
 8010b02:	1824      	addne	r4, r4, r0
 8010b04:	4658      	moveq	r0, fp
 8010b06:	1862      	adds	r2, r4, r1
 8010b08:	ea02 010c 	and.w	r1, r2, ip
 8010b0c:	4480      	add	r8, r0
 8010b0e:	eba8 0801 	sub.w	r8, r8, r1
 8010b12:	ea08 080c 	and.w	r8, r8, ip
 8010b16:	4641      	mov	r1, r8
 8010b18:	4628      	mov	r0, r5
 8010b1a:	9201      	str	r2, [sp, #4]
 8010b1c:	f002 f87e 	bl	8012c1c <_sbrk_r>
 8010b20:	1c43      	adds	r3, r0, #1
 8010b22:	9a01      	ldr	r2, [sp, #4]
 8010b24:	4b28      	ldr	r3, [pc, #160]	@ (8010bc8 <_malloc_r+0x470>)
 8010b26:	d107      	bne.n	8010b38 <_malloc_r+0x3e0>
 8010b28:	f1bb 0f00 	cmp.w	fp, #0
 8010b2c:	d023      	beq.n	8010b76 <_malloc_r+0x41e>
 8010b2e:	f1ab 0008 	sub.w	r0, fp, #8
 8010b32:	4410      	add	r0, r2
 8010b34:	f04f 0800 	mov.w	r8, #0
 8010b38:	681a      	ldr	r2, [r3, #0]
 8010b3a:	60b4      	str	r4, [r6, #8]
 8010b3c:	1b00      	subs	r0, r0, r4
 8010b3e:	4440      	add	r0, r8
 8010b40:	4442      	add	r2, r8
 8010b42:	f040 0001 	orr.w	r0, r0, #1
 8010b46:	45b2      	cmp	sl, r6
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	6060      	str	r0, [r4, #4]
 8010b4c:	f43f af29 	beq.w	80109a2 <_malloc_r+0x24a>
 8010b50:	f1b9 0f0f 	cmp.w	r9, #15
 8010b54:	d812      	bhi.n	8010b7c <_malloc_r+0x424>
 8010b56:	2301      	movs	r3, #1
 8010b58:	6063      	str	r3, [r4, #4]
 8010b5a:	68b3      	ldr	r3, [r6, #8]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	f023 0303 	bic.w	r3, r3, #3
 8010b62:	42bb      	cmp	r3, r7
 8010b64:	eba3 0207 	sub.w	r2, r3, r7
 8010b68:	d301      	bcc.n	8010b6e <_malloc_r+0x416>
 8010b6a:	2a0f      	cmp	r2, #15
 8010b6c:	dc22      	bgt.n	8010bb4 <_malloc_r+0x45c>
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f001 fa2c 	bl	8011fcc <__malloc_unlock>
 8010b74:	e5fc      	b.n	8010770 <_malloc_r+0x18>
 8010b76:	4610      	mov	r0, r2
 8010b78:	46d8      	mov	r8, fp
 8010b7a:	e7dd      	b.n	8010b38 <_malloc_r+0x3e0>
 8010b7c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010b80:	f1a9 090c 	sub.w	r9, r9, #12
 8010b84:	f029 0907 	bic.w	r9, r9, #7
 8010b88:	f002 0201 	and.w	r2, r2, #1
 8010b8c:	ea42 0209 	orr.w	r2, r2, r9
 8010b90:	f8ca 2004 	str.w	r2, [sl, #4]
 8010b94:	2105      	movs	r1, #5
 8010b96:	eb0a 0209 	add.w	r2, sl, r9
 8010b9a:	f1b9 0f0f 	cmp.w	r9, #15
 8010b9e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8010ba2:	f67f aefe 	bls.w	80109a2 <_malloc_r+0x24a>
 8010ba6:	f10a 0108 	add.w	r1, sl, #8
 8010baa:	4628      	mov	r0, r5
 8010bac:	f7ff fd14 	bl	80105d8 <_free_r>
 8010bb0:	4b05      	ldr	r3, [pc, #20]	@ (8010bc8 <_malloc_r+0x470>)
 8010bb2:	e6f6      	b.n	80109a2 <_malloc_r+0x24a>
 8010bb4:	68b4      	ldr	r4, [r6, #8]
 8010bb6:	f047 0301 	orr.w	r3, r7, #1
 8010bba:	4427      	add	r7, r4
 8010bbc:	f042 0201 	orr.w	r2, r2, #1
 8010bc0:	6063      	str	r3, [r4, #4]
 8010bc2:	60b7      	str	r7, [r6, #8]
 8010bc4:	607a      	str	r2, [r7, #4]
 8010bc6:	e5f8      	b.n	80107ba <_malloc_r+0x62>
 8010bc8:	24015354 	.word	0x24015354

08010bcc <__ascii_mbtowc>:
 8010bcc:	b082      	sub	sp, #8
 8010bce:	b901      	cbnz	r1, 8010bd2 <__ascii_mbtowc+0x6>
 8010bd0:	a901      	add	r1, sp, #4
 8010bd2:	b142      	cbz	r2, 8010be6 <__ascii_mbtowc+0x1a>
 8010bd4:	b14b      	cbz	r3, 8010bea <__ascii_mbtowc+0x1e>
 8010bd6:	7813      	ldrb	r3, [r2, #0]
 8010bd8:	600b      	str	r3, [r1, #0]
 8010bda:	7812      	ldrb	r2, [r2, #0]
 8010bdc:	1e10      	subs	r0, r2, #0
 8010bde:	bf18      	it	ne
 8010be0:	2001      	movne	r0, #1
 8010be2:	b002      	add	sp, #8
 8010be4:	4770      	bx	lr
 8010be6:	4610      	mov	r0, r2
 8010be8:	e7fb      	b.n	8010be2 <__ascii_mbtowc+0x16>
 8010bea:	f06f 0001 	mvn.w	r0, #1
 8010bee:	e7f8      	b.n	8010be2 <__ascii_mbtowc+0x16>

08010bf0 <_svfprintf_r>:
 8010bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	ed2d 8b04 	vpush	{d8-d9}
 8010bf8:	b0cb      	sub	sp, #300	@ 0x12c
 8010bfa:	468a      	mov	sl, r1
 8010bfc:	4691      	mov	r9, r2
 8010bfe:	461e      	mov	r6, r3
 8010c00:	9002      	str	r0, [sp, #8]
 8010c02:	f7fe fe2d 	bl	800f860 <_localeconv_r>
 8010c06:	6803      	ldr	r3, [r0, #0]
 8010c08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7ef fbb8 	bl	8000380 <strlen>
 8010c10:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8010c14:	9009      	str	r0, [sp, #36]	@ 0x24
 8010c16:	061c      	lsls	r4, r3, #24
 8010c18:	d515      	bpl.n	8010c46 <_svfprintf_r+0x56>
 8010c1a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010c1e:	b993      	cbnz	r3, 8010c46 <_svfprintf_r+0x56>
 8010c20:	9802      	ldr	r0, [sp, #8]
 8010c22:	2140      	movs	r1, #64	@ 0x40
 8010c24:	f7ff fd98 	bl	8010758 <_malloc_r>
 8010c28:	f8ca 0000 	str.w	r0, [sl]
 8010c2c:	f8ca 0010 	str.w	r0, [sl, #16]
 8010c30:	b930      	cbnz	r0, 8010c40 <_svfprintf_r+0x50>
 8010c32:	9a02      	ldr	r2, [sp, #8]
 8010c34:	230c      	movs	r3, #12
 8010c36:	6013      	str	r3, [r2, #0]
 8010c38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c3e:	e1e1      	b.n	8011004 <_svfprintf_r+0x414>
 8010c40:	2340      	movs	r3, #64	@ 0x40
 8010c42:	f8ca 3014 	str.w	r3, [sl, #20]
 8010c46:	2300      	movs	r3, #0
 8010c48:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 8010c4c:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 8010ea8 <_svfprintf_r+0x2b8>
 8010c50:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 8010c54:	ac21      	add	r4, sp, #132	@ 0x84
 8010c56:	941e      	str	r4, [sp, #120]	@ 0x78
 8010c58:	9303      	str	r3, [sp, #12]
 8010c5a:	9307      	str	r3, [sp, #28]
 8010c5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8010c5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010c60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c62:	464b      	mov	r3, r9
 8010c64:	461d      	mov	r5, r3
 8010c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c6a:	b10a      	cbz	r2, 8010c70 <_svfprintf_r+0x80>
 8010c6c:	2a25      	cmp	r2, #37	@ 0x25
 8010c6e:	d1f9      	bne.n	8010c64 <_svfprintf_r+0x74>
 8010c70:	ebb5 0709 	subs.w	r7, r5, r9
 8010c74:	d00d      	beq.n	8010c92 <_svfprintf_r+0xa2>
 8010c76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010c78:	443b      	add	r3, r7
 8010c7a:	9320      	str	r3, [sp, #128]	@ 0x80
 8010c7c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010c7e:	3301      	adds	r3, #1
 8010c80:	2b07      	cmp	r3, #7
 8010c82:	e9c4 9700 	strd	r9, r7, [r4]
 8010c86:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010c88:	dc75      	bgt.n	8010d76 <_svfprintf_r+0x186>
 8010c8a:	3408      	adds	r4, #8
 8010c8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c8e:	443b      	add	r3, r7
 8010c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010c92:	782b      	ldrb	r3, [r5, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	f001 80ee 	beq.w	8011e76 <_svfprintf_r+0x1286>
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	1c6b      	adds	r3, r5, #1
 8010c9e:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 8010ca2:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010ca6:	920a      	str	r2, [sp, #40]	@ 0x28
 8010ca8:	4615      	mov	r5, r2
 8010caa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cae:	9204      	str	r2, [sp, #16]
 8010cb0:	9308      	str	r3, [sp, #32]
 8010cb2:	9b04      	ldr	r3, [sp, #16]
 8010cb4:	3b20      	subs	r3, #32
 8010cb6:	2b5a      	cmp	r3, #90	@ 0x5a
 8010cb8:	f200 8564 	bhi.w	8011784 <_svfprintf_r+0xb94>
 8010cbc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010cc0:	0562009c 	.word	0x0562009c
 8010cc4:	00a40562 	.word	0x00a40562
 8010cc8:	05620562 	.word	0x05620562
 8010ccc:	00840562 	.word	0x00840562
 8010cd0:	05620562 	.word	0x05620562
 8010cd4:	00b100a7 	.word	0x00b100a7
 8010cd8:	00ae0562 	.word	0x00ae0562
 8010cdc:	056200b3 	.word	0x056200b3
 8010ce0:	00d000cd 	.word	0x00d000cd
 8010ce4:	00d000d0 	.word	0x00d000d0
 8010ce8:	00d000d0 	.word	0x00d000d0
 8010cec:	00d000d0 	.word	0x00d000d0
 8010cf0:	00d000d0 	.word	0x00d000d0
 8010cf4:	05620562 	.word	0x05620562
 8010cf8:	05620562 	.word	0x05620562
 8010cfc:	05620562 	.word	0x05620562
 8010d00:	01460562 	.word	0x01460562
 8010d04:	01070562 	.word	0x01070562
 8010d08:	0146011a 	.word	0x0146011a
 8010d0c:	01460146 	.word	0x01460146
 8010d10:	05620562 	.word	0x05620562
 8010d14:	05620562 	.word	0x05620562
 8010d18:	056200e1 	.word	0x056200e1
 8010d1c:	045c0562 	.word	0x045c0562
 8010d20:	05620562 	.word	0x05620562
 8010d24:	04a60562 	.word	0x04a60562
 8010d28:	04c70562 	.word	0x04c70562
 8010d2c:	05620562 	.word	0x05620562
 8010d30:	056204e9 	.word	0x056204e9
 8010d34:	05620562 	.word	0x05620562
 8010d38:	05620562 	.word	0x05620562
 8010d3c:	05620562 	.word	0x05620562
 8010d40:	01460562 	.word	0x01460562
 8010d44:	01070562 	.word	0x01070562
 8010d48:	0146011c 	.word	0x0146011c
 8010d4c:	01460146 	.word	0x01460146
 8010d50:	011c00e4 	.word	0x011c00e4
 8010d54:	05620101 	.word	0x05620101
 8010d58:	056200fa 	.word	0x056200fa
 8010d5c:	045e043d 	.word	0x045e043d
 8010d60:	01010495 	.word	0x01010495
 8010d64:	04a60562 	.word	0x04a60562
 8010d68:	04c9009a 	.word	0x04c9009a
 8010d6c:	05620562 	.word	0x05620562
 8010d70:	05620065 	.word	0x05620065
 8010d74:	009a      	.short	0x009a
 8010d76:	9802      	ldr	r0, [sp, #8]
 8010d78:	aa1e      	add	r2, sp, #120	@ 0x78
 8010d7a:	4651      	mov	r1, sl
 8010d7c:	f002 f836 	bl	8012dec <__ssprint_r>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	f040 813a 	bne.w	8010ffa <_svfprintf_r+0x40a>
 8010d86:	ac21      	add	r4, sp, #132	@ 0x84
 8010d88:	e780      	b.n	8010c8c <_svfprintf_r+0x9c>
 8010d8a:	4b49      	ldr	r3, [pc, #292]	@ (8010eb0 <_svfprintf_r+0x2c0>)
 8010d8c:	9312      	str	r3, [sp, #72]	@ 0x48
 8010d8e:	f015 0320 	ands.w	r3, r5, #32
 8010d92:	f000 8481 	beq.w	8011698 <_svfprintf_r+0xaa8>
 8010d96:	3607      	adds	r6, #7
 8010d98:	f026 0307 	bic.w	r3, r6, #7
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	685f      	ldr	r7, [r3, #4]
 8010da0:	f852 6b08 	ldr.w	r6, [r2], #8
 8010da4:	9205      	str	r2, [sp, #20]
 8010da6:	07eb      	lsls	r3, r5, #31
 8010da8:	d50a      	bpl.n	8010dc0 <_svfprintf_r+0x1d0>
 8010daa:	ea56 0307 	orrs.w	r3, r6, r7
 8010dae:	d007      	beq.n	8010dc0 <_svfprintf_r+0x1d0>
 8010db0:	2330      	movs	r3, #48	@ 0x30
 8010db2:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8010db6:	9b04      	ldr	r3, [sp, #16]
 8010db8:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8010dbc:	f045 0502 	orr.w	r5, r5, #2
 8010dc0:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8010dc4:	2302      	movs	r3, #2
 8010dc6:	e3e7      	b.n	8011598 <_svfprintf_r+0x9a8>
 8010dc8:	9802      	ldr	r0, [sp, #8]
 8010dca:	f7fe fd49 	bl	800f860 <_localeconv_r>
 8010dce:	6843      	ldr	r3, [r0, #4]
 8010dd0:	9310      	str	r3, [sp, #64]	@ 0x40
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7ef fad4 	bl	8000380 <strlen>
 8010dd8:	900e      	str	r0, [sp, #56]	@ 0x38
 8010dda:	9802      	ldr	r0, [sp, #8]
 8010ddc:	f7fe fd40 	bl	800f860 <_localeconv_r>
 8010de0:	6883      	ldr	r3, [r0, #8]
 8010de2:	9307      	str	r3, [sp, #28]
 8010de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010de6:	b12b      	cbz	r3, 8010df4 <_svfprintf_r+0x204>
 8010de8:	9b07      	ldr	r3, [sp, #28]
 8010dea:	b11b      	cbz	r3, 8010df4 <_svfprintf_r+0x204>
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	b10b      	cbz	r3, 8010df4 <_svfprintf_r+0x204>
 8010df0:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8010df4:	9b08      	ldr	r3, [sp, #32]
 8010df6:	e758      	b.n	8010caa <_svfprintf_r+0xba>
 8010df8:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d1f9      	bne.n	8010df4 <_svfprintf_r+0x204>
 8010e00:	2320      	movs	r3, #32
 8010e02:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8010e06:	e7f5      	b.n	8010df4 <_svfprintf_r+0x204>
 8010e08:	f045 0501 	orr.w	r5, r5, #1
 8010e0c:	e7f2      	b.n	8010df4 <_svfprintf_r+0x204>
 8010e0e:	f856 3b04 	ldr.w	r3, [r6], #4
 8010e12:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	daed      	bge.n	8010df4 <_svfprintf_r+0x204>
 8010e18:	425b      	negs	r3, r3
 8010e1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e1c:	f045 0504 	orr.w	r5, r5, #4
 8010e20:	e7e8      	b.n	8010df4 <_svfprintf_r+0x204>
 8010e22:	232b      	movs	r3, #43	@ 0x2b
 8010e24:	e7ed      	b.n	8010e02 <_svfprintf_r+0x212>
 8010e26:	9b08      	ldr	r3, [sp, #32]
 8010e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e2c:	9204      	str	r2, [sp, #16]
 8010e2e:	2a2a      	cmp	r2, #42	@ 0x2a
 8010e30:	d10f      	bne.n	8010e52 <_svfprintf_r+0x262>
 8010e32:	f856 2b04 	ldr.w	r2, [r6], #4
 8010e36:	9308      	str	r3, [sp, #32]
 8010e38:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8010e3c:	e7da      	b.n	8010df4 <_svfprintf_r+0x204>
 8010e3e:	fb01 2808 	mla	r8, r1, r8, r2
 8010e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e46:	9204      	str	r2, [sp, #16]
 8010e48:	9a04      	ldr	r2, [sp, #16]
 8010e4a:	3a30      	subs	r2, #48	@ 0x30
 8010e4c:	2a09      	cmp	r2, #9
 8010e4e:	d9f6      	bls.n	8010e3e <_svfprintf_r+0x24e>
 8010e50:	e72e      	b.n	8010cb0 <_svfprintf_r+0xc0>
 8010e52:	f04f 0800 	mov.w	r8, #0
 8010e56:	210a      	movs	r1, #10
 8010e58:	e7f6      	b.n	8010e48 <_svfprintf_r+0x258>
 8010e5a:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8010e5e:	e7c9      	b.n	8010df4 <_svfprintf_r+0x204>
 8010e60:	2200      	movs	r2, #0
 8010e62:	9b08      	ldr	r3, [sp, #32]
 8010e64:	920a      	str	r2, [sp, #40]	@ 0x28
 8010e66:	210a      	movs	r1, #10
 8010e68:	9a04      	ldr	r2, [sp, #16]
 8010e6a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010e6c:	3a30      	subs	r2, #48	@ 0x30
 8010e6e:	fb01 2200 	mla	r2, r1, r0, r2
 8010e72:	920a      	str	r2, [sp, #40]	@ 0x28
 8010e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e78:	9204      	str	r2, [sp, #16]
 8010e7a:	3a30      	subs	r2, #48	@ 0x30
 8010e7c:	2a09      	cmp	r2, #9
 8010e7e:	d9f3      	bls.n	8010e68 <_svfprintf_r+0x278>
 8010e80:	e716      	b.n	8010cb0 <_svfprintf_r+0xc0>
 8010e82:	f045 0508 	orr.w	r5, r5, #8
 8010e86:	e7b5      	b.n	8010df4 <_svfprintf_r+0x204>
 8010e88:	9b08      	ldr	r3, [sp, #32]
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	2b68      	cmp	r3, #104	@ 0x68
 8010e8e:	bf01      	itttt	eq
 8010e90:	9b08      	ldreq	r3, [sp, #32]
 8010e92:	3301      	addeq	r3, #1
 8010e94:	9308      	streq	r3, [sp, #32]
 8010e96:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8010e9a:	bf18      	it	ne
 8010e9c:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8010ea0:	e7a8      	b.n	8010df4 <_svfprintf_r+0x204>
 8010ea2:	bf00      	nop
 8010ea4:	f3af 8000 	nop.w
	...
 8010eb0:	08014789 	.word	0x08014789
 8010eb4:	9b08      	ldr	r3, [sp, #32]
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	2b6c      	cmp	r3, #108	@ 0x6c
 8010eba:	d105      	bne.n	8010ec8 <_svfprintf_r+0x2d8>
 8010ebc:	9b08      	ldr	r3, [sp, #32]
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	9308      	str	r3, [sp, #32]
 8010ec2:	f045 0520 	orr.w	r5, r5, #32
 8010ec6:	e795      	b.n	8010df4 <_svfprintf_r+0x204>
 8010ec8:	f045 0510 	orr.w	r5, r5, #16
 8010ecc:	e792      	b.n	8010df4 <_svfprintf_r+0x204>
 8010ece:	4632      	mov	r2, r6
 8010ed0:	f852 3b04 	ldr.w	r3, [r2], #4
 8010ed4:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8010ed8:	2300      	movs	r3, #0
 8010eda:	9205      	str	r2, [sp, #20]
 8010edc:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8010ee0:	469b      	mov	fp, r3
 8010ee2:	f04f 0801 	mov.w	r8, #1
 8010ee6:	930c      	str	r3, [sp, #48]	@ 0x30
 8010ee8:	461f      	mov	r7, r3
 8010eea:	9306      	str	r3, [sp, #24]
 8010eec:	461e      	mov	r6, r3
 8010eee:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 8010ef2:	e1a1      	b.n	8011238 <_svfprintf_r+0x648>
 8010ef4:	f045 0510 	orr.w	r5, r5, #16
 8010ef8:	06a8      	lsls	r0, r5, #26
 8010efa:	d512      	bpl.n	8010f22 <_svfprintf_r+0x332>
 8010efc:	3607      	adds	r6, #7
 8010efe:	f026 0307 	bic.w	r3, r6, #7
 8010f02:	461a      	mov	r2, r3
 8010f04:	685f      	ldr	r7, [r3, #4]
 8010f06:	f852 6b08 	ldr.w	r6, [r2], #8
 8010f0a:	9205      	str	r2, [sp, #20]
 8010f0c:	2f00      	cmp	r7, #0
 8010f0e:	da06      	bge.n	8010f1e <_svfprintf_r+0x32e>
 8010f10:	4276      	negs	r6, r6
 8010f12:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8010f16:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8010f1a:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8010f1e:	2301      	movs	r3, #1
 8010f20:	e33d      	b.n	801159e <_svfprintf_r+0x9ae>
 8010f22:	4633      	mov	r3, r6
 8010f24:	06e9      	lsls	r1, r5, #27
 8010f26:	f853 7b04 	ldr.w	r7, [r3], #4
 8010f2a:	9305      	str	r3, [sp, #20]
 8010f2c:	d502      	bpl.n	8010f34 <_svfprintf_r+0x344>
 8010f2e:	463e      	mov	r6, r7
 8010f30:	17ff      	asrs	r7, r7, #31
 8010f32:	e7eb      	b.n	8010f0c <_svfprintf_r+0x31c>
 8010f34:	066a      	lsls	r2, r5, #25
 8010f36:	d503      	bpl.n	8010f40 <_svfprintf_r+0x350>
 8010f38:	b23e      	sxth	r6, r7
 8010f3a:	f347 37c0 	sbfx	r7, r7, #15, #1
 8010f3e:	e7e5      	b.n	8010f0c <_svfprintf_r+0x31c>
 8010f40:	05ab      	lsls	r3, r5, #22
 8010f42:	d5f4      	bpl.n	8010f2e <_svfprintf_r+0x33e>
 8010f44:	b27e      	sxtb	r6, r7
 8010f46:	f347 17c0 	sbfx	r7, r7, #7, #1
 8010f4a:	e7df      	b.n	8010f0c <_svfprintf_r+0x31c>
 8010f4c:	3607      	adds	r6, #7
 8010f4e:	f026 0307 	bic.w	r3, r6, #7
 8010f52:	ecb3 8b02 	vldmia	r3!, {d8}
 8010f56:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 8011118 <_svfprintf_r+0x528>
 8010f5a:	eeb0 6bc8 	vabs.f64	d6, d8
 8010f5e:	eeb4 6b47 	vcmp.f64	d6, d7
 8010f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f66:	9305      	str	r3, [sp, #20]
 8010f68:	dd18      	ble.n	8010f9c <_svfprintf_r+0x3ac>
 8010f6a:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8010f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f72:	d502      	bpl.n	8010f7a <_svfprintf_r+0x38a>
 8010f74:	232d      	movs	r3, #45	@ 0x2d
 8010f76:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8010f7a:	4a69      	ldr	r2, [pc, #420]	@ (8011120 <_svfprintf_r+0x530>)
 8010f7c:	4b69      	ldr	r3, [pc, #420]	@ (8011124 <_svfprintf_r+0x534>)
 8010f7e:	9904      	ldr	r1, [sp, #16]
 8010f80:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8010f84:	2947      	cmp	r1, #71	@ 0x47
 8010f86:	bfd4      	ite	le
 8010f88:	4691      	movle	r9, r2
 8010f8a:	4699      	movgt	r9, r3
 8010f8c:	f04f 0b00 	mov.w	fp, #0
 8010f90:	f04f 0803 	mov.w	r8, #3
 8010f94:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010f98:	f000 bfa4 	b.w	8011ee4 <_svfprintf_r+0x12f4>
 8010f9c:	eeb4 8b48 	vcmp.f64	d8, d8
 8010fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa4:	d709      	bvc.n	8010fba <_svfprintf_r+0x3ca>
 8010fa6:	ee18 3a90 	vmov	r3, s17
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	bfbc      	itt	lt
 8010fae:	232d      	movlt	r3, #45	@ 0x2d
 8010fb0:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 8010fb4:	4a5c      	ldr	r2, [pc, #368]	@ (8011128 <_svfprintf_r+0x538>)
 8010fb6:	4b5d      	ldr	r3, [pc, #372]	@ (801112c <_svfprintf_r+0x53c>)
 8010fb8:	e7e1      	b.n	8010f7e <_svfprintf_r+0x38e>
 8010fba:	9b04      	ldr	r3, [sp, #16]
 8010fbc:	2b61      	cmp	r3, #97	@ 0x61
 8010fbe:	d027      	beq.n	8011010 <_svfprintf_r+0x420>
 8010fc0:	2b41      	cmp	r3, #65	@ 0x41
 8010fc2:	d127      	bne.n	8011014 <_svfprintf_r+0x424>
 8010fc4:	2358      	movs	r3, #88	@ 0x58
 8010fc6:	2230      	movs	r2, #48	@ 0x30
 8010fc8:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8010fcc:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 8010fd0:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8010fd4:	f045 0502 	orr.w	r5, r5, #2
 8010fd8:	f340 8089 	ble.w	80110ee <_svfprintf_r+0x4fe>
 8010fdc:	9802      	ldr	r0, [sp, #8]
 8010fde:	f108 0101 	add.w	r1, r8, #1
 8010fe2:	f7ff fbb9 	bl	8010758 <_malloc_r>
 8010fe6:	4681      	mov	r9, r0
 8010fe8:	2800      	cmp	r0, #0
 8010fea:	f040 8085 	bne.w	80110f8 <_svfprintf_r+0x508>
 8010fee:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8010ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ff6:	f8aa 300c 	strh.w	r3, [sl, #12]
 8010ffa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8010ffe:	065b      	lsls	r3, r3, #25
 8011000:	f53f ae1a 	bmi.w	8010c38 <_svfprintf_r+0x48>
 8011004:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011006:	b04b      	add	sp, #300	@ 0x12c
 8011008:	ecbd 8b04 	vpop	{d8-d9}
 801100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011010:	2378      	movs	r3, #120	@ 0x78
 8011012:	e7d8      	b.n	8010fc6 <_svfprintf_r+0x3d6>
 8011014:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8011018:	d070      	beq.n	80110fc <_svfprintf_r+0x50c>
 801101a:	9b04      	ldr	r3, [sp, #16]
 801101c:	f023 0320 	bic.w	r3, r3, #32
 8011020:	2b47      	cmp	r3, #71	@ 0x47
 8011022:	d170      	bne.n	8011106 <_svfprintf_r+0x516>
 8011024:	f1b8 0f00 	cmp.w	r8, #0
 8011028:	d16d      	bne.n	8011106 <_svfprintf_r+0x516>
 801102a:	46c3      	mov	fp, r8
 801102c:	f04f 0801 	mov.w	r8, #1
 8011030:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8011034:	930c      	str	r3, [sp, #48]	@ 0x30
 8011036:	ee18 3a90 	vmov	r3, s17
 801103a:	2b00      	cmp	r3, #0
 801103c:	da66      	bge.n	801110c <_svfprintf_r+0x51c>
 801103e:	eeb1 9b48 	vneg.f64	d9, d8
 8011042:	232d      	movs	r3, #45	@ 0x2d
 8011044:	930d      	str	r3, [sp, #52]	@ 0x34
 8011046:	9b04      	ldr	r3, [sp, #16]
 8011048:	f023 0720 	bic.w	r7, r3, #32
 801104c:	2f41      	cmp	r7, #65	@ 0x41
 801104e:	f040 81c6 	bne.w	80113de <_svfprintf_r+0x7ee>
 8011052:	eeb0 0b49 	vmov.f64	d0, d9
 8011056:	a818      	add	r0, sp, #96	@ 0x60
 8011058:	f7fe fc5a 	bl	800f910 <frexp>
 801105c:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 8011060:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011064:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801106c:	bf08      	it	eq
 801106e:	2301      	moveq	r3, #1
 8011070:	9a04      	ldr	r2, [sp, #16]
 8011072:	bf08      	it	eq
 8011074:	9318      	streq	r3, [sp, #96]	@ 0x60
 8011076:	492e      	ldr	r1, [pc, #184]	@ (8011130 <_svfprintf_r+0x540>)
 8011078:	4b2e      	ldr	r3, [pc, #184]	@ (8011134 <_svfprintf_r+0x544>)
 801107a:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 801107e:	2a61      	cmp	r2, #97	@ 0x61
 8011080:	bf18      	it	ne
 8011082:	4619      	movne	r1, r3
 8011084:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011088:	464b      	mov	r3, r9
 801108a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801108e:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8011092:	ee16 0a90 	vmov	r0, s13
 8011096:	5c0e      	ldrb	r6, [r1, r0]
 8011098:	f803 6b01 	strb.w	r6, [r3], #1
 801109c:	1c56      	adds	r6, r2, #1
 801109e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80110a2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80110a6:	d006      	beq.n	80110b6 <_svfprintf_r+0x4c6>
 80110a8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80110ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b0:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
 80110b4:	d12e      	bne.n	8011114 <_svfprintf_r+0x524>
 80110b6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80110ba:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80110be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c2:	dc39      	bgt.n	8011138 <_svfprintf_r+0x548>
 80110c4:	eeb4 0b47 	vcmp.f64	d0, d7
 80110c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110cc:	d101      	bne.n	80110d2 <_svfprintf_r+0x4e2>
 80110ce:	07c6      	lsls	r6, r0, #31
 80110d0:	d432      	bmi.n	8011138 <_svfprintf_r+0x548>
 80110d2:	4619      	mov	r1, r3
 80110d4:	189e      	adds	r6, r3, r2
 80110d6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 80110da:	1a70      	subs	r0, r6, r1
 80110dc:	2800      	cmp	r0, #0
 80110de:	f280 817b 	bge.w	80113d8 <_svfprintf_r+0x7e8>
 80110e2:	1c51      	adds	r1, r2, #1
 80110e4:	3201      	adds	r2, #1
 80110e6:	bfb8      	it	lt
 80110e8:	2100      	movlt	r1, #0
 80110ea:	440b      	add	r3, r1
 80110ec:	e037      	b.n	801115e <_svfprintf_r+0x56e>
 80110ee:	f04f 0b00 	mov.w	fp, #0
 80110f2:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 80110f6:	e79b      	b.n	8011030 <_svfprintf_r+0x440>
 80110f8:	4683      	mov	fp, r0
 80110fa:	e799      	b.n	8011030 <_svfprintf_r+0x440>
 80110fc:	f04f 0b00 	mov.w	fp, #0
 8011100:	f04f 0806 	mov.w	r8, #6
 8011104:	e794      	b.n	8011030 <_svfprintf_r+0x440>
 8011106:	f04f 0b00 	mov.w	fp, #0
 801110a:	e791      	b.n	8011030 <_svfprintf_r+0x440>
 801110c:	2300      	movs	r3, #0
 801110e:	eeb0 9b48 	vmov.f64	d9, d8
 8011112:	e797      	b.n	8011044 <_svfprintf_r+0x454>
 8011114:	4632      	mov	r2, r6
 8011116:	e7b8      	b.n	801108a <_svfprintf_r+0x49a>
 8011118:	ffffffff 	.word	0xffffffff
 801111c:	7fefffff 	.word	0x7fefffff
 8011120:	0801493d 	.word	0x0801493d
 8011124:	08014941 	.word	0x08014941
 8011128:	08014945 	.word	0x08014945
 801112c:	08014949 	.word	0x08014949
 8011130:	08014789 	.word	0x08014789
 8011134:	08014778 	.word	0x08014778
 8011138:	7bce      	ldrb	r6, [r1, #15]
 801113a:	931c      	str	r3, [sp, #112]	@ 0x70
 801113c:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8011140:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8011142:	1e42      	subs	r2, r0, #1
 8011144:	921c      	str	r2, [sp, #112]	@ 0x70
 8011146:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 801114a:	42b2      	cmp	r2, r6
 801114c:	f000 8141 	beq.w	80113d2 <_svfprintf_r+0x7e2>
 8011150:	2a39      	cmp	r2, #57	@ 0x39
 8011152:	bf16      	itet	ne
 8011154:	3201      	addne	r2, #1
 8011156:	7a8a      	ldrbeq	r2, [r1, #10]
 8011158:	b2d2      	uxtbne	r2, r2
 801115a:	f800 2c01 	strb.w	r2, [r0, #-1]
 801115e:	eba3 0309 	sub.w	r3, r3, r9
 8011162:	2f47      	cmp	r7, #71	@ 0x47
 8011164:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8011166:	9303      	str	r3, [sp, #12]
 8011168:	f040 8179 	bne.w	801145e <_svfprintf_r+0x86e>
 801116c:	1cf1      	adds	r1, r6, #3
 801116e:	db02      	blt.n	8011176 <_svfprintf_r+0x586>
 8011170:	4546      	cmp	r6, r8
 8011172:	f340 8196 	ble.w	80114a2 <_svfprintf_r+0x8b2>
 8011176:	9b04      	ldr	r3, [sp, #16]
 8011178:	3b02      	subs	r3, #2
 801117a:	9304      	str	r3, [sp, #16]
 801117c:	9904      	ldr	r1, [sp, #16]
 801117e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8011182:	f021 0120 	bic.w	r1, r1, #32
 8011186:	2941      	cmp	r1, #65	@ 0x41
 8011188:	bf08      	it	eq
 801118a:	320f      	addeq	r2, #15
 801118c:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8011190:	bf06      	itte	eq
 8011192:	b2d2      	uxtbeq	r2, r2
 8011194:	2101      	moveq	r1, #1
 8011196:	2100      	movne	r1, #0
 8011198:	2b00      	cmp	r3, #0
 801119a:	9318      	str	r3, [sp, #96]	@ 0x60
 801119c:	bfb8      	it	lt
 801119e:	f1c6 0301 	rsblt	r3, r6, #1
 80111a2:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 80111a6:	bfb4      	ite	lt
 80111a8:	222d      	movlt	r2, #45	@ 0x2d
 80111aa:	222b      	movge	r2, #43	@ 0x2b
 80111ac:	2b09      	cmp	r3, #9
 80111ae:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 80111b2:	f340 8169 	ble.w	8011488 <_svfprintf_r+0x898>
 80111b6:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 80111ba:	270a      	movs	r7, #10
 80111bc:	4602      	mov	r2, r0
 80111be:	fbb3 f6f7 	udiv	r6, r3, r7
 80111c2:	fb07 3116 	mls	r1, r7, r6, r3
 80111c6:	3130      	adds	r1, #48	@ 0x30
 80111c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80111cc:	4619      	mov	r1, r3
 80111ce:	2963      	cmp	r1, #99	@ 0x63
 80111d0:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 80111d4:	4633      	mov	r3, r6
 80111d6:	dcf1      	bgt.n	80111bc <_svfprintf_r+0x5cc>
 80111d8:	3330      	adds	r3, #48	@ 0x30
 80111da:	1e91      	subs	r1, r2, #2
 80111dc:	f800 3c01 	strb.w	r3, [r0, #-1]
 80111e0:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 80111e4:	460b      	mov	r3, r1
 80111e6:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 80111ea:	4283      	cmp	r3, r0
 80111ec:	f0c0 8147 	bcc.w	801147e <_svfprintf_r+0x88e>
 80111f0:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 80111f4:	1a9b      	subs	r3, r3, r2
 80111f6:	4281      	cmp	r1, r0
 80111f8:	bf88      	it	hi
 80111fa:	2300      	movhi	r3, #0
 80111fc:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 8011200:	441a      	add	r2, r3
 8011202:	ab1a      	add	r3, sp, #104	@ 0x68
 8011204:	1ad3      	subs	r3, r2, r3
 8011206:	9a03      	ldr	r2, [sp, #12]
 8011208:	9311      	str	r3, [sp, #68]	@ 0x44
 801120a:	2a01      	cmp	r2, #1
 801120c:	eb03 0802 	add.w	r8, r3, r2
 8011210:	dc01      	bgt.n	8011216 <_svfprintf_r+0x626>
 8011212:	07ea      	lsls	r2, r5, #31
 8011214:	d501      	bpl.n	801121a <_svfprintf_r+0x62a>
 8011216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011218:	4498      	add	r8, r3
 801121a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801121e:	2700      	movs	r7, #0
 8011220:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8011224:	930c      	str	r3, [sp, #48]	@ 0x30
 8011226:	9706      	str	r7, [sp, #24]
 8011228:	463e      	mov	r6, r7
 801122a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801122c:	2b00      	cmp	r3, #0
 801122e:	f040 8180 	bne.w	8011532 <_svfprintf_r+0x942>
 8011232:	2300      	movs	r3, #0
 8011234:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8011236:	930c      	str	r3, [sp, #48]	@ 0x30
 8011238:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801123a:	4543      	cmp	r3, r8
 801123c:	bfb8      	it	lt
 801123e:	4643      	movlt	r3, r8
 8011240:	930d      	str	r3, [sp, #52]	@ 0x34
 8011242:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 8011246:	b113      	cbz	r3, 801124e <_svfprintf_r+0x65e>
 8011248:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801124a:	3301      	adds	r3, #1
 801124c:	930d      	str	r3, [sp, #52]	@ 0x34
 801124e:	f015 0302 	ands.w	r3, r5, #2
 8011252:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011254:	bf1e      	ittt	ne
 8011256:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 8011258:	3302      	addne	r3, #2
 801125a:	930d      	strne	r3, [sp, #52]	@ 0x34
 801125c:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8011260:	9314      	str	r3, [sp, #80]	@ 0x50
 8011262:	d120      	bne.n	80112a6 <_svfprintf_r+0x6b6>
 8011264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011266:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011268:	1a9b      	subs	r3, r3, r2
 801126a:	2b00      	cmp	r3, #0
 801126c:	dd1b      	ble.n	80112a6 <_svfprintf_r+0x6b6>
 801126e:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 8011272:	49a5      	ldr	r1, [pc, #660]	@ (8011508 <_svfprintf_r+0x918>)
 8011274:	6021      	str	r1, [r4, #0]
 8011276:	2b10      	cmp	r3, #16
 8011278:	f102 0201 	add.w	r2, r2, #1
 801127c:	f104 0008 	add.w	r0, r4, #8
 8011280:	f300 828c 	bgt.w	801179c <_svfprintf_r+0xbac>
 8011284:	eb0c 0103 	add.w	r1, ip, r3
 8011288:	2a07      	cmp	r2, #7
 801128a:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 801128e:	6063      	str	r3, [r4, #4]
 8011290:	f340 8299 	ble.w	80117c6 <_svfprintf_r+0xbd6>
 8011294:	9802      	ldr	r0, [sp, #8]
 8011296:	aa1e      	add	r2, sp, #120	@ 0x78
 8011298:	4651      	mov	r1, sl
 801129a:	f001 fda7 	bl	8012dec <__ssprint_r>
 801129e:	2800      	cmp	r0, #0
 80112a0:	f040 85c7 	bne.w	8011e32 <_svfprintf_r+0x1242>
 80112a4:	ac21      	add	r4, sp, #132	@ 0x84
 80112a6:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 80112aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80112ac:	b16a      	cbz	r2, 80112ca <_svfprintf_r+0x6da>
 80112ae:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 80112b2:	6022      	str	r2, [r4, #0]
 80112b4:	2201      	movs	r2, #1
 80112b6:	4413      	add	r3, r2
 80112b8:	9320      	str	r3, [sp, #128]	@ 0x80
 80112ba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80112bc:	6062      	str	r2, [r4, #4]
 80112be:	4413      	add	r3, r2
 80112c0:	2b07      	cmp	r3, #7
 80112c2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80112c4:	f300 8281 	bgt.w	80117ca <_svfprintf_r+0xbda>
 80112c8:	3408      	adds	r4, #8
 80112ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80112cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80112ce:	b162      	cbz	r2, 80112ea <_svfprintf_r+0x6fa>
 80112d0:	aa17      	add	r2, sp, #92	@ 0x5c
 80112d2:	6022      	str	r2, [r4, #0]
 80112d4:	2202      	movs	r2, #2
 80112d6:	4413      	add	r3, r2
 80112d8:	9320      	str	r3, [sp, #128]	@ 0x80
 80112da:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80112dc:	6062      	str	r2, [r4, #4]
 80112de:	3301      	adds	r3, #1
 80112e0:	2b07      	cmp	r3, #7
 80112e2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80112e4:	f300 827b 	bgt.w	80117de <_svfprintf_r+0xbee>
 80112e8:	3408      	adds	r4, #8
 80112ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80112ec:	2b80      	cmp	r3, #128	@ 0x80
 80112ee:	d120      	bne.n	8011332 <_svfprintf_r+0x742>
 80112f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80112f4:	1a9b      	subs	r3, r3, r2
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	dd1b      	ble.n	8011332 <_svfprintf_r+0x742>
 80112fa:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 80112fe:	4983      	ldr	r1, [pc, #524]	@ (801150c <_svfprintf_r+0x91c>)
 8011300:	6021      	str	r1, [r4, #0]
 8011302:	2b10      	cmp	r3, #16
 8011304:	f102 0201 	add.w	r2, r2, #1
 8011308:	f104 0008 	add.w	r0, r4, #8
 801130c:	f300 8271 	bgt.w	80117f2 <_svfprintf_r+0xc02>
 8011310:	eb0c 0103 	add.w	r1, ip, r3
 8011314:	2a07      	cmp	r2, #7
 8011316:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 801131a:	6063      	str	r3, [r4, #4]
 801131c:	f340 827e 	ble.w	801181c <_svfprintf_r+0xc2c>
 8011320:	9802      	ldr	r0, [sp, #8]
 8011322:	aa1e      	add	r2, sp, #120	@ 0x78
 8011324:	4651      	mov	r1, sl
 8011326:	f001 fd61 	bl	8012dec <__ssprint_r>
 801132a:	2800      	cmp	r0, #0
 801132c:	f040 8581 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011330:	ac21      	add	r4, sp, #132	@ 0x84
 8011332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011334:	eba3 0308 	sub.w	r3, r3, r8
 8011338:	2b00      	cmp	r3, #0
 801133a:	930c      	str	r3, [sp, #48]	@ 0x30
 801133c:	dd1c      	ble.n	8011378 <_svfprintf_r+0x788>
 801133e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8011340:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 8011344:	2810      	cmp	r0, #16
 8011346:	4871      	ldr	r0, [pc, #452]	@ (801150c <_svfprintf_r+0x91c>)
 8011348:	6020      	str	r0, [r4, #0]
 801134a:	f102 0201 	add.w	r2, r2, #1
 801134e:	f104 0108 	add.w	r1, r4, #8
 8011352:	f300 8265 	bgt.w	8011820 <_svfprintf_r+0xc30>
 8011356:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8011358:	6060      	str	r0, [r4, #4]
 801135a:	4403      	add	r3, r0
 801135c:	2a07      	cmp	r2, #7
 801135e:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8011362:	f340 8272 	ble.w	801184a <_svfprintf_r+0xc5a>
 8011366:	9802      	ldr	r0, [sp, #8]
 8011368:	aa1e      	add	r2, sp, #120	@ 0x78
 801136a:	4651      	mov	r1, sl
 801136c:	f001 fd3e 	bl	8012dec <__ssprint_r>
 8011370:	2800      	cmp	r0, #0
 8011372:	f040 855e 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011376:	ac21      	add	r4, sp, #132	@ 0x84
 8011378:	05e9      	lsls	r1, r5, #23
 801137a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801137c:	f100 826c 	bmi.w	8011858 <_svfprintf_r+0xc68>
 8011380:	4443      	add	r3, r8
 8011382:	9320      	str	r3, [sp, #128]	@ 0x80
 8011384:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011386:	3301      	adds	r3, #1
 8011388:	2b07      	cmp	r3, #7
 801138a:	e9c4 9800 	strd	r9, r8, [r4]
 801138e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011390:	f300 82a4 	bgt.w	80118dc <_svfprintf_r+0xcec>
 8011394:	3408      	adds	r4, #8
 8011396:	076a      	lsls	r2, r5, #29
 8011398:	f100 852d 	bmi.w	8011df6 <_svfprintf_r+0x1206>
 801139c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80113a0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80113a2:	428a      	cmp	r2, r1
 80113a4:	bfac      	ite	ge
 80113a6:	189b      	addge	r3, r3, r2
 80113a8:	185b      	addlt	r3, r3, r1
 80113aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80113ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80113ae:	b13b      	cbz	r3, 80113c0 <_svfprintf_r+0x7d0>
 80113b0:	9802      	ldr	r0, [sp, #8]
 80113b2:	aa1e      	add	r2, sp, #120	@ 0x78
 80113b4:	4651      	mov	r1, sl
 80113b6:	f001 fd19 	bl	8012dec <__ssprint_r>
 80113ba:	2800      	cmp	r0, #0
 80113bc:	f040 8539 	bne.w	8011e32 <_svfprintf_r+0x1242>
 80113c0:	2300      	movs	r3, #0
 80113c2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80113c4:	f1bb 0f00 	cmp.w	fp, #0
 80113c8:	f040 854f 	bne.w	8011e6a <_svfprintf_r+0x127a>
 80113cc:	9e05      	ldr	r6, [sp, #20]
 80113ce:	ac21      	add	r4, sp, #132	@ 0x84
 80113d0:	e0bc      	b.n	801154c <_svfprintf_r+0x95c>
 80113d2:	f800 cc01 	strb.w	ip, [r0, #-1]
 80113d6:	e6b3      	b.n	8011140 <_svfprintf_r+0x550>
 80113d8:	f801 cb01 	strb.w	ip, [r1], #1
 80113dc:	e67d      	b.n	80110da <_svfprintf_r+0x4ea>
 80113de:	2f46      	cmp	r7, #70	@ 0x46
 80113e0:	d005      	beq.n	80113ee <_svfprintf_r+0x7fe>
 80113e2:	2f45      	cmp	r7, #69	@ 0x45
 80113e4:	d117      	bne.n	8011416 <_svfprintf_r+0x826>
 80113e6:	f108 0601 	add.w	r6, r8, #1
 80113ea:	2102      	movs	r1, #2
 80113ec:	e001      	b.n	80113f2 <_svfprintf_r+0x802>
 80113ee:	4646      	mov	r6, r8
 80113f0:	2103      	movs	r1, #3
 80113f2:	ab1c      	add	r3, sp, #112	@ 0x70
 80113f4:	9301      	str	r3, [sp, #4]
 80113f6:	ab19      	add	r3, sp, #100	@ 0x64
 80113f8:	9300      	str	r3, [sp, #0]
 80113fa:	9802      	ldr	r0, [sp, #8]
 80113fc:	eeb0 0b49 	vmov.f64	d0, d9
 8011400:	ab18      	add	r3, sp, #96	@ 0x60
 8011402:	4632      	mov	r2, r6
 8011404:	f7fe fb54 	bl	800fab0 <_dtoa_r>
 8011408:	2f47      	cmp	r7, #71	@ 0x47
 801140a:	4681      	mov	r9, r0
 801140c:	d115      	bne.n	801143a <_svfprintf_r+0x84a>
 801140e:	07e8      	lsls	r0, r5, #31
 8011410:	d403      	bmi.n	801141a <_svfprintf_r+0x82a>
 8011412:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8011414:	e6a3      	b.n	801115e <_svfprintf_r+0x56e>
 8011416:	4646      	mov	r6, r8
 8011418:	e7e7      	b.n	80113ea <_svfprintf_r+0x7fa>
 801141a:	eb09 0306 	add.w	r3, r9, r6
 801141e:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8011422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011426:	bf08      	it	eq
 8011428:	931c      	streq	r3, [sp, #112]	@ 0x70
 801142a:	2130      	movs	r1, #48	@ 0x30
 801142c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801142e:	4293      	cmp	r3, r2
 8011430:	d9ef      	bls.n	8011412 <_svfprintf_r+0x822>
 8011432:	1c50      	adds	r0, r2, #1
 8011434:	901c      	str	r0, [sp, #112]	@ 0x70
 8011436:	7011      	strb	r1, [r2, #0]
 8011438:	e7f8      	b.n	801142c <_svfprintf_r+0x83c>
 801143a:	2f46      	cmp	r7, #70	@ 0x46
 801143c:	eb00 0306 	add.w	r3, r0, r6
 8011440:	d1ed      	bne.n	801141e <_svfprintf_r+0x82e>
 8011442:	7802      	ldrb	r2, [r0, #0]
 8011444:	2a30      	cmp	r2, #48	@ 0x30
 8011446:	d107      	bne.n	8011458 <_svfprintf_r+0x868>
 8011448:	eeb5 9b40 	vcmp.f64	d9, #0.0
 801144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011450:	bf1c      	itt	ne
 8011452:	f1c6 0601 	rsbne	r6, r6, #1
 8011456:	9618      	strne	r6, [sp, #96]	@ 0x60
 8011458:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801145a:	4413      	add	r3, r2
 801145c:	e7df      	b.n	801141e <_svfprintf_r+0x82e>
 801145e:	2f46      	cmp	r7, #70	@ 0x46
 8011460:	f47f ae8c 	bne.w	801117c <_svfprintf_r+0x58c>
 8011464:	f005 0301 	and.w	r3, r5, #1
 8011468:	2e00      	cmp	r6, #0
 801146a:	ea43 0308 	orr.w	r3, r3, r8
 801146e:	dd25      	ble.n	80114bc <_svfprintf_r+0x8cc>
 8011470:	b37b      	cbz	r3, 80114d2 <_svfprintf_r+0x8e2>
 8011472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011474:	18f3      	adds	r3, r6, r3
 8011476:	4498      	add	r8, r3
 8011478:	2366      	movs	r3, #102	@ 0x66
 801147a:	9304      	str	r3, [sp, #16]
 801147c:	e02f      	b.n	80114de <_svfprintf_r+0x8ee>
 801147e:	f813 7b01 	ldrb.w	r7, [r3], #1
 8011482:	f806 7f01 	strb.w	r7, [r6, #1]!
 8011486:	e6b0      	b.n	80111ea <_svfprintf_r+0x5fa>
 8011488:	b941      	cbnz	r1, 801149c <_svfprintf_r+0x8ac>
 801148a:	2230      	movs	r2, #48	@ 0x30
 801148c:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 8011490:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 8011494:	3330      	adds	r3, #48	@ 0x30
 8011496:	f802 3b01 	strb.w	r3, [r2], #1
 801149a:	e6b2      	b.n	8011202 <_svfprintf_r+0x612>
 801149c:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 80114a0:	e7f8      	b.n	8011494 <_svfprintf_r+0x8a4>
 80114a2:	9b03      	ldr	r3, [sp, #12]
 80114a4:	429e      	cmp	r6, r3
 80114a6:	da0d      	bge.n	80114c4 <_svfprintf_r+0x8d4>
 80114a8:	9b03      	ldr	r3, [sp, #12]
 80114aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114ac:	2e00      	cmp	r6, #0
 80114ae:	eb03 0802 	add.w	r8, r3, r2
 80114b2:	dc0c      	bgt.n	80114ce <_svfprintf_r+0x8de>
 80114b4:	f1c6 0301 	rsb	r3, r6, #1
 80114b8:	4498      	add	r8, r3
 80114ba:	e008      	b.n	80114ce <_svfprintf_r+0x8de>
 80114bc:	b15b      	cbz	r3, 80114d6 <_svfprintf_r+0x8e6>
 80114be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114c0:	3301      	adds	r3, #1
 80114c2:	e7d8      	b.n	8011476 <_svfprintf_r+0x886>
 80114c4:	07eb      	lsls	r3, r5, #31
 80114c6:	d51d      	bpl.n	8011504 <_svfprintf_r+0x914>
 80114c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114ca:	eb06 0803 	add.w	r8, r6, r3
 80114ce:	2367      	movs	r3, #103	@ 0x67
 80114d0:	e7d3      	b.n	801147a <_svfprintf_r+0x88a>
 80114d2:	46b0      	mov	r8, r6
 80114d4:	e7d0      	b.n	8011478 <_svfprintf_r+0x888>
 80114d6:	2366      	movs	r3, #102	@ 0x66
 80114d8:	9304      	str	r3, [sp, #16]
 80114da:	f04f 0801 	mov.w	r8, #1
 80114de:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 80114e2:	9306      	str	r3, [sp, #24]
 80114e4:	d023      	beq.n	801152e <_svfprintf_r+0x93e>
 80114e6:	2700      	movs	r7, #0
 80114e8:	2e00      	cmp	r6, #0
 80114ea:	9706      	str	r7, [sp, #24]
 80114ec:	f77f ae9d 	ble.w	801122a <_svfprintf_r+0x63a>
 80114f0:	9b07      	ldr	r3, [sp, #28]
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	2bff      	cmp	r3, #255	@ 0xff
 80114f6:	d10b      	bne.n	8011510 <_svfprintf_r+0x920>
 80114f8:	9b06      	ldr	r3, [sp, #24]
 80114fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114fc:	443b      	add	r3, r7
 80114fe:	fb02 8803 	mla	r8, r2, r3, r8
 8011502:	e692      	b.n	801122a <_svfprintf_r+0x63a>
 8011504:	46b0      	mov	r8, r6
 8011506:	e7e2      	b.n	80114ce <_svfprintf_r+0x8de>
 8011508:	0801495d 	.word	0x0801495d
 801150c:	0801494d 	.word	0x0801494d
 8011510:	42b3      	cmp	r3, r6
 8011512:	daf1      	bge.n	80114f8 <_svfprintf_r+0x908>
 8011514:	1af6      	subs	r6, r6, r3
 8011516:	9b07      	ldr	r3, [sp, #28]
 8011518:	785b      	ldrb	r3, [r3, #1]
 801151a:	b133      	cbz	r3, 801152a <_svfprintf_r+0x93a>
 801151c:	9b06      	ldr	r3, [sp, #24]
 801151e:	3301      	adds	r3, #1
 8011520:	9306      	str	r3, [sp, #24]
 8011522:	9b07      	ldr	r3, [sp, #28]
 8011524:	3301      	adds	r3, #1
 8011526:	9307      	str	r3, [sp, #28]
 8011528:	e7e2      	b.n	80114f0 <_svfprintf_r+0x900>
 801152a:	3701      	adds	r7, #1
 801152c:	e7e0      	b.n	80114f0 <_svfprintf_r+0x900>
 801152e:	9f06      	ldr	r7, [sp, #24]
 8011530:	e67b      	b.n	801122a <_svfprintf_r+0x63a>
 8011532:	232d      	movs	r3, #45	@ 0x2d
 8011534:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8011538:	e67b      	b.n	8011232 <_svfprintf_r+0x642>
 801153a:	06af      	lsls	r7, r5, #26
 801153c:	d50a      	bpl.n	8011554 <_svfprintf_r+0x964>
 801153e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011540:	6833      	ldr	r3, [r6, #0]
 8011542:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011544:	17d2      	asrs	r2, r2, #31
 8011546:	e9c3 1200 	strd	r1, r2, [r3]
 801154a:	3604      	adds	r6, #4
 801154c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011550:	f7ff bb87 	b.w	8010c62 <_svfprintf_r+0x72>
 8011554:	06e8      	lsls	r0, r5, #27
 8011556:	d503      	bpl.n	8011560 <_svfprintf_r+0x970>
 8011558:	6833      	ldr	r3, [r6, #0]
 801155a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801155c:	601a      	str	r2, [r3, #0]
 801155e:	e7f4      	b.n	801154a <_svfprintf_r+0x95a>
 8011560:	0669      	lsls	r1, r5, #25
 8011562:	d503      	bpl.n	801156c <_svfprintf_r+0x97c>
 8011564:	6833      	ldr	r3, [r6, #0]
 8011566:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011568:	801a      	strh	r2, [r3, #0]
 801156a:	e7ee      	b.n	801154a <_svfprintf_r+0x95a>
 801156c:	05aa      	lsls	r2, r5, #22
 801156e:	d5f3      	bpl.n	8011558 <_svfprintf_r+0x968>
 8011570:	6833      	ldr	r3, [r6, #0]
 8011572:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011574:	701a      	strb	r2, [r3, #0]
 8011576:	e7e8      	b.n	801154a <_svfprintf_r+0x95a>
 8011578:	f045 0510 	orr.w	r5, r5, #16
 801157c:	f015 0320 	ands.w	r3, r5, #32
 8011580:	d020      	beq.n	80115c4 <_svfprintf_r+0x9d4>
 8011582:	3607      	adds	r6, #7
 8011584:	f026 0307 	bic.w	r3, r6, #7
 8011588:	461a      	mov	r2, r3
 801158a:	685f      	ldr	r7, [r3, #4]
 801158c:	f852 6b08 	ldr.w	r6, [r2], #8
 8011590:	9205      	str	r2, [sp, #20]
 8011592:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8011596:	2300      	movs	r3, #0
 8011598:	2200      	movs	r2, #0
 801159a:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 801159e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80115a2:	f000 8473 	beq.w	8011e8c <_svfprintf_r+0x129c>
 80115a6:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 80115aa:	9206      	str	r2, [sp, #24]
 80115ac:	ea56 0207 	orrs.w	r2, r6, r7
 80115b0:	f040 8471 	bne.w	8011e96 <_svfprintf_r+0x12a6>
 80115b4:	f1b8 0f00 	cmp.w	r8, #0
 80115b8:	f000 80dc 	beq.w	8011774 <_svfprintf_r+0xb84>
 80115bc:	2b01      	cmp	r3, #1
 80115be:	f040 846d 	bne.w	8011e9c <_svfprintf_r+0x12ac>
 80115c2:	e083      	b.n	80116cc <_svfprintf_r+0xadc>
 80115c4:	4632      	mov	r2, r6
 80115c6:	f015 0710 	ands.w	r7, r5, #16
 80115ca:	f852 6b04 	ldr.w	r6, [r2], #4
 80115ce:	9205      	str	r2, [sp, #20]
 80115d0:	d001      	beq.n	80115d6 <_svfprintf_r+0x9e6>
 80115d2:	461f      	mov	r7, r3
 80115d4:	e7dd      	b.n	8011592 <_svfprintf_r+0x9a2>
 80115d6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80115da:	d001      	beq.n	80115e0 <_svfprintf_r+0x9f0>
 80115dc:	b2b6      	uxth	r6, r6
 80115de:	e7d8      	b.n	8011592 <_svfprintf_r+0x9a2>
 80115e0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80115e4:	d0d5      	beq.n	8011592 <_svfprintf_r+0x9a2>
 80115e6:	b2f6      	uxtb	r6, r6
 80115e8:	e7f3      	b.n	80115d2 <_svfprintf_r+0x9e2>
 80115ea:	4633      	mov	r3, r6
 80115ec:	2278      	movs	r2, #120	@ 0x78
 80115ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80115f2:	9305      	str	r3, [sp, #20]
 80115f4:	f647 0330 	movw	r3, #30768	@ 0x7830
 80115f8:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 80115fc:	4b94      	ldr	r3, [pc, #592]	@ (8011850 <_svfprintf_r+0xc60>)
 80115fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8011600:	2700      	movs	r7, #0
 8011602:	f045 0502 	orr.w	r5, r5, #2
 8011606:	2302      	movs	r3, #2
 8011608:	9204      	str	r2, [sp, #16]
 801160a:	e7c5      	b.n	8011598 <_svfprintf_r+0x9a8>
 801160c:	4633      	mov	r3, r6
 801160e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8011612:	f853 9b04 	ldr.w	r9, [r3], #4
 8011616:	9305      	str	r3, [sp, #20]
 8011618:	f04f 0600 	mov.w	r6, #0
 801161c:	f88d 605b 	strb.w	r6, [sp, #91]	@ 0x5b
 8011620:	d00f      	beq.n	8011642 <_svfprintf_r+0xa52>
 8011622:	4642      	mov	r2, r8
 8011624:	4631      	mov	r1, r6
 8011626:	4648      	mov	r0, r9
 8011628:	f7ee fe5a 	bl	80002e0 <memchr>
 801162c:	4683      	mov	fp, r0
 801162e:	2800      	cmp	r0, #0
 8011630:	f43f acb0 	beq.w	8010f94 <_svfprintf_r+0x3a4>
 8011634:	eba0 0809 	sub.w	r8, r0, r9
 8011638:	46b3      	mov	fp, r6
 801163a:	960c      	str	r6, [sp, #48]	@ 0x30
 801163c:	4637      	mov	r7, r6
 801163e:	9606      	str	r6, [sp, #24]
 8011640:	e5fa      	b.n	8011238 <_svfprintf_r+0x648>
 8011642:	4648      	mov	r0, r9
 8011644:	f7ee fe9c 	bl	8000380 <strlen>
 8011648:	46b3      	mov	fp, r6
 801164a:	4680      	mov	r8, r0
 801164c:	e4a2      	b.n	8010f94 <_svfprintf_r+0x3a4>
 801164e:	f045 0510 	orr.w	r5, r5, #16
 8011652:	f015 0320 	ands.w	r3, r5, #32
 8011656:	d009      	beq.n	801166c <_svfprintf_r+0xa7c>
 8011658:	3607      	adds	r6, #7
 801165a:	f026 0307 	bic.w	r3, r6, #7
 801165e:	461a      	mov	r2, r3
 8011660:	685f      	ldr	r7, [r3, #4]
 8011662:	f852 6b08 	ldr.w	r6, [r2], #8
 8011666:	9205      	str	r2, [sp, #20]
 8011668:	2301      	movs	r3, #1
 801166a:	e795      	b.n	8011598 <_svfprintf_r+0x9a8>
 801166c:	4632      	mov	r2, r6
 801166e:	f015 0710 	ands.w	r7, r5, #16
 8011672:	f852 6b04 	ldr.w	r6, [r2], #4
 8011676:	9205      	str	r2, [sp, #20]
 8011678:	d001      	beq.n	801167e <_svfprintf_r+0xa8e>
 801167a:	461f      	mov	r7, r3
 801167c:	e7f4      	b.n	8011668 <_svfprintf_r+0xa78>
 801167e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8011682:	d001      	beq.n	8011688 <_svfprintf_r+0xa98>
 8011684:	b2b6      	uxth	r6, r6
 8011686:	e7ef      	b.n	8011668 <_svfprintf_r+0xa78>
 8011688:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801168c:	d0ec      	beq.n	8011668 <_svfprintf_r+0xa78>
 801168e:	b2f6      	uxtb	r6, r6
 8011690:	e7f3      	b.n	801167a <_svfprintf_r+0xa8a>
 8011692:	4b70      	ldr	r3, [pc, #448]	@ (8011854 <_svfprintf_r+0xc64>)
 8011694:	f7ff bb7a 	b.w	8010d8c <_svfprintf_r+0x19c>
 8011698:	4632      	mov	r2, r6
 801169a:	f015 0710 	ands.w	r7, r5, #16
 801169e:	f852 6b04 	ldr.w	r6, [r2], #4
 80116a2:	9205      	str	r2, [sp, #20]
 80116a4:	d002      	beq.n	80116ac <_svfprintf_r+0xabc>
 80116a6:	461f      	mov	r7, r3
 80116a8:	f7ff bb7d 	b.w	8010da6 <_svfprintf_r+0x1b6>
 80116ac:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80116b0:	d002      	beq.n	80116b8 <_svfprintf_r+0xac8>
 80116b2:	b2b6      	uxth	r6, r6
 80116b4:	f7ff bb77 	b.w	8010da6 <_svfprintf_r+0x1b6>
 80116b8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80116bc:	f43f ab73 	beq.w	8010da6 <_svfprintf_r+0x1b6>
 80116c0:	b2f6      	uxtb	r6, r6
 80116c2:	e7f0      	b.n	80116a6 <_svfprintf_r+0xab6>
 80116c4:	2e0a      	cmp	r6, #10
 80116c6:	f177 0300 	sbcs.w	r3, r7, #0
 80116ca:	d206      	bcs.n	80116da <_svfprintf_r+0xaea>
 80116cc:	3630      	adds	r6, #48	@ 0x30
 80116ce:	b2f6      	uxtb	r6, r6
 80116d0:	f88d 6127 	strb.w	r6, [sp, #295]	@ 0x127
 80116d4:	f20d 1927 	addw	r9, sp, #295	@ 0x127
 80116d8:	e3fc      	b.n	8011ed4 <_svfprintf_r+0x12e4>
 80116da:	2300      	movs	r3, #0
 80116dc:	9303      	str	r3, [sp, #12]
 80116de:	9b06      	ldr	r3, [sp, #24]
 80116e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80116e4:	ad4a      	add	r5, sp, #296	@ 0x128
 80116e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80116e8:	220a      	movs	r2, #10
 80116ea:	2300      	movs	r3, #0
 80116ec:	4630      	mov	r0, r6
 80116ee:	4639      	mov	r1, r7
 80116f0:	f7ee fe4e 	bl	8000390 <__aeabi_uldivmod>
 80116f4:	3230      	adds	r2, #48	@ 0x30
 80116f6:	f805 2c01 	strb.w	r2, [r5, #-1]
 80116fa:	9a03      	ldr	r2, [sp, #12]
 80116fc:	3201      	adds	r2, #1
 80116fe:	9203      	str	r2, [sp, #12]
 8011700:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011702:	4603      	mov	r3, r0
 8011704:	468b      	mov	fp, r1
 8011706:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 801170a:	b1e2      	cbz	r2, 8011746 <_svfprintf_r+0xb56>
 801170c:	9a07      	ldr	r2, [sp, #28]
 801170e:	9903      	ldr	r1, [sp, #12]
 8011710:	7812      	ldrb	r2, [r2, #0]
 8011712:	4291      	cmp	r1, r2
 8011714:	d117      	bne.n	8011746 <_svfprintf_r+0xb56>
 8011716:	29ff      	cmp	r1, #255	@ 0xff
 8011718:	d015      	beq.n	8011746 <_svfprintf_r+0xb56>
 801171a:	2e0a      	cmp	r6, #10
 801171c:	f177 0200 	sbcs.w	r2, r7, #0
 8011720:	d311      	bcc.n	8011746 <_svfprintf_r+0xb56>
 8011722:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011724:	9003      	str	r0, [sp, #12]
 8011726:	eba9 0903 	sub.w	r9, r9, r3
 801172a:	461a      	mov	r2, r3
 801172c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801172e:	4648      	mov	r0, r9
 8011730:	f7fe f87c 	bl	800f82c <strncpy>
 8011734:	9b07      	ldr	r3, [sp, #28]
 8011736:	785a      	ldrb	r2, [r3, #1]
 8011738:	9b03      	ldr	r3, [sp, #12]
 801173a:	b11a      	cbz	r2, 8011744 <_svfprintf_r+0xb54>
 801173c:	9a07      	ldr	r2, [sp, #28]
 801173e:	3201      	adds	r2, #1
 8011740:	9207      	str	r2, [sp, #28]
 8011742:	2200      	movs	r2, #0
 8011744:	9203      	str	r2, [sp, #12]
 8011746:	2e0a      	cmp	r6, #10
 8011748:	f177 0700 	sbcs.w	r7, r7, #0
 801174c:	f0c0 83c2 	bcc.w	8011ed4 <_svfprintf_r+0x12e4>
 8011750:	461e      	mov	r6, r3
 8011752:	465f      	mov	r7, fp
 8011754:	464d      	mov	r5, r9
 8011756:	e7c7      	b.n	80116e8 <_svfprintf_r+0xaf8>
 8011758:	f006 030f 	and.w	r3, r6, #15
 801175c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801175e:	0936      	lsrs	r6, r6, #4
 8011760:	5cd3      	ldrb	r3, [r2, r3]
 8011762:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011766:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 801176a:	093f      	lsrs	r7, r7, #4
 801176c:	ea56 0307 	orrs.w	r3, r6, r7
 8011770:	d1f2      	bne.n	8011758 <_svfprintf_r+0xb68>
 8011772:	e3af      	b.n	8011ed4 <_svfprintf_r+0x12e4>
 8011774:	b91b      	cbnz	r3, 801177e <_svfprintf_r+0xb8e>
 8011776:	07e8      	lsls	r0, r5, #31
 8011778:	d501      	bpl.n	801177e <_svfprintf_r+0xb8e>
 801177a:	2630      	movs	r6, #48	@ 0x30
 801177c:	e7a8      	b.n	80116d0 <_svfprintf_r+0xae0>
 801177e:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 8011782:	e3a7      	b.n	8011ed4 <_svfprintf_r+0x12e4>
 8011784:	9b04      	ldr	r3, [sp, #16]
 8011786:	2b00      	cmp	r3, #0
 8011788:	f000 8375 	beq.w	8011e76 <_svfprintf_r+0x1286>
 801178c:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8011790:	2300      	movs	r3, #0
 8011792:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8011796:	9605      	str	r6, [sp, #20]
 8011798:	f7ff bba2 	b.w	8010ee0 <_svfprintf_r+0x2f0>
 801179c:	2110      	movs	r1, #16
 801179e:	6061      	str	r1, [r4, #4]
 80117a0:	2a07      	cmp	r2, #7
 80117a2:	4461      	add	r1, ip
 80117a4:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 80117a8:	dd0a      	ble.n	80117c0 <_svfprintf_r+0xbd0>
 80117aa:	9802      	ldr	r0, [sp, #8]
 80117ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80117ae:	aa1e      	add	r2, sp, #120	@ 0x78
 80117b0:	4651      	mov	r1, sl
 80117b2:	f001 fb1b 	bl	8012dec <__ssprint_r>
 80117b6:	2800      	cmp	r0, #0
 80117b8:	f040 833b 	bne.w	8011e32 <_svfprintf_r+0x1242>
 80117bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80117be:	a821      	add	r0, sp, #132	@ 0x84
 80117c0:	3b10      	subs	r3, #16
 80117c2:	4604      	mov	r4, r0
 80117c4:	e553      	b.n	801126e <_svfprintf_r+0x67e>
 80117c6:	4604      	mov	r4, r0
 80117c8:	e56d      	b.n	80112a6 <_svfprintf_r+0x6b6>
 80117ca:	9802      	ldr	r0, [sp, #8]
 80117cc:	aa1e      	add	r2, sp, #120	@ 0x78
 80117ce:	4651      	mov	r1, sl
 80117d0:	f001 fb0c 	bl	8012dec <__ssprint_r>
 80117d4:	2800      	cmp	r0, #0
 80117d6:	f040 832c 	bne.w	8011e32 <_svfprintf_r+0x1242>
 80117da:	ac21      	add	r4, sp, #132	@ 0x84
 80117dc:	e575      	b.n	80112ca <_svfprintf_r+0x6da>
 80117de:	9802      	ldr	r0, [sp, #8]
 80117e0:	aa1e      	add	r2, sp, #120	@ 0x78
 80117e2:	4651      	mov	r1, sl
 80117e4:	f001 fb02 	bl	8012dec <__ssprint_r>
 80117e8:	2800      	cmp	r0, #0
 80117ea:	f040 8322 	bne.w	8011e32 <_svfprintf_r+0x1242>
 80117ee:	ac21      	add	r4, sp, #132	@ 0x84
 80117f0:	e57b      	b.n	80112ea <_svfprintf_r+0x6fa>
 80117f2:	2110      	movs	r1, #16
 80117f4:	6061      	str	r1, [r4, #4]
 80117f6:	2a07      	cmp	r2, #7
 80117f8:	4461      	add	r1, ip
 80117fa:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 80117fe:	dd0a      	ble.n	8011816 <_svfprintf_r+0xc26>
 8011800:	9802      	ldr	r0, [sp, #8]
 8011802:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011804:	aa1e      	add	r2, sp, #120	@ 0x78
 8011806:	4651      	mov	r1, sl
 8011808:	f001 faf0 	bl	8012dec <__ssprint_r>
 801180c:	2800      	cmp	r0, #0
 801180e:	f040 8310 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011812:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011814:	a821      	add	r0, sp, #132	@ 0x84
 8011816:	3b10      	subs	r3, #16
 8011818:	4604      	mov	r4, r0
 801181a:	e56e      	b.n	80112fa <_svfprintf_r+0x70a>
 801181c:	4604      	mov	r4, r0
 801181e:	e588      	b.n	8011332 <_svfprintf_r+0x742>
 8011820:	2010      	movs	r0, #16
 8011822:	4403      	add	r3, r0
 8011824:	2a07      	cmp	r2, #7
 8011826:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 801182a:	6060      	str	r0, [r4, #4]
 801182c:	dd08      	ble.n	8011840 <_svfprintf_r+0xc50>
 801182e:	9802      	ldr	r0, [sp, #8]
 8011830:	aa1e      	add	r2, sp, #120	@ 0x78
 8011832:	4651      	mov	r1, sl
 8011834:	f001 fada 	bl	8012dec <__ssprint_r>
 8011838:	2800      	cmp	r0, #0
 801183a:	f040 82fa 	bne.w	8011e32 <_svfprintf_r+0x1242>
 801183e:	a921      	add	r1, sp, #132	@ 0x84
 8011840:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011842:	3b10      	subs	r3, #16
 8011844:	930c      	str	r3, [sp, #48]	@ 0x30
 8011846:	460c      	mov	r4, r1
 8011848:	e579      	b.n	801133e <_svfprintf_r+0x74e>
 801184a:	460c      	mov	r4, r1
 801184c:	e594      	b.n	8011378 <_svfprintf_r+0x788>
 801184e:	bf00      	nop
 8011850:	08014789 	.word	0x08014789
 8011854:	08014778 	.word	0x08014778
 8011858:	9a04      	ldr	r2, [sp, #16]
 801185a:	2a65      	cmp	r2, #101	@ 0x65
 801185c:	f340 823e 	ble.w	8011cdc <_svfprintf_r+0x10ec>
 8011860:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011868:	d169      	bne.n	801193e <_svfprintf_r+0xd4e>
 801186a:	4a72      	ldr	r2, [pc, #456]	@ (8011a34 <_svfprintf_r+0xe44>)
 801186c:	6022      	str	r2, [r4, #0]
 801186e:	2201      	movs	r2, #1
 8011870:	4413      	add	r3, r2
 8011872:	9320      	str	r3, [sp, #128]	@ 0x80
 8011874:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011876:	6062      	str	r2, [r4, #4]
 8011878:	4413      	add	r3, r2
 801187a:	2b07      	cmp	r3, #7
 801187c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801187e:	dc37      	bgt.n	80118f0 <_svfprintf_r+0xd00>
 8011880:	3408      	adds	r4, #8
 8011882:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011884:	9a03      	ldr	r2, [sp, #12]
 8011886:	4293      	cmp	r3, r2
 8011888:	db02      	blt.n	8011890 <_svfprintf_r+0xca0>
 801188a:	07ea      	lsls	r2, r5, #31
 801188c:	f57f ad83 	bpl.w	8011396 <_svfprintf_r+0x7a6>
 8011890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011892:	6023      	str	r3, [r4, #0]
 8011894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011898:	6063      	str	r3, [r4, #4]
 801189a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801189c:	4413      	add	r3, r2
 801189e:	9320      	str	r3, [sp, #128]	@ 0x80
 80118a0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80118a2:	3301      	adds	r3, #1
 80118a4:	2b07      	cmp	r3, #7
 80118a6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80118a8:	dc2c      	bgt.n	8011904 <_svfprintf_r+0xd14>
 80118aa:	3408      	adds	r4, #8
 80118ac:	9b03      	ldr	r3, [sp, #12]
 80118ae:	1e5e      	subs	r6, r3, #1
 80118b0:	2e00      	cmp	r6, #0
 80118b2:	f77f ad70 	ble.w	8011396 <_svfprintf_r+0x7a6>
 80118b6:	4f60      	ldr	r7, [pc, #384]	@ (8011a38 <_svfprintf_r+0xe48>)
 80118b8:	f04f 0810 	mov.w	r8, #16
 80118bc:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 80118c0:	2e10      	cmp	r6, #16
 80118c2:	f103 0301 	add.w	r3, r3, #1
 80118c6:	f104 0108 	add.w	r1, r4, #8
 80118ca:	6027      	str	r7, [r4, #0]
 80118cc:	dc24      	bgt.n	8011918 <_svfprintf_r+0xd28>
 80118ce:	6066      	str	r6, [r4, #4]
 80118d0:	2b07      	cmp	r3, #7
 80118d2:	4416      	add	r6, r2
 80118d4:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 80118d8:	f340 828a 	ble.w	8011df0 <_svfprintf_r+0x1200>
 80118dc:	9802      	ldr	r0, [sp, #8]
 80118de:	aa1e      	add	r2, sp, #120	@ 0x78
 80118e0:	4651      	mov	r1, sl
 80118e2:	f001 fa83 	bl	8012dec <__ssprint_r>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	f040 82a3 	bne.w	8011e32 <_svfprintf_r+0x1242>
 80118ec:	ac21      	add	r4, sp, #132	@ 0x84
 80118ee:	e552      	b.n	8011396 <_svfprintf_r+0x7a6>
 80118f0:	9802      	ldr	r0, [sp, #8]
 80118f2:	aa1e      	add	r2, sp, #120	@ 0x78
 80118f4:	4651      	mov	r1, sl
 80118f6:	f001 fa79 	bl	8012dec <__ssprint_r>
 80118fa:	2800      	cmp	r0, #0
 80118fc:	f040 8299 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011900:	ac21      	add	r4, sp, #132	@ 0x84
 8011902:	e7be      	b.n	8011882 <_svfprintf_r+0xc92>
 8011904:	9802      	ldr	r0, [sp, #8]
 8011906:	aa1e      	add	r2, sp, #120	@ 0x78
 8011908:	4651      	mov	r1, sl
 801190a:	f001 fa6f 	bl	8012dec <__ssprint_r>
 801190e:	2800      	cmp	r0, #0
 8011910:	f040 828f 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011914:	ac21      	add	r4, sp, #132	@ 0x84
 8011916:	e7c9      	b.n	80118ac <_svfprintf_r+0xcbc>
 8011918:	3210      	adds	r2, #16
 801191a:	2b07      	cmp	r3, #7
 801191c:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8011920:	f8c4 8004 	str.w	r8, [r4, #4]
 8011924:	dd08      	ble.n	8011938 <_svfprintf_r+0xd48>
 8011926:	9802      	ldr	r0, [sp, #8]
 8011928:	aa1e      	add	r2, sp, #120	@ 0x78
 801192a:	4651      	mov	r1, sl
 801192c:	f001 fa5e 	bl	8012dec <__ssprint_r>
 8011930:	2800      	cmp	r0, #0
 8011932:	f040 827e 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011936:	a921      	add	r1, sp, #132	@ 0x84
 8011938:	3e10      	subs	r6, #16
 801193a:	460c      	mov	r4, r1
 801193c:	e7be      	b.n	80118bc <_svfprintf_r+0xccc>
 801193e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011940:	2a00      	cmp	r2, #0
 8011942:	dc7b      	bgt.n	8011a3c <_svfprintf_r+0xe4c>
 8011944:	4a3b      	ldr	r2, [pc, #236]	@ (8011a34 <_svfprintf_r+0xe44>)
 8011946:	6022      	str	r2, [r4, #0]
 8011948:	2201      	movs	r2, #1
 801194a:	4413      	add	r3, r2
 801194c:	9320      	str	r3, [sp, #128]	@ 0x80
 801194e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011950:	6062      	str	r2, [r4, #4]
 8011952:	4413      	add	r3, r2
 8011954:	2b07      	cmp	r3, #7
 8011956:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011958:	dc46      	bgt.n	80119e8 <_svfprintf_r+0xdf8>
 801195a:	3408      	adds	r4, #8
 801195c:	9903      	ldr	r1, [sp, #12]
 801195e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011960:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011962:	430b      	orrs	r3, r1
 8011964:	f005 0101 	and.w	r1, r5, #1
 8011968:	430b      	orrs	r3, r1
 801196a:	f43f ad14 	beq.w	8011396 <_svfprintf_r+0x7a6>
 801196e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011970:	6023      	str	r3, [r4, #0]
 8011972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011974:	6063      	str	r3, [r4, #4]
 8011976:	441a      	add	r2, r3
 8011978:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801197a:	9220      	str	r2, [sp, #128]	@ 0x80
 801197c:	3301      	adds	r3, #1
 801197e:	2b07      	cmp	r3, #7
 8011980:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011982:	dc3b      	bgt.n	80119fc <_svfprintf_r+0xe0c>
 8011984:	f104 0308 	add.w	r3, r4, #8
 8011988:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 801198a:	2e00      	cmp	r6, #0
 801198c:	da1b      	bge.n	80119c6 <_svfprintf_r+0xdd6>
 801198e:	4f2a      	ldr	r7, [pc, #168]	@ (8011a38 <_svfprintf_r+0xe48>)
 8011990:	4276      	negs	r6, r6
 8011992:	461a      	mov	r2, r3
 8011994:	2410      	movs	r4, #16
 8011996:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 801199a:	2e10      	cmp	r6, #16
 801199c:	f101 0101 	add.w	r1, r1, #1
 80119a0:	f103 0308 	add.w	r3, r3, #8
 80119a4:	6017      	str	r7, [r2, #0]
 80119a6:	dc33      	bgt.n	8011a10 <_svfprintf_r+0xe20>
 80119a8:	6056      	str	r6, [r2, #4]
 80119aa:	2907      	cmp	r1, #7
 80119ac:	4406      	add	r6, r0
 80119ae:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 80119b2:	dd08      	ble.n	80119c6 <_svfprintf_r+0xdd6>
 80119b4:	9802      	ldr	r0, [sp, #8]
 80119b6:	aa1e      	add	r2, sp, #120	@ 0x78
 80119b8:	4651      	mov	r1, sl
 80119ba:	f001 fa17 	bl	8012dec <__ssprint_r>
 80119be:	2800      	cmp	r0, #0
 80119c0:	f040 8237 	bne.w	8011e32 <_svfprintf_r+0x1242>
 80119c4:	ab21      	add	r3, sp, #132	@ 0x84
 80119c6:	9a03      	ldr	r2, [sp, #12]
 80119c8:	605a      	str	r2, [r3, #4]
 80119ca:	9903      	ldr	r1, [sp, #12]
 80119cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80119ce:	f8c3 9000 	str.w	r9, [r3]
 80119d2:	440a      	add	r2, r1
 80119d4:	9220      	str	r2, [sp, #128]	@ 0x80
 80119d6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80119d8:	3201      	adds	r2, #1
 80119da:	2a07      	cmp	r2, #7
 80119dc:	921f      	str	r2, [sp, #124]	@ 0x7c
 80119de:	f73f af7d 	bgt.w	80118dc <_svfprintf_r+0xcec>
 80119e2:	f103 0408 	add.w	r4, r3, #8
 80119e6:	e4d6      	b.n	8011396 <_svfprintf_r+0x7a6>
 80119e8:	9802      	ldr	r0, [sp, #8]
 80119ea:	aa1e      	add	r2, sp, #120	@ 0x78
 80119ec:	4651      	mov	r1, sl
 80119ee:	f001 f9fd 	bl	8012dec <__ssprint_r>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	f040 821d 	bne.w	8011e32 <_svfprintf_r+0x1242>
 80119f8:	ac21      	add	r4, sp, #132	@ 0x84
 80119fa:	e7af      	b.n	801195c <_svfprintf_r+0xd6c>
 80119fc:	9802      	ldr	r0, [sp, #8]
 80119fe:	aa1e      	add	r2, sp, #120	@ 0x78
 8011a00:	4651      	mov	r1, sl
 8011a02:	f001 f9f3 	bl	8012dec <__ssprint_r>
 8011a06:	2800      	cmp	r0, #0
 8011a08:	f040 8213 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011a0c:	ab21      	add	r3, sp, #132	@ 0x84
 8011a0e:	e7bb      	b.n	8011988 <_svfprintf_r+0xd98>
 8011a10:	3010      	adds	r0, #16
 8011a12:	2907      	cmp	r1, #7
 8011a14:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 8011a18:	6054      	str	r4, [r2, #4]
 8011a1a:	dd08      	ble.n	8011a2e <_svfprintf_r+0xe3e>
 8011a1c:	9802      	ldr	r0, [sp, #8]
 8011a1e:	aa1e      	add	r2, sp, #120	@ 0x78
 8011a20:	4651      	mov	r1, sl
 8011a22:	f001 f9e3 	bl	8012dec <__ssprint_r>
 8011a26:	2800      	cmp	r0, #0
 8011a28:	f040 8203 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011a2c:	ab21      	add	r3, sp, #132	@ 0x84
 8011a2e:	3e10      	subs	r6, #16
 8011a30:	461a      	mov	r2, r3
 8011a32:	e7b0      	b.n	8011996 <_svfprintf_r+0xda6>
 8011a34:	080148d2 	.word	0x080148d2
 8011a38:	0801494d 	.word	0x0801494d
 8011a3c:	9a03      	ldr	r2, [sp, #12]
 8011a3e:	444a      	add	r2, r9
 8011a40:	9204      	str	r2, [sp, #16]
 8011a42:	9a03      	ldr	r2, [sp, #12]
 8011a44:	42b2      	cmp	r2, r6
 8011a46:	bfa8      	it	ge
 8011a48:	4632      	movge	r2, r6
 8011a4a:	2a00      	cmp	r2, #0
 8011a4c:	4690      	mov	r8, r2
 8011a4e:	dd0a      	ble.n	8011a66 <_svfprintf_r+0xe76>
 8011a50:	4413      	add	r3, r2
 8011a52:	9320      	str	r3, [sp, #128]	@ 0x80
 8011a54:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011a56:	3301      	adds	r3, #1
 8011a58:	2b07      	cmp	r3, #7
 8011a5a:	e9c4 9200 	strd	r9, r2, [r4]
 8011a5e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011a60:	f300 8089 	bgt.w	8011b76 <_svfprintf_r+0xf86>
 8011a64:	3408      	adds	r4, #8
 8011a66:	4643      	mov	r3, r8
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	bfac      	ite	ge
 8011a6c:	eba6 0808 	subge.w	r8, r6, r8
 8011a70:	46b0      	movlt	r8, r6
 8011a72:	f1b8 0f00 	cmp.w	r8, #0
 8011a76:	dd1b      	ble.n	8011ab0 <_svfprintf_r+0xec0>
 8011a78:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 8011a7c:	4896      	ldr	r0, [pc, #600]	@ (8011cd8 <_svfprintf_r+0x10e8>)
 8011a7e:	6020      	str	r0, [r4, #0]
 8011a80:	f1b8 0f10 	cmp.w	r8, #16
 8011a84:	f102 0201 	add.w	r2, r2, #1
 8011a88:	f104 0108 	add.w	r1, r4, #8
 8011a8c:	dc7d      	bgt.n	8011b8a <_svfprintf_r+0xf9a>
 8011a8e:	4443      	add	r3, r8
 8011a90:	2a07      	cmp	r2, #7
 8011a92:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8011a96:	f8c4 8004 	str.w	r8, [r4, #4]
 8011a9a:	f340 808a 	ble.w	8011bb2 <_svfprintf_r+0xfc2>
 8011a9e:	9802      	ldr	r0, [sp, #8]
 8011aa0:	aa1e      	add	r2, sp, #120	@ 0x78
 8011aa2:	4651      	mov	r1, sl
 8011aa4:	f001 f9a2 	bl	8012dec <__ssprint_r>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	f040 81c2 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011aae:	ac21      	add	r4, sp, #132	@ 0x84
 8011ab0:	056b      	lsls	r3, r5, #21
 8011ab2:	eb09 0806 	add.w	r8, r9, r6
 8011ab6:	d508      	bpl.n	8011aca <_svfprintf_r+0xeda>
 8011ab8:	9b06      	ldr	r3, [sp, #24]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d17b      	bne.n	8011bb6 <_svfprintf_r+0xfc6>
 8011abe:	2f00      	cmp	r7, #0
 8011ac0:	d17b      	bne.n	8011bba <_svfprintf_r+0xfca>
 8011ac2:	9b04      	ldr	r3, [sp, #16]
 8011ac4:	4598      	cmp	r8, r3
 8011ac6:	bf28      	it	cs
 8011ac8:	4698      	movcs	r8, r3
 8011aca:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011acc:	9a03      	ldr	r2, [sp, #12]
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	db01      	blt.n	8011ad6 <_svfprintf_r+0xee6>
 8011ad2:	07ee      	lsls	r6, r5, #31
 8011ad4:	d50e      	bpl.n	8011af4 <_svfprintf_r+0xf04>
 8011ad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ad8:	6023      	str	r3, [r4, #0]
 8011ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011adc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ade:	6063      	str	r3, [r4, #4]
 8011ae0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011ae2:	4413      	add	r3, r2
 8011ae4:	9320      	str	r3, [sp, #128]	@ 0x80
 8011ae6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011ae8:	3301      	adds	r3, #1
 8011aea:	2b07      	cmp	r3, #7
 8011aec:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011aee:	f300 80df 	bgt.w	8011cb0 <_svfprintf_r+0x10c0>
 8011af2:	3408      	adds	r4, #8
 8011af4:	9b03      	ldr	r3, [sp, #12]
 8011af6:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8011af8:	1bdf      	subs	r7, r3, r7
 8011afa:	9b04      	ldr	r3, [sp, #16]
 8011afc:	eba3 0308 	sub.w	r3, r3, r8
 8011b00:	429f      	cmp	r7, r3
 8011b02:	bfa8      	it	ge
 8011b04:	461f      	movge	r7, r3
 8011b06:	2f00      	cmp	r7, #0
 8011b08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011b0a:	dd0a      	ble.n	8011b22 <_svfprintf_r+0xf32>
 8011b0c:	443b      	add	r3, r7
 8011b0e:	9320      	str	r3, [sp, #128]	@ 0x80
 8011b10:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011b12:	3301      	adds	r3, #1
 8011b14:	2b07      	cmp	r3, #7
 8011b16:	e9c4 8700 	strd	r8, r7, [r4]
 8011b1a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011b1c:	f300 80d2 	bgt.w	8011cc4 <_svfprintf_r+0x10d4>
 8011b20:	3408      	adds	r4, #8
 8011b22:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8011b24:	9b03      	ldr	r3, [sp, #12]
 8011b26:	2f00      	cmp	r7, #0
 8011b28:	eba3 0606 	sub.w	r6, r3, r6
 8011b2c:	bfa8      	it	ge
 8011b2e:	1bf6      	subge	r6, r6, r7
 8011b30:	2e00      	cmp	r6, #0
 8011b32:	f77f ac30 	ble.w	8011396 <_svfprintf_r+0x7a6>
 8011b36:	4f68      	ldr	r7, [pc, #416]	@ (8011cd8 <_svfprintf_r+0x10e8>)
 8011b38:	f04f 0810 	mov.w	r8, #16
 8011b3c:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8011b40:	2e10      	cmp	r6, #16
 8011b42:	f103 0301 	add.w	r3, r3, #1
 8011b46:	f104 0108 	add.w	r1, r4, #8
 8011b4a:	6027      	str	r7, [r4, #0]
 8011b4c:	f77f aebf 	ble.w	80118ce <_svfprintf_r+0xcde>
 8011b50:	3210      	adds	r2, #16
 8011b52:	2b07      	cmp	r3, #7
 8011b54:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8011b58:	f8c4 8004 	str.w	r8, [r4, #4]
 8011b5c:	dd08      	ble.n	8011b70 <_svfprintf_r+0xf80>
 8011b5e:	9802      	ldr	r0, [sp, #8]
 8011b60:	aa1e      	add	r2, sp, #120	@ 0x78
 8011b62:	4651      	mov	r1, sl
 8011b64:	f001 f942 	bl	8012dec <__ssprint_r>
 8011b68:	2800      	cmp	r0, #0
 8011b6a:	f040 8162 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011b6e:	a921      	add	r1, sp, #132	@ 0x84
 8011b70:	3e10      	subs	r6, #16
 8011b72:	460c      	mov	r4, r1
 8011b74:	e7e2      	b.n	8011b3c <_svfprintf_r+0xf4c>
 8011b76:	9802      	ldr	r0, [sp, #8]
 8011b78:	aa1e      	add	r2, sp, #120	@ 0x78
 8011b7a:	4651      	mov	r1, sl
 8011b7c:	f001 f936 	bl	8012dec <__ssprint_r>
 8011b80:	2800      	cmp	r0, #0
 8011b82:	f040 8156 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011b86:	ac21      	add	r4, sp, #132	@ 0x84
 8011b88:	e76d      	b.n	8011a66 <_svfprintf_r+0xe76>
 8011b8a:	2010      	movs	r0, #16
 8011b8c:	4403      	add	r3, r0
 8011b8e:	2a07      	cmp	r2, #7
 8011b90:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8011b94:	6060      	str	r0, [r4, #4]
 8011b96:	dd08      	ble.n	8011baa <_svfprintf_r+0xfba>
 8011b98:	9802      	ldr	r0, [sp, #8]
 8011b9a:	aa1e      	add	r2, sp, #120	@ 0x78
 8011b9c:	4651      	mov	r1, sl
 8011b9e:	f001 f925 	bl	8012dec <__ssprint_r>
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	f040 8145 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011ba8:	a921      	add	r1, sp, #132	@ 0x84
 8011baa:	f1a8 0810 	sub.w	r8, r8, #16
 8011bae:	460c      	mov	r4, r1
 8011bb0:	e762      	b.n	8011a78 <_svfprintf_r+0xe88>
 8011bb2:	460c      	mov	r4, r1
 8011bb4:	e77c      	b.n	8011ab0 <_svfprintf_r+0xec0>
 8011bb6:	2f00      	cmp	r7, #0
 8011bb8:	d04a      	beq.n	8011c50 <_svfprintf_r+0x1060>
 8011bba:	3f01      	subs	r7, #1
 8011bbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011bbe:	6023      	str	r3, [r4, #0]
 8011bc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011bc4:	6063      	str	r3, [r4, #4]
 8011bc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011bc8:	4413      	add	r3, r2
 8011bca:	9320      	str	r3, [sp, #128]	@ 0x80
 8011bcc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011bce:	3301      	adds	r3, #1
 8011bd0:	2b07      	cmp	r3, #7
 8011bd2:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011bd4:	dc43      	bgt.n	8011c5e <_svfprintf_r+0x106e>
 8011bd6:	3408      	adds	r4, #8
 8011bd8:	9b07      	ldr	r3, [sp, #28]
 8011bda:	781a      	ldrb	r2, [r3, #0]
 8011bdc:	9b04      	ldr	r3, [sp, #16]
 8011bde:	eba3 0308 	sub.w	r3, r3, r8
 8011be2:	429a      	cmp	r2, r3
 8011be4:	bfa8      	it	ge
 8011be6:	461a      	movge	r2, r3
 8011be8:	2a00      	cmp	r2, #0
 8011bea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011bec:	4691      	mov	r9, r2
 8011bee:	dd09      	ble.n	8011c04 <_svfprintf_r+0x1014>
 8011bf0:	4413      	add	r3, r2
 8011bf2:	9320      	str	r3, [sp, #128]	@ 0x80
 8011bf4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	2b07      	cmp	r3, #7
 8011bfa:	e9c4 8200 	strd	r8, r2, [r4]
 8011bfe:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011c00:	dc37      	bgt.n	8011c72 <_svfprintf_r+0x1082>
 8011c02:	3408      	adds	r4, #8
 8011c04:	9b07      	ldr	r3, [sp, #28]
 8011c06:	781e      	ldrb	r6, [r3, #0]
 8011c08:	f1b9 0f00 	cmp.w	r9, #0
 8011c0c:	bfa8      	it	ge
 8011c0e:	eba6 0609 	subge.w	r6, r6, r9
 8011c12:	2e00      	cmp	r6, #0
 8011c14:	dd18      	ble.n	8011c48 <_svfprintf_r+0x1058>
 8011c16:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8011c1a:	482f      	ldr	r0, [pc, #188]	@ (8011cd8 <_svfprintf_r+0x10e8>)
 8011c1c:	6020      	str	r0, [r4, #0]
 8011c1e:	2e10      	cmp	r6, #16
 8011c20:	f103 0301 	add.w	r3, r3, #1
 8011c24:	f104 0108 	add.w	r1, r4, #8
 8011c28:	dc2d      	bgt.n	8011c86 <_svfprintf_r+0x1096>
 8011c2a:	6066      	str	r6, [r4, #4]
 8011c2c:	2b07      	cmp	r3, #7
 8011c2e:	4416      	add	r6, r2
 8011c30:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 8011c34:	dd3a      	ble.n	8011cac <_svfprintf_r+0x10bc>
 8011c36:	9802      	ldr	r0, [sp, #8]
 8011c38:	aa1e      	add	r2, sp, #120	@ 0x78
 8011c3a:	4651      	mov	r1, sl
 8011c3c:	f001 f8d6 	bl	8012dec <__ssprint_r>
 8011c40:	2800      	cmp	r0, #0
 8011c42:	f040 80f6 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011c46:	ac21      	add	r4, sp, #132	@ 0x84
 8011c48:	9b07      	ldr	r3, [sp, #28]
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	4498      	add	r8, r3
 8011c4e:	e733      	b.n	8011ab8 <_svfprintf_r+0xec8>
 8011c50:	9b07      	ldr	r3, [sp, #28]
 8011c52:	3b01      	subs	r3, #1
 8011c54:	9307      	str	r3, [sp, #28]
 8011c56:	9b06      	ldr	r3, [sp, #24]
 8011c58:	3b01      	subs	r3, #1
 8011c5a:	9306      	str	r3, [sp, #24]
 8011c5c:	e7ae      	b.n	8011bbc <_svfprintf_r+0xfcc>
 8011c5e:	9802      	ldr	r0, [sp, #8]
 8011c60:	aa1e      	add	r2, sp, #120	@ 0x78
 8011c62:	4651      	mov	r1, sl
 8011c64:	f001 f8c2 	bl	8012dec <__ssprint_r>
 8011c68:	2800      	cmp	r0, #0
 8011c6a:	f040 80e2 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011c6e:	ac21      	add	r4, sp, #132	@ 0x84
 8011c70:	e7b2      	b.n	8011bd8 <_svfprintf_r+0xfe8>
 8011c72:	9802      	ldr	r0, [sp, #8]
 8011c74:	aa1e      	add	r2, sp, #120	@ 0x78
 8011c76:	4651      	mov	r1, sl
 8011c78:	f001 f8b8 	bl	8012dec <__ssprint_r>
 8011c7c:	2800      	cmp	r0, #0
 8011c7e:	f040 80d8 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011c82:	ac21      	add	r4, sp, #132	@ 0x84
 8011c84:	e7be      	b.n	8011c04 <_svfprintf_r+0x1014>
 8011c86:	2010      	movs	r0, #16
 8011c88:	4402      	add	r2, r0
 8011c8a:	2b07      	cmp	r3, #7
 8011c8c:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8011c90:	6060      	str	r0, [r4, #4]
 8011c92:	dd08      	ble.n	8011ca6 <_svfprintf_r+0x10b6>
 8011c94:	9802      	ldr	r0, [sp, #8]
 8011c96:	aa1e      	add	r2, sp, #120	@ 0x78
 8011c98:	4651      	mov	r1, sl
 8011c9a:	f001 f8a7 	bl	8012dec <__ssprint_r>
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	f040 80c7 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011ca4:	a921      	add	r1, sp, #132	@ 0x84
 8011ca6:	3e10      	subs	r6, #16
 8011ca8:	460c      	mov	r4, r1
 8011caa:	e7b4      	b.n	8011c16 <_svfprintf_r+0x1026>
 8011cac:	460c      	mov	r4, r1
 8011cae:	e7cb      	b.n	8011c48 <_svfprintf_r+0x1058>
 8011cb0:	9802      	ldr	r0, [sp, #8]
 8011cb2:	aa1e      	add	r2, sp, #120	@ 0x78
 8011cb4:	4651      	mov	r1, sl
 8011cb6:	f001 f899 	bl	8012dec <__ssprint_r>
 8011cba:	2800      	cmp	r0, #0
 8011cbc:	f040 80b9 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011cc0:	ac21      	add	r4, sp, #132	@ 0x84
 8011cc2:	e717      	b.n	8011af4 <_svfprintf_r+0xf04>
 8011cc4:	9802      	ldr	r0, [sp, #8]
 8011cc6:	aa1e      	add	r2, sp, #120	@ 0x78
 8011cc8:	4651      	mov	r1, sl
 8011cca:	f001 f88f 	bl	8012dec <__ssprint_r>
 8011cce:	2800      	cmp	r0, #0
 8011cd0:	f040 80af 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011cd4:	ac21      	add	r4, sp, #132	@ 0x84
 8011cd6:	e724      	b.n	8011b22 <_svfprintf_r+0xf32>
 8011cd8:	0801494d 	.word	0x0801494d
 8011cdc:	9803      	ldr	r0, [sp, #12]
 8011cde:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8011ce0:	2801      	cmp	r0, #1
 8011ce2:	f103 0201 	add.w	r2, r3, #1
 8011ce6:	f101 0101 	add.w	r1, r1, #1
 8011cea:	f104 0308 	add.w	r3, r4, #8
 8011cee:	dc01      	bgt.n	8011cf4 <_svfprintf_r+0x1104>
 8011cf0:	07e8      	lsls	r0, r5, #31
 8011cf2:	d572      	bpl.n	8011dda <_svfprintf_r+0x11ea>
 8011cf4:	2001      	movs	r0, #1
 8011cf6:	2907      	cmp	r1, #7
 8011cf8:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8011cfc:	f8c4 9000 	str.w	r9, [r4]
 8011d00:	6060      	str	r0, [r4, #4]
 8011d02:	dd08      	ble.n	8011d16 <_svfprintf_r+0x1126>
 8011d04:	9802      	ldr	r0, [sp, #8]
 8011d06:	aa1e      	add	r2, sp, #120	@ 0x78
 8011d08:	4651      	mov	r1, sl
 8011d0a:	f001 f86f 	bl	8012dec <__ssprint_r>
 8011d0e:	2800      	cmp	r0, #0
 8011d10:	f040 808f 	bne.w	8011e32 <_svfprintf_r+0x1242>
 8011d14:	ab21      	add	r3, sp, #132	@ 0x84
 8011d16:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011d18:	601a      	str	r2, [r3, #0]
 8011d1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011d1e:	605a      	str	r2, [r3, #4]
 8011d20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011d22:	440a      	add	r2, r1
 8011d24:	9220      	str	r2, [sp, #128]	@ 0x80
 8011d26:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8011d28:	3201      	adds	r2, #1
 8011d2a:	2a07      	cmp	r2, #7
 8011d2c:	921f      	str	r2, [sp, #124]	@ 0x7c
 8011d2e:	dc25      	bgt.n	8011d7c <_svfprintf_r+0x118c>
 8011d30:	3308      	adds	r3, #8
 8011d32:	9803      	ldr	r0, [sp, #12]
 8011d34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d3c:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 8011d40:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8011d44:	d023      	beq.n	8011d8e <_svfprintf_r+0x119e>
 8011d46:	f109 0001 	add.w	r0, r9, #1
 8011d4a:	e9c3 0400 	strd	r0, r4, [r3]
 8011d4e:	9803      	ldr	r0, [sp, #12]
 8011d50:	3101      	adds	r1, #1
 8011d52:	3a01      	subs	r2, #1
 8011d54:	4402      	add	r2, r0
 8011d56:	2907      	cmp	r1, #7
 8011d58:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8011d5c:	dd46      	ble.n	8011dec <_svfprintf_r+0x11fc>
 8011d5e:	9802      	ldr	r0, [sp, #8]
 8011d60:	aa1e      	add	r2, sp, #120	@ 0x78
 8011d62:	4651      	mov	r1, sl
 8011d64:	f001 f842 	bl	8012dec <__ssprint_r>
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	d162      	bne.n	8011e32 <_svfprintf_r+0x1242>
 8011d6c:	ab21      	add	r3, sp, #132	@ 0x84
 8011d6e:	aa1a      	add	r2, sp, #104	@ 0x68
 8011d70:	601a      	str	r2, [r3, #0]
 8011d72:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011d74:	605a      	str	r2, [r3, #4]
 8011d76:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011d78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011d7a:	e62a      	b.n	80119d2 <_svfprintf_r+0xde2>
 8011d7c:	9802      	ldr	r0, [sp, #8]
 8011d7e:	aa1e      	add	r2, sp, #120	@ 0x78
 8011d80:	4651      	mov	r1, sl
 8011d82:	f001 f833 	bl	8012dec <__ssprint_r>
 8011d86:	2800      	cmp	r0, #0
 8011d88:	d153      	bne.n	8011e32 <_svfprintf_r+0x1242>
 8011d8a:	ab21      	add	r3, sp, #132	@ 0x84
 8011d8c:	e7d1      	b.n	8011d32 <_svfprintf_r+0x1142>
 8011d8e:	9a03      	ldr	r2, [sp, #12]
 8011d90:	2a01      	cmp	r2, #1
 8011d92:	ddec      	ble.n	8011d6e <_svfprintf_r+0x117e>
 8011d94:	4e56      	ldr	r6, [pc, #344]	@ (8011ef0 <_svfprintf_r+0x1300>)
 8011d96:	2710      	movs	r7, #16
 8011d98:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 8011d9c:	2c10      	cmp	r4, #16
 8011d9e:	f102 0201 	add.w	r2, r2, #1
 8011da2:	f103 0008 	add.w	r0, r3, #8
 8011da6:	601e      	str	r6, [r3, #0]
 8011da8:	dc07      	bgt.n	8011dba <_svfprintf_r+0x11ca>
 8011daa:	605c      	str	r4, [r3, #4]
 8011dac:	2a07      	cmp	r2, #7
 8011dae:	440c      	add	r4, r1
 8011db0:	e9cd 241f 	strd	r2, r4, [sp, #124]	@ 0x7c
 8011db4:	dcd3      	bgt.n	8011d5e <_svfprintf_r+0x116e>
 8011db6:	4603      	mov	r3, r0
 8011db8:	e7d9      	b.n	8011d6e <_svfprintf_r+0x117e>
 8011dba:	3110      	adds	r1, #16
 8011dbc:	2a07      	cmp	r2, #7
 8011dbe:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8011dc2:	605f      	str	r7, [r3, #4]
 8011dc4:	dd06      	ble.n	8011dd4 <_svfprintf_r+0x11e4>
 8011dc6:	9802      	ldr	r0, [sp, #8]
 8011dc8:	aa1e      	add	r2, sp, #120	@ 0x78
 8011dca:	4651      	mov	r1, sl
 8011dcc:	f001 f80e 	bl	8012dec <__ssprint_r>
 8011dd0:	bb78      	cbnz	r0, 8011e32 <_svfprintf_r+0x1242>
 8011dd2:	a821      	add	r0, sp, #132	@ 0x84
 8011dd4:	3c10      	subs	r4, #16
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	e7de      	b.n	8011d98 <_svfprintf_r+0x11a8>
 8011dda:	2001      	movs	r0, #1
 8011ddc:	2907      	cmp	r1, #7
 8011dde:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8011de2:	f8c4 9000 	str.w	r9, [r4]
 8011de6:	6060      	str	r0, [r4, #4]
 8011de8:	ddc1      	ble.n	8011d6e <_svfprintf_r+0x117e>
 8011dea:	e7b8      	b.n	8011d5e <_svfprintf_r+0x116e>
 8011dec:	3308      	adds	r3, #8
 8011dee:	e7be      	b.n	8011d6e <_svfprintf_r+0x117e>
 8011df0:	460c      	mov	r4, r1
 8011df2:	f7ff bad0 	b.w	8011396 <_svfprintf_r+0x7a6>
 8011df6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011df8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011dfa:	1a9d      	subs	r5, r3, r2
 8011dfc:	2d00      	cmp	r5, #0
 8011dfe:	f77f aacd 	ble.w	801139c <_svfprintf_r+0x7ac>
 8011e02:	4e3c      	ldr	r6, [pc, #240]	@ (8011ef4 <_svfprintf_r+0x1304>)
 8011e04:	2710      	movs	r7, #16
 8011e06:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8011e0a:	2d10      	cmp	r5, #16
 8011e0c:	f103 0301 	add.w	r3, r3, #1
 8011e10:	6026      	str	r6, [r4, #0]
 8011e12:	dc18      	bgt.n	8011e46 <_svfprintf_r+0x1256>
 8011e14:	442a      	add	r2, r5
 8011e16:	2b07      	cmp	r3, #7
 8011e18:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8011e1c:	6065      	str	r5, [r4, #4]
 8011e1e:	f77f aabd 	ble.w	801139c <_svfprintf_r+0x7ac>
 8011e22:	9802      	ldr	r0, [sp, #8]
 8011e24:	aa1e      	add	r2, sp, #120	@ 0x78
 8011e26:	4651      	mov	r1, sl
 8011e28:	f000 ffe0 	bl	8012dec <__ssprint_r>
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	f43f aab5 	beq.w	801139c <_svfprintf_r+0x7ac>
 8011e32:	f1bb 0f00 	cmp.w	fp, #0
 8011e36:	f43f a8e0 	beq.w	8010ffa <_svfprintf_r+0x40a>
 8011e3a:	9802      	ldr	r0, [sp, #8]
 8011e3c:	4659      	mov	r1, fp
 8011e3e:	f7fe fbcb 	bl	80105d8 <_free_r>
 8011e42:	f7ff b8da 	b.w	8010ffa <_svfprintf_r+0x40a>
 8011e46:	3210      	adds	r2, #16
 8011e48:	2b07      	cmp	r3, #7
 8011e4a:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8011e4e:	6067      	str	r7, [r4, #4]
 8011e50:	dc02      	bgt.n	8011e58 <_svfprintf_r+0x1268>
 8011e52:	3408      	adds	r4, #8
 8011e54:	3d10      	subs	r5, #16
 8011e56:	e7d6      	b.n	8011e06 <_svfprintf_r+0x1216>
 8011e58:	9802      	ldr	r0, [sp, #8]
 8011e5a:	aa1e      	add	r2, sp, #120	@ 0x78
 8011e5c:	4651      	mov	r1, sl
 8011e5e:	f000 ffc5 	bl	8012dec <__ssprint_r>
 8011e62:	2800      	cmp	r0, #0
 8011e64:	d1e5      	bne.n	8011e32 <_svfprintf_r+0x1242>
 8011e66:	ac21      	add	r4, sp, #132	@ 0x84
 8011e68:	e7f4      	b.n	8011e54 <_svfprintf_r+0x1264>
 8011e6a:	9802      	ldr	r0, [sp, #8]
 8011e6c:	4659      	mov	r1, fp
 8011e6e:	f7fe fbb3 	bl	80105d8 <_free_r>
 8011e72:	f7ff baab 	b.w	80113cc <_svfprintf_r+0x7dc>
 8011e76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f43f a8be 	beq.w	8010ffa <_svfprintf_r+0x40a>
 8011e7e:	9802      	ldr	r0, [sp, #8]
 8011e80:	aa1e      	add	r2, sp, #120	@ 0x78
 8011e82:	4651      	mov	r1, sl
 8011e84:	f000 ffb2 	bl	8012dec <__ssprint_r>
 8011e88:	f7ff b8b7 	b.w	8010ffa <_svfprintf_r+0x40a>
 8011e8c:	ea56 0207 	orrs.w	r2, r6, r7
 8011e90:	9506      	str	r5, [sp, #24]
 8011e92:	f43f ab93 	beq.w	80115bc <_svfprintf_r+0x9cc>
 8011e96:	2b01      	cmp	r3, #1
 8011e98:	f43f ac14 	beq.w	80116c4 <_svfprintf_r+0xad4>
 8011e9c:	2b02      	cmp	r3, #2
 8011e9e:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 8011ea2:	f43f ac59 	beq.w	8011758 <_svfprintf_r+0xb68>
 8011ea6:	f006 0307 	and.w	r3, r6, #7
 8011eaa:	08f6      	lsrs	r6, r6, #3
 8011eac:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8011eb0:	08ff      	lsrs	r7, r7, #3
 8011eb2:	3330      	adds	r3, #48	@ 0x30
 8011eb4:	ea56 0107 	orrs.w	r1, r6, r7
 8011eb8:	464a      	mov	r2, r9
 8011eba:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011ebe:	d1f2      	bne.n	8011ea6 <_svfprintf_r+0x12b6>
 8011ec0:	9906      	ldr	r1, [sp, #24]
 8011ec2:	07cd      	lsls	r5, r1, #31
 8011ec4:	d506      	bpl.n	8011ed4 <_svfprintf_r+0x12e4>
 8011ec6:	2b30      	cmp	r3, #48	@ 0x30
 8011ec8:	d004      	beq.n	8011ed4 <_svfprintf_r+0x12e4>
 8011eca:	2330      	movs	r3, #48	@ 0x30
 8011ecc:	f809 3c01 	strb.w	r3, [r9, #-1]
 8011ed0:	f1a2 0902 	sub.w	r9, r2, #2
 8011ed4:	ab4a      	add	r3, sp, #296	@ 0x128
 8011ed6:	9d06      	ldr	r5, [sp, #24]
 8011ed8:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8011edc:	f04f 0b00 	mov.w	fp, #0
 8011ee0:	eba3 0809 	sub.w	r8, r3, r9
 8011ee4:	465f      	mov	r7, fp
 8011ee6:	f8cd b018 	str.w	fp, [sp, #24]
 8011eea:	465e      	mov	r6, fp
 8011eec:	f7ff b9a4 	b.w	8011238 <_svfprintf_r+0x648>
 8011ef0:	0801494d 	.word	0x0801494d
 8011ef4:	0801495d 	.word	0x0801495d

08011ef8 <__swhatbuf_r>:
 8011ef8:	b570      	push	{r4, r5, r6, lr}
 8011efa:	460c      	mov	r4, r1
 8011efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f00:	2900      	cmp	r1, #0
 8011f02:	b096      	sub	sp, #88	@ 0x58
 8011f04:	4615      	mov	r5, r2
 8011f06:	461e      	mov	r6, r3
 8011f08:	da07      	bge.n	8011f1a <__swhatbuf_r+0x22>
 8011f0a:	89a1      	ldrh	r1, [r4, #12]
 8011f0c:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8011f10:	d117      	bne.n	8011f42 <__swhatbuf_r+0x4a>
 8011f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f16:	4608      	mov	r0, r1
 8011f18:	e00f      	b.n	8011f3a <__swhatbuf_r+0x42>
 8011f1a:	466a      	mov	r2, sp
 8011f1c:	f000 fe38 	bl	8012b90 <_fstat_r>
 8011f20:	2800      	cmp	r0, #0
 8011f22:	dbf2      	blt.n	8011f0a <__swhatbuf_r+0x12>
 8011f24:	9901      	ldr	r1, [sp, #4]
 8011f26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011f2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011f2e:	4259      	negs	r1, r3
 8011f30:	4159      	adcs	r1, r3
 8011f32:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8011f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f3a:	6031      	str	r1, [r6, #0]
 8011f3c:	602b      	str	r3, [r5, #0]
 8011f3e:	b016      	add	sp, #88	@ 0x58
 8011f40:	bd70      	pop	{r4, r5, r6, pc}
 8011f42:	2100      	movs	r1, #0
 8011f44:	2340      	movs	r3, #64	@ 0x40
 8011f46:	e7e6      	b.n	8011f16 <__swhatbuf_r+0x1e>

08011f48 <__smakebuf_r>:
 8011f48:	898b      	ldrh	r3, [r1, #12]
 8011f4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f4c:	079d      	lsls	r5, r3, #30
 8011f4e:	4606      	mov	r6, r0
 8011f50:	460c      	mov	r4, r1
 8011f52:	d507      	bpl.n	8011f64 <__smakebuf_r+0x1c>
 8011f54:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8011f58:	6023      	str	r3, [r4, #0]
 8011f5a:	6123      	str	r3, [r4, #16]
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	6163      	str	r3, [r4, #20]
 8011f60:	b003      	add	sp, #12
 8011f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f64:	ab01      	add	r3, sp, #4
 8011f66:	466a      	mov	r2, sp
 8011f68:	f7ff ffc6 	bl	8011ef8 <__swhatbuf_r>
 8011f6c:	9f00      	ldr	r7, [sp, #0]
 8011f6e:	4605      	mov	r5, r0
 8011f70:	4639      	mov	r1, r7
 8011f72:	4630      	mov	r0, r6
 8011f74:	f7fe fbf0 	bl	8010758 <_malloc_r>
 8011f78:	b948      	cbnz	r0, 8011f8e <__smakebuf_r+0x46>
 8011f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f7e:	059a      	lsls	r2, r3, #22
 8011f80:	d4ee      	bmi.n	8011f60 <__smakebuf_r+0x18>
 8011f82:	f023 0303 	bic.w	r3, r3, #3
 8011f86:	f043 0302 	orr.w	r3, r3, #2
 8011f8a:	81a3      	strh	r3, [r4, #12]
 8011f8c:	e7e2      	b.n	8011f54 <__smakebuf_r+0xc>
 8011f8e:	89a3      	ldrh	r3, [r4, #12]
 8011f90:	6020      	str	r0, [r4, #0]
 8011f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f96:	81a3      	strh	r3, [r4, #12]
 8011f98:	9b01      	ldr	r3, [sp, #4]
 8011f9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f9e:	b15b      	cbz	r3, 8011fb8 <__smakebuf_r+0x70>
 8011fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fa4:	4630      	mov	r0, r6
 8011fa6:	f000 fe05 	bl	8012bb4 <_isatty_r>
 8011faa:	b128      	cbz	r0, 8011fb8 <__smakebuf_r+0x70>
 8011fac:	89a3      	ldrh	r3, [r4, #12]
 8011fae:	f023 0303 	bic.w	r3, r3, #3
 8011fb2:	f043 0301 	orr.w	r3, r3, #1
 8011fb6:	81a3      	strh	r3, [r4, #12]
 8011fb8:	89a3      	ldrh	r3, [r4, #12]
 8011fba:	431d      	orrs	r5, r3
 8011fbc:	81a5      	strh	r5, [r4, #12]
 8011fbe:	e7cf      	b.n	8011f60 <__smakebuf_r+0x18>

08011fc0 <__malloc_lock>:
 8011fc0:	4801      	ldr	r0, [pc, #4]	@ (8011fc8 <__malloc_lock+0x8>)
 8011fc2:	f7fd bc7d 	b.w	800f8c0 <__retarget_lock_acquire_recursive>
 8011fc6:	bf00      	nop
 8011fc8:	2401534c 	.word	0x2401534c

08011fcc <__malloc_unlock>:
 8011fcc:	4801      	ldr	r0, [pc, #4]	@ (8011fd4 <__malloc_unlock+0x8>)
 8011fce:	f7fd bc78 	b.w	800f8c2 <__retarget_lock_release_recursive>
 8011fd2:	bf00      	nop
 8011fd4:	2401534c 	.word	0x2401534c

08011fd8 <_Balloc>:
 8011fd8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8011fda:	b570      	push	{r4, r5, r6, lr}
 8011fdc:	4605      	mov	r5, r0
 8011fde:	460c      	mov	r4, r1
 8011fe0:	b17b      	cbz	r3, 8012002 <_Balloc+0x2a>
 8011fe2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8011fe4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011fe8:	b9a0      	cbnz	r0, 8012014 <_Balloc+0x3c>
 8011fea:	2101      	movs	r1, #1
 8011fec:	fa01 f604 	lsl.w	r6, r1, r4
 8011ff0:	1d72      	adds	r2, r6, #5
 8011ff2:	0092      	lsls	r2, r2, #2
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	f000 feb1 	bl	8012d5c <_calloc_r>
 8011ffa:	b148      	cbz	r0, 8012010 <_Balloc+0x38>
 8011ffc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8012000:	e00b      	b.n	801201a <_Balloc+0x42>
 8012002:	2221      	movs	r2, #33	@ 0x21
 8012004:	2104      	movs	r1, #4
 8012006:	f000 fea9 	bl	8012d5c <_calloc_r>
 801200a:	6468      	str	r0, [r5, #68]	@ 0x44
 801200c:	2800      	cmp	r0, #0
 801200e:	d1e8      	bne.n	8011fe2 <_Balloc+0xa>
 8012010:	2000      	movs	r0, #0
 8012012:	bd70      	pop	{r4, r5, r6, pc}
 8012014:	6802      	ldr	r2, [r0, #0]
 8012016:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 801201a:	2300      	movs	r3, #0
 801201c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012020:	e7f7      	b.n	8012012 <_Balloc+0x3a>

08012022 <_Bfree>:
 8012022:	b131      	cbz	r1, 8012032 <_Bfree+0x10>
 8012024:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012026:	684a      	ldr	r2, [r1, #4]
 8012028:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801202c:	6008      	str	r0, [r1, #0]
 801202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012032:	4770      	bx	lr

08012034 <__multadd>:
 8012034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012038:	690d      	ldr	r5, [r1, #16]
 801203a:	4607      	mov	r7, r0
 801203c:	460c      	mov	r4, r1
 801203e:	461e      	mov	r6, r3
 8012040:	f101 0c14 	add.w	ip, r1, #20
 8012044:	2000      	movs	r0, #0
 8012046:	f8dc 3000 	ldr.w	r3, [ip]
 801204a:	b299      	uxth	r1, r3
 801204c:	fb02 6101 	mla	r1, r2, r1, r6
 8012050:	0c1e      	lsrs	r6, r3, #16
 8012052:	0c0b      	lsrs	r3, r1, #16
 8012054:	fb02 3306 	mla	r3, r2, r6, r3
 8012058:	b289      	uxth	r1, r1
 801205a:	3001      	adds	r0, #1
 801205c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012060:	4285      	cmp	r5, r0
 8012062:	f84c 1b04 	str.w	r1, [ip], #4
 8012066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801206a:	dcec      	bgt.n	8012046 <__multadd+0x12>
 801206c:	b30e      	cbz	r6, 80120b2 <__multadd+0x7e>
 801206e:	68a3      	ldr	r3, [r4, #8]
 8012070:	42ab      	cmp	r3, r5
 8012072:	dc19      	bgt.n	80120a8 <__multadd+0x74>
 8012074:	6861      	ldr	r1, [r4, #4]
 8012076:	4638      	mov	r0, r7
 8012078:	3101      	adds	r1, #1
 801207a:	f7ff ffad 	bl	8011fd8 <_Balloc>
 801207e:	4680      	mov	r8, r0
 8012080:	b928      	cbnz	r0, 801208e <__multadd+0x5a>
 8012082:	4602      	mov	r2, r0
 8012084:	4b0c      	ldr	r3, [pc, #48]	@ (80120b8 <__multadd+0x84>)
 8012086:	480d      	ldr	r0, [pc, #52]	@ (80120bc <__multadd+0x88>)
 8012088:	21ba      	movs	r1, #186	@ 0xba
 801208a:	f000 fe49 	bl	8012d20 <__assert_func>
 801208e:	6922      	ldr	r2, [r4, #16]
 8012090:	3202      	adds	r2, #2
 8012092:	f104 010c 	add.w	r1, r4, #12
 8012096:	0092      	lsls	r2, r2, #2
 8012098:	300c      	adds	r0, #12
 801209a:	f7fd fc13 	bl	800f8c4 <memcpy>
 801209e:	4621      	mov	r1, r4
 80120a0:	4638      	mov	r0, r7
 80120a2:	f7ff ffbe 	bl	8012022 <_Bfree>
 80120a6:	4644      	mov	r4, r8
 80120a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80120ac:	3501      	adds	r5, #1
 80120ae:	615e      	str	r6, [r3, #20]
 80120b0:	6125      	str	r5, [r4, #16]
 80120b2:	4620      	mov	r0, r4
 80120b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120b8:	080148d4 	.word	0x080148d4
 80120bc:	0801496d 	.word	0x0801496d

080120c0 <__hi0bits>:
 80120c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80120c4:	4603      	mov	r3, r0
 80120c6:	bf36      	itet	cc
 80120c8:	0403      	lslcc	r3, r0, #16
 80120ca:	2000      	movcs	r0, #0
 80120cc:	2010      	movcc	r0, #16
 80120ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80120d2:	bf3c      	itt	cc
 80120d4:	021b      	lslcc	r3, r3, #8
 80120d6:	3008      	addcc	r0, #8
 80120d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80120dc:	bf3c      	itt	cc
 80120de:	011b      	lslcc	r3, r3, #4
 80120e0:	3004      	addcc	r0, #4
 80120e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120e6:	bf3c      	itt	cc
 80120e8:	009b      	lslcc	r3, r3, #2
 80120ea:	3002      	addcc	r0, #2
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	db05      	blt.n	80120fc <__hi0bits+0x3c>
 80120f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80120f4:	f100 0001 	add.w	r0, r0, #1
 80120f8:	bf08      	it	eq
 80120fa:	2020      	moveq	r0, #32
 80120fc:	4770      	bx	lr

080120fe <__lo0bits>:
 80120fe:	6803      	ldr	r3, [r0, #0]
 8012100:	4602      	mov	r2, r0
 8012102:	f013 0007 	ands.w	r0, r3, #7
 8012106:	d00b      	beq.n	8012120 <__lo0bits+0x22>
 8012108:	07d9      	lsls	r1, r3, #31
 801210a:	d421      	bmi.n	8012150 <__lo0bits+0x52>
 801210c:	0798      	lsls	r0, r3, #30
 801210e:	bf49      	itett	mi
 8012110:	085b      	lsrmi	r3, r3, #1
 8012112:	089b      	lsrpl	r3, r3, #2
 8012114:	2001      	movmi	r0, #1
 8012116:	6013      	strmi	r3, [r2, #0]
 8012118:	bf5c      	itt	pl
 801211a:	6013      	strpl	r3, [r2, #0]
 801211c:	2002      	movpl	r0, #2
 801211e:	4770      	bx	lr
 8012120:	b299      	uxth	r1, r3
 8012122:	b909      	cbnz	r1, 8012128 <__lo0bits+0x2a>
 8012124:	0c1b      	lsrs	r3, r3, #16
 8012126:	2010      	movs	r0, #16
 8012128:	b2d9      	uxtb	r1, r3
 801212a:	b909      	cbnz	r1, 8012130 <__lo0bits+0x32>
 801212c:	3008      	adds	r0, #8
 801212e:	0a1b      	lsrs	r3, r3, #8
 8012130:	0719      	lsls	r1, r3, #28
 8012132:	bf04      	itt	eq
 8012134:	091b      	lsreq	r3, r3, #4
 8012136:	3004      	addeq	r0, #4
 8012138:	0799      	lsls	r1, r3, #30
 801213a:	bf04      	itt	eq
 801213c:	089b      	lsreq	r3, r3, #2
 801213e:	3002      	addeq	r0, #2
 8012140:	07d9      	lsls	r1, r3, #31
 8012142:	d403      	bmi.n	801214c <__lo0bits+0x4e>
 8012144:	085b      	lsrs	r3, r3, #1
 8012146:	f100 0001 	add.w	r0, r0, #1
 801214a:	d003      	beq.n	8012154 <__lo0bits+0x56>
 801214c:	6013      	str	r3, [r2, #0]
 801214e:	4770      	bx	lr
 8012150:	2000      	movs	r0, #0
 8012152:	4770      	bx	lr
 8012154:	2020      	movs	r0, #32
 8012156:	4770      	bx	lr

08012158 <__i2b>:
 8012158:	b510      	push	{r4, lr}
 801215a:	460c      	mov	r4, r1
 801215c:	2101      	movs	r1, #1
 801215e:	f7ff ff3b 	bl	8011fd8 <_Balloc>
 8012162:	4602      	mov	r2, r0
 8012164:	b928      	cbnz	r0, 8012172 <__i2b+0x1a>
 8012166:	4b05      	ldr	r3, [pc, #20]	@ (801217c <__i2b+0x24>)
 8012168:	4805      	ldr	r0, [pc, #20]	@ (8012180 <__i2b+0x28>)
 801216a:	f240 1145 	movw	r1, #325	@ 0x145
 801216e:	f000 fdd7 	bl	8012d20 <__assert_func>
 8012172:	2301      	movs	r3, #1
 8012174:	6144      	str	r4, [r0, #20]
 8012176:	6103      	str	r3, [r0, #16]
 8012178:	bd10      	pop	{r4, pc}
 801217a:	bf00      	nop
 801217c:	080148d4 	.word	0x080148d4
 8012180:	0801496d 	.word	0x0801496d

08012184 <__multiply>:
 8012184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012188:	4614      	mov	r4, r2
 801218a:	690a      	ldr	r2, [r1, #16]
 801218c:	6923      	ldr	r3, [r4, #16]
 801218e:	429a      	cmp	r2, r3
 8012190:	bfa8      	it	ge
 8012192:	4623      	movge	r3, r4
 8012194:	460f      	mov	r7, r1
 8012196:	bfa4      	itt	ge
 8012198:	460c      	movge	r4, r1
 801219a:	461f      	movge	r7, r3
 801219c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80121a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80121a4:	68a3      	ldr	r3, [r4, #8]
 80121a6:	6861      	ldr	r1, [r4, #4]
 80121a8:	eb0a 0609 	add.w	r6, sl, r9
 80121ac:	42b3      	cmp	r3, r6
 80121ae:	b085      	sub	sp, #20
 80121b0:	bfb8      	it	lt
 80121b2:	3101      	addlt	r1, #1
 80121b4:	f7ff ff10 	bl	8011fd8 <_Balloc>
 80121b8:	b930      	cbnz	r0, 80121c8 <__multiply+0x44>
 80121ba:	4602      	mov	r2, r0
 80121bc:	4b44      	ldr	r3, [pc, #272]	@ (80122d0 <__multiply+0x14c>)
 80121be:	4845      	ldr	r0, [pc, #276]	@ (80122d4 <__multiply+0x150>)
 80121c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80121c4:	f000 fdac 	bl	8012d20 <__assert_func>
 80121c8:	f100 0514 	add.w	r5, r0, #20
 80121cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80121d0:	462b      	mov	r3, r5
 80121d2:	2200      	movs	r2, #0
 80121d4:	4543      	cmp	r3, r8
 80121d6:	d321      	bcc.n	801221c <__multiply+0x98>
 80121d8:	f107 0114 	add.w	r1, r7, #20
 80121dc:	f104 0214 	add.w	r2, r4, #20
 80121e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80121e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80121e8:	9302      	str	r3, [sp, #8]
 80121ea:	1b13      	subs	r3, r2, r4
 80121ec:	3b15      	subs	r3, #21
 80121ee:	f023 0303 	bic.w	r3, r3, #3
 80121f2:	3304      	adds	r3, #4
 80121f4:	f104 0715 	add.w	r7, r4, #21
 80121f8:	42ba      	cmp	r2, r7
 80121fa:	bf38      	it	cc
 80121fc:	2304      	movcc	r3, #4
 80121fe:	9301      	str	r3, [sp, #4]
 8012200:	9b02      	ldr	r3, [sp, #8]
 8012202:	9103      	str	r1, [sp, #12]
 8012204:	428b      	cmp	r3, r1
 8012206:	d80c      	bhi.n	8012222 <__multiply+0x9e>
 8012208:	2e00      	cmp	r6, #0
 801220a:	dd03      	ble.n	8012214 <__multiply+0x90>
 801220c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012210:	2b00      	cmp	r3, #0
 8012212:	d05b      	beq.n	80122cc <__multiply+0x148>
 8012214:	6106      	str	r6, [r0, #16]
 8012216:	b005      	add	sp, #20
 8012218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801221c:	f843 2b04 	str.w	r2, [r3], #4
 8012220:	e7d8      	b.n	80121d4 <__multiply+0x50>
 8012222:	f8b1 a000 	ldrh.w	sl, [r1]
 8012226:	f1ba 0f00 	cmp.w	sl, #0
 801222a:	d024      	beq.n	8012276 <__multiply+0xf2>
 801222c:	f104 0e14 	add.w	lr, r4, #20
 8012230:	46a9      	mov	r9, r5
 8012232:	f04f 0c00 	mov.w	ip, #0
 8012236:	f85e 7b04 	ldr.w	r7, [lr], #4
 801223a:	f8d9 3000 	ldr.w	r3, [r9]
 801223e:	fa1f fb87 	uxth.w	fp, r7
 8012242:	b29b      	uxth	r3, r3
 8012244:	fb0a 330b 	mla	r3, sl, fp, r3
 8012248:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801224c:	f8d9 7000 	ldr.w	r7, [r9]
 8012250:	4463      	add	r3, ip
 8012252:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012256:	fb0a c70b 	mla	r7, sl, fp, ip
 801225a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801225e:	b29b      	uxth	r3, r3
 8012260:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012264:	4572      	cmp	r2, lr
 8012266:	f849 3b04 	str.w	r3, [r9], #4
 801226a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801226e:	d8e2      	bhi.n	8012236 <__multiply+0xb2>
 8012270:	9b01      	ldr	r3, [sp, #4]
 8012272:	f845 c003 	str.w	ip, [r5, r3]
 8012276:	9b03      	ldr	r3, [sp, #12]
 8012278:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801227c:	3104      	adds	r1, #4
 801227e:	f1b9 0f00 	cmp.w	r9, #0
 8012282:	d021      	beq.n	80122c8 <__multiply+0x144>
 8012284:	682b      	ldr	r3, [r5, #0]
 8012286:	f104 0c14 	add.w	ip, r4, #20
 801228a:	46ae      	mov	lr, r5
 801228c:	f04f 0a00 	mov.w	sl, #0
 8012290:	f8bc b000 	ldrh.w	fp, [ip]
 8012294:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012298:	fb09 770b 	mla	r7, r9, fp, r7
 801229c:	4457      	add	r7, sl
 801229e:	b29b      	uxth	r3, r3
 80122a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80122a4:	f84e 3b04 	str.w	r3, [lr], #4
 80122a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80122ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122b0:	f8be 3000 	ldrh.w	r3, [lr]
 80122b4:	fb09 330a 	mla	r3, r9, sl, r3
 80122b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80122bc:	4562      	cmp	r2, ip
 80122be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122c2:	d8e5      	bhi.n	8012290 <__multiply+0x10c>
 80122c4:	9f01      	ldr	r7, [sp, #4]
 80122c6:	51eb      	str	r3, [r5, r7]
 80122c8:	3504      	adds	r5, #4
 80122ca:	e799      	b.n	8012200 <__multiply+0x7c>
 80122cc:	3e01      	subs	r6, #1
 80122ce:	e79b      	b.n	8012208 <__multiply+0x84>
 80122d0:	080148d4 	.word	0x080148d4
 80122d4:	0801496d 	.word	0x0801496d

080122d8 <__pow5mult>:
 80122d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122dc:	4615      	mov	r5, r2
 80122de:	f012 0203 	ands.w	r2, r2, #3
 80122e2:	4607      	mov	r7, r0
 80122e4:	460e      	mov	r6, r1
 80122e6:	d007      	beq.n	80122f8 <__pow5mult+0x20>
 80122e8:	4c1a      	ldr	r4, [pc, #104]	@ (8012354 <__pow5mult+0x7c>)
 80122ea:	3a01      	subs	r2, #1
 80122ec:	2300      	movs	r3, #0
 80122ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80122f2:	f7ff fe9f 	bl	8012034 <__multadd>
 80122f6:	4606      	mov	r6, r0
 80122f8:	10ad      	asrs	r5, r5, #2
 80122fa:	d027      	beq.n	801234c <__pow5mult+0x74>
 80122fc:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80122fe:	b944      	cbnz	r4, 8012312 <__pow5mult+0x3a>
 8012300:	f240 2171 	movw	r1, #625	@ 0x271
 8012304:	4638      	mov	r0, r7
 8012306:	f7ff ff27 	bl	8012158 <__i2b>
 801230a:	2300      	movs	r3, #0
 801230c:	6438      	str	r0, [r7, #64]	@ 0x40
 801230e:	4604      	mov	r4, r0
 8012310:	6003      	str	r3, [r0, #0]
 8012312:	f04f 0900 	mov.w	r9, #0
 8012316:	07eb      	lsls	r3, r5, #31
 8012318:	d50a      	bpl.n	8012330 <__pow5mult+0x58>
 801231a:	4631      	mov	r1, r6
 801231c:	4622      	mov	r2, r4
 801231e:	4638      	mov	r0, r7
 8012320:	f7ff ff30 	bl	8012184 <__multiply>
 8012324:	4631      	mov	r1, r6
 8012326:	4680      	mov	r8, r0
 8012328:	4638      	mov	r0, r7
 801232a:	f7ff fe7a 	bl	8012022 <_Bfree>
 801232e:	4646      	mov	r6, r8
 8012330:	106d      	asrs	r5, r5, #1
 8012332:	d00b      	beq.n	801234c <__pow5mult+0x74>
 8012334:	6820      	ldr	r0, [r4, #0]
 8012336:	b938      	cbnz	r0, 8012348 <__pow5mult+0x70>
 8012338:	4622      	mov	r2, r4
 801233a:	4621      	mov	r1, r4
 801233c:	4638      	mov	r0, r7
 801233e:	f7ff ff21 	bl	8012184 <__multiply>
 8012342:	6020      	str	r0, [r4, #0]
 8012344:	f8c0 9000 	str.w	r9, [r0]
 8012348:	4604      	mov	r4, r0
 801234a:	e7e4      	b.n	8012316 <__pow5mult+0x3e>
 801234c:	4630      	mov	r0, r6
 801234e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012352:	bf00      	nop
 8012354:	080149c8 	.word	0x080149c8

08012358 <__lshift>:
 8012358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801235c:	460c      	mov	r4, r1
 801235e:	6849      	ldr	r1, [r1, #4]
 8012360:	6923      	ldr	r3, [r4, #16]
 8012362:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012366:	68a3      	ldr	r3, [r4, #8]
 8012368:	4607      	mov	r7, r0
 801236a:	4691      	mov	r9, r2
 801236c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012370:	f108 0601 	add.w	r6, r8, #1
 8012374:	42b3      	cmp	r3, r6
 8012376:	db0b      	blt.n	8012390 <__lshift+0x38>
 8012378:	4638      	mov	r0, r7
 801237a:	f7ff fe2d 	bl	8011fd8 <_Balloc>
 801237e:	4605      	mov	r5, r0
 8012380:	b948      	cbnz	r0, 8012396 <__lshift+0x3e>
 8012382:	4602      	mov	r2, r0
 8012384:	4b28      	ldr	r3, [pc, #160]	@ (8012428 <__lshift+0xd0>)
 8012386:	4829      	ldr	r0, [pc, #164]	@ (801242c <__lshift+0xd4>)
 8012388:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801238c:	f000 fcc8 	bl	8012d20 <__assert_func>
 8012390:	3101      	adds	r1, #1
 8012392:	005b      	lsls	r3, r3, #1
 8012394:	e7ee      	b.n	8012374 <__lshift+0x1c>
 8012396:	2300      	movs	r3, #0
 8012398:	f100 0114 	add.w	r1, r0, #20
 801239c:	f100 0210 	add.w	r2, r0, #16
 80123a0:	4618      	mov	r0, r3
 80123a2:	4553      	cmp	r3, sl
 80123a4:	db33      	blt.n	801240e <__lshift+0xb6>
 80123a6:	6920      	ldr	r0, [r4, #16]
 80123a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80123ac:	f104 0314 	add.w	r3, r4, #20
 80123b0:	f019 091f 	ands.w	r9, r9, #31
 80123b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80123b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80123bc:	d02b      	beq.n	8012416 <__lshift+0xbe>
 80123be:	f1c9 0e20 	rsb	lr, r9, #32
 80123c2:	468a      	mov	sl, r1
 80123c4:	2200      	movs	r2, #0
 80123c6:	6818      	ldr	r0, [r3, #0]
 80123c8:	fa00 f009 	lsl.w	r0, r0, r9
 80123cc:	4310      	orrs	r0, r2
 80123ce:	f84a 0b04 	str.w	r0, [sl], #4
 80123d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80123d6:	459c      	cmp	ip, r3
 80123d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80123dc:	d8f3      	bhi.n	80123c6 <__lshift+0x6e>
 80123de:	ebac 0304 	sub.w	r3, ip, r4
 80123e2:	3b15      	subs	r3, #21
 80123e4:	f023 0303 	bic.w	r3, r3, #3
 80123e8:	3304      	adds	r3, #4
 80123ea:	f104 0015 	add.w	r0, r4, #21
 80123ee:	4584      	cmp	ip, r0
 80123f0:	bf38      	it	cc
 80123f2:	2304      	movcc	r3, #4
 80123f4:	50ca      	str	r2, [r1, r3]
 80123f6:	b10a      	cbz	r2, 80123fc <__lshift+0xa4>
 80123f8:	f108 0602 	add.w	r6, r8, #2
 80123fc:	3e01      	subs	r6, #1
 80123fe:	4638      	mov	r0, r7
 8012400:	612e      	str	r6, [r5, #16]
 8012402:	4621      	mov	r1, r4
 8012404:	f7ff fe0d 	bl	8012022 <_Bfree>
 8012408:	4628      	mov	r0, r5
 801240a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801240e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012412:	3301      	adds	r3, #1
 8012414:	e7c5      	b.n	80123a2 <__lshift+0x4a>
 8012416:	3904      	subs	r1, #4
 8012418:	f853 2b04 	ldr.w	r2, [r3], #4
 801241c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012420:	459c      	cmp	ip, r3
 8012422:	d8f9      	bhi.n	8012418 <__lshift+0xc0>
 8012424:	e7ea      	b.n	80123fc <__lshift+0xa4>
 8012426:	bf00      	nop
 8012428:	080148d4 	.word	0x080148d4
 801242c:	0801496d 	.word	0x0801496d

08012430 <__mcmp>:
 8012430:	690a      	ldr	r2, [r1, #16]
 8012432:	4603      	mov	r3, r0
 8012434:	6900      	ldr	r0, [r0, #16]
 8012436:	1a80      	subs	r0, r0, r2
 8012438:	b530      	push	{r4, r5, lr}
 801243a:	d10e      	bne.n	801245a <__mcmp+0x2a>
 801243c:	3314      	adds	r3, #20
 801243e:	3114      	adds	r1, #20
 8012440:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012444:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012448:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801244c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012450:	4295      	cmp	r5, r2
 8012452:	d003      	beq.n	801245c <__mcmp+0x2c>
 8012454:	d205      	bcs.n	8012462 <__mcmp+0x32>
 8012456:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801245a:	bd30      	pop	{r4, r5, pc}
 801245c:	42a3      	cmp	r3, r4
 801245e:	d3f3      	bcc.n	8012448 <__mcmp+0x18>
 8012460:	e7fb      	b.n	801245a <__mcmp+0x2a>
 8012462:	2001      	movs	r0, #1
 8012464:	e7f9      	b.n	801245a <__mcmp+0x2a>
	...

08012468 <__mdiff>:
 8012468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801246c:	4689      	mov	r9, r1
 801246e:	4606      	mov	r6, r0
 8012470:	4611      	mov	r1, r2
 8012472:	4648      	mov	r0, r9
 8012474:	4614      	mov	r4, r2
 8012476:	f7ff ffdb 	bl	8012430 <__mcmp>
 801247a:	1e05      	subs	r5, r0, #0
 801247c:	d112      	bne.n	80124a4 <__mdiff+0x3c>
 801247e:	4629      	mov	r1, r5
 8012480:	4630      	mov	r0, r6
 8012482:	f7ff fda9 	bl	8011fd8 <_Balloc>
 8012486:	4602      	mov	r2, r0
 8012488:	b928      	cbnz	r0, 8012496 <__mdiff+0x2e>
 801248a:	4b3f      	ldr	r3, [pc, #252]	@ (8012588 <__mdiff+0x120>)
 801248c:	f240 2137 	movw	r1, #567	@ 0x237
 8012490:	483e      	ldr	r0, [pc, #248]	@ (801258c <__mdiff+0x124>)
 8012492:	f000 fc45 	bl	8012d20 <__assert_func>
 8012496:	2301      	movs	r3, #1
 8012498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801249c:	4610      	mov	r0, r2
 801249e:	b003      	add	sp, #12
 80124a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124a4:	bfbc      	itt	lt
 80124a6:	464b      	movlt	r3, r9
 80124a8:	46a1      	movlt	r9, r4
 80124aa:	4630      	mov	r0, r6
 80124ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80124b0:	bfba      	itte	lt
 80124b2:	461c      	movlt	r4, r3
 80124b4:	2501      	movlt	r5, #1
 80124b6:	2500      	movge	r5, #0
 80124b8:	f7ff fd8e 	bl	8011fd8 <_Balloc>
 80124bc:	4602      	mov	r2, r0
 80124be:	b918      	cbnz	r0, 80124c8 <__mdiff+0x60>
 80124c0:	4b31      	ldr	r3, [pc, #196]	@ (8012588 <__mdiff+0x120>)
 80124c2:	f240 2145 	movw	r1, #581	@ 0x245
 80124c6:	e7e3      	b.n	8012490 <__mdiff+0x28>
 80124c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80124cc:	6926      	ldr	r6, [r4, #16]
 80124ce:	60c5      	str	r5, [r0, #12]
 80124d0:	f109 0310 	add.w	r3, r9, #16
 80124d4:	f109 0514 	add.w	r5, r9, #20
 80124d8:	f104 0e14 	add.w	lr, r4, #20
 80124dc:	f100 0b14 	add.w	fp, r0, #20
 80124e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80124e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80124e8:	9301      	str	r3, [sp, #4]
 80124ea:	46d9      	mov	r9, fp
 80124ec:	f04f 0c00 	mov.w	ip, #0
 80124f0:	9b01      	ldr	r3, [sp, #4]
 80124f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80124f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80124fa:	9301      	str	r3, [sp, #4]
 80124fc:	fa1f f38a 	uxth.w	r3, sl
 8012500:	4619      	mov	r1, r3
 8012502:	b283      	uxth	r3, r0
 8012504:	1acb      	subs	r3, r1, r3
 8012506:	0c00      	lsrs	r0, r0, #16
 8012508:	4463      	add	r3, ip
 801250a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801250e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012512:	b29b      	uxth	r3, r3
 8012514:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012518:	4576      	cmp	r6, lr
 801251a:	f849 3b04 	str.w	r3, [r9], #4
 801251e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012522:	d8e5      	bhi.n	80124f0 <__mdiff+0x88>
 8012524:	1b33      	subs	r3, r6, r4
 8012526:	3b15      	subs	r3, #21
 8012528:	f023 0303 	bic.w	r3, r3, #3
 801252c:	3415      	adds	r4, #21
 801252e:	3304      	adds	r3, #4
 8012530:	42a6      	cmp	r6, r4
 8012532:	bf38      	it	cc
 8012534:	2304      	movcc	r3, #4
 8012536:	441d      	add	r5, r3
 8012538:	445b      	add	r3, fp
 801253a:	461e      	mov	r6, r3
 801253c:	462c      	mov	r4, r5
 801253e:	4544      	cmp	r4, r8
 8012540:	d30e      	bcc.n	8012560 <__mdiff+0xf8>
 8012542:	f108 0103 	add.w	r1, r8, #3
 8012546:	1b49      	subs	r1, r1, r5
 8012548:	f021 0103 	bic.w	r1, r1, #3
 801254c:	3d03      	subs	r5, #3
 801254e:	45a8      	cmp	r8, r5
 8012550:	bf38      	it	cc
 8012552:	2100      	movcc	r1, #0
 8012554:	440b      	add	r3, r1
 8012556:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801255a:	b191      	cbz	r1, 8012582 <__mdiff+0x11a>
 801255c:	6117      	str	r7, [r2, #16]
 801255e:	e79d      	b.n	801249c <__mdiff+0x34>
 8012560:	f854 1b04 	ldr.w	r1, [r4], #4
 8012564:	46e6      	mov	lr, ip
 8012566:	0c08      	lsrs	r0, r1, #16
 8012568:	fa1c fc81 	uxtah	ip, ip, r1
 801256c:	4471      	add	r1, lr
 801256e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012572:	b289      	uxth	r1, r1
 8012574:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012578:	f846 1b04 	str.w	r1, [r6], #4
 801257c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012580:	e7dd      	b.n	801253e <__mdiff+0xd6>
 8012582:	3f01      	subs	r7, #1
 8012584:	e7e7      	b.n	8012556 <__mdiff+0xee>
 8012586:	bf00      	nop
 8012588:	080148d4 	.word	0x080148d4
 801258c:	0801496d 	.word	0x0801496d

08012590 <__d2b>:
 8012590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012594:	460f      	mov	r7, r1
 8012596:	2101      	movs	r1, #1
 8012598:	ec59 8b10 	vmov	r8, r9, d0
 801259c:	4616      	mov	r6, r2
 801259e:	f7ff fd1b 	bl	8011fd8 <_Balloc>
 80125a2:	4604      	mov	r4, r0
 80125a4:	b930      	cbnz	r0, 80125b4 <__d2b+0x24>
 80125a6:	4602      	mov	r2, r0
 80125a8:	4b23      	ldr	r3, [pc, #140]	@ (8012638 <__d2b+0xa8>)
 80125aa:	4824      	ldr	r0, [pc, #144]	@ (801263c <__d2b+0xac>)
 80125ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80125b0:	f000 fbb6 	bl	8012d20 <__assert_func>
 80125b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80125b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80125bc:	b10d      	cbz	r5, 80125c2 <__d2b+0x32>
 80125be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80125c2:	9301      	str	r3, [sp, #4]
 80125c4:	f1b8 0300 	subs.w	r3, r8, #0
 80125c8:	d023      	beq.n	8012612 <__d2b+0x82>
 80125ca:	4668      	mov	r0, sp
 80125cc:	9300      	str	r3, [sp, #0]
 80125ce:	f7ff fd96 	bl	80120fe <__lo0bits>
 80125d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80125d6:	b1d0      	cbz	r0, 801260e <__d2b+0x7e>
 80125d8:	f1c0 0320 	rsb	r3, r0, #32
 80125dc:	fa02 f303 	lsl.w	r3, r2, r3
 80125e0:	430b      	orrs	r3, r1
 80125e2:	40c2      	lsrs	r2, r0
 80125e4:	6163      	str	r3, [r4, #20]
 80125e6:	9201      	str	r2, [sp, #4]
 80125e8:	9b01      	ldr	r3, [sp, #4]
 80125ea:	61a3      	str	r3, [r4, #24]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	bf0c      	ite	eq
 80125f0:	2201      	moveq	r2, #1
 80125f2:	2202      	movne	r2, #2
 80125f4:	6122      	str	r2, [r4, #16]
 80125f6:	b1a5      	cbz	r5, 8012622 <__d2b+0x92>
 80125f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80125fc:	4405      	add	r5, r0
 80125fe:	603d      	str	r5, [r7, #0]
 8012600:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012604:	6030      	str	r0, [r6, #0]
 8012606:	4620      	mov	r0, r4
 8012608:	b003      	add	sp, #12
 801260a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801260e:	6161      	str	r1, [r4, #20]
 8012610:	e7ea      	b.n	80125e8 <__d2b+0x58>
 8012612:	a801      	add	r0, sp, #4
 8012614:	f7ff fd73 	bl	80120fe <__lo0bits>
 8012618:	9b01      	ldr	r3, [sp, #4]
 801261a:	6163      	str	r3, [r4, #20]
 801261c:	3020      	adds	r0, #32
 801261e:	2201      	movs	r2, #1
 8012620:	e7e8      	b.n	80125f4 <__d2b+0x64>
 8012622:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012626:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801262a:	6038      	str	r0, [r7, #0]
 801262c:	6918      	ldr	r0, [r3, #16]
 801262e:	f7ff fd47 	bl	80120c0 <__hi0bits>
 8012632:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012636:	e7e5      	b.n	8012604 <__d2b+0x74>
 8012638:	080148d4 	.word	0x080148d4
 801263c:	0801496d 	.word	0x0801496d

08012640 <_fclose_r>:
 8012640:	b570      	push	{r4, r5, r6, lr}
 8012642:	4605      	mov	r5, r0
 8012644:	460c      	mov	r4, r1
 8012646:	b1b1      	cbz	r1, 8012676 <_fclose_r+0x36>
 8012648:	b118      	cbz	r0, 8012652 <_fclose_r+0x12>
 801264a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801264c:	b90b      	cbnz	r3, 8012652 <_fclose_r+0x12>
 801264e:	f7fc fe89 	bl	800f364 <__sinit>
 8012652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012654:	07de      	lsls	r6, r3, #31
 8012656:	d405      	bmi.n	8012664 <_fclose_r+0x24>
 8012658:	89a3      	ldrh	r3, [r4, #12]
 801265a:	0598      	lsls	r0, r3, #22
 801265c:	d402      	bmi.n	8012664 <_fclose_r+0x24>
 801265e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012660:	f7fd f92e 	bl	800f8c0 <__retarget_lock_acquire_recursive>
 8012664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012668:	b943      	cbnz	r3, 801267c <_fclose_r+0x3c>
 801266a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801266c:	07d9      	lsls	r1, r3, #31
 801266e:	d402      	bmi.n	8012676 <_fclose_r+0x36>
 8012670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012672:	f7fd f926 	bl	800f8c2 <__retarget_lock_release_recursive>
 8012676:	2600      	movs	r6, #0
 8012678:	4630      	mov	r0, r6
 801267a:	bd70      	pop	{r4, r5, r6, pc}
 801267c:	4621      	mov	r1, r4
 801267e:	4628      	mov	r0, r5
 8012680:	f7fc fd16 	bl	800f0b0 <__sflush_r>
 8012684:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012686:	4606      	mov	r6, r0
 8012688:	b133      	cbz	r3, 8012698 <_fclose_r+0x58>
 801268a:	69e1      	ldr	r1, [r4, #28]
 801268c:	4628      	mov	r0, r5
 801268e:	4798      	blx	r3
 8012690:	2800      	cmp	r0, #0
 8012692:	bfb8      	it	lt
 8012694:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8012698:	89a3      	ldrh	r3, [r4, #12]
 801269a:	061a      	lsls	r2, r3, #24
 801269c:	d503      	bpl.n	80126a6 <_fclose_r+0x66>
 801269e:	6921      	ldr	r1, [r4, #16]
 80126a0:	4628      	mov	r0, r5
 80126a2:	f7fd ff99 	bl	80105d8 <_free_r>
 80126a6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80126a8:	b141      	cbz	r1, 80126bc <_fclose_r+0x7c>
 80126aa:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80126ae:	4299      	cmp	r1, r3
 80126b0:	d002      	beq.n	80126b8 <_fclose_r+0x78>
 80126b2:	4628      	mov	r0, r5
 80126b4:	f7fd ff90 	bl	80105d8 <_free_r>
 80126b8:	2300      	movs	r3, #0
 80126ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80126bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80126be:	b121      	cbz	r1, 80126ca <_fclose_r+0x8a>
 80126c0:	4628      	mov	r0, r5
 80126c2:	f7fd ff89 	bl	80105d8 <_free_r>
 80126c6:	2300      	movs	r3, #0
 80126c8:	6463      	str	r3, [r4, #68]	@ 0x44
 80126ca:	f7fc fe3f 	bl	800f34c <__sfp_lock_acquire>
 80126ce:	2300      	movs	r3, #0
 80126d0:	81a3      	strh	r3, [r4, #12]
 80126d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80126d4:	07db      	lsls	r3, r3, #31
 80126d6:	d402      	bmi.n	80126de <_fclose_r+0x9e>
 80126d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126da:	f7fd f8f2 	bl	800f8c2 <__retarget_lock_release_recursive>
 80126de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126e0:	f7fd f8ed 	bl	800f8be <__retarget_lock_close_recursive>
 80126e4:	f7fc fe38 	bl	800f358 <__sfp_lock_release>
 80126e8:	e7c6      	b.n	8012678 <_fclose_r+0x38>
	...

080126ec <_realloc_r>:
 80126ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f0:	4682      	mov	sl, r0
 80126f2:	4693      	mov	fp, r2
 80126f4:	460c      	mov	r4, r1
 80126f6:	b929      	cbnz	r1, 8012704 <_realloc_r+0x18>
 80126f8:	4611      	mov	r1, r2
 80126fa:	b003      	add	sp, #12
 80126fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012700:	f7fe b82a 	b.w	8010758 <_malloc_r>
 8012704:	f7ff fc5c 	bl	8011fc0 <__malloc_lock>
 8012708:	f10b 080b 	add.w	r8, fp, #11
 801270c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8012710:	f1b8 0f16 	cmp.w	r8, #22
 8012714:	f1a4 0908 	sub.w	r9, r4, #8
 8012718:	f025 0603 	bic.w	r6, r5, #3
 801271c:	d908      	bls.n	8012730 <_realloc_r+0x44>
 801271e:	f038 0807 	bics.w	r8, r8, #7
 8012722:	d507      	bpl.n	8012734 <_realloc_r+0x48>
 8012724:	230c      	movs	r3, #12
 8012726:	f8ca 3000 	str.w	r3, [sl]
 801272a:	f04f 0b00 	mov.w	fp, #0
 801272e:	e032      	b.n	8012796 <_realloc_r+0xaa>
 8012730:	f04f 0810 	mov.w	r8, #16
 8012734:	45c3      	cmp	fp, r8
 8012736:	d8f5      	bhi.n	8012724 <_realloc_r+0x38>
 8012738:	4546      	cmp	r6, r8
 801273a:	f280 8174 	bge.w	8012a26 <_realloc_r+0x33a>
 801273e:	4b9e      	ldr	r3, [pc, #632]	@ (80129b8 <_realloc_r+0x2cc>)
 8012740:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8012744:	eb09 0106 	add.w	r1, r9, r6
 8012748:	458c      	cmp	ip, r1
 801274a:	6848      	ldr	r0, [r1, #4]
 801274c:	d005      	beq.n	801275a <_realloc_r+0x6e>
 801274e:	f020 0201 	bic.w	r2, r0, #1
 8012752:	440a      	add	r2, r1
 8012754:	6852      	ldr	r2, [r2, #4]
 8012756:	07d7      	lsls	r7, r2, #31
 8012758:	d449      	bmi.n	80127ee <_realloc_r+0x102>
 801275a:	f020 0003 	bic.w	r0, r0, #3
 801275e:	458c      	cmp	ip, r1
 8012760:	eb06 0700 	add.w	r7, r6, r0
 8012764:	d11b      	bne.n	801279e <_realloc_r+0xb2>
 8012766:	f108 0210 	add.w	r2, r8, #16
 801276a:	42ba      	cmp	r2, r7
 801276c:	dc41      	bgt.n	80127f2 <_realloc_r+0x106>
 801276e:	eb09 0208 	add.w	r2, r9, r8
 8012772:	eba7 0708 	sub.w	r7, r7, r8
 8012776:	f047 0701 	orr.w	r7, r7, #1
 801277a:	609a      	str	r2, [r3, #8]
 801277c:	6057      	str	r7, [r2, #4]
 801277e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012782:	f003 0301 	and.w	r3, r3, #1
 8012786:	ea43 0308 	orr.w	r3, r3, r8
 801278a:	f844 3c04 	str.w	r3, [r4, #-4]
 801278e:	4650      	mov	r0, sl
 8012790:	f7ff fc1c 	bl	8011fcc <__malloc_unlock>
 8012794:	46a3      	mov	fp, r4
 8012796:	4658      	mov	r0, fp
 8012798:	b003      	add	sp, #12
 801279a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801279e:	45b8      	cmp	r8, r7
 80127a0:	dc27      	bgt.n	80127f2 <_realloc_r+0x106>
 80127a2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80127a6:	60d3      	str	r3, [r2, #12]
 80127a8:	609a      	str	r2, [r3, #8]
 80127aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80127ae:	eba7 0008 	sub.w	r0, r7, r8
 80127b2:	280f      	cmp	r0, #15
 80127b4:	f003 0301 	and.w	r3, r3, #1
 80127b8:	eb09 0207 	add.w	r2, r9, r7
 80127bc:	f240 8135 	bls.w	8012a2a <_realloc_r+0x33e>
 80127c0:	eb09 0108 	add.w	r1, r9, r8
 80127c4:	ea48 0303 	orr.w	r3, r8, r3
 80127c8:	f040 0001 	orr.w	r0, r0, #1
 80127cc:	f8c9 3004 	str.w	r3, [r9, #4]
 80127d0:	6048      	str	r0, [r1, #4]
 80127d2:	6853      	ldr	r3, [r2, #4]
 80127d4:	f043 0301 	orr.w	r3, r3, #1
 80127d8:	6053      	str	r3, [r2, #4]
 80127da:	3108      	adds	r1, #8
 80127dc:	4650      	mov	r0, sl
 80127de:	f7fd fefb 	bl	80105d8 <_free_r>
 80127e2:	4650      	mov	r0, sl
 80127e4:	f7ff fbf2 	bl	8011fcc <__malloc_unlock>
 80127e8:	f109 0b08 	add.w	fp, r9, #8
 80127ec:	e7d3      	b.n	8012796 <_realloc_r+0xaa>
 80127ee:	2000      	movs	r0, #0
 80127f0:	4601      	mov	r1, r0
 80127f2:	07ea      	lsls	r2, r5, #31
 80127f4:	f100 80c7 	bmi.w	8012986 <_realloc_r+0x29a>
 80127f8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80127fc:	eba9 0505 	sub.w	r5, r9, r5
 8012800:	686a      	ldr	r2, [r5, #4]
 8012802:	f022 0203 	bic.w	r2, r2, #3
 8012806:	4432      	add	r2, r6
 8012808:	9201      	str	r2, [sp, #4]
 801280a:	2900      	cmp	r1, #0
 801280c:	f000 8086 	beq.w	801291c <_realloc_r+0x230>
 8012810:	458c      	cmp	ip, r1
 8012812:	eb00 0702 	add.w	r7, r0, r2
 8012816:	d149      	bne.n	80128ac <_realloc_r+0x1c0>
 8012818:	f108 0210 	add.w	r2, r8, #16
 801281c:	42ba      	cmp	r2, r7
 801281e:	dc7d      	bgt.n	801291c <_realloc_r+0x230>
 8012820:	46ab      	mov	fp, r5
 8012822:	68ea      	ldr	r2, [r5, #12]
 8012824:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8012828:	60ca      	str	r2, [r1, #12]
 801282a:	6091      	str	r1, [r2, #8]
 801282c:	1f32      	subs	r2, r6, #4
 801282e:	2a24      	cmp	r2, #36	@ 0x24
 8012830:	d836      	bhi.n	80128a0 <_realloc_r+0x1b4>
 8012832:	2a13      	cmp	r2, #19
 8012834:	d932      	bls.n	801289c <_realloc_r+0x1b0>
 8012836:	6821      	ldr	r1, [r4, #0]
 8012838:	60a9      	str	r1, [r5, #8]
 801283a:	6861      	ldr	r1, [r4, #4]
 801283c:	60e9      	str	r1, [r5, #12]
 801283e:	2a1b      	cmp	r2, #27
 8012840:	d81a      	bhi.n	8012878 <_realloc_r+0x18c>
 8012842:	3408      	adds	r4, #8
 8012844:	f105 0210 	add.w	r2, r5, #16
 8012848:	6821      	ldr	r1, [r4, #0]
 801284a:	6011      	str	r1, [r2, #0]
 801284c:	6861      	ldr	r1, [r4, #4]
 801284e:	6051      	str	r1, [r2, #4]
 8012850:	68a1      	ldr	r1, [r4, #8]
 8012852:	6091      	str	r1, [r2, #8]
 8012854:	eb05 0208 	add.w	r2, r5, r8
 8012858:	eba7 0708 	sub.w	r7, r7, r8
 801285c:	f047 0701 	orr.w	r7, r7, #1
 8012860:	609a      	str	r2, [r3, #8]
 8012862:	6057      	str	r7, [r2, #4]
 8012864:	686b      	ldr	r3, [r5, #4]
 8012866:	f003 0301 	and.w	r3, r3, #1
 801286a:	ea43 0308 	orr.w	r3, r3, r8
 801286e:	606b      	str	r3, [r5, #4]
 8012870:	4650      	mov	r0, sl
 8012872:	f7ff fbab 	bl	8011fcc <__malloc_unlock>
 8012876:	e78e      	b.n	8012796 <_realloc_r+0xaa>
 8012878:	68a1      	ldr	r1, [r4, #8]
 801287a:	6129      	str	r1, [r5, #16]
 801287c:	68e1      	ldr	r1, [r4, #12]
 801287e:	6169      	str	r1, [r5, #20]
 8012880:	2a24      	cmp	r2, #36	@ 0x24
 8012882:	bf01      	itttt	eq
 8012884:	6922      	ldreq	r2, [r4, #16]
 8012886:	61aa      	streq	r2, [r5, #24]
 8012888:	6961      	ldreq	r1, [r4, #20]
 801288a:	61e9      	streq	r1, [r5, #28]
 801288c:	bf19      	ittee	ne
 801288e:	3410      	addne	r4, #16
 8012890:	f105 0218 	addne.w	r2, r5, #24
 8012894:	f105 0220 	addeq.w	r2, r5, #32
 8012898:	3418      	addeq	r4, #24
 801289a:	e7d5      	b.n	8012848 <_realloc_r+0x15c>
 801289c:	465a      	mov	r2, fp
 801289e:	e7d3      	b.n	8012848 <_realloc_r+0x15c>
 80128a0:	4621      	mov	r1, r4
 80128a2:	4658      	mov	r0, fp
 80128a4:	f7fc ffa0 	bl	800f7e8 <memmove>
 80128a8:	4b43      	ldr	r3, [pc, #268]	@ (80129b8 <_realloc_r+0x2cc>)
 80128aa:	e7d3      	b.n	8012854 <_realloc_r+0x168>
 80128ac:	45b8      	cmp	r8, r7
 80128ae:	dc35      	bgt.n	801291c <_realloc_r+0x230>
 80128b0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80128b4:	4628      	mov	r0, r5
 80128b6:	60d3      	str	r3, [r2, #12]
 80128b8:	609a      	str	r2, [r3, #8]
 80128ba:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80128be:	68eb      	ldr	r3, [r5, #12]
 80128c0:	60d3      	str	r3, [r2, #12]
 80128c2:	609a      	str	r2, [r3, #8]
 80128c4:	1f32      	subs	r2, r6, #4
 80128c6:	2a24      	cmp	r2, #36	@ 0x24
 80128c8:	d824      	bhi.n	8012914 <_realloc_r+0x228>
 80128ca:	2a13      	cmp	r2, #19
 80128cc:	d908      	bls.n	80128e0 <_realloc_r+0x1f4>
 80128ce:	6823      	ldr	r3, [r4, #0]
 80128d0:	60ab      	str	r3, [r5, #8]
 80128d2:	6863      	ldr	r3, [r4, #4]
 80128d4:	60eb      	str	r3, [r5, #12]
 80128d6:	2a1b      	cmp	r2, #27
 80128d8:	d80a      	bhi.n	80128f0 <_realloc_r+0x204>
 80128da:	3408      	adds	r4, #8
 80128dc:	f105 0010 	add.w	r0, r5, #16
 80128e0:	6823      	ldr	r3, [r4, #0]
 80128e2:	6003      	str	r3, [r0, #0]
 80128e4:	6863      	ldr	r3, [r4, #4]
 80128e6:	6043      	str	r3, [r0, #4]
 80128e8:	68a3      	ldr	r3, [r4, #8]
 80128ea:	6083      	str	r3, [r0, #8]
 80128ec:	46a9      	mov	r9, r5
 80128ee:	e75c      	b.n	80127aa <_realloc_r+0xbe>
 80128f0:	68a3      	ldr	r3, [r4, #8]
 80128f2:	612b      	str	r3, [r5, #16]
 80128f4:	68e3      	ldr	r3, [r4, #12]
 80128f6:	616b      	str	r3, [r5, #20]
 80128f8:	2a24      	cmp	r2, #36	@ 0x24
 80128fa:	bf01      	itttt	eq
 80128fc:	6923      	ldreq	r3, [r4, #16]
 80128fe:	61ab      	streq	r3, [r5, #24]
 8012900:	6963      	ldreq	r3, [r4, #20]
 8012902:	61eb      	streq	r3, [r5, #28]
 8012904:	bf19      	ittee	ne
 8012906:	3410      	addne	r4, #16
 8012908:	f105 0018 	addne.w	r0, r5, #24
 801290c:	f105 0020 	addeq.w	r0, r5, #32
 8012910:	3418      	addeq	r4, #24
 8012912:	e7e5      	b.n	80128e0 <_realloc_r+0x1f4>
 8012914:	4621      	mov	r1, r4
 8012916:	f7fc ff67 	bl	800f7e8 <memmove>
 801291a:	e7e7      	b.n	80128ec <_realloc_r+0x200>
 801291c:	9b01      	ldr	r3, [sp, #4]
 801291e:	4598      	cmp	r8, r3
 8012920:	dc31      	bgt.n	8012986 <_realloc_r+0x29a>
 8012922:	4628      	mov	r0, r5
 8012924:	68eb      	ldr	r3, [r5, #12]
 8012926:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801292a:	60d3      	str	r3, [r2, #12]
 801292c:	609a      	str	r2, [r3, #8]
 801292e:	1f32      	subs	r2, r6, #4
 8012930:	2a24      	cmp	r2, #36	@ 0x24
 8012932:	d824      	bhi.n	801297e <_realloc_r+0x292>
 8012934:	2a13      	cmp	r2, #19
 8012936:	d908      	bls.n	801294a <_realloc_r+0x25e>
 8012938:	6823      	ldr	r3, [r4, #0]
 801293a:	60ab      	str	r3, [r5, #8]
 801293c:	6863      	ldr	r3, [r4, #4]
 801293e:	60eb      	str	r3, [r5, #12]
 8012940:	2a1b      	cmp	r2, #27
 8012942:	d80a      	bhi.n	801295a <_realloc_r+0x26e>
 8012944:	3408      	adds	r4, #8
 8012946:	f105 0010 	add.w	r0, r5, #16
 801294a:	6823      	ldr	r3, [r4, #0]
 801294c:	6003      	str	r3, [r0, #0]
 801294e:	6863      	ldr	r3, [r4, #4]
 8012950:	6043      	str	r3, [r0, #4]
 8012952:	68a3      	ldr	r3, [r4, #8]
 8012954:	6083      	str	r3, [r0, #8]
 8012956:	9f01      	ldr	r7, [sp, #4]
 8012958:	e7c8      	b.n	80128ec <_realloc_r+0x200>
 801295a:	68a3      	ldr	r3, [r4, #8]
 801295c:	612b      	str	r3, [r5, #16]
 801295e:	68e3      	ldr	r3, [r4, #12]
 8012960:	616b      	str	r3, [r5, #20]
 8012962:	2a24      	cmp	r2, #36	@ 0x24
 8012964:	bf01      	itttt	eq
 8012966:	6923      	ldreq	r3, [r4, #16]
 8012968:	61ab      	streq	r3, [r5, #24]
 801296a:	6963      	ldreq	r3, [r4, #20]
 801296c:	61eb      	streq	r3, [r5, #28]
 801296e:	bf19      	ittee	ne
 8012970:	3410      	addne	r4, #16
 8012972:	f105 0018 	addne.w	r0, r5, #24
 8012976:	f105 0020 	addeq.w	r0, r5, #32
 801297a:	3418      	addeq	r4, #24
 801297c:	e7e5      	b.n	801294a <_realloc_r+0x25e>
 801297e:	4621      	mov	r1, r4
 8012980:	f7fc ff32 	bl	800f7e8 <memmove>
 8012984:	e7e7      	b.n	8012956 <_realloc_r+0x26a>
 8012986:	4659      	mov	r1, fp
 8012988:	4650      	mov	r0, sl
 801298a:	f7fd fee5 	bl	8010758 <_malloc_r>
 801298e:	4683      	mov	fp, r0
 8012990:	b918      	cbnz	r0, 801299a <_realloc_r+0x2ae>
 8012992:	4650      	mov	r0, sl
 8012994:	f7ff fb1a 	bl	8011fcc <__malloc_unlock>
 8012998:	e6c7      	b.n	801272a <_realloc_r+0x3e>
 801299a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801299e:	f023 0301 	bic.w	r3, r3, #1
 80129a2:	444b      	add	r3, r9
 80129a4:	f1a0 0208 	sub.w	r2, r0, #8
 80129a8:	4293      	cmp	r3, r2
 80129aa:	d107      	bne.n	80129bc <_realloc_r+0x2d0>
 80129ac:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80129b0:	f027 0703 	bic.w	r7, r7, #3
 80129b4:	4437      	add	r7, r6
 80129b6:	e6f8      	b.n	80127aa <_realloc_r+0xbe>
 80129b8:	240002bc 	.word	0x240002bc
 80129bc:	1f32      	subs	r2, r6, #4
 80129be:	2a24      	cmp	r2, #36	@ 0x24
 80129c0:	d82d      	bhi.n	8012a1e <_realloc_r+0x332>
 80129c2:	2a13      	cmp	r2, #19
 80129c4:	d928      	bls.n	8012a18 <_realloc_r+0x32c>
 80129c6:	6823      	ldr	r3, [r4, #0]
 80129c8:	6003      	str	r3, [r0, #0]
 80129ca:	6863      	ldr	r3, [r4, #4]
 80129cc:	6043      	str	r3, [r0, #4]
 80129ce:	2a1b      	cmp	r2, #27
 80129d0:	d80e      	bhi.n	80129f0 <_realloc_r+0x304>
 80129d2:	f104 0208 	add.w	r2, r4, #8
 80129d6:	f100 0308 	add.w	r3, r0, #8
 80129da:	6811      	ldr	r1, [r2, #0]
 80129dc:	6019      	str	r1, [r3, #0]
 80129de:	6851      	ldr	r1, [r2, #4]
 80129e0:	6059      	str	r1, [r3, #4]
 80129e2:	6892      	ldr	r2, [r2, #8]
 80129e4:	609a      	str	r2, [r3, #8]
 80129e6:	4621      	mov	r1, r4
 80129e8:	4650      	mov	r0, sl
 80129ea:	f7fd fdf5 	bl	80105d8 <_free_r>
 80129ee:	e73f      	b.n	8012870 <_realloc_r+0x184>
 80129f0:	68a3      	ldr	r3, [r4, #8]
 80129f2:	6083      	str	r3, [r0, #8]
 80129f4:	68e3      	ldr	r3, [r4, #12]
 80129f6:	60c3      	str	r3, [r0, #12]
 80129f8:	2a24      	cmp	r2, #36	@ 0x24
 80129fa:	bf01      	itttt	eq
 80129fc:	6923      	ldreq	r3, [r4, #16]
 80129fe:	6103      	streq	r3, [r0, #16]
 8012a00:	6961      	ldreq	r1, [r4, #20]
 8012a02:	6141      	streq	r1, [r0, #20]
 8012a04:	bf19      	ittee	ne
 8012a06:	f104 0210 	addne.w	r2, r4, #16
 8012a0a:	f100 0310 	addne.w	r3, r0, #16
 8012a0e:	f104 0218 	addeq.w	r2, r4, #24
 8012a12:	f100 0318 	addeq.w	r3, r0, #24
 8012a16:	e7e0      	b.n	80129da <_realloc_r+0x2ee>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	4622      	mov	r2, r4
 8012a1c:	e7dd      	b.n	80129da <_realloc_r+0x2ee>
 8012a1e:	4621      	mov	r1, r4
 8012a20:	f7fc fee2 	bl	800f7e8 <memmove>
 8012a24:	e7df      	b.n	80129e6 <_realloc_r+0x2fa>
 8012a26:	4637      	mov	r7, r6
 8012a28:	e6bf      	b.n	80127aa <_realloc_r+0xbe>
 8012a2a:	431f      	orrs	r7, r3
 8012a2c:	f8c9 7004 	str.w	r7, [r9, #4]
 8012a30:	6853      	ldr	r3, [r2, #4]
 8012a32:	f043 0301 	orr.w	r3, r3, #1
 8012a36:	6053      	str	r3, [r2, #4]
 8012a38:	e6d3      	b.n	80127e2 <_realloc_r+0xf6>
 8012a3a:	bf00      	nop

08012a3c <__sread>:
 8012a3c:	b510      	push	{r4, lr}
 8012a3e:	460c      	mov	r4, r1
 8012a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a44:	f000 f8d8 	bl	8012bf8 <_read_r>
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	bfab      	itete	ge
 8012a4c:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8012a4e:	89a3      	ldrhlt	r3, [r4, #12]
 8012a50:	181b      	addge	r3, r3, r0
 8012a52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012a56:	bfac      	ite	ge
 8012a58:	6523      	strge	r3, [r4, #80]	@ 0x50
 8012a5a:	81a3      	strhlt	r3, [r4, #12]
 8012a5c:	bd10      	pop	{r4, pc}

08012a5e <__swrite>:
 8012a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a62:	461f      	mov	r7, r3
 8012a64:	898b      	ldrh	r3, [r1, #12]
 8012a66:	05db      	lsls	r3, r3, #23
 8012a68:	4605      	mov	r5, r0
 8012a6a:	460c      	mov	r4, r1
 8012a6c:	4616      	mov	r6, r2
 8012a6e:	d505      	bpl.n	8012a7c <__swrite+0x1e>
 8012a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a74:	2302      	movs	r3, #2
 8012a76:	2200      	movs	r2, #0
 8012a78:	f000 f8ac 	bl	8012bd4 <_lseek_r>
 8012a7c:	89a3      	ldrh	r3, [r4, #12]
 8012a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012a86:	81a3      	strh	r3, [r4, #12]
 8012a88:	4632      	mov	r2, r6
 8012a8a:	463b      	mov	r3, r7
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a92:	f000 b8d3 	b.w	8012c3c <_write_r>

08012a96 <__sseek>:
 8012a96:	b510      	push	{r4, lr}
 8012a98:	460c      	mov	r4, r1
 8012a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a9e:	f000 f899 	bl	8012bd4 <_lseek_r>
 8012aa2:	1c43      	adds	r3, r0, #1
 8012aa4:	89a3      	ldrh	r3, [r4, #12]
 8012aa6:	bf15      	itete	ne
 8012aa8:	6520      	strne	r0, [r4, #80]	@ 0x50
 8012aaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012aae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012ab2:	81a3      	strheq	r3, [r4, #12]
 8012ab4:	bf18      	it	ne
 8012ab6:	81a3      	strhne	r3, [r4, #12]
 8012ab8:	bd10      	pop	{r4, pc}

08012aba <__sclose>:
 8012aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012abe:	f000 b857 	b.w	8012b70 <_close_r>

08012ac2 <__ascii_wctomb>:
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	4608      	mov	r0, r1
 8012ac6:	b141      	cbz	r1, 8012ada <__ascii_wctomb+0x18>
 8012ac8:	2aff      	cmp	r2, #255	@ 0xff
 8012aca:	d904      	bls.n	8012ad6 <__ascii_wctomb+0x14>
 8012acc:	228a      	movs	r2, #138	@ 0x8a
 8012ace:	601a      	str	r2, [r3, #0]
 8012ad0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ad4:	4770      	bx	lr
 8012ad6:	700a      	strb	r2, [r1, #0]
 8012ad8:	2001      	movs	r0, #1
 8012ada:	4770      	bx	lr

08012adc <__swbuf_r>:
 8012adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ade:	460e      	mov	r6, r1
 8012ae0:	4614      	mov	r4, r2
 8012ae2:	4605      	mov	r5, r0
 8012ae4:	b118      	cbz	r0, 8012aee <__swbuf_r+0x12>
 8012ae6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012ae8:	b90b      	cbnz	r3, 8012aee <__swbuf_r+0x12>
 8012aea:	f7fc fc3b 	bl	800f364 <__sinit>
 8012aee:	69a3      	ldr	r3, [r4, #24]
 8012af0:	60a3      	str	r3, [r4, #8]
 8012af2:	89a3      	ldrh	r3, [r4, #12]
 8012af4:	0719      	lsls	r1, r3, #28
 8012af6:	d501      	bpl.n	8012afc <__swbuf_r+0x20>
 8012af8:	6923      	ldr	r3, [r4, #16]
 8012afa:	b943      	cbnz	r3, 8012b0e <__swbuf_r+0x32>
 8012afc:	4621      	mov	r1, r4
 8012afe:	4628      	mov	r0, r5
 8012b00:	f7fc fdb2 	bl	800f668 <__swsetup_r>
 8012b04:	b118      	cbz	r0, 8012b0e <__swbuf_r+0x32>
 8012b06:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012b0a:	4638      	mov	r0, r7
 8012b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b12:	b2f6      	uxtb	r6, r6
 8012b14:	049a      	lsls	r2, r3, #18
 8012b16:	4637      	mov	r7, r6
 8012b18:	d406      	bmi.n	8012b28 <__swbuf_r+0x4c>
 8012b1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012b1e:	81a3      	strh	r3, [r4, #12]
 8012b20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012b26:	6663      	str	r3, [r4, #100]	@ 0x64
 8012b28:	6823      	ldr	r3, [r4, #0]
 8012b2a:	6922      	ldr	r2, [r4, #16]
 8012b2c:	1a98      	subs	r0, r3, r2
 8012b2e:	6963      	ldr	r3, [r4, #20]
 8012b30:	4283      	cmp	r3, r0
 8012b32:	dc05      	bgt.n	8012b40 <__swbuf_r+0x64>
 8012b34:	4621      	mov	r1, r4
 8012b36:	4628      	mov	r0, r5
 8012b38:	f7fc fb42 	bl	800f1c0 <_fflush_r>
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d1e2      	bne.n	8012b06 <__swbuf_r+0x2a>
 8012b40:	68a3      	ldr	r3, [r4, #8]
 8012b42:	3b01      	subs	r3, #1
 8012b44:	60a3      	str	r3, [r4, #8]
 8012b46:	6823      	ldr	r3, [r4, #0]
 8012b48:	1c5a      	adds	r2, r3, #1
 8012b4a:	6022      	str	r2, [r4, #0]
 8012b4c:	701e      	strb	r6, [r3, #0]
 8012b4e:	6962      	ldr	r2, [r4, #20]
 8012b50:	1c43      	adds	r3, r0, #1
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d004      	beq.n	8012b60 <__swbuf_r+0x84>
 8012b56:	89a3      	ldrh	r3, [r4, #12]
 8012b58:	07db      	lsls	r3, r3, #31
 8012b5a:	d5d6      	bpl.n	8012b0a <__swbuf_r+0x2e>
 8012b5c:	2e0a      	cmp	r6, #10
 8012b5e:	d1d4      	bne.n	8012b0a <__swbuf_r+0x2e>
 8012b60:	4621      	mov	r1, r4
 8012b62:	4628      	mov	r0, r5
 8012b64:	f7fc fb2c 	bl	800f1c0 <_fflush_r>
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	d0ce      	beq.n	8012b0a <__swbuf_r+0x2e>
 8012b6c:	e7cb      	b.n	8012b06 <__swbuf_r+0x2a>
	...

08012b70 <_close_r>:
 8012b70:	b538      	push	{r3, r4, r5, lr}
 8012b72:	4d06      	ldr	r5, [pc, #24]	@ (8012b8c <_close_r+0x1c>)
 8012b74:	2300      	movs	r3, #0
 8012b76:	4604      	mov	r4, r0
 8012b78:	4608      	mov	r0, r1
 8012b7a:	602b      	str	r3, [r5, #0]
 8012b7c:	f7ef fcd8 	bl	8002530 <_close>
 8012b80:	1c43      	adds	r3, r0, #1
 8012b82:	d102      	bne.n	8012b8a <_close_r+0x1a>
 8012b84:	682b      	ldr	r3, [r5, #0]
 8012b86:	b103      	cbz	r3, 8012b8a <_close_r+0x1a>
 8012b88:	6023      	str	r3, [r4, #0]
 8012b8a:	bd38      	pop	{r3, r4, r5, pc}
 8012b8c:	24015388 	.word	0x24015388

08012b90 <_fstat_r>:
 8012b90:	b538      	push	{r3, r4, r5, lr}
 8012b92:	4d07      	ldr	r5, [pc, #28]	@ (8012bb0 <_fstat_r+0x20>)
 8012b94:	2300      	movs	r3, #0
 8012b96:	4604      	mov	r4, r0
 8012b98:	4608      	mov	r0, r1
 8012b9a:	4611      	mov	r1, r2
 8012b9c:	602b      	str	r3, [r5, #0]
 8012b9e:	f7ef fcd3 	bl	8002548 <_fstat>
 8012ba2:	1c43      	adds	r3, r0, #1
 8012ba4:	d102      	bne.n	8012bac <_fstat_r+0x1c>
 8012ba6:	682b      	ldr	r3, [r5, #0]
 8012ba8:	b103      	cbz	r3, 8012bac <_fstat_r+0x1c>
 8012baa:	6023      	str	r3, [r4, #0]
 8012bac:	bd38      	pop	{r3, r4, r5, pc}
 8012bae:	bf00      	nop
 8012bb0:	24015388 	.word	0x24015388

08012bb4 <_isatty_r>:
 8012bb4:	b538      	push	{r3, r4, r5, lr}
 8012bb6:	4d06      	ldr	r5, [pc, #24]	@ (8012bd0 <_isatty_r+0x1c>)
 8012bb8:	2300      	movs	r3, #0
 8012bba:	4604      	mov	r4, r0
 8012bbc:	4608      	mov	r0, r1
 8012bbe:	602b      	str	r3, [r5, #0]
 8012bc0:	f7ef fcd2 	bl	8002568 <_isatty>
 8012bc4:	1c43      	adds	r3, r0, #1
 8012bc6:	d102      	bne.n	8012bce <_isatty_r+0x1a>
 8012bc8:	682b      	ldr	r3, [r5, #0]
 8012bca:	b103      	cbz	r3, 8012bce <_isatty_r+0x1a>
 8012bcc:	6023      	str	r3, [r4, #0]
 8012bce:	bd38      	pop	{r3, r4, r5, pc}
 8012bd0:	24015388 	.word	0x24015388

08012bd4 <_lseek_r>:
 8012bd4:	b538      	push	{r3, r4, r5, lr}
 8012bd6:	4d07      	ldr	r5, [pc, #28]	@ (8012bf4 <_lseek_r+0x20>)
 8012bd8:	4604      	mov	r4, r0
 8012bda:	4608      	mov	r0, r1
 8012bdc:	4611      	mov	r1, r2
 8012bde:	2200      	movs	r2, #0
 8012be0:	602a      	str	r2, [r5, #0]
 8012be2:	461a      	mov	r2, r3
 8012be4:	f7ef fccb 	bl	800257e <_lseek>
 8012be8:	1c43      	adds	r3, r0, #1
 8012bea:	d102      	bne.n	8012bf2 <_lseek_r+0x1e>
 8012bec:	682b      	ldr	r3, [r5, #0]
 8012bee:	b103      	cbz	r3, 8012bf2 <_lseek_r+0x1e>
 8012bf0:	6023      	str	r3, [r4, #0]
 8012bf2:	bd38      	pop	{r3, r4, r5, pc}
 8012bf4:	24015388 	.word	0x24015388

08012bf8 <_read_r>:
 8012bf8:	b538      	push	{r3, r4, r5, lr}
 8012bfa:	4d07      	ldr	r5, [pc, #28]	@ (8012c18 <_read_r+0x20>)
 8012bfc:	4604      	mov	r4, r0
 8012bfe:	4608      	mov	r0, r1
 8012c00:	4611      	mov	r1, r2
 8012c02:	2200      	movs	r2, #0
 8012c04:	602a      	str	r2, [r5, #0]
 8012c06:	461a      	mov	r2, r3
 8012c08:	f7ef fc59 	bl	80024be <_read>
 8012c0c:	1c43      	adds	r3, r0, #1
 8012c0e:	d102      	bne.n	8012c16 <_read_r+0x1e>
 8012c10:	682b      	ldr	r3, [r5, #0]
 8012c12:	b103      	cbz	r3, 8012c16 <_read_r+0x1e>
 8012c14:	6023      	str	r3, [r4, #0]
 8012c16:	bd38      	pop	{r3, r4, r5, pc}
 8012c18:	24015388 	.word	0x24015388

08012c1c <_sbrk_r>:
 8012c1c:	b538      	push	{r3, r4, r5, lr}
 8012c1e:	4d06      	ldr	r5, [pc, #24]	@ (8012c38 <_sbrk_r+0x1c>)
 8012c20:	2300      	movs	r3, #0
 8012c22:	4604      	mov	r4, r0
 8012c24:	4608      	mov	r0, r1
 8012c26:	602b      	str	r3, [r5, #0]
 8012c28:	f7ef fcb6 	bl	8002598 <_sbrk>
 8012c2c:	1c43      	adds	r3, r0, #1
 8012c2e:	d102      	bne.n	8012c36 <_sbrk_r+0x1a>
 8012c30:	682b      	ldr	r3, [r5, #0]
 8012c32:	b103      	cbz	r3, 8012c36 <_sbrk_r+0x1a>
 8012c34:	6023      	str	r3, [r4, #0]
 8012c36:	bd38      	pop	{r3, r4, r5, pc}
 8012c38:	24015388 	.word	0x24015388

08012c3c <_write_r>:
 8012c3c:	b538      	push	{r3, r4, r5, lr}
 8012c3e:	4d07      	ldr	r5, [pc, #28]	@ (8012c5c <_write_r+0x20>)
 8012c40:	4604      	mov	r4, r0
 8012c42:	4608      	mov	r0, r1
 8012c44:	4611      	mov	r1, r2
 8012c46:	2200      	movs	r2, #0
 8012c48:	602a      	str	r2, [r5, #0]
 8012c4a:	461a      	mov	r2, r3
 8012c4c:	f7ef fc54 	bl	80024f8 <_write>
 8012c50:	1c43      	adds	r3, r0, #1
 8012c52:	d102      	bne.n	8012c5a <_write_r+0x1e>
 8012c54:	682b      	ldr	r3, [r5, #0]
 8012c56:	b103      	cbz	r3, 8012c5a <_write_r+0x1e>
 8012c58:	6023      	str	r3, [r4, #0]
 8012c5a:	bd38      	pop	{r3, r4, r5, pc}
 8012c5c:	24015388 	.word	0x24015388

08012c60 <sysconf>:
 8012c60:	2808      	cmp	r0, #8
 8012c62:	b508      	push	{r3, lr}
 8012c64:	d006      	beq.n	8012c74 <sysconf+0x14>
 8012c66:	f7fc fdff 	bl	800f868 <__errno>
 8012c6a:	2316      	movs	r3, #22
 8012c6c:	6003      	str	r3, [r0, #0]
 8012c6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c72:	bd08      	pop	{r3, pc}
 8012c74:	2080      	movs	r0, #128	@ 0x80
 8012c76:	e7fc      	b.n	8012c72 <sysconf+0x12>

08012c78 <__libc_fini_array>:
 8012c78:	b538      	push	{r3, r4, r5, lr}
 8012c7a:	4d07      	ldr	r5, [pc, #28]	@ (8012c98 <__libc_fini_array+0x20>)
 8012c7c:	4c07      	ldr	r4, [pc, #28]	@ (8012c9c <__libc_fini_array+0x24>)
 8012c7e:	1b64      	subs	r4, r4, r5
 8012c80:	10a4      	asrs	r4, r4, #2
 8012c82:	b91c      	cbnz	r4, 8012c8c <__libc_fini_array+0x14>
 8012c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c88:	f001 bc8e 	b.w	80145a8 <_fini>
 8012c8c:	3c01      	subs	r4, #1
 8012c8e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8012c92:	4798      	blx	r3
 8012c94:	e7f5      	b.n	8012c82 <__libc_fini_array+0xa>
 8012c96:	bf00      	nop
 8012c98:	08016e38 	.word	0x08016e38
 8012c9c:	08016e3c 	.word	0x08016e3c

08012ca0 <__register_exitproc>:
 8012ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ca4:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8012d1c <__register_exitproc+0x7c>
 8012ca8:	4606      	mov	r6, r0
 8012caa:	f8da 0000 	ldr.w	r0, [sl]
 8012cae:	4698      	mov	r8, r3
 8012cb0:	460f      	mov	r7, r1
 8012cb2:	4691      	mov	r9, r2
 8012cb4:	f7fc fe04 	bl	800f8c0 <__retarget_lock_acquire_recursive>
 8012cb8:	4b16      	ldr	r3, [pc, #88]	@ (8012d14 <__register_exitproc+0x74>)
 8012cba:	681c      	ldr	r4, [r3, #0]
 8012cbc:	b90c      	cbnz	r4, 8012cc2 <__register_exitproc+0x22>
 8012cbe:	4c16      	ldr	r4, [pc, #88]	@ (8012d18 <__register_exitproc+0x78>)
 8012cc0:	601c      	str	r4, [r3, #0]
 8012cc2:	6865      	ldr	r5, [r4, #4]
 8012cc4:	f8da 0000 	ldr.w	r0, [sl]
 8012cc8:	2d1f      	cmp	r5, #31
 8012cca:	dd05      	ble.n	8012cd8 <__register_exitproc+0x38>
 8012ccc:	f7fc fdf9 	bl	800f8c2 <__retarget_lock_release_recursive>
 8012cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cd8:	b19e      	cbz	r6, 8012d02 <__register_exitproc+0x62>
 8012cda:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8012cde:	2201      	movs	r2, #1
 8012ce0:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8012ce4:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8012ce8:	40aa      	lsls	r2, r5
 8012cea:	4313      	orrs	r3, r2
 8012cec:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8012cf0:	2e02      	cmp	r6, #2
 8012cf2:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8012cf6:	bf02      	ittt	eq
 8012cf8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8012cfc:	4313      	orreq	r3, r2
 8012cfe:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8012d02:	1c6b      	adds	r3, r5, #1
 8012d04:	3502      	adds	r5, #2
 8012d06:	6063      	str	r3, [r4, #4]
 8012d08:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8012d0c:	f7fc fdd9 	bl	800f8c2 <__retarget_lock_release_recursive>
 8012d10:	2000      	movs	r0, #0
 8012d12:	e7df      	b.n	8012cd4 <__register_exitproc+0x34>
 8012d14:	24015350 	.word	0x24015350
 8012d18:	2401538c 	.word	0x2401538c
 8012d1c:	240002b0 	.word	0x240002b0

08012d20 <__assert_func>:
 8012d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d22:	4614      	mov	r4, r2
 8012d24:	461a      	mov	r2, r3
 8012d26:	4b09      	ldr	r3, [pc, #36]	@ (8012d4c <__assert_func+0x2c>)
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	4605      	mov	r5, r0
 8012d2c:	68d8      	ldr	r0, [r3, #12]
 8012d2e:	b954      	cbnz	r4, 8012d46 <__assert_func+0x26>
 8012d30:	4b07      	ldr	r3, [pc, #28]	@ (8012d50 <__assert_func+0x30>)
 8012d32:	461c      	mov	r4, r3
 8012d34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d38:	9100      	str	r1, [sp, #0]
 8012d3a:	462b      	mov	r3, r5
 8012d3c:	4905      	ldr	r1, [pc, #20]	@ (8012d54 <__assert_func+0x34>)
 8012d3e:	f000 f843 	bl	8012dc8 <fiprintf>
 8012d42:	f000 f8d0 	bl	8012ee6 <abort>
 8012d46:	4b04      	ldr	r3, [pc, #16]	@ (8012d58 <__assert_func+0x38>)
 8012d48:	e7f4      	b.n	8012d34 <__assert_func+0x14>
 8012d4a:	bf00      	nop
 8012d4c:	24000188 	.word	0x24000188
 8012d50:	08014b03 	.word	0x08014b03
 8012d54:	08014ad5 	.word	0x08014ad5
 8012d58:	08014ac8 	.word	0x08014ac8

08012d5c <_calloc_r>:
 8012d5c:	b538      	push	{r3, r4, r5, lr}
 8012d5e:	fba1 1502 	umull	r1, r5, r1, r2
 8012d62:	b935      	cbnz	r5, 8012d72 <_calloc_r+0x16>
 8012d64:	f7fd fcf8 	bl	8010758 <_malloc_r>
 8012d68:	4604      	mov	r4, r0
 8012d6a:	b938      	cbnz	r0, 8012d7c <_calloc_r+0x20>
 8012d6c:	2400      	movs	r4, #0
 8012d6e:	4620      	mov	r0, r4
 8012d70:	bd38      	pop	{r3, r4, r5, pc}
 8012d72:	f7fc fd79 	bl	800f868 <__errno>
 8012d76:	230c      	movs	r3, #12
 8012d78:	6003      	str	r3, [r0, #0]
 8012d7a:	e7f7      	b.n	8012d6c <_calloc_r+0x10>
 8012d7c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8012d80:	f022 0203 	bic.w	r2, r2, #3
 8012d84:	3a04      	subs	r2, #4
 8012d86:	2a24      	cmp	r2, #36	@ 0x24
 8012d88:	d819      	bhi.n	8012dbe <_calloc_r+0x62>
 8012d8a:	2a13      	cmp	r2, #19
 8012d8c:	d915      	bls.n	8012dba <_calloc_r+0x5e>
 8012d8e:	2a1b      	cmp	r2, #27
 8012d90:	e9c0 5500 	strd	r5, r5, [r0]
 8012d94:	d806      	bhi.n	8012da4 <_calloc_r+0x48>
 8012d96:	f100 0308 	add.w	r3, r0, #8
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	e9c3 2200 	strd	r2, r2, [r3]
 8012da0:	609a      	str	r2, [r3, #8]
 8012da2:	e7e4      	b.n	8012d6e <_calloc_r+0x12>
 8012da4:	2a24      	cmp	r2, #36	@ 0x24
 8012da6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8012daa:	bf11      	iteee	ne
 8012dac:	f100 0310 	addne.w	r3, r0, #16
 8012db0:	6105      	streq	r5, [r0, #16]
 8012db2:	f100 0318 	addeq.w	r3, r0, #24
 8012db6:	6145      	streq	r5, [r0, #20]
 8012db8:	e7ef      	b.n	8012d9a <_calloc_r+0x3e>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	e7ed      	b.n	8012d9a <_calloc_r+0x3e>
 8012dbe:	4629      	mov	r1, r5
 8012dc0:	f7fc fd2c 	bl	800f81c <memset>
 8012dc4:	e7d3      	b.n	8012d6e <_calloc_r+0x12>
	...

08012dc8 <fiprintf>:
 8012dc8:	b40e      	push	{r1, r2, r3}
 8012dca:	b503      	push	{r0, r1, lr}
 8012dcc:	4601      	mov	r1, r0
 8012dce:	ab03      	add	r3, sp, #12
 8012dd0:	4805      	ldr	r0, [pc, #20]	@ (8012de8 <fiprintf+0x20>)
 8012dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012dd6:	6800      	ldr	r0, [r0, #0]
 8012dd8:	9301      	str	r3, [sp, #4]
 8012dda:	f7fb fca1 	bl	800e720 <_vfiprintf_r>
 8012dde:	b002      	add	sp, #8
 8012de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012de4:	b003      	add	sp, #12
 8012de6:	4770      	bx	lr
 8012de8:	24000188 	.word	0x24000188

08012dec <__ssprint_r>:
 8012dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df0:	6893      	ldr	r3, [r2, #8]
 8012df2:	f8d2 b000 	ldr.w	fp, [r2]
 8012df6:	9001      	str	r0, [sp, #4]
 8012df8:	460c      	mov	r4, r1
 8012dfa:	4617      	mov	r7, r2
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d157      	bne.n	8012eb0 <__ssprint_r+0xc4>
 8012e00:	2000      	movs	r0, #0
 8012e02:	2300      	movs	r3, #0
 8012e04:	607b      	str	r3, [r7, #4]
 8012e06:	b003      	add	sp, #12
 8012e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e0c:	e9db a800 	ldrd	sl, r8, [fp]
 8012e10:	f10b 0b08 	add.w	fp, fp, #8
 8012e14:	68a6      	ldr	r6, [r4, #8]
 8012e16:	6820      	ldr	r0, [r4, #0]
 8012e18:	f1b8 0f00 	cmp.w	r8, #0
 8012e1c:	d0f6      	beq.n	8012e0c <__ssprint_r+0x20>
 8012e1e:	45b0      	cmp	r8, r6
 8012e20:	d32e      	bcc.n	8012e80 <__ssprint_r+0x94>
 8012e22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e26:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012e2a:	d029      	beq.n	8012e80 <__ssprint_r+0x94>
 8012e2c:	6921      	ldr	r1, [r4, #16]
 8012e2e:	6965      	ldr	r5, [r4, #20]
 8012e30:	eba0 0901 	sub.w	r9, r0, r1
 8012e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012e3c:	f109 0001 	add.w	r0, r9, #1
 8012e40:	106d      	asrs	r5, r5, #1
 8012e42:	4440      	add	r0, r8
 8012e44:	4285      	cmp	r5, r0
 8012e46:	bf38      	it	cc
 8012e48:	4605      	movcc	r5, r0
 8012e4a:	0553      	lsls	r3, r2, #21
 8012e4c:	d534      	bpl.n	8012eb8 <__ssprint_r+0xcc>
 8012e4e:	9801      	ldr	r0, [sp, #4]
 8012e50:	4629      	mov	r1, r5
 8012e52:	f7fd fc81 	bl	8010758 <_malloc_r>
 8012e56:	4606      	mov	r6, r0
 8012e58:	2800      	cmp	r0, #0
 8012e5a:	d038      	beq.n	8012ece <__ssprint_r+0xe2>
 8012e5c:	464a      	mov	r2, r9
 8012e5e:	6921      	ldr	r1, [r4, #16]
 8012e60:	f7fc fd30 	bl	800f8c4 <memcpy>
 8012e64:	89a2      	ldrh	r2, [r4, #12]
 8012e66:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8012e6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8012e6e:	81a2      	strh	r2, [r4, #12]
 8012e70:	6126      	str	r6, [r4, #16]
 8012e72:	6165      	str	r5, [r4, #20]
 8012e74:	444e      	add	r6, r9
 8012e76:	eba5 0509 	sub.w	r5, r5, r9
 8012e7a:	6026      	str	r6, [r4, #0]
 8012e7c:	60a5      	str	r5, [r4, #8]
 8012e7e:	4646      	mov	r6, r8
 8012e80:	4546      	cmp	r6, r8
 8012e82:	bf28      	it	cs
 8012e84:	4646      	movcs	r6, r8
 8012e86:	4632      	mov	r2, r6
 8012e88:	4651      	mov	r1, sl
 8012e8a:	6820      	ldr	r0, [r4, #0]
 8012e8c:	f7fc fcac 	bl	800f7e8 <memmove>
 8012e90:	68a2      	ldr	r2, [r4, #8]
 8012e92:	1b92      	subs	r2, r2, r6
 8012e94:	60a2      	str	r2, [r4, #8]
 8012e96:	6822      	ldr	r2, [r4, #0]
 8012e98:	4432      	add	r2, r6
 8012e9a:	6022      	str	r2, [r4, #0]
 8012e9c:	68ba      	ldr	r2, [r7, #8]
 8012e9e:	eba2 0308 	sub.w	r3, r2, r8
 8012ea2:	44c2      	add	sl, r8
 8012ea4:	60bb      	str	r3, [r7, #8]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d0aa      	beq.n	8012e00 <__ssprint_r+0x14>
 8012eaa:	f04f 0800 	mov.w	r8, #0
 8012eae:	e7b1      	b.n	8012e14 <__ssprint_r+0x28>
 8012eb0:	f04f 0a00 	mov.w	sl, #0
 8012eb4:	46d0      	mov	r8, sl
 8012eb6:	e7ad      	b.n	8012e14 <__ssprint_r+0x28>
 8012eb8:	9801      	ldr	r0, [sp, #4]
 8012eba:	462a      	mov	r2, r5
 8012ebc:	f7ff fc16 	bl	80126ec <_realloc_r>
 8012ec0:	4606      	mov	r6, r0
 8012ec2:	2800      	cmp	r0, #0
 8012ec4:	d1d4      	bne.n	8012e70 <__ssprint_r+0x84>
 8012ec6:	6921      	ldr	r1, [r4, #16]
 8012ec8:	9801      	ldr	r0, [sp, #4]
 8012eca:	f7fd fb85 	bl	80105d8 <_free_r>
 8012ece:	9a01      	ldr	r2, [sp, #4]
 8012ed0:	230c      	movs	r3, #12
 8012ed2:	6013      	str	r3, [r2, #0]
 8012ed4:	89a3      	ldrh	r3, [r4, #12]
 8012ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012eda:	81a3      	strh	r3, [r4, #12]
 8012edc:	2300      	movs	r3, #0
 8012ede:	60bb      	str	r3, [r7, #8]
 8012ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ee4:	e78d      	b.n	8012e02 <__ssprint_r+0x16>

08012ee6 <abort>:
 8012ee6:	b508      	push	{r3, lr}
 8012ee8:	2006      	movs	r0, #6
 8012eea:	f000 f82d 	bl	8012f48 <raise>
 8012eee:	2001      	movs	r0, #1
 8012ef0:	f7ef fada 	bl	80024a8 <_exit>

08012ef4 <_raise_r>:
 8012ef4:	291f      	cmp	r1, #31
 8012ef6:	b538      	push	{r3, r4, r5, lr}
 8012ef8:	4605      	mov	r5, r0
 8012efa:	460c      	mov	r4, r1
 8012efc:	d904      	bls.n	8012f08 <_raise_r+0x14>
 8012efe:	2316      	movs	r3, #22
 8012f00:	6003      	str	r3, [r0, #0]
 8012f02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f06:	bd38      	pop	{r3, r4, r5, pc}
 8012f08:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8012f0c:	b112      	cbz	r2, 8012f14 <_raise_r+0x20>
 8012f0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f12:	b94b      	cbnz	r3, 8012f28 <_raise_r+0x34>
 8012f14:	4628      	mov	r0, r5
 8012f16:	f000 f831 	bl	8012f7c <_getpid_r>
 8012f1a:	4622      	mov	r2, r4
 8012f1c:	4601      	mov	r1, r0
 8012f1e:	4628      	mov	r0, r5
 8012f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f24:	f000 b818 	b.w	8012f58 <_kill_r>
 8012f28:	2b01      	cmp	r3, #1
 8012f2a:	d00a      	beq.n	8012f42 <_raise_r+0x4e>
 8012f2c:	1c59      	adds	r1, r3, #1
 8012f2e:	d103      	bne.n	8012f38 <_raise_r+0x44>
 8012f30:	2316      	movs	r3, #22
 8012f32:	6003      	str	r3, [r0, #0]
 8012f34:	2001      	movs	r0, #1
 8012f36:	e7e6      	b.n	8012f06 <_raise_r+0x12>
 8012f38:	2100      	movs	r1, #0
 8012f3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012f3e:	4620      	mov	r0, r4
 8012f40:	4798      	blx	r3
 8012f42:	2000      	movs	r0, #0
 8012f44:	e7df      	b.n	8012f06 <_raise_r+0x12>
	...

08012f48 <raise>:
 8012f48:	4b02      	ldr	r3, [pc, #8]	@ (8012f54 <raise+0xc>)
 8012f4a:	4601      	mov	r1, r0
 8012f4c:	6818      	ldr	r0, [r3, #0]
 8012f4e:	f7ff bfd1 	b.w	8012ef4 <_raise_r>
 8012f52:	bf00      	nop
 8012f54:	24000188 	.word	0x24000188

08012f58 <_kill_r>:
 8012f58:	b538      	push	{r3, r4, r5, lr}
 8012f5a:	4d07      	ldr	r5, [pc, #28]	@ (8012f78 <_kill_r+0x20>)
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	4604      	mov	r4, r0
 8012f60:	4608      	mov	r0, r1
 8012f62:	4611      	mov	r1, r2
 8012f64:	602b      	str	r3, [r5, #0]
 8012f66:	f7ef fa8f 	bl	8002488 <_kill>
 8012f6a:	1c43      	adds	r3, r0, #1
 8012f6c:	d102      	bne.n	8012f74 <_kill_r+0x1c>
 8012f6e:	682b      	ldr	r3, [r5, #0]
 8012f70:	b103      	cbz	r3, 8012f74 <_kill_r+0x1c>
 8012f72:	6023      	str	r3, [r4, #0]
 8012f74:	bd38      	pop	{r3, r4, r5, pc}
 8012f76:	bf00      	nop
 8012f78:	24015388 	.word	0x24015388

08012f7c <_getpid_r>:
 8012f7c:	f7ef ba7c 	b.w	8002478 <_getpid>

08012f80 <cabs>:
 8012f80:	b508      	push	{r3, lr}
 8012f82:	ed2d 8b06 	vpush	{d8-d10}
 8012f86:	eeb0 ab40 	vmov.f64	d10, d0
 8012f8a:	eeb0 9b41 	vmov.f64	d9, d1
 8012f8e:	f000 fc26 	bl	80137de <creal>
 8012f92:	eeb0 1b49 	vmov.f64	d1, d9
 8012f96:	eeb0 8b40 	vmov.f64	d8, d0
 8012f9a:	eeb0 0b4a 	vmov.f64	d0, d10
 8012f9e:	f000 fc1b 	bl	80137d8 <cimag>
 8012fa2:	eeb0 1b40 	vmov.f64	d1, d0
 8012fa6:	eeb0 0b48 	vmov.f64	d0, d8
 8012faa:	ecbd 8b06 	vpop	{d8-d10}
 8012fae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012fb2:	f000 bdd1 	b.w	8013b58 <hypot>
	...

08012fb8 <log>:
 8012fb8:	b4f0      	push	{r4, r5, r6, r7}
 8012fba:	ee10 0a90 	vmov	r0, s1
 8012fbe:	ee10 3a10 	vmov	r3, s0
 8012fc2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012fc6:	429c      	cmp	r4, r3
 8012fc8:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8012fcc:	4c70      	ldr	r4, [pc, #448]	@ (8013190 <log+0x1d8>)
 8012fce:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8012fd2:	418c      	sbcs	r4, r1
 8012fd4:	ed2d 8b02 	vpush	{d8}
 8012fd8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8012fdc:	d35a      	bcc.n	8013094 <log+0xdc>
 8012fde:	4a6d      	ldr	r2, [pc, #436]	@ (8013194 <log+0x1dc>)
 8012fe0:	4290      	cmp	r0, r2
 8012fe2:	bf08      	it	eq
 8012fe4:	2b00      	cmpeq	r3, #0
 8012fe6:	f000 80c4 	beq.w	8013172 <log+0x1ba>
 8012fea:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012fee:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012ff2:	4b69      	ldr	r3, [pc, #420]	@ (8013198 <log+0x1e0>)
 8012ff4:	ee20 2b00 	vmul.f64	d2, d0, d0
 8012ff8:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8012ffc:	ee20 4b02 	vmul.f64	d4, d0, d2
 8013000:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8013004:	eea6 7b00 	vfma.f64	d7, d6, d0
 8013008:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 801300c:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8013010:	eea6 7b02 	vfma.f64	d7, d6, d2
 8013014:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8013018:	eea5 6b00 	vfma.f64	d6, d5, d0
 801301c:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8013020:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8013024:	eea5 6b02 	vfma.f64	d6, d5, d2
 8013028:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 801302c:	eea3 5b00 	vfma.f64	d5, d3, d0
 8013030:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8013034:	eea3 5b02 	vfma.f64	d5, d3, d2
 8013038:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 801303c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8013040:	eea5 6b04 	vfma.f64	d6, d5, d4
 8013044:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8013048:	eea6 7b04 	vfma.f64	d7, d6, d4
 801304c:	eeb0 2b47 	vmov.f64	d2, d7
 8013050:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8013178 <log+0x1c0>
 8013054:	eeb0 6b40 	vmov.f64	d6, d0
 8013058:	eeb0 3b40 	vmov.f64	d3, d0
 801305c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8013060:	eea0 6b47 	vfms.f64	d6, d0, d7
 8013064:	ee30 8b46 	vsub.f64	d8, d0, d6
 8013068:	ee26 1b06 	vmul.f64	d1, d6, d6
 801306c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8013070:	ee30 7b43 	vsub.f64	d7, d0, d3
 8013074:	ee30 0b06 	vadd.f64	d0, d0, d6
 8013078:	eea1 7b05 	vfma.f64	d7, d1, d5
 801307c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8013080:	eea5 7b00 	vfma.f64	d7, d5, d0
 8013084:	eea2 7b04 	vfma.f64	d7, d2, d4
 8013088:	ee33 0b07 	vadd.f64	d0, d3, d7
 801308c:	ecbd 8b02 	vpop	{d8}
 8013090:	bcf0      	pop	{r4, r5, r6, r7}
 8013092:	4770      	bx	lr
 8013094:	f1a2 0410 	sub.w	r4, r2, #16
 8013098:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 801309c:	428c      	cmp	r4, r1
 801309e:	d923      	bls.n	80130e8 <log+0x130>
 80130a0:	18d9      	adds	r1, r3, r3
 80130a2:	eb40 0400 	adc.w	r4, r0, r0
 80130a6:	4321      	orrs	r1, r4
 80130a8:	d105      	bne.n	80130b6 <log+0xfe>
 80130aa:	ecbd 8b02 	vpop	{d8}
 80130ae:	2001      	movs	r0, #1
 80130b0:	bcf0      	pop	{r4, r5, r6, r7}
 80130b2:	f000 bda9 	b.w	8013c08 <__math_divzero>
 80130b6:	4939      	ldr	r1, [pc, #228]	@ (801319c <log+0x1e4>)
 80130b8:	4288      	cmp	r0, r1
 80130ba:	bf08      	it	eq
 80130bc:	2b00      	cmpeq	r3, #0
 80130be:	d0e5      	beq.n	801308c <log+0xd4>
 80130c0:	0413      	lsls	r3, r2, #16
 80130c2:	d403      	bmi.n	80130cc <log+0x114>
 80130c4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80130c8:	4393      	bics	r3, r2
 80130ca:	d104      	bne.n	80130d6 <log+0x11e>
 80130cc:	ecbd 8b02 	vpop	{d8}
 80130d0:	bcf0      	pop	{r4, r5, r6, r7}
 80130d2:	f000 bdb1 	b.w	8013c38 <__math_invalid>
 80130d6:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013180 <log+0x1c8>
 80130da:	ee20 7b07 	vmul.f64	d7, d0, d7
 80130de:	ec53 2b17 	vmov	r2, r3, d7
 80130e2:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 80130e6:	4613      	mov	r3, r2
 80130e8:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 80130ec:	492a      	ldr	r1, [pc, #168]	@ (8013198 <log+0x1e0>)
 80130ee:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 80130f2:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 80130f6:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80130fa:	0d15      	lsrs	r5, r2, #20
 80130fc:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8013100:	052d      	lsls	r5, r5, #20
 8013102:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8013106:	1e1e      	subs	r6, r3, #0
 8013108:	1b47      	subs	r7, r0, r5
 801310a:	ec47 6b16 	vmov	d6, r6, r7
 801310e:	1512      	asrs	r2, r2, #20
 8013110:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013114:	ee07 2a90 	vmov	s15, r2
 8013118:	ee25 2b05 	vmul.f64	d2, d5, d5
 801311c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8013120:	ed91 4b00 	vldr	d4, [r1]
 8013124:	ee25 1b02 	vmul.f64	d1, d5, d2
 8013128:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 801312c:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013130:	ee35 4b07 	vadd.f64	d4, d5, d7
 8013134:	ee37 0b44 	vsub.f64	d0, d7, d4
 8013138:	ed91 7b02 	vldr	d7, [r1, #8]
 801313c:	ee30 0b05 	vadd.f64	d0, d0, d5
 8013140:	eea7 0b06 	vfma.f64	d0, d7, d6
 8013144:	ed91 7b04 	vldr	d7, [r1, #16]
 8013148:	ed91 6b08 	vldr	d6, [r1, #32]
 801314c:	eea7 0b02 	vfma.f64	d0, d7, d2
 8013150:	ed91 7b06 	vldr	d7, [r1, #24]
 8013154:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8013158:	eea6 7b05 	vfma.f64	d7, d6, d5
 801315c:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8013160:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013164:	eea6 7b02 	vfma.f64	d7, d6, d2
 8013168:	eea1 0b07 	vfma.f64	d0, d1, d7
 801316c:	ee30 0b04 	vadd.f64	d0, d0, d4
 8013170:	e78c      	b.n	801308c <log+0xd4>
 8013172:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8013188 <log+0x1d0>
 8013176:	e789      	b.n	801308c <log+0xd4>
 8013178:	00000000 	.word	0x00000000
 801317c:	41a00000 	.word	0x41a00000
 8013180:	00000000 	.word	0x00000000
 8013184:	43300000 	.word	0x43300000
	...
 8013190:	000308ff 	.word	0x000308ff
 8013194:	3ff00000 	.word	0x3ff00000
 8013198:	08014b08 	.word	0x08014b08
 801319c:	7ff00000 	.word	0x7ff00000

080131a0 <checkint>:
 80131a0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80131a4:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 80131a8:	429a      	cmp	r2, r3
 80131aa:	b570      	push	{r4, r5, r6, lr}
 80131ac:	dd2a      	ble.n	8013204 <checkint+0x64>
 80131ae:	f240 4333 	movw	r3, #1075	@ 0x433
 80131b2:	429a      	cmp	r2, r3
 80131b4:	dc24      	bgt.n	8013200 <checkint+0x60>
 80131b6:	1a9b      	subs	r3, r3, r2
 80131b8:	f1a3 0620 	sub.w	r6, r3, #32
 80131bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80131c0:	fa02 f403 	lsl.w	r4, r2, r3
 80131c4:	fa02 f606 	lsl.w	r6, r2, r6
 80131c8:	f1c3 0520 	rsb	r5, r3, #32
 80131cc:	fa22 f505 	lsr.w	r5, r2, r5
 80131d0:	4334      	orrs	r4, r6
 80131d2:	432c      	orrs	r4, r5
 80131d4:	409a      	lsls	r2, r3
 80131d6:	ea20 0202 	bic.w	r2, r0, r2
 80131da:	ea21 0404 	bic.w	r4, r1, r4
 80131de:	4322      	orrs	r2, r4
 80131e0:	f1a3 0420 	sub.w	r4, r3, #32
 80131e4:	f1c3 0220 	rsb	r2, r3, #32
 80131e8:	d10c      	bne.n	8013204 <checkint+0x64>
 80131ea:	40d8      	lsrs	r0, r3
 80131ec:	fa01 f302 	lsl.w	r3, r1, r2
 80131f0:	4318      	orrs	r0, r3
 80131f2:	40e1      	lsrs	r1, r4
 80131f4:	4308      	orrs	r0, r1
 80131f6:	f000 0001 	and.w	r0, r0, #1
 80131fa:	f1d0 0002 	rsbs	r0, r0, #2
 80131fe:	bd70      	pop	{r4, r5, r6, pc}
 8013200:	2002      	movs	r0, #2
 8013202:	e7fc      	b.n	80131fe <checkint+0x5e>
 8013204:	2000      	movs	r0, #0
 8013206:	e7fa      	b.n	80131fe <checkint+0x5e>

08013208 <pow>:
 8013208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801320c:	ee10 4a90 	vmov	r4, s1
 8013210:	ed2d 8b0a 	vpush	{d8-d12}
 8013214:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8013218:	ee11 aa90 	vmov	sl, s3
 801321c:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8013220:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8013224:	429a      	cmp	r2, r3
 8013226:	ee10 5a10 	vmov	r5, s0
 801322a:	ee11 0a10 	vmov	r0, s2
 801322e:	b087      	sub	sp, #28
 8013230:	46c4      	mov	ip, r8
 8013232:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8013236:	d806      	bhi.n	8013246 <pow+0x3e>
 8013238:	f3c6 030a 	ubfx	r3, r6, #0, #11
 801323c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8013240:	2b7f      	cmp	r3, #127	@ 0x7f
 8013242:	f240 8157 	bls.w	80134f4 <pow+0x2ec>
 8013246:	1802      	adds	r2, r0, r0
 8013248:	eb4a 010a 	adc.w	r1, sl, sl
 801324c:	f06f 0b01 	mvn.w	fp, #1
 8013250:	1e57      	subs	r7, r2, #1
 8013252:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 8013256:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801325a:	45bb      	cmp	fp, r7
 801325c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8013260:	d242      	bcs.n	80132e8 <pow+0xe0>
 8013262:	ea52 0301 	orrs.w	r3, r2, r1
 8013266:	f04f 0300 	mov.w	r3, #0
 801326a:	d10c      	bne.n	8013286 <pow+0x7e>
 801326c:	196d      	adds	r5, r5, r5
 801326e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8013272:	4164      	adcs	r4, r4
 8013274:	42ab      	cmp	r3, r5
 8013276:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801327a:	41a3      	sbcs	r3, r4
 801327c:	f0c0 808f 	bcc.w	801339e <pow+0x196>
 8013280:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013284:	e02b      	b.n	80132de <pow+0xd6>
 8013286:	4ed4      	ldr	r6, [pc, #848]	@ (80135d8 <pow+0x3d0>)
 8013288:	42b4      	cmp	r4, r6
 801328a:	bf08      	it	eq
 801328c:	429d      	cmpeq	r5, r3
 801328e:	d109      	bne.n	80132a4 <pow+0x9c>
 8013290:	1800      	adds	r0, r0, r0
 8013292:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8013296:	eb4a 0a0a 	adc.w	sl, sl, sl
 801329a:	4283      	cmp	r3, r0
 801329c:	4bcf      	ldr	r3, [pc, #828]	@ (80135dc <pow+0x3d4>)
 801329e:	eb73 030a 	sbcs.w	r3, r3, sl
 80132a2:	e7eb      	b.n	801327c <pow+0x74>
 80132a4:	196d      	adds	r5, r5, r5
 80132a6:	48ce      	ldr	r0, [pc, #824]	@ (80135e0 <pow+0x3d8>)
 80132a8:	4164      	adcs	r4, r4
 80132aa:	42ab      	cmp	r3, r5
 80132ac:	eb70 0604 	sbcs.w	r6, r0, r4
 80132b0:	d375      	bcc.n	801339e <pow+0x196>
 80132b2:	4281      	cmp	r1, r0
 80132b4:	bf08      	it	eq
 80132b6:	429a      	cmpeq	r2, r3
 80132b8:	d171      	bne.n	801339e <pow+0x196>
 80132ba:	4aca      	ldr	r2, [pc, #808]	@ (80135e4 <pow+0x3dc>)
 80132bc:	4294      	cmp	r4, r2
 80132be:	bf08      	it	eq
 80132c0:	429d      	cmpeq	r5, r3
 80132c2:	d0dd      	beq.n	8013280 <pow+0x78>
 80132c4:	4294      	cmp	r4, r2
 80132c6:	ea6f 0a0a 	mvn.w	sl, sl
 80132ca:	bf34      	ite	cc
 80132cc:	2400      	movcc	r4, #0
 80132ce:	2401      	movcs	r4, #1
 80132d0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 80132d4:	4554      	cmp	r4, sl
 80132d6:	f040 81dc 	bne.w	8013692 <pow+0x48a>
 80132da:	ee21 0b01 	vmul.f64	d0, d1, d1
 80132de:	b007      	add	sp, #28
 80132e0:	ecbd 8b0a 	vpop	{d8-d12}
 80132e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e8:	196f      	adds	r7, r5, r5
 80132ea:	eb44 0904 	adc.w	r9, r4, r4
 80132ee:	1e7a      	subs	r2, r7, #1
 80132f0:	f169 0300 	sbc.w	r3, r9, #0
 80132f4:	4593      	cmp	fp, r2
 80132f6:	eb7e 0303 	sbcs.w	r3, lr, r3
 80132fa:	d225      	bcs.n	8013348 <pow+0x140>
 80132fc:	ee20 0b00 	vmul.f64	d0, d0, d0
 8013300:	2c00      	cmp	r4, #0
 8013302:	da13      	bge.n	801332c <pow+0x124>
 8013304:	4651      	mov	r1, sl
 8013306:	f7ff ff4b 	bl	80131a0 <checkint>
 801330a:	2801      	cmp	r0, #1
 801330c:	d10e      	bne.n	801332c <pow+0x124>
 801330e:	eeb1 0b40 	vneg.f64	d0, d0
 8013312:	ea57 0909 	orrs.w	r9, r7, r9
 8013316:	d10b      	bne.n	8013330 <pow+0x128>
 8013318:	f1ba 0f00 	cmp.w	sl, #0
 801331c:	dadf      	bge.n	80132de <pow+0xd6>
 801331e:	b007      	add	sp, #28
 8013320:	ecbd 8b0a 	vpop	{d8-d12}
 8013324:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013328:	f000 bc6e 	b.w	8013c08 <__math_divzero>
 801332c:	2000      	movs	r0, #0
 801332e:	e7f0      	b.n	8013312 <pow+0x10a>
 8013330:	f1ba 0f00 	cmp.w	sl, #0
 8013334:	dad3      	bge.n	80132de <pow+0xd6>
 8013336:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801333a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801333e:	ed8d 7b00 	vstr	d7, [sp]
 8013342:	ed9d 0b00 	vldr	d0, [sp]
 8013346:	e7ca      	b.n	80132de <pow+0xd6>
 8013348:	2c00      	cmp	r4, #0
 801334a:	da2b      	bge.n	80133a4 <pow+0x19c>
 801334c:	4651      	mov	r1, sl
 801334e:	f7ff ff27 	bl	80131a0 <checkint>
 8013352:	b930      	cbnz	r0, 8013362 <pow+0x15a>
 8013354:	b007      	add	sp, #28
 8013356:	ecbd 8b0a 	vpop	{d8-d12}
 801335a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801335e:	f000 bc6b 	b.w	8013c38 <__math_invalid>
 8013362:	1e41      	subs	r1, r0, #1
 8013364:	4248      	negs	r0, r1
 8013366:	4148      	adcs	r0, r1
 8013368:	0480      	lsls	r0, r0, #18
 801336a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801336e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8013372:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8013376:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801337a:	2b7f      	cmp	r3, #127	@ 0x7f
 801337c:	d92d      	bls.n	80133da <pow+0x1d2>
 801337e:	4b96      	ldr	r3, [pc, #600]	@ (80135d8 <pow+0x3d0>)
 8013380:	2000      	movs	r0, #0
 8013382:	429c      	cmp	r4, r3
 8013384:	bf08      	it	eq
 8013386:	4285      	cmpeq	r5, r0
 8013388:	f43f af7a 	beq.w	8013280 <pow+0x78>
 801338c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8013390:	428a      	cmp	r2, r1
 8013392:	d80c      	bhi.n	80133ae <pow+0x1a6>
 8013394:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013398:	42a8      	cmp	r0, r5
 801339a:	41a3      	sbcs	r3, r4
 801339c:	d204      	bcs.n	80133a8 <pow+0x1a0>
 801339e:	ee31 0b00 	vadd.f64	d0, d1, d0
 80133a2:	e79c      	b.n	80132de <pow+0xd6>
 80133a4:	2000      	movs	r0, #0
 80133a6:	e7e4      	b.n	8013372 <pow+0x16a>
 80133a8:	ee30 0b41 	vsub.f64	d0, d0, d1
 80133ac:	e797      	b.n	80132de <pow+0xd6>
 80133ae:	2d01      	cmp	r5, #1
 80133b0:	eb74 0303 	sbcs.w	r3, r4, r3
 80133b4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80133b8:	bf34      	ite	cc
 80133ba:	2301      	movcc	r3, #1
 80133bc:	2300      	movcs	r3, #0
 80133be:	4296      	cmp	r6, r2
 80133c0:	bf8c      	ite	hi
 80133c2:	2600      	movhi	r6, #0
 80133c4:	2601      	movls	r6, #1
 80133c6:	42b3      	cmp	r3, r6
 80133c8:	f000 809c 	beq.w	8013504 <pow+0x2fc>
 80133cc:	b007      	add	sp, #28
 80133ce:	ecbd 8b0a 	vpop	{d8-d12}
 80133d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d6:	f000 bc0f 	b.w	8013bf8 <__math_oflow>
 80133da:	f1bc 0f00 	cmp.w	ip, #0
 80133de:	d10a      	bne.n	80133f6 <pow+0x1ee>
 80133e0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 80135c8 <pow+0x3c0>
 80133e4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80133e8:	ec53 2b17 	vmov	r2, r3, d7
 80133ec:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 80133f0:	4615      	mov	r5, r2
 80133f2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 80133f6:	4a7c      	ldr	r2, [pc, #496]	@ (80135e8 <pow+0x3e0>)
 80133f8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80133fc:	4422      	add	r2, r4
 80133fe:	1513      	asrs	r3, r2, #20
 8013400:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8013404:	ee03 3a10 	vmov	s6, r3
 8013408:	0d12      	lsrs	r2, r2, #20
 801340a:	4b78      	ldr	r3, [pc, #480]	@ (80135ec <pow+0x3e4>)
 801340c:	0512      	lsls	r2, r2, #20
 801340e:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8013412:	1aa7      	subs	r7, r4, r2
 8013414:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8013418:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 801341c:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8013420:	1e2e      	subs	r6, r5, #0
 8013422:	ec47 6b14 	vmov	d4, r6, r7
 8013426:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 801342a:	eea4 6b05 	vfma.f64	d6, d4, d5
 801342e:	ed93 5b00 	vldr	d5, [r3]
 8013432:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8013436:	eea3 2b05 	vfma.f64	d2, d3, d5
 801343a:	ed93 5b02 	vldr	d5, [r3, #8]
 801343e:	ee36 4b02 	vadd.f64	d4, d6, d2
 8013442:	ee32 2b44 	vsub.f64	d2, d2, d4
 8013446:	eea3 7b05 	vfma.f64	d7, d3, d5
 801344a:	ed93 5b04 	vldr	d5, [r3, #16]
 801344e:	ee32 2b06 	vadd.f64	d2, d2, d6
 8013452:	ee37 7b02 	vadd.f64	d7, d7, d2
 8013456:	ee26 5b05 	vmul.f64	d5, d6, d5
 801345a:	ee26 0b05 	vmul.f64	d0, d6, d5
 801345e:	ee34 8b00 	vadd.f64	d8, d4, d0
 8013462:	eeb0 9b40 	vmov.f64	d9, d0
 8013466:	ee34 4b48 	vsub.f64	d4, d4, d8
 801346a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801346e:	ee34 ab00 	vadd.f64	d10, d4, d0
 8013472:	ed93 5b06 	vldr	d5, [r3, #24]
 8013476:	ee26 bb00 	vmul.f64	d11, d6, d0
 801347a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801347e:	ed93 4b08 	vldr	d4, [r3, #32]
 8013482:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8013486:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801348a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801348e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8013492:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8013496:	eea6 4b03 	vfma.f64	d4, d6, d3
 801349a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801349e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80134a2:	eea0 4b03 	vfma.f64	d4, d0, d3
 80134a6:	eea0 5b04 	vfma.f64	d5, d0, d4
 80134aa:	eeab 7b05 	vfma.f64	d7, d11, d5
 80134ae:	ee38 4b07 	vadd.f64	d4, d8, d7
 80134b2:	ee21 6b04 	vmul.f64	d6, d1, d4
 80134b6:	ee16 3a90 	vmov	r3, s13
 80134ba:	eeb0 5b46 	vmov.f64	d5, d6
 80134be:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80134c2:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 80134c6:	18b2      	adds	r2, r6, r2
 80134c8:	2a3e      	cmp	r2, #62	@ 0x3e
 80134ca:	ee91 5b04 	vfnms.f64	d5, d1, d4
 80134ce:	ee38 8b44 	vsub.f64	d8, d8, d4
 80134d2:	ee38 8b07 	vadd.f64	d8, d8, d7
 80134d6:	eea1 5b08 	vfma.f64	d5, d1, d8
 80134da:	d91b      	bls.n	8013514 <pow+0x30c>
 80134dc:	2a00      	cmp	r2, #0
 80134de:	da0b      	bge.n	80134f8 <pow+0x2f0>
 80134e0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80134e4:	ee36 0b00 	vadd.f64	d0, d6, d0
 80134e8:	2800      	cmp	r0, #0
 80134ea:	f43f aef8 	beq.w	80132de <pow+0xd6>
 80134ee:	eeb1 0b40 	vneg.f64	d0, d0
 80134f2:	e6f4      	b.n	80132de <pow+0xd6>
 80134f4:	2000      	movs	r0, #0
 80134f6:	e77e      	b.n	80133f6 <pow+0x1ee>
 80134f8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 80134fc:	d909      	bls.n	8013512 <pow+0x30a>
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f6bf af64 	bge.w	80133cc <pow+0x1c4>
 8013504:	b007      	add	sp, #28
 8013506:	ecbd 8b0a 	vpop	{d8-d12}
 801350a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801350e:	f000 bb6b 	b.w	8013be8 <__math_uflow>
 8013512:	2600      	movs	r6, #0
 8013514:	4936      	ldr	r1, [pc, #216]	@ (80135f0 <pow+0x3e8>)
 8013516:	ed91 4b02 	vldr	d4, [r1, #8]
 801351a:	ed91 3b00 	vldr	d3, [r1]
 801351e:	eeb0 7b44 	vmov.f64	d7, d4
 8013522:	eea6 7b03 	vfma.f64	d7, d6, d3
 8013526:	ee17 5a10 	vmov	r5, s14
 801352a:	ee37 7b44 	vsub.f64	d7, d7, d4
 801352e:	ed91 4b04 	vldr	d4, [r1, #16]
 8013532:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8013536:	eea7 6b04 	vfma.f64	d6, d7, d4
 801353a:	ed91 4b06 	vldr	d4, [r1, #24]
 801353e:	18dc      	adds	r4, r3, r3
 8013540:	f104 030f 	add.w	r3, r4, #15
 8013544:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8013548:	eea7 6b04 	vfma.f64	d6, d7, d4
 801354c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8013550:	ee35 5b06 	vadd.f64	d5, d5, d6
 8013554:	ee25 6b05 	vmul.f64	d6, d5, d5
 8013558:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801355c:	ed91 4b08 	vldr	d4, [r1, #32]
 8013560:	ee35 7b07 	vadd.f64	d7, d5, d7
 8013564:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8013568:	eea5 4b03 	vfma.f64	d4, d5, d3
 801356c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8013570:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013574:	ee26 6b06 	vmul.f64	d6, d6, d6
 8013578:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801357c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8013580:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8013584:	eea5 4b03 	vfma.f64	d4, d5, d3
 8013588:	1940      	adds	r0, r0, r5
 801358a:	2700      	movs	r7, #0
 801358c:	eb17 020c 	adds.w	r2, r7, ip
 8013590:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8013594:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013598:	2e00      	cmp	r6, #0
 801359a:	d175      	bne.n	8013688 <pow+0x480>
 801359c:	42bd      	cmp	r5, r7
 801359e:	db29      	blt.n	80135f4 <pow+0x3ec>
 80135a0:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 80135a4:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 80135a8:	4610      	mov	r0, r2
 80135aa:	ec41 0b10 	vmov	d0, r0, r1
 80135ae:	eea7 0b00 	vfma.f64	d0, d7, d0
 80135b2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80135d0 <pow+0x3c8>
 80135b6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80135ba:	b007      	add	sp, #28
 80135bc:	ecbd 8b0a 	vpop	{d8-d12}
 80135c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135c4:	f000 bb50 	b.w	8013c68 <__math_check_oflow>
 80135c8:	00000000 	.word	0x00000000
 80135cc:	43300000 	.word	0x43300000
 80135d0:	00000000 	.word	0x00000000
 80135d4:	7f000000 	.word	0x7f000000
 80135d8:	3ff00000 	.word	0x3ff00000
 80135dc:	fff00000 	.word	0xfff00000
 80135e0:	ffe00000 	.word	0xffe00000
 80135e4:	7fe00000 	.word	0x7fe00000
 80135e8:	c0196aab 	.word	0xc0196aab
 80135ec:	08015398 	.word	0x08015398
 80135f0:	08016568 	.word	0x08016568
 80135f4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80135f8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 80135fc:	4610      	mov	r0, r2
 80135fe:	ec41 0b15 	vmov	d5, r0, r1
 8013602:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8013606:	ee27 6b05 	vmul.f64	d6, d7, d5
 801360a:	ee35 7b06 	vadd.f64	d7, d5, d6
 801360e:	eeb0 4bc7 	vabs.f64	d4, d7
 8013612:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8013616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801361a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8013698 <pow+0x490>
 801361e:	d52a      	bpl.n	8013676 <pow+0x46e>
 8013620:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013624:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801362c:	ee35 5b06 	vadd.f64	d5, d5, d6
 8013630:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8013634:	bf58      	it	pl
 8013636:	eeb0 4b43 	vmovpl.f64	d4, d3
 801363a:	ee37 3b04 	vadd.f64	d3, d7, d4
 801363e:	ee34 6b43 	vsub.f64	d6, d4, d3
 8013642:	ee36 6b07 	vadd.f64	d6, d6, d7
 8013646:	ee36 6b05 	vadd.f64	d6, d6, d5
 801364a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801364e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8013652:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801365a:	d104      	bne.n	8013666 <pow+0x45e>
 801365c:	4632      	mov	r2, r6
 801365e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8013662:	ec43 2b17 	vmov	d7, r2, r3
 8013666:	ed8d 0b02 	vstr	d0, [sp, #8]
 801366a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801366e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8013672:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013676:	ee27 0b00 	vmul.f64	d0, d7, d0
 801367a:	b007      	add	sp, #28
 801367c:	ecbd 8b0a 	vpop	{d8-d12}
 8013680:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013684:	f000 bae7 	b.w	8013c56 <__math_check_uflow>
 8013688:	ec43 2b10 	vmov	d0, r2, r3
 801368c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8013690:	e625      	b.n	80132de <pow+0xd6>
 8013692:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 80136a0 <pow+0x498>
 8013696:	e622      	b.n	80132de <pow+0xd6>
 8013698:	00000000 	.word	0x00000000
 801369c:	00100000 	.word	0x00100000
	...

080136a8 <cos>:
 80136a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136aa:	eeb0 7b40 	vmov.f64	d7, d0
 80136ae:	ee17 3a90 	vmov	r3, s15
 80136b2:	4a21      	ldr	r2, [pc, #132]	@ (8013738 <cos+0x90>)
 80136b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80136b8:	4293      	cmp	r3, r2
 80136ba:	d806      	bhi.n	80136ca <cos+0x22>
 80136bc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8013730 <cos+0x88>
 80136c0:	b005      	add	sp, #20
 80136c2:	f85d eb04 	ldr.w	lr, [sp], #4
 80136c6:	f000 bd5f 	b.w	8014188 <__kernel_cos>
 80136ca:	4a1c      	ldr	r2, [pc, #112]	@ (801373c <cos+0x94>)
 80136cc:	4293      	cmp	r3, r2
 80136ce:	d904      	bls.n	80136da <cos+0x32>
 80136d0:	ee30 0b40 	vsub.f64	d0, d0, d0
 80136d4:	b005      	add	sp, #20
 80136d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80136da:	4668      	mov	r0, sp
 80136dc:	f000 f8f8 	bl	80138d0 <__ieee754_rem_pio2>
 80136e0:	f000 0003 	and.w	r0, r0, #3
 80136e4:	2801      	cmp	r0, #1
 80136e6:	d009      	beq.n	80136fc <cos+0x54>
 80136e8:	2802      	cmp	r0, #2
 80136ea:	d010      	beq.n	801370e <cos+0x66>
 80136ec:	b9b0      	cbnz	r0, 801371c <cos+0x74>
 80136ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80136f2:	ed9d 0b00 	vldr	d0, [sp]
 80136f6:	f000 fd47 	bl	8014188 <__kernel_cos>
 80136fa:	e7eb      	b.n	80136d4 <cos+0x2c>
 80136fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013700:	ed9d 0b00 	vldr	d0, [sp]
 8013704:	f000 fda8 	bl	8014258 <__kernel_sin>
 8013708:	eeb1 0b40 	vneg.f64	d0, d0
 801370c:	e7e2      	b.n	80136d4 <cos+0x2c>
 801370e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013712:	ed9d 0b00 	vldr	d0, [sp]
 8013716:	f000 fd37 	bl	8014188 <__kernel_cos>
 801371a:	e7f5      	b.n	8013708 <cos+0x60>
 801371c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013720:	ed9d 0b00 	vldr	d0, [sp]
 8013724:	2001      	movs	r0, #1
 8013726:	f000 fd97 	bl	8014258 <__kernel_sin>
 801372a:	e7d3      	b.n	80136d4 <cos+0x2c>
 801372c:	f3af 8000 	nop.w
	...
 8013738:	3fe921fb 	.word	0x3fe921fb
 801373c:	7fefffff 	.word	0x7fefffff

08013740 <sin>:
 8013740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013742:	eeb0 7b40 	vmov.f64	d7, d0
 8013746:	ee17 3a90 	vmov	r3, s15
 801374a:	4a21      	ldr	r2, [pc, #132]	@ (80137d0 <sin+0x90>)
 801374c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013750:	4293      	cmp	r3, r2
 8013752:	d807      	bhi.n	8013764 <sin+0x24>
 8013754:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80137c8 <sin+0x88>
 8013758:	2000      	movs	r0, #0
 801375a:	b005      	add	sp, #20
 801375c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013760:	f000 bd7a 	b.w	8014258 <__kernel_sin>
 8013764:	4a1b      	ldr	r2, [pc, #108]	@ (80137d4 <sin+0x94>)
 8013766:	4293      	cmp	r3, r2
 8013768:	d904      	bls.n	8013774 <sin+0x34>
 801376a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801376e:	b005      	add	sp, #20
 8013770:	f85d fb04 	ldr.w	pc, [sp], #4
 8013774:	4668      	mov	r0, sp
 8013776:	f000 f8ab 	bl	80138d0 <__ieee754_rem_pio2>
 801377a:	f000 0003 	and.w	r0, r0, #3
 801377e:	2801      	cmp	r0, #1
 8013780:	d00a      	beq.n	8013798 <sin+0x58>
 8013782:	2802      	cmp	r0, #2
 8013784:	d00f      	beq.n	80137a6 <sin+0x66>
 8013786:	b9c0      	cbnz	r0, 80137ba <sin+0x7a>
 8013788:	ed9d 1b02 	vldr	d1, [sp, #8]
 801378c:	ed9d 0b00 	vldr	d0, [sp]
 8013790:	2001      	movs	r0, #1
 8013792:	f000 fd61 	bl	8014258 <__kernel_sin>
 8013796:	e7ea      	b.n	801376e <sin+0x2e>
 8013798:	ed9d 1b02 	vldr	d1, [sp, #8]
 801379c:	ed9d 0b00 	vldr	d0, [sp]
 80137a0:	f000 fcf2 	bl	8014188 <__kernel_cos>
 80137a4:	e7e3      	b.n	801376e <sin+0x2e>
 80137a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80137aa:	ed9d 0b00 	vldr	d0, [sp]
 80137ae:	2001      	movs	r0, #1
 80137b0:	f000 fd52 	bl	8014258 <__kernel_sin>
 80137b4:	eeb1 0b40 	vneg.f64	d0, d0
 80137b8:	e7d9      	b.n	801376e <sin+0x2e>
 80137ba:	ed9d 1b02 	vldr	d1, [sp, #8]
 80137be:	ed9d 0b00 	vldr	d0, [sp]
 80137c2:	f000 fce1 	bl	8014188 <__kernel_cos>
 80137c6:	e7f5      	b.n	80137b4 <sin+0x74>
	...
 80137d0:	3fe921fb 	.word	0x3fe921fb
 80137d4:	7fefffff 	.word	0x7fefffff

080137d8 <cimag>:
 80137d8:	eeb0 0b41 	vmov.f64	d0, d1
 80137dc:	4770      	bx	lr

080137de <creal>:
 80137de:	4770      	bx	lr

080137e0 <floor>:
 80137e0:	ee10 3a90 	vmov	r3, s1
 80137e4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80137e8:	ee10 2a10 	vmov	r2, s0
 80137ec:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 80137f0:	2913      	cmp	r1, #19
 80137f2:	b530      	push	{r4, r5, lr}
 80137f4:	4615      	mov	r5, r2
 80137f6:	dc33      	bgt.n	8013860 <floor+0x80>
 80137f8:	2900      	cmp	r1, #0
 80137fa:	da18      	bge.n	801382e <floor+0x4e>
 80137fc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 80138c0 <floor+0xe0>
 8013800:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013804:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801380c:	dd0a      	ble.n	8013824 <floor+0x44>
 801380e:	2b00      	cmp	r3, #0
 8013810:	da50      	bge.n	80138b4 <floor+0xd4>
 8013812:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013816:	4313      	orrs	r3, r2
 8013818:	2200      	movs	r2, #0
 801381a:	4293      	cmp	r3, r2
 801381c:	4b2a      	ldr	r3, [pc, #168]	@ (80138c8 <floor+0xe8>)
 801381e:	bf08      	it	eq
 8013820:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013824:	4619      	mov	r1, r3
 8013826:	4610      	mov	r0, r2
 8013828:	ec41 0b10 	vmov	d0, r0, r1
 801382c:	e01f      	b.n	801386e <floor+0x8e>
 801382e:	4827      	ldr	r0, [pc, #156]	@ (80138cc <floor+0xec>)
 8013830:	4108      	asrs	r0, r1
 8013832:	ea03 0400 	and.w	r4, r3, r0
 8013836:	4314      	orrs	r4, r2
 8013838:	d019      	beq.n	801386e <floor+0x8e>
 801383a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80138c0 <floor+0xe0>
 801383e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013842:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801384a:	ddeb      	ble.n	8013824 <floor+0x44>
 801384c:	2b00      	cmp	r3, #0
 801384e:	bfbe      	ittt	lt
 8013850:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8013854:	410a      	asrlt	r2, r1
 8013856:	189b      	addlt	r3, r3, r2
 8013858:	ea23 0300 	bic.w	r3, r3, r0
 801385c:	2200      	movs	r2, #0
 801385e:	e7e1      	b.n	8013824 <floor+0x44>
 8013860:	2933      	cmp	r1, #51	@ 0x33
 8013862:	dd05      	ble.n	8013870 <floor+0x90>
 8013864:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013868:	d101      	bne.n	801386e <floor+0x8e>
 801386a:	ee30 0b00 	vadd.f64	d0, d0, d0
 801386e:	bd30      	pop	{r4, r5, pc}
 8013870:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8013874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013878:	40e0      	lsrs	r0, r4
 801387a:	4210      	tst	r0, r2
 801387c:	d0f7      	beq.n	801386e <floor+0x8e>
 801387e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80138c0 <floor+0xe0>
 8013882:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013886:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801388a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388e:	ddc9      	ble.n	8013824 <floor+0x44>
 8013890:	2b00      	cmp	r3, #0
 8013892:	da02      	bge.n	801389a <floor+0xba>
 8013894:	2914      	cmp	r1, #20
 8013896:	d103      	bne.n	80138a0 <floor+0xc0>
 8013898:	3301      	adds	r3, #1
 801389a:	ea22 0200 	bic.w	r2, r2, r0
 801389e:	e7c1      	b.n	8013824 <floor+0x44>
 80138a0:	2401      	movs	r4, #1
 80138a2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 80138a6:	fa04 f101 	lsl.w	r1, r4, r1
 80138aa:	440a      	add	r2, r1
 80138ac:	42aa      	cmp	r2, r5
 80138ae:	bf38      	it	cc
 80138b0:	191b      	addcc	r3, r3, r4
 80138b2:	e7f2      	b.n	801389a <floor+0xba>
 80138b4:	2200      	movs	r2, #0
 80138b6:	4613      	mov	r3, r2
 80138b8:	e7b4      	b.n	8013824 <floor+0x44>
 80138ba:	bf00      	nop
 80138bc:	f3af 8000 	nop.w
 80138c0:	8800759c 	.word	0x8800759c
 80138c4:	7e37e43c 	.word	0x7e37e43c
 80138c8:	bff00000 	.word	0xbff00000
 80138cc:	000fffff 	.word	0x000fffff

080138d0 <__ieee754_rem_pio2>:
 80138d0:	b570      	push	{r4, r5, r6, lr}
 80138d2:	eeb0 7b40 	vmov.f64	d7, d0
 80138d6:	ee17 5a90 	vmov	r5, s15
 80138da:	4b99      	ldr	r3, [pc, #612]	@ (8013b40 <__ieee754_rem_pio2+0x270>)
 80138dc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80138e0:	429e      	cmp	r6, r3
 80138e2:	b088      	sub	sp, #32
 80138e4:	4604      	mov	r4, r0
 80138e6:	d807      	bhi.n	80138f8 <__ieee754_rem_pio2+0x28>
 80138e8:	2200      	movs	r2, #0
 80138ea:	2300      	movs	r3, #0
 80138ec:	ed84 0b00 	vstr	d0, [r4]
 80138f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80138f4:	2000      	movs	r0, #0
 80138f6:	e01b      	b.n	8013930 <__ieee754_rem_pio2+0x60>
 80138f8:	4b92      	ldr	r3, [pc, #584]	@ (8013b44 <__ieee754_rem_pio2+0x274>)
 80138fa:	429e      	cmp	r6, r3
 80138fc:	d83b      	bhi.n	8013976 <__ieee754_rem_pio2+0xa6>
 80138fe:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8013902:	2d00      	cmp	r5, #0
 8013904:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8013b00 <__ieee754_rem_pio2+0x230>
 8013908:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 801390c:	dd19      	ble.n	8013942 <__ieee754_rem_pio2+0x72>
 801390e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013912:	429e      	cmp	r6, r3
 8013914:	d00e      	beq.n	8013934 <__ieee754_rem_pio2+0x64>
 8013916:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8013b08 <__ieee754_rem_pio2+0x238>
 801391a:	ee37 6b45 	vsub.f64	d6, d7, d5
 801391e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013922:	ed84 6b00 	vstr	d6, [r4]
 8013926:	ee37 7b45 	vsub.f64	d7, d7, d5
 801392a:	ed84 7b02 	vstr	d7, [r4, #8]
 801392e:	2001      	movs	r0, #1
 8013930:	b008      	add	sp, #32
 8013932:	bd70      	pop	{r4, r5, r6, pc}
 8013934:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8013b10 <__ieee754_rem_pio2+0x240>
 8013938:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8013b18 <__ieee754_rem_pio2+0x248>
 801393c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013940:	e7eb      	b.n	801391a <__ieee754_rem_pio2+0x4a>
 8013942:	429e      	cmp	r6, r3
 8013944:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013948:	d00e      	beq.n	8013968 <__ieee754_rem_pio2+0x98>
 801394a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8013b08 <__ieee754_rem_pio2+0x238>
 801394e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8013952:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013956:	ed84 6b00 	vstr	d6, [r4]
 801395a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801395e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013962:	ed84 7b02 	vstr	d7, [r4, #8]
 8013966:	e7e3      	b.n	8013930 <__ieee754_rem_pio2+0x60>
 8013968:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8013b10 <__ieee754_rem_pio2+0x240>
 801396c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8013b18 <__ieee754_rem_pio2+0x248>
 8013970:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013974:	e7eb      	b.n	801394e <__ieee754_rem_pio2+0x7e>
 8013976:	4b74      	ldr	r3, [pc, #464]	@ (8013b48 <__ieee754_rem_pio2+0x278>)
 8013978:	429e      	cmp	r6, r3
 801397a:	d870      	bhi.n	8013a5e <__ieee754_rem_pio2+0x18e>
 801397c:	f000 fcc4 	bl	8014308 <fabs>
 8013980:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8013984:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013b20 <__ieee754_rem_pio2+0x250>
 8013988:	eea0 7b06 	vfma.f64	d7, d0, d6
 801398c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8013990:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013994:	ee17 0a90 	vmov	r0, s15
 8013998:	eeb1 4b45 	vneg.f64	d4, d5
 801399c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8013b00 <__ieee754_rem_pio2+0x230>
 80139a0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80139a4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8013b08 <__ieee754_rem_pio2+0x238>
 80139a8:	281f      	cmp	r0, #31
 80139aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80139ae:	ee30 6b47 	vsub.f64	d6, d0, d7
 80139b2:	dc05      	bgt.n	80139c0 <__ieee754_rem_pio2+0xf0>
 80139b4:	4b65      	ldr	r3, [pc, #404]	@ (8013b4c <__ieee754_rem_pio2+0x27c>)
 80139b6:	1e42      	subs	r2, r0, #1
 80139b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139bc:	42b3      	cmp	r3, r6
 80139be:	d109      	bne.n	80139d4 <__ieee754_rem_pio2+0x104>
 80139c0:	ee16 3a90 	vmov	r3, s13
 80139c4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80139c8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80139cc:	2b10      	cmp	r3, #16
 80139ce:	ea4f 5226 	mov.w	r2, r6, asr #20
 80139d2:	dc02      	bgt.n	80139da <__ieee754_rem_pio2+0x10a>
 80139d4:	ed84 6b00 	vstr	d6, [r4]
 80139d8:	e01a      	b.n	8013a10 <__ieee754_rem_pio2+0x140>
 80139da:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8013b10 <__ieee754_rem_pio2+0x240>
 80139de:	eeb0 6b40 	vmov.f64	d6, d0
 80139e2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80139e6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80139ea:	eea4 7b03 	vfma.f64	d7, d4, d3
 80139ee:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8013b18 <__ieee754_rem_pio2+0x248>
 80139f2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80139f6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80139fa:	ee13 3a90 	vmov	r3, s7
 80139fe:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013a02:	1ad3      	subs	r3, r2, r3
 8013a04:	2b31      	cmp	r3, #49	@ 0x31
 8013a06:	dc17      	bgt.n	8013a38 <__ieee754_rem_pio2+0x168>
 8013a08:	eeb0 0b46 	vmov.f64	d0, d6
 8013a0c:	ed84 3b00 	vstr	d3, [r4]
 8013a10:	ed94 6b00 	vldr	d6, [r4]
 8013a14:	2d00      	cmp	r5, #0
 8013a16:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013a1a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013a1e:	ed84 0b02 	vstr	d0, [r4, #8]
 8013a22:	da85      	bge.n	8013930 <__ieee754_rem_pio2+0x60>
 8013a24:	eeb1 6b46 	vneg.f64	d6, d6
 8013a28:	eeb1 0b40 	vneg.f64	d0, d0
 8013a2c:	ed84 6b00 	vstr	d6, [r4]
 8013a30:	ed84 0b02 	vstr	d0, [r4, #8]
 8013a34:	4240      	negs	r0, r0
 8013a36:	e77b      	b.n	8013930 <__ieee754_rem_pio2+0x60>
 8013a38:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8013b28 <__ieee754_rem_pio2+0x258>
 8013a3c:	eeb0 0b46 	vmov.f64	d0, d6
 8013a40:	eea4 0b07 	vfma.f64	d0, d4, d7
 8013a44:	ee36 6b40 	vsub.f64	d6, d6, d0
 8013a48:	eea4 6b07 	vfma.f64	d6, d4, d7
 8013a4c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8013b30 <__ieee754_rem_pio2+0x260>
 8013a50:	eeb0 7b46 	vmov.f64	d7, d6
 8013a54:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8013a58:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013a5c:	e7ba      	b.n	80139d4 <__ieee754_rem_pio2+0x104>
 8013a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8013b50 <__ieee754_rem_pio2+0x280>)
 8013a60:	429e      	cmp	r6, r3
 8013a62:	d906      	bls.n	8013a72 <__ieee754_rem_pio2+0x1a2>
 8013a64:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013a68:	ed80 7b02 	vstr	d7, [r0, #8]
 8013a6c:	ed80 7b00 	vstr	d7, [r0]
 8013a70:	e740      	b.n	80138f4 <__ieee754_rem_pio2+0x24>
 8013a72:	ee10 3a10 	vmov	r3, s0
 8013a76:	1532      	asrs	r2, r6, #20
 8013a78:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8013a82:	ec41 0b17 	vmov	d7, r0, r1
 8013a86:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013a8a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8013b38 <__ieee754_rem_pio2+0x268>
 8013a8e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013a92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013a96:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013a9a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013a9e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013aa2:	a808      	add	r0, sp, #32
 8013aa4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013aa8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013aac:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013ab0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013ab4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ab8:	2103      	movs	r1, #3
 8013aba:	ed30 7b02 	vldmdb	r0!, {d7}
 8013abe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ac6:	460b      	mov	r3, r1
 8013ac8:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8013acc:	d0f5      	beq.n	8013aba <__ieee754_rem_pio2+0x1ea>
 8013ace:	4921      	ldr	r1, [pc, #132]	@ (8013b54 <__ieee754_rem_pio2+0x284>)
 8013ad0:	9101      	str	r1, [sp, #4]
 8013ad2:	2102      	movs	r1, #2
 8013ad4:	9100      	str	r1, [sp, #0]
 8013ad6:	a802      	add	r0, sp, #8
 8013ad8:	4621      	mov	r1, r4
 8013ada:	f000 f8d9 	bl	8013c90 <__kernel_rem_pio2>
 8013ade:	2d00      	cmp	r5, #0
 8013ae0:	f6bf af26 	bge.w	8013930 <__ieee754_rem_pio2+0x60>
 8013ae4:	ed94 7b00 	vldr	d7, [r4]
 8013ae8:	eeb1 7b47 	vneg.f64	d7, d7
 8013aec:	ed84 7b00 	vstr	d7, [r4]
 8013af0:	ed94 7b02 	vldr	d7, [r4, #8]
 8013af4:	eeb1 7b47 	vneg.f64	d7, d7
 8013af8:	ed84 7b02 	vstr	d7, [r4, #8]
 8013afc:	e79a      	b.n	8013a34 <__ieee754_rem_pio2+0x164>
 8013afe:	bf00      	nop
 8013b00:	54400000 	.word	0x54400000
 8013b04:	3ff921fb 	.word	0x3ff921fb
 8013b08:	1a626331 	.word	0x1a626331
 8013b0c:	3dd0b461 	.word	0x3dd0b461
 8013b10:	1a600000 	.word	0x1a600000
 8013b14:	3dd0b461 	.word	0x3dd0b461
 8013b18:	2e037073 	.word	0x2e037073
 8013b1c:	3ba3198a 	.word	0x3ba3198a
 8013b20:	6dc9c883 	.word	0x6dc9c883
 8013b24:	3fe45f30 	.word	0x3fe45f30
 8013b28:	2e000000 	.word	0x2e000000
 8013b2c:	3ba3198a 	.word	0x3ba3198a
 8013b30:	252049c1 	.word	0x252049c1
 8013b34:	397b839a 	.word	0x397b839a
 8013b38:	00000000 	.word	0x00000000
 8013b3c:	41700000 	.word	0x41700000
 8013b40:	3fe921fb 	.word	0x3fe921fb
 8013b44:	4002d97b 	.word	0x4002d97b
 8013b48:	413921fb 	.word	0x413921fb
 8013b4c:	080163e0 	.word	0x080163e0
 8013b50:	7fefffff 	.word	0x7fefffff
 8013b54:	08016460 	.word	0x08016460

08013b58 <hypot>:
 8013b58:	b508      	push	{r3, lr}
 8013b5a:	ed2d 8b06 	vpush	{d8-d10}
 8013b5e:	eeb0 ab40 	vmov.f64	d10, d0
 8013b62:	eeb0 9b41 	vmov.f64	d9, d1
 8013b66:	f000 fc63 	bl	8014430 <__ieee754_hypot>
 8013b6a:	eeb0 8b40 	vmov.f64	d8, d0
 8013b6e:	f000 fbd3 	bl	8014318 <finite>
 8013b72:	b978      	cbnz	r0, 8013b94 <hypot+0x3c>
 8013b74:	eeb0 0b4a 	vmov.f64	d0, d10
 8013b78:	f000 fbce 	bl	8014318 <finite>
 8013b7c:	b150      	cbz	r0, 8013b94 <hypot+0x3c>
 8013b7e:	eeb0 0b49 	vmov.f64	d0, d9
 8013b82:	f000 fbc9 	bl	8014318 <finite>
 8013b86:	b128      	cbz	r0, 8013b94 <hypot+0x3c>
 8013b88:	f7fb fe6e 	bl	800f868 <__errno>
 8013b8c:	ed9f 8b04 	vldr	d8, [pc, #16]	@ 8013ba0 <hypot+0x48>
 8013b90:	2322      	movs	r3, #34	@ 0x22
 8013b92:	6003      	str	r3, [r0, #0]
 8013b94:	eeb0 0b48 	vmov.f64	d0, d8
 8013b98:	ecbd 8b06 	vpop	{d8-d10}
 8013b9c:	bd08      	pop	{r3, pc}
 8013b9e:	bf00      	nop
 8013ba0:	00000000 	.word	0x00000000
 8013ba4:	7ff00000 	.word	0x7ff00000

08013ba8 <with_errno>:
 8013ba8:	b510      	push	{r4, lr}
 8013baa:	ed2d 8b02 	vpush	{d8}
 8013bae:	eeb0 8b40 	vmov.f64	d8, d0
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	f7fb fe58 	bl	800f868 <__errno>
 8013bb8:	eeb0 0b48 	vmov.f64	d0, d8
 8013bbc:	ecbd 8b02 	vpop	{d8}
 8013bc0:	6004      	str	r4, [r0, #0]
 8013bc2:	bd10      	pop	{r4, pc}

08013bc4 <xflow>:
 8013bc4:	b082      	sub	sp, #8
 8013bc6:	b158      	cbz	r0, 8013be0 <xflow+0x1c>
 8013bc8:	eeb1 7b40 	vneg.f64	d7, d0
 8013bcc:	ed8d 7b00 	vstr	d7, [sp]
 8013bd0:	ed9d 7b00 	vldr	d7, [sp]
 8013bd4:	2022      	movs	r0, #34	@ 0x22
 8013bd6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013bda:	b002      	add	sp, #8
 8013bdc:	f7ff bfe4 	b.w	8013ba8 <with_errno>
 8013be0:	eeb0 7b40 	vmov.f64	d7, d0
 8013be4:	e7f2      	b.n	8013bcc <xflow+0x8>
	...

08013be8 <__math_uflow>:
 8013be8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013bf0 <__math_uflow+0x8>
 8013bec:	f7ff bfea 	b.w	8013bc4 <xflow>
 8013bf0:	00000000 	.word	0x00000000
 8013bf4:	10000000 	.word	0x10000000

08013bf8 <__math_oflow>:
 8013bf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013c00 <__math_oflow+0x8>
 8013bfc:	f7ff bfe2 	b.w	8013bc4 <xflow>
 8013c00:	00000000 	.word	0x00000000
 8013c04:	70000000 	.word	0x70000000

08013c08 <__math_divzero>:
 8013c08:	b082      	sub	sp, #8
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8013c10:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8013c14:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8013c18:	ed8d 7b00 	vstr	d7, [sp]
 8013c1c:	ed9d 0b00 	vldr	d0, [sp]
 8013c20:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8013c30 <__math_divzero+0x28>
 8013c24:	2022      	movs	r0, #34	@ 0x22
 8013c26:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8013c2a:	b002      	add	sp, #8
 8013c2c:	f7ff bfbc 	b.w	8013ba8 <with_errno>
	...

08013c38 <__math_invalid>:
 8013c38:	eeb0 7b40 	vmov.f64	d7, d0
 8013c3c:	eeb4 7b47 	vcmp.f64	d7, d7
 8013c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c44:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013c48:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8013c4c:	d602      	bvs.n	8013c54 <__math_invalid+0x1c>
 8013c4e:	2021      	movs	r0, #33	@ 0x21
 8013c50:	f7ff bfaa 	b.w	8013ba8 <with_errno>
 8013c54:	4770      	bx	lr

08013c56 <__math_check_uflow>:
 8013c56:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c5e:	d102      	bne.n	8013c66 <__math_check_uflow+0x10>
 8013c60:	2022      	movs	r0, #34	@ 0x22
 8013c62:	f7ff bfa1 	b.w	8013ba8 <with_errno>
 8013c66:	4770      	bx	lr

08013c68 <__math_check_oflow>:
 8013c68:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8013c88 <__math_check_oflow+0x20>
 8013c6c:	eeb0 7bc0 	vabs.f64	d7, d0
 8013c70:	eeb4 7b46 	vcmp.f64	d7, d6
 8013c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c78:	dd02      	ble.n	8013c80 <__math_check_oflow+0x18>
 8013c7a:	2022      	movs	r0, #34	@ 0x22
 8013c7c:	f7ff bf94 	b.w	8013ba8 <with_errno>
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	f3af 8000 	nop.w
 8013c88:	ffffffff 	.word	0xffffffff
 8013c8c:	7fefffff 	.word	0x7fefffff

08013c90 <__kernel_rem_pio2>:
 8013c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c94:	ed2d 8b06 	vpush	{d8-d10}
 8013c98:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8013c9c:	469b      	mov	fp, r3
 8013c9e:	9001      	str	r0, [sp, #4]
 8013ca0:	4bbb      	ldr	r3, [pc, #748]	@ (8013f90 <__kernel_rem_pio2+0x300>)
 8013ca2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8013ca4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8013ca8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8013cac:	f112 0f14 	cmn.w	r2, #20
 8013cb0:	bfa8      	it	ge
 8013cb2:	1ed3      	subge	r3, r2, #3
 8013cb4:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8013cb8:	bfb8      	it	lt
 8013cba:	2300      	movlt	r3, #0
 8013cbc:	f06f 0517 	mvn.w	r5, #23
 8013cc0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8013f78 <__kernel_rem_pio2+0x2e8>
 8013cc4:	bfa4      	itt	ge
 8013cc6:	2018      	movge	r0, #24
 8013cc8:	fb93 f3f0 	sdivge	r3, r3, r0
 8013ccc:	fb03 5505 	mla	r5, r3, r5, r5
 8013cd0:	eba3 040a 	sub.w	r4, r3, sl
 8013cd4:	4415      	add	r5, r2
 8013cd6:	460f      	mov	r7, r1
 8013cd8:	eb09 060a 	add.w	r6, r9, sl
 8013cdc:	a81a      	add	r0, sp, #104	@ 0x68
 8013cde:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	42b2      	cmp	r2, r6
 8013ce6:	dd0e      	ble.n	8013d06 <__kernel_rem_pio2+0x76>
 8013ce8:	aa1a      	add	r2, sp, #104	@ 0x68
 8013cea:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8013cee:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8013cf2:	2600      	movs	r6, #0
 8013cf4:	454e      	cmp	r6, r9
 8013cf6:	dc25      	bgt.n	8013d44 <__kernel_rem_pio2+0xb4>
 8013cf8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8013f78 <__kernel_rem_pio2+0x2e8>
 8013cfc:	f8dd c004 	ldr.w	ip, [sp, #4]
 8013d00:	4614      	mov	r4, r2
 8013d02:	2000      	movs	r0, #0
 8013d04:	e015      	b.n	8013d32 <__kernel_rem_pio2+0xa2>
 8013d06:	42d4      	cmn	r4, r2
 8013d08:	d409      	bmi.n	8013d1e <__kernel_rem_pio2+0x8e>
 8013d0a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8013d0e:	ee07 1a90 	vmov	s15, r1
 8013d12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013d16:	eca0 7b02 	vstmia	r0!, {d7}
 8013d1a:	3201      	adds	r2, #1
 8013d1c:	e7e2      	b.n	8013ce4 <__kernel_rem_pio2+0x54>
 8013d1e:	eeb0 7b46 	vmov.f64	d7, d6
 8013d22:	e7f8      	b.n	8013d16 <__kernel_rem_pio2+0x86>
 8013d24:	ecbc 5b02 	vldmia	ip!, {d5}
 8013d28:	ed94 6b00 	vldr	d6, [r4]
 8013d2c:	3001      	adds	r0, #1
 8013d2e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013d32:	4550      	cmp	r0, sl
 8013d34:	f1a4 0408 	sub.w	r4, r4, #8
 8013d38:	ddf4      	ble.n	8013d24 <__kernel_rem_pio2+0x94>
 8013d3a:	ecae 7b02 	vstmia	lr!, {d7}
 8013d3e:	3601      	adds	r6, #1
 8013d40:	3208      	adds	r2, #8
 8013d42:	e7d7      	b.n	8013cf4 <__kernel_rem_pio2+0x64>
 8013d44:	aa06      	add	r2, sp, #24
 8013d46:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8013f80 <__kernel_rem_pio2+0x2f0>
 8013d4a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8013f88 <__kernel_rem_pio2+0x2f8>
 8013d4e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8013d52:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8013d56:	9203      	str	r2, [sp, #12]
 8013d58:	9302      	str	r3, [sp, #8]
 8013d5a:	464c      	mov	r4, r9
 8013d5c:	00e3      	lsls	r3, r4, #3
 8013d5e:	9304      	str	r3, [sp, #16]
 8013d60:	ab92      	add	r3, sp, #584	@ 0x248
 8013d62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013d66:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8013d6a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8013d6c:	ab06      	add	r3, sp, #24
 8013d6e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013d72:	461e      	mov	r6, r3
 8013d74:	4620      	mov	r0, r4
 8013d76:	2800      	cmp	r0, #0
 8013d78:	f1a2 0208 	sub.w	r2, r2, #8
 8013d7c:	dc4a      	bgt.n	8013e14 <__kernel_rem_pio2+0x184>
 8013d7e:	4628      	mov	r0, r5
 8013d80:	9305      	str	r3, [sp, #20]
 8013d82:	f000 fad5 	bl	8014330 <scalbn>
 8013d86:	eeb0 8b40 	vmov.f64	d8, d0
 8013d8a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8013d8e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8013d92:	f7ff fd25 	bl	80137e0 <floor>
 8013d96:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8013d9a:	eea0 8b47 	vfms.f64	d8, d0, d7
 8013d9e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8013da2:	2d00      	cmp	r5, #0
 8013da4:	ee17 8a90 	vmov	r8, s15
 8013da8:	9b05      	ldr	r3, [sp, #20]
 8013daa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013dae:	ee38 8b47 	vsub.f64	d8, d8, d7
 8013db2:	dd41      	ble.n	8013e38 <__kernel_rem_pio2+0x1a8>
 8013db4:	1e60      	subs	r0, r4, #1
 8013db6:	aa06      	add	r2, sp, #24
 8013db8:	f1c5 0c18 	rsb	ip, r5, #24
 8013dbc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8013dc0:	fa46 f20c 	asr.w	r2, r6, ip
 8013dc4:	4490      	add	r8, r2
 8013dc6:	fa02 f20c 	lsl.w	r2, r2, ip
 8013dca:	1ab6      	subs	r6, r6, r2
 8013dcc:	aa06      	add	r2, sp, #24
 8013dce:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8013dd2:	f1c5 0217 	rsb	r2, r5, #23
 8013dd6:	4116      	asrs	r6, r2
 8013dd8:	2e00      	cmp	r6, #0
 8013dda:	dd3c      	ble.n	8013e56 <__kernel_rem_pio2+0x1c6>
 8013ddc:	f04f 0c00 	mov.w	ip, #0
 8013de0:	f108 0801 	add.w	r8, r8, #1
 8013de4:	4660      	mov	r0, ip
 8013de6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8013dea:	4564      	cmp	r4, ip
 8013dec:	dc66      	bgt.n	8013ebc <__kernel_rem_pio2+0x22c>
 8013dee:	2d00      	cmp	r5, #0
 8013df0:	dd03      	ble.n	8013dfa <__kernel_rem_pio2+0x16a>
 8013df2:	2d01      	cmp	r5, #1
 8013df4:	d072      	beq.n	8013edc <__kernel_rem_pio2+0x24c>
 8013df6:	2d02      	cmp	r5, #2
 8013df8:	d07a      	beq.n	8013ef0 <__kernel_rem_pio2+0x260>
 8013dfa:	2e02      	cmp	r6, #2
 8013dfc:	d12b      	bne.n	8013e56 <__kernel_rem_pio2+0x1c6>
 8013dfe:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013e02:	ee30 8b48 	vsub.f64	d8, d0, d8
 8013e06:	b330      	cbz	r0, 8013e56 <__kernel_rem_pio2+0x1c6>
 8013e08:	4628      	mov	r0, r5
 8013e0a:	f000 fa91 	bl	8014330 <scalbn>
 8013e0e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8013e12:	e020      	b.n	8013e56 <__kernel_rem_pio2+0x1c6>
 8013e14:	ee20 7b09 	vmul.f64	d7, d0, d9
 8013e18:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8013e1c:	3801      	subs	r0, #1
 8013e1e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8013e22:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8013e26:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013e2a:	eca6 0a01 	vstmia	r6!, {s0}
 8013e2e:	ed92 0b00 	vldr	d0, [r2]
 8013e32:	ee37 0b00 	vadd.f64	d0, d7, d0
 8013e36:	e79e      	b.n	8013d76 <__kernel_rem_pio2+0xe6>
 8013e38:	d105      	bne.n	8013e46 <__kernel_rem_pio2+0x1b6>
 8013e3a:	1e62      	subs	r2, r4, #1
 8013e3c:	a906      	add	r1, sp, #24
 8013e3e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8013e42:	15f6      	asrs	r6, r6, #23
 8013e44:	e7c8      	b.n	8013dd8 <__kernel_rem_pio2+0x148>
 8013e46:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8013e4a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e52:	da31      	bge.n	8013eb8 <__kernel_rem_pio2+0x228>
 8013e54:	2600      	movs	r6, #0
 8013e56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e5e:	f040 809b 	bne.w	8013f98 <__kernel_rem_pio2+0x308>
 8013e62:	1e62      	subs	r2, r4, #1
 8013e64:	2000      	movs	r0, #0
 8013e66:	454a      	cmp	r2, r9
 8013e68:	da49      	bge.n	8013efe <__kernel_rem_pio2+0x26e>
 8013e6a:	2800      	cmp	r0, #0
 8013e6c:	d062      	beq.n	8013f34 <__kernel_rem_pio2+0x2a4>
 8013e6e:	3c01      	subs	r4, #1
 8013e70:	ab06      	add	r3, sp, #24
 8013e72:	3d18      	subs	r5, #24
 8013e74:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d0f8      	beq.n	8013e6e <__kernel_rem_pio2+0x1de>
 8013e7c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013e80:	4628      	mov	r0, r5
 8013e82:	f000 fa55 	bl	8014330 <scalbn>
 8013e86:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8013f80 <__kernel_rem_pio2+0x2f0>
 8013e8a:	1c62      	adds	r2, r4, #1
 8013e8c:	a96a      	add	r1, sp, #424	@ 0x1a8
 8013e8e:	00d3      	lsls	r3, r2, #3
 8013e90:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013e94:	4622      	mov	r2, r4
 8013e96:	2a00      	cmp	r2, #0
 8013e98:	f280 80a8 	bge.w	8013fec <__kernel_rem_pio2+0x35c>
 8013e9c:	4622      	mov	r2, r4
 8013e9e:	2a00      	cmp	r2, #0
 8013ea0:	f2c0 80c6 	blt.w	8014030 <__kernel_rem_pio2+0x3a0>
 8013ea4:	a96a      	add	r1, sp, #424	@ 0x1a8
 8013ea6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8013eaa:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8013f78 <__kernel_rem_pio2+0x2e8>
 8013eae:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8013f94 <__kernel_rem_pio2+0x304>
 8013eb2:	2000      	movs	r0, #0
 8013eb4:	1aa1      	subs	r1, r4, r2
 8013eb6:	e0b0      	b.n	801401a <__kernel_rem_pio2+0x38a>
 8013eb8:	2602      	movs	r6, #2
 8013eba:	e78f      	b.n	8013ddc <__kernel_rem_pio2+0x14c>
 8013ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ec0:	b948      	cbnz	r0, 8013ed6 <__kernel_rem_pio2+0x246>
 8013ec2:	b122      	cbz	r2, 8013ece <__kernel_rem_pio2+0x23e>
 8013ec4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8013ec8:	f843 2c04 	str.w	r2, [r3, #-4]
 8013ecc:	2201      	movs	r2, #1
 8013ece:	f10c 0c01 	add.w	ip, ip, #1
 8013ed2:	4610      	mov	r0, r2
 8013ed4:	e789      	b.n	8013dea <__kernel_rem_pio2+0x15a>
 8013ed6:	ebae 0202 	sub.w	r2, lr, r2
 8013eda:	e7f5      	b.n	8013ec8 <__kernel_rem_pio2+0x238>
 8013edc:	1e62      	subs	r2, r4, #1
 8013ede:	ab06      	add	r3, sp, #24
 8013ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ee4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013ee8:	a906      	add	r1, sp, #24
 8013eea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013eee:	e784      	b.n	8013dfa <__kernel_rem_pio2+0x16a>
 8013ef0:	1e62      	subs	r2, r4, #1
 8013ef2:	ab06      	add	r3, sp, #24
 8013ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ef8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013efc:	e7f4      	b.n	8013ee8 <__kernel_rem_pio2+0x258>
 8013efe:	ab06      	add	r3, sp, #24
 8013f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f04:	3a01      	subs	r2, #1
 8013f06:	4318      	orrs	r0, r3
 8013f08:	e7ad      	b.n	8013e66 <__kernel_rem_pio2+0x1d6>
 8013f0a:	3301      	adds	r3, #1
 8013f0c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d0fa      	beq.n	8013f0a <__kernel_rem_pio2+0x27a>
 8013f14:	9a04      	ldr	r2, [sp, #16]
 8013f16:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8013f1a:	446a      	add	r2, sp
 8013f1c:	eb04 000b 	add.w	r0, r4, fp
 8013f20:	a91a      	add	r1, sp, #104	@ 0x68
 8013f22:	1c66      	adds	r6, r4, #1
 8013f24:	3a98      	subs	r2, #152	@ 0x98
 8013f26:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8013f2a:	4423      	add	r3, r4
 8013f2c:	42b3      	cmp	r3, r6
 8013f2e:	da04      	bge.n	8013f3a <__kernel_rem_pio2+0x2aa>
 8013f30:	461c      	mov	r4, r3
 8013f32:	e713      	b.n	8013d5c <__kernel_rem_pio2+0xcc>
 8013f34:	9a03      	ldr	r2, [sp, #12]
 8013f36:	2301      	movs	r3, #1
 8013f38:	e7e8      	b.n	8013f0c <__kernel_rem_pio2+0x27c>
 8013f3a:	9902      	ldr	r1, [sp, #8]
 8013f3c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8013f40:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8013f44:	9104      	str	r1, [sp, #16]
 8013f46:	ee07 1a90 	vmov	s15, r1
 8013f4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013f4e:	2400      	movs	r4, #0
 8013f50:	eca0 7b02 	vstmia	r0!, {d7}
 8013f54:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013f78 <__kernel_rem_pio2+0x2e8>
 8013f58:	4686      	mov	lr, r0
 8013f5a:	4554      	cmp	r4, sl
 8013f5c:	dd03      	ble.n	8013f66 <__kernel_rem_pio2+0x2d6>
 8013f5e:	eca2 7b02 	vstmia	r2!, {d7}
 8013f62:	3601      	adds	r6, #1
 8013f64:	e7e2      	b.n	8013f2c <__kernel_rem_pio2+0x29c>
 8013f66:	ecbc 5b02 	vldmia	ip!, {d5}
 8013f6a:	ed3e 6b02 	vldmdb	lr!, {d6}
 8013f6e:	3401      	adds	r4, #1
 8013f70:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013f74:	e7f1      	b.n	8013f5a <__kernel_rem_pio2+0x2ca>
 8013f76:	bf00      	nop
	...
 8013f84:	3e700000 	.word	0x3e700000
 8013f88:	00000000 	.word	0x00000000
 8013f8c:	41700000 	.word	0x41700000
 8013f90:	08016e18 	.word	0x08016e18
 8013f94:	08016dd8 	.word	0x08016dd8
 8013f98:	4268      	negs	r0, r5
 8013f9a:	eeb0 0b48 	vmov.f64	d0, d8
 8013f9e:	f000 f9c7 	bl	8014330 <scalbn>
 8013fa2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8014170 <__kernel_rem_pio2+0x4e0>
 8013fa6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fae:	db17      	blt.n	8013fe0 <__kernel_rem_pio2+0x350>
 8013fb0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8014178 <__kernel_rem_pio2+0x4e8>
 8013fb4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013fb8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8013fbc:	aa06      	add	r2, sp, #24
 8013fbe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8013fc2:	eea5 0b46 	vfms.f64	d0, d5, d6
 8013fc6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013fca:	3518      	adds	r5, #24
 8013fcc:	ee10 3a10 	vmov	r3, s0
 8013fd0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013fd4:	ee17 3a10 	vmov	r3, s14
 8013fd8:	3401      	adds	r4, #1
 8013fda:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013fde:	e74d      	b.n	8013e7c <__kernel_rem_pio2+0x1ec>
 8013fe0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013fe4:	aa06      	add	r2, sp, #24
 8013fe6:	ee10 3a10 	vmov	r3, s0
 8013fea:	e7f6      	b.n	8013fda <__kernel_rem_pio2+0x34a>
 8013fec:	a806      	add	r0, sp, #24
 8013fee:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013ff2:	9001      	str	r0, [sp, #4]
 8013ff4:	ee07 0a90 	vmov	s15, r0
 8013ff8:	3a01      	subs	r2, #1
 8013ffa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013ffe:	ee27 7b00 	vmul.f64	d7, d7, d0
 8014002:	ee20 0b06 	vmul.f64	d0, d0, d6
 8014006:	ed21 7b02 	vstmdb	r1!, {d7}
 801400a:	e744      	b.n	8013e96 <__kernel_rem_pio2+0x206>
 801400c:	ecbc 5b02 	vldmia	ip!, {d5}
 8014010:	ecb5 6b02 	vldmia	r5!, {d6}
 8014014:	3001      	adds	r0, #1
 8014016:	eea5 7b06 	vfma.f64	d7, d5, d6
 801401a:	4548      	cmp	r0, r9
 801401c:	dc01      	bgt.n	8014022 <__kernel_rem_pio2+0x392>
 801401e:	4281      	cmp	r1, r0
 8014020:	daf4      	bge.n	801400c <__kernel_rem_pio2+0x37c>
 8014022:	a842      	add	r0, sp, #264	@ 0x108
 8014024:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8014028:	ed81 7b00 	vstr	d7, [r1]
 801402c:	3a01      	subs	r2, #1
 801402e:	e736      	b.n	8013e9e <__kernel_rem_pio2+0x20e>
 8014030:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8014032:	2a02      	cmp	r2, #2
 8014034:	dc0a      	bgt.n	801404c <__kernel_rem_pio2+0x3bc>
 8014036:	2a00      	cmp	r2, #0
 8014038:	dc2d      	bgt.n	8014096 <__kernel_rem_pio2+0x406>
 801403a:	d046      	beq.n	80140ca <__kernel_rem_pio2+0x43a>
 801403c:	f008 0007 	and.w	r0, r8, #7
 8014040:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8014044:	ecbd 8b06 	vpop	{d8-d10}
 8014048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801404c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801404e:	2a03      	cmp	r2, #3
 8014050:	d1f4      	bne.n	801403c <__kernel_rem_pio2+0x3ac>
 8014052:	a942      	add	r1, sp, #264	@ 0x108
 8014054:	f1a3 0208 	sub.w	r2, r3, #8
 8014058:	440a      	add	r2, r1
 801405a:	4611      	mov	r1, r2
 801405c:	4620      	mov	r0, r4
 801405e:	2800      	cmp	r0, #0
 8014060:	f1a1 0108 	sub.w	r1, r1, #8
 8014064:	dc52      	bgt.n	801410c <__kernel_rem_pio2+0x47c>
 8014066:	4621      	mov	r1, r4
 8014068:	2901      	cmp	r1, #1
 801406a:	f1a2 0208 	sub.w	r2, r2, #8
 801406e:	dc5d      	bgt.n	801412c <__kernel_rem_pio2+0x49c>
 8014070:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8014180 <__kernel_rem_pio2+0x4f0>
 8014074:	aa42      	add	r2, sp, #264	@ 0x108
 8014076:	4413      	add	r3, r2
 8014078:	2c01      	cmp	r4, #1
 801407a:	dc67      	bgt.n	801414c <__kernel_rem_pio2+0x4bc>
 801407c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8014080:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8014084:	2e00      	cmp	r6, #0
 8014086:	d167      	bne.n	8014158 <__kernel_rem_pio2+0x4c8>
 8014088:	ed87 5b00 	vstr	d5, [r7]
 801408c:	ed87 6b02 	vstr	d6, [r7, #8]
 8014090:	ed87 7b04 	vstr	d7, [r7, #16]
 8014094:	e7d2      	b.n	801403c <__kernel_rem_pio2+0x3ac>
 8014096:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8014180 <__kernel_rem_pio2+0x4f0>
 801409a:	aa42      	add	r2, sp, #264	@ 0x108
 801409c:	4413      	add	r3, r2
 801409e:	4622      	mov	r2, r4
 80140a0:	2a00      	cmp	r2, #0
 80140a2:	da24      	bge.n	80140ee <__kernel_rem_pio2+0x45e>
 80140a4:	b34e      	cbz	r6, 80140fa <__kernel_rem_pio2+0x46a>
 80140a6:	eeb1 7b46 	vneg.f64	d7, d6
 80140aa:	ed87 7b00 	vstr	d7, [r7]
 80140ae:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 80140b2:	aa44      	add	r2, sp, #272	@ 0x110
 80140b4:	2301      	movs	r3, #1
 80140b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80140ba:	429c      	cmp	r4, r3
 80140bc:	da20      	bge.n	8014100 <__kernel_rem_pio2+0x470>
 80140be:	b10e      	cbz	r6, 80140c4 <__kernel_rem_pio2+0x434>
 80140c0:	eeb1 7b47 	vneg.f64	d7, d7
 80140c4:	ed87 7b02 	vstr	d7, [r7, #8]
 80140c8:	e7b8      	b.n	801403c <__kernel_rem_pio2+0x3ac>
 80140ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8014180 <__kernel_rem_pio2+0x4f0>
 80140ce:	aa42      	add	r2, sp, #264	@ 0x108
 80140d0:	4413      	add	r3, r2
 80140d2:	2c00      	cmp	r4, #0
 80140d4:	da05      	bge.n	80140e2 <__kernel_rem_pio2+0x452>
 80140d6:	b10e      	cbz	r6, 80140dc <__kernel_rem_pio2+0x44c>
 80140d8:	eeb1 7b47 	vneg.f64	d7, d7
 80140dc:	ed87 7b00 	vstr	d7, [r7]
 80140e0:	e7ac      	b.n	801403c <__kernel_rem_pio2+0x3ac>
 80140e2:	ed33 6b02 	vldmdb	r3!, {d6}
 80140e6:	3c01      	subs	r4, #1
 80140e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80140ec:	e7f1      	b.n	80140d2 <__kernel_rem_pio2+0x442>
 80140ee:	ed33 7b02 	vldmdb	r3!, {d7}
 80140f2:	3a01      	subs	r2, #1
 80140f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80140f8:	e7d2      	b.n	80140a0 <__kernel_rem_pio2+0x410>
 80140fa:	eeb0 7b46 	vmov.f64	d7, d6
 80140fe:	e7d4      	b.n	80140aa <__kernel_rem_pio2+0x41a>
 8014100:	ecb2 6b02 	vldmia	r2!, {d6}
 8014104:	3301      	adds	r3, #1
 8014106:	ee37 7b06 	vadd.f64	d7, d7, d6
 801410a:	e7d6      	b.n	80140ba <__kernel_rem_pio2+0x42a>
 801410c:	ed91 7b00 	vldr	d7, [r1]
 8014110:	ed91 5b02 	vldr	d5, [r1, #8]
 8014114:	3801      	subs	r0, #1
 8014116:	ee37 6b05 	vadd.f64	d6, d7, d5
 801411a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801411e:	ed81 6b00 	vstr	d6, [r1]
 8014122:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014126:	ed81 7b02 	vstr	d7, [r1, #8]
 801412a:	e798      	b.n	801405e <__kernel_rem_pio2+0x3ce>
 801412c:	ed92 7b00 	vldr	d7, [r2]
 8014130:	ed92 5b02 	vldr	d5, [r2, #8]
 8014134:	3901      	subs	r1, #1
 8014136:	ee37 6b05 	vadd.f64	d6, d7, d5
 801413a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801413e:	ed82 6b00 	vstr	d6, [r2]
 8014142:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014146:	ed82 7b02 	vstr	d7, [r2, #8]
 801414a:	e78d      	b.n	8014068 <__kernel_rem_pio2+0x3d8>
 801414c:	ed33 6b02 	vldmdb	r3!, {d6}
 8014150:	3c01      	subs	r4, #1
 8014152:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014156:	e78f      	b.n	8014078 <__kernel_rem_pio2+0x3e8>
 8014158:	eeb1 5b45 	vneg.f64	d5, d5
 801415c:	eeb1 6b46 	vneg.f64	d6, d6
 8014160:	ed87 5b00 	vstr	d5, [r7]
 8014164:	eeb1 7b47 	vneg.f64	d7, d7
 8014168:	ed87 6b02 	vstr	d6, [r7, #8]
 801416c:	e790      	b.n	8014090 <__kernel_rem_pio2+0x400>
 801416e:	bf00      	nop
 8014170:	00000000 	.word	0x00000000
 8014174:	41700000 	.word	0x41700000
 8014178:	00000000 	.word	0x00000000
 801417c:	3e700000 	.word	0x3e700000
	...

08014188 <__kernel_cos>:
 8014188:	eeb0 5b40 	vmov.f64	d5, d0
 801418c:	ee15 1a90 	vmov	r1, s11
 8014190:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014194:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8014198:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801419c:	d204      	bcs.n	80141a8 <__kernel_cos+0x20>
 801419e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 80141a2:	ee17 3a90 	vmov	r3, s15
 80141a6:	b343      	cbz	r3, 80141fa <__kernel_cos+0x72>
 80141a8:	ee25 6b05 	vmul.f64	d6, d5, d5
 80141ac:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80141b0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8014220 <__kernel_cos+0x98>
 80141b4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8014228 <__kernel_cos+0xa0>
 80141b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80141bc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8014230 <__kernel_cos+0xa8>
 80141c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80141c4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8014238 <__kernel_cos+0xb0>
 80141c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80141cc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8014240 <__kernel_cos+0xb8>
 80141d0:	4b1f      	ldr	r3, [pc, #124]	@ (8014250 <__kernel_cos+0xc8>)
 80141d2:	eea4 7b06 	vfma.f64	d7, d4, d6
 80141d6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8014248 <__kernel_cos+0xc0>
 80141da:	4299      	cmp	r1, r3
 80141dc:	eea7 4b06 	vfma.f64	d4, d7, d6
 80141e0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80141e4:	ee24 4b06 	vmul.f64	d4, d4, d6
 80141e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80141ec:	eea6 1b04 	vfma.f64	d1, d6, d4
 80141f0:	d804      	bhi.n	80141fc <__kernel_cos+0x74>
 80141f2:	ee37 7b41 	vsub.f64	d7, d7, d1
 80141f6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80141fa:	4770      	bx	lr
 80141fc:	4b15      	ldr	r3, [pc, #84]	@ (8014254 <__kernel_cos+0xcc>)
 80141fe:	4299      	cmp	r1, r3
 8014200:	d809      	bhi.n	8014216 <__kernel_cos+0x8e>
 8014202:	2200      	movs	r2, #0
 8014204:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8014208:	ec43 2b16 	vmov	d6, r2, r3
 801420c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8014210:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014214:	e7ed      	b.n	80141f2 <__kernel_cos+0x6a>
 8014216:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801421a:	e7f7      	b.n	801420c <__kernel_cos+0x84>
 801421c:	f3af 8000 	nop.w
 8014220:	be8838d4 	.word	0xbe8838d4
 8014224:	bda8fae9 	.word	0xbda8fae9
 8014228:	bdb4b1c4 	.word	0xbdb4b1c4
 801422c:	3e21ee9e 	.word	0x3e21ee9e
 8014230:	809c52ad 	.word	0x809c52ad
 8014234:	be927e4f 	.word	0xbe927e4f
 8014238:	19cb1590 	.word	0x19cb1590
 801423c:	3efa01a0 	.word	0x3efa01a0
 8014240:	16c15177 	.word	0x16c15177
 8014244:	bf56c16c 	.word	0xbf56c16c
 8014248:	5555554c 	.word	0x5555554c
 801424c:	3fa55555 	.word	0x3fa55555
 8014250:	3fd33332 	.word	0x3fd33332
 8014254:	3fe90000 	.word	0x3fe90000

08014258 <__kernel_sin>:
 8014258:	ee10 3a90 	vmov	r3, s1
 801425c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014260:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8014264:	d204      	bcs.n	8014270 <__kernel_sin+0x18>
 8014266:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801426a:	ee17 3a90 	vmov	r3, s15
 801426e:	b35b      	cbz	r3, 80142c8 <__kernel_sin+0x70>
 8014270:	ee20 6b00 	vmul.f64	d6, d0, d0
 8014274:	ee20 5b06 	vmul.f64	d5, d0, d6
 8014278:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80142d0 <__kernel_sin+0x78>
 801427c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80142d8 <__kernel_sin+0x80>
 8014280:	eea6 4b07 	vfma.f64	d4, d6, d7
 8014284:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80142e0 <__kernel_sin+0x88>
 8014288:	eea4 7b06 	vfma.f64	d7, d4, d6
 801428c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80142e8 <__kernel_sin+0x90>
 8014290:	eea7 4b06 	vfma.f64	d4, d7, d6
 8014294:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80142f0 <__kernel_sin+0x98>
 8014298:	eea4 7b06 	vfma.f64	d7, d4, d6
 801429c:	b930      	cbnz	r0, 80142ac <__kernel_sin+0x54>
 801429e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80142f8 <__kernel_sin+0xa0>
 80142a2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80142a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80142aa:	4770      	bx	lr
 80142ac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80142b0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80142b4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80142b8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80142bc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8014300 <__kernel_sin+0xa8>
 80142c0:	eea5 1b07 	vfma.f64	d1, d5, d7
 80142c4:	ee30 0b41 	vsub.f64	d0, d0, d1
 80142c8:	4770      	bx	lr
 80142ca:	bf00      	nop
 80142cc:	f3af 8000 	nop.w
 80142d0:	5acfd57c 	.word	0x5acfd57c
 80142d4:	3de5d93a 	.word	0x3de5d93a
 80142d8:	8a2b9ceb 	.word	0x8a2b9ceb
 80142dc:	be5ae5e6 	.word	0xbe5ae5e6
 80142e0:	57b1fe7d 	.word	0x57b1fe7d
 80142e4:	3ec71de3 	.word	0x3ec71de3
 80142e8:	19c161d5 	.word	0x19c161d5
 80142ec:	bf2a01a0 	.word	0xbf2a01a0
 80142f0:	1110f8a6 	.word	0x1110f8a6
 80142f4:	3f811111 	.word	0x3f811111
 80142f8:	55555549 	.word	0x55555549
 80142fc:	bfc55555 	.word	0xbfc55555
 8014300:	55555549 	.word	0x55555549
 8014304:	3fc55555 	.word	0x3fc55555

08014308 <fabs>:
 8014308:	ec51 0b10 	vmov	r0, r1, d0
 801430c:	4602      	mov	r2, r0
 801430e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014312:	ec43 2b10 	vmov	d0, r2, r3
 8014316:	4770      	bx	lr

08014318 <finite>:
 8014318:	b082      	sub	sp, #8
 801431a:	ed8d 0b00 	vstr	d0, [sp]
 801431e:	9801      	ldr	r0, [sp, #4]
 8014320:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8014324:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8014328:	0fc0      	lsrs	r0, r0, #31
 801432a:	b002      	add	sp, #8
 801432c:	4770      	bx	lr
	...

08014330 <scalbn>:
 8014330:	ee10 1a90 	vmov	r1, s1
 8014334:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014338:	b98b      	cbnz	r3, 801435e <scalbn+0x2e>
 801433a:	ee10 3a10 	vmov	r3, s0
 801433e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8014342:	4319      	orrs	r1, r3
 8014344:	d00a      	beq.n	801435c <scalbn+0x2c>
 8014346:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80143f8 <scalbn+0xc8>
 801434a:	4b37      	ldr	r3, [pc, #220]	@ (8014428 <scalbn+0xf8>)
 801434c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014350:	4298      	cmp	r0, r3
 8014352:	da0b      	bge.n	801436c <scalbn+0x3c>
 8014354:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014400 <scalbn+0xd0>
 8014358:	ee20 0b07 	vmul.f64	d0, d0, d7
 801435c:	4770      	bx	lr
 801435e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014362:	4293      	cmp	r3, r2
 8014364:	d107      	bne.n	8014376 <scalbn+0x46>
 8014366:	ee30 0b00 	vadd.f64	d0, d0, d0
 801436a:	4770      	bx	lr
 801436c:	ee10 1a90 	vmov	r1, s1
 8014370:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014374:	3b36      	subs	r3, #54	@ 0x36
 8014376:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801437a:	4290      	cmp	r0, r2
 801437c:	dd0d      	ble.n	801439a <scalbn+0x6a>
 801437e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8014408 <scalbn+0xd8>
 8014382:	ee10 3a90 	vmov	r3, s1
 8014386:	eeb0 6b47 	vmov.f64	d6, d7
 801438a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8014410 <scalbn+0xe0>
 801438e:	2b00      	cmp	r3, #0
 8014390:	fe27 7b05 	vselge.f64	d7, d7, d5
 8014394:	ee27 0b06 	vmul.f64	d0, d7, d6
 8014398:	4770      	bx	lr
 801439a:	4418      	add	r0, r3
 801439c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80143a0:	4298      	cmp	r0, r3
 80143a2:	dcec      	bgt.n	801437e <scalbn+0x4e>
 80143a4:	2800      	cmp	r0, #0
 80143a6:	dd0a      	ble.n	80143be <scalbn+0x8e>
 80143a8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80143ac:	ec53 2b10 	vmov	r2, r3, d0
 80143b0:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80143b4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80143b8:	ec43 2b10 	vmov	d0, r2, r3
 80143bc:	4770      	bx	lr
 80143be:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 80143c2:	da09      	bge.n	80143d8 <scalbn+0xa8>
 80143c4:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8014400 <scalbn+0xd0>
 80143c8:	ee10 3a90 	vmov	r3, s1
 80143cc:	eeb0 6b47 	vmov.f64	d6, d7
 80143d0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8014418 <scalbn+0xe8>
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	e7db      	b.n	8014390 <scalbn+0x60>
 80143d8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80143dc:	ec53 2b10 	vmov	r2, r3, d0
 80143e0:	3036      	adds	r0, #54	@ 0x36
 80143e2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80143e6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80143ea:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8014420 <scalbn+0xf0>
 80143ee:	ec43 2b10 	vmov	d0, r2, r3
 80143f2:	e7b1      	b.n	8014358 <scalbn+0x28>
 80143f4:	f3af 8000 	nop.w
 80143f8:	00000000 	.word	0x00000000
 80143fc:	43500000 	.word	0x43500000
 8014400:	c2f8f359 	.word	0xc2f8f359
 8014404:	01a56e1f 	.word	0x01a56e1f
 8014408:	8800759c 	.word	0x8800759c
 801440c:	7e37e43c 	.word	0x7e37e43c
 8014410:	8800759c 	.word	0x8800759c
 8014414:	fe37e43c 	.word	0xfe37e43c
 8014418:	c2f8f359 	.word	0xc2f8f359
 801441c:	81a56e1f 	.word	0x81a56e1f
 8014420:	00000000 	.word	0x00000000
 8014424:	3c900000 	.word	0x3c900000
 8014428:	ffff3cb0 	.word	0xffff3cb0
 801442c:	00000000 	.word	0x00000000

08014430 <__ieee754_hypot>:
 8014430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014432:	ec51 0b10 	vmov	r0, r1, d0
 8014436:	ec53 2b11 	vmov	r2, r3, d1
 801443a:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 801443e:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8014442:	42a5      	cmp	r5, r4
 8014444:	da05      	bge.n	8014452 <__ieee754_hypot+0x22>
 8014446:	462e      	mov	r6, r5
 8014448:	4625      	mov	r5, r4
 801444a:	4634      	mov	r4, r6
 801444c:	4606      	mov	r6, r0
 801444e:	4610      	mov	r0, r2
 8014450:	4632      	mov	r2, r6
 8014452:	4623      	mov	r3, r4
 8014454:	ec43 2b14 	vmov	d4, r2, r3
 8014458:	1b2b      	subs	r3, r5, r4
 801445a:	4629      	mov	r1, r5
 801445c:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8014460:	ec41 0b10 	vmov	d0, r0, r1
 8014464:	dd02      	ble.n	801446c <__ieee754_hypot+0x3c>
 8014466:	ee30 0b04 	vadd.f64	d0, d0, d4
 801446a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801446c:	4b46      	ldr	r3, [pc, #280]	@ (8014588 <__ieee754_hypot+0x158>)
 801446e:	429d      	cmp	r5, r3
 8014470:	dd58      	ble.n	8014524 <__ieee754_hypot+0xf4>
 8014472:	4b46      	ldr	r3, [pc, #280]	@ (801458c <__ieee754_hypot+0x15c>)
 8014474:	429d      	cmp	r5, r3
 8014476:	dd0f      	ble.n	8014498 <__ieee754_hypot+0x68>
 8014478:	ee14 3a10 	vmov	r3, s8
 801447c:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8014480:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014484:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8014488:	4305      	orrs	r5, r0
 801448a:	bf18      	it	ne
 801448c:	ee30 0b04 	vaddne.f64	d0, d0, d4
 8014490:	431c      	orrs	r4, r3
 8014492:	fe04 0b00 	vseleq.f64	d0, d4, d0
 8014496:	e7e8      	b.n	801446a <__ieee754_hypot+0x3a>
 8014498:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 801449c:	4602      	mov	r2, r0
 801449e:	462b      	mov	r3, r5
 80144a0:	ec43 2b10 	vmov	d0, r2, r3
 80144a4:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 80144a8:	ec53 2b14 	vmov	r2, r3, d4
 80144ac:	4623      	mov	r3, r4
 80144ae:	ec43 2b14 	vmov	d4, r2, r3
 80144b2:	f44f 7616 	mov.w	r6, #600	@ 0x258
 80144b6:	4b36      	ldr	r3, [pc, #216]	@ (8014590 <__ieee754_hypot+0x160>)
 80144b8:	429c      	cmp	r4, r3
 80144ba:	dc0e      	bgt.n	80144da <__ieee754_hypot+0xaa>
 80144bc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80144c0:	da32      	bge.n	8014528 <__ieee754_hypot+0xf8>
 80144c2:	ee14 3a10 	vmov	r3, s8
 80144c6:	4323      	orrs	r3, r4
 80144c8:	d0cf      	beq.n	801446a <__ieee754_hypot+0x3a>
 80144ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8014580 <__ieee754_hypot+0x150>
 80144ce:	f2a6 36fe 	subw	r6, r6, #1022	@ 0x3fe
 80144d2:	ee24 4b07 	vmul.f64	d4, d4, d7
 80144d6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80144da:	ee30 5b44 	vsub.f64	d5, d0, d4
 80144de:	eeb4 4bc5 	vcmpe.f64	d4, d5
 80144e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e6:	f04f 0200 	mov.w	r2, #0
 80144ea:	d52e      	bpl.n	801454a <__ieee754_hypot+0x11a>
 80144ec:	462b      	mov	r3, r5
 80144ee:	ec43 2b17 	vmov	d7, r2, r3
 80144f2:	ee30 6b07 	vadd.f64	d6, d0, d7
 80144f6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80144fa:	ee26 0b00 	vmul.f64	d0, d6, d0
 80144fe:	eea4 0b04 	vfma.f64	d0, d4, d4
 8014502:	eea7 0b07 	vfma.f64	d0, d7, d7
 8014506:	f000 f845 	bl	8014594 <__ieee754_sqrt>
 801450a:	2e00      	cmp	r6, #0
 801450c:	d0ad      	beq.n	801446a <__ieee754_hypot+0x3a>
 801450e:	0533      	lsls	r3, r6, #20
 8014510:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8014514:	2000      	movs	r0, #0
 8014516:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801451a:	ec41 0b17 	vmov	d7, r0, r1
 801451e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014522:	e7a2      	b.n	801446a <__ieee754_hypot+0x3a>
 8014524:	2600      	movs	r6, #0
 8014526:	e7c6      	b.n	80144b6 <__ieee754_hypot+0x86>
 8014528:	ec53 2b10 	vmov	r2, r3, d0
 801452c:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 8014530:	462b      	mov	r3, r5
 8014532:	ec43 2b10 	vmov	d0, r2, r3
 8014536:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 801453a:	ec53 2b14 	vmov	r2, r3, d4
 801453e:	4623      	mov	r3, r4
 8014540:	ec43 2b14 	vmov	d4, r2, r3
 8014544:	f5a6 7616 	sub.w	r6, r6, #600	@ 0x258
 8014548:	e7c7      	b.n	80144da <__ieee754_hypot+0xaa>
 801454a:	4623      	mov	r3, r4
 801454c:	ec43 2b16 	vmov	d6, r2, r3
 8014550:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 8014554:	2200      	movs	r2, #0
 8014556:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 801455a:	ec43 2b17 	vmov	d7, r2, r3
 801455e:	ee34 3b46 	vsub.f64	d3, d4, d6
 8014562:	eeb0 2b47 	vmov.f64	d2, d7
 8014566:	ee90 2b01 	vfnms.f64	d2, d0, d1
 801456a:	ee24 0b02 	vmul.f64	d0, d4, d2
 801456e:	eea3 0b07 	vfma.f64	d0, d3, d7
 8014572:	eea5 0b05 	vfma.f64	d0, d5, d5
 8014576:	eea6 0b07 	vfma.f64	d0, d6, d7
 801457a:	e7c4      	b.n	8014506 <__ieee754_hypot+0xd6>
 801457c:	f3af 8000 	nop.w
 8014580:	00000000 	.word	0x00000000
 8014584:	7fd00000 	.word	0x7fd00000
 8014588:	5f300000 	.word	0x5f300000
 801458c:	7fefffff 	.word	0x7fefffff
 8014590:	20afffff 	.word	0x20afffff

08014594 <__ieee754_sqrt>:
 8014594:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8014598:	4770      	bx	lr
	...

0801459c <_init>:
 801459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801459e:	bf00      	nop
 80145a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145a2:	bc08      	pop	{r3}
 80145a4:	469e      	mov	lr, r3
 80145a6:	4770      	bx	lr

080145a8 <_fini>:
 80145a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145aa:	bf00      	nop
 80145ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145ae:	bc08      	pop	{r3}
 80145b0:	469e      	mov	lr, r3
 80145b2:	4770      	bx	lr
