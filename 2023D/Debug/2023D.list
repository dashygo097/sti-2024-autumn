
2023D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134ac  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002758  08013750  08013750  00014750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015ea8  08015ea8  00016ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08015eb0  08015eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015eb8  08015eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000006c0  24000000  08015ebc  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00004000  240006c0  0801657c  000176c0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00010620  240046c0  0801a57c  0001b6c0  2**3
                  ALLOC
  9 ._user_heap_stack 00004000  24014ce0  0801a57c  0001bce0  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001b6c0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00023208  00000000  00000000  0001b6ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004234  00000000  00000000  0003e8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001a30  00000000  00000000  00042b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001464  00000000  00000000  00044560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c9eb  00000000  00000000  000459c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024de1  00000000  00000000  000823af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017b5ae  00000000  00000000  000a7190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0022273e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008614  00000000  00000000  00222784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000058  00000000  00000000  0022ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240046c0 	.word	0x240046c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013734 	.word	0x08013734

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240046c4 	.word	0x240046c4
 80002dc:	08013734 	.word	0x08013734

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 bac6 	b.w	8000934 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f962 	bl	8000678 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__muldc3>:
 80003c0:	ee20 5b02 	vmul.f64	d5, d0, d2
 80003c4:	ee21 4b03 	vmul.f64	d4, d1, d3
 80003c8:	ee35 7b44 	vsub.f64	d7, d5, d4
 80003cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80003d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d4:	ed2d 8b0a 	vpush	{d8-d12}
 80003d8:	ee20 9b03 	vmul.f64	d9, d0, d3
 80003dc:	ee22 8b01 	vmul.f64	d8, d2, d1
 80003e0:	ee39 6b08 	vadd.f64	d6, d9, d8
 80003e4:	d606      	bvs.n	80003f4 <__muldc3+0x34>
 80003e6:	eeb0 0b47 	vmov.f64	d0, d7
 80003ea:	eeb0 1b46 	vmov.f64	d1, d6
 80003ee:	ecbd 8b0a 	vpop	{d8-d12}
 80003f2:	4770      	bx	lr
 80003f4:	eeb4 6b46 	vcmp.f64	d6, d6
 80003f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003fc:	d7f3      	bvc.n	80003e6 <__muldc3+0x26>
 80003fe:	eeb0 bbc0 	vabs.f64	d11, d0
 8000402:	eeb0 cbc1 	vabs.f64	d12, d1
 8000406:	ed9f ab94 	vldr	d10, [pc, #592]	@ 8000658 <__muldc3+0x298>
 800040a:	eeb4 bb4a 	vcmp.f64	d11, d10
 800040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000412:	f300 809d 	bgt.w	8000550 <__muldc3+0x190>
 8000416:	eeb4 cb4a 	vcmp.f64	d12, d10
 800041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041e:	f300 8097 	bgt.w	8000550 <__muldc3+0x190>
 8000422:	2300      	movs	r3, #0
 8000424:	ed9f ab8c 	vldr	d10, [pc, #560]	@ 8000658 <__muldc3+0x298>
 8000428:	eeb0 bbc2 	vabs.f64	d11, d2
 800042c:	eeb0 cbc3 	vabs.f64	d12, d3
 8000430:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000438:	dc48      	bgt.n	80004cc <__muldc3+0x10c>
 800043a:	eeb4 cb4a 	vcmp.f64	d12, d10
 800043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000442:	dc43      	bgt.n	80004cc <__muldc3+0x10c>
 8000444:	bb9b      	cbnz	r3, 80004ae <__muldc3+0xee>
 8000446:	eeb0 5bc5 	vabs.f64	d5, d5
 800044a:	eeb4 5b4a 	vcmp.f64	d5, d10
 800044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000452:	dc14      	bgt.n	800047e <__muldc3+0xbe>
 8000454:	eeb0 4bc4 	vabs.f64	d4, d4
 8000458:	eeb4 4b4a 	vcmp.f64	d4, d10
 800045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000460:	dc0d      	bgt.n	800047e <__muldc3+0xbe>
 8000462:	eeb0 9bc9 	vabs.f64	d9, d9
 8000466:	eeb4 9b4a 	vcmp.f64	d9, d10
 800046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046e:	dc06      	bgt.n	800047e <__muldc3+0xbe>
 8000470:	eeb0 8bc8 	vabs.f64	d8, d8
 8000474:	eeb4 8b4a 	vcmp.f64	d8, d10
 8000478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047c:	ddb3      	ble.n	80003e6 <__muldc3+0x26>
 800047e:	eeb4 0b40 	vcmp.f64	d0, d0
 8000482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000486:	f180 80dc 	bvs.w	8000642 <__muldc3+0x282>
 800048a:	eeb4 1b41 	vcmp.f64	d1, d1
 800048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000492:	f180 80cc 	bvs.w	800062e <__muldc3+0x26e>
 8000496:	eeb4 2b42 	vcmp.f64	d2, d2
 800049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049e:	f180 80bc 	bvs.w	800061a <__muldc3+0x25a>
 80004a2:	eeb4 3b43 	vcmp.f64	d3, d3
 80004a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004aa:	f180 80ac 	bvs.w	8000606 <__muldc3+0x246>
 80004ae:	ee23 7b41 	vnmul.f64	d7, d3, d1
 80004b2:	ee21 1b02 	vmul.f64	d1, d1, d2
 80004b6:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000660 <__muldc3+0x2a0>
 80004ba:	eea0 7b02 	vfma.f64	d7, d0, d2
 80004be:	eea0 1b03 	vfma.f64	d1, d0, d3
 80004c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80004c6:	ee21 6b06 	vmul.f64	d6, d1, d6
 80004ca:	e78c      	b.n	80003e6 <__muldc3+0x26>
 80004cc:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8000658 <__muldc3+0x298>
 80004d0:	eeb4 bb47 	vcmp.f64	d11, d7
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	bfcc      	ite	gt
 80004da:	2301      	movgt	r3, #1
 80004dc:	2300      	movle	r3, #0
 80004de:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000658 <__muldc3+0x298>
 80004e2:	ee07 3a10 	vmov	s14, r3
 80004e6:	eeb4 cb46 	vcmp.f64	d12, d6
 80004ea:	ee12 3a90 	vmov	r3, s5
 80004ee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80004f8:	bfb8      	it	lt
 80004fa:	eeb1 7b47 	vneglt.f64	d7, d7
 80004fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000502:	bfcc      	ite	gt
 8000504:	2301      	movgt	r3, #1
 8000506:	2300      	movle	r3, #0
 8000508:	eeb0 2b47 	vmov.f64	d2, d7
 800050c:	ee07 3a10 	vmov	s14, r3
 8000510:	eeb4 0b40 	vcmp.f64	d0, d0
 8000514:	ee13 3a90 	vmov	r3, s7
 8000518:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800051c:	2b00      	cmp	r3, #0
 800051e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000522:	bfb8      	it	lt
 8000524:	eeb1 7b47 	vneglt.f64	d7, d7
 8000528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052c:	eeb0 3b47 	vmov.f64	d3, d7
 8000530:	d655      	bvs.n	80005de <__muldc3+0x21e>
 8000532:	eeb4 1b41 	vcmp.f64	d1, d1
 8000536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053a:	d7b8      	bvc.n	80004ae <__muldc3+0xee>
 800053c:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000668 <__muldc3+0x2a8>
 8000540:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8000670 <__muldc3+0x2b0>
 8000544:	ee11 3a90 	vmov	r3, s3
 8000548:	2b00      	cmp	r3, #0
 800054a:	fe26 1b07 	vselge.f64	d1, d6, d7
 800054e:	e7ae      	b.n	80004ae <__muldc3+0xee>
 8000550:	ed9f ab41 	vldr	d10, [pc, #260]	@ 8000658 <__muldc3+0x298>
 8000554:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055c:	bfcc      	ite	gt
 800055e:	2301      	movgt	r3, #1
 8000560:	2300      	movle	r3, #0
 8000562:	ee0a 3a10 	vmov	s20, r3
 8000566:	ee10 3a90 	vmov	r3, s1
 800056a:	eeb8 abca 	vcvt.f64.s32	d10, s20
 800056e:	2b00      	cmp	r3, #0
 8000570:	eeb0 abca 	vabs.f64	d10, d10
 8000574:	bfb8      	it	lt
 8000576:	eeb1 ab4a 	vneglt.f64	d10, d10
 800057a:	eeb0 0b4a 	vmov.f64	d0, d10
 800057e:	ed9f ab36 	vldr	d10, [pc, #216]	@ 8000658 <__muldc3+0x298>
 8000582:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	bfcc      	ite	gt
 800058c:	2301      	movgt	r3, #1
 800058e:	2300      	movle	r3, #0
 8000590:	ee0a 3a10 	vmov	s20, r3
 8000594:	eeb4 2b42 	vcmp.f64	d2, d2
 8000598:	ee11 3a90 	vmov	r3, s3
 800059c:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	eeb0 abca 	vabs.f64	d10, d10
 80005a6:	bfb8      	it	lt
 80005a8:	eeb1 ab4a 	vneglt.f64	d10, d10
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	eeb0 1b4a 	vmov.f64	d1, d10
 80005b4:	d61d      	bvs.n	80005f2 <__muldc3+0x232>
 80005b6:	eeb4 3b43 	vcmp.f64	d3, d3
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	bf78      	it	vc
 80005c0:	2301      	movvc	r3, #1
 80005c2:	f5ff af2f 	bvc.w	8000424 <__muldc3+0x64>
 80005c6:	ee13 3a90 	vmov	r3, s7
 80005ca:	ed9f ab29 	vldr	d10, [pc, #164]	@ 8000670 <__muldc3+0x2b0>
 80005ce:	ed9f 3b26 	vldr	d3, [pc, #152]	@ 8000668 <__muldc3+0x2a8>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f04f 0301 	mov.w	r3, #1
 80005d8:	fe23 3b0a 	vselge.f64	d3, d3, d10
 80005dc:	e722      	b.n	8000424 <__muldc3+0x64>
 80005de:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8000668 <__muldc3+0x2a8>
 80005e2:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8000670 <__muldc3+0x2b0>
 80005e6:	ee10 3a90 	vmov	r3, s1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe26 0b07 	vselge.f64	d0, d6, d7
 80005f0:	e79f      	b.n	8000532 <__muldc3+0x172>
 80005f2:	ee12 3a90 	vmov	r3, s5
 80005f6:	ed9f ab1e 	vldr	d10, [pc, #120]	@ 8000670 <__muldc3+0x2b0>
 80005fa:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 8000668 <__muldc3+0x2a8>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe22 2b0a 	vselge.f64	d2, d2, d10
 8000604:	e7d7      	b.n	80005b6 <__muldc3+0x1f6>
 8000606:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000668 <__muldc3+0x2a8>
 800060a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8000670 <__muldc3+0x2b0>
 800060e:	ee13 3a90 	vmov	r3, s7
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe26 3b07 	vselge.f64	d3, d6, d7
 8000618:	e749      	b.n	80004ae <__muldc3+0xee>
 800061a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000668 <__muldc3+0x2a8>
 800061e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000670 <__muldc3+0x2b0>
 8000622:	ee12 3a90 	vmov	r3, s5
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe26 2b07 	vselge.f64	d2, d6, d7
 800062c:	e739      	b.n	80004a2 <__muldc3+0xe2>
 800062e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000668 <__muldc3+0x2a8>
 8000632:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000670 <__muldc3+0x2b0>
 8000636:	ee11 3a90 	vmov	r3, s3
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000640:	e729      	b.n	8000496 <__muldc3+0xd6>
 8000642:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000668 <__muldc3+0x2a8>
 8000646:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8000670 <__muldc3+0x2b0>
 800064a:	ee10 3a90 	vmov	r3, s1
 800064e:	2b00      	cmp	r3, #0
 8000650:	fe26 0b07 	vselge.f64	d0, d6, d7
 8000654:	e719      	b.n	800048a <__muldc3+0xca>
 8000656:	bf00      	nop
 8000658:	ffffffff 	.word	0xffffffff
 800065c:	7fefffff 	.word	0x7fefffff
 8000660:	00000000 	.word	0x00000000
 8000664:	7ff00000 	.word	0x7ff00000
	...
 8000674:	80000000 	.word	0x80000000

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <rev>:
    }
    return A;
}

int rev(int size , int index)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	ed2d 8b02 	vpush	{d8}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
    int k = floor(log2(size)) , reg = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000950:	eeb0 0b47 	vmov.f64	d0, d7
 8000954:	f011 fd84 	bl	8012460 <log>
 8000958:	eeb0 6b40 	vmov.f64	d6, d0
 800095c:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000a18 <rev+0xe0>
 8000960:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000964:	eeb0 0b47 	vmov.f64	d0, d7
 8000968:	f012 f8f2 	bl	8012b50 <floor>
 800096c:	eeb0 7b40 	vmov.f64	d7, d0
 8000970:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000974:	ee17 3a90 	vmov	r3, s15
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
    int ans = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
    for (int i =size/2 ; i>0 ; i/=2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da00      	bge.n	800098a <rev+0x52>
 8000988:	3301      	adds	r3, #1
 800098a:	105b      	asrs	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e036      	b.n	80009fe <rev+0xc6>
    {
        reg = index%2;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
        ans += reg * pow(2 , k - 1) ;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009b4:	eeb0 1b47 	vmov.f64	d1, d7
 80009b8:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 80009bc:	f011 fe78 	bl	80126b0 <pow>
 80009c0:	eeb0 7b40 	vmov.f64	d7, d0
 80009c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009da:	ee17 3a90 	vmov	r3, s15
 80009de:	613b      	str	r3, [r7, #16]
        k--;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
        index/= 2;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da00      	bge.n	80009ee <rev+0xb6>
 80009ec:	3301      	adds	r3, #1
 80009ee:	105b      	asrs	r3, r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
    for (int i =size/2 ; i>0 ; i/=2)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da00      	bge.n	80009fa <rev+0xc2>
 80009f8:	3301      	adds	r3, #1
 80009fa:	105b      	asrs	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dcc5      	bgt.n	8000990 <rev+0x58>
    }
    return ans;
 8000a04:	693b      	ldr	r3, [r7, #16]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	f3af 8000 	nop.w
 8000a18:	fefa39ef 	.word	0xfefa39ef
 8000a1c:	3fe62e42 	.word	0x3fe62e42

08000a20 <FFT>:
    }
    return X;
}

double complex* FFT(int size , double x[])
{
 8000a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	ed2d 8b02 	vpush	{d8}
 8000a28:	b0a9      	sub	sp, #164	@ 0xa4
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	466b      	mov	r3, sp
 8000a32:	461e      	mov	r6, r3
    double complex W[size/2];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <FFT+0x1c>
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	105b      	asrs	r3, r3, #1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	1e4b      	subs	r3, r1, #1
 8000a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a46:	460a      	mov	r2, r1
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	01c3      	lsls	r3, r0, #7
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	01c2      	lsls	r2, r0, #7
 8000a64:	460a      	mov	r2, r1
 8000a66:	2300      	movs	r3, #0
 8000a68:	4692      	mov	sl, r2
 8000a6a:	469b      	mov	fp, r3
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8000a78:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8000a7c:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8000a80:	460b      	mov	r3, r1
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	466b      	mov	r3, sp
 8000a90:	3307      	adds	r3, #7
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    for (int i = 0 ; i < size/2 ; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000aa0:	e049      	b.n	8000b36 <FFT+0x116>
    {
        W[i] = cos(2*M_PI*i/size) + I*sin(2*M_PI*i/size);
 8000aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aae:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000c58 <FFT+0x238>
 8000ab2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ac0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ac4:	eeb0 0b45 	vmov.f64	d0, d5
 8000ac8:	f011 fc7e 	bl	80123c8 <sin>
 8000acc:	eeb0 8b40 	vmov.f64	d8, d0
 8000ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000adc:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000c58 <FFT+0x238>
 8000ae0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000af2:	eeb0 0b45 	vmov.f64	d0, d5
 8000af6:	f011 fc1b 	bl	8012330 <cos>
 8000afa:	eeb0 6b40 	vmov.f64	d6, d0
 8000afe:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8000c60 <FFT+0x240>
 8000b02:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4413      	add	r3, r2
 8000b16:	ed83 7b00 	vstr	d7, [r3]
 8000b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	4413      	add	r3, r2
 8000b26:	3308      	adds	r3, #8
 8000b28:	ed83 8b00 	vstr	d8, [r3]
    for (int i = 0 ; i < size/2 ; i++)
 8000b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <FFT+0x11e>
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	105b      	asrs	r3, r3, #1
 8000b40:	461a      	mov	r2, r3
 8000b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dbab      	blt.n	8000aa2 <FFT+0x82>
    }

    double complex A[size +100];
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000b50:	1e4b      	subs	r3, r1, #1
 8000b52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b56:	460a      	mov	r2, r1
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4690      	mov	r8, r2
 8000b5c:	4699      	mov	r9, r3
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	f04f 0300 	mov.w	r3, #0
 8000b66:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000b6a:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000b6e:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000b72:	460a      	mov	r2, r1
 8000b74:	2300      	movs	r3, #0
 8000b76:	4614      	mov	r4, r2
 8000b78:	461d      	mov	r5, r3
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	f04f 0300 	mov.w	r3, #0
 8000b82:	01eb      	lsls	r3, r5, #7
 8000b84:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000b88:	01e2      	lsls	r2, r4, #7
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	011b      	lsls	r3, r3, #4
 8000b8e:	3307      	adds	r3, #7
 8000b90:	08db      	lsrs	r3, r3, #3
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	ebad 0d03 	sub.w	sp, sp, r3
 8000b98:	466b      	mov	r3, sp
 8000b9a:	3307      	adds	r3, #7
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    double complex *X =A;
 8000ba2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0;i < size ; i ++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bac:	e027      	b.n	8000bfe <FFT+0x1de>
    {
    	A[i] = x[rev(size,i)] + 0*I;
 8000bae:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff fec0 	bl	8000938 <rev>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	ed93 7b00 	vldr	d7, [r3]
 8000bc4:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8000c60 <FFT+0x240>
 8000bc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bcc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	4413      	add	r3, r2
 8000bd6:	ed83 7b00 	vstr	d7, [r3]
 8000bda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	4413      	add	r3, r2
 8000be4:	f103 0108 	add.w	r1, r3, #8
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0;i < size ; i ++)
 8000bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bfe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbd2      	blt.n	8000bae <FFT+0x18e>
    }
    
    int s , m , k , j;
    double complex omega , t , u;

    for(s = 1 ; s <size ; s*=2)
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000c0e:	e0f8      	b.n	8000e02 <FFT+0x3e2>
    {
        m = s*2;
 8000c10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	677b      	str	r3, [r7, #116]	@ 0x74
        for ( k = 0 ; k < size ; k+=m)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000c1e:	e0e5      	b.n	8000dec <FFT+0x3cc>
        {
            omega = 1;
 8000c20:	f04f 0200 	mov.w	r2, #0
 8000c24:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <FFT+0x248>)
 8000c26:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8000c2a:	f04f 0200 	mov.w	r2, #0
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
            for (j = 0; j < m/2 ; j++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <FFT+0x248>)
 8000c4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000c52:	e0ba      	b.n	8000dca <FFT+0x3aa>
 8000c54:	f3af 8000 	nop.w
 8000c58:	54442d18 	.word	0x54442d18
 8000c5c:	401921fb 	.word	0x401921fb
	...
 8000c68:	3ff00000 	.word	0x3ff00000
            {
                t = omega * A[k+j+m/2];
 8000c6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c74:	441a      	add	r2, r3
 8000c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	da00      	bge.n	8000c7e <FFT+0x25e>
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	105b      	asrs	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000c84:	011a      	lsls	r2, r3, #4
 8000c86:	440a      	add	r2, r1
 8000c88:	ed92 7b00 	vldr	d7, [r2]
 8000c8c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	4413      	add	r3, r2
 8000c92:	ed93 6b02 	vldr	d6, [r3, #8]
 8000c96:	eeb0 3b46 	vmov.f64	d3, d6
 8000c9a:	eeb0 2b47 	vmov.f64	d2, d7
 8000c9e:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000ca2:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000ca6:	f7ff fb8b 	bl	80003c0 <__muldc3>
 8000caa:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 8000cae:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 8000cb2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cb6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000cbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
                u = A[k+j];
 8000cc2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cca:	18d1      	adds	r1, r2, r3
 8000ccc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cce:	010b      	lsls	r3, r1, #4
 8000cd0:	4413      	add	r3, r2
 8000cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cdc:	010b      	lsls	r3, r1, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ce4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ce8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000cec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000cf0:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8000cf4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
                A[k+j] = u + t;
 8000cf8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d00:	4413      	add	r3, r2
 8000d02:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d06:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d0a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d0e:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d12:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d16:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d1a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d1c:	011a      	lsls	r2, r3, #4
 8000d1e:	440a      	add	r2, r1
 8000d20:	ed82 6b00 	vstr	d6, [r2]
 8000d24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	4413      	add	r3, r2
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	ed83 7b00 	vstr	d7, [r3]
                A[k+j+m/2] = u - t;
 8000d30:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d38:	441a      	add	r2, r3
 8000d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	da00      	bge.n	8000d42 <FFT+0x322>
 8000d40:	3301      	adds	r3, #1
 8000d42:	105b      	asrs	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d4a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d52:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d56:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d5a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d5e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d60:	011a      	lsls	r2, r3, #4
 8000d62:	440a      	add	r2, r1
 8000d64:	ed82 6b00 	vstr	d6, [r2]
 8000d68:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3308      	adds	r3, #8
 8000d70:	ed83 7b00 	vstr	d7, [r3]
                omega = omega * W[size/m];
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d78:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d7c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000d80:	011a      	lsls	r2, r3, #4
 8000d82:	440a      	add	r2, r1
 8000d84:	ed92 7b00 	vldr	d7, [r2]
 8000d88:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	4413      	add	r3, r2
 8000d90:	ed93 6b02 	vldr	d6, [r3, #8]
 8000d94:	eeb0 3b46 	vmov.f64	d3, d6
 8000d98:	eeb0 2b47 	vmov.f64	d2, d7
 8000d9c:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000da0:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000da4:	f7ff fb0c 	bl	80003c0 <__muldc3>
 8000da8:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8000dac:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8000db0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000db4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000db8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000dbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            for (j = 0; j < m/2 ; j++)
 8000dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	da00      	bge.n	8000dd2 <FFT+0x3b2>
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	105b      	asrs	r3, r3, #1
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	f6ff af46 	blt.w	8000c6c <FFT+0x24c>
        for ( k = 0 ; k < size ; k+=m)
 8000de0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000de6:	4413      	add	r3, r2
 8000de8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000dec:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	f6ff af14 	blt.w	8000c20 <FFT+0x200>
    for(s = 1 ; s <size ; s*=2)
 8000df8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f6ff af01 	blt.w	8000c10 <FFT+0x1f0>
            } 
        }
    }
    return X;
 8000e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e10:	46b5      	mov	sp, r6

}
 8000e12:	4618      	mov	r0, r3
 8000e14:	37a4      	adds	r7, #164	@ 0xa4
 8000e16:	46bd      	mov	sp, r7
 8000e18:	ecbd 8b02 	vpop	{d8}
 8000e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e20 <FFT_Mag>:

double * FFT_Mag(int size , double x[])
{
 8000e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e24:	b08d      	sub	sp, #52	@ 0x34
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
 8000e2c:	466b      	mov	r3, sp
 8000e2e:	461e      	mov	r6, r3
    double A[size +100];
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 8000e36:	1e4b      	subs	r3, r1, #1
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e3a:	460a      	mov	r2, r1
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	4690      	mov	r8, r2
 8000e40:	4699      	mov	r9, r3
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000e4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000e52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000e56:	460a      	mov	r2, r1
 8000e58:	2300      	movs	r3, #0
 8000e5a:	4614      	mov	r4, r2
 8000e5c:	461d      	mov	r5, r3
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	01ab      	lsls	r3, r5, #6
 8000e68:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000e6c:	01a2      	lsls	r2, r4, #6
 8000e6e:	460b      	mov	r3, r1
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	3307      	adds	r3, #7
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	ebad 0d03 	sub.w	sp, sp, r3
 8000e7c:	466b      	mov	r3, sp
 8000e7e:	3307      	adds	r3, #7
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    double cr , ci;
    double complex*X = FFT(size , x);
 8000e86:	6839      	ldr	r1, [r7, #0]
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fdc9 	bl	8000a20 <FFT>
 8000e8e:	6238      	str	r0, [r7, #32]
    for (int i = 0 ; i < size ; i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e94:	e035      	b.n	8000f02 <FFT_Mag+0xe2>
    {
        cr = (creal(X[i]) * creal(X[i]));
 8000e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	6a3a      	ldr	r2, [r7, #32]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	ed93 6b00 	vldr	d6, [r3]
 8000ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	ed93 7b00 	vldr	d7, [r3]
 8000eae:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000eb2:	ed87 7b04 	vstr	d7, [r7, #16]

        ci = (cimag(X[i]) * cimag(X[i]));
 8000eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	6a3a      	ldr	r2, [r7, #32]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	ed93 6b02 	vldr	d6, [r3, #8]
 8000ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	6a3a      	ldr	r2, [r7, #32]
 8000ec8:	4413      	add	r3, r2
 8000eca:	ed93 7b02 	vldr	d7, [r3, #8]
 8000ece:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ed2:	ed87 7b02 	vstr	d7, [r7, #8]
        A[i] = (cr + ci) / size;
 8000ed6:	ed97 6b04 	vldr	d6, [r7, #16]
 8000eda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ede:	ee36 5b07 	vadd.f64	d5, d6, d7
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000eec:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0 ; i < size ; i++)
 8000efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000efe:	3301      	adds	r3, #1
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dbc5      	blt.n	8000e96 <FFT_Mag+0x76>
    }
    double* a = A;
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0c:	61fb      	str	r3, [r7, #28]
    return a;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	46b5      	mov	sp, r6
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3734      	adds	r7, #52	@ 0x34
 8000f16:	46bd      	mov	sp, r7
 8000f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	@ 0x28
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f40:	4b30      	ldr	r3, [pc, #192]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f42:	4a31      	ldr	r2, [pc, #196]	@ (8001008 <MX_ADC1_Init+0xec>)
 8000f44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f46:	4b2f      	ldr	r3, [pc, #188]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f58:	4b2a      	ldr	r3, [pc, #168]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f5e:	4b29      	ldr	r3, [pc, #164]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f64:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f70:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000f76:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f78:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000f7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f88:	2203      	movs	r2, #3
 8000f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa0:	4818      	ldr	r0, [pc, #96]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000fa2:	f001 fbf1 	bl	8002788 <HAL_ADC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fac:	f000 fd8e 	bl	8001acc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4812      	ldr	r0, [pc, #72]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000fbc:	f002 ff32 	bl	8003e24 <HAL_ADCEx_MultiModeConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000fc6:	f000 fd81 	bl	8001acc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <MX_ADC1_Init+0xf0>)
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fce:	2306      	movs	r3, #6
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000fda:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_ADC1_Init+0xe8>)
 8000fee:	f001 ffc5 	bl	8002f7c <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ff8:	f000 fd68 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3728      	adds	r7, #40	@ 0x28
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	240046dc 	.word	0x240046dc
 8001008:	40022000 	.word	0x40022000
 800100c:	0c900008 	.word	0x0c900008

08001010 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b0bc      	sub	sp, #240	@ 0xf0
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001028:	f107 0318 	add.w	r3, r7, #24
 800102c:	22c0      	movs	r2, #192	@ 0xc0
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f00c fe3e 	bl	800dcb2 <memset>
  if(adcHandle->Instance==ADC1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a53      	ldr	r2, [pc, #332]	@ (8001188 <HAL_ADC_MspInit+0x178>)
 800103c:	4293      	cmp	r3, r2
 800103e:	f040 809e 	bne.w	800117e <HAL_ADC_MspInit+0x16e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001042:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 10;
 800104e:	230a      	movs	r3, #10
 8001050:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 384;
 8001052:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 6;
 8001058:	2306      	movs	r3, #6
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800105c:	2302      	movs	r3, #2
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001060:	2302      	movs	r3, #2
 8001062:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001064:	2340      	movs	r3, #64	@ 0x40
 8001066:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4618      	mov	r0, r3
 800107c:	f007 feac 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8001086:	f000 fd21 	bl	8001acc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800108a:	4b40      	ldr	r3, [pc, #256]	@ (800118c <HAL_ADC_MspInit+0x17c>)
 800108c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001090:	4a3e      	ldr	r2, [pc, #248]	@ (800118c <HAL_ADC_MspInit+0x17c>)
 8001092:	f043 0320 	orr.w	r3, r3, #32
 8001096:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800109a:	4b3c      	ldr	r3, [pc, #240]	@ (800118c <HAL_ADC_MspInit+0x17c>)
 800109c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b38      	ldr	r3, [pc, #224]	@ (800118c <HAL_ADC_MspInit+0x17c>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	4a37      	ldr	r2, [pc, #220]	@ (800118c <HAL_ADC_MspInit+0x17c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b8:	4b34      	ldr	r3, [pc, #208]	@ (800118c <HAL_ADC_MspInit+0x17c>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b31      	ldr	r3, [pc, #196]	@ (800118c <HAL_ADC_MspInit+0x17c>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	4a2f      	ldr	r2, [pc, #188]	@ (800118c <HAL_ADC_MspInit+0x17c>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d6:	4b2d      	ldr	r3, [pc, #180]	@ (800118c <HAL_ADC_MspInit+0x17c>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010e4:	2340      	movs	r3, #64	@ 0x40
 80010e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010fa:	4619      	mov	r1, r3
 80010fc:	4824      	ldr	r0, [pc, #144]	@ (8001190 <HAL_ADC_MspInit+0x180>)
 80010fe:	f006 fa4d 	bl	800759c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001102:	2310      	movs	r3, #16
 8001104:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001118:	4619      	mov	r1, r3
 800111a:	481e      	ldr	r0, [pc, #120]	@ (8001194 <HAL_ADC_MspInit+0x184>)
 800111c:	f006 fa3e 	bl	800759c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 8001122:	4a1e      	ldr	r2, [pc, #120]	@ (800119c <HAL_ADC_MspInit+0x18c>)
 8001124:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 8001128:	2209      	movs	r2, #9
 800112a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001138:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 800113a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800113e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 8001142:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001146:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 800114a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800114e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 8001164:	f003 fa28 	bl	80045b8 <HAL_DMA_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_ADC_MspInit+0x162>
    {
      Error_Handler();
 800116e:	f000 fcad 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 8001176:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <HAL_ADC_MspInit+0x188>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	37f0      	adds	r7, #240	@ 0xf0
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40022000 	.word	0x40022000
 800118c:	58024400 	.word	0x58024400
 8001190:	58020000 	.word	0x58020000
 8001194:	58020800 	.word	0x58020800
 8001198:	24004740 	.word	0x24004740
 800119c:	40020010 	.word	0x40020010

080011a0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <HAL_ADC_MspDeInit+0x44>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d114      	bne.n	80011dc <HAL_ADC_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <HAL_ADC_MspDeInit+0x48>)
 80011b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011b8:	4a0b      	ldr	r2, [pc, #44]	@ (80011e8 <HAL_ADC_MspDeInit+0x48>)
 80011ba:	f023 0320 	bic.w	r3, r3, #32
 80011be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 80011c2:	2140      	movs	r1, #64	@ 0x40
 80011c4:	4809      	ldr	r0, [pc, #36]	@ (80011ec <HAL_ADC_MspDeInit+0x4c>)
 80011c6:	f006 fb99 	bl	80078fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 80011ca:	2110      	movs	r1, #16
 80011cc:	4808      	ldr	r0, [pc, #32]	@ (80011f0 <HAL_ADC_MspDeInit+0x50>)
 80011ce:	f006 fb95 	bl	80078fc <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fd4a 	bl	8004c70 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40022000 	.word	0x40022000
 80011e8:	58024400 	.word	0x58024400
 80011ec:	58020000 	.word	0x58020000
 80011f0:	58020800 	.word	0x58020800

080011f4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2224      	movs	r2, #36	@ 0x24
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f00c fd56 	bl	800dcb2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_DAC1_Init+0x5c>)
 8001208:	4a12      	ldr	r2, [pc, #72]	@ (8001254 <MX_DAC1_Init+0x60>)
 800120a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800120c:	4810      	ldr	r0, [pc, #64]	@ (8001250 <MX_DAC1_Init+0x5c>)
 800120e:	f003 f873 	bl	80042f8 <HAL_DAC_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001218:	f000 fc58 	bl	8001acc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8001220:	2302      	movs	r3, #2
 8001222:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001224:	2302      	movs	r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001228:	2301      	movs	r3, #1
 800122a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2210      	movs	r2, #16
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	@ (8001250 <MX_DAC1_Init+0x5c>)
 8001238:	f003 f880 	bl	800433c <HAL_DAC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001242:	f000 fc43 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	@ 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	240047b8 	.word	0x240047b8
 8001254:	40007400 	.word	0x40007400

08001258 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	@ 0x28
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a30      	ldr	r2, [pc, #192]	@ (8001338 <HAL_DAC_MspInit+0xe0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d159      	bne.n	800132e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800127a:	4b30      	ldr	r3, [pc, #192]	@ (800133c <HAL_DAC_MspInit+0xe4>)
 800127c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001280:	4a2e      	ldr	r2, [pc, #184]	@ (800133c <HAL_DAC_MspInit+0xe4>)
 8001282:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001286:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800128a:	4b2c      	ldr	r3, [pc, #176]	@ (800133c <HAL_DAC_MspInit+0xe4>)
 800128c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b28      	ldr	r3, [pc, #160]	@ (800133c <HAL_DAC_MspInit+0xe4>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129e:	4a27      	ldr	r2, [pc, #156]	@ (800133c <HAL_DAC_MspInit+0xe4>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <HAL_DAC_MspInit+0xe4>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012b6:	2320      	movs	r3, #32
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	481d      	ldr	r0, [pc, #116]	@ (8001340 <HAL_DAC_MspInit+0xe8>)
 80012ca:	f006 f967 	bl	800759c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 80012d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001348 <HAL_DAC_MspInit+0xf0>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 80012d6:	2244      	movs	r2, #68	@ 0x44
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 80012dc:	2240      	movs	r2, #64	@ 0x40
 80012de:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 80012e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ec:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 80012f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012f4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 80012f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012fc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 8001300:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001304:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001306:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800130c:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001312:	480c      	ldr	r0, [pc, #48]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 8001314:	f003 f950 	bl	80045b8 <HAL_DMA_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800131e:	f000 fbd5 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <HAL_DAC_MspInit+0xec>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800132e:	bf00      	nop
 8001330:	3728      	adds	r7, #40	@ 0x28
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40007400 	.word	0x40007400
 800133c:	58024400 	.word	0x58024400
 8001340:	58020000 	.word	0x58020000
 8001344:	240047cc 	.word	0x240047cc
 8001348:	40020028 	.word	0x40020028

0800134c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_DMA_Init+0x4c>)
 8001354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001358:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <MX_DMA_Init+0x4c>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <MX_DMA_Init+0x4c>)
 8001364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	200b      	movs	r0, #11
 8001376:	f002 ff0e 	bl	8004196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800137a:	200b      	movs	r0, #11
 800137c:	f002 ff25 	bl	80041ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	200c      	movs	r0, #12
 8001386:	f002 ff06 	bl	8004196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800138a:	200c      	movs	r0, #12
 800138c:	f002 ff1d 	bl	80041ca <HAL_NVIC_EnableIRQ>

}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	58024400 	.word	0x58024400

0800139c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	4b39      	ldr	r3, [pc, #228]	@ (8001498 <MX_GPIO_Init+0xfc>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b8:	4a37      	ldr	r2, [pc, #220]	@ (8001498 <MX_GPIO_Init+0xfc>)
 80013ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c2:	4b35      	ldr	r3, [pc, #212]	@ (8001498 <MX_GPIO_Init+0xfc>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b31      	ldr	r3, [pc, #196]	@ (8001498 <MX_GPIO_Init+0xfc>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d6:	4a30      	ldr	r2, [pc, #192]	@ (8001498 <MX_GPIO_Init+0xfc>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <MX_GPIO_Init+0xfc>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <MX_GPIO_Init+0xfc>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f4:	4a28      	ldr	r2, [pc, #160]	@ (8001498 <MX_GPIO_Init+0xfc>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <MX_GPIO_Init+0xfc>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <MX_GPIO_Init+0xfc>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001412:	4a21      	ldr	r2, [pc, #132]	@ (8001498 <MX_GPIO_Init+0xfc>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800141c:	4b1e      	ldr	r3, [pc, #120]	@ (8001498 <MX_GPIO_Init+0xfc>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <MX_GPIO_Init+0xfc>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001430:	4a19      	ldr	r2, [pc, #100]	@ (8001498 <MX_GPIO_Init+0xfc>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <MX_GPIO_Init+0xfc>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2
 8001448:	2200      	movs	r2, #0
 800144a:	f24c 011e 	movw	r1, #49182	@ 0xc01e
 800144e:	4813      	ldr	r0, [pc, #76]	@ (800149c <MX_GPIO_Init+0x100>)
 8001450:	f006 fb5e 	bl	8007b10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001454:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	480b      	ldr	r0, [pc, #44]	@ (800149c <MX_GPIO_Init+0x100>)
 800146e:	f006 f895 	bl	800759c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001472:	231e      	movs	r3, #30
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147e:	2302      	movs	r3, #2
 8001480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_GPIO_Init+0x100>)
 800148a:	f006 f887 	bl	800759c <HAL_GPIO_Init>

}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	@ 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	58024400 	.word	0x58024400
 800149c:	58020c00 	.word	0x58020c00

080014a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <MX_I2C1_Init+0x74>)
 80014a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001518 <MX_I2C1_Init+0x78>)
 80014a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <MX_I2C1_Init+0x74>)
 80014ac:	4a1b      	ldr	r2, [pc, #108]	@ (800151c <MX_I2C1_Init+0x7c>)
 80014ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b6:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <MX_I2C1_Init+0x74>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <MX_I2C1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <MX_I2C1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014da:	480e      	ldr	r0, [pc, #56]	@ (8001514 <MX_I2C1_Init+0x74>)
 80014dc:	f006 fb32 	bl	8007b44 <HAL_I2C_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014e6:	f000 faf1 	bl	8001acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4809      	ldr	r0, [pc, #36]	@ (8001514 <MX_I2C1_Init+0x74>)
 80014ee:	f006 fbb9 	bl	8007c64 <HAL_I2CEx_ConfigAnalogFilter>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014f8:	f000 fae8 	bl	8001acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014fc:	2100      	movs	r1, #0
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <MX_I2C1_Init+0x74>)
 8001500:	f006 fbfb 	bl	8007cfa <HAL_I2CEx_ConfigDigitalFilter>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800150a:	f000 fadf 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	24004844 	.word	0x24004844
 8001518:	40005400 	.word	0x40005400
 800151c:	00b03fdb 	.word	0x00b03fdb

08001520 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0ba      	sub	sp, #232	@ 0xe8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	22c0      	movs	r2, #192	@ 0xc0
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f00c fbb6 	bl	800dcb2 <memset>
  if(i2cHandle->Instance==I2C1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a26      	ldr	r2, [pc, #152]	@ (80015e4 <HAL_I2C_MspInit+0xc4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d145      	bne.n	80015dc <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001550:	f04f 0208 	mov.w	r2, #8
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4618      	mov	r0, r3
 8001568:	f007 fc36 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001572:	f000 faab 	bl	8001acc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <HAL_I2C_MspInit+0xc8>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157c:	4a1a      	ldr	r2, [pc, #104]	@ (80015e8 <HAL_I2C_MspInit+0xc8>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001586:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <HAL_I2C_MspInit+0xc8>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001594:	23c0      	movs	r3, #192	@ 0xc0
 8001596:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159a:	2312      	movs	r3, #18
 800159c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ac:	2304      	movs	r3, #4
 80015ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	@ (80015ec <HAL_I2C_MspInit+0xcc>)
 80015ba:	f005 ffef 	bl	800759c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_I2C_MspInit+0xc8>)
 80015c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015c4:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <HAL_I2C_MspInit+0xc8>)
 80015c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_I2C_MspInit+0xc8>)
 80015d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015dc:	bf00      	nop
 80015de:	37e8      	adds	r7, #232	@ 0xe8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40005400 	.word	0x40005400
 80015e8:	58024400 	.word	0x58024400
 80015ec:	58020400 	.word	0x58020400

080015f0 <adc_init>:
__IO uint8_t AdcConvEnd = 0;

double v[FO_LENGTH];

void adc_init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015f8:	220b      	movs	r2, #11
 80015fa:	4920      	ldr	r1, [pc, #128]	@ (800167c <adc_init+0x8c>)
 80015fc:	4820      	ldr	r0, [pc, #128]	@ (8001680 <adc_init+0x90>)
 80015fe:	f00a fce7 	bl	800bfd0 <HAL_UART_Transmit>
	MX_ADC1_Init();
 8001602:	f7ff fc8b 	bl	8000f1c <MX_ADC1_Init>
	HAL_Delay(1);
 8001606:	2001      	movs	r0, #1
 8001608:	f000 fe56 	bl	80022b8 <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 800160c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001610:	2100      	movs	r1, #0
 8001612:	481c      	ldr	r0, [pc, #112]	@ (8001684 <adc_init+0x94>)
 8001614:	f002 fba2 	bl	8003d5c <HAL_ADCEx_Calibration_Start>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <adc_init+0x40>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 800161e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001622:	222f      	movs	r2, #47	@ 0x2f
 8001624:	4918      	ldr	r1, [pc, #96]	@ (8001688 <adc_init+0x98>)
 8001626:	4816      	ldr	r0, [pc, #88]	@ (8001680 <adc_init+0x90>)
 8001628:	f00a fcd2 	bl	800bfd0 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 800162c:	f000 fa4e 	bl	8001acc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH) != HAL_OK)
 8001630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001634:	4915      	ldr	r1, [pc, #84]	@ (800168c <adc_init+0x9c>)
 8001636:	4813      	ldr	r0, [pc, #76]	@ (8001684 <adc_init+0x94>)
 8001638:	f001 fbc8 	bl	8002dcc <HAL_ADC_Start_DMA>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <adc_init+0x64>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 8001642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001646:	2225      	movs	r2, #37	@ 0x25
 8001648:	4911      	ldr	r1, [pc, #68]	@ (8001690 <adc_init+0xa0>)
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <adc_init+0x90>)
 800164c:	f00a fcc0 	bl	800bfd0 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001650:	f000 fa3c 	bl	8001acc <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8001654:	480f      	ldr	r0, [pc, #60]	@ (8001694 <adc_init+0xa4>)
 8001656:	f00a f915 	bl	800b884 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 800165a:	bf00      	nop
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <adc_init+0xa8>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0fa      	beq.n	800165c <adc_init+0x6c>
	AdcConvEnd = 0;
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <adc_init+0xa8>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 800166c:	4805      	ldr	r0, [pc, #20]	@ (8001684 <adc_init+0x94>)
 800166e:	f001 fa2d 	bl	8002acc <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 8001672:	4808      	ldr	r0, [pc, #32]	@ (8001694 <adc_init+0xa4>)
 8001674:	f00a f976 	bl	800b964 <HAL_TIM_Base_Stop>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	08013750 	.word	0x08013750
 8001680:	2401493c 	.word	0x2401493c
 8001684:	240046dc 	.word	0x240046dc
 8001688:	0801375c 	.word	0x0801375c
 800168c:	240006c0 	.word	0x240006c0
 8001690:	0801378c 	.word	0x0801378c
 8001694:	240148f0 	.word	0x240148f0
 8001698:	24004898 	.word	0x24004898
 800169c:	00000000 	.word	0x00000000

080016a0 <ADC_Get>:


void ADC_Get(double arr[])
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	adc_init();
 80016a8:	f7ff ffa2 	bl	80015f0 <adc_init>
	double voltage;
//	char str[50];

	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 80016ac:	2300      	movs	r3, #0
 80016ae:	82fb      	strh	r3, [r7, #22]
 80016b0:	e020      	b.n	80016f4 <ADC_Get+0x54>
		voltage = ((double)adc1_data[temp]*3.3)/65535 *3;
 80016b2:	8afb      	ldrh	r3, [r7, #22]
 80016b4:	4a18      	ldr	r2, [pc, #96]	@ (8001718 <ADC_Get+0x78>)
 80016b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016c2:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8001708 <ADC_Get+0x68>
 80016c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016ca:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001710 <ADC_Get+0x70>
 80016ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016d2:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 80016d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016da:	ed87 7b02 	vstr	d7, [r7, #8]

		arr[temp] = voltage;
 80016de:	8afb      	ldrh	r3, [r7, #22]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	18d1      	adds	r1, r2, r3
 80016e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ea:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 80016ee:	8afb      	ldrh	r3, [r7, #22]
 80016f0:	3301      	adds	r3, #1
 80016f2:	82fb      	strh	r3, [r7, #22]
 80016f4:	8afb      	ldrh	r3, [r7, #22]
 80016f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016fa:	d3da      	bcc.n	80016b2 <ADC_Get+0x12>
//		sprintf(str , "%.5f" , v[temp]);
//		HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//		HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
	}
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	66666666 	.word	0x66666666
 800170c:	400a6666 	.word	0x400a6666
 8001710:	00000000 	.word	0x00000000
 8001714:	40efffe0 	.word	0x40efffe0
 8001718:	240006c0 	.word	0x240006c0

0800171c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b092      	sub	sp, #72	@ 0x48
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001722:	f000 f975 	bl	8001a10 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001726:	4b52      	ldr	r3, [pc, #328]	@ (8001870 <main+0x154>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d11b      	bne.n	800176a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001732:	f3bf 8f4f 	dsb	sy
}
 8001736:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001738:	f3bf 8f6f 	isb	sy
}
 800173c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800173e:	4b4c      	ldr	r3, [pc, #304]	@ (8001870 <main+0x154>)
 8001740:	2200      	movs	r2, #0
 8001742:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001746:	f3bf 8f4f 	dsb	sy
}
 800174a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800174c:	f3bf 8f6f 	isb	sy
}
 8001750:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001752:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <main+0x154>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	4a46      	ldr	r2, [pc, #280]	@ (8001870 <main+0x154>)
 8001758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800175c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800175e:	f3bf 8f4f 	dsb	sy
}
 8001762:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001764:	f3bf 8f6f 	isb	sy
}
 8001768:	e000      	b.n	800176c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800176a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800176c:	4b40      	ldr	r3, [pc, #256]	@ (8001870 <main+0x154>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d138      	bne.n	80017ea <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001778:	4b3d      	ldr	r3, [pc, #244]	@ (8001870 <main+0x154>)
 800177a:	2200      	movs	r2, #0
 800177c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001780:	f3bf 8f4f 	dsb	sy
}
 8001784:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001786:	4b3a      	ldr	r3, [pc, #232]	@ (8001870 <main+0x154>)
 8001788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800178c:	63fb      	str	r3, [r7, #60]	@ 0x3c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800178e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001790:	0b5b      	lsrs	r3, r3, #13
 8001792:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001796:	63bb      	str	r3, [r7, #56]	@ 0x38
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800179a:	08db      	lsrs	r3, r3, #3
 800179c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a0:	637b      	str	r3, [r7, #52]	@ 0x34
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80017aa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80017ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017ae:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017b0:	492f      	ldr	r1, [pc, #188]	@ (8001870 <main+0x154>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80017b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ba:	1e5a      	subs	r2, r3, #1
 80017bc:	637a      	str	r2, [r7, #52]	@ 0x34
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ef      	bne.n	80017a2 <main+0x86>
    } while(sets-- != 0U);
 80017c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017c4:	1e5a      	subs	r2, r3, #1
 80017c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1e5      	bne.n	8001798 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80017cc:	f3bf 8f4f 	dsb	sy
}
 80017d0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80017d2:	4b27      	ldr	r3, [pc, #156]	@ (8001870 <main+0x154>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	4a26      	ldr	r2, [pc, #152]	@ (8001870 <main+0x154>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017de:	f3bf 8f4f 	dsb	sy
}
 80017e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017e4:	f3bf 8f6f 	isb	sy
}
 80017e8:	e000      	b.n	80017ec <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80017ea:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ec:	f000 fcd2 	bl	8002194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f0:	f000 f848 	bl	8001884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f4:	f7ff fdd2 	bl	800139c <MX_GPIO_Init>
  MX_DMA_Init();
 80017f8:	f7ff fda8 	bl	800134c <MX_DMA_Init>
  MX_I2C1_Init();
 80017fc:	f7ff fe50 	bl	80014a0 <MX_I2C1_Init>
  MX_TIM15_Init();
 8001800:	f000 fb56 	bl	8001eb0 <MX_TIM15_Init>
  MX_DAC1_Init();
 8001804:	f7ff fcf6 	bl	80011f4 <MX_DAC1_Init>
  MX_TIM7_Init();
 8001808:	f000 fb1c 	bl	8001e44 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800180c:	f000 fbda 	bl	8001fc4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001810:	f7ff fb84 	bl	8000f1c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  char str[50];
  ADC_Get(v);
 8001814:	4817      	ldr	r0, [pc, #92]	@ (8001874 <main+0x158>)
 8001816:	f7ff ff43 	bl	80016a0 <ADC_Get>
  double* mag = FFT_Mag(FO_LENGTH, v);
 800181a:	4916      	ldr	r1, [pc, #88]	@ (8001874 <main+0x158>)
 800181c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001820:	f7ff fafe 	bl	8000e20 <FFT_Mag>
 8001824:	6438      	str	r0, [r7, #64]	@ 0x40
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	647b      	str	r3, [r7, #68]	@ 0x44
 800182a:	e01a      	b.n	8001862 <main+0x146>
  {
	  sprintf(str , "%.5f" , v[i]);
 800182c:	4a11      	ldr	r2, [pc, #68]	@ (8001874 <main+0x158>)
 800182e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4413      	add	r3, r2
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	4638      	mov	r0, r7
 800183a:	490f      	ldr	r1, [pc, #60]	@ (8001878 <main+0x15c>)
 800183c:	f00c f9d6 	bl	800dbec <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 8001840:	4639      	mov	r1, r7
 8001842:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001846:	2207      	movs	r2, #7
 8001848:	480c      	ldr	r0, [pc, #48]	@ (800187c <main+0x160>)
 800184a:	f00a fbc1 	bl	800bfd0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 800184e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001852:	2201      	movs	r2, #1
 8001854:	490a      	ldr	r1, [pc, #40]	@ (8001880 <main+0x164>)
 8001856:	4809      	ldr	r0, [pc, #36]	@ (800187c <main+0x160>)
 8001858:	f00a fbba 	bl	800bfd0 <HAL_UART_Transmit>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 800185c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800185e:	3301      	adds	r3, #1
 8001860:	647b      	str	r3, [r7, #68]	@ 0x44
 8001862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001868:	dbe0      	blt.n	800182c <main+0x110>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800186a:	bf00      	nop
 800186c:	e7fd      	b.n	800186a <main+0x14e>
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	240048a0 	.word	0x240048a0
 8001878:	080137b4 	.word	0x080137b4
 800187c:	2401493c 	.word	0x2401493c
 8001880:	080137bc 	.word	0x080137bc

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b09e      	sub	sp, #120	@ 0x78
 8001888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800188e:	224c      	movs	r2, #76	@ 0x4c
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f00c fa0d 	bl	800dcb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	2220      	movs	r2, #32
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00c fa06 	bl	800dcb2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80018a6:	2002      	movs	r0, #2
 80018a8:	f006 fa74 	bl	8007d94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	4b4c      	ldr	r3, [pc, #304]	@ (80019e4 <SystemClock_Config+0x160>)
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	4a4b      	ldr	r2, [pc, #300]	@ (80019e4 <SystemClock_Config+0x160>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80018bc:	4b49      	ldr	r3, [pc, #292]	@ (80019e4 <SystemClock_Config+0x160>)
 80018be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	4b48      	ldr	r3, [pc, #288]	@ (80019e8 <SystemClock_Config+0x164>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a47      	ldr	r2, [pc, #284]	@ (80019e8 <SystemClock_Config+0x164>)
 80018cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b45      	ldr	r3, [pc, #276]	@ (80019e8 <SystemClock_Config+0x164>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018de:	bf00      	nop
 80018e0:	4b41      	ldr	r3, [pc, #260]	@ (80019e8 <SystemClock_Config+0x164>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018ec:	d1f8      	bne.n	80018e0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b3f      	ldr	r3, [pc, #252]	@ (80019ec <SystemClock_Config+0x168>)
 80018f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018f4:	4a3d      	ldr	r2, [pc, #244]	@ (80019ec <SystemClock_Config+0x168>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018fe:	4b3b      	ldr	r3, [pc, #236]	@ (80019ec <SystemClock_Config+0x168>)
 8001900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800190c:	2300      	movs	r3, #0
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	4b35      	ldr	r3, [pc, #212]	@ (80019e8 <SystemClock_Config+0x164>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a34      	ldr	r2, [pc, #208]	@ (80019e8 <SystemClock_Config+0x164>)
 8001916:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <SystemClock_Config+0x164>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <SystemClock_Config+0x160>)
 8001928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192a:	4a2e      	ldr	r2, [pc, #184]	@ (80019e4 <SystemClock_Config+0x160>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001932:	4b2c      	ldr	r3, [pc, #176]	@ (80019e4 <SystemClock_Config+0x160>)
 8001934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800193e:	bf00      	nop
 8001940:	4b29      	ldr	r3, [pc, #164]	@ (80019e8 <SystemClock_Config+0x164>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800194c:	d1f8      	bne.n	8001940 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800194e:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <SystemClock_Config+0x168>)
 8001950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001952:	f023 0303 	bic.w	r3, r3, #3
 8001956:	4a25      	ldr	r2, [pc, #148]	@ (80019ec <SystemClock_Config+0x168>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800195e:	2301      	movs	r3, #1
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001962:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001966:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001968:	2302      	movs	r3, #2
 800196a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800196c:	2302      	movs	r3, #2
 800196e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001970:	2305      	movs	r3, #5
 8001972:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001974:	23c0      	movs	r3, #192	@ 0xc0
 8001976:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001978:	2302      	movs	r3, #2
 800197a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800197c:	2302      	movs	r3, #2
 800197e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001980:	2302      	movs	r3, #2
 8001982:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001984:	2308      	movs	r3, #8
 8001986:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001988:	2300      	movs	r3, #0
 800198a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001994:	4618      	mov	r0, r3
 8001996:	f006 fa37 	bl	8007e08 <HAL_RCC_OscConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80019a0:	f000 f894 	bl	8001acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a4:	233f      	movs	r3, #63	@ 0x3f
 80019a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a8:	2303      	movs	r3, #3
 80019aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80019b0:	2308      	movs	r3, #8
 80019b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80019b4:	2340      	movs	r3, #64	@ 0x40
 80019b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80019b8:	2340      	movs	r3, #64	@ 0x40
 80019ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80019bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80019c2:	2340      	movs	r3, #64	@ 0x40
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2104      	movs	r1, #4
 80019cc:	4618      	mov	r0, r3
 80019ce:	f006 fe77 	bl	80086c0 <HAL_RCC_ClockConfig>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <SystemClock_Config+0x158>
  {
    Error_Handler();
 80019d8:	f000 f878 	bl	8001acc <Error_Handler>
  }
}
 80019dc:	bf00      	nop
 80019de:	3778      	adds	r7, #120	@ 0x78
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	58000400 	.word	0x58000400
 80019e8:	58024800 	.word	0x58024800
 80019ec:	58024400 	.word	0x58024400

080019f0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <HAL_ADC_ConvCpltCallback+0x1c>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	24004898 	.word	0x24004898

08001a10 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a16:	463b      	mov	r3, r7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a22:	f002 fbed 	bl	8004200 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a26:	2301      	movs	r3, #1
 8001a28:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001a2e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001a32:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001a34:	2312      	movs	r3, #18
 8001a36:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001a40:	2303      	movs	r3, #3
 8001a42:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a54:	463b      	mov	r3, r7
 8001a56:	4618      	mov	r0, r3
 8001a58:	f002 fc0a 	bl	8004270 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001a60:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001a64:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8001a66:	2310      	movs	r3, #16
 8001a68:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a72:	463b      	mov	r3, r7
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fbfb 	bl	8004270 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <MPU_Config+0xb4>)
 8001a80:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a82:	463b      	mov	r3, r7
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 fbf3 	bl	8004270 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <MPU_Config+0xb8>)
 8001a90:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001a92:	230e      	movs	r3, #14
 8001a94:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a96:	463b      	mov	r3, r7
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fbe9 	bl	8004270 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8001aa2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8001aa6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001aac:	463b      	mov	r3, r7
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fbde 	bl	8004270 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ab4:	2004      	movs	r0, #4
 8001ab6:	f002 fbbb 	bl	8004230 <HAL_MPU_Enable>

}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	30020000 	.word	0x30020000
 8001ac8:	30040000 	.word	0x30040000

08001acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <Error_Handler+0x8>

08001ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <HAL_MspInit+0x30>)
 8001ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ae4:	4a08      	ldr	r2, [pc, #32]	@ (8001b08 <HAL_MspInit+0x30>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_MspInit+0x30>)
 8001af0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	58024400 	.word	0x58024400

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <NMI_Handler+0x4>

08001b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <HardFault_Handler+0x4>

08001b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <MemManage_Handler+0x4>

08001b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b62:	f000 fb89 	bl	8002278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <DMA1_Stream0_IRQHandler+0x10>)
 8001b72:	f004 fa01 	bl	8005f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	24004740 	.word	0x24004740

08001b80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8001b84:	4802      	ldr	r0, [pc, #8]	@ (8001b90 <DMA1_Stream1_IRQHandler+0x10>)
 8001b86:	f004 f9f7 	bl	8005f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	240047cc 	.word	0x240047cc

08001b94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <USART1_IRQHandler+0x10>)
 8001b9a:	f00a faa7 	bl	800c0ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2401493c 	.word	0x2401493c

08001ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_kill>:

int _kill(int pid, int sig)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc2:	f00c f8c5 	bl	800dd50 <__errno>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2216      	movs	r2, #22
 8001bca:	601a      	str	r2, [r3, #0]
  return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_exit>:

void _exit (int status)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ffe7 	bl	8001bb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bea:	bf00      	nop
 8001bec:	e7fd      	b.n	8001bea <_exit+0x12>

08001bee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b086      	sub	sp, #24
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e00a      	b.n	8001c16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c00:	f3af 8000 	nop.w
 8001c04:	4601      	mov	r1, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	60ba      	str	r2, [r7, #8]
 8001c0c:	b2ca      	uxtb	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	dbf0      	blt.n	8001c00 <_read+0x12>
  }

  return len;
 8001c1e:	687b      	ldr	r3, [r7, #4]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e009      	b.n	8001c4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	60ba      	str	r2, [r7, #8]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	dbf1      	blt.n	8001c3a <_write+0x12>
  }
  return len;
 8001c56:	687b      	ldr	r3, [r7, #4]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_close>:

int _close(int file)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c88:	605a      	str	r2, [r3, #4]
  return 0;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_isatty>:

int _isatty(int file)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca0:	2301      	movs	r3, #1
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b085      	sub	sp, #20
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	@ (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f00c f82a 	bl	800dd50 <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	@ (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	24080000 	.word	0x24080000
 8001d28:	00001000 	.word	0x00001000
 8001d2c:	240148a0 	.word	0x240148a0
 8001d30:	24014ce0 	.word	0x24014ce0

08001d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d38:	4b37      	ldr	r3, [pc, #220]	@ (8001e18 <SystemInit+0xe4>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d3e:	4a36      	ldr	r2, [pc, #216]	@ (8001e18 <SystemInit+0xe4>)
 8001d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d48:	4b34      	ldr	r3, [pc, #208]	@ (8001e1c <SystemInit+0xe8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	2b06      	cmp	r3, #6
 8001d52:	d807      	bhi.n	8001d64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d54:	4b31      	ldr	r3, [pc, #196]	@ (8001e1c <SystemInit+0xe8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 030f 	bic.w	r3, r3, #15
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8001e1c <SystemInit+0xe8>)
 8001d5e:	f043 0307 	orr.w	r3, r3, #7
 8001d62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d64:	4b2e      	ldr	r3, [pc, #184]	@ (8001e20 <SystemInit+0xec>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a2d      	ldr	r2, [pc, #180]	@ (8001e20 <SystemInit+0xec>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d70:	4b2b      	ldr	r3, [pc, #172]	@ (8001e20 <SystemInit+0xec>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d76:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <SystemInit+0xec>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4929      	ldr	r1, [pc, #164]	@ (8001e20 <SystemInit+0xec>)
 8001d7c:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <SystemInit+0xf0>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d82:	4b26      	ldr	r3, [pc, #152]	@ (8001e1c <SystemInit+0xe8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d8e:	4b23      	ldr	r3, [pc, #140]	@ (8001e1c <SystemInit+0xe8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 030f 	bic.w	r3, r3, #15
 8001d96:	4a21      	ldr	r2, [pc, #132]	@ (8001e1c <SystemInit+0xe8>)
 8001d98:	f043 0307 	orr.w	r3, r3, #7
 8001d9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d9e:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <SystemInit+0xec>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001da4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <SystemInit+0xec>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001daa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <SystemInit+0xec>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <SystemInit+0xec>)
 8001db2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e28 <SystemInit+0xf4>)
 8001db4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <SystemInit+0xec>)
 8001db8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e2c <SystemInit+0xf8>)
 8001dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <SystemInit+0xec>)
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001e30 <SystemInit+0xfc>)
 8001dc0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	@ (8001e20 <SystemInit+0xec>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <SystemInit+0xec>)
 8001dca:	4a19      	ldr	r2, [pc, #100]	@ (8001e30 <SystemInit+0xfc>)
 8001dcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dce:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <SystemInit+0xec>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <SystemInit+0xec>)
 8001dd6:	4a16      	ldr	r2, [pc, #88]	@ (8001e30 <SystemInit+0xfc>)
 8001dd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dda:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <SystemInit+0xec>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <SystemInit+0xec>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0e      	ldr	r2, [pc, #56]	@ (8001e20 <SystemInit+0xec>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <SystemInit+0xec>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <SystemInit+0x100>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <SystemInit+0x104>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001dfe:	d202      	bcs.n	8001e06 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <SystemInit+0x108>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <SystemInit+0x10c>)
 8001e08:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00
 8001e1c:	52002000 	.word	0x52002000
 8001e20:	58024400 	.word	0x58024400
 8001e24:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e28:	02020200 	.word	0x02020200
 8001e2c:	01ff0000 	.word	0x01ff0000
 8001e30:	01010280 	.word	0x01010280
 8001e34:	5c001000 	.word	0x5c001000
 8001e38:	ffff0000 	.word	0xffff0000
 8001e3c:	51008108 	.word	0x51008108
 8001e40:	52004000 	.word	0x52004000

08001e44 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e54:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <MX_TIM7_Init+0x64>)
 8001e56:	4a15      	ldr	r2, [pc, #84]	@ (8001eac <MX_TIM7_Init+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8001e5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <MX_TIM7_Init+0x64>)
 8001e5c:	22ef      	movs	r2, #239	@ 0xef
 8001e5e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <MX_TIM7_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <MX_TIM7_Init+0x64>)
 8001e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e6c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_TIM7_Init+0x64>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e74:	480c      	ldr	r0, [pc, #48]	@ (8001ea8 <MX_TIM7_Init+0x64>)
 8001e76:	f009 fcad 	bl	800b7d4 <HAL_TIM_Base_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e80:	f7ff fe24 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <MX_TIM7_Init+0x64>)
 8001e92:	f009 ffbf 	bl	800be14 <HAL_TIMEx_MasterConfigSynchronization>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001e9c:	f7ff fe16 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	240148a4 	.word	0x240148a4
 8001eac:	40001400 	.word	0x40001400

08001eb0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ece:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <MX_TIM15_Init+0x98>)
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f4c <MX_TIM15_Init+0x9c>)
 8001ed2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2- 1;
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <MX_TIM15_Init+0x98>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eda:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <MX_TIM15_Init+0x98>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2-1;
 8001ee0:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <MX_TIM15_Init+0x98>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b18      	ldr	r3, [pc, #96]	@ (8001f48 <MX_TIM15_Init+0x98>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001eec:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <MX_TIM15_Init+0x98>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <MX_TIM15_Init+0x98>)
 8001ef4:	2280      	movs	r2, #128	@ 0x80
 8001ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001ef8:	4813      	ldr	r0, [pc, #76]	@ (8001f48 <MX_TIM15_Init+0x98>)
 8001efa:	f009 fc6b 	bl	800b7d4 <HAL_TIM_Base_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8001f04:	f7ff fde2 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	4619      	mov	r1, r3
 8001f14:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <MX_TIM15_Init+0x98>)
 8001f16:	f009 fd4d 	bl	800b9b4 <HAL_TIM_ConfigClockSource>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8001f20:	f7ff fdd4 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f24:	2320      	movs	r3, #32
 8001f26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <MX_TIM15_Init+0x98>)
 8001f32:	f009 ff6f 	bl	800be14 <HAL_TIMEx_MasterConfigSynchronization>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001f3c:	f7ff fdc6 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	240148f0 	.word	0x240148f0
 8001f4c:	40014000 	.word	0x40014000

08001f50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a16      	ldr	r2, [pc, #88]	@ (8001fb8 <HAL_TIM_Base_MspInit+0x68>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10f      	bne.n	8001f82 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f62:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <HAL_TIM_Base_MspInit+0x6c>)
 8001f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f68:	4a14      	ldr	r2, [pc, #80]	@ (8001fbc <HAL_TIM_Base_MspInit+0x6c>)
 8001f6a:	f043 0320 	orr.w	r3, r3, #32
 8001f6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f72:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <HAL_TIM_Base_MspInit+0x6c>)
 8001f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001f80:	e013      	b.n	8001faa <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM15)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc0 <HAL_TIM_Base_MspInit+0x70>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d10e      	bne.n	8001faa <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fbc <HAL_TIM_Base_MspInit+0x6c>)
 8001f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <HAL_TIM_Base_MspInit+0x6c>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f9c:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <HAL_TIM_Base_MspInit+0x6c>)
 8001f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40001400 	.word	0x40001400
 8001fbc:	58024400 	.word	0x58024400
 8001fc0:	40014000 	.word	0x40014000

08001fc4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fc8:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8001fca:	4a23      	ldr	r2, [pc, #140]	@ (8002058 <MX_USART1_UART_Init+0x94>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fce:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8001fd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffa:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002000:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8002002:	2200      	movs	r2, #0
 8002004:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8002008:	2200      	movs	r2, #0
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800200c:	4811      	ldr	r0, [pc, #68]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 800200e:	f009 ff8f 	bl	800bf30 <HAL_UART_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002018:	f7ff fd58 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800201c:	2100      	movs	r1, #0
 800201e:	480d      	ldr	r0, [pc, #52]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8002020:	f00b fc58 	bl	800d8d4 <HAL_UARTEx_SetTxFifoThreshold>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800202a:	f7ff fd4f 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800202e:	2100      	movs	r1, #0
 8002030:	4808      	ldr	r0, [pc, #32]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8002032:	f00b fc8d 	bl	800d950 <HAL_UARTEx_SetRxFifoThreshold>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800203c:	f7ff fd46 	bl	8001acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	@ (8002054 <MX_USART1_UART_Init+0x90>)
 8002042:	f00b fc0e 	bl	800d862 <HAL_UARTEx_DisableFifoMode>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800204c:	f7ff fd3e 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2401493c 	.word	0x2401493c
 8002058:	40011000 	.word	0x40011000

0800205c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b0ba      	sub	sp, #232	@ 0xe8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	22c0      	movs	r2, #192	@ 0xc0
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f00b fe18 	bl	800dcb2 <memset>
  if(uartHandle->Instance==USART1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a2b      	ldr	r2, [pc, #172]	@ (8002134 <HAL_UART_MspInit+0xd8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d14e      	bne.n	800212a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800208c:	f04f 0201 	mov.w	r2, #1
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209e:	f107 0310 	add.w	r3, r7, #16
 80020a2:	4618      	mov	r0, r3
 80020a4:	f006 fe98 	bl	8008dd8 <HAL_RCCEx_PeriphCLKConfig>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80020ae:	f7ff fd0d 	bl	8001acc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020b2:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <HAL_UART_MspInit+0xdc>)
 80020b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002138 <HAL_UART_MspInit+0xdc>)
 80020ba:	f043 0310 	orr.w	r3, r3, #16
 80020be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_UART_MspInit+0xdc>)
 80020c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d0:	4b19      	ldr	r3, [pc, #100]	@ (8002138 <HAL_UART_MspInit+0xdc>)
 80020d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d6:	4a18      	ldr	r2, [pc, #96]	@ (8002138 <HAL_UART_MspInit+0xdc>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e0:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <HAL_UART_MspInit+0xdc>)
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80020ee:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80020f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002108:	2304      	movs	r3, #4
 800210a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002112:	4619      	mov	r1, r3
 8002114:	4809      	ldr	r0, [pc, #36]	@ (800213c <HAL_UART_MspInit+0xe0>)
 8002116:	f005 fa41 	bl	800759c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2025      	movs	r0, #37	@ 0x25
 8002120:	f002 f839 	bl	8004196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002124:	2025      	movs	r0, #37	@ 0x25
 8002126:	f002 f850 	bl	80041ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800212a:	bf00      	nop
 800212c:	37e8      	adds	r7, #232	@ 0xe8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40011000 	.word	0x40011000
 8002138:	58024400 	.word	0x58024400
 800213c:	58020400 	.word	0x58020400

08002140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002140:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002178 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002144:	f7ff fdf6 	bl	8001d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002148:	480c      	ldr	r0, [pc, #48]	@ (800217c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800214a:	490d      	ldr	r1, [pc, #52]	@ (8002180 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800214c:	4a0d      	ldr	r2, [pc, #52]	@ (8002184 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002150:	e002      	b.n	8002158 <LoopCopyDataInit>

08002152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002156:	3304      	adds	r3, #4

08002158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800215a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800215c:	d3f9      	bcc.n	8002152 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800215e:	4a0a      	ldr	r2, [pc, #40]	@ (8002188 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002160:	4c0a      	ldr	r4, [pc, #40]	@ (800218c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002164:	e001      	b.n	800216a <LoopFillZerobss>

08002166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002168:	3204      	adds	r2, #4

0800216a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800216a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800216c:	d3fb      	bcc.n	8002166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800216e:	f00b fdf5 	bl	800dd5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002172:	f7ff fad3 	bl	800171c <main>
  bx  lr
 8002176:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002178:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800217c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002180:	240006c0 	.word	0x240006c0
  ldr r2, =_sidata
 8002184:	08015ebc 	.word	0x08015ebc
  ldr r2, =_sbss
 8002188:	240046c0 	.word	0x240046c0
  ldr r4, =_ebss
 800218c:	24014ce0 	.word	0x24014ce0

08002190 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002190:	e7fe      	b.n	8002190 <ADC3_IRQHandler>
	...

08002194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219a:	2003      	movs	r0, #3
 800219c:	f001 fff0 	bl	8004180 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021a0:	f006 fc44 	bl	8008a2c <HAL_RCC_GetSysClockFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <HAL_Init+0x68>)
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	4913      	ldr	r1, [pc, #76]	@ (8002200 <HAL_Init+0x6c>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
 80021bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021be:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <HAL_Init+0x68>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002200 <HAL_Init+0x6c>)
 80021c8:	5cd3      	ldrb	r3, [r2, r3]
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
 80021d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002204 <HAL_Init+0x70>)
 80021d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002208 <HAL_Init+0x74>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021de:	200f      	movs	r0, #15
 80021e0:	f000 f814 	bl	800220c <HAL_InitTick>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e002      	b.n	80021f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021ee:	f7ff fc73 	bl	8001ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	58024400 	.word	0x58024400
 8002200:	080137c0 	.word	0x080137c0
 8002204:	24000004 	.word	0x24000004
 8002208:	24000000 	.word	0x24000000

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002214:	4b15      	ldr	r3, [pc, #84]	@ (800226c <HAL_InitTick+0x60>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e021      	b.n	8002264 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002220:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <HAL_InitTick+0x64>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_InitTick+0x60>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800222e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f001 ffd5 	bl	80041e6 <HAL_SYSTICK_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e00e      	b.n	8002264 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b0f      	cmp	r3, #15
 800224a:	d80a      	bhi.n	8002262 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224c:	2200      	movs	r2, #0
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002254:	f001 ff9f 	bl	8004196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002258:	4a06      	ldr	r2, [pc, #24]	@ (8002274 <HAL_InitTick+0x68>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2400000c 	.word	0x2400000c
 8002270:	24000000 	.word	0x24000000
 8002274:	24000008 	.word	0x24000008

08002278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_IncTick+0x20>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_IncTick+0x24>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a04      	ldr	r2, [pc, #16]	@ (800229c <HAL_IncTick+0x24>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	2400000c 	.word	0x2400000c
 800229c:	240149d0 	.word	0x240149d0

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <HAL_GetTick+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	240149d0 	.word	0x240149d0

080022b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff ffee 	bl	80022a0 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022d0:	d005      	beq.n	80022de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <HAL_Delay+0x44>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022de:	bf00      	nop
 80022e0:	f7ff ffde 	bl	80022a0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d8f7      	bhi.n	80022e0 <HAL_Delay+0x28>
  {
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2400000c 	.word	0x2400000c

08002300 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002304:	4b03      	ldr	r3, [pc, #12]	@ (8002314 <HAL_GetREVID+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0c1b      	lsrs	r3, r3, #16
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	5c001000 	.word	0x5c001000

08002318 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	609a      	str	r2, [r3, #8]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3360      	adds	r3, #96	@ 0x60
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	430b      	orrs	r3, r1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80023b4:	bf00      	nop
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	431a      	orrs	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	611a      	str	r2, [r3, #16]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b087      	sub	sp, #28
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3360      	adds	r3, #96	@ 0x60
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	431a      	orrs	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	601a      	str	r2, [r3, #0]
  }
}
 800241c:	bf00      	nop
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800244e:	b480      	push	{r7}
 8002450:	b087      	sub	sp, #28
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3330      	adds	r3, #48	@ 0x30
 800245e:	461a      	mov	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	4413      	add	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	211f      	movs	r1, #31
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	401a      	ands	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	f003 011f 	and.w	r1, r3, #31
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	431a      	orrs	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800249a:	bf00      	nop
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f023 0203 	bic.w	r2, r3, #3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	60da      	str	r2, [r3, #12]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3314      	adds	r3, #20
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	0e5b      	lsrs	r3, r3, #25
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	4413      	add	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	0d1b      	lsrs	r3, r3, #20
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	2107      	movs	r1, #7
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	401a      	ands	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	0d1b      	lsrs	r3, r3, #20
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	431a      	orrs	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800253c:	43db      	mvns	r3, r3
 800253e:	401a      	ands	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0318 	and.w	r3, r3, #24
 8002546:	4908      	ldr	r1, [pc, #32]	@ (8002568 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002548:	40d9      	lsrs	r1, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	400b      	ands	r3, r1
 800254e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002552:	431a      	orrs	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	000fffff 	.word	0x000fffff

0800256c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 031f 	and.w	r3, r3, #31
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002596:	4013      	ands	r3, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6093      	str	r3, [r2, #8]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	5fffffc0 	.word	0x5fffffc0

080025ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025c0:	d101      	bne.n	80025c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	6fffffc0 	.word	0x6fffffc0

080025fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002610:	d101      	bne.n	8002616 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	4b05      	ldr	r3, [pc, #20]	@ (8002648 <LL_ADC_Enable+0x24>)
 8002632:	4013      	ands	r3, r2
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	7fffffc0 	.word	0x7fffffc0

0800264c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <LL_ADC_Disable+0x24>)
 800265a:	4013      	ands	r3, r2
 800265c:	f043 0202 	orr.w	r2, r3, #2
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	7fffffc0 	.word	0x7fffffc0

08002674 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <LL_ADC_IsEnabled+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_ADC_IsEnabled+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d101      	bne.n	80026b2 <LL_ADC_IsDisableOngoing+0x18>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <LL_ADC_IsDisableOngoing+0x1a>
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <LL_ADC_REG_StartConversion+0x24>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	f043 0204 	orr.w	r2, r3, #4
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	7fffffc0 	.word	0x7fffffc0

080026e8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <LL_ADC_REG_StopConversion+0x24>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	f043 0210 	orr.w	r2, r3, #16
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	7fffffc0 	.word	0x7fffffc0

08002710 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b04      	cmp	r3, #4
 8002722:	d101      	bne.n	8002728 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	4b05      	ldr	r3, [pc, #20]	@ (800275c <LL_ADC_INJ_StopConversion+0x24>)
 8002746:	4013      	ands	r3, r2
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	7fffffc0 	.word	0x7fffffc0

08002760 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b08      	cmp	r3, #8
 8002772:	d101      	bne.n	8002778 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b089      	sub	sp, #36	@ 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e18f      	b.n	8002ac2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7fe fc2d 	bl	8001010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff feef 	bl	80025ac <LL_ADC_IsDeepPowerDownEnabled>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fed5 	bl	8002588 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff0a 	bl	80025fc <LL_ADC_IsInternalRegulatorEnabled>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d114      	bne.n	8002818 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff feee 	bl	80025d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f8:	4b87      	ldr	r3, [pc, #540]	@ (8002a18 <HAL_ADC_Init+0x290>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	4a87      	ldr	r2, [pc, #540]	@ (8002a1c <HAL_ADC_Init+0x294>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	3301      	adds	r3, #1
 8002808:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800280a:	e002      	b.n	8002812 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	3b01      	subs	r3, #1
 8002810:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f9      	bne.n	800280c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff feed 	bl	80025fc <LL_ADC_IsInternalRegulatorEnabled>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10d      	bne.n	8002844 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282c:	f043 0210 	orr.w	r2, r3, #16
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff61 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 800284e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 8129 	bne.w	8002ab0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f040 8125 	bne.w	8002ab0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fefa 	bl	8002674 <LL_ADC_IsEnabled>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d136      	bne.n	80028f4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a65      	ldr	r2, [pc, #404]	@ (8002a20 <HAL_ADC_Init+0x298>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d004      	beq.n	800289a <HAL_ADC_Init+0x112>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a63      	ldr	r2, [pc, #396]	@ (8002a24 <HAL_ADC_Init+0x29c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10e      	bne.n	80028b8 <HAL_ADC_Init+0x130>
 800289a:	4861      	ldr	r0, [pc, #388]	@ (8002a20 <HAL_ADC_Init+0x298>)
 800289c:	f7ff feea 	bl	8002674 <LL_ADC_IsEnabled>
 80028a0:	4604      	mov	r4, r0
 80028a2:	4860      	ldr	r0, [pc, #384]	@ (8002a24 <HAL_ADC_Init+0x29c>)
 80028a4:	f7ff fee6 	bl	8002674 <LL_ADC_IsEnabled>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4323      	orrs	r3, r4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e008      	b.n	80028ca <HAL_ADC_Init+0x142>
 80028b8:	485b      	ldr	r0, [pc, #364]	@ (8002a28 <HAL_ADC_Init+0x2a0>)
 80028ba:	f7ff fedb 	bl	8002674 <LL_ADC_IsEnabled>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d012      	beq.n	80028f4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a53      	ldr	r2, [pc, #332]	@ (8002a20 <HAL_ADC_Init+0x298>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_ADC_Init+0x15a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a51      	ldr	r2, [pc, #324]	@ (8002a24 <HAL_ADC_Init+0x29c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_Init+0x15e>
 80028e2:	4a52      	ldr	r2, [pc, #328]	@ (8002a2c <HAL_ADC_Init+0x2a4>)
 80028e4:	e000      	b.n	80028e8 <HAL_ADC_Init+0x160>
 80028e6:	4a52      	ldr	r2, [pc, #328]	@ (8002a30 <HAL_ADC_Init+0x2a8>)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f7ff fd12 	bl	8002318 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80028f4:	f7ff fd04 	bl	8002300 <HAL_GetREVID>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028fe:	4293      	cmp	r3, r2
 8002900:	d914      	bls.n	800292c <HAL_ADC_Init+0x1a4>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b10      	cmp	r3, #16
 8002908:	d110      	bne.n	800292c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	7d5b      	ldrb	r3, [r3, #21]
 800290e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002914:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800291a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7f1b      	ldrb	r3, [r3, #28]
 8002920:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002922:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002924:	f043 030c 	orr.w	r3, r3, #12
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	e00d      	b.n	8002948 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7d5b      	ldrb	r3, [r3, #21]
 8002930:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002936:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800293c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	7f1b      	ldrb	r3, [r3, #28]
 8002942:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7f1b      	ldrb	r3, [r3, #28]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	3b01      	subs	r3, #1
 8002956:	045b      	lsls	r3, r3, #17
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	4b2c      	ldr	r3, [pc, #176]	@ (8002a34 <HAL_ADC_Init+0x2ac>)
 8002982:	4013      	ands	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	69b9      	ldr	r1, [r7, #24]
 800298a:	430b      	orrs	r3, r1
 800298c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff febc 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002998:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fede 	bl	8002760 <LL_ADC_INJ_IsConversionOngoing>
 80029a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d15f      	bne.n	8002a6c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d15c      	bne.n	8002a6c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7d1b      	ldrb	r3, [r3, #20]
 80029b6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <HAL_ADC_Init+0x2b0>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	69b9      	ldr	r1, [r7, #24]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d130      	bne.n	8002a40 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <HAL_ADC_Init+0x2b4>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029f2:	3a01      	subs	r2, #1
 80029f4:	0411      	lsls	r1, r2, #16
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002a00:	4311      	orrs	r1, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a06:	430a      	orrs	r2, r1
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	611a      	str	r2, [r3, #16]
 8002a14:	e01c      	b.n	8002a50 <HAL_ADC_Init+0x2c8>
 8002a16:	bf00      	nop
 8002a18:	24000000 	.word	0x24000000
 8002a1c:	053e2d63 	.word	0x053e2d63
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40022100 	.word	0x40022100
 8002a28:	58026000 	.word	0x58026000
 8002a2c:	40022300 	.word	0x40022300
 8002a30:	58026300 	.word	0x58026300
 8002a34:	fff0c003 	.word	0xfff0c003
 8002a38:	ffffbffc 	.word	0xffffbffc
 8002a3c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f001 f812 	bl	8003a90 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d10c      	bne.n	8002a8e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	f023 010f 	bic.w	r1, r3, #15
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a8c:	e007      	b.n	8002a9e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 020f 	bic.w	r2, r2, #15
 8002a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54
 8002aae:	e007      	b.n	8002ac0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab4:	f043 0210 	orr.w	r2, r3, #16
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ac0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	@ 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd90      	pop	{r4, r7, pc}
 8002aca:	bf00      	nop

08002acc <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e16e      	b.n	8002dbc <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae2:	f043 0202 	orr.w	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002aea:	2103      	movs	r1, #3
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fd95 	bl	800361c <ADC_ConversionStop>
 8002af2:	4603      	mov	r3, r0
 8002af4:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8002b04:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fecb 	bl	80038a8 <ADC_Disable>
 8002b12:	4603      	mov	r3, r0
 8002b14:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b8c      	ldr	r3, [pc, #560]	@ (8002d60 <HAL_ADC_DeInit+0x294>)
 8002b2e:	400b      	ands	r3, r1
 8002b30:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002b3a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 8002b4a:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 8002b6a:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b7a:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6919      	ldr	r1, [r3, #16]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b77      	ldr	r3, [pc, #476]	@ (8002d64 <HAL_ADC_DeInit+0x298>)
 8002b88:	400b      	ands	r3, r1
 8002b8a:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002b9a:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 8002baa:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6a1a      	ldr	r2, [r3, #32]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8002bba:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8002bca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8002bdc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8002bf0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8002c04:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8002c18:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4b50      	ldr	r3, [pc, #320]	@ (8002d68 <HAL_ADC_DeInit+0x29c>)
 8002c28:	400b      	ands	r3, r1
 8002c2a:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b4d      	ldr	r3, [pc, #308]	@ (8002d6c <HAL_ADC_DeInit+0x2a0>)
 8002c38:	400b      	ands	r3, r1
 8002c3a:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4b49      	ldr	r3, [pc, #292]	@ (8002d6c <HAL_ADC_DeInit+0x2a0>)
 8002c48:	400b      	ands	r3, r1
 8002c4a:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4b46      	ldr	r3, [pc, #280]	@ (8002d70 <HAL_ADC_DeInit+0x2a4>)
 8002c58:	400b      	ands	r3, r1
 8002c5a:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2200      	movs	r2, #0
 8002c68:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2200      	movs	r2, #0
 8002c76:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2200      	movs	r2, #0
 8002c84:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2200      	movs	r2, #0
 8002c92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b34      	ldr	r3, [pc, #208]	@ (8002d74 <HAL_ADC_DeInit+0x2a8>)
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8002d74 <HAL_ADC_DeInit+0x2a8>)
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d74 <HAL_ADC_DeInit+0x2a8>)
 8002cca:	400b      	ands	r3, r1
 8002ccc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 8002ce0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a23      	ldr	r2, [pc, #140]	@ (8002d78 <HAL_ADC_DeInit+0x2ac>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_ADC_DeInit+0x22c>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a22      	ldr	r2, [pc, #136]	@ (8002d7c <HAL_ADC_DeInit+0x2b0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d10e      	bne.n	8002d16 <HAL_ADC_DeInit+0x24a>
 8002cf8:	481f      	ldr	r0, [pc, #124]	@ (8002d78 <HAL_ADC_DeInit+0x2ac>)
 8002cfa:	f7ff fcbb 	bl	8002674 <LL_ADC_IsEnabled>
 8002cfe:	4604      	mov	r4, r0
 8002d00:	481e      	ldr	r0, [pc, #120]	@ (8002d7c <HAL_ADC_DeInit+0x2b0>)
 8002d02:	f7ff fcb7 	bl	8002674 <LL_ADC_IsEnabled>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4323      	orrs	r3, r4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf0c      	ite	eq
 8002d0e:	2301      	moveq	r3, #1
 8002d10:	2300      	movne	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	e008      	b.n	8002d28 <HAL_ADC_DeInit+0x25c>
 8002d16:	481a      	ldr	r0, [pc, #104]	@ (8002d80 <HAL_ADC_DeInit+0x2b4>)
 8002d18:	f7ff fcac 	bl	8002674 <LL_ADC_IsEnabled>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d036      	beq.n	8002d9a <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a11      	ldr	r2, [pc, #68]	@ (8002d78 <HAL_ADC_DeInit+0x2ac>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_ADC_DeInit+0x274>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a10      	ldr	r2, [pc, #64]	@ (8002d7c <HAL_ADC_DeInit+0x2b0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_DeInit+0x278>
 8002d40:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <HAL_ADC_DeInit+0x2b8>)
 8002d42:	e000      	b.n	8002d46 <HAL_ADC_DeInit+0x27a>
 8002d44:	4b10      	ldr	r3, [pc, #64]	@ (8002d88 <HAL_ADC_DeInit+0x2bc>)
 8002d46:	6899      	ldr	r1, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <HAL_ADC_DeInit+0x2ac>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d004      	beq.n	8002d5c <HAL_ADC_DeInit+0x290>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a09      	ldr	r2, [pc, #36]	@ (8002d7c <HAL_ADC_DeInit+0x2b0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d117      	bne.n	8002d8c <HAL_ADC_DeInit+0x2c0>
 8002d5c:	4a09      	ldr	r2, [pc, #36]	@ (8002d84 <HAL_ADC_DeInit+0x2b8>)
 8002d5e:	e016      	b.n	8002d8e <HAL_ADC_DeInit+0x2c2>
 8002d60:	fffff800 	.word	0xfffff800
 8002d64:	fc00f81c 	.word	0xfc00f81c
 8002d68:	e0820830 	.word	0xe0820830
 8002d6c:	e0820820 	.word	0xe0820820
 8002d70:	fffff820 	.word	0xfffff820
 8002d74:	fff00000 	.word	0xfff00000
 8002d78:	40022000 	.word	0x40022000
 8002d7c:	40022100 	.word	0x40022100
 8002d80:	58026000 	.word	0x58026000
 8002d84:	40022300 	.word	0x40022300
 8002d88:	58026300 	.word	0x58026300
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc4 <HAL_ADC_DeInit+0x2f8>)
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_ADC_DeInit+0x2fc>)
 8002d90:	400b      	ands	r3, r1
 8002d92:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fe fa03 	bl	80011a0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd90      	pop	{r4, r7, pc}
 8002dc4:	58026300 	.word	0x58026300
 8002dc8:	fe0030e0 	.word	0xfe0030e0

08002dcc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a55      	ldr	r2, [pc, #340]	@ (8002f34 <HAL_ADC_Start_DMA+0x168>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <HAL_ADC_Start_DMA+0x20>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a54      	ldr	r2, [pc, #336]	@ (8002f38 <HAL_ADC_Start_DMA+0x16c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d101      	bne.n	8002df0 <HAL_ADC_Start_DMA+0x24>
 8002dec:	4b53      	ldr	r3, [pc, #332]	@ (8002f3c <HAL_ADC_Start_DMA+0x170>)
 8002dee:	e000      	b.n	8002df2 <HAL_ADC_Start_DMA+0x26>
 8002df0:	4b53      	ldr	r3, [pc, #332]	@ (8002f40 <HAL_ADC_Start_DMA+0x174>)
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fbba 	bl	800256c <LL_ADC_GetMultimode>
 8002df8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fc86 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 808c 	bne.w	8002f24 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_Start_DMA+0x4e>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e087      	b.n	8002f2a <HAL_ADC_Start_DMA+0x15e>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d002      	beq.n	8002e34 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b09      	cmp	r3, #9
 8002e32:	d170      	bne.n	8002f16 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fcad 	bl	8003794 <ADC_Enable>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d163      	bne.n	8002f0c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e48:	4b3e      	ldr	r3, [pc, #248]	@ (8002f44 <HAL_ADC_Start_DMA+0x178>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a37      	ldr	r2, [pc, #220]	@ (8002f38 <HAL_ADC_Start_DMA+0x16c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d002      	beq.n	8002e64 <HAL_ADC_Start_DMA+0x98>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	e000      	b.n	8002e66 <HAL_ADC_Start_DMA+0x9a>
 8002e64:	4b33      	ldr	r3, [pc, #204]	@ (8002f34 <HAL_ADC_Start_DMA+0x168>)
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d002      	beq.n	8002e74 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	f023 0206 	bic.w	r2, r3, #6
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e98:	e002      	b.n	8002ea0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea4:	4a28      	ldr	r2, [pc, #160]	@ (8002f48 <HAL_ADC_Start_DMA+0x17c>)
 8002ea6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eac:	4a27      	ldr	r2, [pc, #156]	@ (8002f4c <HAL_ADC_Start_DMA+0x180>)
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb4:	4a26      	ldr	r2, [pc, #152]	@ (8002f50 <HAL_ADC_Start_DMA+0x184>)
 8002eb6:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	221c      	movs	r2, #28
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0210 	orr.w	r2, r2, #16
 8002ed6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f7ff fadf 	bl	80024a6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3340      	adds	r3, #64	@ 0x40
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f002 f870 	bl	8004fdc <HAL_DMA_Start_IT>
 8002efc:	4603      	mov	r3, r0
 8002efe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fbdb 	bl	80026c0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002f0a:	e00d      	b.n	8002f28 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002f14:	e008      	b.n	8002f28 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002f22:	e001      	b.n	8002f28 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
 8002f26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40022000 	.word	0x40022000
 8002f38:	40022100 	.word	0x40022100
 8002f3c:	40022300 	.word	0x40022300
 8002f40:	58026300 	.word	0x58026300
 8002f44:	fffff0fe 	.word	0xfffff0fe
 8002f48:	08003967 	.word	0x08003967
 8002f4c:	08003a3f 	.word	0x08003a3f
 8002f50:	08003a5b 	.word	0x08003a5b

08002f54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b0a1      	sub	sp, #132	@ 0x84
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4a9d      	ldr	r2, [pc, #628]	@ (800320c <HAL_ADC_ConfigChannel+0x290>)
 8002f96:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x2a>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e321      	b.n	80035ea <HAL_ADC_ConfigChannel+0x66e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fbac 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 8306 	bne.w	80035cc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d108      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x62>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0e9b      	lsrs	r3, r3, #26
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	e016      	b.n	800300c <HAL_ADC_ConfigChannel+0x90>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fee:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	e003      	b.n	8003002 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002ffa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	2201      	movs	r2, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	69d1      	ldr	r1, [r2, #28]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	430b      	orrs	r3, r1
 8003018:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	f7ff fa11 	bl	800244e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fb6d 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8003036:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fb8f 	bl	8002760 <LL_ADC_INJ_IsConversionOngoing>
 8003042:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003046:	2b00      	cmp	r3, #0
 8003048:	f040 80b3 	bne.w	80031b2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800304c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 80af 	bne.w	80031b2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	461a      	mov	r2, r3
 8003062:	f7ff fa33 	bl	80024cc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003066:	4b6a      	ldr	r3, [pc, #424]	@ (8003210 <HAL_ADC_ConfigChannel+0x294>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800306e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003072:	d10b      	bne.n	800308c <HAL_ADC_ConfigChannel+0x110>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	e01d      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x14c>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10b      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x136>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	e00a      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x14c>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d027      	beq.n	8003122 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6919      	ldr	r1, [r3, #16]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030e0:	f7ff f94e 	bl	8002380 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6919      	ldr	r1, [r3, #16]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	7e5b      	ldrb	r3, [r3, #25]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d102      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x17e>
 80030f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80030f8:	e000      	b.n	80030fc <HAL_ADC_ConfigChannel+0x180>
 80030fa:	2300      	movs	r3, #0
 80030fc:	461a      	mov	r2, r3
 80030fe:	f7ff f978 	bl	80023f2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6919      	ldr	r1, [r3, #16]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	7e1b      	ldrb	r3, [r3, #24]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d102      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x19c>
 8003112:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003116:	e000      	b.n	800311a <HAL_ADC_ConfigChannel+0x19e>
 8003118:	2300      	movs	r3, #0
 800311a:	461a      	mov	r2, r3
 800311c:	f7ff f950 	bl	80023c0 <LL_ADC_SetDataRightShift>
 8003120:	e047      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003128:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	069b      	lsls	r3, r3, #26
 8003132:	429a      	cmp	r2, r3
 8003134:	d107      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003144:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800314c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	069b      	lsls	r3, r3, #26
 8003156:	429a      	cmp	r2, r3
 8003158:	d107      	bne.n	800316a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003168:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003170:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	069b      	lsls	r3, r3, #26
 800317a:	429a      	cmp	r2, r3
 800317c:	d107      	bne.n	800318e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800318c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003194:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	069b      	lsls	r3, r3, #26
 800319e:	429a      	cmp	r2, r3
 80031a0:	d107      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80031b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fa5c 	bl	8002674 <LL_ADC_IsEnabled>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f040 820d 	bne.w	80035de <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f7ff f9a7 	bl	8002524 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	4a0c      	ldr	r2, [pc, #48]	@ (800320c <HAL_ADC_ConfigChannel+0x290>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	f040 8133 	bne.w	8003448 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d110      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x298>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	0e9b      	lsrs	r3, r3, #26
 80031f8:	3301      	adds	r3, #1
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2b09      	cmp	r3, #9
 8003200:	bf94      	ite	ls
 8003202:	2301      	movls	r3, #1
 8003204:	2300      	movhi	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	e01e      	b.n	8003248 <HAL_ADC_ConfigChannel+0x2cc>
 800320a:	bf00      	nop
 800320c:	47ff0000 	.word	0x47ff0000
 8003210:	5c001000 	.word	0x5c001000
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003224:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800322c:	2320      	movs	r3, #32
 800322e:	e003      	b.n	8003238 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	2b09      	cmp	r3, #9
 8003240:	bf94      	ite	ls
 8003242:	2301      	movls	r3, #1
 8003244:	2300      	movhi	r3, #0
 8003246:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003248:	2b00      	cmp	r3, #0
 800324a:	d079      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003254:	2b00      	cmp	r3, #0
 8003256:	d107      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x2ec>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	0e9b      	lsrs	r3, r3, #26
 800325e:	3301      	adds	r3, #1
 8003260:	069b      	lsls	r3, r3, #26
 8003262:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003266:	e015      	b.n	8003294 <HAL_ADC_ConfigChannel+0x318>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003278:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800327a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e003      	b.n	800328c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	3301      	adds	r3, #1
 800328e:	069b      	lsls	r3, r3, #26
 8003290:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x338>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f303 	lsl.w	r3, r1, r3
 80032b2:	e017      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x368>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80032c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80032c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80032cc:	2320      	movs	r3, #32
 80032ce:	e003      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80032d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	3301      	adds	r3, #1
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	2101      	movs	r1, #1
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	ea42 0103 	orr.w	r1, r2, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <HAL_ADC_ConfigChannel+0x38e>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0e9b      	lsrs	r3, r3, #26
 80032fa:	3301      	adds	r3, #1
 80032fc:	f003 021f 	and.w	r2, r3, #31
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	051b      	lsls	r3, r3, #20
 8003308:	e018      	b.n	800333c <HAL_ADC_ConfigChannel+0x3c0>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800331c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e003      	b.n	800332e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800333c:	430b      	orrs	r3, r1
 800333e:	e07e      	b.n	800343e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_ADC_ConfigChannel+0x3e0>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0e9b      	lsrs	r3, r3, #26
 8003352:	3301      	adds	r3, #1
 8003354:	069b      	lsls	r3, r3, #26
 8003356:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800335a:	e015      	b.n	8003388 <HAL_ADC_ConfigChannel+0x40c>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800336e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003374:	2320      	movs	r3, #32
 8003376:	e003      	b.n	8003380 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	3301      	adds	r3, #1
 8003382:	069b      	lsls	r3, r3, #26
 8003384:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x42c>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	3301      	adds	r3, #1
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	e017      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x45c>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	61bb      	str	r3, [r7, #24]
  return result;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80033c0:	2320      	movs	r3, #32
 80033c2:	e003      	b.n	80033cc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2101      	movs	r1, #1
 80033d4:	fa01 f303 	lsl.w	r3, r1, r3
 80033d8:	ea42 0103 	orr.w	r1, r2, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10d      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x488>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0e9b      	lsrs	r3, r3, #26
 80033ee:	3301      	adds	r3, #1
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	3b1e      	subs	r3, #30
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003402:	e01b      	b.n	800343c <HAL_ADC_ConfigChannel+0x4c0>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	60fb      	str	r3, [r7, #12]
  return result;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e003      	b.n	8003428 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f003 021f 	and.w	r2, r3, #31
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	3b1e      	subs	r3, #30
 8003436:	051b      	lsls	r3, r3, #20
 8003438:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800343c:	430b      	orrs	r3, r1
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	6892      	ldr	r2, [r2, #8]
 8003442:	4619      	mov	r1, r3
 8003444:	f7ff f842 	bl	80024cc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f280 80c6 	bge.w	80035de <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a67      	ldr	r2, [pc, #412]	@ (80035f4 <HAL_ADC_ConfigChannel+0x678>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_ADC_ConfigChannel+0x4ea>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a65      	ldr	r2, [pc, #404]	@ (80035f8 <HAL_ADC_ConfigChannel+0x67c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x4ee>
 8003466:	4b65      	ldr	r3, [pc, #404]	@ (80035fc <HAL_ADC_ConfigChannel+0x680>)
 8003468:	e000      	b.n	800346c <HAL_ADC_ConfigChannel+0x4f0>
 800346a:	4b65      	ldr	r3, [pc, #404]	@ (8003600 <HAL_ADC_ConfigChannel+0x684>)
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe ff79 	bl	8002364 <LL_ADC_GetCommonPathInternalCh>
 8003472:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a5e      	ldr	r2, [pc, #376]	@ (80035f4 <HAL_ADC_ConfigChannel+0x678>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_ADC_ConfigChannel+0x50c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5d      	ldr	r2, [pc, #372]	@ (80035f8 <HAL_ADC_ConfigChannel+0x67c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10e      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x52a>
 8003488:	485a      	ldr	r0, [pc, #360]	@ (80035f4 <HAL_ADC_ConfigChannel+0x678>)
 800348a:	f7ff f8f3 	bl	8002674 <LL_ADC_IsEnabled>
 800348e:	4604      	mov	r4, r0
 8003490:	4859      	ldr	r0, [pc, #356]	@ (80035f8 <HAL_ADC_ConfigChannel+0x67c>)
 8003492:	f7ff f8ef 	bl	8002674 <LL_ADC_IsEnabled>
 8003496:	4603      	mov	r3, r0
 8003498:	4323      	orrs	r3, r4
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e008      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x53c>
 80034a6:	4857      	ldr	r0, [pc, #348]	@ (8003604 <HAL_ADC_ConfigChannel+0x688>)
 80034a8:	f7ff f8e4 	bl	8002674 <LL_ADC_IsEnabled>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d07d      	beq.n	80035b8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a51      	ldr	r2, [pc, #324]	@ (8003608 <HAL_ADC_ConfigChannel+0x68c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d130      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x5ac>
 80034c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d12b      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003604 <HAL_ADC_ConfigChannel+0x688>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f040 8081 	bne.w	80035de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a44      	ldr	r2, [pc, #272]	@ (80035f4 <HAL_ADC_ConfigChannel+0x678>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_ADC_ConfigChannel+0x574>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a43      	ldr	r2, [pc, #268]	@ (80035f8 <HAL_ADC_ConfigChannel+0x67c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x578>
 80034f0:	4a42      	ldr	r2, [pc, #264]	@ (80035fc <HAL_ADC_ConfigChannel+0x680>)
 80034f2:	e000      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x57a>
 80034f4:	4a42      	ldr	r2, [pc, #264]	@ (8003600 <HAL_ADC_ConfigChannel+0x684>)
 80034f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f7fe ff1d 	bl	800233e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003504:	4b41      	ldr	r3, [pc, #260]	@ (800360c <HAL_ADC_ConfigChannel+0x690>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	4a41      	ldr	r2, [pc, #260]	@ (8003610 <HAL_ADC_ConfigChannel+0x694>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	099b      	lsrs	r3, r3, #6
 8003512:	3301      	adds	r3, #1
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003518:	e002      	b.n	8003520 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3b01      	subs	r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f9      	bne.n	800351a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003526:	e05a      	b.n	80035de <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a39      	ldr	r2, [pc, #228]	@ (8003614 <HAL_ADC_ConfigChannel+0x698>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d11e      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x5f4>
 8003532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d119      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a30      	ldr	r2, [pc, #192]	@ (8003604 <HAL_ADC_ConfigChannel+0x688>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d14b      	bne.n	80035de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2a      	ldr	r2, [pc, #168]	@ (80035f4 <HAL_ADC_ConfigChannel+0x678>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_ADC_ConfigChannel+0x5de>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a28      	ldr	r2, [pc, #160]	@ (80035f8 <HAL_ADC_ConfigChannel+0x67c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0x5e2>
 800355a:	4a28      	ldr	r2, [pc, #160]	@ (80035fc <HAL_ADC_ConfigChannel+0x680>)
 800355c:	e000      	b.n	8003560 <HAL_ADC_ConfigChannel+0x5e4>
 800355e:	4a28      	ldr	r2, [pc, #160]	@ (8003600 <HAL_ADC_ConfigChannel+0x684>)
 8003560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f7fe fee8 	bl	800233e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800356e:	e036      	b.n	80035de <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a28      	ldr	r2, [pc, #160]	@ (8003618 <HAL_ADC_ConfigChannel+0x69c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d131      	bne.n	80035de <HAL_ADC_ConfigChannel+0x662>
 800357a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800357c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d12c      	bne.n	80035de <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1e      	ldr	r2, [pc, #120]	@ (8003604 <HAL_ADC_ConfigChannel+0x688>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d127      	bne.n	80035de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a18      	ldr	r2, [pc, #96]	@ (80035f4 <HAL_ADC_ConfigChannel+0x678>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_ADC_ConfigChannel+0x626>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a16      	ldr	r2, [pc, #88]	@ (80035f8 <HAL_ADC_ConfigChannel+0x67c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x62a>
 80035a2:	4a16      	ldr	r2, [pc, #88]	@ (80035fc <HAL_ADC_ConfigChannel+0x680>)
 80035a4:	e000      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x62c>
 80035a6:	4a16      	ldr	r2, [pc, #88]	@ (8003600 <HAL_ADC_ConfigChannel+0x684>)
 80035a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f7fe fec4 	bl	800233e <LL_ADC_SetCommonPathInternalCh>
 80035b6:	e012      	b.n	80035de <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80035ca:	e008      	b.n	80035de <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80035e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3784      	adds	r7, #132	@ 0x84
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd90      	pop	{r4, r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40022000 	.word	0x40022000
 80035f8:	40022100 	.word	0x40022100
 80035fc:	40022300 	.word	0x40022300
 8003600:	58026300 	.word	0x58026300
 8003604:	58026000 	.word	0x58026000
 8003608:	cb840000 	.word	0xcb840000
 800360c:	24000000 	.word	0x24000000
 8003610:	053e2d63 	.word	0x053e2d63
 8003614:	c7520000 	.word	0xc7520000
 8003618:	cfb80000 	.word	0xcfb80000

0800361c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff f86c 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 8003638:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff f88e 	bl	8002760 <LL_ADC_INJ_IsConversionOngoing>
 8003644:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d103      	bne.n	8003654 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8098 	beq.w	8003784 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d02a      	beq.n	80036b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	7d5b      	ldrb	r3, [r3, #21]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d126      	bne.n	80036b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7d1b      	ldrb	r3, [r3, #20]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d122      	bne.n	80036b8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003672:	2301      	movs	r3, #1
 8003674:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003676:	e014      	b.n	80036a2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4a45      	ldr	r2, [pc, #276]	@ (8003790 <ADC_ConversionStop+0x174>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d90d      	bls.n	800369c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003684:	f043 0210 	orr.w	r2, r3, #16
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003690:	f043 0201 	orr.w	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e074      	b.n	8003786 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	3301      	adds	r3, #1
 80036a0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b40      	cmp	r3, #64	@ 0x40
 80036ae:	d1e3      	bne.n	8003678 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2240      	movs	r2, #64	@ 0x40
 80036b6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d014      	beq.n	80036e8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff f824 	bl	8002710 <LL_ADC_REG_IsConversionOngoing>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00c      	beq.n	80036e8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe ffe1 	bl	800269a <LL_ADC_IsDisableOngoing>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff f800 	bl	80026e8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d014      	beq.n	8003718 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f834 	bl	8002760 <LL_ADC_INJ_IsConversionOngoing>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe ffc9 	bl	800269a <LL_ADC_IsDisableOngoing>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff f810 	bl	8002738 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d005      	beq.n	800372a <ADC_ConversionStop+0x10e>
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d105      	bne.n	8003730 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003724:	230c      	movs	r3, #12
 8003726:	617b      	str	r3, [r7, #20]
        break;
 8003728:	e005      	b.n	8003736 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800372a:	2308      	movs	r3, #8
 800372c:	617b      	str	r3, [r7, #20]
        break;
 800372e:	e002      	b.n	8003736 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003730:	2304      	movs	r3, #4
 8003732:	617b      	str	r3, [r7, #20]
        break;
 8003734:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003736:	f7fe fdb3 	bl	80022a0 <HAL_GetTick>
 800373a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800373c:	e01b      	b.n	8003776 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800373e:	f7fe fdaf 	bl	80022a0 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b05      	cmp	r3, #5
 800374a:	d914      	bls.n	8003776 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00d      	beq.n	8003776 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375e:	f043 0210 	orr.w	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e007      	b.n	8003786 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1dc      	bne.n	800373e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	000cdbff 	.word	0x000cdbff

08003794 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fe ff67 	bl	8002674 <LL_ADC_IsEnabled>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d16e      	bne.n	800388a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	4b38      	ldr	r3, [pc, #224]	@ (8003894 <ADC_Enable+0x100>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037be:	f043 0210 	orr.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e05a      	b.n	800388c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe ff22 	bl	8002624 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037e0:	f7fe fd5e 	bl	80022a0 <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003898 <ADC_Enable+0x104>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <ADC_Enable+0x66>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a29      	ldr	r2, [pc, #164]	@ (800389c <ADC_Enable+0x108>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <ADC_Enable+0x6a>
 80037fa:	4b29      	ldr	r3, [pc, #164]	@ (80038a0 <ADC_Enable+0x10c>)
 80037fc:	e000      	b.n	8003800 <ADC_Enable+0x6c>
 80037fe:	4b29      	ldr	r3, [pc, #164]	@ (80038a4 <ADC_Enable+0x110>)
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe feb3 	bl	800256c <LL_ADC_GetMultimode>
 8003806:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a23      	ldr	r2, [pc, #140]	@ (800389c <ADC_Enable+0x108>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d002      	beq.n	8003818 <ADC_Enable+0x84>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	e000      	b.n	800381a <ADC_Enable+0x86>
 8003818:	4b1f      	ldr	r3, [pc, #124]	@ (8003898 <ADC_Enable+0x104>)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	4293      	cmp	r3, r2
 8003820:	d02c      	beq.n	800387c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d130      	bne.n	800388a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003828:	e028      	b.n	800387c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fe ff20 	bl	8002674 <LL_ADC_IsEnabled>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d104      	bne.n	8003844 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fef0 	bl	8002624 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003844:	f7fe fd2c 	bl	80022a0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d914      	bls.n	800387c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d00d      	beq.n	800387c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003864:	f043 0210 	orr.w	r2, r3, #16
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	f043 0201 	orr.w	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e007      	b.n	800388c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d1cf      	bne.n	800382a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	8000003f 	.word	0x8000003f
 8003898:	40022000 	.word	0x40022000
 800389c:	40022100 	.word	0x40022100
 80038a0:	40022300 	.word	0x40022300
 80038a4:	58026300 	.word	0x58026300

080038a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe fef0 	bl	800269a <LL_ADC_IsDisableOngoing>
 80038ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fed7 	bl	8002674 <LL_ADC_IsEnabled>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d047      	beq.n	800395c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d144      	bne.n	800395c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030d 	and.w	r3, r3, #13
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d10c      	bne.n	80038fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe feb1 	bl	800264c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2203      	movs	r2, #3
 80038f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038f2:	f7fe fcd5 	bl	80022a0 <HAL_GetTick>
 80038f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038f8:	e029      	b.n	800394e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fe:	f043 0210 	orr.w	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390a:	f043 0201 	orr.w	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e023      	b.n	800395e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003916:	f7fe fcc3 	bl	80022a0 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d914      	bls.n	800394e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003936:	f043 0210 	orr.w	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e007      	b.n	800395e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1dc      	bne.n	8003916 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003972:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003978:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800397c:	2b00      	cmp	r3, #0
 800397e:	d14b      	bne.n	8003a18 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003984:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d021      	beq.n	80039de <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fd42 	bl	8002428 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d032      	beq.n	8003a10 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d12b      	bne.n	8003a10 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d11f      	bne.n	8003a10 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d4:	f043 0201 	orr.w	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	655a      	str	r2, [r3, #84]	@ 0x54
 80039dc:	e018      	b.n	8003a10 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d111      	bne.n	8003a10 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d105      	bne.n	8003a10 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a08:	f043 0201 	orr.w	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f7fd ffed 	bl	80019f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a16:	e00e      	b.n	8003a36 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f7ff fa9f 	bl	8002f68 <HAL_ADC_ErrorCallback>
}
 8003a2a:	e004      	b.n	8003a36 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f7ff fa81 	bl	8002f54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a78:	f043 0204 	orr.w	r2, r3, #4
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f7ff fa71 	bl	8002f68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a7a      	ldr	r2, [pc, #488]	@ (8003c88 <ADC_ConfigureBoostMode+0x1f8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <ADC_ConfigureBoostMode+0x1c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a79      	ldr	r2, [pc, #484]	@ (8003c8c <ADC_ConfigureBoostMode+0x1fc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d109      	bne.n	8003ac0 <ADC_ConfigureBoostMode+0x30>
 8003aac:	4b78      	ldr	r3, [pc, #480]	@ (8003c90 <ADC_ConfigureBoostMode+0x200>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e008      	b.n	8003ad2 <ADC_ConfigureBoostMode+0x42>
 8003ac0:	4b74      	ldr	r3, [pc, #464]	@ (8003c94 <ADC_ConfigureBoostMode+0x204>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01c      	beq.n	8003b10 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ad6:	f005 f923 	bl	8008d20 <HAL_RCC_GetHCLKFreq>
 8003ada:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ae4:	d010      	beq.n	8003b08 <ADC_ConfigureBoostMode+0x78>
 8003ae6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003aea:	d873      	bhi.n	8003bd4 <ADC_ConfigureBoostMode+0x144>
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af0:	d002      	beq.n	8003af8 <ADC_ConfigureBoostMode+0x68>
 8003af2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003af6:	d16d      	bne.n	8003bd4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	60fb      	str	r3, [r7, #12]
        break;
 8003b06:	e068      	b.n	8003bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	089b      	lsrs	r3, r3, #2
 8003b0c:	60fb      	str	r3, [r7, #12]
        break;
 8003b0e:	e064      	b.n	8003bda <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b10:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003b14:	f04f 0100 	mov.w	r1, #0
 8003b18:	f006 fb68 	bl	800a1ec <HAL_RCCEx_GetPeriphCLKFreq>
 8003b1c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003b26:	d051      	beq.n	8003bcc <ADC_ConfigureBoostMode+0x13c>
 8003b28:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003b2c:	d854      	bhi.n	8003bd8 <ADC_ConfigureBoostMode+0x148>
 8003b2e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b32:	d047      	beq.n	8003bc4 <ADC_ConfigureBoostMode+0x134>
 8003b34:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b38:	d84e      	bhi.n	8003bd8 <ADC_ConfigureBoostMode+0x148>
 8003b3a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b3e:	d03d      	beq.n	8003bbc <ADC_ConfigureBoostMode+0x12c>
 8003b40:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b44:	d848      	bhi.n	8003bd8 <ADC_ConfigureBoostMode+0x148>
 8003b46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b4a:	d033      	beq.n	8003bb4 <ADC_ConfigureBoostMode+0x124>
 8003b4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b50:	d842      	bhi.n	8003bd8 <ADC_ConfigureBoostMode+0x148>
 8003b52:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b56:	d029      	beq.n	8003bac <ADC_ConfigureBoostMode+0x11c>
 8003b58:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b5c:	d83c      	bhi.n	8003bd8 <ADC_ConfigureBoostMode+0x148>
 8003b5e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b62:	d01a      	beq.n	8003b9a <ADC_ConfigureBoostMode+0x10a>
 8003b64:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b68:	d836      	bhi.n	8003bd8 <ADC_ConfigureBoostMode+0x148>
 8003b6a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b6e:	d014      	beq.n	8003b9a <ADC_ConfigureBoostMode+0x10a>
 8003b70:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b74:	d830      	bhi.n	8003bd8 <ADC_ConfigureBoostMode+0x148>
 8003b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b7a:	d00e      	beq.n	8003b9a <ADC_ConfigureBoostMode+0x10a>
 8003b7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b80:	d82a      	bhi.n	8003bd8 <ADC_ConfigureBoostMode+0x148>
 8003b82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b86:	d008      	beq.n	8003b9a <ADC_ConfigureBoostMode+0x10a>
 8003b88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b8c:	d824      	bhi.n	8003bd8 <ADC_ConfigureBoostMode+0x148>
 8003b8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b92:	d002      	beq.n	8003b9a <ADC_ConfigureBoostMode+0x10a>
 8003b94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b98:	d11e      	bne.n	8003bd8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	0c9b      	lsrs	r3, r3, #18
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	60fb      	str	r3, [r7, #12]
        break;
 8003baa:	e016      	b.n	8003bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	60fb      	str	r3, [r7, #12]
        break;
 8003bb2:	e012      	b.n	8003bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	60fb      	str	r3, [r7, #12]
        break;
 8003bba:	e00e      	b.n	8003bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	099b      	lsrs	r3, r3, #6
 8003bc0:	60fb      	str	r3, [r7, #12]
        break;
 8003bc2:	e00a      	b.n	8003bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	09db      	lsrs	r3, r3, #7
 8003bc8:	60fb      	str	r3, [r7, #12]
        break;
 8003bca:	e006      	b.n	8003bda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	60fb      	str	r3, [r7, #12]
        break;
 8003bd2:	e002      	b.n	8003bda <ADC_ConfigureBoostMode+0x14a>
        break;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003bd8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003bda:	f7fe fb91 	bl	8002300 <HAL_GetREVID>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d815      	bhi.n	8003c14 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a2b      	ldr	r2, [pc, #172]	@ (8003c98 <ADC_ConfigureBoostMode+0x208>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d908      	bls.n	8003c02 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bfe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003c00:	e03e      	b.n	8003c80 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c10:	609a      	str	r2, [r3, #8]
}
 8003c12:	e035      	b.n	8003c80 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c9c <ADC_ConfigureBoostMode+0x20c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d808      	bhi.n	8003c34 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c30:	609a      	str	r2, [r3, #8]
}
 8003c32:	e025      	b.n	8003c80 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a1a      	ldr	r2, [pc, #104]	@ (8003ca0 <ADC_ConfigureBoostMode+0x210>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d80a      	bhi.n	8003c52 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c4e:	609a      	str	r2, [r3, #8]
}
 8003c50:	e016      	b.n	8003c80 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	4a13      	ldr	r2, [pc, #76]	@ (8003ca4 <ADC_ConfigureBoostMode+0x214>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d80a      	bhi.n	8003c70 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6c:	609a      	str	r2, [r3, #8]
}
 8003c6e:	e007      	b.n	8003c80 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003c7e:	609a      	str	r2, [r3, #8]
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	40022100 	.word	0x40022100
 8003c90:	40022300 	.word	0x40022300
 8003c94:	58026300 	.word	0x58026300
 8003c98:	01312d00 	.word	0x01312d00
 8003c9c:	005f5e10 	.word	0x005f5e10
 8003ca0:	00bebc20 	.word	0x00bebc20
 8003ca4:	017d7840 	.word	0x017d7840

08003ca8 <LL_ADC_IsEnabled>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <LL_ADC_IsEnabled+0x18>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <LL_ADC_IsEnabled+0x1a>
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <LL_ADC_StartCalibration>:
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <LL_ADC_StartCalibration+0x38>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	609a      	str	r2, [r3, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	3ffeffc0 	.word	0x3ffeffc0

08003d0c <LL_ADC_IsCalibrationOnGoing>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d20:	d101      	bne.n	8003d26 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d101      	bne.n	8003d4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_ADCEx_Calibration_Start+0x1e>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e04c      	b.n	8003e14 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7ff fd90 	bl	80038a8 <ADC_Disable>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d135      	bne.n	8003dfe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d96:	4b21      	ldr	r3, [pc, #132]	@ (8003e1c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	f043 0202 	orr.w	r2, r3, #2
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ff90 	bl	8003cd0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003db0:	e014      	b.n	8003ddc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	3301      	adds	r3, #1
 8003db6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4a19      	ldr	r2, [pc, #100]	@ (8003e20 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d30d      	bcc.n	8003ddc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc4:	f023 0312 	bic.w	r3, r3, #18
 8003dc8:	f043 0210 	orr.w	r2, r3, #16
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e01b      	b.n	8003e14 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff93 	bl	8003d0c <LL_ADC_IsCalibrationOnGoing>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e2      	bne.n	8003db2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df0:	f023 0303 	bic.w	r3, r3, #3
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	655a      	str	r2, [r3, #84]	@ 0x54
 8003dfc:	e005      	b.n	8003e0a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e02:	f043 0210 	orr.w	r2, r3, #16
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	ffffeefd 	.word	0xffffeefd
 8003e20:	25c3f800 	.word	0x25c3f800

08003e24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b09f      	sub	sp, #124	@ 0x7c
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e0be      	b.n	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5c      	ldr	r2, [pc, #368]	@ (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d102      	bne.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e5c:	4b5b      	ldr	r3, [pc, #364]	@ (8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	e001      	b.n	8003e66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e09d      	b.n	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff ff54 	bl	8003d34 <LL_ADC_REG_IsConversionOngoing>
 8003e8c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ff4e 	bl	8003d34 <LL_ADC_REG_IsConversionOngoing>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d17f      	bne.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d17c      	bne.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a47      	ldr	r2, [pc, #284]	@ (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d004      	beq.n	8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a46      	ldr	r2, [pc, #280]	@ (8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003eb8:	4b45      	ldr	r3, [pc, #276]	@ (8003fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003eba:	e000      	b.n	8003ebe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003ebc:	4b45      	ldr	r3, [pc, #276]	@ (8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d039      	beq.n	8003f3c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ed8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3a      	ldr	r2, [pc, #232]	@ (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a38      	ldr	r2, [pc, #224]	@ (8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d10e      	bne.n	8003f0c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003eee:	4836      	ldr	r0, [pc, #216]	@ (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ef0:	f7ff feda 	bl	8003ca8 <LL_ADC_IsEnabled>
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	4835      	ldr	r0, [pc, #212]	@ (8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ef8:	f7ff fed6 	bl	8003ca8 <LL_ADC_IsEnabled>
 8003efc:	4603      	mov	r3, r0
 8003efe:	4323      	orrs	r3, r4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e008      	b.n	8003f1e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003f0c:	4832      	ldr	r0, [pc, #200]	@ (8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003f0e:	f7ff fecb 	bl	8003ca8 <LL_ADC_IsEnabled>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d047      	beq.n	8003fb2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	4b2d      	ldr	r3, [pc, #180]	@ (8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	6811      	ldr	r1, [r2, #0]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	6892      	ldr	r2, [r2, #8]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	431a      	orrs	r2, r3
 8003f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f38:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f3a:	e03a      	b.n	8003fb2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003f3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f46:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1d      	ldr	r2, [pc, #116]	@ (8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d10e      	bne.n	8003f7a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003f5c:	481a      	ldr	r0, [pc, #104]	@ (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f5e:	f7ff fea3 	bl	8003ca8 <LL_ADC_IsEnabled>
 8003f62:	4604      	mov	r4, r0
 8003f64:	4819      	ldr	r0, [pc, #100]	@ (8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f66:	f7ff fe9f 	bl	8003ca8 <LL_ADC_IsEnabled>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4323      	orrs	r3, r4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bf0c      	ite	eq
 8003f72:	2301      	moveq	r3, #1
 8003f74:	2300      	movne	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	e008      	b.n	8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003f7a:	4817      	ldr	r0, [pc, #92]	@ (8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003f7c:	f7ff fe94 	bl	8003ca8 <LL_ADC_IsEnabled>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d010      	beq.n	8003fb2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	4b11      	ldr	r3, [pc, #68]	@ (8003fdc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f9a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f9c:	e009      	b.n	8003fb2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003fb0:	e000      	b.n	8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fb2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fbc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	377c      	adds	r7, #124	@ 0x7c
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd90      	pop	{r4, r7, pc}
 8003fc8:	40022000 	.word	0x40022000
 8003fcc:	40022100 	.word	0x40022100
 8003fd0:	40022300 	.word	0x40022300
 8003fd4:	58026300 	.word	0x58026300
 8003fd8:	58026000 	.word	0x58026000
 8003fdc:	fffff0e0 	.word	0xfffff0e0

08003fe0 <__NVIC_SetPriorityGrouping>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <__NVIC_SetPriorityGrouping+0x40>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004008:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <__NVIC_SetPriorityGrouping+0x44>)
 800400a:	4313      	orrs	r3, r2
 800400c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800400e:	4a04      	ldr	r2, [pc, #16]	@ (8004020 <__NVIC_SetPriorityGrouping+0x40>)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	60d3      	str	r3, [r2, #12]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000ed00 	.word	0xe000ed00
 8004024:	05fa0000 	.word	0x05fa0000

08004028 <__NVIC_GetPriorityGrouping>:
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800402c:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <__NVIC_GetPriorityGrouping+0x18>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	0a1b      	lsrs	r3, r3, #8
 8004032:	f003 0307 	and.w	r3, r3, #7
}
 8004036:	4618      	mov	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <__NVIC_EnableIRQ>:
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800404e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004052:	2b00      	cmp	r3, #0
 8004054:	db0b      	blt.n	800406e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	f003 021f 	and.w	r2, r3, #31
 800405c:	4907      	ldr	r1, [pc, #28]	@ (800407c <__NVIC_EnableIRQ+0x38>)
 800405e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	2001      	movs	r0, #1
 8004066:	fa00 f202 	lsl.w	r2, r0, r2
 800406a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	e000e100 	.word	0xe000e100

08004080 <__NVIC_SetPriority>:
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800408c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004090:	2b00      	cmp	r3, #0
 8004092:	db0a      	blt.n	80040aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	490c      	ldr	r1, [pc, #48]	@ (80040cc <__NVIC_SetPriority+0x4c>)
 800409a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800409e:	0112      	lsls	r2, r2, #4
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	440b      	add	r3, r1
 80040a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80040a8:	e00a      	b.n	80040c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	4908      	ldr	r1, [pc, #32]	@ (80040d0 <__NVIC_SetPriority+0x50>)
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	3b04      	subs	r3, #4
 80040b8:	0112      	lsls	r2, r2, #4
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	440b      	add	r3, r1
 80040be:	761a      	strb	r2, [r3, #24]
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	e000e100 	.word	0xe000e100
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <NVIC_EncodePriority>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	@ 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f1c3 0307 	rsb	r3, r3, #7
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	bf28      	it	cs
 80040f2:	2304      	movcs	r3, #4
 80040f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d902      	bls.n	8004104 <NVIC_EncodePriority+0x30>
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3b03      	subs	r3, #3
 8004102:	e000      	b.n	8004106 <NVIC_EncodePriority+0x32>
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004108:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43da      	mvns	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	401a      	ands	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800411c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	fa01 f303 	lsl.w	r3, r1, r3
 8004126:	43d9      	mvns	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800412c:	4313      	orrs	r3, r2
}
 800412e:	4618      	mov	r0, r3
 8004130:	3724      	adds	r7, #36	@ 0x24
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3b01      	subs	r3, #1
 8004148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800414c:	d301      	bcc.n	8004152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800414e:	2301      	movs	r3, #1
 8004150:	e00f      	b.n	8004172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004152:	4a0a      	ldr	r2, [pc, #40]	@ (800417c <SysTick_Config+0x40>)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3b01      	subs	r3, #1
 8004158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800415a:	210f      	movs	r1, #15
 800415c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004160:	f7ff ff8e 	bl	8004080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004164:	4b05      	ldr	r3, [pc, #20]	@ (800417c <SysTick_Config+0x40>)
 8004166:	2200      	movs	r2, #0
 8004168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800416a:	4b04      	ldr	r3, [pc, #16]	@ (800417c <SysTick_Config+0x40>)
 800416c:	2207      	movs	r2, #7
 800416e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	e000e010 	.word	0xe000e010

08004180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ff29 	bl	8003fe0 <__NVIC_SetPriorityGrouping>
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	4603      	mov	r3, r0
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041a4:	f7ff ff40 	bl	8004028 <__NVIC_GetPriorityGrouping>
 80041a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f7ff ff90 	bl	80040d4 <NVIC_EncodePriority>
 80041b4:	4602      	mov	r2, r0
 80041b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ff5f 	bl	8004080 <__NVIC_SetPriority>
}
 80041c2:	bf00      	nop
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	4603      	mov	r3, r0
 80041d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff ff33 	bl	8004044 <__NVIC_EnableIRQ>
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ffa4 	bl	800413c <SysTick_Config>
 80041f4:	4603      	mov	r3, r0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004204:	f3bf 8f5f 	dmb	sy
}
 8004208:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800420a:	4b07      	ldr	r3, [pc, #28]	@ (8004228 <HAL_MPU_Disable+0x28>)
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	4a06      	ldr	r2, [pc, #24]	@ (8004228 <HAL_MPU_Disable+0x28>)
 8004210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004214:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004216:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_MPU_Disable+0x2c>)
 8004218:	2200      	movs	r2, #0
 800421a:	605a      	str	r2, [r3, #4]
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	e000ed00 	.word	0xe000ed00
 800422c:	e000ed90 	.word	0xe000ed90

08004230 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004238:	4a0b      	ldr	r2, [pc, #44]	@ (8004268 <HAL_MPU_Enable+0x38>)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004242:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <HAL_MPU_Enable+0x3c>)
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	4a09      	ldr	r2, [pc, #36]	@ (800426c <HAL_MPU_Enable+0x3c>)
 8004248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800424c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800424e:	f3bf 8f4f 	dsb	sy
}
 8004252:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004254:	f3bf 8f6f 	isb	sy
}
 8004258:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000ed90 	.word	0xe000ed90
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	785a      	ldrb	r2, [r3, #1]
 800427c:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <HAL_MPU_ConfigRegion+0x84>)
 800427e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d029      	beq.n	80042dc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004288:	4a1a      	ldr	r2, [pc, #104]	@ (80042f4 <HAL_MPU_ConfigRegion+0x84>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7b1b      	ldrb	r3, [r3, #12]
 8004294:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	7adb      	ldrb	r3, [r3, #11]
 800429a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800429c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	7a9b      	ldrb	r3, [r3, #10]
 80042a2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80042a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	7b5b      	ldrb	r3, [r3, #13]
 80042aa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80042ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	7b9b      	ldrb	r3, [r3, #14]
 80042b2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80042b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7bdb      	ldrb	r3, [r3, #15]
 80042ba:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80042bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7a5b      	ldrb	r3, [r3, #9]
 80042c2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80042c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	7a1b      	ldrb	r3, [r3, #8]
 80042ca:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80042cc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042d4:	4a07      	ldr	r2, [pc, #28]	@ (80042f4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042d6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042d8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80042da:	e005      	b.n	80042e8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80042dc:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <HAL_MPU_ConfigRegion+0x84>)
 80042de:	2200      	movs	r2, #0
 80042e0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80042e2:	4b04      	ldr	r3, [pc, #16]	@ (80042f4 <HAL_MPU_ConfigRegion+0x84>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	611a      	str	r2, [r3, #16]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000ed90 	.word	0xe000ed90

080042f8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e014      	b.n	8004334 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	791b      	ldrb	r3, [r3, #4]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fc ff9c 	bl	8001258 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	795b      	ldrb	r3, [r3, #5]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_DAC_ConfigChannel+0x18>
 8004350:	2302      	movs	r3, #2
 8004352:	e12a      	b.n	80045aa <HAL_DAC_ConfigChannel+0x26e>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2202      	movs	r2, #2
 800435e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b04      	cmp	r3, #4
 8004366:	f040 8081 	bne.w	800446c <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800436a:	f7fd ff99 	bl	80022a0 <HAL_GetTick>
 800436e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d140      	bne.n	80043f8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004376:	e018      	b.n	80043aa <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004378:	f7fd ff92 	bl	80022a0 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d911      	bls.n	80043aa <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800438c:	4b89      	ldr	r3, [pc, #548]	@ (80045b4 <HAL_DAC_ConfigChannel+0x278>)
 800438e:	4013      	ands	r3, r2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f043 0208 	orr.w	r2, r3, #8
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2203      	movs	r2, #3
 80043a4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0ff      	b.n	80045aa <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043b0:	4b80      	ldr	r3, [pc, #512]	@ (80045b4 <HAL_DAC_ConfigChannel+0x278>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1df      	bne.n	8004378 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80043b8:	2001      	movs	r0, #1
 80043ba:	f7fd ff7d 	bl	80022b8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	6992      	ldr	r2, [r2, #24]
 80043c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80043c8:	e023      	b.n	8004412 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80043ca:	f7fd ff69 	bl	80022a0 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d90f      	bls.n	80043f8 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043de:	2b00      	cmp	r3, #0
 80043e0:	da0a      	bge.n	80043f8 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f043 0208 	orr.w	r2, r3, #8
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2203      	movs	r2, #3
 80043f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e0d8      	b.n	80045aa <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fe:	2b00      	cmp	r3, #0
 8004400:	dbe3      	blt.n	80043ca <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8004402:	2001      	movs	r0, #1
 8004404:	f7fd ff58 	bl	80022b8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	6992      	ldr	r2, [r2, #24]
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	ea02 0103 	and.w	r1, r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	21ff      	movs	r1, #255	@ 0xff
 800444e:	fa01 f303 	lsl.w	r3, r1, r3
 8004452:	43db      	mvns	r3, r3
 8004454:	ea02 0103 	and.w	r1, r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	409a      	lsls	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d11d      	bne.n	80044b0 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	221f      	movs	r2, #31
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	43db      	mvns	r3, r3
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4013      	ands	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2207      	movs	r2, #7
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4013      	ands	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d102      	bne.n	80044da <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e00f      	b.n	80044fa <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d102      	bne.n	80044e8 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80044e2:	2301      	movs	r3, #1
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	e008      	b.n	80044fa <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d102      	bne.n	80044f6 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80044f0:	2301      	movs	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	e001      	b.n	80044fa <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	4313      	orrs	r3, r2
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43da      	mvns	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	400a      	ands	r2, r1
 8004540:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4013      	ands	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	22c0      	movs	r2, #192	@ 0xc0
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43da      	mvns	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	400a      	ands	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20008000 	.word	0x20008000

080045b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80045c0:	f7fd fe6e 	bl	80022a0 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e316      	b.n	8004bfe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a66      	ldr	r2, [pc, #408]	@ (8004770 <HAL_DMA_Init+0x1b8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d04a      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a65      	ldr	r2, [pc, #404]	@ (8004774 <HAL_DMA_Init+0x1bc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d045      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a63      	ldr	r2, [pc, #396]	@ (8004778 <HAL_DMA_Init+0x1c0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d040      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a62      	ldr	r2, [pc, #392]	@ (800477c <HAL_DMA_Init+0x1c4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d03b      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a60      	ldr	r2, [pc, #384]	@ (8004780 <HAL_DMA_Init+0x1c8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d036      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a5f      	ldr	r2, [pc, #380]	@ (8004784 <HAL_DMA_Init+0x1cc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d031      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a5d      	ldr	r2, [pc, #372]	@ (8004788 <HAL_DMA_Init+0x1d0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d02c      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a5c      	ldr	r2, [pc, #368]	@ (800478c <HAL_DMA_Init+0x1d4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d027      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a5a      	ldr	r2, [pc, #360]	@ (8004790 <HAL_DMA_Init+0x1d8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d022      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a59      	ldr	r2, [pc, #356]	@ (8004794 <HAL_DMA_Init+0x1dc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d01d      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a57      	ldr	r2, [pc, #348]	@ (8004798 <HAL_DMA_Init+0x1e0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d018      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a56      	ldr	r2, [pc, #344]	@ (800479c <HAL_DMA_Init+0x1e4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d013      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a54      	ldr	r2, [pc, #336]	@ (80047a0 <HAL_DMA_Init+0x1e8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a53      	ldr	r2, [pc, #332]	@ (80047a4 <HAL_DMA_Init+0x1ec>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a51      	ldr	r2, [pc, #324]	@ (80047a8 <HAL_DMA_Init+0x1f0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_DMA_Init+0xb8>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a50      	ldr	r2, [pc, #320]	@ (80047ac <HAL_DMA_Init+0x1f4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d101      	bne.n	8004674 <HAL_DMA_Init+0xbc>
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <HAL_DMA_Init+0xbe>
 8004674:	2300      	movs	r3, #0
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 813b 	beq.w	80048f2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a37      	ldr	r2, [pc, #220]	@ (8004770 <HAL_DMA_Init+0x1b8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d04a      	beq.n	800472c <HAL_DMA_Init+0x174>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a36      	ldr	r2, [pc, #216]	@ (8004774 <HAL_DMA_Init+0x1bc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d045      	beq.n	800472c <HAL_DMA_Init+0x174>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a34      	ldr	r2, [pc, #208]	@ (8004778 <HAL_DMA_Init+0x1c0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d040      	beq.n	800472c <HAL_DMA_Init+0x174>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a33      	ldr	r2, [pc, #204]	@ (800477c <HAL_DMA_Init+0x1c4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d03b      	beq.n	800472c <HAL_DMA_Init+0x174>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a31      	ldr	r2, [pc, #196]	@ (8004780 <HAL_DMA_Init+0x1c8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d036      	beq.n	800472c <HAL_DMA_Init+0x174>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a30      	ldr	r2, [pc, #192]	@ (8004784 <HAL_DMA_Init+0x1cc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d031      	beq.n	800472c <HAL_DMA_Init+0x174>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004788 <HAL_DMA_Init+0x1d0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02c      	beq.n	800472c <HAL_DMA_Init+0x174>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a2d      	ldr	r2, [pc, #180]	@ (800478c <HAL_DMA_Init+0x1d4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d027      	beq.n	800472c <HAL_DMA_Init+0x174>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004790 <HAL_DMA_Init+0x1d8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d022      	beq.n	800472c <HAL_DMA_Init+0x174>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004794 <HAL_DMA_Init+0x1dc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d01d      	beq.n	800472c <HAL_DMA_Init+0x174>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a28      	ldr	r2, [pc, #160]	@ (8004798 <HAL_DMA_Init+0x1e0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d018      	beq.n	800472c <HAL_DMA_Init+0x174>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a27      	ldr	r2, [pc, #156]	@ (800479c <HAL_DMA_Init+0x1e4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <HAL_DMA_Init+0x174>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a25      	ldr	r2, [pc, #148]	@ (80047a0 <HAL_DMA_Init+0x1e8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00e      	beq.n	800472c <HAL_DMA_Init+0x174>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a24      	ldr	r2, [pc, #144]	@ (80047a4 <HAL_DMA_Init+0x1ec>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_DMA_Init+0x174>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a22      	ldr	r2, [pc, #136]	@ (80047a8 <HAL_DMA_Init+0x1f0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_DMA_Init+0x174>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a21      	ldr	r2, [pc, #132]	@ (80047ac <HAL_DMA_Init+0x1f4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d108      	bne.n	800473e <HAL_DMA_Init+0x186>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e007      	b.n	800474e <HAL_DMA_Init+0x196>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800474e:	e02f      	b.n	80047b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004750:	f7fd fda6 	bl	80022a0 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b05      	cmp	r3, #5
 800475c:	d928      	bls.n	80047b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2203      	movs	r2, #3
 8004768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e246      	b.n	8004bfe <HAL_DMA_Init+0x646>
 8004770:	40020010 	.word	0x40020010
 8004774:	40020028 	.word	0x40020028
 8004778:	40020040 	.word	0x40020040
 800477c:	40020058 	.word	0x40020058
 8004780:	40020070 	.word	0x40020070
 8004784:	40020088 	.word	0x40020088
 8004788:	400200a0 	.word	0x400200a0
 800478c:	400200b8 	.word	0x400200b8
 8004790:	40020410 	.word	0x40020410
 8004794:	40020428 	.word	0x40020428
 8004798:	40020440 	.word	0x40020440
 800479c:	40020458 	.word	0x40020458
 80047a0:	40020470 	.word	0x40020470
 80047a4:	40020488 	.word	0x40020488
 80047a8:	400204a0 	.word	0x400204a0
 80047ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1c8      	bne.n	8004750 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	4b83      	ldr	r3, [pc, #524]	@ (80049d8 <HAL_DMA_Init+0x420>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80047d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	2b04      	cmp	r3, #4
 8004802:	d107      	bne.n	8004814 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	4313      	orrs	r3, r2
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004814:	4b71      	ldr	r3, [pc, #452]	@ (80049dc <HAL_DMA_Init+0x424>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b71      	ldr	r3, [pc, #452]	@ (80049e0 <HAL_DMA_Init+0x428>)
 800481a:	4013      	ands	r3, r2
 800481c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004820:	d328      	bcc.n	8004874 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b28      	cmp	r3, #40	@ 0x28
 8004828:	d903      	bls.n	8004832 <HAL_DMA_Init+0x27a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004830:	d917      	bls.n	8004862 <HAL_DMA_Init+0x2aa>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b3e      	cmp	r3, #62	@ 0x3e
 8004838:	d903      	bls.n	8004842 <HAL_DMA_Init+0x28a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b42      	cmp	r3, #66	@ 0x42
 8004840:	d90f      	bls.n	8004862 <HAL_DMA_Init+0x2aa>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b46      	cmp	r3, #70	@ 0x46
 8004848:	d903      	bls.n	8004852 <HAL_DMA_Init+0x29a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b48      	cmp	r3, #72	@ 0x48
 8004850:	d907      	bls.n	8004862 <HAL_DMA_Init+0x2aa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b4e      	cmp	r3, #78	@ 0x4e
 8004858:	d905      	bls.n	8004866 <HAL_DMA_Init+0x2ae>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b52      	cmp	r3, #82	@ 0x52
 8004860:	d801      	bhi.n	8004866 <HAL_DMA_Init+0x2ae>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <HAL_DMA_Init+0x2b0>
 8004866:	2300      	movs	r3, #0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004872:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f023 0307 	bic.w	r3, r3, #7
 800488a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	2b04      	cmp	r3, #4
 800489c:	d117      	bne.n	80048ce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00e      	beq.n	80048ce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f002 fce9 	bl	8007288 <DMA_CheckFifoParam>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2240      	movs	r2, #64	@ 0x40
 80048c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e197      	b.n	8004bfe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f002 fc24 	bl	8007124 <DMA_CalcBaseAndBitshift>
 80048dc:	4603      	mov	r3, r0
 80048de:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	223f      	movs	r2, #63	@ 0x3f
 80048ea:	409a      	lsls	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	e0cd      	b.n	8004a8e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a3b      	ldr	r2, [pc, #236]	@ (80049e4 <HAL_DMA_Init+0x42c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d022      	beq.n	8004942 <HAL_DMA_Init+0x38a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a39      	ldr	r2, [pc, #228]	@ (80049e8 <HAL_DMA_Init+0x430>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01d      	beq.n	8004942 <HAL_DMA_Init+0x38a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a38      	ldr	r2, [pc, #224]	@ (80049ec <HAL_DMA_Init+0x434>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d018      	beq.n	8004942 <HAL_DMA_Init+0x38a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a36      	ldr	r2, [pc, #216]	@ (80049f0 <HAL_DMA_Init+0x438>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <HAL_DMA_Init+0x38a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a35      	ldr	r2, [pc, #212]	@ (80049f4 <HAL_DMA_Init+0x43c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00e      	beq.n	8004942 <HAL_DMA_Init+0x38a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a33      	ldr	r2, [pc, #204]	@ (80049f8 <HAL_DMA_Init+0x440>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_DMA_Init+0x38a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a32      	ldr	r2, [pc, #200]	@ (80049fc <HAL_DMA_Init+0x444>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_DMA_Init+0x38a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a30      	ldr	r2, [pc, #192]	@ (8004a00 <HAL_DMA_Init+0x448>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_DMA_Init+0x38e>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <HAL_DMA_Init+0x390>
 8004946:	2300      	movs	r3, #0
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8097 	beq.w	8004a7c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a24      	ldr	r2, [pc, #144]	@ (80049e4 <HAL_DMA_Init+0x42c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d021      	beq.n	800499c <HAL_DMA_Init+0x3e4>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a22      	ldr	r2, [pc, #136]	@ (80049e8 <HAL_DMA_Init+0x430>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01c      	beq.n	800499c <HAL_DMA_Init+0x3e4>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a21      	ldr	r2, [pc, #132]	@ (80049ec <HAL_DMA_Init+0x434>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d017      	beq.n	800499c <HAL_DMA_Init+0x3e4>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1f      	ldr	r2, [pc, #124]	@ (80049f0 <HAL_DMA_Init+0x438>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d012      	beq.n	800499c <HAL_DMA_Init+0x3e4>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <HAL_DMA_Init+0x43c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00d      	beq.n	800499c <HAL_DMA_Init+0x3e4>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <HAL_DMA_Init+0x440>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d008      	beq.n	800499c <HAL_DMA_Init+0x3e4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1b      	ldr	r2, [pc, #108]	@ (80049fc <HAL_DMA_Init+0x444>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <HAL_DMA_Init+0x3e4>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a19      	ldr	r2, [pc, #100]	@ (8004a00 <HAL_DMA_Init+0x448>)
 800499a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4b13      	ldr	r3, [pc, #76]	@ (8004a04 <HAL_DMA_Init+0x44c>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b40      	cmp	r3, #64	@ 0x40
 80049c2:	d021      	beq.n	8004a08 <HAL_DMA_Init+0x450>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b80      	cmp	r3, #128	@ 0x80
 80049ca:	d102      	bne.n	80049d2 <HAL_DMA_Init+0x41a>
 80049cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80049d0:	e01b      	b.n	8004a0a <HAL_DMA_Init+0x452>
 80049d2:	2300      	movs	r3, #0
 80049d4:	e019      	b.n	8004a0a <HAL_DMA_Init+0x452>
 80049d6:	bf00      	nop
 80049d8:	fe10803f 	.word	0xfe10803f
 80049dc:	5c001000 	.word	0x5c001000
 80049e0:	ffff0000 	.word	0xffff0000
 80049e4:	58025408 	.word	0x58025408
 80049e8:	5802541c 	.word	0x5802541c
 80049ec:	58025430 	.word	0x58025430
 80049f0:	58025444 	.word	0x58025444
 80049f4:	58025458 	.word	0x58025458
 80049f8:	5802546c 	.word	0x5802546c
 80049fc:	58025480 	.word	0x58025480
 8004a00:	58025494 	.word	0x58025494
 8004a04:	fffe000f 	.word	0xfffe000f
 8004a08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68d2      	ldr	r2, [r2, #12]
 8004a0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8004c08 <HAL_DMA_Init+0x650>)
 8004a50:	4413      	add	r3, r2
 8004a52:	4a6e      	ldr	r2, [pc, #440]	@ (8004c0c <HAL_DMA_Init+0x654>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	009a      	lsls	r2, r3, #2
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f002 fb5f 	bl	8007124 <DMA_CalcBaseAndBitshift>
 8004a66:	4603      	mov	r3, r0
 8004a68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	2201      	movs	r2, #1
 8004a74:	409a      	lsls	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	e008      	b.n	8004a8e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2240      	movs	r2, #64	@ 0x40
 8004a80:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2203      	movs	r2, #3
 8004a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0b7      	b.n	8004bfe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a5f      	ldr	r2, [pc, #380]	@ (8004c10 <HAL_DMA_Init+0x658>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d072      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004c14 <HAL_DMA_Init+0x65c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d06d      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8004c18 <HAL_DMA_Init+0x660>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d068      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a5a      	ldr	r2, [pc, #360]	@ (8004c1c <HAL_DMA_Init+0x664>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d063      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a59      	ldr	r2, [pc, #356]	@ (8004c20 <HAL_DMA_Init+0x668>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d05e      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a57      	ldr	r2, [pc, #348]	@ (8004c24 <HAL_DMA_Init+0x66c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d059      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a56      	ldr	r2, [pc, #344]	@ (8004c28 <HAL_DMA_Init+0x670>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d054      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a54      	ldr	r2, [pc, #336]	@ (8004c2c <HAL_DMA_Init+0x674>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d04f      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a53      	ldr	r2, [pc, #332]	@ (8004c30 <HAL_DMA_Init+0x678>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d04a      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a51      	ldr	r2, [pc, #324]	@ (8004c34 <HAL_DMA_Init+0x67c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d045      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a50      	ldr	r2, [pc, #320]	@ (8004c38 <HAL_DMA_Init+0x680>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d040      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a4e      	ldr	r2, [pc, #312]	@ (8004c3c <HAL_DMA_Init+0x684>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d03b      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004c40 <HAL_DMA_Init+0x688>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d036      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a4b      	ldr	r2, [pc, #300]	@ (8004c44 <HAL_DMA_Init+0x68c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d031      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004c48 <HAL_DMA_Init+0x690>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d02c      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a48      	ldr	r2, [pc, #288]	@ (8004c4c <HAL_DMA_Init+0x694>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d027      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a47      	ldr	r2, [pc, #284]	@ (8004c50 <HAL_DMA_Init+0x698>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d022      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a45      	ldr	r2, [pc, #276]	@ (8004c54 <HAL_DMA_Init+0x69c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01d      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a44      	ldr	r2, [pc, #272]	@ (8004c58 <HAL_DMA_Init+0x6a0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d018      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a42      	ldr	r2, [pc, #264]	@ (8004c5c <HAL_DMA_Init+0x6a4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a41      	ldr	r2, [pc, #260]	@ (8004c60 <HAL_DMA_Init+0x6a8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00e      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a3f      	ldr	r2, [pc, #252]	@ (8004c64 <HAL_DMA_Init+0x6ac>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d009      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c68 <HAL_DMA_Init+0x6b0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d004      	beq.n	8004b7e <HAL_DMA_Init+0x5c6>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3c      	ldr	r2, [pc, #240]	@ (8004c6c <HAL_DMA_Init+0x6b4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d101      	bne.n	8004b82 <HAL_DMA_Init+0x5ca>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <HAL_DMA_Init+0x5cc>
 8004b82:	2300      	movs	r3, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d032      	beq.n	8004bee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f002 fbf9 	bl	8007380 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b80      	cmp	r3, #128	@ 0x80
 8004b94:	d102      	bne.n	8004b9c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004bb0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d010      	beq.n	8004bdc <HAL_DMA_Init+0x624>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d80c      	bhi.n	8004bdc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f002 fc76 	bl	80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	e008      	b.n	8004bee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	a7fdabf8 	.word	0xa7fdabf8
 8004c0c:	cccccccd 	.word	0xcccccccd
 8004c10:	40020010 	.word	0x40020010
 8004c14:	40020028 	.word	0x40020028
 8004c18:	40020040 	.word	0x40020040
 8004c1c:	40020058 	.word	0x40020058
 8004c20:	40020070 	.word	0x40020070
 8004c24:	40020088 	.word	0x40020088
 8004c28:	400200a0 	.word	0x400200a0
 8004c2c:	400200b8 	.word	0x400200b8
 8004c30:	40020410 	.word	0x40020410
 8004c34:	40020428 	.word	0x40020428
 8004c38:	40020440 	.word	0x40020440
 8004c3c:	40020458 	.word	0x40020458
 8004c40:	40020470 	.word	0x40020470
 8004c44:	40020488 	.word	0x40020488
 8004c48:	400204a0 	.word	0x400204a0
 8004c4c:	400204b8 	.word	0x400204b8
 8004c50:	58025408 	.word	0x58025408
 8004c54:	5802541c 	.word	0x5802541c
 8004c58:	58025430 	.word	0x58025430
 8004c5c:	58025444 	.word	0x58025444
 8004c60:	58025458 	.word	0x58025458
 8004c64:	5802546c 	.word	0x5802546c
 8004c68:	58025480 	.word	0x58025480
 8004c6c:	58025494 	.word	0x58025494

08004c70 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e1a8      	b.n	8004fd4 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a82      	ldr	r2, [pc, #520]	@ (8004e90 <HAL_DMA_DeInit+0x220>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d04a      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a80      	ldr	r2, [pc, #512]	@ (8004e94 <HAL_DMA_DeInit+0x224>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d045      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a7f      	ldr	r2, [pc, #508]	@ (8004e98 <HAL_DMA_DeInit+0x228>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d040      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a7d      	ldr	r2, [pc, #500]	@ (8004e9c <HAL_DMA_DeInit+0x22c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d03b      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a7c      	ldr	r2, [pc, #496]	@ (8004ea0 <HAL_DMA_DeInit+0x230>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d036      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a7a      	ldr	r2, [pc, #488]	@ (8004ea4 <HAL_DMA_DeInit+0x234>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d031      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a79      	ldr	r2, [pc, #484]	@ (8004ea8 <HAL_DMA_DeInit+0x238>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d02c      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a77      	ldr	r2, [pc, #476]	@ (8004eac <HAL_DMA_DeInit+0x23c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d027      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a76      	ldr	r2, [pc, #472]	@ (8004eb0 <HAL_DMA_DeInit+0x240>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d022      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a74      	ldr	r2, [pc, #464]	@ (8004eb4 <HAL_DMA_DeInit+0x244>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01d      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a73      	ldr	r2, [pc, #460]	@ (8004eb8 <HAL_DMA_DeInit+0x248>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d018      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a71      	ldr	r2, [pc, #452]	@ (8004ebc <HAL_DMA_DeInit+0x24c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d013      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a70      	ldr	r2, [pc, #448]	@ (8004ec0 <HAL_DMA_DeInit+0x250>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00e      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a6e      	ldr	r2, [pc, #440]	@ (8004ec4 <HAL_DMA_DeInit+0x254>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d009      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a6d      	ldr	r2, [pc, #436]	@ (8004ec8 <HAL_DMA_DeInit+0x258>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d004      	beq.n	8004d22 <HAL_DMA_DeInit+0xb2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ecc <HAL_DMA_DeInit+0x25c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d108      	bne.n	8004d34 <HAL_DMA_DeInit+0xc4>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e007      	b.n	8004d44 <HAL_DMA_DeInit+0xd4>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a51      	ldr	r2, [pc, #324]	@ (8004e90 <HAL_DMA_DeInit+0x220>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d04a      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a50      	ldr	r2, [pc, #320]	@ (8004e94 <HAL_DMA_DeInit+0x224>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d045      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8004e98 <HAL_DMA_DeInit+0x228>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d040      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a4d      	ldr	r2, [pc, #308]	@ (8004e9c <HAL_DMA_DeInit+0x22c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d03b      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a4b      	ldr	r2, [pc, #300]	@ (8004ea0 <HAL_DMA_DeInit+0x230>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d036      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea4 <HAL_DMA_DeInit+0x234>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d031      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a48      	ldr	r2, [pc, #288]	@ (8004ea8 <HAL_DMA_DeInit+0x238>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d02c      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a47      	ldr	r2, [pc, #284]	@ (8004eac <HAL_DMA_DeInit+0x23c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d027      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a45      	ldr	r2, [pc, #276]	@ (8004eb0 <HAL_DMA_DeInit+0x240>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d022      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a44      	ldr	r2, [pc, #272]	@ (8004eb4 <HAL_DMA_DeInit+0x244>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d01d      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a42      	ldr	r2, [pc, #264]	@ (8004eb8 <HAL_DMA_DeInit+0x248>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d018      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a41      	ldr	r2, [pc, #260]	@ (8004ebc <HAL_DMA_DeInit+0x24c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ec0 <HAL_DMA_DeInit+0x250>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a3e      	ldr	r2, [pc, #248]	@ (8004ec4 <HAL_DMA_DeInit+0x254>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ec8 <HAL_DMA_DeInit+0x258>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_DMA_DeInit+0x174>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a3b      	ldr	r2, [pc, #236]	@ (8004ecc <HAL_DMA_DeInit+0x25c>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d101      	bne.n	8004de8 <HAL_DMA_DeInit+0x178>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <HAL_DMA_DeInit+0x17a>
 8004de8:	2300      	movs	r3, #0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d025      	beq.n	8004e3a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2200      	movs	r2, #0
 8004e14:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2221      	movs	r2, #33	@ 0x21
 8004e1c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f002 f980 	bl	8007124 <DMA_CalcBaseAndBitshift>
 8004e24:	4603      	mov	r3, r0
 8004e26:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	223f      	movs	r2, #63	@ 0x3f
 8004e32:	409a      	lsls	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	609a      	str	r2, [r3, #8]
 8004e38:	e081      	b.n	8004f3e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a24      	ldr	r2, [pc, #144]	@ (8004ed0 <HAL_DMA_DeInit+0x260>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d022      	beq.n	8004e8a <HAL_DMA_DeInit+0x21a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a22      	ldr	r2, [pc, #136]	@ (8004ed4 <HAL_DMA_DeInit+0x264>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01d      	beq.n	8004e8a <HAL_DMA_DeInit+0x21a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a21      	ldr	r2, [pc, #132]	@ (8004ed8 <HAL_DMA_DeInit+0x268>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d018      	beq.n	8004e8a <HAL_DMA_DeInit+0x21a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004edc <HAL_DMA_DeInit+0x26c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <HAL_DMA_DeInit+0x21a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee0 <HAL_DMA_DeInit+0x270>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00e      	beq.n	8004e8a <HAL_DMA_DeInit+0x21a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee4 <HAL_DMA_DeInit+0x274>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d009      	beq.n	8004e8a <HAL_DMA_DeInit+0x21a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee8 <HAL_DMA_DeInit+0x278>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d004      	beq.n	8004e8a <HAL_DMA_DeInit+0x21a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a19      	ldr	r2, [pc, #100]	@ (8004eec <HAL_DMA_DeInit+0x27c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d132      	bne.n	8004ef0 <HAL_DMA_DeInit+0x280>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e031      	b.n	8004ef2 <HAL_DMA_DeInit+0x282>
 8004e8e:	bf00      	nop
 8004e90:	40020010 	.word	0x40020010
 8004e94:	40020028 	.word	0x40020028
 8004e98:	40020040 	.word	0x40020040
 8004e9c:	40020058 	.word	0x40020058
 8004ea0:	40020070 	.word	0x40020070
 8004ea4:	40020088 	.word	0x40020088
 8004ea8:	400200a0 	.word	0x400200a0
 8004eac:	400200b8 	.word	0x400200b8
 8004eb0:	40020410 	.word	0x40020410
 8004eb4:	40020428 	.word	0x40020428
 8004eb8:	40020440 	.word	0x40020440
 8004ebc:	40020458 	.word	0x40020458
 8004ec0:	40020470 	.word	0x40020470
 8004ec4:	40020488 	.word	0x40020488
 8004ec8:	400204a0 	.word	0x400204a0
 8004ecc:	400204b8 	.word	0x400204b8
 8004ed0:	58025408 	.word	0x58025408
 8004ed4:	5802541c 	.word	0x5802541c
 8004ed8:	58025430 	.word	0x58025430
 8004edc:	58025444 	.word	0x58025444
 8004ee0:	58025458 	.word	0x58025458
 8004ee4:	5802546c 	.word	0x5802546c
 8004ee8:	58025480 	.word	0x58025480
 8004eec:	58025494 	.word	0x58025494
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d021      	beq.n	8004f3a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f002 f900 	bl	8007124 <DMA_CalcBaseAndBitshift>
 8004f24:	4603      	mov	r3, r0
 8004f26:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	2201      	movs	r2, #1
 8004f32:	409a      	lsls	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	605a      	str	r2, [r3, #4]
 8004f38:	e001      	b.n	8004f3e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e04a      	b.n	8004fd4 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f002 fa1e 	bl	8007380 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004f5c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00f      	beq.n	8004f86 <HAL_DMA_DeInit+0x316>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d80b      	bhi.n	8004f86 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f002 faa0 	bl	80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004f84:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e226      	b.n	8005446 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_DMA_Start_IT+0x2a>
 8005002:	2302      	movs	r3, #2
 8005004:	e21f      	b.n	8005446 <HAL_DMA_Start_IT+0x46a>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	f040 820a 	bne.w	8005430 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a68      	ldr	r2, [pc, #416]	@ (80051d0 <HAL_DMA_Start_IT+0x1f4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d04a      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a66      	ldr	r2, [pc, #408]	@ (80051d4 <HAL_DMA_Start_IT+0x1f8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d045      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a65      	ldr	r2, [pc, #404]	@ (80051d8 <HAL_DMA_Start_IT+0x1fc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d040      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a63      	ldr	r2, [pc, #396]	@ (80051dc <HAL_DMA_Start_IT+0x200>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d03b      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a62      	ldr	r2, [pc, #392]	@ (80051e0 <HAL_DMA_Start_IT+0x204>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d036      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a60      	ldr	r2, [pc, #384]	@ (80051e4 <HAL_DMA_Start_IT+0x208>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d031      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a5f      	ldr	r2, [pc, #380]	@ (80051e8 <HAL_DMA_Start_IT+0x20c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d02c      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a5d      	ldr	r2, [pc, #372]	@ (80051ec <HAL_DMA_Start_IT+0x210>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d027      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a5c      	ldr	r2, [pc, #368]	@ (80051f0 <HAL_DMA_Start_IT+0x214>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d022      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a5a      	ldr	r2, [pc, #360]	@ (80051f4 <HAL_DMA_Start_IT+0x218>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01d      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a59      	ldr	r2, [pc, #356]	@ (80051f8 <HAL_DMA_Start_IT+0x21c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d018      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a57      	ldr	r2, [pc, #348]	@ (80051fc <HAL_DMA_Start_IT+0x220>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a56      	ldr	r2, [pc, #344]	@ (8005200 <HAL_DMA_Start_IT+0x224>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00e      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a54      	ldr	r2, [pc, #336]	@ (8005204 <HAL_DMA_Start_IT+0x228>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d009      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a53      	ldr	r2, [pc, #332]	@ (8005208 <HAL_DMA_Start_IT+0x22c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <HAL_DMA_Start_IT+0xee>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a51      	ldr	r2, [pc, #324]	@ (800520c <HAL_DMA_Start_IT+0x230>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d108      	bne.n	80050dc <HAL_DMA_Start_IT+0x100>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e007      	b.n	80050ec <HAL_DMA_Start_IT+0x110>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f001 fe6a 	bl	8006dcc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a34      	ldr	r2, [pc, #208]	@ (80051d0 <HAL_DMA_Start_IT+0x1f4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d04a      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a33      	ldr	r2, [pc, #204]	@ (80051d4 <HAL_DMA_Start_IT+0x1f8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d045      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a31      	ldr	r2, [pc, #196]	@ (80051d8 <HAL_DMA_Start_IT+0x1fc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d040      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a30      	ldr	r2, [pc, #192]	@ (80051dc <HAL_DMA_Start_IT+0x200>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d03b      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a2e      	ldr	r2, [pc, #184]	@ (80051e0 <HAL_DMA_Start_IT+0x204>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d036      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a2d      	ldr	r2, [pc, #180]	@ (80051e4 <HAL_DMA_Start_IT+0x208>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d031      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2b      	ldr	r2, [pc, #172]	@ (80051e8 <HAL_DMA_Start_IT+0x20c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d02c      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2a      	ldr	r2, [pc, #168]	@ (80051ec <HAL_DMA_Start_IT+0x210>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d027      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a28      	ldr	r2, [pc, #160]	@ (80051f0 <HAL_DMA_Start_IT+0x214>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d022      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a27      	ldr	r2, [pc, #156]	@ (80051f4 <HAL_DMA_Start_IT+0x218>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d01d      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a25      	ldr	r2, [pc, #148]	@ (80051f8 <HAL_DMA_Start_IT+0x21c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d018      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a24      	ldr	r2, [pc, #144]	@ (80051fc <HAL_DMA_Start_IT+0x220>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d013      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a22      	ldr	r2, [pc, #136]	@ (8005200 <HAL_DMA_Start_IT+0x224>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00e      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a21      	ldr	r2, [pc, #132]	@ (8005204 <HAL_DMA_Start_IT+0x228>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d009      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1f      	ldr	r2, [pc, #124]	@ (8005208 <HAL_DMA_Start_IT+0x22c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d004      	beq.n	8005198 <HAL_DMA_Start_IT+0x1bc>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1e      	ldr	r2, [pc, #120]	@ (800520c <HAL_DMA_Start_IT+0x230>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d101      	bne.n	800519c <HAL_DMA_Start_IT+0x1c0>
 8005198:	2301      	movs	r3, #1
 800519a:	e000      	b.n	800519e <HAL_DMA_Start_IT+0x1c2>
 800519c:	2300      	movs	r3, #0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d036      	beq.n	8005210 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f023 021e 	bic.w	r2, r3, #30
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0216 	orr.w	r2, r2, #22
 80051b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d03e      	beq.n	800523c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0208 	orr.w	r2, r2, #8
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e035      	b.n	800523c <HAL_DMA_Start_IT+0x260>
 80051d0:	40020010 	.word	0x40020010
 80051d4:	40020028 	.word	0x40020028
 80051d8:	40020040 	.word	0x40020040
 80051dc:	40020058 	.word	0x40020058
 80051e0:	40020070 	.word	0x40020070
 80051e4:	40020088 	.word	0x40020088
 80051e8:	400200a0 	.word	0x400200a0
 80051ec:	400200b8 	.word	0x400200b8
 80051f0:	40020410 	.word	0x40020410
 80051f4:	40020428 	.word	0x40020428
 80051f8:	40020440 	.word	0x40020440
 80051fc:	40020458 	.word	0x40020458
 8005200:	40020470 	.word	0x40020470
 8005204:	40020488 	.word	0x40020488
 8005208:	400204a0 	.word	0x400204a0
 800520c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 020e 	bic.w	r2, r3, #14
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 020a 	orr.w	r2, r2, #10
 8005222:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0204 	orr.w	r2, r2, #4
 800523a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a83      	ldr	r2, [pc, #524]	@ (8005450 <HAL_DMA_Start_IT+0x474>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d072      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a82      	ldr	r2, [pc, #520]	@ (8005454 <HAL_DMA_Start_IT+0x478>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d06d      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a80      	ldr	r2, [pc, #512]	@ (8005458 <HAL_DMA_Start_IT+0x47c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d068      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a7f      	ldr	r2, [pc, #508]	@ (800545c <HAL_DMA_Start_IT+0x480>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d063      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a7d      	ldr	r2, [pc, #500]	@ (8005460 <HAL_DMA_Start_IT+0x484>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d05e      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a7c      	ldr	r2, [pc, #496]	@ (8005464 <HAL_DMA_Start_IT+0x488>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d059      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a7a      	ldr	r2, [pc, #488]	@ (8005468 <HAL_DMA_Start_IT+0x48c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d054      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a79      	ldr	r2, [pc, #484]	@ (800546c <HAL_DMA_Start_IT+0x490>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d04f      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a77      	ldr	r2, [pc, #476]	@ (8005470 <HAL_DMA_Start_IT+0x494>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d04a      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a76      	ldr	r2, [pc, #472]	@ (8005474 <HAL_DMA_Start_IT+0x498>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d045      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a74      	ldr	r2, [pc, #464]	@ (8005478 <HAL_DMA_Start_IT+0x49c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d040      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a73      	ldr	r2, [pc, #460]	@ (800547c <HAL_DMA_Start_IT+0x4a0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d03b      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a71      	ldr	r2, [pc, #452]	@ (8005480 <HAL_DMA_Start_IT+0x4a4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d036      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a70      	ldr	r2, [pc, #448]	@ (8005484 <HAL_DMA_Start_IT+0x4a8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d031      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005488 <HAL_DMA_Start_IT+0x4ac>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d02c      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a6d      	ldr	r2, [pc, #436]	@ (800548c <HAL_DMA_Start_IT+0x4b0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d027      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a6b      	ldr	r2, [pc, #428]	@ (8005490 <HAL_DMA_Start_IT+0x4b4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d022      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6a      	ldr	r2, [pc, #424]	@ (8005494 <HAL_DMA_Start_IT+0x4b8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d01d      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a68      	ldr	r2, [pc, #416]	@ (8005498 <HAL_DMA_Start_IT+0x4bc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d018      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a67      	ldr	r2, [pc, #412]	@ (800549c <HAL_DMA_Start_IT+0x4c0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d013      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a65      	ldr	r2, [pc, #404]	@ (80054a0 <HAL_DMA_Start_IT+0x4c4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00e      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a64      	ldr	r2, [pc, #400]	@ (80054a4 <HAL_DMA_Start_IT+0x4c8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d009      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a62      	ldr	r2, [pc, #392]	@ (80054a8 <HAL_DMA_Start_IT+0x4cc>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d004      	beq.n	800532c <HAL_DMA_Start_IT+0x350>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a61      	ldr	r2, [pc, #388]	@ (80054ac <HAL_DMA_Start_IT+0x4d0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d101      	bne.n	8005330 <HAL_DMA_Start_IT+0x354>
 800532c:	2301      	movs	r3, #1
 800532e:	e000      	b.n	8005332 <HAL_DMA_Start_IT+0x356>
 8005330:	2300      	movs	r3, #0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01a      	beq.n	800536c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800534e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005352:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005366:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800536a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a37      	ldr	r2, [pc, #220]	@ (8005450 <HAL_DMA_Start_IT+0x474>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d04a      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a36      	ldr	r2, [pc, #216]	@ (8005454 <HAL_DMA_Start_IT+0x478>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d045      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a34      	ldr	r2, [pc, #208]	@ (8005458 <HAL_DMA_Start_IT+0x47c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d040      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a33      	ldr	r2, [pc, #204]	@ (800545c <HAL_DMA_Start_IT+0x480>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d03b      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a31      	ldr	r2, [pc, #196]	@ (8005460 <HAL_DMA_Start_IT+0x484>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d036      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a30      	ldr	r2, [pc, #192]	@ (8005464 <HAL_DMA_Start_IT+0x488>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d031      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005468 <HAL_DMA_Start_IT+0x48c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d02c      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a2d      	ldr	r2, [pc, #180]	@ (800546c <HAL_DMA_Start_IT+0x490>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d027      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005470 <HAL_DMA_Start_IT+0x494>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d022      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005474 <HAL_DMA_Start_IT+0x498>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d01d      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a28      	ldr	r2, [pc, #160]	@ (8005478 <HAL_DMA_Start_IT+0x49c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d018      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a27      	ldr	r2, [pc, #156]	@ (800547c <HAL_DMA_Start_IT+0x4a0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a25      	ldr	r2, [pc, #148]	@ (8005480 <HAL_DMA_Start_IT+0x4a4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00e      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a24      	ldr	r2, [pc, #144]	@ (8005484 <HAL_DMA_Start_IT+0x4a8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d009      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a22      	ldr	r2, [pc, #136]	@ (8005488 <HAL_DMA_Start_IT+0x4ac>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_DMA_Start_IT+0x430>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a21      	ldr	r2, [pc, #132]	@ (800548c <HAL_DMA_Start_IT+0x4b0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <HAL_DMA_Start_IT+0x442>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e012      	b.n	8005444 <HAL_DMA_Start_IT+0x468>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0201 	orr.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e009      	b.n	8005444 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005436:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005444:	7dfb      	ldrb	r3, [r7, #23]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	40020010 	.word	0x40020010
 8005454:	40020028 	.word	0x40020028
 8005458:	40020040 	.word	0x40020040
 800545c:	40020058 	.word	0x40020058
 8005460:	40020070 	.word	0x40020070
 8005464:	40020088 	.word	0x40020088
 8005468:	400200a0 	.word	0x400200a0
 800546c:	400200b8 	.word	0x400200b8
 8005470:	40020410 	.word	0x40020410
 8005474:	40020428 	.word	0x40020428
 8005478:	40020440 	.word	0x40020440
 800547c:	40020458 	.word	0x40020458
 8005480:	40020470 	.word	0x40020470
 8005484:	40020488 	.word	0x40020488
 8005488:	400204a0 	.word	0x400204a0
 800548c:	400204b8 	.word	0x400204b8
 8005490:	58025408 	.word	0x58025408
 8005494:	5802541c 	.word	0x5802541c
 8005498:	58025430 	.word	0x58025430
 800549c:	58025444 	.word	0x58025444
 80054a0:	58025458 	.word	0x58025458
 80054a4:	5802546c 	.word	0x5802546c
 80054a8:	58025480 	.word	0x58025480
 80054ac:	58025494 	.word	0x58025494

080054b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80054b8:	f7fc fef2 	bl	80022a0 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e2dc      	b.n	8005a82 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d008      	beq.n	80054e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2280      	movs	r2, #128	@ 0x80
 80054d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e2cd      	b.n	8005a82 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a76      	ldr	r2, [pc, #472]	@ (80056c4 <HAL_DMA_Abort+0x214>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d04a      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a74      	ldr	r2, [pc, #464]	@ (80056c8 <HAL_DMA_Abort+0x218>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d045      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a73      	ldr	r2, [pc, #460]	@ (80056cc <HAL_DMA_Abort+0x21c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d040      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a71      	ldr	r2, [pc, #452]	@ (80056d0 <HAL_DMA_Abort+0x220>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d03b      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a70      	ldr	r2, [pc, #448]	@ (80056d4 <HAL_DMA_Abort+0x224>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d036      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a6e      	ldr	r2, [pc, #440]	@ (80056d8 <HAL_DMA_Abort+0x228>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d031      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a6d      	ldr	r2, [pc, #436]	@ (80056dc <HAL_DMA_Abort+0x22c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d02c      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6b      	ldr	r2, [pc, #428]	@ (80056e0 <HAL_DMA_Abort+0x230>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d027      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a6a      	ldr	r2, [pc, #424]	@ (80056e4 <HAL_DMA_Abort+0x234>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d022      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a68      	ldr	r2, [pc, #416]	@ (80056e8 <HAL_DMA_Abort+0x238>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01d      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a67      	ldr	r2, [pc, #412]	@ (80056ec <HAL_DMA_Abort+0x23c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d018      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a65      	ldr	r2, [pc, #404]	@ (80056f0 <HAL_DMA_Abort+0x240>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d013      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a64      	ldr	r2, [pc, #400]	@ (80056f4 <HAL_DMA_Abort+0x244>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00e      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a62      	ldr	r2, [pc, #392]	@ (80056f8 <HAL_DMA_Abort+0x248>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a61      	ldr	r2, [pc, #388]	@ (80056fc <HAL_DMA_Abort+0x24c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d004      	beq.n	8005586 <HAL_DMA_Abort+0xd6>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a5f      	ldr	r2, [pc, #380]	@ (8005700 <HAL_DMA_Abort+0x250>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d101      	bne.n	800558a <HAL_DMA_Abort+0xda>
 8005586:	2301      	movs	r3, #1
 8005588:	e000      	b.n	800558c <HAL_DMA_Abort+0xdc>
 800558a:	2300      	movs	r3, #0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d013      	beq.n	80055b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 021e 	bic.w	r2, r2, #30
 800559e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	e00a      	b.n	80055ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 020e 	bic.w	r2, r2, #14
 80055c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a3c      	ldr	r2, [pc, #240]	@ (80056c4 <HAL_DMA_Abort+0x214>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d072      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a3a      	ldr	r2, [pc, #232]	@ (80056c8 <HAL_DMA_Abort+0x218>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d06d      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a39      	ldr	r2, [pc, #228]	@ (80056cc <HAL_DMA_Abort+0x21c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d068      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a37      	ldr	r2, [pc, #220]	@ (80056d0 <HAL_DMA_Abort+0x220>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d063      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a36      	ldr	r2, [pc, #216]	@ (80056d4 <HAL_DMA_Abort+0x224>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d05e      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a34      	ldr	r2, [pc, #208]	@ (80056d8 <HAL_DMA_Abort+0x228>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d059      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a33      	ldr	r2, [pc, #204]	@ (80056dc <HAL_DMA_Abort+0x22c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d054      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a31      	ldr	r2, [pc, #196]	@ (80056e0 <HAL_DMA_Abort+0x230>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d04f      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a30      	ldr	r2, [pc, #192]	@ (80056e4 <HAL_DMA_Abort+0x234>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d04a      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2e      	ldr	r2, [pc, #184]	@ (80056e8 <HAL_DMA_Abort+0x238>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d045      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2d      	ldr	r2, [pc, #180]	@ (80056ec <HAL_DMA_Abort+0x23c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d040      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2b      	ldr	r2, [pc, #172]	@ (80056f0 <HAL_DMA_Abort+0x240>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d03b      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2a      	ldr	r2, [pc, #168]	@ (80056f4 <HAL_DMA_Abort+0x244>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d036      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a28      	ldr	r2, [pc, #160]	@ (80056f8 <HAL_DMA_Abort+0x248>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d031      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a27      	ldr	r2, [pc, #156]	@ (80056fc <HAL_DMA_Abort+0x24c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d02c      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a25      	ldr	r2, [pc, #148]	@ (8005700 <HAL_DMA_Abort+0x250>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d027      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a24      	ldr	r2, [pc, #144]	@ (8005704 <HAL_DMA_Abort+0x254>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d022      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a22      	ldr	r2, [pc, #136]	@ (8005708 <HAL_DMA_Abort+0x258>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d01d      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a21      	ldr	r2, [pc, #132]	@ (800570c <HAL_DMA_Abort+0x25c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d018      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1f      	ldr	r2, [pc, #124]	@ (8005710 <HAL_DMA_Abort+0x260>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1e      	ldr	r2, [pc, #120]	@ (8005714 <HAL_DMA_Abort+0x264>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00e      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005718 <HAL_DMA_Abort+0x268>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d009      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1b      	ldr	r2, [pc, #108]	@ (800571c <HAL_DMA_Abort+0x26c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d004      	beq.n	80056be <HAL_DMA_Abort+0x20e>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a19      	ldr	r2, [pc, #100]	@ (8005720 <HAL_DMA_Abort+0x270>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d132      	bne.n	8005724 <HAL_DMA_Abort+0x274>
 80056be:	2301      	movs	r3, #1
 80056c0:	e031      	b.n	8005726 <HAL_DMA_Abort+0x276>
 80056c2:	bf00      	nop
 80056c4:	40020010 	.word	0x40020010
 80056c8:	40020028 	.word	0x40020028
 80056cc:	40020040 	.word	0x40020040
 80056d0:	40020058 	.word	0x40020058
 80056d4:	40020070 	.word	0x40020070
 80056d8:	40020088 	.word	0x40020088
 80056dc:	400200a0 	.word	0x400200a0
 80056e0:	400200b8 	.word	0x400200b8
 80056e4:	40020410 	.word	0x40020410
 80056e8:	40020428 	.word	0x40020428
 80056ec:	40020440 	.word	0x40020440
 80056f0:	40020458 	.word	0x40020458
 80056f4:	40020470 	.word	0x40020470
 80056f8:	40020488 	.word	0x40020488
 80056fc:	400204a0 	.word	0x400204a0
 8005700:	400204b8 	.word	0x400204b8
 8005704:	58025408 	.word	0x58025408
 8005708:	5802541c 	.word	0x5802541c
 800570c:	58025430 	.word	0x58025430
 8005710:	58025444 	.word	0x58025444
 8005714:	58025458 	.word	0x58025458
 8005718:	5802546c 	.word	0x5802546c
 800571c:	58025480 	.word	0x58025480
 8005720:	58025494 	.word	0x58025494
 8005724:	2300      	movs	r3, #0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d007      	beq.n	800573a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005738:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a6d      	ldr	r2, [pc, #436]	@ (80058f4 <HAL_DMA_Abort+0x444>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d04a      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a6b      	ldr	r2, [pc, #428]	@ (80058f8 <HAL_DMA_Abort+0x448>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d045      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a6a      	ldr	r2, [pc, #424]	@ (80058fc <HAL_DMA_Abort+0x44c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d040      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a68      	ldr	r2, [pc, #416]	@ (8005900 <HAL_DMA_Abort+0x450>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d03b      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a67      	ldr	r2, [pc, #412]	@ (8005904 <HAL_DMA_Abort+0x454>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d036      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a65      	ldr	r2, [pc, #404]	@ (8005908 <HAL_DMA_Abort+0x458>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d031      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a64      	ldr	r2, [pc, #400]	@ (800590c <HAL_DMA_Abort+0x45c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d02c      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a62      	ldr	r2, [pc, #392]	@ (8005910 <HAL_DMA_Abort+0x460>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d027      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a61      	ldr	r2, [pc, #388]	@ (8005914 <HAL_DMA_Abort+0x464>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a5f      	ldr	r2, [pc, #380]	@ (8005918 <HAL_DMA_Abort+0x468>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01d      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a5e      	ldr	r2, [pc, #376]	@ (800591c <HAL_DMA_Abort+0x46c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a5c      	ldr	r2, [pc, #368]	@ (8005920 <HAL_DMA_Abort+0x470>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005924 <HAL_DMA_Abort+0x474>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a59      	ldr	r2, [pc, #356]	@ (8005928 <HAL_DMA_Abort+0x478>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a58      	ldr	r2, [pc, #352]	@ (800592c <HAL_DMA_Abort+0x47c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_DMA_Abort+0x32a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a56      	ldr	r2, [pc, #344]	@ (8005930 <HAL_DMA_Abort+0x480>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d108      	bne.n	80057ec <HAL_DMA_Abort+0x33c>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e007      	b.n	80057fc <HAL_DMA_Abort+0x34c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80057fc:	e013      	b.n	8005826 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057fe:	f7fc fd4f 	bl	80022a0 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b05      	cmp	r3, #5
 800580a:	d90c      	bls.n	8005826 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2203      	movs	r2, #3
 8005816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e12d      	b.n	8005a82 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1e5      	bne.n	80057fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a2f      	ldr	r2, [pc, #188]	@ (80058f4 <HAL_DMA_Abort+0x444>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d04a      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a2d      	ldr	r2, [pc, #180]	@ (80058f8 <HAL_DMA_Abort+0x448>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d045      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a2c      	ldr	r2, [pc, #176]	@ (80058fc <HAL_DMA_Abort+0x44c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d040      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2a      	ldr	r2, [pc, #168]	@ (8005900 <HAL_DMA_Abort+0x450>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d03b      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a29      	ldr	r2, [pc, #164]	@ (8005904 <HAL_DMA_Abort+0x454>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d036      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a27      	ldr	r2, [pc, #156]	@ (8005908 <HAL_DMA_Abort+0x458>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d031      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a26      	ldr	r2, [pc, #152]	@ (800590c <HAL_DMA_Abort+0x45c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d02c      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a24      	ldr	r2, [pc, #144]	@ (8005910 <HAL_DMA_Abort+0x460>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d027      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a23      	ldr	r2, [pc, #140]	@ (8005914 <HAL_DMA_Abort+0x464>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d022      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a21      	ldr	r2, [pc, #132]	@ (8005918 <HAL_DMA_Abort+0x468>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d01d      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a20      	ldr	r2, [pc, #128]	@ (800591c <HAL_DMA_Abort+0x46c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d018      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005920 <HAL_DMA_Abort+0x470>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005924 <HAL_DMA_Abort+0x474>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00e      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005928 <HAL_DMA_Abort+0x478>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d009      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1a      	ldr	r2, [pc, #104]	@ (800592c <HAL_DMA_Abort+0x47c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d004      	beq.n	80058d2 <HAL_DMA_Abort+0x422>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a18      	ldr	r2, [pc, #96]	@ (8005930 <HAL_DMA_Abort+0x480>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d101      	bne.n	80058d6 <HAL_DMA_Abort+0x426>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <HAL_DMA_Abort+0x428>
 80058d6:	2300      	movs	r3, #0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d02b      	beq.n	8005934 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	223f      	movs	r2, #63	@ 0x3f
 80058ec:	409a      	lsls	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	609a      	str	r2, [r3, #8]
 80058f2:	e02a      	b.n	800594a <HAL_DMA_Abort+0x49a>
 80058f4:	40020010 	.word	0x40020010
 80058f8:	40020028 	.word	0x40020028
 80058fc:	40020040 	.word	0x40020040
 8005900:	40020058 	.word	0x40020058
 8005904:	40020070 	.word	0x40020070
 8005908:	40020088 	.word	0x40020088
 800590c:	400200a0 	.word	0x400200a0
 8005910:	400200b8 	.word	0x400200b8
 8005914:	40020410 	.word	0x40020410
 8005918:	40020428 	.word	0x40020428
 800591c:	40020440 	.word	0x40020440
 8005920:	40020458 	.word	0x40020458
 8005924:	40020470 	.word	0x40020470
 8005928:	40020488 	.word	0x40020488
 800592c:	400204a0 	.word	0x400204a0
 8005930:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005938:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2201      	movs	r2, #1
 8005944:	409a      	lsls	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a4f      	ldr	r2, [pc, #316]	@ (8005a8c <HAL_DMA_Abort+0x5dc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d072      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a4d      	ldr	r2, [pc, #308]	@ (8005a90 <HAL_DMA_Abort+0x5e0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d06d      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a4c      	ldr	r2, [pc, #304]	@ (8005a94 <HAL_DMA_Abort+0x5e4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d068      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a4a      	ldr	r2, [pc, #296]	@ (8005a98 <HAL_DMA_Abort+0x5e8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d063      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a49      	ldr	r2, [pc, #292]	@ (8005a9c <HAL_DMA_Abort+0x5ec>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d05e      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a47      	ldr	r2, [pc, #284]	@ (8005aa0 <HAL_DMA_Abort+0x5f0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d059      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a46      	ldr	r2, [pc, #280]	@ (8005aa4 <HAL_DMA_Abort+0x5f4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d054      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a44      	ldr	r2, [pc, #272]	@ (8005aa8 <HAL_DMA_Abort+0x5f8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d04f      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a43      	ldr	r2, [pc, #268]	@ (8005aac <HAL_DMA_Abort+0x5fc>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d04a      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a41      	ldr	r2, [pc, #260]	@ (8005ab0 <HAL_DMA_Abort+0x600>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d045      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a40      	ldr	r2, [pc, #256]	@ (8005ab4 <HAL_DMA_Abort+0x604>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d040      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a3e      	ldr	r2, [pc, #248]	@ (8005ab8 <HAL_DMA_Abort+0x608>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d03b      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a3d      	ldr	r2, [pc, #244]	@ (8005abc <HAL_DMA_Abort+0x60c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d036      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a3b      	ldr	r2, [pc, #236]	@ (8005ac0 <HAL_DMA_Abort+0x610>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d031      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a3a      	ldr	r2, [pc, #232]	@ (8005ac4 <HAL_DMA_Abort+0x614>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d02c      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a38      	ldr	r2, [pc, #224]	@ (8005ac8 <HAL_DMA_Abort+0x618>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d027      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a37      	ldr	r2, [pc, #220]	@ (8005acc <HAL_DMA_Abort+0x61c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a35      	ldr	r2, [pc, #212]	@ (8005ad0 <HAL_DMA_Abort+0x620>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01d      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a34      	ldr	r2, [pc, #208]	@ (8005ad4 <HAL_DMA_Abort+0x624>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d018      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a32      	ldr	r2, [pc, #200]	@ (8005ad8 <HAL_DMA_Abort+0x628>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a31      	ldr	r2, [pc, #196]	@ (8005adc <HAL_DMA_Abort+0x62c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae0 <HAL_DMA_Abort+0x630>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a2e      	ldr	r2, [pc, #184]	@ (8005ae4 <HAL_DMA_Abort+0x634>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_DMA_Abort+0x58a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2c      	ldr	r2, [pc, #176]	@ (8005ae8 <HAL_DMA_Abort+0x638>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d101      	bne.n	8005a3e <HAL_DMA_Abort+0x58e>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <HAL_DMA_Abort+0x590>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d015      	beq.n	8005a70 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005a4c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a64:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a6e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40020010 	.word	0x40020010
 8005a90:	40020028 	.word	0x40020028
 8005a94:	40020040 	.word	0x40020040
 8005a98:	40020058 	.word	0x40020058
 8005a9c:	40020070 	.word	0x40020070
 8005aa0:	40020088 	.word	0x40020088
 8005aa4:	400200a0 	.word	0x400200a0
 8005aa8:	400200b8 	.word	0x400200b8
 8005aac:	40020410 	.word	0x40020410
 8005ab0:	40020428 	.word	0x40020428
 8005ab4:	40020440 	.word	0x40020440
 8005ab8:	40020458 	.word	0x40020458
 8005abc:	40020470 	.word	0x40020470
 8005ac0:	40020488 	.word	0x40020488
 8005ac4:	400204a0 	.word	0x400204a0
 8005ac8:	400204b8 	.word	0x400204b8
 8005acc:	58025408 	.word	0x58025408
 8005ad0:	5802541c 	.word	0x5802541c
 8005ad4:	58025430 	.word	0x58025430
 8005ad8:	58025444 	.word	0x58025444
 8005adc:	58025458 	.word	0x58025458
 8005ae0:	5802546c 	.word	0x5802546c
 8005ae4:	58025480 	.word	0x58025480
 8005ae8:	58025494 	.word	0x58025494

08005aec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e237      	b.n	8005f6e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d004      	beq.n	8005b14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2280      	movs	r2, #128	@ 0x80
 8005b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e22c      	b.n	8005f6e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a5c      	ldr	r2, [pc, #368]	@ (8005c8c <HAL_DMA_Abort_IT+0x1a0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d04a      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a5b      	ldr	r2, [pc, #364]	@ (8005c90 <HAL_DMA_Abort_IT+0x1a4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d045      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a59      	ldr	r2, [pc, #356]	@ (8005c94 <HAL_DMA_Abort_IT+0x1a8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d040      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a58      	ldr	r2, [pc, #352]	@ (8005c98 <HAL_DMA_Abort_IT+0x1ac>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d03b      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a56      	ldr	r2, [pc, #344]	@ (8005c9c <HAL_DMA_Abort_IT+0x1b0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d036      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a55      	ldr	r2, [pc, #340]	@ (8005ca0 <HAL_DMA_Abort_IT+0x1b4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d031      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a53      	ldr	r2, [pc, #332]	@ (8005ca4 <HAL_DMA_Abort_IT+0x1b8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d02c      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a52      	ldr	r2, [pc, #328]	@ (8005ca8 <HAL_DMA_Abort_IT+0x1bc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d027      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a50      	ldr	r2, [pc, #320]	@ (8005cac <HAL_DMA_Abort_IT+0x1c0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d022      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a4f      	ldr	r2, [pc, #316]	@ (8005cb0 <HAL_DMA_Abort_IT+0x1c4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d01d      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a4d      	ldr	r2, [pc, #308]	@ (8005cb4 <HAL_DMA_Abort_IT+0x1c8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d018      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a4c      	ldr	r2, [pc, #304]	@ (8005cb8 <HAL_DMA_Abort_IT+0x1cc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a4a      	ldr	r2, [pc, #296]	@ (8005cbc <HAL_DMA_Abort_IT+0x1d0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00e      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a49      	ldr	r2, [pc, #292]	@ (8005cc0 <HAL_DMA_Abort_IT+0x1d4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d009      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a47      	ldr	r2, [pc, #284]	@ (8005cc4 <HAL_DMA_Abort_IT+0x1d8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_DMA_Abort_IT+0xc8>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a46      	ldr	r2, [pc, #280]	@ (8005cc8 <HAL_DMA_Abort_IT+0x1dc>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_DMA_Abort_IT+0xcc>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <HAL_DMA_Abort_IT+0xce>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 8086 	beq.w	8005ccc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2204      	movs	r2, #4
 8005bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8005c8c <HAL_DMA_Abort_IT+0x1a0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d04a      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a2e      	ldr	r2, [pc, #184]	@ (8005c90 <HAL_DMA_Abort_IT+0x1a4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d045      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a2c      	ldr	r2, [pc, #176]	@ (8005c94 <HAL_DMA_Abort_IT+0x1a8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d040      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a2b      	ldr	r2, [pc, #172]	@ (8005c98 <HAL_DMA_Abort_IT+0x1ac>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d03b      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a29      	ldr	r2, [pc, #164]	@ (8005c9c <HAL_DMA_Abort_IT+0x1b0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d036      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a28      	ldr	r2, [pc, #160]	@ (8005ca0 <HAL_DMA_Abort_IT+0x1b4>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d031      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a26      	ldr	r2, [pc, #152]	@ (8005ca4 <HAL_DMA_Abort_IT+0x1b8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d02c      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a25      	ldr	r2, [pc, #148]	@ (8005ca8 <HAL_DMA_Abort_IT+0x1bc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d027      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a23      	ldr	r2, [pc, #140]	@ (8005cac <HAL_DMA_Abort_IT+0x1c0>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d022      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a22      	ldr	r2, [pc, #136]	@ (8005cb0 <HAL_DMA_Abort_IT+0x1c4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d01d      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a20      	ldr	r2, [pc, #128]	@ (8005cb4 <HAL_DMA_Abort_IT+0x1c8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d018      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005cb8 <HAL_DMA_Abort_IT+0x1cc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d013      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1d      	ldr	r2, [pc, #116]	@ (8005cbc <HAL_DMA_Abort_IT+0x1d0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00e      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc0 <HAL_DMA_Abort_IT+0x1d4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d009      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc4 <HAL_DMA_Abort_IT+0x1d8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x17c>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a19      	ldr	r2, [pc, #100]	@ (8005cc8 <HAL_DMA_Abort_IT+0x1dc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d108      	bne.n	8005c7a <HAL_DMA_Abort_IT+0x18e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	e178      	b.n	8005f6c <HAL_DMA_Abort_IT+0x480>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0201 	bic.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e16f      	b.n	8005f6c <HAL_DMA_Abort_IT+0x480>
 8005c8c:	40020010 	.word	0x40020010
 8005c90:	40020028 	.word	0x40020028
 8005c94:	40020040 	.word	0x40020040
 8005c98:	40020058 	.word	0x40020058
 8005c9c:	40020070 	.word	0x40020070
 8005ca0:	40020088 	.word	0x40020088
 8005ca4:	400200a0 	.word	0x400200a0
 8005ca8:	400200b8 	.word	0x400200b8
 8005cac:	40020410 	.word	0x40020410
 8005cb0:	40020428 	.word	0x40020428
 8005cb4:	40020440 	.word	0x40020440
 8005cb8:	40020458 	.word	0x40020458
 8005cbc:	40020470 	.word	0x40020470
 8005cc0:	40020488 	.word	0x40020488
 8005cc4:	400204a0 	.word	0x400204a0
 8005cc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 020e 	bic.w	r2, r2, #14
 8005cda:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a6c      	ldr	r2, [pc, #432]	@ (8005e94 <HAL_DMA_Abort_IT+0x3a8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d04a      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a6b      	ldr	r2, [pc, #428]	@ (8005e98 <HAL_DMA_Abort_IT+0x3ac>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d045      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a69      	ldr	r2, [pc, #420]	@ (8005e9c <HAL_DMA_Abort_IT+0x3b0>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d040      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a68      	ldr	r2, [pc, #416]	@ (8005ea0 <HAL_DMA_Abort_IT+0x3b4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d03b      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a66      	ldr	r2, [pc, #408]	@ (8005ea4 <HAL_DMA_Abort_IT+0x3b8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d036      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a65      	ldr	r2, [pc, #404]	@ (8005ea8 <HAL_DMA_Abort_IT+0x3bc>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d031      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a63      	ldr	r2, [pc, #396]	@ (8005eac <HAL_DMA_Abort_IT+0x3c0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d02c      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a62      	ldr	r2, [pc, #392]	@ (8005eb0 <HAL_DMA_Abort_IT+0x3c4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d027      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a60      	ldr	r2, [pc, #384]	@ (8005eb4 <HAL_DMA_Abort_IT+0x3c8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d022      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a5f      	ldr	r2, [pc, #380]	@ (8005eb8 <HAL_DMA_Abort_IT+0x3cc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d01d      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a5d      	ldr	r2, [pc, #372]	@ (8005ebc <HAL_DMA_Abort_IT+0x3d0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d018      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a5c      	ldr	r2, [pc, #368]	@ (8005ec0 <HAL_DMA_Abort_IT+0x3d4>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d013      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a5a      	ldr	r2, [pc, #360]	@ (8005ec4 <HAL_DMA_Abort_IT+0x3d8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00e      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a59      	ldr	r2, [pc, #356]	@ (8005ec8 <HAL_DMA_Abort_IT+0x3dc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d009      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a57      	ldr	r2, [pc, #348]	@ (8005ecc <HAL_DMA_Abort_IT+0x3e0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d004      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x290>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a56      	ldr	r2, [pc, #344]	@ (8005ed0 <HAL_DMA_Abort_IT+0x3e4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d108      	bne.n	8005d8e <HAL_DMA_Abort_IT+0x2a2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0201 	bic.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	e007      	b.n	8005d9e <HAL_DMA_Abort_IT+0x2b2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0201 	bic.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a3c      	ldr	r2, [pc, #240]	@ (8005e94 <HAL_DMA_Abort_IT+0x3a8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d072      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a3a      	ldr	r2, [pc, #232]	@ (8005e98 <HAL_DMA_Abort_IT+0x3ac>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d06d      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a39      	ldr	r2, [pc, #228]	@ (8005e9c <HAL_DMA_Abort_IT+0x3b0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d068      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a37      	ldr	r2, [pc, #220]	@ (8005ea0 <HAL_DMA_Abort_IT+0x3b4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d063      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a36      	ldr	r2, [pc, #216]	@ (8005ea4 <HAL_DMA_Abort_IT+0x3b8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d05e      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a34      	ldr	r2, [pc, #208]	@ (8005ea8 <HAL_DMA_Abort_IT+0x3bc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d059      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a33      	ldr	r2, [pc, #204]	@ (8005eac <HAL_DMA_Abort_IT+0x3c0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d054      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a31      	ldr	r2, [pc, #196]	@ (8005eb0 <HAL_DMA_Abort_IT+0x3c4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d04f      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a30      	ldr	r2, [pc, #192]	@ (8005eb4 <HAL_DMA_Abort_IT+0x3c8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d04a      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a2e      	ldr	r2, [pc, #184]	@ (8005eb8 <HAL_DMA_Abort_IT+0x3cc>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d045      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a2d      	ldr	r2, [pc, #180]	@ (8005ebc <HAL_DMA_Abort_IT+0x3d0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d040      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2b      	ldr	r2, [pc, #172]	@ (8005ec0 <HAL_DMA_Abort_IT+0x3d4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d03b      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ec4 <HAL_DMA_Abort_IT+0x3d8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d036      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a28      	ldr	r2, [pc, #160]	@ (8005ec8 <HAL_DMA_Abort_IT+0x3dc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d031      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a27      	ldr	r2, [pc, #156]	@ (8005ecc <HAL_DMA_Abort_IT+0x3e0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d02c      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a25      	ldr	r2, [pc, #148]	@ (8005ed0 <HAL_DMA_Abort_IT+0x3e4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d027      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a24      	ldr	r2, [pc, #144]	@ (8005ed4 <HAL_DMA_Abort_IT+0x3e8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d022      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a22      	ldr	r2, [pc, #136]	@ (8005ed8 <HAL_DMA_Abort_IT+0x3ec>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d01d      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a21      	ldr	r2, [pc, #132]	@ (8005edc <HAL_DMA_Abort_IT+0x3f0>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d018      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee0 <HAL_DMA_Abort_IT+0x3f4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ee4 <HAL_DMA_Abort_IT+0x3f8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1c      	ldr	r2, [pc, #112]	@ (8005ee8 <HAL_DMA_Abort_IT+0x3fc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005eec <HAL_DMA_Abort_IT+0x400>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_DMA_Abort_IT+0x3a2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a19      	ldr	r2, [pc, #100]	@ (8005ef0 <HAL_DMA_Abort_IT+0x404>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d132      	bne.n	8005ef4 <HAL_DMA_Abort_IT+0x408>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e031      	b.n	8005ef6 <HAL_DMA_Abort_IT+0x40a>
 8005e92:	bf00      	nop
 8005e94:	40020010 	.word	0x40020010
 8005e98:	40020028 	.word	0x40020028
 8005e9c:	40020040 	.word	0x40020040
 8005ea0:	40020058 	.word	0x40020058
 8005ea4:	40020070 	.word	0x40020070
 8005ea8:	40020088 	.word	0x40020088
 8005eac:	400200a0 	.word	0x400200a0
 8005eb0:	400200b8 	.word	0x400200b8
 8005eb4:	40020410 	.word	0x40020410
 8005eb8:	40020428 	.word	0x40020428
 8005ebc:	40020440 	.word	0x40020440
 8005ec0:	40020458 	.word	0x40020458
 8005ec4:	40020470 	.word	0x40020470
 8005ec8:	40020488 	.word	0x40020488
 8005ecc:	400204a0 	.word	0x400204a0
 8005ed0:	400204b8 	.word	0x400204b8
 8005ed4:	58025408 	.word	0x58025408
 8005ed8:	5802541c 	.word	0x5802541c
 8005edc:	58025430 	.word	0x58025430
 8005ee0:	58025444 	.word	0x58025444
 8005ee4:	58025458 	.word	0x58025458
 8005ee8:	5802546c 	.word	0x5802546c
 8005eec:	58025480 	.word	0x58025480
 8005ef0:	58025494 	.word	0x58025494
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d028      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f08:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2201      	movs	r2, #1
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005f28:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00c      	beq.n	8005f4c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f40:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f4a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop

08005f78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	@ 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f84:	4b67      	ldr	r3, [pc, #412]	@ (8006124 <HAL_DMA_IRQHandler+0x1ac>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a67      	ldr	r2, [pc, #412]	@ (8006128 <HAL_DMA_IRQHandler+0x1b0>)
 8005f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8e:	0a9b      	lsrs	r3, r3, #10
 8005f90:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f96:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a5f      	ldr	r2, [pc, #380]	@ (800612c <HAL_DMA_IRQHandler+0x1b4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d04a      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8006130 <HAL_DMA_IRQHandler+0x1b8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d045      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a5c      	ldr	r2, [pc, #368]	@ (8006134 <HAL_DMA_IRQHandler+0x1bc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d040      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a5a      	ldr	r2, [pc, #360]	@ (8006138 <HAL_DMA_IRQHandler+0x1c0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d03b      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a59      	ldr	r2, [pc, #356]	@ (800613c <HAL_DMA_IRQHandler+0x1c4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d036      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a57      	ldr	r2, [pc, #348]	@ (8006140 <HAL_DMA_IRQHandler+0x1c8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d031      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a56      	ldr	r2, [pc, #344]	@ (8006144 <HAL_DMA_IRQHandler+0x1cc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d02c      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a54      	ldr	r2, [pc, #336]	@ (8006148 <HAL_DMA_IRQHandler+0x1d0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d027      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a53      	ldr	r2, [pc, #332]	@ (800614c <HAL_DMA_IRQHandler+0x1d4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d022      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a51      	ldr	r2, [pc, #324]	@ (8006150 <HAL_DMA_IRQHandler+0x1d8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01d      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a50      	ldr	r2, [pc, #320]	@ (8006154 <HAL_DMA_IRQHandler+0x1dc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d018      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a4e      	ldr	r2, [pc, #312]	@ (8006158 <HAL_DMA_IRQHandler+0x1e0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a4d      	ldr	r2, [pc, #308]	@ (800615c <HAL_DMA_IRQHandler+0x1e4>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00e      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a4b      	ldr	r2, [pc, #300]	@ (8006160 <HAL_DMA_IRQHandler+0x1e8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d009      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a4a      	ldr	r2, [pc, #296]	@ (8006164 <HAL_DMA_IRQHandler+0x1ec>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_DMA_IRQHandler+0xd2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a48      	ldr	r2, [pc, #288]	@ (8006168 <HAL_DMA_IRQHandler+0x1f0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d101      	bne.n	800604e <HAL_DMA_IRQHandler+0xd6>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <HAL_DMA_IRQHandler+0xd8>
 800604e:	2300      	movs	r3, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 842b 	beq.w	80068ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	2208      	movs	r2, #8
 8006060:	409a      	lsls	r2, r3
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	4013      	ands	r3, r2
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 80a2 	beq.w	80061b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a2e      	ldr	r2, [pc, #184]	@ (800612c <HAL_DMA_IRQHandler+0x1b4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d04a      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a2d      	ldr	r2, [pc, #180]	@ (8006130 <HAL_DMA_IRQHandler+0x1b8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d045      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2b      	ldr	r2, [pc, #172]	@ (8006134 <HAL_DMA_IRQHandler+0x1bc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d040      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2a      	ldr	r2, [pc, #168]	@ (8006138 <HAL_DMA_IRQHandler+0x1c0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d03b      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a28      	ldr	r2, [pc, #160]	@ (800613c <HAL_DMA_IRQHandler+0x1c4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d036      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a27      	ldr	r2, [pc, #156]	@ (8006140 <HAL_DMA_IRQHandler+0x1c8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d031      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a25      	ldr	r2, [pc, #148]	@ (8006144 <HAL_DMA_IRQHandler+0x1cc>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d02c      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a24      	ldr	r2, [pc, #144]	@ (8006148 <HAL_DMA_IRQHandler+0x1d0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d027      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a22      	ldr	r2, [pc, #136]	@ (800614c <HAL_DMA_IRQHandler+0x1d4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d022      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a21      	ldr	r2, [pc, #132]	@ (8006150 <HAL_DMA_IRQHandler+0x1d8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d01d      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006154 <HAL_DMA_IRQHandler+0x1dc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d018      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a1e      	ldr	r2, [pc, #120]	@ (8006158 <HAL_DMA_IRQHandler+0x1e0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d013      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a1c      	ldr	r2, [pc, #112]	@ (800615c <HAL_DMA_IRQHandler+0x1e4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00e      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006160 <HAL_DMA_IRQHandler+0x1e8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d009      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a19      	ldr	r2, [pc, #100]	@ (8006164 <HAL_DMA_IRQHandler+0x1ec>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d004      	beq.n	800610c <HAL_DMA_IRQHandler+0x194>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a18      	ldr	r2, [pc, #96]	@ (8006168 <HAL_DMA_IRQHandler+0x1f0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d12f      	bne.n	800616c <HAL_DMA_IRQHandler+0x1f4>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b00      	cmp	r3, #0
 8006118:	bf14      	ite	ne
 800611a:	2301      	movne	r3, #1
 800611c:	2300      	moveq	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	e02e      	b.n	8006180 <HAL_DMA_IRQHandler+0x208>
 8006122:	bf00      	nop
 8006124:	24000000 	.word	0x24000000
 8006128:	1b4e81b5 	.word	0x1b4e81b5
 800612c:	40020010 	.word	0x40020010
 8006130:	40020028 	.word	0x40020028
 8006134:	40020040 	.word	0x40020040
 8006138:	40020058 	.word	0x40020058
 800613c:	40020070 	.word	0x40020070
 8006140:	40020088 	.word	0x40020088
 8006144:	400200a0 	.word	0x400200a0
 8006148:	400200b8 	.word	0x400200b8
 800614c:	40020410 	.word	0x40020410
 8006150:	40020428 	.word	0x40020428
 8006154:	40020440 	.word	0x40020440
 8006158:	40020458 	.word	0x40020458
 800615c:	40020470 	.word	0x40020470
 8006160:	40020488 	.word	0x40020488
 8006164:	400204a0 	.word	0x400204a0
 8006168:	400204b8 	.word	0x400204b8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	bf14      	ite	ne
 800617a:	2301      	movne	r3, #1
 800617c:	2300      	moveq	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d015      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0204 	bic.w	r2, r2, #4
 8006192:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	2208      	movs	r2, #8
 800619e:	409a      	lsls	r2, r3
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a8:	f043 0201 	orr.w	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	fa22 f303 	lsr.w	r3, r2, r3
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d06e      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a69      	ldr	r2, [pc, #420]	@ (8006370 <HAL_DMA_IRQHandler+0x3f8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d04a      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a67      	ldr	r2, [pc, #412]	@ (8006374 <HAL_DMA_IRQHandler+0x3fc>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d045      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a66      	ldr	r2, [pc, #408]	@ (8006378 <HAL_DMA_IRQHandler+0x400>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d040      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a64      	ldr	r2, [pc, #400]	@ (800637c <HAL_DMA_IRQHandler+0x404>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d03b      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a63      	ldr	r2, [pc, #396]	@ (8006380 <HAL_DMA_IRQHandler+0x408>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d036      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a61      	ldr	r2, [pc, #388]	@ (8006384 <HAL_DMA_IRQHandler+0x40c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d031      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a60      	ldr	r2, [pc, #384]	@ (8006388 <HAL_DMA_IRQHandler+0x410>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d02c      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a5e      	ldr	r2, [pc, #376]	@ (800638c <HAL_DMA_IRQHandler+0x414>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d027      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a5d      	ldr	r2, [pc, #372]	@ (8006390 <HAL_DMA_IRQHandler+0x418>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d022      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a5b      	ldr	r2, [pc, #364]	@ (8006394 <HAL_DMA_IRQHandler+0x41c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01d      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a5a      	ldr	r2, [pc, #360]	@ (8006398 <HAL_DMA_IRQHandler+0x420>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d018      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a58      	ldr	r2, [pc, #352]	@ (800639c <HAL_DMA_IRQHandler+0x424>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d013      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a57      	ldr	r2, [pc, #348]	@ (80063a0 <HAL_DMA_IRQHandler+0x428>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00e      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a55      	ldr	r2, [pc, #340]	@ (80063a4 <HAL_DMA_IRQHandler+0x42c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d009      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a54      	ldr	r2, [pc, #336]	@ (80063a8 <HAL_DMA_IRQHandler+0x430>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d004      	beq.n	8006266 <HAL_DMA_IRQHandler+0x2ee>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a52      	ldr	r2, [pc, #328]	@ (80063ac <HAL_DMA_IRQHandler+0x434>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d10a      	bne.n	800627c <HAL_DMA_IRQHandler+0x304>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006270:	2b00      	cmp	r3, #0
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	e003      	b.n	8006284 <HAL_DMA_IRQHandler+0x30c>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2300      	movs	r3, #0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00d      	beq.n	80062a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	2201      	movs	r2, #1
 8006292:	409a      	lsls	r2, r3
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629c:	f043 0202 	orr.w	r2, r3, #2
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	2204      	movs	r2, #4
 80062ae:	409a      	lsls	r2, r3
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 808f 	beq.w	80063d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2c      	ldr	r2, [pc, #176]	@ (8006370 <HAL_DMA_IRQHandler+0x3f8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d04a      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006374 <HAL_DMA_IRQHandler+0x3fc>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d045      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a29      	ldr	r2, [pc, #164]	@ (8006378 <HAL_DMA_IRQHandler+0x400>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d040      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a27      	ldr	r2, [pc, #156]	@ (800637c <HAL_DMA_IRQHandler+0x404>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d03b      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a26      	ldr	r2, [pc, #152]	@ (8006380 <HAL_DMA_IRQHandler+0x408>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d036      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a24      	ldr	r2, [pc, #144]	@ (8006384 <HAL_DMA_IRQHandler+0x40c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d031      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a23      	ldr	r2, [pc, #140]	@ (8006388 <HAL_DMA_IRQHandler+0x410>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d02c      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a21      	ldr	r2, [pc, #132]	@ (800638c <HAL_DMA_IRQHandler+0x414>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d027      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a20      	ldr	r2, [pc, #128]	@ (8006390 <HAL_DMA_IRQHandler+0x418>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d022      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1e      	ldr	r2, [pc, #120]	@ (8006394 <HAL_DMA_IRQHandler+0x41c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01d      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1d      	ldr	r2, [pc, #116]	@ (8006398 <HAL_DMA_IRQHandler+0x420>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d018      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1b      	ldr	r2, [pc, #108]	@ (800639c <HAL_DMA_IRQHandler+0x424>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1a      	ldr	r2, [pc, #104]	@ (80063a0 <HAL_DMA_IRQHandler+0x428>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a18      	ldr	r2, [pc, #96]	@ (80063a4 <HAL_DMA_IRQHandler+0x42c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d009      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a17      	ldr	r2, [pc, #92]	@ (80063a8 <HAL_DMA_IRQHandler+0x430>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <HAL_DMA_IRQHandler+0x3e2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a15      	ldr	r2, [pc, #84]	@ (80063ac <HAL_DMA_IRQHandler+0x434>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d12a      	bne.n	80063b0 <HAL_DMA_IRQHandler+0x438>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	bf14      	ite	ne
 8006368:	2301      	movne	r3, #1
 800636a:	2300      	moveq	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	e023      	b.n	80063b8 <HAL_DMA_IRQHandler+0x440>
 8006370:	40020010 	.word	0x40020010
 8006374:	40020028 	.word	0x40020028
 8006378:	40020040 	.word	0x40020040
 800637c:	40020058 	.word	0x40020058
 8006380:	40020070 	.word	0x40020070
 8006384:	40020088 	.word	0x40020088
 8006388:	400200a0 	.word	0x400200a0
 800638c:	400200b8 	.word	0x400200b8
 8006390:	40020410 	.word	0x40020410
 8006394:	40020428 	.word	0x40020428
 8006398:	40020440 	.word	0x40020440
 800639c:	40020458 	.word	0x40020458
 80063a0:	40020470 	.word	0x40020470
 80063a4:	40020488 	.word	0x40020488
 80063a8:	400204a0 	.word	0x400204a0
 80063ac:	400204b8 	.word	0x400204b8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00d      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2204      	movs	r2, #4
 80063c6:	409a      	lsls	r2, r3
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d0:	f043 0204 	orr.w	r2, r3, #4
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2210      	movs	r2, #16
 80063e2:	409a      	lsls	r2, r3
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80a6 	beq.w	800653a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a85      	ldr	r2, [pc, #532]	@ (8006608 <HAL_DMA_IRQHandler+0x690>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d04a      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a83      	ldr	r2, [pc, #524]	@ (800660c <HAL_DMA_IRQHandler+0x694>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d045      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a82      	ldr	r2, [pc, #520]	@ (8006610 <HAL_DMA_IRQHandler+0x698>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d040      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a80      	ldr	r2, [pc, #512]	@ (8006614 <HAL_DMA_IRQHandler+0x69c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d03b      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a7f      	ldr	r2, [pc, #508]	@ (8006618 <HAL_DMA_IRQHandler+0x6a0>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d036      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a7d      	ldr	r2, [pc, #500]	@ (800661c <HAL_DMA_IRQHandler+0x6a4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d031      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a7c      	ldr	r2, [pc, #496]	@ (8006620 <HAL_DMA_IRQHandler+0x6a8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d02c      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a7a      	ldr	r2, [pc, #488]	@ (8006624 <HAL_DMA_IRQHandler+0x6ac>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d027      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a79      	ldr	r2, [pc, #484]	@ (8006628 <HAL_DMA_IRQHandler+0x6b0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d022      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a77      	ldr	r2, [pc, #476]	@ (800662c <HAL_DMA_IRQHandler+0x6b4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01d      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a76      	ldr	r2, [pc, #472]	@ (8006630 <HAL_DMA_IRQHandler+0x6b8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d018      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a74      	ldr	r2, [pc, #464]	@ (8006634 <HAL_DMA_IRQHandler+0x6bc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a73      	ldr	r2, [pc, #460]	@ (8006638 <HAL_DMA_IRQHandler+0x6c0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00e      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a71      	ldr	r2, [pc, #452]	@ (800663c <HAL_DMA_IRQHandler+0x6c4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d009      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a70      	ldr	r2, [pc, #448]	@ (8006640 <HAL_DMA_IRQHandler+0x6c8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <HAL_DMA_IRQHandler+0x516>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a6e      	ldr	r2, [pc, #440]	@ (8006644 <HAL_DMA_IRQHandler+0x6cc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d10a      	bne.n	80064a4 <HAL_DMA_IRQHandler+0x52c>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b00      	cmp	r3, #0
 800649a:	bf14      	ite	ne
 800649c:	2301      	movne	r3, #1
 800649e:	2300      	moveq	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	e009      	b.n	80064b8 <HAL_DMA_IRQHandler+0x540>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bf14      	ite	ne
 80064b2:	2301      	movne	r3, #1
 80064b4:	2300      	moveq	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d03e      	beq.n	800653a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	2210      	movs	r2, #16
 80064c6:	409a      	lsls	r2, r3
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d018      	beq.n	800650c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d108      	bne.n	80064fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d024      	beq.n	800653a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	4798      	blx	r3
 80064f8:	e01f      	b.n	800653a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01b      	beq.n	800653a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	4798      	blx	r3
 800650a:	e016      	b.n	800653a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006516:	2b00      	cmp	r3, #0
 8006518:	d107      	bne.n	800652a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0208 	bic.w	r2, r2, #8
 8006528:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	2220      	movs	r2, #32
 8006544:	409a      	lsls	r2, r3
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 8110 	beq.w	8006770 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a2c      	ldr	r2, [pc, #176]	@ (8006608 <HAL_DMA_IRQHandler+0x690>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d04a      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2b      	ldr	r2, [pc, #172]	@ (800660c <HAL_DMA_IRQHandler+0x694>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d045      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a29      	ldr	r2, [pc, #164]	@ (8006610 <HAL_DMA_IRQHandler+0x698>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d040      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a28      	ldr	r2, [pc, #160]	@ (8006614 <HAL_DMA_IRQHandler+0x69c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d03b      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a26      	ldr	r2, [pc, #152]	@ (8006618 <HAL_DMA_IRQHandler+0x6a0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d036      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a25      	ldr	r2, [pc, #148]	@ (800661c <HAL_DMA_IRQHandler+0x6a4>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d031      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a23      	ldr	r2, [pc, #140]	@ (8006620 <HAL_DMA_IRQHandler+0x6a8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d02c      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a22      	ldr	r2, [pc, #136]	@ (8006624 <HAL_DMA_IRQHandler+0x6ac>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d027      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a20      	ldr	r2, [pc, #128]	@ (8006628 <HAL_DMA_IRQHandler+0x6b0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d022      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1f      	ldr	r2, [pc, #124]	@ (800662c <HAL_DMA_IRQHandler+0x6b4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d01d      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006630 <HAL_DMA_IRQHandler+0x6b8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d018      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006634 <HAL_DMA_IRQHandler+0x6bc>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006638 <HAL_DMA_IRQHandler+0x6c0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00e      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a19      	ldr	r2, [pc, #100]	@ (800663c <HAL_DMA_IRQHandler+0x6c4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d009      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a17      	ldr	r2, [pc, #92]	@ (8006640 <HAL_DMA_IRQHandler+0x6c8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <HAL_DMA_IRQHandler+0x678>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a16      	ldr	r2, [pc, #88]	@ (8006644 <HAL_DMA_IRQHandler+0x6cc>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d12b      	bne.n	8006648 <HAL_DMA_IRQHandler+0x6d0>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0310 	and.w	r3, r3, #16
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bf14      	ite	ne
 80065fe:	2301      	movne	r3, #1
 8006600:	2300      	moveq	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	e02a      	b.n	800665c <HAL_DMA_IRQHandler+0x6e4>
 8006606:	bf00      	nop
 8006608:	40020010 	.word	0x40020010
 800660c:	40020028 	.word	0x40020028
 8006610:	40020040 	.word	0x40020040
 8006614:	40020058 	.word	0x40020058
 8006618:	40020070 	.word	0x40020070
 800661c:	40020088 	.word	0x40020088
 8006620:	400200a0 	.word	0x400200a0
 8006624:	400200b8 	.word	0x400200b8
 8006628:	40020410 	.word	0x40020410
 800662c:	40020428 	.word	0x40020428
 8006630:	40020440 	.word	0x40020440
 8006634:	40020458 	.word	0x40020458
 8006638:	40020470 	.word	0x40020470
 800663c:	40020488 	.word	0x40020488
 8006640:	400204a0 	.word	0x400204a0
 8006644:	400204b8 	.word	0x400204b8
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	bf14      	ite	ne
 8006656:	2301      	movne	r3, #1
 8006658:	2300      	moveq	r3, #0
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8087 	beq.w	8006770 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	2220      	movs	r2, #32
 800666c:	409a      	lsls	r2, r3
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b04      	cmp	r3, #4
 800667c:	d139      	bne.n	80066f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0216 	bic.w	r2, r2, #22
 800668c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800669c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d103      	bne.n	80066ae <HAL_DMA_IRQHandler+0x736>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0208 	bic.w	r2, r2, #8
 80066bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c2:	f003 031f 	and.w	r3, r3, #31
 80066c6:	223f      	movs	r2, #63	@ 0x3f
 80066c8:	409a      	lsls	r2, r3
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 834a 	beq.w	8006d7c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	4798      	blx	r3
          }
          return;
 80066f0:	e344      	b.n	8006d7c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d018      	beq.n	8006732 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d108      	bne.n	8006720 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006712:	2b00      	cmp	r3, #0
 8006714:	d02c      	beq.n	8006770 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4798      	blx	r3
 800671e:	e027      	b.n	8006770 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d023      	beq.n	8006770 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	4798      	blx	r3
 8006730:	e01e      	b.n	8006770 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10f      	bne.n	8006760 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0210 	bic.w	r2, r2, #16
 800674e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8306 	beq.w	8006d86 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 8088 	beq.w	8006898 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2204      	movs	r2, #4
 800678c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a7a      	ldr	r2, [pc, #488]	@ (8006980 <HAL_DMA_IRQHandler+0xa08>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d04a      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a79      	ldr	r2, [pc, #484]	@ (8006984 <HAL_DMA_IRQHandler+0xa0c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d045      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a77      	ldr	r2, [pc, #476]	@ (8006988 <HAL_DMA_IRQHandler+0xa10>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d040      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a76      	ldr	r2, [pc, #472]	@ (800698c <HAL_DMA_IRQHandler+0xa14>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d03b      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a74      	ldr	r2, [pc, #464]	@ (8006990 <HAL_DMA_IRQHandler+0xa18>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d036      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a73      	ldr	r2, [pc, #460]	@ (8006994 <HAL_DMA_IRQHandler+0xa1c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d031      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a71      	ldr	r2, [pc, #452]	@ (8006998 <HAL_DMA_IRQHandler+0xa20>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d02c      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a70      	ldr	r2, [pc, #448]	@ (800699c <HAL_DMA_IRQHandler+0xa24>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d027      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a6e      	ldr	r2, [pc, #440]	@ (80069a0 <HAL_DMA_IRQHandler+0xa28>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d022      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a6d      	ldr	r2, [pc, #436]	@ (80069a4 <HAL_DMA_IRQHandler+0xa2c>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d01d      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a6b      	ldr	r2, [pc, #428]	@ (80069a8 <HAL_DMA_IRQHandler+0xa30>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d018      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a6a      	ldr	r2, [pc, #424]	@ (80069ac <HAL_DMA_IRQHandler+0xa34>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d013      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a68      	ldr	r2, [pc, #416]	@ (80069b0 <HAL_DMA_IRQHandler+0xa38>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00e      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a67      	ldr	r2, [pc, #412]	@ (80069b4 <HAL_DMA_IRQHandler+0xa3c>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d009      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a65      	ldr	r2, [pc, #404]	@ (80069b8 <HAL_DMA_IRQHandler+0xa40>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d004      	beq.n	8006830 <HAL_DMA_IRQHandler+0x8b8>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a64      	ldr	r2, [pc, #400]	@ (80069bc <HAL_DMA_IRQHandler+0xa44>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d108      	bne.n	8006842 <HAL_DMA_IRQHandler+0x8ca>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0201 	bic.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	e007      	b.n	8006852 <HAL_DMA_IRQHandler+0x8da>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0201 	bic.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3301      	adds	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800685a:	429a      	cmp	r2, r3
 800685c:	d307      	bcc.n	800686e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f2      	bne.n	8006852 <HAL_DMA_IRQHandler+0x8da>
 800686c:	e000      	b.n	8006870 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800686e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2203      	movs	r2, #3
 8006882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006886:	e003      	b.n	8006890 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8272 	beq.w	8006d86 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
 80068aa:	e26c      	b.n	8006d86 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a43      	ldr	r2, [pc, #268]	@ (80069c0 <HAL_DMA_IRQHandler+0xa48>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d022      	beq.n	80068fc <HAL_DMA_IRQHandler+0x984>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a42      	ldr	r2, [pc, #264]	@ (80069c4 <HAL_DMA_IRQHandler+0xa4c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d01d      	beq.n	80068fc <HAL_DMA_IRQHandler+0x984>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a40      	ldr	r2, [pc, #256]	@ (80069c8 <HAL_DMA_IRQHandler+0xa50>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d018      	beq.n	80068fc <HAL_DMA_IRQHandler+0x984>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a3f      	ldr	r2, [pc, #252]	@ (80069cc <HAL_DMA_IRQHandler+0xa54>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d013      	beq.n	80068fc <HAL_DMA_IRQHandler+0x984>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a3d      	ldr	r2, [pc, #244]	@ (80069d0 <HAL_DMA_IRQHandler+0xa58>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00e      	beq.n	80068fc <HAL_DMA_IRQHandler+0x984>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a3c      	ldr	r2, [pc, #240]	@ (80069d4 <HAL_DMA_IRQHandler+0xa5c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d009      	beq.n	80068fc <HAL_DMA_IRQHandler+0x984>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a3a      	ldr	r2, [pc, #232]	@ (80069d8 <HAL_DMA_IRQHandler+0xa60>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d004      	beq.n	80068fc <HAL_DMA_IRQHandler+0x984>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a39      	ldr	r2, [pc, #228]	@ (80069dc <HAL_DMA_IRQHandler+0xa64>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d101      	bne.n	8006900 <HAL_DMA_IRQHandler+0x988>
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <HAL_DMA_IRQHandler+0x98a>
 8006900:	2300      	movs	r3, #0
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 823f 	beq.w	8006d86 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	2204      	movs	r2, #4
 800691a:	409a      	lsls	r2, r3
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	4013      	ands	r3, r2
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80cd 	beq.w	8006ac0 <HAL_DMA_IRQHandler+0xb48>
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80c7 	beq.w	8006ac0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2204      	movs	r2, #4
 800693c:	409a      	lsls	r2, r3
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d049      	beq.n	80069e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d109      	bne.n	800696a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 8210 	beq.w	8006d80 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006968:	e20a      	b.n	8006d80 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8206 	beq.w	8006d80 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800697c:	e200      	b.n	8006d80 <HAL_DMA_IRQHandler+0xe08>
 800697e:	bf00      	nop
 8006980:	40020010 	.word	0x40020010
 8006984:	40020028 	.word	0x40020028
 8006988:	40020040 	.word	0x40020040
 800698c:	40020058 	.word	0x40020058
 8006990:	40020070 	.word	0x40020070
 8006994:	40020088 	.word	0x40020088
 8006998:	400200a0 	.word	0x400200a0
 800699c:	400200b8 	.word	0x400200b8
 80069a0:	40020410 	.word	0x40020410
 80069a4:	40020428 	.word	0x40020428
 80069a8:	40020440 	.word	0x40020440
 80069ac:	40020458 	.word	0x40020458
 80069b0:	40020470 	.word	0x40020470
 80069b4:	40020488 	.word	0x40020488
 80069b8:	400204a0 	.word	0x400204a0
 80069bc:	400204b8 	.word	0x400204b8
 80069c0:	58025408 	.word	0x58025408
 80069c4:	5802541c 	.word	0x5802541c
 80069c8:	58025430 	.word	0x58025430
 80069cc:	58025444 	.word	0x58025444
 80069d0:	58025458 	.word	0x58025458
 80069d4:	5802546c 	.word	0x5802546c
 80069d8:	58025480 	.word	0x58025480
 80069dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d160      	bne.n	8006aac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a7f      	ldr	r2, [pc, #508]	@ (8006bec <HAL_DMA_IRQHandler+0xc74>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d04a      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a7d      	ldr	r2, [pc, #500]	@ (8006bf0 <HAL_DMA_IRQHandler+0xc78>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d045      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a7c      	ldr	r2, [pc, #496]	@ (8006bf4 <HAL_DMA_IRQHandler+0xc7c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d040      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a7a      	ldr	r2, [pc, #488]	@ (8006bf8 <HAL_DMA_IRQHandler+0xc80>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d03b      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a79      	ldr	r2, [pc, #484]	@ (8006bfc <HAL_DMA_IRQHandler+0xc84>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d036      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a77      	ldr	r2, [pc, #476]	@ (8006c00 <HAL_DMA_IRQHandler+0xc88>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d031      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a76      	ldr	r2, [pc, #472]	@ (8006c04 <HAL_DMA_IRQHandler+0xc8c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d02c      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a74      	ldr	r2, [pc, #464]	@ (8006c08 <HAL_DMA_IRQHandler+0xc90>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d027      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a73      	ldr	r2, [pc, #460]	@ (8006c0c <HAL_DMA_IRQHandler+0xc94>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d022      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a71      	ldr	r2, [pc, #452]	@ (8006c10 <HAL_DMA_IRQHandler+0xc98>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d01d      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a70      	ldr	r2, [pc, #448]	@ (8006c14 <HAL_DMA_IRQHandler+0xc9c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d018      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a6e      	ldr	r2, [pc, #440]	@ (8006c18 <HAL_DMA_IRQHandler+0xca0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a6d      	ldr	r2, [pc, #436]	@ (8006c1c <HAL_DMA_IRQHandler+0xca4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00e      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a6b      	ldr	r2, [pc, #428]	@ (8006c20 <HAL_DMA_IRQHandler+0xca8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d009      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a6a      	ldr	r2, [pc, #424]	@ (8006c24 <HAL_DMA_IRQHandler+0xcac>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d004      	beq.n	8006a8a <HAL_DMA_IRQHandler+0xb12>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a68      	ldr	r2, [pc, #416]	@ (8006c28 <HAL_DMA_IRQHandler+0xcb0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d108      	bne.n	8006a9c <HAL_DMA_IRQHandler+0xb24>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0208 	bic.w	r2, r2, #8
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e007      	b.n	8006aac <HAL_DMA_IRQHandler+0xb34>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 0204 	bic.w	r2, r2, #4
 8006aaa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8165 	beq.w	8006d80 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006abe:	e15f      	b.n	8006d80 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	2202      	movs	r2, #2
 8006aca:	409a      	lsls	r2, r3
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80c5 	beq.w	8006c60 <HAL_DMA_IRQHandler+0xce8>
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 80bf 	beq.w	8006c60 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	2202      	movs	r2, #2
 8006aec:	409a      	lsls	r2, r3
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d018      	beq.n	8006b2e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 813a 	beq.w	8006d84 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b18:	e134      	b.n	8006d84 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8130 	beq.w	8006d84 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b2c:	e12a      	b.n	8006d84 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f040 8089 	bne.w	8006c4c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8006bec <HAL_DMA_IRQHandler+0xc74>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d04a      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a29      	ldr	r2, [pc, #164]	@ (8006bf0 <HAL_DMA_IRQHandler+0xc78>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d045      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a28      	ldr	r2, [pc, #160]	@ (8006bf4 <HAL_DMA_IRQHandler+0xc7c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d040      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a26      	ldr	r2, [pc, #152]	@ (8006bf8 <HAL_DMA_IRQHandler+0xc80>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d03b      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a25      	ldr	r2, [pc, #148]	@ (8006bfc <HAL_DMA_IRQHandler+0xc84>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d036      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a23      	ldr	r2, [pc, #140]	@ (8006c00 <HAL_DMA_IRQHandler+0xc88>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d031      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a22      	ldr	r2, [pc, #136]	@ (8006c04 <HAL_DMA_IRQHandler+0xc8c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d02c      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a20      	ldr	r2, [pc, #128]	@ (8006c08 <HAL_DMA_IRQHandler+0xc90>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d027      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8006c0c <HAL_DMA_IRQHandler+0xc94>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d022      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1d      	ldr	r2, [pc, #116]	@ (8006c10 <HAL_DMA_IRQHandler+0xc98>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d01d      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c14 <HAL_DMA_IRQHandler+0xc9c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d018      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1a      	ldr	r2, [pc, #104]	@ (8006c18 <HAL_DMA_IRQHandler+0xca0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d013      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a19      	ldr	r2, [pc, #100]	@ (8006c1c <HAL_DMA_IRQHandler+0xca4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00e      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a17      	ldr	r2, [pc, #92]	@ (8006c20 <HAL_DMA_IRQHandler+0xca8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d009      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a16      	ldr	r2, [pc, #88]	@ (8006c24 <HAL_DMA_IRQHandler+0xcac>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d004      	beq.n	8006bda <HAL_DMA_IRQHandler+0xc62>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a14      	ldr	r2, [pc, #80]	@ (8006c28 <HAL_DMA_IRQHandler+0xcb0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d128      	bne.n	8006c2c <HAL_DMA_IRQHandler+0xcb4>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0214 	bic.w	r2, r2, #20
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	e027      	b.n	8006c3c <HAL_DMA_IRQHandler+0xcc4>
 8006bec:	40020010 	.word	0x40020010
 8006bf0:	40020028 	.word	0x40020028
 8006bf4:	40020040 	.word	0x40020040
 8006bf8:	40020058 	.word	0x40020058
 8006bfc:	40020070 	.word	0x40020070
 8006c00:	40020088 	.word	0x40020088
 8006c04:	400200a0 	.word	0x400200a0
 8006c08:	400200b8 	.word	0x400200b8
 8006c0c:	40020410 	.word	0x40020410
 8006c10:	40020428 	.word	0x40020428
 8006c14:	40020440 	.word	0x40020440
 8006c18:	40020458 	.word	0x40020458
 8006c1c:	40020470 	.word	0x40020470
 8006c20:	40020488 	.word	0x40020488
 8006c24:	400204a0 	.word	0x400204a0
 8006c28:	400204b8 	.word	0x400204b8
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 020a 	bic.w	r2, r2, #10
 8006c3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8097 	beq.w	8006d84 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c5e:	e091      	b.n	8006d84 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c64:	f003 031f 	and.w	r3, r3, #31
 8006c68:	2208      	movs	r2, #8
 8006c6a:	409a      	lsls	r2, r3
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 8088 	beq.w	8006d86 <HAL_DMA_IRQHandler+0xe0e>
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8082 	beq.w	8006d86 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a41      	ldr	r2, [pc, #260]	@ (8006d8c <HAL_DMA_IRQHandler+0xe14>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d04a      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a3f      	ldr	r2, [pc, #252]	@ (8006d90 <HAL_DMA_IRQHandler+0xe18>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d045      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a3e      	ldr	r2, [pc, #248]	@ (8006d94 <HAL_DMA_IRQHandler+0xe1c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d040      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a3c      	ldr	r2, [pc, #240]	@ (8006d98 <HAL_DMA_IRQHandler+0xe20>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d03b      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a3b      	ldr	r2, [pc, #236]	@ (8006d9c <HAL_DMA_IRQHandler+0xe24>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d036      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a39      	ldr	r2, [pc, #228]	@ (8006da0 <HAL_DMA_IRQHandler+0xe28>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d031      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a38      	ldr	r2, [pc, #224]	@ (8006da4 <HAL_DMA_IRQHandler+0xe2c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d02c      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a36      	ldr	r2, [pc, #216]	@ (8006da8 <HAL_DMA_IRQHandler+0xe30>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d027      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a35      	ldr	r2, [pc, #212]	@ (8006dac <HAL_DMA_IRQHandler+0xe34>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d022      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a33      	ldr	r2, [pc, #204]	@ (8006db0 <HAL_DMA_IRQHandler+0xe38>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d01d      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a32      	ldr	r2, [pc, #200]	@ (8006db4 <HAL_DMA_IRQHandler+0xe3c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d018      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a30      	ldr	r2, [pc, #192]	@ (8006db8 <HAL_DMA_IRQHandler+0xe40>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8006dbc <HAL_DMA_IRQHandler+0xe44>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00e      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a2d      	ldr	r2, [pc, #180]	@ (8006dc0 <HAL_DMA_IRQHandler+0xe48>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d009      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a2c      	ldr	r2, [pc, #176]	@ (8006dc4 <HAL_DMA_IRQHandler+0xe4c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d004      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xdaa>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc8 <HAL_DMA_IRQHandler+0xe50>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d108      	bne.n	8006d34 <HAL_DMA_IRQHandler+0xdbc>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 021c 	bic.w	r2, r2, #28
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	e007      	b.n	8006d44 <HAL_DMA_IRQHandler+0xdcc>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 020e 	bic.w	r2, r2, #14
 8006d42:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d48:	f003 031f 	and.w	r3, r3, #31
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	409a      	lsls	r2, r3
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d009      	beq.n	8006d86 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
 8006d7a:	e004      	b.n	8006d86 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d7c:	bf00      	nop
 8006d7e:	e002      	b.n	8006d86 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d80:	bf00      	nop
 8006d82:	e000      	b.n	8006d86 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d84:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d86:	3728      	adds	r7, #40	@ 0x28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40020010 	.word	0x40020010
 8006d90:	40020028 	.word	0x40020028
 8006d94:	40020040 	.word	0x40020040
 8006d98:	40020058 	.word	0x40020058
 8006d9c:	40020070 	.word	0x40020070
 8006da0:	40020088 	.word	0x40020088
 8006da4:	400200a0 	.word	0x400200a0
 8006da8:	400200b8 	.word	0x400200b8
 8006dac:	40020410 	.word	0x40020410
 8006db0:	40020428 	.word	0x40020428
 8006db4:	40020440 	.word	0x40020440
 8006db8:	40020458 	.word	0x40020458
 8006dbc:	40020470 	.word	0x40020470
 8006dc0:	40020488 	.word	0x40020488
 8006dc4:	400204a0 	.word	0x400204a0
 8006dc8:	400204b8 	.word	0x400204b8

08006dcc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dde:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a7f      	ldr	r2, [pc, #508]	@ (8006fe8 <DMA_SetConfig+0x21c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d072      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a7d      	ldr	r2, [pc, #500]	@ (8006fec <DMA_SetConfig+0x220>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d06d      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a7c      	ldr	r2, [pc, #496]	@ (8006ff0 <DMA_SetConfig+0x224>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d068      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a7a      	ldr	r2, [pc, #488]	@ (8006ff4 <DMA_SetConfig+0x228>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d063      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a79      	ldr	r2, [pc, #484]	@ (8006ff8 <DMA_SetConfig+0x22c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d05e      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a77      	ldr	r2, [pc, #476]	@ (8006ffc <DMA_SetConfig+0x230>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d059      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a76      	ldr	r2, [pc, #472]	@ (8007000 <DMA_SetConfig+0x234>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d054      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a74      	ldr	r2, [pc, #464]	@ (8007004 <DMA_SetConfig+0x238>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d04f      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a73      	ldr	r2, [pc, #460]	@ (8007008 <DMA_SetConfig+0x23c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d04a      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a71      	ldr	r2, [pc, #452]	@ (800700c <DMA_SetConfig+0x240>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d045      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a70      	ldr	r2, [pc, #448]	@ (8007010 <DMA_SetConfig+0x244>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d040      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a6e      	ldr	r2, [pc, #440]	@ (8007014 <DMA_SetConfig+0x248>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d03b      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a6d      	ldr	r2, [pc, #436]	@ (8007018 <DMA_SetConfig+0x24c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d036      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a6b      	ldr	r2, [pc, #428]	@ (800701c <DMA_SetConfig+0x250>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d031      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a6a      	ldr	r2, [pc, #424]	@ (8007020 <DMA_SetConfig+0x254>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d02c      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a68      	ldr	r2, [pc, #416]	@ (8007024 <DMA_SetConfig+0x258>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d027      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a67      	ldr	r2, [pc, #412]	@ (8007028 <DMA_SetConfig+0x25c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d022      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a65      	ldr	r2, [pc, #404]	@ (800702c <DMA_SetConfig+0x260>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01d      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a64      	ldr	r2, [pc, #400]	@ (8007030 <DMA_SetConfig+0x264>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d018      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a62      	ldr	r2, [pc, #392]	@ (8007034 <DMA_SetConfig+0x268>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a61      	ldr	r2, [pc, #388]	@ (8007038 <DMA_SetConfig+0x26c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00e      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a5f      	ldr	r2, [pc, #380]	@ (800703c <DMA_SetConfig+0x270>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8007040 <DMA_SetConfig+0x274>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <DMA_SetConfig+0x10a>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a5c      	ldr	r2, [pc, #368]	@ (8007044 <DMA_SetConfig+0x278>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d101      	bne.n	8006eda <DMA_SetConfig+0x10e>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <DMA_SetConfig+0x110>
 8006eda:	2300      	movs	r3, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00d      	beq.n	8006efc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006ee8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d004      	beq.n	8006efc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006efa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a39      	ldr	r2, [pc, #228]	@ (8006fe8 <DMA_SetConfig+0x21c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d04a      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a38      	ldr	r2, [pc, #224]	@ (8006fec <DMA_SetConfig+0x220>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d045      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a36      	ldr	r2, [pc, #216]	@ (8006ff0 <DMA_SetConfig+0x224>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d040      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a35      	ldr	r2, [pc, #212]	@ (8006ff4 <DMA_SetConfig+0x228>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d03b      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a33      	ldr	r2, [pc, #204]	@ (8006ff8 <DMA_SetConfig+0x22c>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d036      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a32      	ldr	r2, [pc, #200]	@ (8006ffc <DMA_SetConfig+0x230>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d031      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a30      	ldr	r2, [pc, #192]	@ (8007000 <DMA_SetConfig+0x234>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d02c      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2f      	ldr	r2, [pc, #188]	@ (8007004 <DMA_SetConfig+0x238>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d027      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a2d      	ldr	r2, [pc, #180]	@ (8007008 <DMA_SetConfig+0x23c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d022      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800700c <DMA_SetConfig+0x240>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d01d      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a2a      	ldr	r2, [pc, #168]	@ (8007010 <DMA_SetConfig+0x244>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d018      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a29      	ldr	r2, [pc, #164]	@ (8007014 <DMA_SetConfig+0x248>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a27      	ldr	r2, [pc, #156]	@ (8007018 <DMA_SetConfig+0x24c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00e      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a26      	ldr	r2, [pc, #152]	@ (800701c <DMA_SetConfig+0x250>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d009      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a24      	ldr	r2, [pc, #144]	@ (8007020 <DMA_SetConfig+0x254>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d004      	beq.n	8006f9c <DMA_SetConfig+0x1d0>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a23      	ldr	r2, [pc, #140]	@ (8007024 <DMA_SetConfig+0x258>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d101      	bne.n	8006fa0 <DMA_SetConfig+0x1d4>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <DMA_SetConfig+0x1d6>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d059      	beq.n	800705a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006faa:	f003 031f 	and.w	r3, r3, #31
 8006fae:	223f      	movs	r2, #63	@ 0x3f
 8006fb0:	409a      	lsls	r2, r3
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006fc4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b40      	cmp	r3, #64	@ 0x40
 8006fd4:	d138      	bne.n	8007048 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006fe6:	e086      	b.n	80070f6 <DMA_SetConfig+0x32a>
 8006fe8:	40020010 	.word	0x40020010
 8006fec:	40020028 	.word	0x40020028
 8006ff0:	40020040 	.word	0x40020040
 8006ff4:	40020058 	.word	0x40020058
 8006ff8:	40020070 	.word	0x40020070
 8006ffc:	40020088 	.word	0x40020088
 8007000:	400200a0 	.word	0x400200a0
 8007004:	400200b8 	.word	0x400200b8
 8007008:	40020410 	.word	0x40020410
 800700c:	40020428 	.word	0x40020428
 8007010:	40020440 	.word	0x40020440
 8007014:	40020458 	.word	0x40020458
 8007018:	40020470 	.word	0x40020470
 800701c:	40020488 	.word	0x40020488
 8007020:	400204a0 	.word	0x400204a0
 8007024:	400204b8 	.word	0x400204b8
 8007028:	58025408 	.word	0x58025408
 800702c:	5802541c 	.word	0x5802541c
 8007030:	58025430 	.word	0x58025430
 8007034:	58025444 	.word	0x58025444
 8007038:	58025458 	.word	0x58025458
 800703c:	5802546c 	.word	0x5802546c
 8007040:	58025480 	.word	0x58025480
 8007044:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	60da      	str	r2, [r3, #12]
}
 8007058:	e04d      	b.n	80070f6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a29      	ldr	r2, [pc, #164]	@ (8007104 <DMA_SetConfig+0x338>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d022      	beq.n	80070aa <DMA_SetConfig+0x2de>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a27      	ldr	r2, [pc, #156]	@ (8007108 <DMA_SetConfig+0x33c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d01d      	beq.n	80070aa <DMA_SetConfig+0x2de>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a26      	ldr	r2, [pc, #152]	@ (800710c <DMA_SetConfig+0x340>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d018      	beq.n	80070aa <DMA_SetConfig+0x2de>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a24      	ldr	r2, [pc, #144]	@ (8007110 <DMA_SetConfig+0x344>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d013      	beq.n	80070aa <DMA_SetConfig+0x2de>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a23      	ldr	r2, [pc, #140]	@ (8007114 <DMA_SetConfig+0x348>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d00e      	beq.n	80070aa <DMA_SetConfig+0x2de>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a21      	ldr	r2, [pc, #132]	@ (8007118 <DMA_SetConfig+0x34c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d009      	beq.n	80070aa <DMA_SetConfig+0x2de>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a20      	ldr	r2, [pc, #128]	@ (800711c <DMA_SetConfig+0x350>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d004      	beq.n	80070aa <DMA_SetConfig+0x2de>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007120 <DMA_SetConfig+0x354>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d101      	bne.n	80070ae <DMA_SetConfig+0x2e2>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <DMA_SetConfig+0x2e4>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d020      	beq.n	80070f6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	2201      	movs	r2, #1
 80070be:	409a      	lsls	r2, r3
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b40      	cmp	r3, #64	@ 0x40
 80070d2:	d108      	bne.n	80070e6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	60da      	str	r2, [r3, #12]
}
 80070e4:	e007      	b.n	80070f6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	60da      	str	r2, [r3, #12]
}
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	58025408 	.word	0x58025408
 8007108:	5802541c 	.word	0x5802541c
 800710c:	58025430 	.word	0x58025430
 8007110:	58025444 	.word	0x58025444
 8007114:	58025458 	.word	0x58025458
 8007118:	5802546c 	.word	0x5802546c
 800711c:	58025480 	.word	0x58025480
 8007120:	58025494 	.word	0x58025494

08007124 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a42      	ldr	r2, [pc, #264]	@ (800723c <DMA_CalcBaseAndBitshift+0x118>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d04a      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a41      	ldr	r2, [pc, #260]	@ (8007240 <DMA_CalcBaseAndBitshift+0x11c>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d045      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a3f      	ldr	r2, [pc, #252]	@ (8007244 <DMA_CalcBaseAndBitshift+0x120>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d040      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a3e      	ldr	r2, [pc, #248]	@ (8007248 <DMA_CalcBaseAndBitshift+0x124>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d03b      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a3c      	ldr	r2, [pc, #240]	@ (800724c <DMA_CalcBaseAndBitshift+0x128>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d036      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a3b      	ldr	r2, [pc, #236]	@ (8007250 <DMA_CalcBaseAndBitshift+0x12c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d031      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a39      	ldr	r2, [pc, #228]	@ (8007254 <DMA_CalcBaseAndBitshift+0x130>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d02c      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a38      	ldr	r2, [pc, #224]	@ (8007258 <DMA_CalcBaseAndBitshift+0x134>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d027      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a36      	ldr	r2, [pc, #216]	@ (800725c <DMA_CalcBaseAndBitshift+0x138>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d022      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a35      	ldr	r2, [pc, #212]	@ (8007260 <DMA_CalcBaseAndBitshift+0x13c>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d01d      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a33      	ldr	r2, [pc, #204]	@ (8007264 <DMA_CalcBaseAndBitshift+0x140>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d018      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a32      	ldr	r2, [pc, #200]	@ (8007268 <DMA_CalcBaseAndBitshift+0x144>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d013      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a30      	ldr	r2, [pc, #192]	@ (800726c <DMA_CalcBaseAndBitshift+0x148>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00e      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a2f      	ldr	r2, [pc, #188]	@ (8007270 <DMA_CalcBaseAndBitshift+0x14c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d009      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a2d      	ldr	r2, [pc, #180]	@ (8007274 <DMA_CalcBaseAndBitshift+0x150>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d004      	beq.n	80071cc <DMA_CalcBaseAndBitshift+0xa8>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a2c      	ldr	r2, [pc, #176]	@ (8007278 <DMA_CalcBaseAndBitshift+0x154>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d101      	bne.n	80071d0 <DMA_CalcBaseAndBitshift+0xac>
 80071cc:	2301      	movs	r3, #1
 80071ce:	e000      	b.n	80071d2 <DMA_CalcBaseAndBitshift+0xae>
 80071d0:	2300      	movs	r3, #0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d024      	beq.n	8007220 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	3b10      	subs	r3, #16
 80071de:	4a27      	ldr	r2, [pc, #156]	@ (800727c <DMA_CalcBaseAndBitshift+0x158>)
 80071e0:	fba2 2303 	umull	r2, r3, r2, r3
 80071e4:	091b      	lsrs	r3, r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	4a24      	ldr	r2, [pc, #144]	@ (8007280 <DMA_CalcBaseAndBitshift+0x15c>)
 80071f0:	5cd3      	ldrb	r3, [r2, r3]
 80071f2:	461a      	mov	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d908      	bls.n	8007210 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	4b1f      	ldr	r3, [pc, #124]	@ (8007284 <DMA_CalcBaseAndBitshift+0x160>)
 8007206:	4013      	ands	r3, r2
 8007208:	1d1a      	adds	r2, r3, #4
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	659a      	str	r2, [r3, #88]	@ 0x58
 800720e:	e00d      	b.n	800722c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	461a      	mov	r2, r3
 8007216:	4b1b      	ldr	r3, [pc, #108]	@ (8007284 <DMA_CalcBaseAndBitshift+0x160>)
 8007218:	4013      	ands	r3, r2
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	6593      	str	r3, [r2, #88]	@ 0x58
 800721e:	e005      	b.n	800722c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	40020010 	.word	0x40020010
 8007240:	40020028 	.word	0x40020028
 8007244:	40020040 	.word	0x40020040
 8007248:	40020058 	.word	0x40020058
 800724c:	40020070 	.word	0x40020070
 8007250:	40020088 	.word	0x40020088
 8007254:	400200a0 	.word	0x400200a0
 8007258:	400200b8 	.word	0x400200b8
 800725c:	40020410 	.word	0x40020410
 8007260:	40020428 	.word	0x40020428
 8007264:	40020440 	.word	0x40020440
 8007268:	40020458 	.word	0x40020458
 800726c:	40020470 	.word	0x40020470
 8007270:	40020488 	.word	0x40020488
 8007274:	400204a0 	.word	0x400204a0
 8007278:	400204b8 	.word	0x400204b8
 800727c:	aaaaaaab 	.word	0xaaaaaaab
 8007280:	080137d0 	.word	0x080137d0
 8007284:	fffffc00 	.word	0xfffffc00

08007288 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d120      	bne.n	80072de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d858      	bhi.n	8007356 <DMA_CheckFifoParam+0xce>
 80072a4:	a201      	add	r2, pc, #4	@ (adr r2, 80072ac <DMA_CheckFifoParam+0x24>)
 80072a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	080072bd 	.word	0x080072bd
 80072b0:	080072cf 	.word	0x080072cf
 80072b4:	080072bd 	.word	0x080072bd
 80072b8:	08007357 	.word	0x08007357
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d048      	beq.n	800735a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072cc:	e045      	b.n	800735a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80072d6:	d142      	bne.n	800735e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072dc:	e03f      	b.n	800735e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072e6:	d123      	bne.n	8007330 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d838      	bhi.n	8007362 <DMA_CheckFifoParam+0xda>
 80072f0:	a201      	add	r2, pc, #4	@ (adr r2, 80072f8 <DMA_CheckFifoParam+0x70>)
 80072f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f6:	bf00      	nop
 80072f8:	08007309 	.word	0x08007309
 80072fc:	0800730f 	.word	0x0800730f
 8007300:	08007309 	.word	0x08007309
 8007304:	08007321 	.word	0x08007321
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	73fb      	strb	r3, [r7, #15]
        break;
 800730c:	e030      	b.n	8007370 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007312:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d025      	beq.n	8007366 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800731e:	e022      	b.n	8007366 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007324:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007328:	d11f      	bne.n	800736a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800732e:	e01c      	b.n	800736a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007334:	2b02      	cmp	r3, #2
 8007336:	d902      	bls.n	800733e <DMA_CheckFifoParam+0xb6>
 8007338:	2b03      	cmp	r3, #3
 800733a:	d003      	beq.n	8007344 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800733c:	e018      	b.n	8007370 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
        break;
 8007342:	e015      	b.n	8007370 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007348:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00e      	beq.n	800736e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	73fb      	strb	r3, [r7, #15]
    break;
 8007354:	e00b      	b.n	800736e <DMA_CheckFifoParam+0xe6>
        break;
 8007356:	bf00      	nop
 8007358:	e00a      	b.n	8007370 <DMA_CheckFifoParam+0xe8>
        break;
 800735a:	bf00      	nop
 800735c:	e008      	b.n	8007370 <DMA_CheckFifoParam+0xe8>
        break;
 800735e:	bf00      	nop
 8007360:	e006      	b.n	8007370 <DMA_CheckFifoParam+0xe8>
        break;
 8007362:	bf00      	nop
 8007364:	e004      	b.n	8007370 <DMA_CheckFifoParam+0xe8>
        break;
 8007366:	bf00      	nop
 8007368:	e002      	b.n	8007370 <DMA_CheckFifoParam+0xe8>
        break;
 800736a:	bf00      	nop
 800736c:	e000      	b.n	8007370 <DMA_CheckFifoParam+0xe8>
    break;
 800736e:	bf00      	nop
    }
  }

  return status;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop

08007380 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a38      	ldr	r2, [pc, #224]	@ (8007474 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d022      	beq.n	80073de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a36      	ldr	r2, [pc, #216]	@ (8007478 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d01d      	beq.n	80073de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a35      	ldr	r2, [pc, #212]	@ (800747c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d018      	beq.n	80073de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a33      	ldr	r2, [pc, #204]	@ (8007480 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d013      	beq.n	80073de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a32      	ldr	r2, [pc, #200]	@ (8007484 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d00e      	beq.n	80073de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a30      	ldr	r2, [pc, #192]	@ (8007488 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d009      	beq.n	80073de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a2f      	ldr	r2, [pc, #188]	@ (800748c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d004      	beq.n	80073de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a2d      	ldr	r2, [pc, #180]	@ (8007490 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d101      	bne.n	80073e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80073de:	2301      	movs	r3, #1
 80073e0:	e000      	b.n	80073e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80073e2:	2300      	movs	r3, #0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01a      	beq.n	800741e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	3b08      	subs	r3, #8
 80073f0:	4a28      	ldr	r2, [pc, #160]	@ (8007494 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	091b      	lsrs	r3, r3, #4
 80073f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4b26      	ldr	r3, [pc, #152]	@ (8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	461a      	mov	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a24      	ldr	r2, [pc, #144]	@ (800749c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800740c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f003 031f 	and.w	r3, r3, #31
 8007414:	2201      	movs	r2, #1
 8007416:	409a      	lsls	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800741c:	e024      	b.n	8007468 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	3b10      	subs	r3, #16
 8007426:	4a1e      	ldr	r2, [pc, #120]	@ (80074a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007428:	fba2 2303 	umull	r2, r3, r2, r3
 800742c:	091b      	lsrs	r3, r3, #4
 800742e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4a1c      	ldr	r2, [pc, #112]	@ (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d806      	bhi.n	8007446 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4a1b      	ldr	r2, [pc, #108]	@ (80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d902      	bls.n	8007446 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3308      	adds	r3, #8
 8007444:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4b18      	ldr	r3, [pc, #96]	@ (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a16      	ldr	r2, [pc, #88]	@ (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007458:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	2201      	movs	r2, #1
 8007462:	409a      	lsls	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007468:	bf00      	nop
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	58025408 	.word	0x58025408
 8007478:	5802541c 	.word	0x5802541c
 800747c:	58025430 	.word	0x58025430
 8007480:	58025444 	.word	0x58025444
 8007484:	58025458 	.word	0x58025458
 8007488:	5802546c 	.word	0x5802546c
 800748c:	58025480 	.word	0x58025480
 8007490:	58025494 	.word	0x58025494
 8007494:	cccccccd 	.word	0xcccccccd
 8007498:	16009600 	.word	0x16009600
 800749c:	58025880 	.word	0x58025880
 80074a0:	aaaaaaab 	.word	0xaaaaaaab
 80074a4:	400204b8 	.word	0x400204b8
 80074a8:	4002040f 	.word	0x4002040f
 80074ac:	10008200 	.word	0x10008200
 80074b0:	40020880 	.word	0x40020880

080074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d04a      	beq.n	8007560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d847      	bhi.n	8007560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a25      	ldr	r2, [pc, #148]	@ (800756c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d022      	beq.n	8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a24      	ldr	r2, [pc, #144]	@ (8007570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d01d      	beq.n	8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a22      	ldr	r2, [pc, #136]	@ (8007574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d018      	beq.n	8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a21      	ldr	r2, [pc, #132]	@ (8007578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d013      	beq.n	8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a1f      	ldr	r2, [pc, #124]	@ (800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00e      	beq.n	8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a1e      	ldr	r2, [pc, #120]	@ (8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d009      	beq.n	8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a1c      	ldr	r2, [pc, #112]	@ (8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d004      	beq.n	8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a1b      	ldr	r2, [pc, #108]	@ (8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d101      	bne.n	8007524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007520:	2301      	movs	r3, #1
 8007522:	e000      	b.n	8007526 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007524:	2300      	movs	r3, #0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4b17      	ldr	r3, [pc, #92]	@ (800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	461a      	mov	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a15      	ldr	r2, [pc, #84]	@ (8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800753c:	671a      	str	r2, [r3, #112]	@ 0x70
 800753e:	e009      	b.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4b14      	ldr	r3, [pc, #80]	@ (8007594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	461a      	mov	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a11      	ldr	r2, [pc, #68]	@ (8007598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007552:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3b01      	subs	r3, #1
 8007558:	2201      	movs	r2, #1
 800755a:	409a      	lsls	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	58025408 	.word	0x58025408
 8007570:	5802541c 	.word	0x5802541c
 8007574:	58025430 	.word	0x58025430
 8007578:	58025444 	.word	0x58025444
 800757c:	58025458 	.word	0x58025458
 8007580:	5802546c 	.word	0x5802546c
 8007584:	58025480 	.word	0x58025480
 8007588:	58025494 	.word	0x58025494
 800758c:	1600963f 	.word	0x1600963f
 8007590:	58025940 	.word	0x58025940
 8007594:	1000823f 	.word	0x1000823f
 8007598:	40020940 	.word	0x40020940

0800759c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800759c:	b480      	push	{r7}
 800759e:	b089      	sub	sp, #36	@ 0x24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80075aa:	4b89      	ldr	r3, [pc, #548]	@ (80077d0 <HAL_GPIO_Init+0x234>)
 80075ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075ae:	e194      	b.n	80078da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	2101      	movs	r1, #1
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	fa01 f303 	lsl.w	r3, r1, r3
 80075bc:	4013      	ands	r3, r2
 80075be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8186 	beq.w	80078d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f003 0303 	and.w	r3, r3, #3
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d005      	beq.n	80075e0 <HAL_GPIO_Init+0x44>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d130      	bne.n	8007642 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	2203      	movs	r2, #3
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	43db      	mvns	r3, r3
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	4013      	ands	r3, r2
 80075f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	4313      	orrs	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007616:	2201      	movs	r2, #1
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	43db      	mvns	r3, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4013      	ands	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	091b      	lsrs	r3, r3, #4
 800762c:	f003 0201 	and.w	r2, r3, #1
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	fa02 f303 	lsl.w	r3, r2, r3
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	4313      	orrs	r3, r2
 800763a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b03      	cmp	r3, #3
 800764c:	d017      	beq.n	800767e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	2203      	movs	r2, #3
 800765a:	fa02 f303 	lsl.w	r3, r2, r3
 800765e:	43db      	mvns	r3, r3
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	4013      	ands	r3, r2
 8007664:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	689a      	ldr	r2, [r3, #8]
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	4313      	orrs	r3, r2
 8007676:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	2b02      	cmp	r3, #2
 8007688:	d123      	bne.n	80076d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	08da      	lsrs	r2, r3, #3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3208      	adds	r2, #8
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	220f      	movs	r2, #15
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43db      	mvns	r3, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	4013      	ands	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	691a      	ldr	r2, [r3, #16]
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	08da      	lsrs	r2, r3, #3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3208      	adds	r2, #8
 80076cc:	69b9      	ldr	r1, [r7, #24]
 80076ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	2203      	movs	r2, #3
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	43db      	mvns	r3, r3
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	4013      	ands	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f003 0203 	and.w	r2, r3, #3
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80e0 	beq.w	80078d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007714:	4b2f      	ldr	r3, [pc, #188]	@ (80077d4 <HAL_GPIO_Init+0x238>)
 8007716:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800771a:	4a2e      	ldr	r2, [pc, #184]	@ (80077d4 <HAL_GPIO_Init+0x238>)
 800771c:	f043 0302 	orr.w	r3, r3, #2
 8007720:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007724:	4b2b      	ldr	r3, [pc, #172]	@ (80077d4 <HAL_GPIO_Init+0x238>)
 8007726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007732:	4a29      	ldr	r2, [pc, #164]	@ (80077d8 <HAL_GPIO_Init+0x23c>)
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	089b      	lsrs	r3, r3, #2
 8007738:	3302      	adds	r3, #2
 800773a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	220f      	movs	r2, #15
 800774a:	fa02 f303 	lsl.w	r3, r2, r3
 800774e:	43db      	mvns	r3, r3
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	4013      	ands	r3, r2
 8007754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a20      	ldr	r2, [pc, #128]	@ (80077dc <HAL_GPIO_Init+0x240>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d052      	beq.n	8007804 <HAL_GPIO_Init+0x268>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a1f      	ldr	r2, [pc, #124]	@ (80077e0 <HAL_GPIO_Init+0x244>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d031      	beq.n	80077ca <HAL_GPIO_Init+0x22e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a1e      	ldr	r2, [pc, #120]	@ (80077e4 <HAL_GPIO_Init+0x248>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d02b      	beq.n	80077c6 <HAL_GPIO_Init+0x22a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a1d      	ldr	r2, [pc, #116]	@ (80077e8 <HAL_GPIO_Init+0x24c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d025      	beq.n	80077c2 <HAL_GPIO_Init+0x226>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a1c      	ldr	r2, [pc, #112]	@ (80077ec <HAL_GPIO_Init+0x250>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01f      	beq.n	80077be <HAL_GPIO_Init+0x222>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a1b      	ldr	r2, [pc, #108]	@ (80077f0 <HAL_GPIO_Init+0x254>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d019      	beq.n	80077ba <HAL_GPIO_Init+0x21e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a1a      	ldr	r2, [pc, #104]	@ (80077f4 <HAL_GPIO_Init+0x258>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d013      	beq.n	80077b6 <HAL_GPIO_Init+0x21a>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a19      	ldr	r2, [pc, #100]	@ (80077f8 <HAL_GPIO_Init+0x25c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00d      	beq.n	80077b2 <HAL_GPIO_Init+0x216>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a18      	ldr	r2, [pc, #96]	@ (80077fc <HAL_GPIO_Init+0x260>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <HAL_GPIO_Init+0x212>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a17      	ldr	r2, [pc, #92]	@ (8007800 <HAL_GPIO_Init+0x264>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d101      	bne.n	80077aa <HAL_GPIO_Init+0x20e>
 80077a6:	2309      	movs	r3, #9
 80077a8:	e02d      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077aa:	230a      	movs	r3, #10
 80077ac:	e02b      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077ae:	2308      	movs	r3, #8
 80077b0:	e029      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077b2:	2307      	movs	r3, #7
 80077b4:	e027      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077b6:	2306      	movs	r3, #6
 80077b8:	e025      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077ba:	2305      	movs	r3, #5
 80077bc:	e023      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077be:	2304      	movs	r3, #4
 80077c0:	e021      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077c2:	2303      	movs	r3, #3
 80077c4:	e01f      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077c6:	2302      	movs	r3, #2
 80077c8:	e01d      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e01b      	b.n	8007806 <HAL_GPIO_Init+0x26a>
 80077ce:	bf00      	nop
 80077d0:	58000080 	.word	0x58000080
 80077d4:	58024400 	.word	0x58024400
 80077d8:	58000400 	.word	0x58000400
 80077dc:	58020000 	.word	0x58020000
 80077e0:	58020400 	.word	0x58020400
 80077e4:	58020800 	.word	0x58020800
 80077e8:	58020c00 	.word	0x58020c00
 80077ec:	58021000 	.word	0x58021000
 80077f0:	58021400 	.word	0x58021400
 80077f4:	58021800 	.word	0x58021800
 80077f8:	58021c00 	.word	0x58021c00
 80077fc:	58022000 	.word	0x58022000
 8007800:	58022400 	.word	0x58022400
 8007804:	2300      	movs	r3, #0
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	f002 0203 	and.w	r2, r2, #3
 800780c:	0092      	lsls	r2, r2, #2
 800780e:	4093      	lsls	r3, r2
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	4313      	orrs	r3, r2
 8007814:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007816:	4938      	ldr	r1, [pc, #224]	@ (80078f8 <HAL_GPIO_Init+0x35c>)
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	089b      	lsrs	r3, r3, #2
 800781c:	3302      	adds	r3, #2
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	43db      	mvns	r3, r3
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	4013      	ands	r3, r2
 8007834:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	4313      	orrs	r3, r2
 8007848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800784a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	43db      	mvns	r3, r3
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	4013      	ands	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	4313      	orrs	r3, r2
 8007876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007878:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	43db      	mvns	r3, r3
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	4013      	ands	r3, r2
 800788e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	43db      	mvns	r3, r3
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	4013      	ands	r3, r2
 80078b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	3301      	adds	r3, #1
 80078d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	fa22 f303 	lsr.w	r3, r2, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f47f ae63 	bne.w	80075b0 <HAL_GPIO_Init+0x14>
  }
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	3724      	adds	r7, #36	@ 0x24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	58000400 	.word	0x58000400

080078fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800790a:	4b75      	ldr	r3, [pc, #468]	@ (8007ae0 <HAL_GPIO_DeInit+0x1e4>)
 800790c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800790e:	e0d9      	b.n	8007ac4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007910:	2201      	movs	r2, #1
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	fa02 f303 	lsl.w	r3, r2, r3
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	4013      	ands	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 80cc 	beq.w	8007abe <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007926:	4a6f      	ldr	r2, [pc, #444]	@ (8007ae4 <HAL_GPIO_DeInit+0x1e8>)
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	089b      	lsrs	r3, r3, #2
 800792c:	3302      	adds	r3, #2
 800792e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007932:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	220f      	movs	r2, #15
 800793e:	fa02 f303 	lsl.w	r3, r2, r3
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	4013      	ands	r3, r2
 8007946:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a67      	ldr	r2, [pc, #412]	@ (8007ae8 <HAL_GPIO_DeInit+0x1ec>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d037      	beq.n	80079c0 <HAL_GPIO_DeInit+0xc4>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a66      	ldr	r2, [pc, #408]	@ (8007aec <HAL_GPIO_DeInit+0x1f0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d031      	beq.n	80079bc <HAL_GPIO_DeInit+0xc0>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a65      	ldr	r2, [pc, #404]	@ (8007af0 <HAL_GPIO_DeInit+0x1f4>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d02b      	beq.n	80079b8 <HAL_GPIO_DeInit+0xbc>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a64      	ldr	r2, [pc, #400]	@ (8007af4 <HAL_GPIO_DeInit+0x1f8>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d025      	beq.n	80079b4 <HAL_GPIO_DeInit+0xb8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a63      	ldr	r2, [pc, #396]	@ (8007af8 <HAL_GPIO_DeInit+0x1fc>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d01f      	beq.n	80079b0 <HAL_GPIO_DeInit+0xb4>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a62      	ldr	r2, [pc, #392]	@ (8007afc <HAL_GPIO_DeInit+0x200>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d019      	beq.n	80079ac <HAL_GPIO_DeInit+0xb0>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a61      	ldr	r2, [pc, #388]	@ (8007b00 <HAL_GPIO_DeInit+0x204>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d013      	beq.n	80079a8 <HAL_GPIO_DeInit+0xac>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a60      	ldr	r2, [pc, #384]	@ (8007b04 <HAL_GPIO_DeInit+0x208>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00d      	beq.n	80079a4 <HAL_GPIO_DeInit+0xa8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a5f      	ldr	r2, [pc, #380]	@ (8007b08 <HAL_GPIO_DeInit+0x20c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d007      	beq.n	80079a0 <HAL_GPIO_DeInit+0xa4>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a5e      	ldr	r2, [pc, #376]	@ (8007b0c <HAL_GPIO_DeInit+0x210>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d101      	bne.n	800799c <HAL_GPIO_DeInit+0xa0>
 8007998:	2309      	movs	r3, #9
 800799a:	e012      	b.n	80079c2 <HAL_GPIO_DeInit+0xc6>
 800799c:	230a      	movs	r3, #10
 800799e:	e010      	b.n	80079c2 <HAL_GPIO_DeInit+0xc6>
 80079a0:	2308      	movs	r3, #8
 80079a2:	e00e      	b.n	80079c2 <HAL_GPIO_DeInit+0xc6>
 80079a4:	2307      	movs	r3, #7
 80079a6:	e00c      	b.n	80079c2 <HAL_GPIO_DeInit+0xc6>
 80079a8:	2306      	movs	r3, #6
 80079aa:	e00a      	b.n	80079c2 <HAL_GPIO_DeInit+0xc6>
 80079ac:	2305      	movs	r3, #5
 80079ae:	e008      	b.n	80079c2 <HAL_GPIO_DeInit+0xc6>
 80079b0:	2304      	movs	r3, #4
 80079b2:	e006      	b.n	80079c2 <HAL_GPIO_DeInit+0xc6>
 80079b4:	2303      	movs	r3, #3
 80079b6:	e004      	b.n	80079c2 <HAL_GPIO_DeInit+0xc6>
 80079b8:	2302      	movs	r3, #2
 80079ba:	e002      	b.n	80079c2 <HAL_GPIO_DeInit+0xc6>
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <HAL_GPIO_DeInit+0xc6>
 80079c0:	2300      	movs	r3, #0
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	f002 0203 	and.w	r2, r2, #3
 80079c8:	0092      	lsls	r2, r2, #2
 80079ca:	4093      	lsls	r3, r2
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d136      	bne.n	8007a40 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	43db      	mvns	r3, r3
 80079da:	401a      	ands	r2, r3
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	43db      	mvns	r3, r3
 80079e8:	401a      	ands	r2, r3
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80079ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	43db      	mvns	r3, r3
 80079f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079fc:	4013      	ands	r3, r2
 80079fe:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a0e:	4013      	ands	r3, r2
 8007a10:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f003 0303 	and.w	r3, r3, #3
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	220f      	movs	r2, #15
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007a22:	4a30      	ldr	r2, [pc, #192]	@ (8007ae4 <HAL_GPIO_DeInit+0x1e8>)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	089b      	lsrs	r3, r3, #2
 8007a28:	3302      	adds	r3, #2
 8007a2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	43da      	mvns	r2, r3
 8007a32:	482c      	ldr	r0, [pc, #176]	@ (8007ae4 <HAL_GPIO_DeInit+0x1e8>)
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	089b      	lsrs	r3, r3, #2
 8007a38:	400a      	ands	r2, r1
 8007a3a:	3302      	adds	r3, #2
 8007a3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	2103      	movs	r1, #3
 8007a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	08da      	lsrs	r2, r3, #3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3208      	adds	r2, #8
 8007a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	220f      	movs	r2, #15
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	43db      	mvns	r3, r3
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	08d2      	lsrs	r2, r2, #3
 8007a74:	4019      	ands	r1, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3208      	adds	r2, #8
 8007a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	2103      	movs	r1, #3
 8007a88:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8c:	43db      	mvns	r3, r3
 8007a8e:	401a      	ands	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	2101      	movs	r1, #1
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	401a      	ands	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	2103      	movs	r1, #3
 8007ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	401a      	ands	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	609a      	str	r2, [r3, #8]
    }

    position++;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f47f af1f 	bne.w	8007910 <HAL_GPIO_DeInit+0x14>
  }
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	371c      	adds	r7, #28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	58000080 	.word	0x58000080
 8007ae4:	58000400 	.word	0x58000400
 8007ae8:	58020000 	.word	0x58020000
 8007aec:	58020400 	.word	0x58020400
 8007af0:	58020800 	.word	0x58020800
 8007af4:	58020c00 	.word	0x58020c00
 8007af8:	58021000 	.word	0x58021000
 8007afc:	58021400 	.word	0x58021400
 8007b00:	58021800 	.word	0x58021800
 8007b04:	58021c00 	.word	0x58021c00
 8007b08:	58022000 	.word	0x58022000
 8007b0c:	58022400 	.word	0x58022400

08007b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	807b      	strh	r3, [r7, #2]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b20:	787b      	ldrb	r3, [r7, #1]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b26:	887a      	ldrh	r2, [r7, #2]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b2c:	e003      	b.n	8007b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b2e:	887b      	ldrh	r3, [r7, #2]
 8007b30:	041a      	lsls	r2, r3, #16
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	619a      	str	r2, [r3, #24]
}
 8007b36:	bf00      	nop
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
	...

08007b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e07f      	b.n	8007c56 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7f9 fcd8 	bl	8001520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2224      	movs	r2, #36	@ 0x24
 8007b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0201 	bic.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007b94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ba4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d107      	bne.n	8007bbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bba:	609a      	str	r2, [r3, #8]
 8007bbc:	e006      	b.n	8007bcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007bca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d104      	bne.n	8007bde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6859      	ldr	r1, [r3, #4]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	4b1d      	ldr	r3, [pc, #116]	@ (8007c60 <HAL_I2C_Init+0x11c>)
 8007bea:	430b      	orrs	r3, r1
 8007bec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007bfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691a      	ldr	r2, [r3, #16]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	69d9      	ldr	r1, [r3, #28]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a1a      	ldr	r2, [r3, #32]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f042 0201 	orr.w	r2, r2, #1
 8007c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	02008000 	.word	0x02008000

08007c64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d138      	bne.n	8007cec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d101      	bne.n	8007c88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c84:	2302      	movs	r3, #2
 8007c86:	e032      	b.n	8007cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2224      	movs	r2, #36	@ 0x24
 8007c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f022 0201 	bic.w	r2, r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007cb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6819      	ldr	r1, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0201 	orr.w	r2, r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	e000      	b.n	8007cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cec:	2302      	movs	r3, #2
  }
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d139      	bne.n	8007d84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d101      	bne.n	8007d1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e033      	b.n	8007d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2224      	movs	r2, #36	@ 0x24
 8007d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0201 	bic.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0201 	orr.w	r2, r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d84:	2302      	movs	r3, #2
  }
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
	...

08007d94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d9c:	4b19      	ldr	r3, [pc, #100]	@ (8007e04 <HAL_PWREx_ConfigSupply+0x70>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d00a      	beq.n	8007dbe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007da8:	4b16      	ldr	r3, [pc, #88]	@ (8007e04 <HAL_PWREx_ConfigSupply+0x70>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f003 0307 	and.w	r3, r3, #7
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d001      	beq.n	8007dba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e01f      	b.n	8007dfa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e01d      	b.n	8007dfa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007dbe:	4b11      	ldr	r3, [pc, #68]	@ (8007e04 <HAL_PWREx_ConfigSupply+0x70>)
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f023 0207 	bic.w	r2, r3, #7
 8007dc6:	490f      	ldr	r1, [pc, #60]	@ (8007e04 <HAL_PWREx_ConfigSupply+0x70>)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007dce:	f7fa fa67 	bl	80022a0 <HAL_GetTick>
 8007dd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dd4:	e009      	b.n	8007dea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007dd6:	f7fa fa63 	bl	80022a0 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007de4:	d901      	bls.n	8007dea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e007      	b.n	8007dfa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dea:	4b06      	ldr	r3, [pc, #24]	@ (8007e04 <HAL_PWREx_ConfigSupply+0x70>)
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007df6:	d1ee      	bne.n	8007dd6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	58024800 	.word	0x58024800

08007e08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08c      	sub	sp, #48	@ 0x30
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d102      	bne.n	8007e1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f000 bc48 	b.w	80086ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 808c 	beq.w	8007f42 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e2a:	4b96      	ldr	r3, [pc, #600]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e34:	4b93      	ldr	r3, [pc, #588]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3c:	2b10      	cmp	r3, #16
 8007e3e:	d007      	beq.n	8007e50 <HAL_RCC_OscConfig+0x48>
 8007e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e42:	2b18      	cmp	r3, #24
 8007e44:	d111      	bne.n	8007e6a <HAL_RCC_OscConfig+0x62>
 8007e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e48:	f003 0303 	and.w	r3, r3, #3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d10c      	bne.n	8007e6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e50:	4b8c      	ldr	r3, [pc, #560]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d071      	beq.n	8007f40 <HAL_RCC_OscConfig+0x138>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d16d      	bne.n	8007f40 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f000 bc21 	b.w	80086ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e72:	d106      	bne.n	8007e82 <HAL_RCC_OscConfig+0x7a>
 8007e74:	4b83      	ldr	r3, [pc, #524]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a82      	ldr	r2, [pc, #520]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	e02e      	b.n	8007ee0 <HAL_RCC_OscConfig+0xd8>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10c      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x9c>
 8007e8a:	4b7e      	ldr	r3, [pc, #504]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a7d      	ldr	r2, [pc, #500]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	4b7b      	ldr	r3, [pc, #492]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a7a      	ldr	r2, [pc, #488]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007e9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	e01d      	b.n	8007ee0 <HAL_RCC_OscConfig+0xd8>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007eac:	d10c      	bne.n	8007ec8 <HAL_RCC_OscConfig+0xc0>
 8007eae:	4b75      	ldr	r3, [pc, #468]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a74      	ldr	r2, [pc, #464]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	4b72      	ldr	r3, [pc, #456]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a71      	ldr	r2, [pc, #452]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	e00b      	b.n	8007ee0 <HAL_RCC_OscConfig+0xd8>
 8007ec8:	4b6e      	ldr	r3, [pc, #440]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	4b6b      	ldr	r3, [pc, #428]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a6a      	ldr	r2, [pc, #424]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d015      	beq.n	8007f14 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee8:	f7fa f9da 	bl	80022a0 <HAL_GetTick>
 8007eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007eee:	e00a      	b.n	8007f06 <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ef0:	f7fa f9d6 	bl	80022a0 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e3d2      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f06:	4b5f      	ldr	r3, [pc, #380]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0ee      	beq.n	8007ef0 <HAL_RCC_OscConfig+0xe8>
 8007f12:	e016      	b.n	8007f42 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f14:	f7fa f9c4 	bl	80022a0 <HAL_GetTick>
 8007f18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f1a:	e00a      	b.n	8007f32 <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f1c:	f7fa f9c0 	bl	80022a0 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d901      	bls.n	8007f32 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e3bc      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f32:	4b54      	ldr	r3, [pc, #336]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1ee      	bne.n	8007f1c <HAL_RCC_OscConfig+0x114>
 8007f3e:	e000      	b.n	8007f42 <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80cb 	beq.w	80080e6 <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f50:	4b4c      	ldr	r3, [pc, #304]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d007      	beq.n	8007f76 <HAL_RCC_OscConfig+0x16e>
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	2b18      	cmp	r3, #24
 8007f6a:	d156      	bne.n	800801a <HAL_RCC_OscConfig+0x212>
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f003 0303 	and.w	r3, r3, #3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d151      	bne.n	800801a <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f76:	4b43      	ldr	r3, [pc, #268]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0304 	and.w	r3, r3, #4
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d005      	beq.n	8007f8e <HAL_RCC_OscConfig+0x186>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e38e      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f023 0219 	bic.w	r2, r3, #25
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	493a      	ldr	r1, [pc, #232]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa0:	f7fa f97e 	bl	80022a0 <HAL_GetTick>
 8007fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fa6:	e008      	b.n	8007fba <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fa8:	f7fa f97a 	bl	80022a0 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e378      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fba:	4b32      	ldr	r3, [pc, #200]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0f0      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fc6:	f7fa f99b 	bl	8002300 <HAL_GetREVID>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d817      	bhi.n	8008004 <HAL_RCC_OscConfig+0x1fc>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	2b40      	cmp	r3, #64	@ 0x40
 8007fda:	d108      	bne.n	8007fee <HAL_RCC_OscConfig+0x1e6>
 8007fdc:	4b29      	ldr	r3, [pc, #164]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007fe4:	4a27      	ldr	r2, [pc, #156]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fec:	e07b      	b.n	80080e6 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fee:	4b25      	ldr	r3, [pc, #148]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	031b      	lsls	r3, r3, #12
 8007ffc:	4921      	ldr	r1, [pc, #132]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008002:	e070      	b.n	80080e6 <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008004:	4b1f      	ldr	r3, [pc, #124]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	061b      	lsls	r3, r3, #24
 8008012:	491c      	ldr	r1, [pc, #112]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8008014:	4313      	orrs	r3, r2
 8008016:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008018:	e065      	b.n	80080e6 <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d048      	beq.n	80080b4 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008022:	4b18      	ldr	r3, [pc, #96]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f023 0219 	bic.w	r2, r3, #25
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	4915      	ldr	r1, [pc, #84]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8008030:	4313      	orrs	r3, r2
 8008032:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008034:	f7fa f934 	bl	80022a0 <HAL_GetTick>
 8008038:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800803a:	e008      	b.n	800804e <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800803c:	f7fa f930 	bl	80022a0 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b02      	cmp	r3, #2
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e32e      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800804e:	4b0d      	ldr	r3, [pc, #52]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0304 	and.w	r3, r3, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0f0      	beq.n	800803c <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800805a:	f7fa f951 	bl	8002300 <HAL_GetREVID>
 800805e:	4603      	mov	r3, r0
 8008060:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008064:	4293      	cmp	r3, r2
 8008066:	d81a      	bhi.n	800809e <HAL_RCC_OscConfig+0x296>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	2b40      	cmp	r3, #64	@ 0x40
 800806e:	d10b      	bne.n	8008088 <HAL_RCC_OscConfig+0x280>
 8008070:	4b04      	ldr	r3, [pc, #16]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008078:	4a02      	ldr	r2, [pc, #8]	@ (8008084 <HAL_RCC_OscConfig+0x27c>)
 800807a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800807e:	6053      	str	r3, [r2, #4]
 8008080:	e031      	b.n	80080e6 <HAL_RCC_OscConfig+0x2de>
 8008082:	bf00      	nop
 8008084:	58024400 	.word	0x58024400
 8008088:	4b9c      	ldr	r3, [pc, #624]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	031b      	lsls	r3, r3, #12
 8008096:	4999      	ldr	r1, [pc, #612]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008098:	4313      	orrs	r3, r2
 800809a:	604b      	str	r3, [r1, #4]
 800809c:	e023      	b.n	80080e6 <HAL_RCC_OscConfig+0x2de>
 800809e:	4b97      	ldr	r3, [pc, #604]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	061b      	lsls	r3, r3, #24
 80080ac:	4993      	ldr	r1, [pc, #588]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80080ae:	4313      	orrs	r3, r2
 80080b0:	604b      	str	r3, [r1, #4]
 80080b2:	e018      	b.n	80080e6 <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080b4:	4b91      	ldr	r3, [pc, #580]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a90      	ldr	r2, [pc, #576]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80080ba:	f023 0301 	bic.w	r3, r3, #1
 80080be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c0:	f7fa f8ee 	bl	80022a0 <HAL_GetTick>
 80080c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080c6:	e008      	b.n	80080da <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080c8:	f7fa f8ea 	bl	80022a0 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d901      	bls.n	80080da <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e2e8      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080da:	4b88      	ldr	r3, [pc, #544]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1f0      	bne.n	80080c8 <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0310 	and.w	r3, r3, #16
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80a9 	beq.w	8008246 <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080f4:	4b81      	ldr	r3, [pc, #516]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080fc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080fe:	4b7f      	ldr	r3, [pc, #508]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008102:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	2b08      	cmp	r3, #8
 8008108:	d007      	beq.n	800811a <HAL_RCC_OscConfig+0x312>
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	2b18      	cmp	r3, #24
 800810e:	d13a      	bne.n	8008186 <HAL_RCC_OscConfig+0x37e>
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b01      	cmp	r3, #1
 8008118:	d135      	bne.n	8008186 <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800811a:	4b78      	ldr	r3, [pc, #480]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <HAL_RCC_OscConfig+0x32a>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	2b80      	cmp	r3, #128	@ 0x80
 800812c:	d001      	beq.n	8008132 <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e2bc      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008132:	f7fa f8e5 	bl	8002300 <HAL_GetREVID>
 8008136:	4603      	mov	r3, r0
 8008138:	f241 0203 	movw	r2, #4099	@ 0x1003
 800813c:	4293      	cmp	r3, r2
 800813e:	d817      	bhi.n	8008170 <HAL_RCC_OscConfig+0x368>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	2b20      	cmp	r3, #32
 8008146:	d108      	bne.n	800815a <HAL_RCC_OscConfig+0x352>
 8008148:	4b6c      	ldr	r3, [pc, #432]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008150:	4a6a      	ldr	r2, [pc, #424]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008152:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008156:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008158:	e075      	b.n	8008246 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800815a:	4b68      	ldr	r3, [pc, #416]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	069b      	lsls	r3, r3, #26
 8008168:	4964      	ldr	r1, [pc, #400]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 800816a:	4313      	orrs	r3, r2
 800816c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800816e:	e06a      	b.n	8008246 <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008170:	4b62      	ldr	r3, [pc, #392]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	061b      	lsls	r3, r3, #24
 800817e:	495f      	ldr	r1, [pc, #380]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008180:	4313      	orrs	r3, r2
 8008182:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008184:	e05f      	b.n	8008246 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d042      	beq.n	8008214 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800818e:	4b5b      	ldr	r3, [pc, #364]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a5a      	ldr	r2, [pc, #360]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800819a:	f7fa f881 	bl	80022a0 <HAL_GetTick>
 800819e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081a0:	e008      	b.n	80081b4 <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80081a2:	f7fa f87d 	bl	80022a0 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e27b      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081b4:	4b51      	ldr	r3, [pc, #324]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0f0      	beq.n	80081a2 <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081c0:	f7fa f89e 	bl	8002300 <HAL_GetREVID>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d817      	bhi.n	80081fe <HAL_RCC_OscConfig+0x3f6>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	2b20      	cmp	r3, #32
 80081d4:	d108      	bne.n	80081e8 <HAL_RCC_OscConfig+0x3e0>
 80081d6:	4b49      	ldr	r3, [pc, #292]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80081de:	4a47      	ldr	r2, [pc, #284]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80081e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081e4:	6053      	str	r3, [r2, #4]
 80081e6:	e02e      	b.n	8008246 <HAL_RCC_OscConfig+0x43e>
 80081e8:	4b44      	ldr	r3, [pc, #272]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	069b      	lsls	r3, r3, #26
 80081f6:	4941      	ldr	r1, [pc, #260]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	604b      	str	r3, [r1, #4]
 80081fc:	e023      	b.n	8008246 <HAL_RCC_OscConfig+0x43e>
 80081fe:	4b3f      	ldr	r3, [pc, #252]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	061b      	lsls	r3, r3, #24
 800820c:	493b      	ldr	r1, [pc, #236]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 800820e:	4313      	orrs	r3, r2
 8008210:	60cb      	str	r3, [r1, #12]
 8008212:	e018      	b.n	8008246 <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008214:	4b39      	ldr	r3, [pc, #228]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a38      	ldr	r2, [pc, #224]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 800821a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800821e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008220:	f7fa f83e 	bl	80022a0 <HAL_GetTick>
 8008224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008226:	e008      	b.n	800823a <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008228:	f7fa f83a 	bl	80022a0 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b02      	cmp	r3, #2
 8008234:	d901      	bls.n	800823a <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e238      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800823a:	4b30      	ldr	r3, [pc, #192]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1f0      	bne.n	8008228 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0308 	and.w	r3, r3, #8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d036      	beq.n	80082c0 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d019      	beq.n	800828e <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800825a:	4b28      	ldr	r3, [pc, #160]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 800825c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800825e:	4a27      	ldr	r2, [pc, #156]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008260:	f043 0301 	orr.w	r3, r3, #1
 8008264:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008266:	f7fa f81b 	bl	80022a0 <HAL_GetTick>
 800826a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800826c:	e008      	b.n	8008280 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800826e:	f7fa f817 	bl	80022a0 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e215      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008280:	4b1e      	ldr	r3, [pc, #120]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0f0      	beq.n	800826e <HAL_RCC_OscConfig+0x466>
 800828c:	e018      	b.n	80082c0 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800828e:	4b1b      	ldr	r3, [pc, #108]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008292:	4a1a      	ldr	r2, [pc, #104]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 8008294:	f023 0301 	bic.w	r3, r3, #1
 8008298:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800829a:	f7fa f801 	bl	80022a0 <HAL_GetTick>
 800829e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082a0:	e008      	b.n	80082b4 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082a2:	f7f9 fffd 	bl	80022a0 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d901      	bls.n	80082b4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e1fb      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082b4:	4b11      	ldr	r3, [pc, #68]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80082b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1f0      	bne.n	80082a2 <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0320 	and.w	r3, r3, #32
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d039      	beq.n	8008340 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01c      	beq.n	800830e <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80082d4:	4b09      	ldr	r3, [pc, #36]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a08      	ldr	r2, [pc, #32]	@ (80082fc <HAL_RCC_OscConfig+0x4f4>)
 80082da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80082de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082e0:	f7f9 ffde 	bl	80022a0 <HAL_GetTick>
 80082e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082e6:	e00b      	b.n	8008300 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082e8:	f7f9 ffda 	bl	80022a0 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d904      	bls.n	8008300 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e1d8      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
 80082fa:	bf00      	nop
 80082fc:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008300:	4b65      	ldr	r3, [pc, #404]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d0ed      	beq.n	80082e8 <HAL_RCC_OscConfig+0x4e0>
 800830c:	e018      	b.n	8008340 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800830e:	4b62      	ldr	r3, [pc, #392]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a61      	ldr	r2, [pc, #388]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 8008314:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008318:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800831a:	f7f9 ffc1 	bl	80022a0 <HAL_GetTick>
 800831e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008320:	e008      	b.n	8008334 <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008322:	f7f9 ffbd 	bl	80022a0 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d901      	bls.n	8008334 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e1bb      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008334:	4b58      	ldr	r3, [pc, #352]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1f0      	bne.n	8008322 <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 8081 	beq.w	8008450 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800834e:	4b53      	ldr	r3, [pc, #332]	@ (800849c <HAL_RCC_OscConfig+0x694>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a52      	ldr	r2, [pc, #328]	@ (800849c <HAL_RCC_OscConfig+0x694>)
 8008354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800835a:	f7f9 ffa1 	bl	80022a0 <HAL_GetTick>
 800835e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008360:	e008      	b.n	8008374 <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008362:	f7f9 ff9d 	bl	80022a0 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b64      	cmp	r3, #100	@ 0x64
 800836e:	d901      	bls.n	8008374 <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e19b      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008374:	4b49      	ldr	r3, [pc, #292]	@ (800849c <HAL_RCC_OscConfig+0x694>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0f0      	beq.n	8008362 <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d106      	bne.n	8008396 <HAL_RCC_OscConfig+0x58e>
 8008388:	4b43      	ldr	r3, [pc, #268]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 800838a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800838c:	4a42      	ldr	r2, [pc, #264]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 800838e:	f043 0301 	orr.w	r3, r3, #1
 8008392:	6713      	str	r3, [r2, #112]	@ 0x70
 8008394:	e02d      	b.n	80083f2 <HAL_RCC_OscConfig+0x5ea>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10c      	bne.n	80083b8 <HAL_RCC_OscConfig+0x5b0>
 800839e:	4b3e      	ldr	r3, [pc, #248]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083a2:	4a3d      	ldr	r2, [pc, #244]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083a4:	f023 0301 	bic.w	r3, r3, #1
 80083a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80083aa:	4b3b      	ldr	r3, [pc, #236]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ae:	4a3a      	ldr	r2, [pc, #232]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083b0:	f023 0304 	bic.w	r3, r3, #4
 80083b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80083b6:	e01c      	b.n	80083f2 <HAL_RCC_OscConfig+0x5ea>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	2b05      	cmp	r3, #5
 80083be:	d10c      	bne.n	80083da <HAL_RCC_OscConfig+0x5d2>
 80083c0:	4b35      	ldr	r3, [pc, #212]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c4:	4a34      	ldr	r2, [pc, #208]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083c6:	f043 0304 	orr.w	r3, r3, #4
 80083ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80083cc:	4b32      	ldr	r3, [pc, #200]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d0:	4a31      	ldr	r2, [pc, #196]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083d2:	f043 0301 	orr.w	r3, r3, #1
 80083d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80083d8:	e00b      	b.n	80083f2 <HAL_RCC_OscConfig+0x5ea>
 80083da:	4b2f      	ldr	r3, [pc, #188]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083de:	4a2e      	ldr	r2, [pc, #184]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083e0:	f023 0301 	bic.w	r3, r3, #1
 80083e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80083e6:	4b2c      	ldr	r3, [pc, #176]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ea:	4a2b      	ldr	r2, [pc, #172]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 80083ec:	f023 0304 	bic.w	r3, r3, #4
 80083f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d015      	beq.n	8008426 <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083fa:	f7f9 ff51 	bl	80022a0 <HAL_GetTick>
 80083fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008400:	e00a      	b.n	8008418 <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008402:	f7f9 ff4d 	bl	80022a0 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008410:	4293      	cmp	r3, r2
 8008412:	d901      	bls.n	8008418 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e149      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008418:	4b1f      	ldr	r3, [pc, #124]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 800841a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0ee      	beq.n	8008402 <HAL_RCC_OscConfig+0x5fa>
 8008424:	e014      	b.n	8008450 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008426:	f7f9 ff3b 	bl	80022a0 <HAL_GetTick>
 800842a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800842c:	e00a      	b.n	8008444 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800842e:	f7f9 ff37 	bl	80022a0 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800843c:	4293      	cmp	r3, r2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e133      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008444:	4b14      	ldr	r3, [pc, #80]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 8008446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1ee      	bne.n	800842e <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 8128 	beq.w	80086aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800845a:	4b0f      	ldr	r3, [pc, #60]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008462:	2b18      	cmp	r3, #24
 8008464:	f000 80b8 	beq.w	80085d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846c:	2b02      	cmp	r3, #2
 800846e:	f040 8099 	bne.w	80085a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008472:	4b09      	ldr	r3, [pc, #36]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a08      	ldr	r2, [pc, #32]	@ (8008498 <HAL_RCC_OscConfig+0x690>)
 8008478:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800847c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847e:	f7f9 ff0f 	bl	80022a0 <HAL_GetTick>
 8008482:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008484:	e00c      	b.n	80084a0 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008486:	f7f9 ff0b 	bl	80022a0 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d905      	bls.n	80084a0 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e109      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
 8008498:	58024400 	.word	0x58024400
 800849c:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084a0:	4b84      	ldr	r3, [pc, #528]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1ec      	bne.n	8008486 <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084ac:	4b81      	ldr	r3, [pc, #516]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80084ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084b0:	4b81      	ldr	r3, [pc, #516]	@ (80086b8 <HAL_RCC_OscConfig+0x8b0>)
 80084b2:	4013      	ands	r3, r2
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80084bc:	0112      	lsls	r2, r2, #4
 80084be:	430a      	orrs	r2, r1
 80084c0:	497c      	ldr	r1, [pc, #496]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ca:	3b01      	subs	r3, #1
 80084cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084d4:	3b01      	subs	r3, #1
 80084d6:	025b      	lsls	r3, r3, #9
 80084d8:	b29b      	uxth	r3, r3
 80084da:	431a      	orrs	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e0:	3b01      	subs	r3, #1
 80084e2:	041b      	lsls	r3, r3, #16
 80084e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ee:	3b01      	subs	r3, #1
 80084f0:	061b      	lsls	r3, r3, #24
 80084f2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80084f6:	496f      	ldr	r1, [pc, #444]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80084fc:	4b6d      	ldr	r3, [pc, #436]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80084fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008500:	4a6c      	ldr	r2, [pc, #432]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008502:	f023 0301 	bic.w	r3, r3, #1
 8008506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008508:	4b6a      	ldr	r3, [pc, #424]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 800850a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800850c:	4b6b      	ldr	r3, [pc, #428]	@ (80086bc <HAL_RCC_OscConfig+0x8b4>)
 800850e:	4013      	ands	r3, r2
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008514:	00d2      	lsls	r2, r2, #3
 8008516:	4967      	ldr	r1, [pc, #412]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008518:	4313      	orrs	r3, r2
 800851a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800851c:	4b65      	ldr	r3, [pc, #404]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 800851e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008520:	f023 020c 	bic.w	r2, r3, #12
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008528:	4962      	ldr	r1, [pc, #392]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 800852a:	4313      	orrs	r3, r2
 800852c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800852e:	4b61      	ldr	r3, [pc, #388]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008532:	f023 0202 	bic.w	r2, r3, #2
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800853a:	495e      	ldr	r1, [pc, #376]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 800853c:	4313      	orrs	r3, r2
 800853e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008540:	4b5c      	ldr	r3, [pc, #368]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008544:	4a5b      	ldr	r2, [pc, #364]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800854a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800854c:	4b59      	ldr	r3, [pc, #356]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 800854e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008550:	4a58      	ldr	r2, [pc, #352]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008558:	4b56      	ldr	r3, [pc, #344]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 800855a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855c:	4a55      	ldr	r2, [pc, #340]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 800855e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008564:	4b53      	ldr	r3, [pc, #332]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008568:	4a52      	ldr	r2, [pc, #328]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008570:	4b50      	ldr	r3, [pc, #320]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a4f      	ldr	r2, [pc, #316]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008576:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800857a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800857c:	f7f9 fe90 	bl	80022a0 <HAL_GetTick>
 8008580:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008582:	e008      	b.n	8008596 <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008584:	f7f9 fe8c 	bl	80022a0 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	2b02      	cmp	r3, #2
 8008590:	d901      	bls.n	8008596 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e08a      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008596:	4b47      	ldr	r3, [pc, #284]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d0f0      	beq.n	8008584 <HAL_RCC_OscConfig+0x77c>
 80085a2:	e082      	b.n	80086aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085a4:	4b43      	ldr	r3, [pc, #268]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a42      	ldr	r2, [pc, #264]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80085aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b0:	f7f9 fe76 	bl	80022a0 <HAL_GetTick>
 80085b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085b8:	f7f9 fe72 	bl	80022a0 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e070      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085ca:	4b3a      	ldr	r3, [pc, #232]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1f0      	bne.n	80085b8 <HAL_RCC_OscConfig+0x7b0>
 80085d6:	e068      	b.n	80086aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80085d8:	4b36      	ldr	r3, [pc, #216]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80085da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80085de:	4b35      	ldr	r3, [pc, #212]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80085e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d031      	beq.n	8008650 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f003 0203 	and.w	r2, r3, #3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d12a      	bne.n	8008650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	091b      	lsrs	r3, r3, #4
 80085fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008606:	429a      	cmp	r2, r3
 8008608:	d122      	bne.n	8008650 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008614:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008616:	429a      	cmp	r2, r3
 8008618:	d11a      	bne.n	8008650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	0a5b      	lsrs	r3, r3, #9
 800861e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008626:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008628:	429a      	cmp	r2, r3
 800862a:	d111      	bne.n	8008650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	0c1b      	lsrs	r3, r3, #16
 8008630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008638:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800863a:	429a      	cmp	r2, r3
 800863c:	d108      	bne.n	8008650 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	0e1b      	lsrs	r3, r3, #24
 8008642:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800864a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800864c:	429a      	cmp	r2, r3
 800864e:	d001      	beq.n	8008654 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e02b      	b.n	80086ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008654:	4b17      	ldr	r3, [pc, #92]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008658:	08db      	lsrs	r3, r3, #3
 800865a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800865e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	429a      	cmp	r2, r3
 8008668:	d01f      	beq.n	80086aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800866a:	4b12      	ldr	r3, [pc, #72]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 800866c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866e:	4a11      	ldr	r2, [pc, #68]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008676:	f7f9 fe13 	bl	80022a0 <HAL_GetTick>
 800867a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800867c:	bf00      	nop
 800867e:	f7f9 fe0f 	bl	80022a0 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008686:	4293      	cmp	r3, r2
 8008688:	d0f9      	beq.n	800867e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800868a:	4b0a      	ldr	r3, [pc, #40]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 800868c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800868e:	4b0b      	ldr	r3, [pc, #44]	@ (80086bc <HAL_RCC_OscConfig+0x8b4>)
 8008690:	4013      	ands	r3, r2
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008696:	00d2      	lsls	r2, r2, #3
 8008698:	4906      	ldr	r1, [pc, #24]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 800869a:	4313      	orrs	r3, r2
 800869c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800869e:	4b05      	ldr	r3, [pc, #20]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80086a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a2:	4a04      	ldr	r2, [pc, #16]	@ (80086b4 <HAL_RCC_OscConfig+0x8ac>)
 80086a4:	f043 0301 	orr.w	r3, r3, #1
 80086a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3730      	adds	r7, #48	@ 0x30
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	58024400 	.word	0x58024400
 80086b8:	fffffc0c 	.word	0xfffffc0c
 80086bc:	ffff0007 	.word	0xffff0007

080086c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e19c      	b.n	8008a0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086d4:	4b8a      	ldr	r3, [pc, #552]	@ (8008900 <HAL_RCC_ClockConfig+0x240>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 030f 	and.w	r3, r3, #15
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d910      	bls.n	8008704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086e2:	4b87      	ldr	r3, [pc, #540]	@ (8008900 <HAL_RCC_ClockConfig+0x240>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f023 020f 	bic.w	r2, r3, #15
 80086ea:	4985      	ldr	r1, [pc, #532]	@ (8008900 <HAL_RCC_ClockConfig+0x240>)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086f2:	4b83      	ldr	r3, [pc, #524]	@ (8008900 <HAL_RCC_ClockConfig+0x240>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 030f 	and.w	r3, r3, #15
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d001      	beq.n	8008704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e184      	b.n	8008a0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d010      	beq.n	8008732 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691a      	ldr	r2, [r3, #16]
 8008714:	4b7b      	ldr	r3, [pc, #492]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800871c:	429a      	cmp	r2, r3
 800871e:	d908      	bls.n	8008732 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008720:	4b78      	ldr	r3, [pc, #480]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	4975      	ldr	r1, [pc, #468]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 800872e:	4313      	orrs	r3, r2
 8008730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0308 	and.w	r3, r3, #8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d010      	beq.n	8008760 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	695a      	ldr	r2, [r3, #20]
 8008742:	4b70      	ldr	r3, [pc, #448]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800874a:	429a      	cmp	r2, r3
 800874c:	d908      	bls.n	8008760 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800874e:	4b6d      	ldr	r3, [pc, #436]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	496a      	ldr	r1, [pc, #424]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 800875c:	4313      	orrs	r3, r2
 800875e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0310 	and.w	r3, r3, #16
 8008768:	2b00      	cmp	r3, #0
 800876a:	d010      	beq.n	800878e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	699a      	ldr	r2, [r3, #24]
 8008770:	4b64      	ldr	r3, [pc, #400]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008778:	429a      	cmp	r2, r3
 800877a:	d908      	bls.n	800878e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800877c:	4b61      	ldr	r3, [pc, #388]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 800877e:	69db      	ldr	r3, [r3, #28]
 8008780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	495e      	ldr	r1, [pc, #376]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 800878a:	4313      	orrs	r3, r2
 800878c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	d010      	beq.n	80087bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69da      	ldr	r2, [r3, #28]
 800879e:	4b59      	ldr	r3, [pc, #356]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d908      	bls.n	80087bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80087aa:	4b56      	ldr	r3, [pc, #344]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	4953      	ldr	r1, [pc, #332]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d010      	beq.n	80087ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68da      	ldr	r2, [r3, #12]
 80087cc:	4b4d      	ldr	r3, [pc, #308]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	f003 030f 	and.w	r3, r3, #15
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d908      	bls.n	80087ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087d8:	4b4a      	ldr	r3, [pc, #296]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	f023 020f 	bic.w	r2, r3, #15
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	4947      	ldr	r1, [pc, #284]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d055      	beq.n	80088a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80087f6:	4b43      	ldr	r3, [pc, #268]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	4940      	ldr	r1, [pc, #256]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 8008804:	4313      	orrs	r3, r2
 8008806:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d107      	bne.n	8008820 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008810:	4b3c      	ldr	r3, [pc, #240]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d121      	bne.n	8008860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e0f6      	b.n	8008a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	2b03      	cmp	r3, #3
 8008826:	d107      	bne.n	8008838 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008828:	4b36      	ldr	r3, [pc, #216]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d115      	bne.n	8008860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e0ea      	b.n	8008a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d107      	bne.n	8008850 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008840:	4b30      	ldr	r3, [pc, #192]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008848:	2b00      	cmp	r3, #0
 800884a:	d109      	bne.n	8008860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e0de      	b.n	8008a0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008850:	4b2c      	ldr	r3, [pc, #176]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d101      	bne.n	8008860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e0d6      	b.n	8008a0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008860:	4b28      	ldr	r3, [pc, #160]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	f023 0207 	bic.w	r2, r3, #7
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	4925      	ldr	r1, [pc, #148]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 800886e:	4313      	orrs	r3, r2
 8008870:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008872:	f7f9 fd15 	bl	80022a0 <HAL_GetTick>
 8008876:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008878:	e00a      	b.n	8008890 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800887a:	f7f9 fd11 	bl	80022a0 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008888:	4293      	cmp	r3, r2
 800888a:	d901      	bls.n	8008890 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e0be      	b.n	8008a0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008890:	4b1c      	ldr	r3, [pc, #112]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	00db      	lsls	r3, r3, #3
 800889e:	429a      	cmp	r2, r3
 80088a0:	d1eb      	bne.n	800887a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d010      	beq.n	80088d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	4b14      	ldr	r3, [pc, #80]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d208      	bcs.n	80088d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088be:	4b11      	ldr	r3, [pc, #68]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	f023 020f 	bic.w	r2, r3, #15
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	490e      	ldr	r1, [pc, #56]	@ (8008904 <HAL_RCC_ClockConfig+0x244>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008900 <HAL_RCC_ClockConfig+0x240>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 030f 	and.w	r3, r3, #15
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d214      	bcs.n	8008908 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088de:	4b08      	ldr	r3, [pc, #32]	@ (8008900 <HAL_RCC_ClockConfig+0x240>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f023 020f 	bic.w	r2, r3, #15
 80088e6:	4906      	ldr	r1, [pc, #24]	@ (8008900 <HAL_RCC_ClockConfig+0x240>)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ee:	4b04      	ldr	r3, [pc, #16]	@ (8008900 <HAL_RCC_ClockConfig+0x240>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d005      	beq.n	8008908 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e086      	b.n	8008a0e <HAL_RCC_ClockConfig+0x34e>
 8008900:	52002000 	.word	0x52002000
 8008904:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	d010      	beq.n	8008936 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691a      	ldr	r2, [r3, #16]
 8008918:	4b3f      	ldr	r3, [pc, #252]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008920:	429a      	cmp	r2, r3
 8008922:	d208      	bcs.n	8008936 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008924:	4b3c      	ldr	r3, [pc, #240]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	4939      	ldr	r1, [pc, #228]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 8008932:	4313      	orrs	r3, r2
 8008934:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0308 	and.w	r3, r3, #8
 800893e:	2b00      	cmp	r3, #0
 8008940:	d010      	beq.n	8008964 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	695a      	ldr	r2, [r3, #20]
 8008946:	4b34      	ldr	r3, [pc, #208]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800894e:	429a      	cmp	r2, r3
 8008950:	d208      	bcs.n	8008964 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008952:	4b31      	ldr	r3, [pc, #196]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	492e      	ldr	r1, [pc, #184]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 8008960:	4313      	orrs	r3, r2
 8008962:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	2b00      	cmp	r3, #0
 800896e:	d010      	beq.n	8008992 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699a      	ldr	r2, [r3, #24]
 8008974:	4b28      	ldr	r3, [pc, #160]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 8008976:	69db      	ldr	r3, [r3, #28]
 8008978:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800897c:	429a      	cmp	r2, r3
 800897e:	d208      	bcs.n	8008992 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008980:	4b25      	ldr	r3, [pc, #148]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 8008982:	69db      	ldr	r3, [r3, #28]
 8008984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	4922      	ldr	r1, [pc, #136]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 800898e:	4313      	orrs	r3, r2
 8008990:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0320 	and.w	r3, r3, #32
 800899a:	2b00      	cmp	r3, #0
 800899c:	d010      	beq.n	80089c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	69da      	ldr	r2, [r3, #28]
 80089a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d208      	bcs.n	80089c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80089ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	4917      	ldr	r1, [pc, #92]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80089c0:	f000 f834 	bl	8008a2c <HAL_RCC_GetSysClockFreq>
 80089c4:	4602      	mov	r2, r0
 80089c6:	4b14      	ldr	r3, [pc, #80]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	0a1b      	lsrs	r3, r3, #8
 80089cc:	f003 030f 	and.w	r3, r3, #15
 80089d0:	4912      	ldr	r1, [pc, #72]	@ (8008a1c <HAL_RCC_ClockConfig+0x35c>)
 80089d2:	5ccb      	ldrb	r3, [r1, r3]
 80089d4:	f003 031f 	and.w	r3, r3, #31
 80089d8:	fa22 f303 	lsr.w	r3, r2, r3
 80089dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089de:	4b0e      	ldr	r3, [pc, #56]	@ (8008a18 <HAL_RCC_ClockConfig+0x358>)
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	4a0d      	ldr	r2, [pc, #52]	@ (8008a1c <HAL_RCC_ClockConfig+0x35c>)
 80089e8:	5cd3      	ldrb	r3, [r2, r3]
 80089ea:	f003 031f 	and.w	r3, r3, #31
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	fa22 f303 	lsr.w	r3, r2, r3
 80089f4:	4a0a      	ldr	r2, [pc, #40]	@ (8008a20 <HAL_RCC_ClockConfig+0x360>)
 80089f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008a24 <HAL_RCC_ClockConfig+0x364>)
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80089fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008a28 <HAL_RCC_ClockConfig+0x368>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7f9 fc02 	bl	800220c <HAL_InitTick>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	58024400 	.word	0x58024400
 8008a1c:	080137c0 	.word	0x080137c0
 8008a20:	24000004 	.word	0x24000004
 8008a24:	24000000 	.word	0x24000000
 8008a28:	24000008 	.word	0x24000008

08008a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b089      	sub	sp, #36	@ 0x24
 8008a30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a32:	4bb3      	ldr	r3, [pc, #716]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a3a:	2b18      	cmp	r3, #24
 8008a3c:	f200 8155 	bhi.w	8008cea <HAL_RCC_GetSysClockFreq+0x2be>
 8008a40:	a201      	add	r2, pc, #4	@ (adr r2, 8008a48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008aad 	.word	0x08008aad
 8008a4c:	08008ceb 	.word	0x08008ceb
 8008a50:	08008ceb 	.word	0x08008ceb
 8008a54:	08008ceb 	.word	0x08008ceb
 8008a58:	08008ceb 	.word	0x08008ceb
 8008a5c:	08008ceb 	.word	0x08008ceb
 8008a60:	08008ceb 	.word	0x08008ceb
 8008a64:	08008ceb 	.word	0x08008ceb
 8008a68:	08008ad3 	.word	0x08008ad3
 8008a6c:	08008ceb 	.word	0x08008ceb
 8008a70:	08008ceb 	.word	0x08008ceb
 8008a74:	08008ceb 	.word	0x08008ceb
 8008a78:	08008ceb 	.word	0x08008ceb
 8008a7c:	08008ceb 	.word	0x08008ceb
 8008a80:	08008ceb 	.word	0x08008ceb
 8008a84:	08008ceb 	.word	0x08008ceb
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	08008ceb 	.word	0x08008ceb
 8008a90:	08008ceb 	.word	0x08008ceb
 8008a94:	08008ceb 	.word	0x08008ceb
 8008a98:	08008ceb 	.word	0x08008ceb
 8008a9c:	08008ceb 	.word	0x08008ceb
 8008aa0:	08008ceb 	.word	0x08008ceb
 8008aa4:	08008ceb 	.word	0x08008ceb
 8008aa8:	08008adf 	.word	0x08008adf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aac:	4b94      	ldr	r3, [pc, #592]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 0320 	and.w	r3, r3, #32
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d009      	beq.n	8008acc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ab8:	4b91      	ldr	r3, [pc, #580]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	08db      	lsrs	r3, r3, #3
 8008abe:	f003 0303 	and.w	r3, r3, #3
 8008ac2:	4a90      	ldr	r2, [pc, #576]	@ (8008d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008aca:	e111      	b.n	8008cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008acc:	4b8d      	ldr	r3, [pc, #564]	@ (8008d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ace:	61bb      	str	r3, [r7, #24]
      break;
 8008ad0:	e10e      	b.n	8008cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8008d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ad4:	61bb      	str	r3, [r7, #24]
      break;
 8008ad6:	e10b      	b.n	8008cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008ad8:	4b8c      	ldr	r3, [pc, #560]	@ (8008d0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008ada:	61bb      	str	r3, [r7, #24]
      break;
 8008adc:	e108      	b.n	8008cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ade:	4b88      	ldr	r3, [pc, #544]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008ae8:	4b85      	ldr	r3, [pc, #532]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aec:	091b      	lsrs	r3, r3, #4
 8008aee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008af2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008af4:	4b82      	ldr	r3, [pc, #520]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008afe:	4b80      	ldr	r3, [pc, #512]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b02:	08db      	lsrs	r3, r3, #3
 8008b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	fb02 f303 	mul.w	r3, r2, r3
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f000 80e1 	beq.w	8008ce4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	f000 8083 	beq.w	8008c30 <HAL_RCC_GetSysClockFreq+0x204>
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	f200 80a1 	bhi.w	8008c74 <HAL_RCC_GetSysClockFreq+0x248>
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <HAL_RCC_GetSysClockFreq+0x114>
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d056      	beq.n	8008bec <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b3e:	e099      	b.n	8008c74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b40:	4b6f      	ldr	r3, [pc, #444]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0320 	and.w	r3, r3, #32
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d02d      	beq.n	8008ba8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	08db      	lsrs	r3, r3, #3
 8008b52:	f003 0303 	and.w	r3, r3, #3
 8008b56:	4a6b      	ldr	r2, [pc, #428]	@ (8008d04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b58:	fa22 f303 	lsr.w	r3, r2, r3
 8008b5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	ee07 3a90 	vmov	s15, r3
 8008b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b76:	4b62      	ldr	r3, [pc, #392]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b86:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b8a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008ba6:	e087      	b.n	8008cb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	ee07 3a90 	vmov	s15, r3
 8008bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008d14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bba:	4b51      	ldr	r3, [pc, #324]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bca:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bea:	e065      	b.n	8008cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bfe:	4b40      	ldr	r3, [pc, #256]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c12:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c2e:	e043      	b.n	8008cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008d1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c42:	4b2f      	ldr	r3, [pc, #188]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c56:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c72:	e021      	b.n	8008cb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008d18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c86:	4b1e      	ldr	r3, [pc, #120]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8e:	ee07 3a90 	vmov	s15, r3
 8008c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c9a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008d10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008cb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008cb8:	4b11      	ldr	r3, [pc, #68]	@ (8008d00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cbc:	0a5b      	lsrs	r3, r3, #9
 8008cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	ee07 3a90 	vmov	s15, r3
 8008ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cdc:	ee17 3a90 	vmov	r3, s15
 8008ce0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008ce2:	e005      	b.n	8008cf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	61bb      	str	r3, [r7, #24]
      break;
 8008ce8:	e002      	b.n	8008cf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008cea:	4b07      	ldr	r3, [pc, #28]	@ (8008d08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008cec:	61bb      	str	r3, [r7, #24]
      break;
 8008cee:	bf00      	nop
  }

  return sysclockfreq;
 8008cf0:	69bb      	ldr	r3, [r7, #24]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3724      	adds	r7, #36	@ 0x24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	58024400 	.word	0x58024400
 8008d04:	03d09000 	.word	0x03d09000
 8008d08:	003d0900 	.word	0x003d0900
 8008d0c:	017d7840 	.word	0x017d7840
 8008d10:	46000000 	.word	0x46000000
 8008d14:	4c742400 	.word	0x4c742400
 8008d18:	4a742400 	.word	0x4a742400
 8008d1c:	4bbebc20 	.word	0x4bbebc20

08008d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d26:	f7ff fe81 	bl	8008a2c <HAL_RCC_GetSysClockFreq>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	4b10      	ldr	r3, [pc, #64]	@ (8008d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	0a1b      	lsrs	r3, r3, #8
 8008d32:	f003 030f 	and.w	r3, r3, #15
 8008d36:	490f      	ldr	r1, [pc, #60]	@ (8008d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d38:	5ccb      	ldrb	r3, [r1, r3]
 8008d3a:	f003 031f 	and.w	r3, r3, #31
 8008d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d44:	4b0a      	ldr	r3, [pc, #40]	@ (8008d70 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	f003 030f 	and.w	r3, r3, #15
 8008d4c:	4a09      	ldr	r2, [pc, #36]	@ (8008d74 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d4e:	5cd3      	ldrb	r3, [r2, r3]
 8008d50:	f003 031f 	and.w	r3, r3, #31
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	fa22 f303 	lsr.w	r3, r2, r3
 8008d5a:	4a07      	ldr	r2, [pc, #28]	@ (8008d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d5e:	4a07      	ldr	r2, [pc, #28]	@ (8008d7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008d64:	4b04      	ldr	r3, [pc, #16]	@ (8008d78 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d66:	681b      	ldr	r3, [r3, #0]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	58024400 	.word	0x58024400
 8008d74:	080137c0 	.word	0x080137c0
 8008d78:	24000004 	.word	0x24000004
 8008d7c:	24000000 	.word	0x24000000

08008d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d84:	f7ff ffcc 	bl	8008d20 <HAL_RCC_GetHCLKFreq>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	4b06      	ldr	r3, [pc, #24]	@ (8008da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	091b      	lsrs	r3, r3, #4
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	4904      	ldr	r1, [pc, #16]	@ (8008da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d96:	5ccb      	ldrb	r3, [r1, r3]
 8008d98:	f003 031f 	and.w	r3, r3, #31
 8008d9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	58024400 	.word	0x58024400
 8008da8:	080137c0 	.word	0x080137c0

08008dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008db0:	f7ff ffb6 	bl	8008d20 <HAL_RCC_GetHCLKFreq>
 8008db4:	4602      	mov	r2, r0
 8008db6:	4b06      	ldr	r3, [pc, #24]	@ (8008dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008db8:	69db      	ldr	r3, [r3, #28]
 8008dba:	0a1b      	lsrs	r3, r3, #8
 8008dbc:	f003 0307 	and.w	r3, r3, #7
 8008dc0:	4904      	ldr	r1, [pc, #16]	@ (8008dd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008dc2:	5ccb      	ldrb	r3, [r1, r3]
 8008dc4:	f003 031f 	and.w	r3, r3, #31
 8008dc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	58024400 	.word	0x58024400
 8008dd4:	080137c0 	.word	0x080137c0

08008dd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ddc:	b0ca      	sub	sp, #296	@ 0x128
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008de4:	2300      	movs	r3, #0
 8008de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008dea:	2300      	movs	r3, #0
 8008dec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008dfc:	2500      	movs	r5, #0
 8008dfe:	ea54 0305 	orrs.w	r3, r4, r5
 8008e02:	d049      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e0e:	d02f      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008e10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e14:	d828      	bhi.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e1a:	d01a      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e20:	d822      	bhi.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e2a:	d007      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008e2c:	e01c      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e2e:	4bb8      	ldr	r3, [pc, #736]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e32:	4ab7      	ldr	r2, [pc, #732]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e3a:	e01a      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e40:	3308      	adds	r3, #8
 8008e42:	2102      	movs	r1, #2
 8008e44:	4618      	mov	r0, r3
 8008e46:	f002 fb61 	bl	800b50c <RCCEx_PLL2_Config>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e50:	e00f      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e56:	3328      	adds	r3, #40	@ 0x28
 8008e58:	2102      	movs	r1, #2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f002 fc08 	bl	800b670 <RCCEx_PLL3_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e66:	e004      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e6e:	e000      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10a      	bne.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e7a:	4ba5      	ldr	r3, [pc, #660]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e88:	4aa1      	ldr	r2, [pc, #644]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e8a:	430b      	orrs	r3, r1
 8008e8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e8e:	e003      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008ea4:	f04f 0900 	mov.w	r9, #0
 8008ea8:	ea58 0309 	orrs.w	r3, r8, r9
 8008eac:	d047      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb4:	2b04      	cmp	r3, #4
 8008eb6:	d82a      	bhi.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebe:	bf00      	nop
 8008ec0:	08008ed5 	.word	0x08008ed5
 8008ec4:	08008ee3 	.word	0x08008ee3
 8008ec8:	08008ef9 	.word	0x08008ef9
 8008ecc:	08008f17 	.word	0x08008f17
 8008ed0:	08008f17 	.word	0x08008f17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed4:	4b8e      	ldr	r3, [pc, #568]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed8:	4a8d      	ldr	r2, [pc, #564]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ee0:	e01a      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f002 fb0e 	bl	800b50c <RCCEx_PLL2_Config>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ef6:	e00f      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efc:	3328      	adds	r3, #40	@ 0x28
 8008efe:	2100      	movs	r1, #0
 8008f00:	4618      	mov	r0, r3
 8008f02:	f002 fbb5 	bl	800b670 <RCCEx_PLL3_Config>
 8008f06:	4603      	mov	r3, r0
 8008f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f0c:	e004      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f14:	e000      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f20:	4b7b      	ldr	r3, [pc, #492]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f24:	f023 0107 	bic.w	r1, r3, #7
 8008f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f2e:	4a78      	ldr	r2, [pc, #480]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f30:	430b      	orrs	r3, r1
 8008f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f34:	e003      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008f4a:	f04f 0b00 	mov.w	fp, #0
 8008f4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008f52:	d04c      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f5e:	d030      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f64:	d829      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f68:	d02d      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008f6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f6c:	d825      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f6e:	2b80      	cmp	r3, #128	@ 0x80
 8008f70:	d018      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008f72:	2b80      	cmp	r3, #128	@ 0x80
 8008f74:	d821      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d002      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008f7a:	2b40      	cmp	r3, #64	@ 0x40
 8008f7c:	d007      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008f7e:	e01c      	b.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f80:	4b63      	ldr	r3, [pc, #396]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f84:	4a62      	ldr	r2, [pc, #392]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008f8c:	e01c      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f92:	3308      	adds	r3, #8
 8008f94:	2100      	movs	r1, #0
 8008f96:	4618      	mov	r0, r3
 8008f98:	f002 fab8 	bl	800b50c <RCCEx_PLL2_Config>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008fa2:	e011      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa8:	3328      	adds	r3, #40	@ 0x28
 8008faa:	2100      	movs	r1, #0
 8008fac:	4618      	mov	r0, r3
 8008fae:	f002 fb5f 	bl	800b670 <RCCEx_PLL3_Config>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008fb8:	e006      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fc0:	e002      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008fc2:	bf00      	nop
 8008fc4:	e000      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008fd0:	4b4f      	ldr	r3, [pc, #316]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fd4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fde:	4a4c      	ldr	r2, [pc, #304]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fe0:	430b      	orrs	r3, r1
 8008fe2:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fe4:	e003      	b.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008ffa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008ffe:	2300      	movs	r3, #0
 8009000:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009004:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009008:	460b      	mov	r3, r1
 800900a:	4313      	orrs	r3, r2
 800900c:	d053      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800900e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009016:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800901a:	d035      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800901c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009020:	d82e      	bhi.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009022:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009026:	d031      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009028:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800902c:	d828      	bhi.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800902e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009032:	d01a      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009038:	d822      	bhi.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800903e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009042:	d007      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009044:	e01c      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009046:	4b32      	ldr	r3, [pc, #200]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904a:	4a31      	ldr	r2, [pc, #196]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800904c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009052:	e01c      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009058:	3308      	adds	r3, #8
 800905a:	2100      	movs	r1, #0
 800905c:	4618      	mov	r0, r3
 800905e:	f002 fa55 	bl	800b50c <RCCEx_PLL2_Config>
 8009062:	4603      	mov	r3, r0
 8009064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009068:	e011      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906e:	3328      	adds	r3, #40	@ 0x28
 8009070:	2100      	movs	r1, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f002 fafc 	bl	800b670 <RCCEx_PLL3_Config>
 8009078:	4603      	mov	r3, r0
 800907a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800907e:	e006      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009086:	e002      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009088:	bf00      	nop
 800908a:	e000      	b.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800908c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800908e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10b      	bne.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009096:	4b1e      	ldr	r3, [pc, #120]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800909a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800909e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009110 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090a8:	430b      	orrs	r3, r1
 80090aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80090ac:	e003      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80090b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80090c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80090c6:	2300      	movs	r3, #0
 80090c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80090cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80090d0:	460b      	mov	r3, r1
 80090d2:	4313      	orrs	r3, r2
 80090d4:	d056      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80090d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80090de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090e2:	d038      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80090e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090e8:	d831      	bhi.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80090ee:	d034      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80090f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80090f4:	d82b      	bhi.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090fa:	d01d      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80090fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009100:	d825      	bhi.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d006      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800910a:	d00a      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800910c:	e01f      	b.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800910e:	bf00      	nop
 8009110:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009114:	4ba2      	ldr	r3, [pc, #648]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009118:	4aa1      	ldr	r2, [pc, #644]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800911a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800911e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009120:	e01c      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009126:	3308      	adds	r3, #8
 8009128:	2100      	movs	r1, #0
 800912a:	4618      	mov	r0, r3
 800912c:	f002 f9ee 	bl	800b50c <RCCEx_PLL2_Config>
 8009130:	4603      	mov	r3, r0
 8009132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009136:	e011      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913c:	3328      	adds	r3, #40	@ 0x28
 800913e:	2100      	movs	r1, #0
 8009140:	4618      	mov	r0, r3
 8009142:	f002 fa95 	bl	800b670 <RCCEx_PLL3_Config>
 8009146:	4603      	mov	r3, r0
 8009148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800914c:	e006      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009154:	e002      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009156:	bf00      	nop
 8009158:	e000      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800915a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800915c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10b      	bne.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009164:	4b8e      	ldr	r3, [pc, #568]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009168:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800916c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009170:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009174:	4a8a      	ldr	r2, [pc, #552]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009176:	430b      	orrs	r3, r1
 8009178:	6593      	str	r3, [r2, #88]	@ 0x58
 800917a:	e003      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800917c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009190:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009194:	2300      	movs	r3, #0
 8009196:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800919a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800919e:	460b      	mov	r3, r1
 80091a0:	4313      	orrs	r3, r2
 80091a2:	d03a      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80091a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091aa:	2b30      	cmp	r3, #48	@ 0x30
 80091ac:	d01f      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80091ae:	2b30      	cmp	r3, #48	@ 0x30
 80091b0:	d819      	bhi.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d00c      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80091b6:	2b20      	cmp	r3, #32
 80091b8:	d815      	bhi.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d019      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80091be:	2b10      	cmp	r3, #16
 80091c0:	d111      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091c2:	4b77      	ldr	r3, [pc, #476]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c6:	4a76      	ldr	r2, [pc, #472]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80091ce:	e011      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d4:	3308      	adds	r3, #8
 80091d6:	2102      	movs	r1, #2
 80091d8:	4618      	mov	r0, r3
 80091da:	f002 f997 	bl	800b50c <RCCEx_PLL2_Config>
 80091de:	4603      	mov	r3, r0
 80091e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80091e4:	e006      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091ec:	e002      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80091ee:	bf00      	nop
 80091f0:	e000      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80091f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80091fc:	4b68      	ldr	r3, [pc, #416]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009200:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800920a:	4a65      	ldr	r2, [pc, #404]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800920c:	430b      	orrs	r3, r1
 800920e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009210:	e003      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800921a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009226:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800922a:	2300      	movs	r3, #0
 800922c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009230:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009234:	460b      	mov	r3, r1
 8009236:	4313      	orrs	r3, r2
 8009238:	d051      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800923a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800923e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009240:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009244:	d035      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800924a:	d82e      	bhi.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800924c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009250:	d031      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009252:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009256:	d828      	bhi.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800925c:	d01a      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800925e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009262:	d822      	bhi.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d003      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800926c:	d007      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800926e:	e01c      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009270:	4b4b      	ldr	r3, [pc, #300]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009274:	4a4a      	ldr	r2, [pc, #296]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800927a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800927c:	e01c      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800927e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009282:	3308      	adds	r3, #8
 8009284:	2100      	movs	r1, #0
 8009286:	4618      	mov	r0, r3
 8009288:	f002 f940 	bl	800b50c <RCCEx_PLL2_Config>
 800928c:	4603      	mov	r3, r0
 800928e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009292:	e011      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009298:	3328      	adds	r3, #40	@ 0x28
 800929a:	2100      	movs	r1, #0
 800929c:	4618      	mov	r0, r3
 800929e:	f002 f9e7 	bl	800b670 <RCCEx_PLL3_Config>
 80092a2:	4603      	mov	r3, r0
 80092a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092a8:	e006      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092b0:	e002      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80092b2:	bf00      	nop
 80092b4:	e000      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80092b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80092c0:	4b37      	ldr	r3, [pc, #220]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80092c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ce:	4a34      	ldr	r2, [pc, #208]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092d0:	430b      	orrs	r3, r1
 80092d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80092d4:	e003      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80092de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80092ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092ee:	2300      	movs	r3, #0
 80092f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80092f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80092f8:	460b      	mov	r3, r1
 80092fa:	4313      	orrs	r3, r2
 80092fc:	d056      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80092fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009308:	d033      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800930a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800930e:	d82c      	bhi.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009310:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009314:	d02f      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009316:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800931a:	d826      	bhi.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800931c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009320:	d02b      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009322:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009326:	d820      	bhi.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800932c:	d012      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800932e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009332:	d81a      	bhi.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009334:	2b00      	cmp	r3, #0
 8009336:	d022      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800933c:	d115      	bne.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800933e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009342:	3308      	adds	r3, #8
 8009344:	2101      	movs	r1, #1
 8009346:	4618      	mov	r0, r3
 8009348:	f002 f8e0 	bl	800b50c <RCCEx_PLL2_Config>
 800934c:	4603      	mov	r3, r0
 800934e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009352:	e015      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009358:	3328      	adds	r3, #40	@ 0x28
 800935a:	2101      	movs	r1, #1
 800935c:	4618      	mov	r0, r3
 800935e:	f002 f987 	bl	800b670 <RCCEx_PLL3_Config>
 8009362:	4603      	mov	r3, r0
 8009364:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009368:	e00a      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009370:	e006      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009372:	bf00      	nop
 8009374:	e004      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009376:	bf00      	nop
 8009378:	e002      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800937a:	bf00      	nop
 800937c:	e000      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800937e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10d      	bne.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009388:	4b05      	ldr	r3, [pc, #20]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800938a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800938c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009394:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009396:	4a02      	ldr	r2, [pc, #8]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009398:	430b      	orrs	r3, r1
 800939a:	6513      	str	r3, [r2, #80]	@ 0x50
 800939c:	e006      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800939e:	bf00      	nop
 80093a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80093ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80093b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80093bc:	2300      	movs	r3, #0
 80093be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4313      	orrs	r3, r2
 80093ca:	d055      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80093cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093d8:	d033      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80093da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093de:	d82c      	bhi.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093e4:	d02f      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80093e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ea:	d826      	bhi.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093f0:	d02b      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80093f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093f6:	d820      	bhi.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093fc:	d012      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80093fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009402:	d81a      	bhi.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009404:	2b00      	cmp	r3, #0
 8009406:	d022      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009408:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800940c:	d115      	bne.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009412:	3308      	adds	r3, #8
 8009414:	2101      	movs	r1, #1
 8009416:	4618      	mov	r0, r3
 8009418:	f002 f878 	bl	800b50c <RCCEx_PLL2_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009422:	e015      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009428:	3328      	adds	r3, #40	@ 0x28
 800942a:	2101      	movs	r1, #1
 800942c:	4618      	mov	r0, r3
 800942e:	f002 f91f 	bl	800b670 <RCCEx_PLL3_Config>
 8009432:	4603      	mov	r3, r0
 8009434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009438:	e00a      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009440:	e006      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009442:	bf00      	nop
 8009444:	e004      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009446:	bf00      	nop
 8009448:	e002      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800944a:	bf00      	nop
 800944c:	e000      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800944e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10b      	bne.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009458:	4ba3      	ldr	r3, [pc, #652]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800945a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800945c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009464:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009468:	4a9f      	ldr	r2, [pc, #636]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800946a:	430b      	orrs	r3, r1
 800946c:	6593      	str	r3, [r2, #88]	@ 0x58
 800946e:	e003      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009484:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009488:	2300      	movs	r3, #0
 800948a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800948e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009492:	460b      	mov	r3, r1
 8009494:	4313      	orrs	r3, r2
 8009496:	d037      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800949e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a2:	d00e      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80094a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a8:	d816      	bhi.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d018      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80094ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094b2:	d111      	bne.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094b4:	4b8c      	ldr	r3, [pc, #560]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b8:	4a8b      	ldr	r2, [pc, #556]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80094c0:	e00f      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c6:	3308      	adds	r3, #8
 80094c8:	2101      	movs	r1, #1
 80094ca:	4618      	mov	r0, r3
 80094cc:	f002 f81e 	bl	800b50c <RCCEx_PLL2_Config>
 80094d0:	4603      	mov	r3, r0
 80094d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80094d6:	e004      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094de:	e000      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80094e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10a      	bne.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80094ea:	4b7f      	ldr	r3, [pc, #508]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80094f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094f8:	4a7b      	ldr	r2, [pc, #492]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094fa:	430b      	orrs	r3, r1
 80094fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80094fe:	e003      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009518:	2300      	movs	r3, #0
 800951a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800951e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009522:	460b      	mov	r3, r1
 8009524:	4313      	orrs	r3, r2
 8009526:	d039      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800952c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800952e:	2b03      	cmp	r3, #3
 8009530:	d81c      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009532:	a201      	add	r2, pc, #4	@ (adr r2, 8009538 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	08009575 	.word	0x08009575
 800953c:	08009549 	.word	0x08009549
 8009540:	08009557 	.word	0x08009557
 8009544:	08009575 	.word	0x08009575
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009548:	4b67      	ldr	r3, [pc, #412]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800954a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954c:	4a66      	ldr	r2, [pc, #408]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800954e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009554:	e00f      	b.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955a:	3308      	adds	r3, #8
 800955c:	2102      	movs	r1, #2
 800955e:	4618      	mov	r0, r3
 8009560:	f001 ffd4 	bl	800b50c <RCCEx_PLL2_Config>
 8009564:	4603      	mov	r3, r0
 8009566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800956a:	e004      	b.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009572:	e000      	b.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10a      	bne.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800957e:	4b5a      	ldr	r3, [pc, #360]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009582:	f023 0103 	bic.w	r1, r3, #3
 8009586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800958a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800958c:	4a56      	ldr	r2, [pc, #344]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800958e:	430b      	orrs	r3, r1
 8009590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009592:	e003      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009598:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800959c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80095a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095ac:	2300      	movs	r3, #0
 80095ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80095b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80095b6:	460b      	mov	r3, r1
 80095b8:	4313      	orrs	r3, r2
 80095ba:	f000 809f 	beq.w	80096fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095be:	4b4b      	ldr	r3, [pc, #300]	@ (80096ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a4a      	ldr	r2, [pc, #296]	@ (80096ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80095c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095ca:	f7f8 fe69 	bl	80022a0 <HAL_GetTick>
 80095ce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095d2:	e00b      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095d4:	f7f8 fe64 	bl	80022a0 <HAL_GetTick>
 80095d8:	4602      	mov	r2, r0
 80095da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	2b64      	cmp	r3, #100	@ 0x64
 80095e2:	d903      	bls.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095ea:	e005      	b.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095ec:	4b3f      	ldr	r3, [pc, #252]	@ (80096ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d0ed      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80095f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d179      	bne.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009600:	4b39      	ldr	r3, [pc, #228]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009602:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009608:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800960c:	4053      	eors	r3, r2
 800960e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009612:	2b00      	cmp	r3, #0
 8009614:	d015      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009616:	4b34      	ldr	r3, [pc, #208]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800961a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800961e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009622:	4b31      	ldr	r3, [pc, #196]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009626:	4a30      	ldr	r2, [pc, #192]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800962c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800962e:	4b2e      	ldr	r3, [pc, #184]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009632:	4a2d      	ldr	r2, [pc, #180]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009638:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800963a:	4a2b      	ldr	r2, [pc, #172]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800963c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009640:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009646:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800964a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800964e:	d118      	bne.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009650:	f7f8 fe26 	bl	80022a0 <HAL_GetTick>
 8009654:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009658:	e00d      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800965a:	f7f8 fe21 	bl	80022a0 <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009664:	1ad2      	subs	r2, r2, r3
 8009666:	f241 3388 	movw	r3, #5000	@ 0x1388
 800966a:	429a      	cmp	r2, r3
 800966c:	d903      	bls.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009674:	e005      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009676:	4b1c      	ldr	r3, [pc, #112]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0eb      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009686:	2b00      	cmp	r3, #0
 8009688:	d129      	bne.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800968a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800968e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800969a:	d10e      	bne.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800969c:	4b12      	ldr	r3, [pc, #72]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80096a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096ac:	091a      	lsrs	r2, r3, #4
 80096ae:	4b10      	ldr	r3, [pc, #64]	@ (80096f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	4a0d      	ldr	r2, [pc, #52]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b4:	430b      	orrs	r3, r1
 80096b6:	6113      	str	r3, [r2, #16]
 80096b8:	e005      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80096ba:	4b0b      	ldr	r3, [pc, #44]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	4a0a      	ldr	r2, [pc, #40]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80096c4:	6113      	str	r3, [r2, #16]
 80096c6:	4b08      	ldr	r3, [pc, #32]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80096ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096d6:	4a04      	ldr	r2, [pc, #16]	@ (80096e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096d8:	430b      	orrs	r3, r1
 80096da:	6713      	str	r3, [r2, #112]	@ 0x70
 80096dc:	e00e      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80096e6:	e009      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80096e8:	58024400 	.word	0x58024400
 80096ec:	58024800 	.word	0x58024800
 80096f0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80096fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f002 0301 	and.w	r3, r2, #1
 8009708:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800970c:	2300      	movs	r3, #0
 800970e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009712:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009716:	460b      	mov	r3, r1
 8009718:	4313      	orrs	r3, r2
 800971a:	f000 8089 	beq.w	8009830 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800971e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009722:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009724:	2b28      	cmp	r3, #40	@ 0x28
 8009726:	d86b      	bhi.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009728:	a201      	add	r2, pc, #4	@ (adr r2, 8009730 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800972a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972e:	bf00      	nop
 8009730:	08009809 	.word	0x08009809
 8009734:	08009801 	.word	0x08009801
 8009738:	08009801 	.word	0x08009801
 800973c:	08009801 	.word	0x08009801
 8009740:	08009801 	.word	0x08009801
 8009744:	08009801 	.word	0x08009801
 8009748:	08009801 	.word	0x08009801
 800974c:	08009801 	.word	0x08009801
 8009750:	080097d5 	.word	0x080097d5
 8009754:	08009801 	.word	0x08009801
 8009758:	08009801 	.word	0x08009801
 800975c:	08009801 	.word	0x08009801
 8009760:	08009801 	.word	0x08009801
 8009764:	08009801 	.word	0x08009801
 8009768:	08009801 	.word	0x08009801
 800976c:	08009801 	.word	0x08009801
 8009770:	080097eb 	.word	0x080097eb
 8009774:	08009801 	.word	0x08009801
 8009778:	08009801 	.word	0x08009801
 800977c:	08009801 	.word	0x08009801
 8009780:	08009801 	.word	0x08009801
 8009784:	08009801 	.word	0x08009801
 8009788:	08009801 	.word	0x08009801
 800978c:	08009801 	.word	0x08009801
 8009790:	08009809 	.word	0x08009809
 8009794:	08009801 	.word	0x08009801
 8009798:	08009801 	.word	0x08009801
 800979c:	08009801 	.word	0x08009801
 80097a0:	08009801 	.word	0x08009801
 80097a4:	08009801 	.word	0x08009801
 80097a8:	08009801 	.word	0x08009801
 80097ac:	08009801 	.word	0x08009801
 80097b0:	08009809 	.word	0x08009809
 80097b4:	08009801 	.word	0x08009801
 80097b8:	08009801 	.word	0x08009801
 80097bc:	08009801 	.word	0x08009801
 80097c0:	08009801 	.word	0x08009801
 80097c4:	08009801 	.word	0x08009801
 80097c8:	08009801 	.word	0x08009801
 80097cc:	08009801 	.word	0x08009801
 80097d0:	08009809 	.word	0x08009809
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d8:	3308      	adds	r3, #8
 80097da:	2101      	movs	r1, #1
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 fe95 	bl	800b50c <RCCEx_PLL2_Config>
 80097e2:	4603      	mov	r3, r0
 80097e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80097e8:	e00f      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ee:	3328      	adds	r3, #40	@ 0x28
 80097f0:	2101      	movs	r1, #1
 80097f2:	4618      	mov	r0, r3
 80097f4:	f001 ff3c 	bl	800b670 <RCCEx_PLL3_Config>
 80097f8:	4603      	mov	r3, r0
 80097fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80097fe:	e004      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009806:	e000      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800980a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009812:	4bbf      	ldr	r3, [pc, #764]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009816:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800981a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800981e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009820:	4abb      	ldr	r2, [pc, #748]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009822:	430b      	orrs	r3, r1
 8009824:	6553      	str	r3, [r2, #84]	@ 0x54
 8009826:	e003      	b.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800982c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	f002 0302 	and.w	r3, r2, #2
 800983c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009840:	2300      	movs	r3, #0
 8009842:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009846:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800984a:	460b      	mov	r3, r1
 800984c:	4313      	orrs	r3, r2
 800984e:	d041      	beq.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009854:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009856:	2b05      	cmp	r3, #5
 8009858:	d824      	bhi.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800985a:	a201      	add	r2, pc, #4	@ (adr r2, 8009860 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800985c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009860:	080098ad 	.word	0x080098ad
 8009864:	08009879 	.word	0x08009879
 8009868:	0800988f 	.word	0x0800988f
 800986c:	080098ad 	.word	0x080098ad
 8009870:	080098ad 	.word	0x080098ad
 8009874:	080098ad 	.word	0x080098ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800987c:	3308      	adds	r3, #8
 800987e:	2101      	movs	r1, #1
 8009880:	4618      	mov	r0, r3
 8009882:	f001 fe43 	bl	800b50c <RCCEx_PLL2_Config>
 8009886:	4603      	mov	r3, r0
 8009888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800988c:	e00f      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800988e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009892:	3328      	adds	r3, #40	@ 0x28
 8009894:	2101      	movs	r1, #1
 8009896:	4618      	mov	r0, r3
 8009898:	f001 feea 	bl	800b670 <RCCEx_PLL3_Config>
 800989c:	4603      	mov	r3, r0
 800989e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098a2:	e004      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098aa:	e000      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80098ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10a      	bne.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80098b6:	4b96      	ldr	r3, [pc, #600]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ba:	f023 0107 	bic.w	r1, r3, #7
 80098be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098c4:	4a92      	ldr	r2, [pc, #584]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098c6:	430b      	orrs	r3, r1
 80098c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80098ca:	e003      	b.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	f002 0304 	and.w	r3, r2, #4
 80098e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098e4:	2300      	movs	r3, #0
 80098e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80098ee:	460b      	mov	r3, r1
 80098f0:	4313      	orrs	r3, r2
 80098f2:	d044      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80098f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098fc:	2b05      	cmp	r3, #5
 80098fe:	d825      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009900:	a201      	add	r2, pc, #4	@ (adr r2, 8009908 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009906:	bf00      	nop
 8009908:	08009955 	.word	0x08009955
 800990c:	08009921 	.word	0x08009921
 8009910:	08009937 	.word	0x08009937
 8009914:	08009955 	.word	0x08009955
 8009918:	08009955 	.word	0x08009955
 800991c:	08009955 	.word	0x08009955
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009924:	3308      	adds	r3, #8
 8009926:	2101      	movs	r1, #1
 8009928:	4618      	mov	r0, r3
 800992a:	f001 fdef 	bl	800b50c <RCCEx_PLL2_Config>
 800992e:	4603      	mov	r3, r0
 8009930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009934:	e00f      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993a:	3328      	adds	r3, #40	@ 0x28
 800993c:	2101      	movs	r1, #1
 800993e:	4618      	mov	r0, r3
 8009940:	f001 fe96 	bl	800b670 <RCCEx_PLL3_Config>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800994a:	e004      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009952:	e000      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10b      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800995e:	4b6c      	ldr	r3, [pc, #432]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009962:	f023 0107 	bic.w	r1, r3, #7
 8009966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800996a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800996e:	4a68      	ldr	r2, [pc, #416]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009970:	430b      	orrs	r3, r1
 8009972:	6593      	str	r3, [r2, #88]	@ 0x58
 8009974:	e003      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800997a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800997e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f002 0320 	and.w	r3, r2, #32
 800998a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800998e:	2300      	movs	r3, #0
 8009990:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009998:	460b      	mov	r3, r1
 800999a:	4313      	orrs	r3, r2
 800999c:	d055      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800999e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099aa:	d033      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80099ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099b0:	d82c      	bhi.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099b6:	d02f      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80099b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099bc:	d826      	bhi.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099c2:	d02b      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80099c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099c8:	d820      	bhi.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099ce:	d012      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80099d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099d4:	d81a      	bhi.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d022      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80099da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099de:	d115      	bne.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e4:	3308      	adds	r3, #8
 80099e6:	2100      	movs	r1, #0
 80099e8:	4618      	mov	r0, r3
 80099ea:	f001 fd8f 	bl	800b50c <RCCEx_PLL2_Config>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80099f4:	e015      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099fa:	3328      	adds	r3, #40	@ 0x28
 80099fc:	2102      	movs	r1, #2
 80099fe:	4618      	mov	r0, r3
 8009a00:	f001 fe36 	bl	800b670 <RCCEx_PLL3_Config>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a0a:	e00a      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a12:	e006      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a14:	bf00      	nop
 8009a16:	e004      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a18:	bf00      	nop
 8009a1a:	e002      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a1c:	bf00      	nop
 8009a1e:	e000      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10b      	bne.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a2a:	4b39      	ldr	r3, [pc, #228]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a2e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a3a:	4a35      	ldr	r2, [pc, #212]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a3c:	430b      	orrs	r3, r1
 8009a3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a40:	e003      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009a56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4313      	orrs	r3, r2
 8009a68:	d058      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a72:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009a76:	d033      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009a78:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009a7c:	d82c      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a82:	d02f      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a88:	d826      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a8e:	d02b      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009a90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009a94:	d820      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a9a:	d012      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009a9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aa0:	d81a      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d022      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aaa:	d115      	bne.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 fd29 	bl	800b50c <RCCEx_PLL2_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ac0:	e015      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac6:	3328      	adds	r3, #40	@ 0x28
 8009ac8:	2102      	movs	r1, #2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f001 fdd0 	bl	800b670 <RCCEx_PLL3_Config>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ad6:	e00a      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ade:	e006      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ae0:	bf00      	nop
 8009ae2:	e004      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ae4:	bf00      	nop
 8009ae6:	e002      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ae8:	bf00      	nop
 8009aea:	e000      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10e      	bne.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009af6:	4b06      	ldr	r3, [pc, #24]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009afa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b06:	4a02      	ldr	r2, [pc, #8]	@ (8009b10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b08:	430b      	orrs	r3, r1
 8009b0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b0c:	e006      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009b0e:	bf00      	nop
 8009b10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009b28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b32:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009b36:	460b      	mov	r3, r1
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	d055      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b44:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009b48:	d033      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009b4a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009b4e:	d82c      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b54:	d02f      	beq.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b5a:	d826      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b5c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009b60:	d02b      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009b62:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009b66:	d820      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b6c:	d012      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009b6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b72:	d81a      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d022      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b7c:	d115      	bne.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b82:	3308      	adds	r3, #8
 8009b84:	2100      	movs	r1, #0
 8009b86:	4618      	mov	r0, r3
 8009b88:	f001 fcc0 	bl	800b50c <RCCEx_PLL2_Config>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009b92:	e015      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b98:	3328      	adds	r3, #40	@ 0x28
 8009b9a:	2102      	movs	r1, #2
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f001 fd67 	bl	800b670 <RCCEx_PLL3_Config>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ba8:	e00a      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bb0:	e006      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009bb2:	bf00      	nop
 8009bb4:	e004      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009bb6:	bf00      	nop
 8009bb8:	e002      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009bba:	bf00      	nop
 8009bbc:	e000      	b.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10b      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009bc8:	4ba1      	ldr	r3, [pc, #644]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bcc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009bd8:	4a9d      	ldr	r2, [pc, #628]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bda:	430b      	orrs	r3, r1
 8009bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bde:	e003      	b.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009be4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	f002 0308 	and.w	r3, r2, #8
 8009bf4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009bfe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009c02:	460b      	mov	r3, r1
 8009c04:	4313      	orrs	r3, r2
 8009c06:	d01e      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c14:	d10c      	bne.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1a:	3328      	adds	r3, #40	@ 0x28
 8009c1c:	2102      	movs	r1, #2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 fd26 	bl	800b670 <RCCEx_PLL3_Config>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009c30:	4b87      	ldr	r3, [pc, #540]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c34:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c40:	4a83      	ldr	r2, [pc, #524]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c42:	430b      	orrs	r3, r1
 8009c44:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f002 0310 	and.w	r3, r2, #16
 8009c52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c56:	2300      	movs	r3, #0
 8009c58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c5c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009c60:	460b      	mov	r3, r1
 8009c62:	4313      	orrs	r3, r2
 8009c64:	d01e      	beq.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c72:	d10c      	bne.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c78:	3328      	adds	r3, #40	@ 0x28
 8009c7a:	2102      	movs	r1, #2
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f001 fcf7 	bl	800b670 <RCCEx_PLL3_Config>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c8e:	4b70      	ldr	r3, [pc, #448]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c9e:	4a6c      	ldr	r2, [pc, #432]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ca0:	430b      	orrs	r3, r1
 8009ca2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009cb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	d03e      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ccc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cd0:	d022      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009cd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cd6:	d81b      	bhi.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ce0:	d00b      	beq.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009ce2:	e015      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce8:	3308      	adds	r3, #8
 8009cea:	2100      	movs	r1, #0
 8009cec:	4618      	mov	r0, r3
 8009cee:	f001 fc0d 	bl	800b50c <RCCEx_PLL2_Config>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009cf8:	e00f      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfe:	3328      	adds	r3, #40	@ 0x28
 8009d00:	2102      	movs	r1, #2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f001 fcb4 	bl	800b670 <RCCEx_PLL3_Config>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d0e:	e004      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d16:	e000      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d10b      	bne.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d22:	4b4b      	ldr	r3, [pc, #300]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d32:	4a47      	ldr	r2, [pc, #284]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d34:	430b      	orrs	r3, r1
 8009d36:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d38:	e003      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009d4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d50:	2300      	movs	r3, #0
 8009d52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d54:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	d03b      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d6a:	d01f      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009d6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d70:	d818      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009d72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d76:	d003      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009d78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d7c:	d007      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009d7e:	e011      	b.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d80:	4b33      	ldr	r3, [pc, #204]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d84:	4a32      	ldr	r2, [pc, #200]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009d8c:	e00f      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d92:	3328      	adds	r3, #40	@ 0x28
 8009d94:	2101      	movs	r1, #1
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 fc6a 	bl	800b670 <RCCEx_PLL3_Config>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009da2:	e004      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009daa:	e000      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10b      	bne.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009db6:	4b26      	ldr	r3, [pc, #152]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dc6:	4a22      	ldr	r2, [pc, #136]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dc8:	430b      	orrs	r3, r1
 8009dca:	6553      	str	r3, [r2, #84]	@ 0x54
 8009dcc:	e003      	b.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009de2:	673b      	str	r3, [r7, #112]	@ 0x70
 8009de4:	2300      	movs	r3, #0
 8009de6:	677b      	str	r3, [r7, #116]	@ 0x74
 8009de8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009dec:	460b      	mov	r3, r1
 8009dee:	4313      	orrs	r3, r2
 8009df0:	d034      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e00:	d007      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009e02:	e011      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e04:	4b12      	ldr	r3, [pc, #72]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e08:	4a11      	ldr	r2, [pc, #68]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e10:	e00e      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e16:	3308      	adds	r3, #8
 8009e18:	2102      	movs	r1, #2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f001 fb76 	bl	800b50c <RCCEx_PLL2_Config>
 8009e20:	4603      	mov	r3, r0
 8009e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e26:	e003      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10d      	bne.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e38:	4b05      	ldr	r3, [pc, #20]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e3c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e46:	4a02      	ldr	r2, [pc, #8]	@ (8009e50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e48:	430b      	orrs	r3, r1
 8009e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e4c:	e006      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009e4e:	bf00      	nop
 8009e50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009e68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009e72:	460b      	mov	r3, r1
 8009e74:	4313      	orrs	r3, r2
 8009e76:	d00c      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e7c:	3328      	adds	r3, #40	@ 0x28
 8009e7e:	2102      	movs	r1, #2
 8009e80:	4618      	mov	r0, r3
 8009e82:	f001 fbf5 	bl	800b670 <RCCEx_PLL3_Config>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009e9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ea4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	d038      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009eba:	d018      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009ebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ec0:	d811      	bhi.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ec6:	d014      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ecc:	d80b      	bhi.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d011      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ed6:	d106      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ed8:	4bc3      	ldr	r3, [pc, #780]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009edc:	4ac2      	ldr	r2, [pc, #776]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009ee4:	e008      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009eec:	e004      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009eee:	bf00      	nop
 8009ef0:	e002      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009ef2:	bf00      	nop
 8009ef4:	e000      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10b      	bne.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f00:	4bb9      	ldr	r3, [pc, #740]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f10:	4ab5      	ldr	r2, [pc, #724]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f12:	430b      	orrs	r3, r1
 8009f14:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f16:	e003      	b.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f2e:	2300      	movs	r3, #0
 8009f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f32:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009f36:	460b      	mov	r3, r1
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	d009      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f3c:	4baa      	ldr	r3, [pc, #680]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f4a:	4aa7      	ldr	r2, [pc, #668]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f4c:	430b      	orrs	r3, r1
 8009f4e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009f5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f5e:	2300      	movs	r3, #0
 8009f60:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009f66:	460b      	mov	r3, r1
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	d00a      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f6c:	4b9e      	ldr	r3, [pc, #632]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009f7c:	4a9a      	ldr	r2, [pc, #616]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f7e:	430b      	orrs	r3, r1
 8009f80:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f90:	2300      	movs	r3, #0
 8009f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f94:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	d009      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f9e:	4b92      	ldr	r3, [pc, #584]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fa2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fac:	4a8e      	ldr	r2, [pc, #568]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fae:	430b      	orrs	r3, r1
 8009fb0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009fbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fc4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	d00e      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009fce:	4b86      	ldr	r3, [pc, #536]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	4a85      	ldr	r2, [pc, #532]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009fd8:	6113      	str	r3, [r2, #16]
 8009fda:	4b83      	ldr	r3, [pc, #524]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fdc:	6919      	ldr	r1, [r3, #16]
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009fe6:	4a80      	ldr	r2, [pc, #512]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fe8:	430b      	orrs	r3, r1
 8009fea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ffe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a002:	460b      	mov	r3, r1
 800a004:	4313      	orrs	r3, r2
 800a006:	d009      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a008:	4b77      	ldr	r3, [pc, #476]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a00a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a00c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a016:	4a74      	ldr	r2, [pc, #464]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a018:	430b      	orrs	r3, r1
 800a01a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a028:	633b      	str	r3, [r7, #48]	@ 0x30
 800a02a:	2300      	movs	r3, #0
 800a02c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a02e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a032:	460b      	mov	r3, r1
 800a034:	4313      	orrs	r3, r2
 800a036:	d00a      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a038:	4b6b      	ldr	r3, [pc, #428]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a03a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a03c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a048:	4a67      	ldr	r2, [pc, #412]	@ (800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a04a:	430b      	orrs	r3, r1
 800a04c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	2100      	movs	r1, #0
 800a058:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a060:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a064:	460b      	mov	r3, r1
 800a066:	4313      	orrs	r3, r2
 800a068:	d011      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06e:	3308      	adds	r3, #8
 800a070:	2100      	movs	r1, #0
 800a072:	4618      	mov	r0, r3
 800a074:	f001 fa4a 	bl	800b50c <RCCEx_PLL2_Config>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a07e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a08a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	2100      	movs	r1, #0
 800a098:	6239      	str	r1, [r7, #32]
 800a09a:	f003 0302 	and.w	r3, r3, #2
 800a09e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	d011      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ae:	3308      	adds	r3, #8
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f001 fa2a 	bl	800b50c <RCCEx_PLL2_Config>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	61b9      	str	r1, [r7, #24]
 800a0da:	f003 0304 	and.w	r3, r3, #4
 800a0de:	61fb      	str	r3, [r7, #28]
 800a0e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	d011      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	2102      	movs	r1, #2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f001 fa0a 	bl	800b50c <RCCEx_PLL2_Config>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a10a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a10e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	2100      	movs	r1, #0
 800a118:	6139      	str	r1, [r7, #16]
 800a11a:	f003 0308 	and.w	r3, r3, #8
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a124:	460b      	mov	r3, r1
 800a126:	4313      	orrs	r3, r2
 800a128:	d011      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a12e:	3328      	adds	r3, #40	@ 0x28
 800a130:	2100      	movs	r1, #0
 800a132:	4618      	mov	r0, r3
 800a134:	f001 fa9c 	bl	800b670 <RCCEx_PLL3_Config>
 800a138:	4603      	mov	r3, r0
 800a13a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a13e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a14a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	2100      	movs	r1, #0
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	f003 0310 	and.w	r3, r3, #16
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a164:	460b      	mov	r3, r1
 800a166:	4313      	orrs	r3, r2
 800a168:	d011      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a16e:	3328      	adds	r3, #40	@ 0x28
 800a170:	2101      	movs	r1, #1
 800a172:	4618      	mov	r0, r3
 800a174:	f001 fa7c 	bl	800b670 <RCCEx_PLL3_Config>
 800a178:	4603      	mov	r3, r0
 800a17a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a17e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a18a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	2100      	movs	r1, #0
 800a198:	6039      	str	r1, [r7, #0]
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	607b      	str	r3, [r7, #4]
 800a1a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	d011      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ae:	3328      	adds	r3, #40	@ 0x28
 800a1b0:	2102      	movs	r1, #2
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f001 fa5c 	bl	800b670 <RCCEx_PLL3_Config>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a1ce:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e000      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1e8:	58024400 	.word	0x58024400

0800a1ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b090      	sub	sp, #64	@ 0x40
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a1f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1fa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a1fe:	430b      	orrs	r3, r1
 800a200:	f040 8094 	bne.w	800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a204:	4b9e      	ldr	r3, [pc, #632]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a208:	f003 0307 	and.w	r3, r3, #7
 800a20c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a210:	2b04      	cmp	r3, #4
 800a212:	f200 8087 	bhi.w	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a216:	a201      	add	r2, pc, #4	@ (adr r2, 800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a231 	.word	0x0800a231
 800a220:	0800a259 	.word	0x0800a259
 800a224:	0800a281 	.word	0x0800a281
 800a228:	0800a31d 	.word	0x0800a31d
 800a22c:	0800a2a9 	.word	0x0800a2a9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a230:	4b93      	ldr	r3, [pc, #588]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a238:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a23c:	d108      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a23e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a242:	4618      	mov	r0, r3
 800a244:	f001 f810 	bl	800b268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a24c:	f000 bd45 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a254:	f000 bd41 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a258:	4b89      	ldr	r3, [pc, #548]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a264:	d108      	bne.n	800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a266:	f107 0318 	add.w	r3, r7, #24
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fd54 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a274:	f000 bd31 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a27c:	f000 bd2d 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a280:	4b7f      	ldr	r3, [pc, #508]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a28c:	d108      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a28e:	f107 030c 	add.w	r3, r7, #12
 800a292:	4618      	mov	r0, r3
 800a294:	f000 fe94 	bl	800afc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a29c:	f000 bd1d 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a4:	f000 bd19 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2a8:	4b75      	ldr	r3, [pc, #468]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a2b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2b2:	4b73      	ldr	r3, [pc, #460]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0304 	and.w	r3, r3, #4
 800a2ba:	2b04      	cmp	r3, #4
 800a2bc:	d10c      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a2be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d109      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2c4:	4b6e      	ldr	r3, [pc, #440]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	08db      	lsrs	r3, r3, #3
 800a2ca:	f003 0303 	and.w	r3, r3, #3
 800a2ce:	4a6d      	ldr	r2, [pc, #436]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2d6:	e01f      	b.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2d8:	4b69      	ldr	r3, [pc, #420]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2e4:	d106      	bne.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2ec:	d102      	bne.n	800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2ee:	4b66      	ldr	r3, [pc, #408]	@ (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2f2:	e011      	b.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2f4:	4b62      	ldr	r3, [pc, #392]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a300:	d106      	bne.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a308:	d102      	bne.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a30a:	4b60      	ldr	r3, [pc, #384]	@ (800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a30e:	e003      	b.n	800a318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a314:	f000 bce1 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a318:	f000 bcdf 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a31c:	4b5c      	ldr	r3, [pc, #368]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a320:	f000 bcdb 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a324:	2300      	movs	r3, #0
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a328:	f000 bcd7 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a32c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a330:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a334:	430b      	orrs	r3, r1
 800a336:	f040 80ad 	bne.w	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a33a:	4b51      	ldr	r3, [pc, #324]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a33c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a33e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a342:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a34a:	d056      	beq.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a352:	f200 8090 	bhi.w	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a358:	2bc0      	cmp	r3, #192	@ 0xc0
 800a35a:	f000 8088 	beq.w	800a46e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a360:	2bc0      	cmp	r3, #192	@ 0xc0
 800a362:	f200 8088 	bhi.w	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a368:	2b80      	cmp	r3, #128	@ 0x80
 800a36a:	d032      	beq.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36e:	2b80      	cmp	r3, #128	@ 0x80
 800a370:	f200 8081 	bhi.w	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37c:	2b40      	cmp	r3, #64	@ 0x40
 800a37e:	d014      	beq.n	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a380:	e079      	b.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a382:	4b3f      	ldr	r3, [pc, #252]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a38a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a38e:	d108      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a394:	4618      	mov	r0, r3
 800a396:	f000 ff67 	bl	800b268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a39e:	f000 bc9c 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3a6:	f000 bc98 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3aa:	4b35      	ldr	r3, [pc, #212]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3b6:	d108      	bne.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3b8:	f107 0318 	add.w	r3, r7, #24
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f000 fcab 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3c6:	f000 bc88 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3ce:	f000 bc84 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3d2:	4b2b      	ldr	r3, [pc, #172]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3de:	d108      	bne.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3e0:	f107 030c 	add.w	r3, r7, #12
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 fdeb 	bl	800afc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3ee:	f000 bc74 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f6:	f000 bc70 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3fa:	4b21      	ldr	r3, [pc, #132]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a402:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a404:	4b1e      	ldr	r3, [pc, #120]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b04      	cmp	r3, #4
 800a40e:	d10c      	bne.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a412:	2b00      	cmp	r3, #0
 800a414:	d109      	bne.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a416:	4b1a      	ldr	r3, [pc, #104]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	08db      	lsrs	r3, r3, #3
 800a41c:	f003 0303 	and.w	r3, r3, #3
 800a420:	4a18      	ldr	r2, [pc, #96]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a422:	fa22 f303 	lsr.w	r3, r2, r3
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a428:	e01f      	b.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a42a:	4b15      	ldr	r3, [pc, #84]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a436:	d106      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a43a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a43e:	d102      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a440:	4b11      	ldr	r3, [pc, #68]	@ (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a444:	e011      	b.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a446:	4b0e      	ldr	r3, [pc, #56]	@ (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a44e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a452:	d106      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a45a:	d102      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a45c:	4b0b      	ldr	r3, [pc, #44]	@ (800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a460:	e003      	b.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a466:	f000 bc38 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a46a:	f000 bc36 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a46e:	4b08      	ldr	r3, [pc, #32]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a472:	f000 bc32 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a476:	2300      	movs	r3, #0
 800a478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a47a:	f000 bc2e 	b.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a47e:	bf00      	nop
 800a480:	58024400 	.word	0x58024400
 800a484:	03d09000 	.word	0x03d09000
 800a488:	003d0900 	.word	0x003d0900
 800a48c:	017d7840 	.word	0x017d7840
 800a490:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a494:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a498:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a49c:	430b      	orrs	r3, r1
 800a49e:	f040 809c 	bne.w	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a4a2:	4b9e      	ldr	r3, [pc, #632]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4a6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a4aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a4b2:	d054      	beq.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a4ba:	f200 808b 	bhi.w	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a4c4:	f000 8083 	beq.w	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a4ce:	f200 8081 	bhi.w	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4d8:	d02f      	beq.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a4e0:	d878      	bhi.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d004      	beq.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a4ee:	d012      	beq.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a4f0:	e070      	b.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4f2:	4b8a      	ldr	r3, [pc, #552]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4fe:	d107      	bne.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a504:	4618      	mov	r0, r3
 800a506:	f000 feaf 	bl	800b268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a50e:	e3e4      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a514:	e3e1      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a516:	4b81      	ldr	r3, [pc, #516]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a51e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a522:	d107      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a524:	f107 0318 	add.w	r3, r7, #24
 800a528:	4618      	mov	r0, r3
 800a52a:	f000 fbf5 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a532:	e3d2      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a538:	e3cf      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a53a:	4b78      	ldr	r3, [pc, #480]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a542:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a546:	d107      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a548:	f107 030c 	add.w	r3, r7, #12
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 fd37 	bl	800afc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a556:	e3c0      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a558:	2300      	movs	r3, #0
 800a55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a55c:	e3bd      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a55e:	4b6f      	ldr	r3, [pc, #444]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a562:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a566:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a568:	4b6c      	ldr	r3, [pc, #432]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 0304 	and.w	r3, r3, #4
 800a570:	2b04      	cmp	r3, #4
 800a572:	d10c      	bne.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a576:	2b00      	cmp	r3, #0
 800a578:	d109      	bne.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a57a:	4b68      	ldr	r3, [pc, #416]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	08db      	lsrs	r3, r3, #3
 800a580:	f003 0303 	and.w	r3, r3, #3
 800a584:	4a66      	ldr	r2, [pc, #408]	@ (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a586:	fa22 f303 	lsr.w	r3, r2, r3
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a58c:	e01e      	b.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a58e:	4b63      	ldr	r3, [pc, #396]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a59a:	d106      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5a2:	d102      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5a4:	4b5f      	ldr	r3, [pc, #380]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5a8:	e010      	b.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5aa:	4b5c      	ldr	r3, [pc, #368]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5b6:	d106      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5be:	d102      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5c0:	4b59      	ldr	r3, [pc, #356]	@ (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5c4:	e002      	b.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5ca:	e386      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5cc:	e385      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5ce:	4b57      	ldr	r3, [pc, #348]	@ (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d2:	e382      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d8:	e37f      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a5da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5de:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a5e2:	430b      	orrs	r3, r1
 800a5e4:	f040 80a7 	bne.w	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a5e8:	4b4c      	ldr	r3, [pc, #304]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5ec:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a5f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a5f8:	d055      	beq.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a600:	f200 8096 	bhi.w	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a606:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a60a:	f000 8084 	beq.w	800a716 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a614:	f200 808c 	bhi.w	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a61e:	d030      	beq.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a622:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a626:	f200 8083 	bhi.w	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d004      	beq.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a636:	d012      	beq.n	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a638:	e07a      	b.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a63a:	4b38      	ldr	r3, [pc, #224]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a642:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a646:	d107      	bne.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 fe0b 	bl	800b268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a656:	e340      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a65c:	e33d      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a65e:	4b2f      	ldr	r3, [pc, #188]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a666:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a66a:	d107      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a66c:	f107 0318 	add.w	r3, r7, #24
 800a670:	4618      	mov	r0, r3
 800a672:	f000 fb51 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a67a:	e32e      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a67c:	2300      	movs	r3, #0
 800a67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a680:	e32b      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a682:	4b26      	ldr	r3, [pc, #152]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a68a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a68e:	d107      	bne.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a690:	f107 030c 	add.w	r3, r7, #12
 800a694:	4618      	mov	r0, r3
 800a696:	f000 fc93 	bl	800afc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a69e:	e31c      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a4:	e319      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6b0:	4b1a      	ldr	r3, [pc, #104]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	d10c      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d109      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6c2:	4b16      	ldr	r3, [pc, #88]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	08db      	lsrs	r3, r3, #3
 800a6c8:	f003 0303 	and.w	r3, r3, #3
 800a6cc:	4a14      	ldr	r2, [pc, #80]	@ (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a6ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6d4:	e01e      	b.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6d6:	4b11      	ldr	r3, [pc, #68]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6e2:	d106      	bne.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6ea:	d102      	bne.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6f0:	e010      	b.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6fe:	d106      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a706:	d102      	bne.n	800a70e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a708:	4b07      	ldr	r3, [pc, #28]	@ (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a70c:	e002      	b.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a712:	e2e2      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a714:	e2e1      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a716:	4b05      	ldr	r3, [pc, #20]	@ (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a71a:	e2de      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a71c:	58024400 	.word	0x58024400
 800a720:	03d09000 	.word	0x03d09000
 800a724:	003d0900 	.word	0x003d0900
 800a728:	017d7840 	.word	0x017d7840
 800a72c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a730:	2300      	movs	r3, #0
 800a732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a734:	e2d1      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a73e:	430b      	orrs	r3, r1
 800a740:	f040 809c 	bne.w	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a744:	4b93      	ldr	r3, [pc, #588]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a748:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a74c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a754:	d054      	beq.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a758:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a75c:	f200 808b 	bhi.w	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a762:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a766:	f000 8083 	beq.w	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a770:	f200 8081 	bhi.w	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a77a:	d02f      	beq.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a782:	d878      	bhi.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	2b00      	cmp	r3, #0
 800a788:	d004      	beq.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a790:	d012      	beq.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a792:	e070      	b.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a794:	4b7f      	ldr	r3, [pc, #508]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a79c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7a0:	d107      	bne.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 fd5e 	bl	800b268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b0:	e293      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b6:	e290      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7b8:	4b76      	ldr	r3, [pc, #472]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7c4:	d107      	bne.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c6:	f107 0318 	add.w	r3, r7, #24
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 faa4 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7d4:	e281      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7da:	e27e      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7dc:	4b6d      	ldr	r3, [pc, #436]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7e8:	d107      	bne.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ea:	f107 030c 	add.w	r3, r7, #12
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 fbe6 	bl	800afc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7f8:	e26f      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7fe:	e26c      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a800:	4b64      	ldr	r3, [pc, #400]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a804:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a808:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a80a:	4b62      	ldr	r3, [pc, #392]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 0304 	and.w	r3, r3, #4
 800a812:	2b04      	cmp	r3, #4
 800a814:	d10c      	bne.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d109      	bne.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a81c:	4b5d      	ldr	r3, [pc, #372]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	08db      	lsrs	r3, r3, #3
 800a822:	f003 0303 	and.w	r3, r3, #3
 800a826:	4a5c      	ldr	r2, [pc, #368]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a828:	fa22 f303 	lsr.w	r3, r2, r3
 800a82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a82e:	e01e      	b.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a830:	4b58      	ldr	r3, [pc, #352]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a83c:	d106      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a83e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a844:	d102      	bne.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a846:	4b55      	ldr	r3, [pc, #340]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a84a:	e010      	b.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a84c:	4b51      	ldr	r3, [pc, #324]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a854:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a858:	d106      	bne.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a85c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a860:	d102      	bne.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a862:	4b4f      	ldr	r3, [pc, #316]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a864:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a866:	e002      	b.n	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a86c:	e235      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a86e:	e234      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a870:	4b4c      	ldr	r3, [pc, #304]	@ (800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a874:	e231      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a87a:	e22e      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a87c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a880:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a884:	430b      	orrs	r3, r1
 800a886:	f040 808f 	bne.w	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a88a:	4b42      	ldr	r3, [pc, #264]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a88c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a88e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a892:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a896:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a89a:	d06b      	beq.n	800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a8a2:	d874      	bhi.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a8aa:	d056      	beq.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a8b2:	d86c      	bhi.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a8ba:	d03b      	beq.n	800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a8c2:	d864      	bhi.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8ca:	d021      	beq.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8d2:	d85c      	bhi.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d004      	beq.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8e0:	d004      	beq.n	800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a8e2:	e054      	b.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a8e4:	f7fe fa4c 	bl	8008d80 <HAL_RCC_GetPCLK1Freq>
 800a8e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8ea:	e1f6      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8ec:	4b29      	ldr	r3, [pc, #164]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8f8:	d107      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8fa:	f107 0318 	add.w	r3, r7, #24
 800a8fe:	4618      	mov	r0, r3
 800a900:	f000 fa0a 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a908:	e1e7      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a90a:	2300      	movs	r3, #0
 800a90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a90e:	e1e4      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a910:	4b20      	ldr	r3, [pc, #128]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a91c:	d107      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a91e:	f107 030c 	add.w	r3, r7, #12
 800a922:	4618      	mov	r0, r3
 800a924:	f000 fb4c 	bl	800afc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a92c:	e1d5      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a932:	e1d2      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a934:	4b17      	ldr	r3, [pc, #92]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d109      	bne.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a940:	4b14      	ldr	r3, [pc, #80]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	08db      	lsrs	r3, r3, #3
 800a946:	f003 0303 	and.w	r3, r3, #3
 800a94a:	4a13      	ldr	r2, [pc, #76]	@ (800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a94c:	fa22 f303 	lsr.w	r3, r2, r3
 800a950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a952:	e1c2      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a954:	2300      	movs	r3, #0
 800a956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a958:	e1bf      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a95a:	4b0e      	ldr	r3, [pc, #56]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a966:	d102      	bne.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a968:	4b0c      	ldr	r3, [pc, #48]	@ (800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a96c:	e1b5      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a972:	e1b2      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a974:	4b07      	ldr	r3, [pc, #28]	@ (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a97c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a980:	d102      	bne.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a982:	4b07      	ldr	r3, [pc, #28]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a986:	e1a8      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a98c:	e1a5      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a992:	e1a2      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a994:	58024400 	.word	0x58024400
 800a998:	03d09000 	.word	0x03d09000
 800a99c:	003d0900 	.word	0x003d0900
 800a9a0:	017d7840 	.word	0x017d7840
 800a9a4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ac:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a9b0:	430b      	orrs	r3, r1
 800a9b2:	d173      	bne.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a9b4:	4b9c      	ldr	r3, [pc, #624]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a9bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9c4:	d02f      	beq.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9cc:	d863      	bhi.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d004      	beq.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9da:	d012      	beq.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a9dc:	e05b      	b.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9de:	4b92      	ldr	r3, [pc, #584]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9ea:	d107      	bne.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ec:	f107 0318 	add.w	r3, r7, #24
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 f991 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9fa:	e16e      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa00:	e16b      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa02:	4b89      	ldr	r3, [pc, #548]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa0e:	d107      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa10:	f107 030c 	add.w	r3, r7, #12
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 fad3 	bl	800afc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa1e:	e15c      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa24:	e159      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa26:	4b80      	ldr	r3, [pc, #512]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aa2e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa30:	4b7d      	ldr	r3, [pc, #500]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0304 	and.w	r3, r3, #4
 800aa38:	2b04      	cmp	r3, #4
 800aa3a:	d10c      	bne.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aa3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d109      	bne.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa42:	4b79      	ldr	r3, [pc, #484]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	08db      	lsrs	r3, r3, #3
 800aa48:	f003 0303 	and.w	r3, r3, #3
 800aa4c:	4a77      	ldr	r2, [pc, #476]	@ (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aa4e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa54:	e01e      	b.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa56:	4b74      	ldr	r3, [pc, #464]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa62:	d106      	bne.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800aa64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa6a:	d102      	bne.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa6c:	4b70      	ldr	r3, [pc, #448]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aa6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa70:	e010      	b.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa72:	4b6d      	ldr	r3, [pc, #436]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa7e:	d106      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800aa80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa86:	d102      	bne.n	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa88:	4b6a      	ldr	r3, [pc, #424]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aa8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa8c:	e002      	b.n	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa92:	e122      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa94:	e121      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aa96:	2300      	movs	r3, #0
 800aa98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa9a:	e11e      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800aa9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaa0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800aaa4:	430b      	orrs	r3, r1
 800aaa6:	d133      	bne.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800aaa8:	4b5f      	ldr	r3, [pc, #380]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aab0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d004      	beq.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800aab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aabe:	d012      	beq.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800aac0:	e023      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aac2:	4b59      	ldr	r3, [pc, #356]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aaca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aace:	d107      	bne.n	800aae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aad4:	4618      	mov	r0, r3
 800aad6:	f000 fbc7 	bl	800b268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aade:	e0fc      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aae0:	2300      	movs	r3, #0
 800aae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aae4:	e0f9      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aae6:	4b50      	ldr	r3, [pc, #320]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aaee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaf2:	d107      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaf4:	f107 0318 	add.w	r3, r7, #24
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 f90d 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab02:	e0ea      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab08:	e0e7      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab0e:	e0e4      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ab10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab14:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ab18:	430b      	orrs	r3, r1
 800ab1a:	f040 808d 	bne.w	800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ab1e:	4b42      	ldr	r3, [pc, #264]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab22:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ab26:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab2e:	d06b      	beq.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ab30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ab36:	d874      	bhi.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab3e:	d056      	beq.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ab40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab46:	d86c      	bhi.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ab4e:	d03b      	beq.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ab50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ab56:	d864      	bhi.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab5e:	d021      	beq.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab66:	d85c      	bhi.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d004      	beq.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab74:	d004      	beq.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ab76:	e054      	b.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ab78:	f000 f8b8 	bl	800acec <HAL_RCCEx_GetD3PCLK1Freq>
 800ab7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab7e:	e0ac      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab80:	4b29      	ldr	r3, [pc, #164]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab8c:	d107      	bne.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab8e:	f107 0318 	add.w	r3, r7, #24
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 f8c0 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab9c:	e09d      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aba2:	e09a      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aba4:	4b20      	ldr	r3, [pc, #128]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abb0:	d107      	bne.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abb2:	f107 030c 	add.w	r3, r7, #12
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fa02 	bl	800afc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abc0:	e08b      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc6:	e088      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abc8:	4b17      	ldr	r3, [pc, #92]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0304 	and.w	r3, r3, #4
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d109      	bne.n	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abd4:	4b14      	ldr	r3, [pc, #80]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	08db      	lsrs	r3, r3, #3
 800abda:	f003 0303 	and.w	r3, r3, #3
 800abde:	4a13      	ldr	r2, [pc, #76]	@ (800ac2c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800abe0:	fa22 f303 	lsr.w	r3, r2, r3
 800abe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abe6:	e078      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abec:	e075      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800abee:	4b0e      	ldr	r3, [pc, #56]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abfa:	d102      	bne.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800abfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800abfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac00:	e06b      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac06:	e068      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac08:	4b07      	ldr	r3, [pc, #28]	@ (800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac14:	d102      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ac16:	4b07      	ldr	r3, [pc, #28]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ac18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac1a:	e05e      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac20:	e05b      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ac22:	2300      	movs	r3, #0
 800ac24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac26:	e058      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac28:	58024400 	.word	0x58024400
 800ac2c:	03d09000 	.word	0x03d09000
 800ac30:	003d0900 	.word	0x003d0900
 800ac34:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ac38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac3c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ac40:	430b      	orrs	r3, r1
 800ac42:	d148      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ac44:	4b27      	ldr	r3, [pc, #156]	@ (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac4c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac54:	d02a      	beq.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ac56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac5c:	d838      	bhi.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ac5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d004      	beq.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ac64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac6a:	d00d      	beq.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ac6c:	e030      	b.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac6e:	4b1d      	ldr	r3, [pc, #116]	@ (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac7a:	d102      	bne.n	800ac82 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ac7c:	4b1a      	ldr	r3, [pc, #104]	@ (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ac7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac80:	e02b      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac86:	e028      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac88:	4b16      	ldr	r3, [pc, #88]	@ (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac94:	d107      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 fae4 	bl	800b268 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aca4:	e019      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acaa:	e016      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acac:	4b0d      	ldr	r3, [pc, #52]	@ (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acb8:	d107      	bne.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acba:	f107 0318 	add.w	r3, r7, #24
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 f82a 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acc8:	e007      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acca:	2300      	movs	r3, #0
 800accc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acce:	e004      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd4:	e001      	b.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800acda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3740      	adds	r7, #64	@ 0x40
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	58024400 	.word	0x58024400
 800ace8:	017d7840 	.word	0x017d7840

0800acec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800acf0:	f7fe f816 	bl	8008d20 <HAL_RCC_GetHCLKFreq>
 800acf4:	4602      	mov	r2, r0
 800acf6:	4b06      	ldr	r3, [pc, #24]	@ (800ad10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	091b      	lsrs	r3, r3, #4
 800acfc:	f003 0307 	and.w	r3, r3, #7
 800ad00:	4904      	ldr	r1, [pc, #16]	@ (800ad14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ad02:	5ccb      	ldrb	r3, [r1, r3]
 800ad04:	f003 031f 	and.w	r3, r3, #31
 800ad08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	58024400 	.word	0x58024400
 800ad14:	080137c0 	.word	0x080137c0

0800ad18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b089      	sub	sp, #36	@ 0x24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad20:	4ba1      	ldr	r3, [pc, #644]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad24:	f003 0303 	and.w	r3, r3, #3
 800ad28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ad2a:	4b9f      	ldr	r3, [pc, #636]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad2e:	0b1b      	lsrs	r3, r3, #12
 800ad30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ad36:	4b9c      	ldr	r3, [pc, #624]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad3a:	091b      	lsrs	r3, r3, #4
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ad42:	4b99      	ldr	r3, [pc, #612]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad46:	08db      	lsrs	r3, r3, #3
 800ad48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	fb02 f303 	mul.w	r3, r2, r3
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 8111 	beq.w	800af88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	f000 8083 	beq.w	800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	f200 80a1 	bhi.w	800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d003      	beq.n	800ad84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d056      	beq.n	800ae30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ad82:	e099      	b.n	800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad84:	4b88      	ldr	r3, [pc, #544]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0320 	and.w	r3, r3, #32
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d02d      	beq.n	800adec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad90:	4b85      	ldr	r3, [pc, #532]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	08db      	lsrs	r3, r3, #3
 800ad96:	f003 0303 	and.w	r3, r3, #3
 800ad9a:	4a84      	ldr	r2, [pc, #528]	@ (800afac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ad9c:	fa22 f303 	lsr.w	r3, r2, r3
 800ada0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	ee07 3a90 	vmov	s15, r3
 800ada8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	ee07 3a90 	vmov	s15, r3
 800adb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adba:	4b7b      	ldr	r3, [pc, #492]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adca:	ed97 6a03 	vldr	s12, [r7, #12]
 800adce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800afb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800add2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800add6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ade2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800adea:	e087      	b.n	800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	ee07 3a90 	vmov	s15, r3
 800adf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800afb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800adfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adfe:	4b6a      	ldr	r3, [pc, #424]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800afb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae2e:	e065      	b.n	800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	ee07 3a90 	vmov	s15, r3
 800ae36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800afb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae42:	4b59      	ldr	r3, [pc, #356]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae4a:	ee07 3a90 	vmov	s15, r3
 800ae4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800afb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae72:	e043      	b.n	800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	ee07 3a90 	vmov	s15, r3
 800ae7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800afbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ae82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae86:	4b48      	ldr	r3, [pc, #288]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae8e:	ee07 3a90 	vmov	s15, r3
 800ae92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800afb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeb6:	e021      	b.n	800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	ee07 3a90 	vmov	s15, r3
 800aebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800afb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeca:	4b37      	ldr	r3, [pc, #220]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed2:	ee07 3a90 	vmov	s15, r3
 800aed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeda:	ed97 6a03 	vldr	s12, [r7, #12]
 800aede:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800afb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aeee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aefa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aefc:	4b2a      	ldr	r3, [pc, #168]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aefe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af00:	0a5b      	lsrs	r3, r3, #9
 800af02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af16:	edd7 6a07 	vldr	s13, [r7, #28]
 800af1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af22:	ee17 2a90 	vmov	r2, s15
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800af2a:	4b1f      	ldr	r3, [pc, #124]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af2e:	0c1b      	lsrs	r3, r3, #16
 800af30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af34:	ee07 3a90 	vmov	s15, r3
 800af38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af44:	edd7 6a07 	vldr	s13, [r7, #28]
 800af48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af50:	ee17 2a90 	vmov	r2, s15
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800af58:	4b13      	ldr	r3, [pc, #76]	@ (800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af5c:	0e1b      	lsrs	r3, r3, #24
 800af5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af72:	edd7 6a07 	vldr	s13, [r7, #28]
 800af76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af7e:	ee17 2a90 	vmov	r2, s15
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800af86:	e008      	b.n	800af9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	609a      	str	r2, [r3, #8]
}
 800af9a:	bf00      	nop
 800af9c:	3724      	adds	r7, #36	@ 0x24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	58024400 	.word	0x58024400
 800afac:	03d09000 	.word	0x03d09000
 800afb0:	46000000 	.word	0x46000000
 800afb4:	4c742400 	.word	0x4c742400
 800afb8:	4a742400 	.word	0x4a742400
 800afbc:	4bbebc20 	.word	0x4bbebc20

0800afc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b089      	sub	sp, #36	@ 0x24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afc8:	4ba1      	ldr	r3, [pc, #644]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afcc:	f003 0303 	and.w	r3, r3, #3
 800afd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800afd2:	4b9f      	ldr	r3, [pc, #636]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd6:	0d1b      	lsrs	r3, r3, #20
 800afd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afdc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800afde:	4b9c      	ldr	r3, [pc, #624]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe2:	0a1b      	lsrs	r3, r3, #8
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800afea:	4b99      	ldr	r3, [pc, #612]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afee:	08db      	lsrs	r3, r3, #3
 800aff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aff4:	693a      	ldr	r2, [r7, #16]
 800aff6:	fb02 f303 	mul.w	r3, r2, r3
 800affa:	ee07 3a90 	vmov	s15, r3
 800affe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b002:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 8111 	beq.w	800b230 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	2b02      	cmp	r3, #2
 800b012:	f000 8083 	beq.w	800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	2b02      	cmp	r3, #2
 800b01a:	f200 80a1 	bhi.w	800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d003      	beq.n	800b02c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d056      	beq.n	800b0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b02a:	e099      	b.n	800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b02c:	4b88      	ldr	r3, [pc, #544]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 0320 	and.w	r3, r3, #32
 800b034:	2b00      	cmp	r3, #0
 800b036:	d02d      	beq.n	800b094 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b038:	4b85      	ldr	r3, [pc, #532]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	08db      	lsrs	r3, r3, #3
 800b03e:	f003 0303 	and.w	r3, r3, #3
 800b042:	4a84      	ldr	r2, [pc, #528]	@ (800b254 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b044:	fa22 f303 	lsr.w	r3, r2, r3
 800b048:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	ee07 3a90 	vmov	s15, r3
 800b050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	ee07 3a90 	vmov	s15, r3
 800b05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b062:	4b7b      	ldr	r3, [pc, #492]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b06a:	ee07 3a90 	vmov	s15, r3
 800b06e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b072:	ed97 6a03 	vldr	s12, [r7, #12]
 800b076:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b07a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b07e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b08a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b08e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b092:	e087      	b.n	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b25c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0a6:	4b6a      	ldr	r3, [pc, #424]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ae:	ee07 3a90 	vmov	s15, r3
 800b0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0d6:	e065      	b.n	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	ee07 3a90 	vmov	s15, r3
 800b0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b0e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ea:	4b59      	ldr	r3, [pc, #356]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f2:	ee07 3a90 	vmov	s15, r3
 800b0f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b10a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b10e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b112:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b11a:	e043      	b.n	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	ee07 3a90 	vmov	s15, r3
 800b122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b126:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b264 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b12a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b12e:	4b48      	ldr	r3, [pc, #288]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b13e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b142:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b14a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b14e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b15a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b15e:	e021      	b.n	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	ee07 3a90 	vmov	s15, r3
 800b166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b16e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b172:	4b37      	ldr	r3, [pc, #220]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b17a:	ee07 3a90 	vmov	s15, r3
 800b17e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b182:	ed97 6a03 	vldr	s12, [r7, #12]
 800b186:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b258 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b18a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b18e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b192:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b1a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b1a4:	4b2a      	ldr	r3, [pc, #168]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1a8:	0a5b      	lsrs	r3, r3, #9
 800b1aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ca:	ee17 2a90 	vmov	r2, s15
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b1d2:	4b1f      	ldr	r3, [pc, #124]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d6:	0c1b      	lsrs	r3, r3, #16
 800b1d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1dc:	ee07 3a90 	vmov	s15, r3
 800b1e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1f8:	ee17 2a90 	vmov	r2, s15
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b200:	4b13      	ldr	r3, [pc, #76]	@ (800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b204:	0e1b      	lsrs	r3, r3, #24
 800b206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b212:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b21a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b21e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b226:	ee17 2a90 	vmov	r2, s15
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b22e:	e008      	b.n	800b242 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	609a      	str	r2, [r3, #8]
}
 800b242:	bf00      	nop
 800b244:	3724      	adds	r7, #36	@ 0x24
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
 800b24e:	bf00      	nop
 800b250:	58024400 	.word	0x58024400
 800b254:	03d09000 	.word	0x03d09000
 800b258:	46000000 	.word	0x46000000
 800b25c:	4c742400 	.word	0x4c742400
 800b260:	4a742400 	.word	0x4a742400
 800b264:	4bbebc20 	.word	0x4bbebc20

0800b268 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b268:	b480      	push	{r7}
 800b26a:	b089      	sub	sp, #36	@ 0x24
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b270:	4ba0      	ldr	r3, [pc, #640]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b274:	f003 0303 	and.w	r3, r3, #3
 800b278:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b27a:	4b9e      	ldr	r3, [pc, #632]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b27e:	091b      	lsrs	r3, r3, #4
 800b280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b284:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b286:	4b9b      	ldr	r3, [pc, #620]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b290:	4b98      	ldr	r3, [pc, #608]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b294:	08db      	lsrs	r3, r3, #3
 800b296:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	fb02 f303 	mul.w	r3, r2, r3
 800b2a0:	ee07 3a90 	vmov	s15, r3
 800b2a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 8111 	beq.w	800b4d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	f000 8083 	beq.w	800b3c2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	f200 80a1 	bhi.w	800b406 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d056      	beq.n	800b37e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b2d0:	e099      	b.n	800b406 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2d2:	4b88      	ldr	r3, [pc, #544]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f003 0320 	and.w	r3, r3, #32
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d02d      	beq.n	800b33a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2de:	4b85      	ldr	r3, [pc, #532]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	08db      	lsrs	r3, r3, #3
 800b2e4:	f003 0303 	and.w	r3, r3, #3
 800b2e8:	4a83      	ldr	r2, [pc, #524]	@ (800b4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	ee07 3a90 	vmov	s15, r3
 800b300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b304:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b308:	4b7a      	ldr	r3, [pc, #488]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b30a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b310:	ee07 3a90 	vmov	s15, r3
 800b314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b318:	ed97 6a03 	vldr	s12, [r7, #12]
 800b31c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b4fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b320:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b324:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b328:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b32c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b330:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b334:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b338:	e087      	b.n	800b44a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	ee07 3a90 	vmov	s15, r3
 800b340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b344:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b500 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b34c:	4b69      	ldr	r3, [pc, #420]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b34e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b354:	ee07 3a90 	vmov	s15, r3
 800b358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b35c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b360:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b4fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b36c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b374:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b378:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b37c:	e065      	b.n	800b44a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	ee07 3a90 	vmov	s15, r3
 800b384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b388:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b504 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b38c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b390:	4b58      	ldr	r3, [pc, #352]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b398:	ee07 3a90 	vmov	s15, r3
 800b39c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3a4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b4fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3c0:	e043      	b.n	800b44a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	ee07 3a90 	vmov	s15, r3
 800b3c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3cc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b508 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b3d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3d4:	4b47      	ldr	r3, [pc, #284]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3dc:	ee07 3a90 	vmov	s15, r3
 800b3e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3e8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b4fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b400:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b404:	e021      	b.n	800b44a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	ee07 3a90 	vmov	s15, r3
 800b40c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b410:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b500 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b418:	4b36      	ldr	r3, [pc, #216]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b41a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b41c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b420:	ee07 3a90 	vmov	s15, r3
 800b424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b428:	ed97 6a03 	vldr	s12, [r7, #12]
 800b42c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b4fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b438:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b43c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b440:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b444:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b448:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b44a:	4b2a      	ldr	r3, [pc, #168]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b44c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b44e:	0a5b      	lsrs	r3, r3, #9
 800b450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b454:	ee07 3a90 	vmov	s15, r3
 800b458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b460:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b464:	edd7 6a07 	vldr	s13, [r7, #28]
 800b468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b46c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b470:	ee17 2a90 	vmov	r2, s15
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b478:	4b1e      	ldr	r3, [pc, #120]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47c:	0c1b      	lsrs	r3, r3, #16
 800b47e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b482:	ee07 3a90 	vmov	s15, r3
 800b486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b48e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b492:	edd7 6a07 	vldr	s13, [r7, #28]
 800b496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b49a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b49e:	ee17 2a90 	vmov	r2, s15
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b4a6:	4b13      	ldr	r3, [pc, #76]	@ (800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4aa:	0e1b      	lsrs	r3, r3, #24
 800b4ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4b0:	ee07 3a90 	vmov	s15, r3
 800b4b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4cc:	ee17 2a90 	vmov	r2, s15
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b4d4:	e008      	b.n	800b4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	609a      	str	r2, [r3, #8]
}
 800b4e8:	bf00      	nop
 800b4ea:	3724      	adds	r7, #36	@ 0x24
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	58024400 	.word	0x58024400
 800b4f8:	03d09000 	.word	0x03d09000
 800b4fc:	46000000 	.word	0x46000000
 800b500:	4c742400 	.word	0x4c742400
 800b504:	4a742400 	.word	0x4a742400
 800b508:	4bbebc20 	.word	0x4bbebc20

0800b50c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b51a:	4b53      	ldr	r3, [pc, #332]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51e:	f003 0303 	and.w	r3, r3, #3
 800b522:	2b03      	cmp	r3, #3
 800b524:	d101      	bne.n	800b52a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e099      	b.n	800b65e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b52a:	4b4f      	ldr	r3, [pc, #316]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a4e      	ldr	r2, [pc, #312]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b530:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b536:	f7f6 feb3 	bl	80022a0 <HAL_GetTick>
 800b53a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b53c:	e008      	b.n	800b550 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b53e:	f7f6 feaf 	bl	80022a0 <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d901      	bls.n	800b550 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b54c:	2303      	movs	r3, #3
 800b54e:	e086      	b.n	800b65e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b550:	4b45      	ldr	r3, [pc, #276]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1f0      	bne.n	800b53e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b55c:	4b42      	ldr	r3, [pc, #264]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b560:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	031b      	lsls	r3, r3, #12
 800b56a:	493f      	ldr	r1, [pc, #252]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b56c:	4313      	orrs	r3, r2
 800b56e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	3b01      	subs	r3, #1
 800b576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	3b01      	subs	r3, #1
 800b580:	025b      	lsls	r3, r3, #9
 800b582:	b29b      	uxth	r3, r3
 800b584:	431a      	orrs	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	041b      	lsls	r3, r3, #16
 800b58e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b592:	431a      	orrs	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	3b01      	subs	r3, #1
 800b59a:	061b      	lsls	r3, r3, #24
 800b59c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b5a0:	4931      	ldr	r1, [pc, #196]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b5a6:	4b30      	ldr	r3, [pc, #192]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	492d      	ldr	r1, [pc, #180]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b5b8:	4b2b      	ldr	r3, [pc, #172]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5bc:	f023 0220 	bic.w	r2, r3, #32
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	4928      	ldr	r1, [pc, #160]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b5ca:	4b27      	ldr	r3, [pc, #156]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ce:	4a26      	ldr	r2, [pc, #152]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5d0:	f023 0310 	bic.w	r3, r3, #16
 800b5d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b5d6:	4b24      	ldr	r3, [pc, #144]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5da:	4b24      	ldr	r3, [pc, #144]	@ (800b66c <RCCEx_PLL2_Config+0x160>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	69d2      	ldr	r2, [r2, #28]
 800b5e2:	00d2      	lsls	r2, r2, #3
 800b5e4:	4920      	ldr	r1, [pc, #128]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b5ea:	4b1f      	ldr	r3, [pc, #124]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ee:	4a1e      	ldr	r2, [pc, #120]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5f0:	f043 0310 	orr.w	r3, r3, #16
 800b5f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d106      	bne.n	800b60a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b5fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b600:	4a19      	ldr	r2, [pc, #100]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b602:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b608:	e00f      	b.n	800b62a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d106      	bne.n	800b61e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b610:	4b15      	ldr	r3, [pc, #84]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b614:	4a14      	ldr	r2, [pc, #80]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b61a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b61c:	e005      	b.n	800b62a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b61e:	4b12      	ldr	r3, [pc, #72]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b622:	4a11      	ldr	r2, [pc, #68]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b624:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b628:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b62a:	4b0f      	ldr	r3, [pc, #60]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a0e      	ldr	r2, [pc, #56]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b630:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b636:	f7f6 fe33 	bl	80022a0 <HAL_GetTick>
 800b63a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b63c:	e008      	b.n	800b650 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b63e:	f7f6 fe2f 	bl	80022a0 <HAL_GetTick>
 800b642:	4602      	mov	r2, r0
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d901      	bls.n	800b650 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e006      	b.n	800b65e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b650:	4b05      	ldr	r3, [pc, #20]	@ (800b668 <RCCEx_PLL2_Config+0x15c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0f0      	beq.n	800b63e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	58024400 	.word	0x58024400
 800b66c:	ffff0007 	.word	0xffff0007

0800b670 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b67e:	4b53      	ldr	r3, [pc, #332]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b682:	f003 0303 	and.w	r3, r3, #3
 800b686:	2b03      	cmp	r3, #3
 800b688:	d101      	bne.n	800b68e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e099      	b.n	800b7c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b68e:	4b4f      	ldr	r3, [pc, #316]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a4e      	ldr	r2, [pc, #312]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b69a:	f7f6 fe01 	bl	80022a0 <HAL_GetTick>
 800b69e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6a0:	e008      	b.n	800b6b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b6a2:	f7f6 fdfd 	bl	80022a0 <HAL_GetTick>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d901      	bls.n	800b6b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e086      	b.n	800b7c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6b4:	4b45      	ldr	r3, [pc, #276]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1f0      	bne.n	800b6a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b6c0:	4b42      	ldr	r3, [pc, #264]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	051b      	lsls	r3, r3, #20
 800b6ce:	493f      	ldr	r1, [pc, #252]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	025b      	lsls	r3, r3, #9
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	431a      	orrs	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	041b      	lsls	r3, r3, #16
 800b6f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b6f6:	431a      	orrs	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	061b      	lsls	r3, r3, #24
 800b700:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b704:	4931      	ldr	r1, [pc, #196]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b706:	4313      	orrs	r3, r2
 800b708:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b70a:	4b30      	ldr	r3, [pc, #192]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b70e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	492d      	ldr	r1, [pc, #180]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b71c:	4b2b      	ldr	r3, [pc, #172]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b720:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	699b      	ldr	r3, [r3, #24]
 800b728:	4928      	ldr	r1, [pc, #160]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b72a:	4313      	orrs	r3, r2
 800b72c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b72e:	4b27      	ldr	r3, [pc, #156]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b732:	4a26      	ldr	r2, [pc, #152]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b738:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b73a:	4b24      	ldr	r3, [pc, #144]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b73c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b73e:	4b24      	ldr	r3, [pc, #144]	@ (800b7d0 <RCCEx_PLL3_Config+0x160>)
 800b740:	4013      	ands	r3, r2
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	69d2      	ldr	r2, [r2, #28]
 800b746:	00d2      	lsls	r2, r2, #3
 800b748:	4920      	ldr	r1, [pc, #128]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b74e:	4b1f      	ldr	r3, [pc, #124]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b752:	4a1e      	ldr	r2, [pc, #120]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b758:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d106      	bne.n	800b76e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b760:	4b1a      	ldr	r3, [pc, #104]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b764:	4a19      	ldr	r2, [pc, #100]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b766:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b76a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b76c:	e00f      	b.n	800b78e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d106      	bne.n	800b782 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b774:	4b15      	ldr	r3, [pc, #84]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b778:	4a14      	ldr	r2, [pc, #80]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b77a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b77e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b780:	e005      	b.n	800b78e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b782:	4b12      	ldr	r3, [pc, #72]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b786:	4a11      	ldr	r2, [pc, #68]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b788:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b78c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b78e:	4b0f      	ldr	r3, [pc, #60]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a0e      	ldr	r2, [pc, #56]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b79a:	f7f6 fd81 	bl	80022a0 <HAL_GetTick>
 800b79e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7a0:	e008      	b.n	800b7b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b7a2:	f7f6 fd7d 	bl	80022a0 <HAL_GetTick>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d901      	bls.n	800b7b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e006      	b.n	800b7c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7b4:	4b05      	ldr	r3, [pc, #20]	@ (800b7cc <RCCEx_PLL3_Config+0x15c>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d0f0      	beq.n	800b7a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	58024400 	.word	0x58024400
 800b7d0:	ffff0007 	.word	0xffff0007

0800b7d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e049      	b.n	800b87a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d106      	bne.n	800b800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7f6 fba8 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2202      	movs	r2, #2
 800b804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3304      	adds	r3, #4
 800b810:	4619      	mov	r1, r3
 800b812:	4610      	mov	r0, r2
 800b814:	f000 f9c6 	bl	800bba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
	...

0800b884 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b01      	cmp	r3, #1
 800b896:	d001      	beq.n	800b89c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e04c      	b.n	800b936 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2202      	movs	r2, #2
 800b8a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a26      	ldr	r2, [pc, #152]	@ (800b944 <HAL_TIM_Base_Start+0xc0>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d022      	beq.n	800b8f4 <HAL_TIM_Base_Start+0x70>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8b6:	d01d      	beq.n	800b8f4 <HAL_TIM_Base_Start+0x70>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a22      	ldr	r2, [pc, #136]	@ (800b948 <HAL_TIM_Base_Start+0xc4>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d018      	beq.n	800b8f4 <HAL_TIM_Base_Start+0x70>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a21      	ldr	r2, [pc, #132]	@ (800b94c <HAL_TIM_Base_Start+0xc8>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d013      	beq.n	800b8f4 <HAL_TIM_Base_Start+0x70>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a1f      	ldr	r2, [pc, #124]	@ (800b950 <HAL_TIM_Base_Start+0xcc>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d00e      	beq.n	800b8f4 <HAL_TIM_Base_Start+0x70>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a1e      	ldr	r2, [pc, #120]	@ (800b954 <HAL_TIM_Base_Start+0xd0>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d009      	beq.n	800b8f4 <HAL_TIM_Base_Start+0x70>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a1c      	ldr	r2, [pc, #112]	@ (800b958 <HAL_TIM_Base_Start+0xd4>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d004      	beq.n	800b8f4 <HAL_TIM_Base_Start+0x70>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a1b      	ldr	r2, [pc, #108]	@ (800b95c <HAL_TIM_Base_Start+0xd8>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d115      	bne.n	800b920 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689a      	ldr	r2, [r3, #8]
 800b8fa:	4b19      	ldr	r3, [pc, #100]	@ (800b960 <HAL_TIM_Base_Start+0xdc>)
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	2b06      	cmp	r3, #6
 800b904:	d015      	beq.n	800b932 <HAL_TIM_Base_Start+0xae>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b90c:	d011      	beq.n	800b932 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f042 0201 	orr.w	r2, r2, #1
 800b91c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b91e:	e008      	b.n	800b932 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f042 0201 	orr.w	r2, r2, #1
 800b92e:	601a      	str	r2, [r3, #0]
 800b930:	e000      	b.n	800b934 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b932:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	40010000 	.word	0x40010000
 800b948:	40000400 	.word	0x40000400
 800b94c:	40000800 	.word	0x40000800
 800b950:	40000c00 	.word	0x40000c00
 800b954:	40010400 	.word	0x40010400
 800b958:	40001800 	.word	0x40001800
 800b95c:	40014000 	.word	0x40014000
 800b960:	00010007 	.word	0x00010007

0800b964 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6a1a      	ldr	r2, [r3, #32]
 800b972:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b976:	4013      	ands	r3, r2
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10f      	bne.n	800b99c <HAL_TIM_Base_Stop+0x38>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6a1a      	ldr	r2, [r3, #32]
 800b982:	f240 4344 	movw	r3, #1092	@ 0x444
 800b986:	4013      	ands	r3, r2
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d107      	bne.n	800b99c <HAL_TIM_Base_Stop+0x38>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f022 0201 	bic.w	r2, r2, #1
 800b99a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	370c      	adds	r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
	...

0800b9b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d101      	bne.n	800b9d0 <HAL_TIM_ConfigClockSource+0x1c>
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	e0dc      	b.n	800bb8a <HAL_TIM_ConfigClockSource+0x1d6>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2202      	movs	r2, #2
 800b9dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	4b6a      	ldr	r3, [pc, #424]	@ (800bb94 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a64      	ldr	r2, [pc, #400]	@ (800bb98 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	f000 80a9 	beq.w	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba0c:	4a62      	ldr	r2, [pc, #392]	@ (800bb98 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	f200 80ae 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba14:	4a61      	ldr	r2, [pc, #388]	@ (800bb9c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	f000 80a1 	beq.w	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba1c:	4a5f      	ldr	r2, [pc, #380]	@ (800bb9c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	f200 80a6 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba24:	4a5e      	ldr	r2, [pc, #376]	@ (800bba0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	f000 8099 	beq.w	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba2c:	4a5c      	ldr	r2, [pc, #368]	@ (800bba0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	f200 809e 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba38:	f000 8091 	beq.w	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba40:	f200 8096 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba48:	f000 8089 	beq.w	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba50:	f200 808e 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba58:	d03e      	beq.n	800bad8 <HAL_TIM_ConfigClockSource+0x124>
 800ba5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba5e:	f200 8087 	bhi.w	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba66:	f000 8086 	beq.w	800bb76 <HAL_TIM_ConfigClockSource+0x1c2>
 800ba6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba6e:	d87f      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba70:	2b70      	cmp	r3, #112	@ 0x70
 800ba72:	d01a      	beq.n	800baaa <HAL_TIM_ConfigClockSource+0xf6>
 800ba74:	2b70      	cmp	r3, #112	@ 0x70
 800ba76:	d87b      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba78:	2b60      	cmp	r3, #96	@ 0x60
 800ba7a:	d050      	beq.n	800bb1e <HAL_TIM_ConfigClockSource+0x16a>
 800ba7c:	2b60      	cmp	r3, #96	@ 0x60
 800ba7e:	d877      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba80:	2b50      	cmp	r3, #80	@ 0x50
 800ba82:	d03c      	beq.n	800bafe <HAL_TIM_ConfigClockSource+0x14a>
 800ba84:	2b50      	cmp	r3, #80	@ 0x50
 800ba86:	d873      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba88:	2b40      	cmp	r3, #64	@ 0x40
 800ba8a:	d058      	beq.n	800bb3e <HAL_TIM_ConfigClockSource+0x18a>
 800ba8c:	2b40      	cmp	r3, #64	@ 0x40
 800ba8e:	d86f      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba90:	2b30      	cmp	r3, #48	@ 0x30
 800ba92:	d064      	beq.n	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba94:	2b30      	cmp	r3, #48	@ 0x30
 800ba96:	d86b      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba98:	2b20      	cmp	r3, #32
 800ba9a:	d060      	beq.n	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800ba9c:	2b20      	cmp	r3, #32
 800ba9e:	d867      	bhi.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d05c      	beq.n	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800baa4:	2b10      	cmp	r3, #16
 800baa6:	d05a      	beq.n	800bb5e <HAL_TIM_ConfigClockSource+0x1aa>
 800baa8:	e062      	b.n	800bb70 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800baba:	f000 f98b 	bl	800bdd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bacc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	609a      	str	r2, [r3, #8]
      break;
 800bad6:	e04f      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bae8:	f000 f974 	bl	800bdd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	689a      	ldr	r2, [r3, #8]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bafa:	609a      	str	r2, [r3, #8]
      break;
 800bafc:	e03c      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	f000 f8e4 	bl	800bcd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2150      	movs	r1, #80	@ 0x50
 800bb16:	4618      	mov	r0, r3
 800bb18:	f000 f93e 	bl	800bd98 <TIM_ITRx_SetConfig>
      break;
 800bb1c:	e02c      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f000 f903 	bl	800bd36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2160      	movs	r1, #96	@ 0x60
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 f92e 	bl	800bd98 <TIM_ITRx_SetConfig>
      break;
 800bb3c:	e01c      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	f000 f8c4 	bl	800bcd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2140      	movs	r1, #64	@ 0x40
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f91e 	bl	800bd98 <TIM_ITRx_SetConfig>
      break;
 800bb5c:	e00c      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4619      	mov	r1, r3
 800bb68:	4610      	mov	r0, r2
 800bb6a:	f000 f915 	bl	800bd98 <TIM_ITRx_SetConfig>
      break;
 800bb6e:	e003      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	73fb      	strb	r3, [r7, #15]
      break;
 800bb74:	e000      	b.n	800bb78 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bb76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	ffceff88 	.word	0xffceff88
 800bb98:	00100040 	.word	0x00100040
 800bb9c:	00100030 	.word	0x00100030
 800bba0:	00100020 	.word	0x00100020

0800bba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a40      	ldr	r2, [pc, #256]	@ (800bcb8 <TIM_Base_SetConfig+0x114>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d013      	beq.n	800bbe4 <TIM_Base_SetConfig+0x40>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbc2:	d00f      	beq.n	800bbe4 <TIM_Base_SetConfig+0x40>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a3d      	ldr	r2, [pc, #244]	@ (800bcbc <TIM_Base_SetConfig+0x118>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d00b      	beq.n	800bbe4 <TIM_Base_SetConfig+0x40>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a3c      	ldr	r2, [pc, #240]	@ (800bcc0 <TIM_Base_SetConfig+0x11c>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d007      	beq.n	800bbe4 <TIM_Base_SetConfig+0x40>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a3b      	ldr	r2, [pc, #236]	@ (800bcc4 <TIM_Base_SetConfig+0x120>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d003      	beq.n	800bbe4 <TIM_Base_SetConfig+0x40>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a3a      	ldr	r2, [pc, #232]	@ (800bcc8 <TIM_Base_SetConfig+0x124>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d108      	bne.n	800bbf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a2f      	ldr	r2, [pc, #188]	@ (800bcb8 <TIM_Base_SetConfig+0x114>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d01f      	beq.n	800bc3e <TIM_Base_SetConfig+0x9a>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc04:	d01b      	beq.n	800bc3e <TIM_Base_SetConfig+0x9a>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a2c      	ldr	r2, [pc, #176]	@ (800bcbc <TIM_Base_SetConfig+0x118>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d017      	beq.n	800bc3e <TIM_Base_SetConfig+0x9a>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4a2b      	ldr	r2, [pc, #172]	@ (800bcc0 <TIM_Base_SetConfig+0x11c>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d013      	beq.n	800bc3e <TIM_Base_SetConfig+0x9a>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a2a      	ldr	r2, [pc, #168]	@ (800bcc4 <TIM_Base_SetConfig+0x120>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d00f      	beq.n	800bc3e <TIM_Base_SetConfig+0x9a>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a29      	ldr	r2, [pc, #164]	@ (800bcc8 <TIM_Base_SetConfig+0x124>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d00b      	beq.n	800bc3e <TIM_Base_SetConfig+0x9a>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a28      	ldr	r2, [pc, #160]	@ (800bccc <TIM_Base_SetConfig+0x128>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d007      	beq.n	800bc3e <TIM_Base_SetConfig+0x9a>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a27      	ldr	r2, [pc, #156]	@ (800bcd0 <TIM_Base_SetConfig+0x12c>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d003      	beq.n	800bc3e <TIM_Base_SetConfig+0x9a>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a26      	ldr	r2, [pc, #152]	@ (800bcd4 <TIM_Base_SetConfig+0x130>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d108      	bne.n	800bc50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	689a      	ldr	r2, [r3, #8]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a10      	ldr	r2, [pc, #64]	@ (800bcb8 <TIM_Base_SetConfig+0x114>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d00f      	beq.n	800bc9c <TIM_Base_SetConfig+0xf8>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a12      	ldr	r2, [pc, #72]	@ (800bcc8 <TIM_Base_SetConfig+0x124>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d00b      	beq.n	800bc9c <TIM_Base_SetConfig+0xf8>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a11      	ldr	r2, [pc, #68]	@ (800bccc <TIM_Base_SetConfig+0x128>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d007      	beq.n	800bc9c <TIM_Base_SetConfig+0xf8>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a10      	ldr	r2, [pc, #64]	@ (800bcd0 <TIM_Base_SetConfig+0x12c>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d003      	beq.n	800bc9c <TIM_Base_SetConfig+0xf8>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a0f      	ldr	r2, [pc, #60]	@ (800bcd4 <TIM_Base_SetConfig+0x130>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d103      	bne.n	800bca4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	691a      	ldr	r2, [r3, #16]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2201      	movs	r2, #1
 800bca8:	615a      	str	r2, [r3, #20]
}
 800bcaa:	bf00      	nop
 800bcac:	3714      	adds	r7, #20
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	40010000 	.word	0x40010000
 800bcbc:	40000400 	.word	0x40000400
 800bcc0:	40000800 	.word	0x40000800
 800bcc4:	40000c00 	.word	0x40000c00
 800bcc8:	40010400 	.word	0x40010400
 800bccc:	40014000 	.word	0x40014000
 800bcd0:	40014400 	.word	0x40014400
 800bcd4:	40014800 	.word	0x40014800

0800bcd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b087      	sub	sp, #28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6a1b      	ldr	r3, [r3, #32]
 800bce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6a1b      	ldr	r3, [r3, #32]
 800bcee:	f023 0201 	bic.w	r2, r3, #1
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bd02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	011b      	lsls	r3, r3, #4
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	f023 030a 	bic.w	r3, r3, #10
 800bd14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd16:	697a      	ldr	r2, [r7, #20]
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	697a      	ldr	r2, [r7, #20]
 800bd28:	621a      	str	r2, [r3, #32]
}
 800bd2a:	bf00      	nop
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd36:	b480      	push	{r7}
 800bd38:	b087      	sub	sp, #28
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	60f8      	str	r0, [r7, #12]
 800bd3e:	60b9      	str	r1, [r7, #8]
 800bd40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	f023 0210 	bic.w	r2, r3, #16
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	699b      	ldr	r3, [r3, #24]
 800bd52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6a1b      	ldr	r3, [r3, #32]
 800bd58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bd60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	031b      	lsls	r3, r3, #12
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bd72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	011b      	lsls	r3, r3, #4
 800bd78:	693a      	ldr	r2, [r7, #16]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	697a      	ldr	r2, [r7, #20]
 800bd82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	621a      	str	r2, [r3, #32]
}
 800bd8a:	bf00      	nop
 800bd8c:	371c      	adds	r7, #28
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
	...

0800bd98 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	4b09      	ldr	r3, [pc, #36]	@ (800bdd0 <TIM_ITRx_SetConfig+0x38>)
 800bdac:	4013      	ands	r3, r2
 800bdae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bdb0:	683a      	ldr	r2, [r7, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	f043 0307 	orr.w	r3, r3, #7
 800bdba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	609a      	str	r2, [r3, #8]
}
 800bdc2:	bf00      	nop
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	ffcfff8f 	.word	0xffcfff8f

0800bdd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
 800bde0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bdee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	021a      	lsls	r2, r3, #8
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	697a      	ldr	r2, [r7, #20]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	609a      	str	r2, [r3, #8]
}
 800be08:	bf00      	nop
 800be0a:	371c      	adds	r7, #28
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be24:	2b01      	cmp	r3, #1
 800be26:	d101      	bne.n	800be2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be28:	2302      	movs	r3, #2
 800be2a:	e06d      	b.n	800bf08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2202      	movs	r2, #2
 800be38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a30      	ldr	r2, [pc, #192]	@ (800bf14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d004      	beq.n	800be60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a2f      	ldr	r2, [pc, #188]	@ (800bf18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d108      	bne.n	800be72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800be66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	4313      	orrs	r3, r2
 800be70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	4313      	orrs	r3, r2
 800be82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a20      	ldr	r2, [pc, #128]	@ (800bf14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d022      	beq.n	800bedc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be9e:	d01d      	beq.n	800bedc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d018      	beq.n	800bedc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a1c      	ldr	r2, [pc, #112]	@ (800bf20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d013      	beq.n	800bedc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a1a      	ldr	r2, [pc, #104]	@ (800bf24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d00e      	beq.n	800bedc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a15      	ldr	r2, [pc, #84]	@ (800bf18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d009      	beq.n	800bedc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a16      	ldr	r2, [pc, #88]	@ (800bf28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d004      	beq.n	800bedc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a15      	ldr	r2, [pc, #84]	@ (800bf2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d10c      	bne.n	800bef6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bee2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	4313      	orrs	r3, r2
 800beec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3714      	adds	r7, #20
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr
 800bf14:	40010000 	.word	0x40010000
 800bf18:	40010400 	.word	0x40010400
 800bf1c:	40000400 	.word	0x40000400
 800bf20:	40000800 	.word	0x40000800
 800bf24:	40000c00 	.word	0x40000c00
 800bf28:	40001800 	.word	0x40001800
 800bf2c:	40014000 	.word	0x40014000

0800bf30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d101      	bne.n	800bf42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e042      	b.n	800bfc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d106      	bne.n	800bf5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7f6 f881 	bl	800205c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2224      	movs	r2, #36	@ 0x24
 800bf5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f022 0201 	bic.w	r2, r2, #1
 800bf70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fc94 	bl	800c8a0 <UART_SetConfig>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d101      	bne.n	800bf82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e022      	b.n	800bfc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d002      	beq.n	800bf90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f001 f9f0 	bl	800d370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bf9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689a      	ldr	r2, [r3, #8]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bfae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f042 0201 	orr.w	r2, r2, #1
 800bfbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f001 fa77 	bl	800d4b4 <UART_CheckIdleState>
 800bfc6:	4603      	mov	r3, r0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08a      	sub	sp, #40	@ 0x28
 800bfd4:	af02      	add	r7, sp, #8
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	603b      	str	r3, [r7, #0]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfe6:	2b20      	cmp	r3, #32
 800bfe8:	d17b      	bne.n	800c0e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <HAL_UART_Transmit+0x26>
 800bff0:	88fb      	ldrh	r3, [r7, #6]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d101      	bne.n	800bffa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e074      	b.n	800c0e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2221      	movs	r2, #33	@ 0x21
 800c006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c00a:	f7f6 f949 	bl	80022a0 <HAL_GetTick>
 800c00e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	88fa      	ldrh	r2, [r7, #6]
 800c014:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	88fa      	ldrh	r2, [r7, #6]
 800c01c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c028:	d108      	bne.n	800c03c <HAL_UART_Transmit+0x6c>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d104      	bne.n	800c03c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c032:	2300      	movs	r3, #0
 800c034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	61bb      	str	r3, [r7, #24]
 800c03a:	e003      	b.n	800c044 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c040:	2300      	movs	r3, #0
 800c042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c044:	e030      	b.n	800c0a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	9300      	str	r3, [sp, #0]
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	2200      	movs	r2, #0
 800c04e:	2180      	movs	r1, #128	@ 0x80
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f001 fad9 	bl	800d608 <UART_WaitOnFlagUntilTimeout>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d005      	beq.n	800c068 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2220      	movs	r2, #32
 800c060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c064:	2303      	movs	r3, #3
 800c066:	e03d      	b.n	800c0e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10b      	bne.n	800c086 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	461a      	mov	r2, r3
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c07c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	3302      	adds	r3, #2
 800c082:	61bb      	str	r3, [r7, #24]
 800c084:	e007      	b.n	800c096 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	781a      	ldrb	r2, [r3, #0]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	3301      	adds	r3, #1
 800c094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1c8      	bne.n	800c046 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	2140      	movs	r1, #64	@ 0x40
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f001 faa2 	bl	800d608 <UART_WaitOnFlagUntilTimeout>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d005      	beq.n	800c0d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2220      	movs	r2, #32
 800c0ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c0d2:	2303      	movs	r3, #3
 800c0d4:	e006      	b.n	800c0e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2220      	movs	r2, #32
 800c0da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	e000      	b.n	800c0e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c0e2:	2302      	movs	r3, #2
  }
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3720      	adds	r7, #32
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b0ba      	sub	sp, #232	@ 0xe8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	69db      	ldr	r3, [r3, #28]
 800c0fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c112:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c116:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c11a:	4013      	ands	r3, r2
 800c11c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c124:	2b00      	cmp	r3, #0
 800c126:	d11b      	bne.n	800c160 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c12c:	f003 0320 	and.w	r3, r3, #32
 800c130:	2b00      	cmp	r3, #0
 800c132:	d015      	beq.n	800c160 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c138:	f003 0320 	and.w	r3, r3, #32
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d105      	bne.n	800c14c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d009      	beq.n	800c160 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c150:	2b00      	cmp	r3, #0
 800c152:	f000 8377 	beq.w	800c844 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	4798      	blx	r3
      }
      return;
 800c15e:	e371      	b.n	800c844 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c164:	2b00      	cmp	r3, #0
 800c166:	f000 8123 	beq.w	800c3b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c16a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c16e:	4b8d      	ldr	r3, [pc, #564]	@ (800c3a4 <HAL_UART_IRQHandler+0x2b8>)
 800c170:	4013      	ands	r3, r2
 800c172:	2b00      	cmp	r3, #0
 800c174:	d106      	bne.n	800c184 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c176:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c17a:	4b8b      	ldr	r3, [pc, #556]	@ (800c3a8 <HAL_UART_IRQHandler+0x2bc>)
 800c17c:	4013      	ands	r3, r2
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f000 8116 	beq.w	800c3b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c188:	f003 0301 	and.w	r3, r3, #1
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d011      	beq.n	800c1b4 <HAL_UART_IRQHandler+0xc8>
 800c190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00b      	beq.n	800c1b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1aa:	f043 0201 	orr.w	r2, r3, #1
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1b8:	f003 0302 	and.w	r3, r3, #2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d011      	beq.n	800c1e4 <HAL_UART_IRQHandler+0xf8>
 800c1c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1c4:	f003 0301 	and.w	r3, r3, #1
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00b      	beq.n	800c1e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2202      	movs	r2, #2
 800c1d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1da:	f043 0204 	orr.w	r2, r3, #4
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1e8:	f003 0304 	and.w	r3, r3, #4
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d011      	beq.n	800c214 <HAL_UART_IRQHandler+0x128>
 800c1f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c1f4:	f003 0301 	and.w	r3, r3, #1
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00b      	beq.n	800c214 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2204      	movs	r2, #4
 800c202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c20a:	f043 0202 	orr.w	r2, r3, #2
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c218:	f003 0308 	and.w	r3, r3, #8
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d017      	beq.n	800c250 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c224:	f003 0320 	and.w	r3, r3, #32
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d105      	bne.n	800c238 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c22c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c230:	4b5c      	ldr	r3, [pc, #368]	@ (800c3a4 <HAL_UART_IRQHandler+0x2b8>)
 800c232:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00b      	beq.n	800c250 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2208      	movs	r2, #8
 800c23e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c246:	f043 0208 	orr.w	r2, r3, #8
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d012      	beq.n	800c282 <HAL_UART_IRQHandler+0x196>
 800c25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c260:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00c      	beq.n	800c282 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c278:	f043 0220 	orr.w	r2, r3, #32
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f000 82dd 	beq.w	800c848 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c28e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c292:	f003 0320 	and.w	r3, r3, #32
 800c296:	2b00      	cmp	r3, #0
 800c298:	d013      	beq.n	800c2c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c29a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c29e:	f003 0320 	and.w	r3, r3, #32
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d105      	bne.n	800c2b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c2aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d007      	beq.n	800c2c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d003      	beq.n	800c2c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2d6:	2b40      	cmp	r3, #64	@ 0x40
 800c2d8:	d005      	beq.n	800c2e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c2da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c2de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d054      	beq.n	800c390 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f001 f9f6 	bl	800d6d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2f6:	2b40      	cmp	r3, #64	@ 0x40
 800c2f8:	d146      	bne.n	800c388 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3308      	adds	r3, #8
 800c300:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c304:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c308:	e853 3f00 	ldrex	r3, [r3]
 800c30c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c310:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c314:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3308      	adds	r3, #8
 800c322:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c326:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c32a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c332:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c336:	e841 2300 	strex	r3, r2, [r1]
 800c33a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c33e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1d9      	bne.n	800c2fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d017      	beq.n	800c380 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c356:	4a15      	ldr	r2, [pc, #84]	@ (800c3ac <HAL_UART_IRQHandler+0x2c0>)
 800c358:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c360:	4618      	mov	r0, r3
 800c362:	f7f9 fbc3 	bl	8005aec <HAL_DMA_Abort_IT>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d019      	beq.n	800c3a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c37a:	4610      	mov	r0, r2
 800c37c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c37e:	e00f      	b.n	800c3a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fa77 	bl	800c874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c386:	e00b      	b.n	800c3a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fa73 	bl	800c874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c38e:	e007      	b.n	800c3a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fa6f 	bl	800c874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c39e:	e253      	b.n	800c848 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3a0:	bf00      	nop
    return;
 800c3a2:	e251      	b.n	800c848 <HAL_UART_IRQHandler+0x75c>
 800c3a4:	10000001 	.word	0x10000001
 800c3a8:	04000120 	.word	0x04000120
 800c3ac:	0800d7a5 	.word	0x0800d7a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	f040 81e7 	bne.w	800c788 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3be:	f003 0310 	and.w	r3, r3, #16
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 81e0 	beq.w	800c788 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3cc:	f003 0310 	and.w	r3, r3, #16
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 81d9 	beq.w	800c788 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2210      	movs	r2, #16
 800c3dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3e8:	2b40      	cmp	r3, #64	@ 0x40
 800c3ea:	f040 8151 	bne.w	800c690 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4a96      	ldr	r2, [pc, #600]	@ (800c650 <HAL_UART_IRQHandler+0x564>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d068      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a93      	ldr	r2, [pc, #588]	@ (800c654 <HAL_UART_IRQHandler+0x568>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d061      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a91      	ldr	r2, [pc, #580]	@ (800c658 <HAL_UART_IRQHandler+0x56c>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d05a      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a8e      	ldr	r2, [pc, #568]	@ (800c65c <HAL_UART_IRQHandler+0x570>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d053      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a8c      	ldr	r2, [pc, #560]	@ (800c660 <HAL_UART_IRQHandler+0x574>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d04c      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a89      	ldr	r2, [pc, #548]	@ (800c664 <HAL_UART_IRQHandler+0x578>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d045      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a87      	ldr	r2, [pc, #540]	@ (800c668 <HAL_UART_IRQHandler+0x57c>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d03e      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a84      	ldr	r2, [pc, #528]	@ (800c66c <HAL_UART_IRQHandler+0x580>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d037      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a82      	ldr	r2, [pc, #520]	@ (800c670 <HAL_UART_IRQHandler+0x584>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d030      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a7f      	ldr	r2, [pc, #508]	@ (800c674 <HAL_UART_IRQHandler+0x588>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d029      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a7d      	ldr	r2, [pc, #500]	@ (800c678 <HAL_UART_IRQHandler+0x58c>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d022      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a7a      	ldr	r2, [pc, #488]	@ (800c67c <HAL_UART_IRQHandler+0x590>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d01b      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a78      	ldr	r2, [pc, #480]	@ (800c680 <HAL_UART_IRQHandler+0x594>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d014      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a75      	ldr	r2, [pc, #468]	@ (800c684 <HAL_UART_IRQHandler+0x598>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d00d      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a73      	ldr	r2, [pc, #460]	@ (800c688 <HAL_UART_IRQHandler+0x59c>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d006      	beq.n	800c4ce <HAL_UART_IRQHandler+0x3e2>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a70      	ldr	r2, [pc, #448]	@ (800c68c <HAL_UART_IRQHandler+0x5a0>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d106      	bne.n	800c4dc <HAL_UART_IRQHandler+0x3f0>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	e005      	b.n	800c4e8 <HAL_UART_IRQHandler+0x3fc>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c4ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f000 81ab 	beq.w	800c84c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c4fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c500:	429a      	cmp	r2, r3
 800c502:	f080 81a3 	bcs.w	800c84c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c50c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c51c:	f000 8087 	beq.w	800c62e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c528:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c52c:	e853 3f00 	ldrex	r3, [r3]
 800c530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c534:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c53c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	461a      	mov	r2, r3
 800c546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c54a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c54e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c552:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c556:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c55a:	e841 2300 	strex	r3, r2, [r1]
 800c55e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c562:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1da      	bne.n	800c520 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	3308      	adds	r3, #8
 800c570:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c572:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c574:	e853 3f00 	ldrex	r3, [r3]
 800c578:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c57a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c57c:	f023 0301 	bic.w	r3, r3, #1
 800c580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	3308      	adds	r3, #8
 800c58a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c58e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c592:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c594:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c596:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c59a:	e841 2300 	strex	r3, r2, [r1]
 800c59e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c5a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1e1      	bne.n	800c56a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3308      	adds	r3, #8
 800c5ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5b0:	e853 3f00 	ldrex	r3, [r3]
 800c5b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c5b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c5ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c5cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c5d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c5d2:	e841 2300 	strex	r3, r2, [r1]
 800c5d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c5d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1e3      	bne.n	800c5a6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2220      	movs	r2, #32
 800c5e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5f4:	e853 3f00 	ldrex	r3, [r3]
 800c5f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c5fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5fc:	f023 0310 	bic.w	r3, r3, #16
 800c600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	461a      	mov	r2, r3
 800c60a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c60e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c610:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c612:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c614:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c616:	e841 2300 	strex	r3, r2, [r1]
 800c61a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c61c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d1e4      	bne.n	800c5ec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c628:	4618      	mov	r0, r3
 800c62a:	f7f8 ff41 	bl	80054b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2202      	movs	r2, #2
 800c632:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c640:	b29b      	uxth	r3, r3
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	b29b      	uxth	r3, r3
 800c646:	4619      	mov	r1, r3
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 f91d 	bl	800c888 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c64e:	e0fd      	b.n	800c84c <HAL_UART_IRQHandler+0x760>
 800c650:	40020010 	.word	0x40020010
 800c654:	40020028 	.word	0x40020028
 800c658:	40020040 	.word	0x40020040
 800c65c:	40020058 	.word	0x40020058
 800c660:	40020070 	.word	0x40020070
 800c664:	40020088 	.word	0x40020088
 800c668:	400200a0 	.word	0x400200a0
 800c66c:	400200b8 	.word	0x400200b8
 800c670:	40020410 	.word	0x40020410
 800c674:	40020428 	.word	0x40020428
 800c678:	40020440 	.word	0x40020440
 800c67c:	40020458 	.word	0x40020458
 800c680:	40020470 	.word	0x40020470
 800c684:	40020488 	.word	0x40020488
 800c688:	400204a0 	.word	0x400204a0
 800c68c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	1ad3      	subs	r3, r2, r3
 800c6a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 80cf 	beq.w	800c850 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c6b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f000 80ca 	beq.w	800c850 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c4:	e853 3f00 	ldrex	r3, [r3]
 800c6c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c6de:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6e0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c6e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6e6:	e841 2300 	strex	r3, r2, [r1]
 800c6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1e4      	bne.n	800c6bc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	3308      	adds	r3, #8
 800c6f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	e853 3f00 	ldrex	r3, [r3]
 800c700:	623b      	str	r3, [r7, #32]
   return(result);
 800c702:	6a3a      	ldr	r2, [r7, #32]
 800c704:	4b55      	ldr	r3, [pc, #340]	@ (800c85c <HAL_UART_IRQHandler+0x770>)
 800c706:	4013      	ands	r3, r2
 800c708:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3308      	adds	r3, #8
 800c712:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c716:	633a      	str	r2, [r7, #48]	@ 0x30
 800c718:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c71c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c71e:	e841 2300 	strex	r3, r2, [r1]
 800c722:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1e3      	bne.n	800c6f2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2220      	movs	r2, #32
 800c72e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	e853 3f00 	ldrex	r3, [r3]
 800c74a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f023 0310 	bic.w	r3, r3, #16
 800c752:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c760:	61fb      	str	r3, [r7, #28]
 800c762:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c764:	69b9      	ldr	r1, [r7, #24]
 800c766:	69fa      	ldr	r2, [r7, #28]
 800c768:	e841 2300 	strex	r3, r2, [r1]
 800c76c:	617b      	str	r3, [r7, #20]
   return(result);
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1e4      	bne.n	800c73e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2202      	movs	r2, #2
 800c778:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c77a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f881 	bl	800c888 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c786:	e063      	b.n	800c850 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c78c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00e      	beq.n	800c7b2 <HAL_UART_IRQHandler+0x6c6>
 800c794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d008      	beq.n	800c7b2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c7a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f001 f83b 	bl	800d826 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7b0:	e051      	b.n	800c856 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d014      	beq.n	800c7e8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c7be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d105      	bne.n	800c7d6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c7ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d008      	beq.n	800c7e8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d03a      	beq.n	800c854 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	4798      	blx	r3
    }
    return;
 800c7e6:	e035      	b.n	800c854 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d009      	beq.n	800c808 <HAL_UART_IRQHandler+0x71c>
 800c7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d003      	beq.n	800c808 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 ffe5 	bl	800d7d0 <UART_EndTransmit_IT>
    return;
 800c806:	e026      	b.n	800c856 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c80c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c810:	2b00      	cmp	r3, #0
 800c812:	d009      	beq.n	800c828 <HAL_UART_IRQHandler+0x73c>
 800c814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c818:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f001 f814 	bl	800d84e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c826:	e016      	b.n	800c856 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c82c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c830:	2b00      	cmp	r3, #0
 800c832:	d010      	beq.n	800c856 <HAL_UART_IRQHandler+0x76a>
 800c834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	da0c      	bge.n	800c856 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fffc 	bl	800d83a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c842:	e008      	b.n	800c856 <HAL_UART_IRQHandler+0x76a>
      return;
 800c844:	bf00      	nop
 800c846:	e006      	b.n	800c856 <HAL_UART_IRQHandler+0x76a>
    return;
 800c848:	bf00      	nop
 800c84a:	e004      	b.n	800c856 <HAL_UART_IRQHandler+0x76a>
      return;
 800c84c:	bf00      	nop
 800c84e:	e002      	b.n	800c856 <HAL_UART_IRQHandler+0x76a>
      return;
 800c850:	bf00      	nop
 800c852:	e000      	b.n	800c856 <HAL_UART_IRQHandler+0x76a>
    return;
 800c854:	bf00      	nop
  }
}
 800c856:	37e8      	adds	r7, #232	@ 0xe8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	effffffe 	.word	0xeffffffe

0800c860 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c868:	bf00      	nop
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	460b      	mov	r3, r1
 800c892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8a4:	b092      	sub	sp, #72	@ 0x48
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	689a      	ldr	r2, [r3, #8]
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	691b      	ldr	r3, [r3, #16]
 800c8b8:	431a      	orrs	r2, r3
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	695b      	ldr	r3, [r3, #20]
 800c8be:	431a      	orrs	r2, r3
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	69db      	ldr	r3, [r3, #28]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	4bbe      	ldr	r3, [pc, #760]	@ (800cbc8 <UART_SetConfig+0x328>)
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	697a      	ldr	r2, [r7, #20]
 800c8d4:	6812      	ldr	r2, [r2, #0]
 800c8d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c8d8:	430b      	orrs	r3, r1
 800c8da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	68da      	ldr	r2, [r3, #12]
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	430a      	orrs	r2, r1
 800c8f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	699b      	ldr	r3, [r3, #24]
 800c8f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4ab3      	ldr	r2, [pc, #716]	@ (800cbcc <UART_SetConfig+0x32c>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d004      	beq.n	800c90c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c908:	4313      	orrs	r3, r2
 800c90a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	689a      	ldr	r2, [r3, #8]
 800c912:	4baf      	ldr	r3, [pc, #700]	@ (800cbd0 <UART_SetConfig+0x330>)
 800c914:	4013      	ands	r3, r2
 800c916:	697a      	ldr	r2, [r7, #20]
 800c918:	6812      	ldr	r2, [r2, #0]
 800c91a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c91c:	430b      	orrs	r3, r1
 800c91e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c926:	f023 010f 	bic.w	r1, r3, #15
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	430a      	orrs	r2, r1
 800c934:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4aa6      	ldr	r2, [pc, #664]	@ (800cbd4 <UART_SetConfig+0x334>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d177      	bne.n	800ca30 <UART_SetConfig+0x190>
 800c940:	4ba5      	ldr	r3, [pc, #660]	@ (800cbd8 <UART_SetConfig+0x338>)
 800c942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c944:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c948:	2b28      	cmp	r3, #40	@ 0x28
 800c94a:	d86d      	bhi.n	800ca28 <UART_SetConfig+0x188>
 800c94c:	a201      	add	r2, pc, #4	@ (adr r2, 800c954 <UART_SetConfig+0xb4>)
 800c94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c952:	bf00      	nop
 800c954:	0800c9f9 	.word	0x0800c9f9
 800c958:	0800ca29 	.word	0x0800ca29
 800c95c:	0800ca29 	.word	0x0800ca29
 800c960:	0800ca29 	.word	0x0800ca29
 800c964:	0800ca29 	.word	0x0800ca29
 800c968:	0800ca29 	.word	0x0800ca29
 800c96c:	0800ca29 	.word	0x0800ca29
 800c970:	0800ca29 	.word	0x0800ca29
 800c974:	0800ca01 	.word	0x0800ca01
 800c978:	0800ca29 	.word	0x0800ca29
 800c97c:	0800ca29 	.word	0x0800ca29
 800c980:	0800ca29 	.word	0x0800ca29
 800c984:	0800ca29 	.word	0x0800ca29
 800c988:	0800ca29 	.word	0x0800ca29
 800c98c:	0800ca29 	.word	0x0800ca29
 800c990:	0800ca29 	.word	0x0800ca29
 800c994:	0800ca09 	.word	0x0800ca09
 800c998:	0800ca29 	.word	0x0800ca29
 800c99c:	0800ca29 	.word	0x0800ca29
 800c9a0:	0800ca29 	.word	0x0800ca29
 800c9a4:	0800ca29 	.word	0x0800ca29
 800c9a8:	0800ca29 	.word	0x0800ca29
 800c9ac:	0800ca29 	.word	0x0800ca29
 800c9b0:	0800ca29 	.word	0x0800ca29
 800c9b4:	0800ca11 	.word	0x0800ca11
 800c9b8:	0800ca29 	.word	0x0800ca29
 800c9bc:	0800ca29 	.word	0x0800ca29
 800c9c0:	0800ca29 	.word	0x0800ca29
 800c9c4:	0800ca29 	.word	0x0800ca29
 800c9c8:	0800ca29 	.word	0x0800ca29
 800c9cc:	0800ca29 	.word	0x0800ca29
 800c9d0:	0800ca29 	.word	0x0800ca29
 800c9d4:	0800ca19 	.word	0x0800ca19
 800c9d8:	0800ca29 	.word	0x0800ca29
 800c9dc:	0800ca29 	.word	0x0800ca29
 800c9e0:	0800ca29 	.word	0x0800ca29
 800c9e4:	0800ca29 	.word	0x0800ca29
 800c9e8:	0800ca29 	.word	0x0800ca29
 800c9ec:	0800ca29 	.word	0x0800ca29
 800c9f0:	0800ca29 	.word	0x0800ca29
 800c9f4:	0800ca21 	.word	0x0800ca21
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9fe:	e222      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca00:	2304      	movs	r3, #4
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca06:	e21e      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca08:	2308      	movs	r3, #8
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca0e:	e21a      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca10:	2310      	movs	r3, #16
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca16:	e216      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca18:	2320      	movs	r3, #32
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca1e:	e212      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca20:	2340      	movs	r3, #64	@ 0x40
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca26:	e20e      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca28:	2380      	movs	r3, #128	@ 0x80
 800ca2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca2e:	e20a      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a69      	ldr	r2, [pc, #420]	@ (800cbdc <UART_SetConfig+0x33c>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d130      	bne.n	800ca9c <UART_SetConfig+0x1fc>
 800ca3a:	4b67      	ldr	r3, [pc, #412]	@ (800cbd8 <UART_SetConfig+0x338>)
 800ca3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca3e:	f003 0307 	and.w	r3, r3, #7
 800ca42:	2b05      	cmp	r3, #5
 800ca44:	d826      	bhi.n	800ca94 <UART_SetConfig+0x1f4>
 800ca46:	a201      	add	r2, pc, #4	@ (adr r2, 800ca4c <UART_SetConfig+0x1ac>)
 800ca48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4c:	0800ca65 	.word	0x0800ca65
 800ca50:	0800ca6d 	.word	0x0800ca6d
 800ca54:	0800ca75 	.word	0x0800ca75
 800ca58:	0800ca7d 	.word	0x0800ca7d
 800ca5c:	0800ca85 	.word	0x0800ca85
 800ca60:	0800ca8d 	.word	0x0800ca8d
 800ca64:	2300      	movs	r3, #0
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca6a:	e1ec      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca6c:	2304      	movs	r3, #4
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca72:	e1e8      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca74:	2308      	movs	r3, #8
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca7a:	e1e4      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca7c:	2310      	movs	r3, #16
 800ca7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca82:	e1e0      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca84:	2320      	movs	r3, #32
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca8a:	e1dc      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca8c:	2340      	movs	r3, #64	@ 0x40
 800ca8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca92:	e1d8      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca94:	2380      	movs	r3, #128	@ 0x80
 800ca96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca9a:	e1d4      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a4f      	ldr	r2, [pc, #316]	@ (800cbe0 <UART_SetConfig+0x340>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d130      	bne.n	800cb08 <UART_SetConfig+0x268>
 800caa6:	4b4c      	ldr	r3, [pc, #304]	@ (800cbd8 <UART_SetConfig+0x338>)
 800caa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caaa:	f003 0307 	and.w	r3, r3, #7
 800caae:	2b05      	cmp	r3, #5
 800cab0:	d826      	bhi.n	800cb00 <UART_SetConfig+0x260>
 800cab2:	a201      	add	r2, pc, #4	@ (adr r2, 800cab8 <UART_SetConfig+0x218>)
 800cab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab8:	0800cad1 	.word	0x0800cad1
 800cabc:	0800cad9 	.word	0x0800cad9
 800cac0:	0800cae1 	.word	0x0800cae1
 800cac4:	0800cae9 	.word	0x0800cae9
 800cac8:	0800caf1 	.word	0x0800caf1
 800cacc:	0800caf9 	.word	0x0800caf9
 800cad0:	2300      	movs	r3, #0
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cad6:	e1b6      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cad8:	2304      	movs	r3, #4
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cade:	e1b2      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cae0:	2308      	movs	r3, #8
 800cae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cae6:	e1ae      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cae8:	2310      	movs	r3, #16
 800caea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caee:	e1aa      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800caf0:	2320      	movs	r3, #32
 800caf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caf6:	e1a6      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800caf8:	2340      	movs	r3, #64	@ 0x40
 800cafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cafe:	e1a2      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cb00:	2380      	movs	r3, #128	@ 0x80
 800cb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb06:	e19e      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a35      	ldr	r2, [pc, #212]	@ (800cbe4 <UART_SetConfig+0x344>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d130      	bne.n	800cb74 <UART_SetConfig+0x2d4>
 800cb12:	4b31      	ldr	r3, [pc, #196]	@ (800cbd8 <UART_SetConfig+0x338>)
 800cb14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb16:	f003 0307 	and.w	r3, r3, #7
 800cb1a:	2b05      	cmp	r3, #5
 800cb1c:	d826      	bhi.n	800cb6c <UART_SetConfig+0x2cc>
 800cb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb24 <UART_SetConfig+0x284>)
 800cb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb24:	0800cb3d 	.word	0x0800cb3d
 800cb28:	0800cb45 	.word	0x0800cb45
 800cb2c:	0800cb4d 	.word	0x0800cb4d
 800cb30:	0800cb55 	.word	0x0800cb55
 800cb34:	0800cb5d 	.word	0x0800cb5d
 800cb38:	0800cb65 	.word	0x0800cb65
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb42:	e180      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cb44:	2304      	movs	r3, #4
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb4a:	e17c      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cb4c:	2308      	movs	r3, #8
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb52:	e178      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cb54:	2310      	movs	r3, #16
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb5a:	e174      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cb5c:	2320      	movs	r3, #32
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb62:	e170      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cb64:	2340      	movs	r3, #64	@ 0x40
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb6a:	e16c      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cb6c:	2380      	movs	r3, #128	@ 0x80
 800cb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb72:	e168      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	4a1b      	ldr	r2, [pc, #108]	@ (800cbe8 <UART_SetConfig+0x348>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d142      	bne.n	800cc04 <UART_SetConfig+0x364>
 800cb7e:	4b16      	ldr	r3, [pc, #88]	@ (800cbd8 <UART_SetConfig+0x338>)
 800cb80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb82:	f003 0307 	and.w	r3, r3, #7
 800cb86:	2b05      	cmp	r3, #5
 800cb88:	d838      	bhi.n	800cbfc <UART_SetConfig+0x35c>
 800cb8a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb90 <UART_SetConfig+0x2f0>)
 800cb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb90:	0800cba9 	.word	0x0800cba9
 800cb94:	0800cbb1 	.word	0x0800cbb1
 800cb98:	0800cbb9 	.word	0x0800cbb9
 800cb9c:	0800cbc1 	.word	0x0800cbc1
 800cba0:	0800cbed 	.word	0x0800cbed
 800cba4:	0800cbf5 	.word	0x0800cbf5
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbae:	e14a      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cbb0:	2304      	movs	r3, #4
 800cbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbb6:	e146      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cbb8:	2308      	movs	r3, #8
 800cbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbbe:	e142      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cbc0:	2310      	movs	r3, #16
 800cbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbc6:	e13e      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cbc8:	cfff69f3 	.word	0xcfff69f3
 800cbcc:	58000c00 	.word	0x58000c00
 800cbd0:	11fff4ff 	.word	0x11fff4ff
 800cbd4:	40011000 	.word	0x40011000
 800cbd8:	58024400 	.word	0x58024400
 800cbdc:	40004400 	.word	0x40004400
 800cbe0:	40004800 	.word	0x40004800
 800cbe4:	40004c00 	.word	0x40004c00
 800cbe8:	40005000 	.word	0x40005000
 800cbec:	2320      	movs	r3, #32
 800cbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbf2:	e128      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cbf4:	2340      	movs	r3, #64	@ 0x40
 800cbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbfa:	e124      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cbfc:	2380      	movs	r3, #128	@ 0x80
 800cbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc02:	e120      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4acb      	ldr	r2, [pc, #812]	@ (800cf38 <UART_SetConfig+0x698>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d176      	bne.n	800ccfc <UART_SetConfig+0x45c>
 800cc0e:	4bcb      	ldr	r3, [pc, #812]	@ (800cf3c <UART_SetConfig+0x69c>)
 800cc10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc16:	2b28      	cmp	r3, #40	@ 0x28
 800cc18:	d86c      	bhi.n	800ccf4 <UART_SetConfig+0x454>
 800cc1a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc20 <UART_SetConfig+0x380>)
 800cc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc20:	0800ccc5 	.word	0x0800ccc5
 800cc24:	0800ccf5 	.word	0x0800ccf5
 800cc28:	0800ccf5 	.word	0x0800ccf5
 800cc2c:	0800ccf5 	.word	0x0800ccf5
 800cc30:	0800ccf5 	.word	0x0800ccf5
 800cc34:	0800ccf5 	.word	0x0800ccf5
 800cc38:	0800ccf5 	.word	0x0800ccf5
 800cc3c:	0800ccf5 	.word	0x0800ccf5
 800cc40:	0800cccd 	.word	0x0800cccd
 800cc44:	0800ccf5 	.word	0x0800ccf5
 800cc48:	0800ccf5 	.word	0x0800ccf5
 800cc4c:	0800ccf5 	.word	0x0800ccf5
 800cc50:	0800ccf5 	.word	0x0800ccf5
 800cc54:	0800ccf5 	.word	0x0800ccf5
 800cc58:	0800ccf5 	.word	0x0800ccf5
 800cc5c:	0800ccf5 	.word	0x0800ccf5
 800cc60:	0800ccd5 	.word	0x0800ccd5
 800cc64:	0800ccf5 	.word	0x0800ccf5
 800cc68:	0800ccf5 	.word	0x0800ccf5
 800cc6c:	0800ccf5 	.word	0x0800ccf5
 800cc70:	0800ccf5 	.word	0x0800ccf5
 800cc74:	0800ccf5 	.word	0x0800ccf5
 800cc78:	0800ccf5 	.word	0x0800ccf5
 800cc7c:	0800ccf5 	.word	0x0800ccf5
 800cc80:	0800ccdd 	.word	0x0800ccdd
 800cc84:	0800ccf5 	.word	0x0800ccf5
 800cc88:	0800ccf5 	.word	0x0800ccf5
 800cc8c:	0800ccf5 	.word	0x0800ccf5
 800cc90:	0800ccf5 	.word	0x0800ccf5
 800cc94:	0800ccf5 	.word	0x0800ccf5
 800cc98:	0800ccf5 	.word	0x0800ccf5
 800cc9c:	0800ccf5 	.word	0x0800ccf5
 800cca0:	0800cce5 	.word	0x0800cce5
 800cca4:	0800ccf5 	.word	0x0800ccf5
 800cca8:	0800ccf5 	.word	0x0800ccf5
 800ccac:	0800ccf5 	.word	0x0800ccf5
 800ccb0:	0800ccf5 	.word	0x0800ccf5
 800ccb4:	0800ccf5 	.word	0x0800ccf5
 800ccb8:	0800ccf5 	.word	0x0800ccf5
 800ccbc:	0800ccf5 	.word	0x0800ccf5
 800ccc0:	0800cced 	.word	0x0800cced
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccca:	e0bc      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cccc:	2304      	movs	r3, #4
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccd2:	e0b8      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ccd4:	2308      	movs	r3, #8
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccda:	e0b4      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ccdc:	2310      	movs	r3, #16
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cce2:	e0b0      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cce4:	2320      	movs	r3, #32
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccea:	e0ac      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ccec:	2340      	movs	r3, #64	@ 0x40
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccf2:	e0a8      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ccf4:	2380      	movs	r3, #128	@ 0x80
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccfa:	e0a4      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a8f      	ldr	r2, [pc, #572]	@ (800cf40 <UART_SetConfig+0x6a0>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d130      	bne.n	800cd68 <UART_SetConfig+0x4c8>
 800cd06:	4b8d      	ldr	r3, [pc, #564]	@ (800cf3c <UART_SetConfig+0x69c>)
 800cd08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd0a:	f003 0307 	and.w	r3, r3, #7
 800cd0e:	2b05      	cmp	r3, #5
 800cd10:	d826      	bhi.n	800cd60 <UART_SetConfig+0x4c0>
 800cd12:	a201      	add	r2, pc, #4	@ (adr r2, 800cd18 <UART_SetConfig+0x478>)
 800cd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd18:	0800cd31 	.word	0x0800cd31
 800cd1c:	0800cd39 	.word	0x0800cd39
 800cd20:	0800cd41 	.word	0x0800cd41
 800cd24:	0800cd49 	.word	0x0800cd49
 800cd28:	0800cd51 	.word	0x0800cd51
 800cd2c:	0800cd59 	.word	0x0800cd59
 800cd30:	2300      	movs	r3, #0
 800cd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd36:	e086      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cd38:	2304      	movs	r3, #4
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3e:	e082      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cd40:	2308      	movs	r3, #8
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd46:	e07e      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cd48:	2310      	movs	r3, #16
 800cd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd4e:	e07a      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cd50:	2320      	movs	r3, #32
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd56:	e076      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cd58:	2340      	movs	r3, #64	@ 0x40
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd5e:	e072      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cd60:	2380      	movs	r3, #128	@ 0x80
 800cd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd66:	e06e      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a75      	ldr	r2, [pc, #468]	@ (800cf44 <UART_SetConfig+0x6a4>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d130      	bne.n	800cdd4 <UART_SetConfig+0x534>
 800cd72:	4b72      	ldr	r3, [pc, #456]	@ (800cf3c <UART_SetConfig+0x69c>)
 800cd74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd76:	f003 0307 	and.w	r3, r3, #7
 800cd7a:	2b05      	cmp	r3, #5
 800cd7c:	d826      	bhi.n	800cdcc <UART_SetConfig+0x52c>
 800cd7e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd84 <UART_SetConfig+0x4e4>)
 800cd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd84:	0800cd9d 	.word	0x0800cd9d
 800cd88:	0800cda5 	.word	0x0800cda5
 800cd8c:	0800cdad 	.word	0x0800cdad
 800cd90:	0800cdb5 	.word	0x0800cdb5
 800cd94:	0800cdbd 	.word	0x0800cdbd
 800cd98:	0800cdc5 	.word	0x0800cdc5
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cda2:	e050      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cda4:	2304      	movs	r3, #4
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdaa:	e04c      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cdac:	2308      	movs	r3, #8
 800cdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdb2:	e048      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cdb4:	2310      	movs	r3, #16
 800cdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdba:	e044      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cdbc:	2320      	movs	r3, #32
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdc2:	e040      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cdc4:	2340      	movs	r3, #64	@ 0x40
 800cdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdca:	e03c      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cdcc:	2380      	movs	r3, #128	@ 0x80
 800cdce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdd2:	e038      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4a5b      	ldr	r2, [pc, #364]	@ (800cf48 <UART_SetConfig+0x6a8>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d130      	bne.n	800ce40 <UART_SetConfig+0x5a0>
 800cdde:	4b57      	ldr	r3, [pc, #348]	@ (800cf3c <UART_SetConfig+0x69c>)
 800cde0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cde2:	f003 0307 	and.w	r3, r3, #7
 800cde6:	2b05      	cmp	r3, #5
 800cde8:	d826      	bhi.n	800ce38 <UART_SetConfig+0x598>
 800cdea:	a201      	add	r2, pc, #4	@ (adr r2, 800cdf0 <UART_SetConfig+0x550>)
 800cdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf0:	0800ce09 	.word	0x0800ce09
 800cdf4:	0800ce11 	.word	0x0800ce11
 800cdf8:	0800ce19 	.word	0x0800ce19
 800cdfc:	0800ce21 	.word	0x0800ce21
 800ce00:	0800ce29 	.word	0x0800ce29
 800ce04:	0800ce31 	.word	0x0800ce31
 800ce08:	2302      	movs	r3, #2
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0e:	e01a      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ce10:	2304      	movs	r3, #4
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce16:	e016      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ce18:	2308      	movs	r3, #8
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce1e:	e012      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ce20:	2310      	movs	r3, #16
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce26:	e00e      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ce28:	2320      	movs	r3, #32
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce2e:	e00a      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ce30:	2340      	movs	r3, #64	@ 0x40
 800ce32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce36:	e006      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ce38:	2380      	movs	r3, #128	@ 0x80
 800ce3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce3e:	e002      	b.n	800ce46 <UART_SetConfig+0x5a6>
 800ce40:	2380      	movs	r3, #128	@ 0x80
 800ce42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	4a3f      	ldr	r2, [pc, #252]	@ (800cf48 <UART_SetConfig+0x6a8>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	f040 80f8 	bne.w	800d042 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ce56:	2b20      	cmp	r3, #32
 800ce58:	dc46      	bgt.n	800cee8 <UART_SetConfig+0x648>
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	f2c0 8082 	blt.w	800cf64 <UART_SetConfig+0x6c4>
 800ce60:	3b02      	subs	r3, #2
 800ce62:	2b1e      	cmp	r3, #30
 800ce64:	d87e      	bhi.n	800cf64 <UART_SetConfig+0x6c4>
 800ce66:	a201      	add	r2, pc, #4	@ (adr r2, 800ce6c <UART_SetConfig+0x5cc>)
 800ce68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6c:	0800ceef 	.word	0x0800ceef
 800ce70:	0800cf65 	.word	0x0800cf65
 800ce74:	0800cef7 	.word	0x0800cef7
 800ce78:	0800cf65 	.word	0x0800cf65
 800ce7c:	0800cf65 	.word	0x0800cf65
 800ce80:	0800cf65 	.word	0x0800cf65
 800ce84:	0800cf07 	.word	0x0800cf07
 800ce88:	0800cf65 	.word	0x0800cf65
 800ce8c:	0800cf65 	.word	0x0800cf65
 800ce90:	0800cf65 	.word	0x0800cf65
 800ce94:	0800cf65 	.word	0x0800cf65
 800ce98:	0800cf65 	.word	0x0800cf65
 800ce9c:	0800cf65 	.word	0x0800cf65
 800cea0:	0800cf65 	.word	0x0800cf65
 800cea4:	0800cf17 	.word	0x0800cf17
 800cea8:	0800cf65 	.word	0x0800cf65
 800ceac:	0800cf65 	.word	0x0800cf65
 800ceb0:	0800cf65 	.word	0x0800cf65
 800ceb4:	0800cf65 	.word	0x0800cf65
 800ceb8:	0800cf65 	.word	0x0800cf65
 800cebc:	0800cf65 	.word	0x0800cf65
 800cec0:	0800cf65 	.word	0x0800cf65
 800cec4:	0800cf65 	.word	0x0800cf65
 800cec8:	0800cf65 	.word	0x0800cf65
 800cecc:	0800cf65 	.word	0x0800cf65
 800ced0:	0800cf65 	.word	0x0800cf65
 800ced4:	0800cf65 	.word	0x0800cf65
 800ced8:	0800cf65 	.word	0x0800cf65
 800cedc:	0800cf65 	.word	0x0800cf65
 800cee0:	0800cf65 	.word	0x0800cf65
 800cee4:	0800cf57 	.word	0x0800cf57
 800cee8:	2b40      	cmp	r3, #64	@ 0x40
 800ceea:	d037      	beq.n	800cf5c <UART_SetConfig+0x6bc>
 800ceec:	e03a      	b.n	800cf64 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ceee:	f7fd fefd 	bl	800acec <HAL_RCCEx_GetD3PCLK1Freq>
 800cef2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cef4:	e03c      	b.n	800cf70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fd ff0c 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf04:	e034      	b.n	800cf70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf06:	f107 0318 	add.w	r3, r7, #24
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fe f858 	bl	800afc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf14:	e02c      	b.n	800cf70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf16:	4b09      	ldr	r3, [pc, #36]	@ (800cf3c <UART_SetConfig+0x69c>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f003 0320 	and.w	r3, r3, #32
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d016      	beq.n	800cf50 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf22:	4b06      	ldr	r3, [pc, #24]	@ (800cf3c <UART_SetConfig+0x69c>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	08db      	lsrs	r3, r3, #3
 800cf28:	f003 0303 	and.w	r3, r3, #3
 800cf2c:	4a07      	ldr	r2, [pc, #28]	@ (800cf4c <UART_SetConfig+0x6ac>)
 800cf2e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf34:	e01c      	b.n	800cf70 <UART_SetConfig+0x6d0>
 800cf36:	bf00      	nop
 800cf38:	40011400 	.word	0x40011400
 800cf3c:	58024400 	.word	0x58024400
 800cf40:	40007800 	.word	0x40007800
 800cf44:	40007c00 	.word	0x40007c00
 800cf48:	58000c00 	.word	0x58000c00
 800cf4c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cf50:	4b9d      	ldr	r3, [pc, #628]	@ (800d1c8 <UART_SetConfig+0x928>)
 800cf52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf54:	e00c      	b.n	800cf70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf56:	4b9d      	ldr	r3, [pc, #628]	@ (800d1cc <UART_SetConfig+0x92c>)
 800cf58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf5a:	e009      	b.n	800cf70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf62:	e005      	b.n	800cf70 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cf64:	2300      	movs	r3, #0
 800cf66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cf6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 81de 	beq.w	800d334 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf7c:	4a94      	ldr	r2, [pc, #592]	@ (800d1d0 <UART_SetConfig+0x930>)
 800cf7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf82:	461a      	mov	r2, r3
 800cf84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf86:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf8a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	685a      	ldr	r2, [r3, #4]
 800cf90:	4613      	mov	r3, r2
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	4413      	add	r3, r2
 800cf96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d305      	bcc.n	800cfa8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d903      	bls.n	800cfb0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cfae:	e1c1      	b.n	800d334 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	60bb      	str	r3, [r7, #8]
 800cfb6:	60fa      	str	r2, [r7, #12]
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfbc:	4a84      	ldr	r2, [pc, #528]	@ (800d1d0 <UART_SetConfig+0x930>)
 800cfbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	603b      	str	r3, [r7, #0]
 800cfc8:	607a      	str	r2, [r7, #4]
 800cfca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cfd2:	f7f3 f9dd 	bl	8000390 <__aeabi_uldivmod>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	460b      	mov	r3, r1
 800cfda:	4610      	mov	r0, r2
 800cfdc:	4619      	mov	r1, r3
 800cfde:	f04f 0200 	mov.w	r2, #0
 800cfe2:	f04f 0300 	mov.w	r3, #0
 800cfe6:	020b      	lsls	r3, r1, #8
 800cfe8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cfec:	0202      	lsls	r2, r0, #8
 800cfee:	6979      	ldr	r1, [r7, #20]
 800cff0:	6849      	ldr	r1, [r1, #4]
 800cff2:	0849      	lsrs	r1, r1, #1
 800cff4:	2000      	movs	r0, #0
 800cff6:	460c      	mov	r4, r1
 800cff8:	4605      	mov	r5, r0
 800cffa:	eb12 0804 	adds.w	r8, r2, r4
 800cffe:	eb43 0905 	adc.w	r9, r3, r5
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	469a      	mov	sl, r3
 800d00a:	4693      	mov	fp, r2
 800d00c:	4652      	mov	r2, sl
 800d00e:	465b      	mov	r3, fp
 800d010:	4640      	mov	r0, r8
 800d012:	4649      	mov	r1, r9
 800d014:	f7f3 f9bc 	bl	8000390 <__aeabi_uldivmod>
 800d018:	4602      	mov	r2, r0
 800d01a:	460b      	mov	r3, r1
 800d01c:	4613      	mov	r3, r2
 800d01e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d026:	d308      	bcc.n	800d03a <UART_SetConfig+0x79a>
 800d028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d02e:	d204      	bcs.n	800d03a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d036:	60da      	str	r2, [r3, #12]
 800d038:	e17c      	b.n	800d334 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d03a:	2301      	movs	r3, #1
 800d03c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d040:	e178      	b.n	800d334 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	69db      	ldr	r3, [r3, #28]
 800d046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d04a:	f040 80c5 	bne.w	800d1d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d04e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d052:	2b20      	cmp	r3, #32
 800d054:	dc48      	bgt.n	800d0e8 <UART_SetConfig+0x848>
 800d056:	2b00      	cmp	r3, #0
 800d058:	db7b      	blt.n	800d152 <UART_SetConfig+0x8b2>
 800d05a:	2b20      	cmp	r3, #32
 800d05c:	d879      	bhi.n	800d152 <UART_SetConfig+0x8b2>
 800d05e:	a201      	add	r2, pc, #4	@ (adr r2, 800d064 <UART_SetConfig+0x7c4>)
 800d060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d064:	0800d0ef 	.word	0x0800d0ef
 800d068:	0800d0f7 	.word	0x0800d0f7
 800d06c:	0800d153 	.word	0x0800d153
 800d070:	0800d153 	.word	0x0800d153
 800d074:	0800d0ff 	.word	0x0800d0ff
 800d078:	0800d153 	.word	0x0800d153
 800d07c:	0800d153 	.word	0x0800d153
 800d080:	0800d153 	.word	0x0800d153
 800d084:	0800d10f 	.word	0x0800d10f
 800d088:	0800d153 	.word	0x0800d153
 800d08c:	0800d153 	.word	0x0800d153
 800d090:	0800d153 	.word	0x0800d153
 800d094:	0800d153 	.word	0x0800d153
 800d098:	0800d153 	.word	0x0800d153
 800d09c:	0800d153 	.word	0x0800d153
 800d0a0:	0800d153 	.word	0x0800d153
 800d0a4:	0800d11f 	.word	0x0800d11f
 800d0a8:	0800d153 	.word	0x0800d153
 800d0ac:	0800d153 	.word	0x0800d153
 800d0b0:	0800d153 	.word	0x0800d153
 800d0b4:	0800d153 	.word	0x0800d153
 800d0b8:	0800d153 	.word	0x0800d153
 800d0bc:	0800d153 	.word	0x0800d153
 800d0c0:	0800d153 	.word	0x0800d153
 800d0c4:	0800d153 	.word	0x0800d153
 800d0c8:	0800d153 	.word	0x0800d153
 800d0cc:	0800d153 	.word	0x0800d153
 800d0d0:	0800d153 	.word	0x0800d153
 800d0d4:	0800d153 	.word	0x0800d153
 800d0d8:	0800d153 	.word	0x0800d153
 800d0dc:	0800d153 	.word	0x0800d153
 800d0e0:	0800d153 	.word	0x0800d153
 800d0e4:	0800d145 	.word	0x0800d145
 800d0e8:	2b40      	cmp	r3, #64	@ 0x40
 800d0ea:	d02e      	beq.n	800d14a <UART_SetConfig+0x8aa>
 800d0ec:	e031      	b.n	800d152 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0ee:	f7fb fe47 	bl	8008d80 <HAL_RCC_GetPCLK1Freq>
 800d0f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d0f4:	e033      	b.n	800d15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0f6:	f7fb fe59 	bl	8008dac <HAL_RCC_GetPCLK2Freq>
 800d0fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d0fc:	e02f      	b.n	800d15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d102:	4618      	mov	r0, r3
 800d104:	f7fd fe08 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d10c:	e027      	b.n	800d15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d10e:	f107 0318 	add.w	r3, r7, #24
 800d112:	4618      	mov	r0, r3
 800d114:	f7fd ff54 	bl	800afc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d11c:	e01f      	b.n	800d15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d11e:	4b2d      	ldr	r3, [pc, #180]	@ (800d1d4 <UART_SetConfig+0x934>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 0320 	and.w	r3, r3, #32
 800d126:	2b00      	cmp	r3, #0
 800d128:	d009      	beq.n	800d13e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d12a:	4b2a      	ldr	r3, [pc, #168]	@ (800d1d4 <UART_SetConfig+0x934>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	08db      	lsrs	r3, r3, #3
 800d130:	f003 0303 	and.w	r3, r3, #3
 800d134:	4a24      	ldr	r2, [pc, #144]	@ (800d1c8 <UART_SetConfig+0x928>)
 800d136:	fa22 f303 	lsr.w	r3, r2, r3
 800d13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d13c:	e00f      	b.n	800d15e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d13e:	4b22      	ldr	r3, [pc, #136]	@ (800d1c8 <UART_SetConfig+0x928>)
 800d140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d142:	e00c      	b.n	800d15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d144:	4b21      	ldr	r3, [pc, #132]	@ (800d1cc <UART_SetConfig+0x92c>)
 800d146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d148:	e009      	b.n	800d15e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d14a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d150:	e005      	b.n	800d15e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d152:	2300      	movs	r3, #0
 800d154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d156:	2301      	movs	r3, #1
 800d158:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d15c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d160:	2b00      	cmp	r3, #0
 800d162:	f000 80e7 	beq.w	800d334 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d16a:	4a19      	ldr	r2, [pc, #100]	@ (800d1d0 <UART_SetConfig+0x930>)
 800d16c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d170:	461a      	mov	r2, r3
 800d172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d174:	fbb3 f3f2 	udiv	r3, r3, r2
 800d178:	005a      	lsls	r2, r3, #1
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	085b      	lsrs	r3, r3, #1
 800d180:	441a      	add	r2, r3
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	fbb2 f3f3 	udiv	r3, r2, r3
 800d18a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d18e:	2b0f      	cmp	r3, #15
 800d190:	d916      	bls.n	800d1c0 <UART_SetConfig+0x920>
 800d192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d198:	d212      	bcs.n	800d1c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	f023 030f 	bic.w	r3, r3, #15
 800d1a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a6:	085b      	lsrs	r3, r3, #1
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	f003 0307 	and.w	r3, r3, #7
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d1bc:	60da      	str	r2, [r3, #12]
 800d1be:	e0b9      	b.n	800d334 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d1c6:	e0b5      	b.n	800d334 <UART_SetConfig+0xa94>
 800d1c8:	03d09000 	.word	0x03d09000
 800d1cc:	003d0900 	.word	0x003d0900
 800d1d0:	080137d8 	.word	0x080137d8
 800d1d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d1d8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d1dc:	2b20      	cmp	r3, #32
 800d1de:	dc49      	bgt.n	800d274 <UART_SetConfig+0x9d4>
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	db7c      	blt.n	800d2de <UART_SetConfig+0xa3e>
 800d1e4:	2b20      	cmp	r3, #32
 800d1e6:	d87a      	bhi.n	800d2de <UART_SetConfig+0xa3e>
 800d1e8:	a201      	add	r2, pc, #4	@ (adr r2, 800d1f0 <UART_SetConfig+0x950>)
 800d1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ee:	bf00      	nop
 800d1f0:	0800d27b 	.word	0x0800d27b
 800d1f4:	0800d283 	.word	0x0800d283
 800d1f8:	0800d2df 	.word	0x0800d2df
 800d1fc:	0800d2df 	.word	0x0800d2df
 800d200:	0800d28b 	.word	0x0800d28b
 800d204:	0800d2df 	.word	0x0800d2df
 800d208:	0800d2df 	.word	0x0800d2df
 800d20c:	0800d2df 	.word	0x0800d2df
 800d210:	0800d29b 	.word	0x0800d29b
 800d214:	0800d2df 	.word	0x0800d2df
 800d218:	0800d2df 	.word	0x0800d2df
 800d21c:	0800d2df 	.word	0x0800d2df
 800d220:	0800d2df 	.word	0x0800d2df
 800d224:	0800d2df 	.word	0x0800d2df
 800d228:	0800d2df 	.word	0x0800d2df
 800d22c:	0800d2df 	.word	0x0800d2df
 800d230:	0800d2ab 	.word	0x0800d2ab
 800d234:	0800d2df 	.word	0x0800d2df
 800d238:	0800d2df 	.word	0x0800d2df
 800d23c:	0800d2df 	.word	0x0800d2df
 800d240:	0800d2df 	.word	0x0800d2df
 800d244:	0800d2df 	.word	0x0800d2df
 800d248:	0800d2df 	.word	0x0800d2df
 800d24c:	0800d2df 	.word	0x0800d2df
 800d250:	0800d2df 	.word	0x0800d2df
 800d254:	0800d2df 	.word	0x0800d2df
 800d258:	0800d2df 	.word	0x0800d2df
 800d25c:	0800d2df 	.word	0x0800d2df
 800d260:	0800d2df 	.word	0x0800d2df
 800d264:	0800d2df 	.word	0x0800d2df
 800d268:	0800d2df 	.word	0x0800d2df
 800d26c:	0800d2df 	.word	0x0800d2df
 800d270:	0800d2d1 	.word	0x0800d2d1
 800d274:	2b40      	cmp	r3, #64	@ 0x40
 800d276:	d02e      	beq.n	800d2d6 <UART_SetConfig+0xa36>
 800d278:	e031      	b.n	800d2de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d27a:	f7fb fd81 	bl	8008d80 <HAL_RCC_GetPCLK1Freq>
 800d27e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d280:	e033      	b.n	800d2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d282:	f7fb fd93 	bl	8008dac <HAL_RCC_GetPCLK2Freq>
 800d286:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d288:	e02f      	b.n	800d2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d28a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fd fd42 	bl	800ad18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d298:	e027      	b.n	800d2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d29a:	f107 0318 	add.w	r3, r7, #24
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7fd fe8e 	bl	800afc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2a8:	e01f      	b.n	800d2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2aa:	4b2d      	ldr	r3, [pc, #180]	@ (800d360 <UART_SetConfig+0xac0>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f003 0320 	and.w	r3, r3, #32
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d009      	beq.n	800d2ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d2b6:	4b2a      	ldr	r3, [pc, #168]	@ (800d360 <UART_SetConfig+0xac0>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	08db      	lsrs	r3, r3, #3
 800d2bc:	f003 0303 	and.w	r3, r3, #3
 800d2c0:	4a28      	ldr	r2, [pc, #160]	@ (800d364 <UART_SetConfig+0xac4>)
 800d2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2c8:	e00f      	b.n	800d2ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d2ca:	4b26      	ldr	r3, [pc, #152]	@ (800d364 <UART_SetConfig+0xac4>)
 800d2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2ce:	e00c      	b.n	800d2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2d0:	4b25      	ldr	r3, [pc, #148]	@ (800d368 <UART_SetConfig+0xac8>)
 800d2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2d4:	e009      	b.n	800d2ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2dc:	e005      	b.n	800d2ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d2e8:	bf00      	nop
    }

    if (pclk != 0U)
 800d2ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d021      	beq.n	800d334 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2f4:	4a1d      	ldr	r2, [pc, #116]	@ (800d36c <UART_SetConfig+0xacc>)
 800d2f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	085b      	lsrs	r3, r3, #1
 800d308:	441a      	add	r2, r3
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d312:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d316:	2b0f      	cmp	r3, #15
 800d318:	d909      	bls.n	800d32e <UART_SetConfig+0xa8e>
 800d31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d31c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d320:	d205      	bcs.n	800d32e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d324:	b29a      	uxth	r2, r3
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	60da      	str	r2, [r3, #12]
 800d32c:	e002      	b.n	800d334 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	2201      	movs	r2, #1
 800d338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	2201      	movs	r2, #1
 800d340:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	2200      	movs	r2, #0
 800d348:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	2200      	movs	r2, #0
 800d34e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d350:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d354:	4618      	mov	r0, r3
 800d356:	3748      	adds	r7, #72	@ 0x48
 800d358:	46bd      	mov	sp, r7
 800d35a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d35e:	bf00      	nop
 800d360:	58024400 	.word	0x58024400
 800d364:	03d09000 	.word	0x03d09000
 800d368:	003d0900 	.word	0x003d0900
 800d36c:	080137d8 	.word	0x080137d8

0800d370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d37c:	f003 0301 	and.w	r3, r3, #1
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00a      	beq.n	800d39a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	430a      	orrs	r2, r1
 800d398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d39e:	f003 0302 	and.w	r3, r3, #2
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d00a      	beq.n	800d3bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	430a      	orrs	r2, r1
 800d3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3c0:	f003 0304 	and.w	r3, r3, #4
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00a      	beq.n	800d3de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	430a      	orrs	r2, r1
 800d3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e2:	f003 0308 	and.w	r3, r3, #8
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00a      	beq.n	800d400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	430a      	orrs	r2, r1
 800d3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d404:	f003 0310 	and.w	r3, r3, #16
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00a      	beq.n	800d422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	430a      	orrs	r2, r1
 800d420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d426:	f003 0320 	and.w	r3, r3, #32
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00a      	beq.n	800d444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	430a      	orrs	r2, r1
 800d442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d01a      	beq.n	800d486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	430a      	orrs	r2, r1
 800d464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d46a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d46e:	d10a      	bne.n	800d486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	430a      	orrs	r2, r1
 800d484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d48a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00a      	beq.n	800d4a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	430a      	orrs	r2, r1
 800d4a6:	605a      	str	r2, [r3, #4]
  }
}
 800d4a8:	bf00      	nop
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b098      	sub	sp, #96	@ 0x60
 800d4b8:	af02      	add	r7, sp, #8
 800d4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d4c4:	f7f4 feec 	bl	80022a0 <HAL_GetTick>
 800d4c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f003 0308 	and.w	r3, r3, #8
 800d4d4:	2b08      	cmp	r3, #8
 800d4d6:	d12f      	bne.n	800d538 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f88e 	bl	800d608 <UART_WaitOnFlagUntilTimeout>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d022      	beq.n	800d538 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fa:	e853 3f00 	ldrex	r3, [r3]
 800d4fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d506:	653b      	str	r3, [r7, #80]	@ 0x50
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	461a      	mov	r2, r3
 800d50e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d510:	647b      	str	r3, [r7, #68]	@ 0x44
 800d512:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d518:	e841 2300 	strex	r3, r2, [r1]
 800d51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1e6      	bne.n	800d4f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2220      	movs	r2, #32
 800d528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d534:	2303      	movs	r3, #3
 800d536:	e063      	b.n	800d600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f003 0304 	and.w	r3, r3, #4
 800d542:	2b04      	cmp	r3, #4
 800d544:	d149      	bne.n	800d5da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d546:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d54e:	2200      	movs	r2, #0
 800d550:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 f857 	bl	800d608 <UART_WaitOnFlagUntilTimeout>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d03c      	beq.n	800d5da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d568:	e853 3f00 	ldrex	r3, [r3]
 800d56c:	623b      	str	r3, [r7, #32]
   return(result);
 800d56e:	6a3b      	ldr	r3, [r7, #32]
 800d570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	461a      	mov	r2, r3
 800d57c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d57e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d580:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d586:	e841 2300 	strex	r3, r2, [r1]
 800d58a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1e6      	bne.n	800d560 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	3308      	adds	r3, #8
 800d598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	e853 3f00 	ldrex	r3, [r3]
 800d5a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	f023 0301 	bic.w	r3, r3, #1
 800d5a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5b2:	61fa      	str	r2, [r7, #28]
 800d5b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b6:	69b9      	ldr	r1, [r7, #24]
 800d5b8:	69fa      	ldr	r2, [r7, #28]
 800d5ba:	e841 2300 	strex	r3, r2, [r1]
 800d5be:	617b      	str	r3, [r7, #20]
   return(result);
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1e5      	bne.n	800d592 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2220      	movs	r2, #32
 800d5ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	e012      	b.n	800d600 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2220      	movs	r2, #32
 800d5de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2220      	movs	r2, #32
 800d5e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3758      	adds	r7, #88	@ 0x58
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	603b      	str	r3, [r7, #0]
 800d614:	4613      	mov	r3, r2
 800d616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d618:	e049      	b.n	800d6ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d620:	d045      	beq.n	800d6ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d622:	f7f4 fe3d 	bl	80022a0 <HAL_GetTick>
 800d626:	4602      	mov	r2, r0
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	1ad3      	subs	r3, r2, r3
 800d62c:	69ba      	ldr	r2, [r7, #24]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d302      	bcc.n	800d638 <UART_WaitOnFlagUntilTimeout+0x30>
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d101      	bne.n	800d63c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d638:	2303      	movs	r3, #3
 800d63a:	e048      	b.n	800d6ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f003 0304 	and.w	r3, r3, #4
 800d646:	2b00      	cmp	r3, #0
 800d648:	d031      	beq.n	800d6ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	69db      	ldr	r3, [r3, #28]
 800d650:	f003 0308 	and.w	r3, r3, #8
 800d654:	2b08      	cmp	r3, #8
 800d656:	d110      	bne.n	800d67a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2208      	movs	r2, #8
 800d65e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f000 f839 	bl	800d6d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2208      	movs	r2, #8
 800d66a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2200      	movs	r2, #0
 800d672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	e029      	b.n	800d6ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	69db      	ldr	r3, [r3, #28]
 800d680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d688:	d111      	bne.n	800d6ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f000 f81f 	bl	800d6d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2220      	movs	r2, #32
 800d69e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	e00f      	b.n	800d6ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	69da      	ldr	r2, [r3, #28]
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	4013      	ands	r3, r2
 800d6b8:	68ba      	ldr	r2, [r7, #8]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	bf0c      	ite	eq
 800d6be:	2301      	moveq	r3, #1
 800d6c0:	2300      	movne	r3, #0
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d0a6      	beq.n	800d61a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
	...

0800d6d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b095      	sub	sp, #84	@ 0x54
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6e8:	e853 3f00 	ldrex	r3, [r3]
 800d6ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d6f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800d700:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d702:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d704:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d706:	e841 2300 	strex	r3, r2, [r1]
 800d70a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1e6      	bne.n	800d6e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	3308      	adds	r3, #8
 800d718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	e853 3f00 	ldrex	r3, [r3]
 800d720:	61fb      	str	r3, [r7, #28]
   return(result);
 800d722:	69fa      	ldr	r2, [r7, #28]
 800d724:	4b1e      	ldr	r3, [pc, #120]	@ (800d7a0 <UART_EndRxTransfer+0xc8>)
 800d726:	4013      	ands	r3, r2
 800d728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	3308      	adds	r3, #8
 800d730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d734:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d736:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d73a:	e841 2300 	strex	r3, r2, [r1]
 800d73e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1e5      	bne.n	800d712 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	d118      	bne.n	800d780 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	e853 3f00 	ldrex	r3, [r3]
 800d75a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	f023 0310 	bic.w	r3, r3, #16
 800d762:	647b      	str	r3, [r7, #68]	@ 0x44
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	461a      	mov	r2, r3
 800d76a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d76c:	61bb      	str	r3, [r7, #24]
 800d76e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d770:	6979      	ldr	r1, [r7, #20]
 800d772:	69ba      	ldr	r2, [r7, #24]
 800d774:	e841 2300 	strex	r3, r2, [r1]
 800d778:	613b      	str	r3, [r7, #16]
   return(result);
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1e6      	bne.n	800d74e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2220      	movs	r2, #32
 800d784:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d794:	bf00      	nop
 800d796:	3754      	adds	r7, #84	@ 0x54
 800d798:	46bd      	mov	sp, r7
 800d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79e:	4770      	bx	lr
 800d7a0:	effffffe 	.word	0xeffffffe

0800d7a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f7ff f856 	bl	800c874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7c8:	bf00      	nop
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b088      	sub	sp, #32
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	e853 3f00 	ldrex	r3, [r3]
 800d7e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7ec:	61fb      	str	r3, [r7, #28]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	61bb      	str	r3, [r7, #24]
 800d7f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fa:	6979      	ldr	r1, [r7, #20]
 800d7fc:	69ba      	ldr	r2, [r7, #24]
 800d7fe:	e841 2300 	strex	r3, r2, [r1]
 800d802:	613b      	str	r3, [r7, #16]
   return(result);
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1e6      	bne.n	800d7d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2220      	movs	r2, #32
 800d80e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7ff f821 	bl	800c860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d81e:	bf00      	nop
 800d820:	3720      	adds	r7, #32
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d826:	b480      	push	{r7}
 800d828:	b083      	sub	sp, #12
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d82e:	bf00      	nop
 800d830:	370c      	adds	r7, #12
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr

0800d83a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d83a:	b480      	push	{r7}
 800d83c:	b083      	sub	sp, #12
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d842:	bf00      	nop
 800d844:	370c      	adds	r7, #12
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr

0800d84e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d84e:	b480      	push	{r7}
 800d850:	b083      	sub	sp, #12
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d856:	bf00      	nop
 800d858:	370c      	adds	r7, #12
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr

0800d862 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d862:	b480      	push	{r7}
 800d864:	b085      	sub	sp, #20
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d870:	2b01      	cmp	r3, #1
 800d872:	d101      	bne.n	800d878 <HAL_UARTEx_DisableFifoMode+0x16>
 800d874:	2302      	movs	r3, #2
 800d876:	e027      	b.n	800d8c8 <HAL_UARTEx_DisableFifoMode+0x66>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2201      	movs	r2, #1
 800d87c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2224      	movs	r2, #36	@ 0x24
 800d884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f022 0201 	bic.w	r2, r2, #1
 800d89e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d8a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2220      	movs	r2, #32
 800d8ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3714      	adds	r7, #20
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d101      	bne.n	800d8ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	e02d      	b.n	800d948 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2224      	movs	r2, #36	@ 0x24
 800d8f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f022 0201 	bic.w	r2, r2, #1
 800d912:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	683a      	ldr	r2, [r7, #0]
 800d924:	430a      	orrs	r2, r1
 800d926:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 f84f 	bl	800d9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2220      	movs	r2, #32
 800d93a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d960:	2b01      	cmp	r3, #1
 800d962:	d101      	bne.n	800d968 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d964:	2302      	movs	r3, #2
 800d966:	e02d      	b.n	800d9c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2224      	movs	r2, #36	@ 0x24
 800d974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f022 0201 	bic.w	r2, r2, #1
 800d98e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	683a      	ldr	r2, [r7, #0]
 800d9a0:	430a      	orrs	r2, r1
 800d9a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 f811 	bl	800d9cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2220      	movs	r2, #32
 800d9b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d108      	bne.n	800d9ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2201      	movs	r2, #1
 800d9e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d9ec:	e031      	b.n	800da52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d9ee:	2310      	movs	r3, #16
 800d9f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d9f2:	2310      	movs	r3, #16
 800d9f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	0e5b      	lsrs	r3, r3, #25
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	f003 0307 	and.w	r3, r3, #7
 800da04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	0f5b      	lsrs	r3, r3, #29
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 0307 	and.w	r3, r3, #7
 800da14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da16:	7bbb      	ldrb	r3, [r7, #14]
 800da18:	7b3a      	ldrb	r2, [r7, #12]
 800da1a:	4911      	ldr	r1, [pc, #68]	@ (800da60 <UARTEx_SetNbDataToProcess+0x94>)
 800da1c:	5c8a      	ldrb	r2, [r1, r2]
 800da1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800da22:	7b3a      	ldrb	r2, [r7, #12]
 800da24:	490f      	ldr	r1, [pc, #60]	@ (800da64 <UARTEx_SetNbDataToProcess+0x98>)
 800da26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da28:	fb93 f3f2 	sdiv	r3, r3, r2
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da34:	7bfb      	ldrb	r3, [r7, #15]
 800da36:	7b7a      	ldrb	r2, [r7, #13]
 800da38:	4909      	ldr	r1, [pc, #36]	@ (800da60 <UARTEx_SetNbDataToProcess+0x94>)
 800da3a:	5c8a      	ldrb	r2, [r1, r2]
 800da3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800da40:	7b7a      	ldrb	r2, [r7, #13]
 800da42:	4908      	ldr	r1, [pc, #32]	@ (800da64 <UARTEx_SetNbDataToProcess+0x98>)
 800da44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800da46:	fb93 f3f2 	sdiv	r3, r3, r2
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800da52:	bf00      	nop
 800da54:	3714      	adds	r7, #20
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	080137f0 	.word	0x080137f0
 800da64:	080137f8 	.word	0x080137f8

0800da68 <std>:
 800da68:	2300      	movs	r3, #0
 800da6a:	b510      	push	{r4, lr}
 800da6c:	4604      	mov	r4, r0
 800da6e:	e9c0 3300 	strd	r3, r3, [r0]
 800da72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da76:	6083      	str	r3, [r0, #8]
 800da78:	8181      	strh	r1, [r0, #12]
 800da7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800da7c:	81c2      	strh	r2, [r0, #14]
 800da7e:	6183      	str	r3, [r0, #24]
 800da80:	4619      	mov	r1, r3
 800da82:	2208      	movs	r2, #8
 800da84:	305c      	adds	r0, #92	@ 0x5c
 800da86:	f000 f914 	bl	800dcb2 <memset>
 800da8a:	4b0d      	ldr	r3, [pc, #52]	@ (800dac0 <std+0x58>)
 800da8c:	6223      	str	r3, [r4, #32]
 800da8e:	4b0d      	ldr	r3, [pc, #52]	@ (800dac4 <std+0x5c>)
 800da90:	6263      	str	r3, [r4, #36]	@ 0x24
 800da92:	4b0d      	ldr	r3, [pc, #52]	@ (800dac8 <std+0x60>)
 800da94:	62a3      	str	r3, [r4, #40]	@ 0x28
 800da96:	4b0d      	ldr	r3, [pc, #52]	@ (800dacc <std+0x64>)
 800da98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da9a:	4b0d      	ldr	r3, [pc, #52]	@ (800dad0 <std+0x68>)
 800da9c:	61e4      	str	r4, [r4, #28]
 800da9e:	429c      	cmp	r4, r3
 800daa0:	d006      	beq.n	800dab0 <std+0x48>
 800daa2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800daa6:	4294      	cmp	r4, r2
 800daa8:	d002      	beq.n	800dab0 <std+0x48>
 800daaa:	33d0      	adds	r3, #208	@ 0xd0
 800daac:	429c      	cmp	r4, r3
 800daae:	d105      	bne.n	800dabc <std+0x54>
 800dab0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dab8:	f000 b974 	b.w	800dda4 <__retarget_lock_init_recursive>
 800dabc:	bd10      	pop	{r4, pc}
 800dabe:	bf00      	nop
 800dac0:	0800dc2d 	.word	0x0800dc2d
 800dac4:	0800dc4f 	.word	0x0800dc4f
 800dac8:	0800dc87 	.word	0x0800dc87
 800dacc:	0800dcab 	.word	0x0800dcab
 800dad0:	240149d4 	.word	0x240149d4

0800dad4 <stdio_exit_handler>:
 800dad4:	4a02      	ldr	r2, [pc, #8]	@ (800dae0 <stdio_exit_handler+0xc>)
 800dad6:	4903      	ldr	r1, [pc, #12]	@ (800dae4 <stdio_exit_handler+0x10>)
 800dad8:	4803      	ldr	r0, [pc, #12]	@ (800dae8 <stdio_exit_handler+0x14>)
 800dada:	f000 b869 	b.w	800dbb0 <_fwalk_sglue>
 800dade:	bf00      	nop
 800dae0:	24000010 	.word	0x24000010
 800dae4:	0800f791 	.word	0x0800f791
 800dae8:	24000020 	.word	0x24000020

0800daec <cleanup_stdio>:
 800daec:	6841      	ldr	r1, [r0, #4]
 800daee:	4b0c      	ldr	r3, [pc, #48]	@ (800db20 <cleanup_stdio+0x34>)
 800daf0:	4299      	cmp	r1, r3
 800daf2:	b510      	push	{r4, lr}
 800daf4:	4604      	mov	r4, r0
 800daf6:	d001      	beq.n	800dafc <cleanup_stdio+0x10>
 800daf8:	f001 fe4a 	bl	800f790 <_fclose_r>
 800dafc:	68a1      	ldr	r1, [r4, #8]
 800dafe:	4b09      	ldr	r3, [pc, #36]	@ (800db24 <cleanup_stdio+0x38>)
 800db00:	4299      	cmp	r1, r3
 800db02:	d002      	beq.n	800db0a <cleanup_stdio+0x1e>
 800db04:	4620      	mov	r0, r4
 800db06:	f001 fe43 	bl	800f790 <_fclose_r>
 800db0a:	68e1      	ldr	r1, [r4, #12]
 800db0c:	4b06      	ldr	r3, [pc, #24]	@ (800db28 <cleanup_stdio+0x3c>)
 800db0e:	4299      	cmp	r1, r3
 800db10:	d004      	beq.n	800db1c <cleanup_stdio+0x30>
 800db12:	4620      	mov	r0, r4
 800db14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db18:	f001 be3a 	b.w	800f790 <_fclose_r>
 800db1c:	bd10      	pop	{r4, pc}
 800db1e:	bf00      	nop
 800db20:	240149d4 	.word	0x240149d4
 800db24:	24014a3c 	.word	0x24014a3c
 800db28:	24014aa4 	.word	0x24014aa4

0800db2c <global_stdio_init.part.0>:
 800db2c:	b510      	push	{r4, lr}
 800db2e:	4b0b      	ldr	r3, [pc, #44]	@ (800db5c <global_stdio_init.part.0+0x30>)
 800db30:	4c0b      	ldr	r4, [pc, #44]	@ (800db60 <global_stdio_init.part.0+0x34>)
 800db32:	4a0c      	ldr	r2, [pc, #48]	@ (800db64 <global_stdio_init.part.0+0x38>)
 800db34:	601a      	str	r2, [r3, #0]
 800db36:	4620      	mov	r0, r4
 800db38:	2200      	movs	r2, #0
 800db3a:	2104      	movs	r1, #4
 800db3c:	f7ff ff94 	bl	800da68 <std>
 800db40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800db44:	2201      	movs	r2, #1
 800db46:	2109      	movs	r1, #9
 800db48:	f7ff ff8e 	bl	800da68 <std>
 800db4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800db50:	2202      	movs	r2, #2
 800db52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db56:	2112      	movs	r1, #18
 800db58:	f7ff bf86 	b.w	800da68 <std>
 800db5c:	24014b0c 	.word	0x24014b0c
 800db60:	240149d4 	.word	0x240149d4
 800db64:	0800dad5 	.word	0x0800dad5

0800db68 <__sfp_lock_acquire>:
 800db68:	4801      	ldr	r0, [pc, #4]	@ (800db70 <__sfp_lock_acquire+0x8>)
 800db6a:	f000 b91d 	b.w	800dda8 <__retarget_lock_acquire_recursive>
 800db6e:	bf00      	nop
 800db70:	24014b16 	.word	0x24014b16

0800db74 <__sfp_lock_release>:
 800db74:	4801      	ldr	r0, [pc, #4]	@ (800db7c <__sfp_lock_release+0x8>)
 800db76:	f000 b918 	b.w	800ddaa <__retarget_lock_release_recursive>
 800db7a:	bf00      	nop
 800db7c:	24014b16 	.word	0x24014b16

0800db80 <__sinit>:
 800db80:	b510      	push	{r4, lr}
 800db82:	4604      	mov	r4, r0
 800db84:	f7ff fff0 	bl	800db68 <__sfp_lock_acquire>
 800db88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db8a:	b11b      	cbz	r3, 800db94 <__sinit+0x14>
 800db8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db90:	f7ff bff0 	b.w	800db74 <__sfp_lock_release>
 800db94:	4b04      	ldr	r3, [pc, #16]	@ (800dba8 <__sinit+0x28>)
 800db96:	6363      	str	r3, [r4, #52]	@ 0x34
 800db98:	4b04      	ldr	r3, [pc, #16]	@ (800dbac <__sinit+0x2c>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d1f5      	bne.n	800db8c <__sinit+0xc>
 800dba0:	f7ff ffc4 	bl	800db2c <global_stdio_init.part.0>
 800dba4:	e7f2      	b.n	800db8c <__sinit+0xc>
 800dba6:	bf00      	nop
 800dba8:	0800daed 	.word	0x0800daed
 800dbac:	24014b0c 	.word	0x24014b0c

0800dbb0 <_fwalk_sglue>:
 800dbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbb4:	4607      	mov	r7, r0
 800dbb6:	4688      	mov	r8, r1
 800dbb8:	4614      	mov	r4, r2
 800dbba:	2600      	movs	r6, #0
 800dbbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dbc0:	f1b9 0901 	subs.w	r9, r9, #1
 800dbc4:	d505      	bpl.n	800dbd2 <_fwalk_sglue+0x22>
 800dbc6:	6824      	ldr	r4, [r4, #0]
 800dbc8:	2c00      	cmp	r4, #0
 800dbca:	d1f7      	bne.n	800dbbc <_fwalk_sglue+0xc>
 800dbcc:	4630      	mov	r0, r6
 800dbce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbd2:	89ab      	ldrh	r3, [r5, #12]
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d907      	bls.n	800dbe8 <_fwalk_sglue+0x38>
 800dbd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	d003      	beq.n	800dbe8 <_fwalk_sglue+0x38>
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	4638      	mov	r0, r7
 800dbe4:	47c0      	blx	r8
 800dbe6:	4306      	orrs	r6, r0
 800dbe8:	3568      	adds	r5, #104	@ 0x68
 800dbea:	e7e9      	b.n	800dbc0 <_fwalk_sglue+0x10>

0800dbec <sprintf>:
 800dbec:	b40e      	push	{r1, r2, r3}
 800dbee:	b500      	push	{lr}
 800dbf0:	b09c      	sub	sp, #112	@ 0x70
 800dbf2:	ab1d      	add	r3, sp, #116	@ 0x74
 800dbf4:	9002      	str	r0, [sp, #8]
 800dbf6:	9006      	str	r0, [sp, #24]
 800dbf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dbfc:	4809      	ldr	r0, [pc, #36]	@ (800dc24 <sprintf+0x38>)
 800dbfe:	9107      	str	r1, [sp, #28]
 800dc00:	9104      	str	r1, [sp, #16]
 800dc02:	4909      	ldr	r1, [pc, #36]	@ (800dc28 <sprintf+0x3c>)
 800dc04:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc08:	9105      	str	r1, [sp, #20]
 800dc0a:	6800      	ldr	r0, [r0, #0]
 800dc0c:	9301      	str	r3, [sp, #4]
 800dc0e:	a902      	add	r1, sp, #8
 800dc10:	f000 fc3a 	bl	800e488 <_svfprintf_r>
 800dc14:	9b02      	ldr	r3, [sp, #8]
 800dc16:	2200      	movs	r2, #0
 800dc18:	701a      	strb	r2, [r3, #0]
 800dc1a:	b01c      	add	sp, #112	@ 0x70
 800dc1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc20:	b003      	add	sp, #12
 800dc22:	4770      	bx	lr
 800dc24:	2400001c 	.word	0x2400001c
 800dc28:	ffff0208 	.word	0xffff0208

0800dc2c <__sread>:
 800dc2c:	b510      	push	{r4, lr}
 800dc2e:	460c      	mov	r4, r1
 800dc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc34:	f000 f868 	bl	800dd08 <_read_r>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	bfab      	itete	ge
 800dc3c:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800dc3e:	89a3      	ldrhlt	r3, [r4, #12]
 800dc40:	181b      	addge	r3, r3, r0
 800dc42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dc46:	bfac      	ite	ge
 800dc48:	6523      	strge	r3, [r4, #80]	@ 0x50
 800dc4a:	81a3      	strhlt	r3, [r4, #12]
 800dc4c:	bd10      	pop	{r4, pc}

0800dc4e <__swrite>:
 800dc4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc52:	461f      	mov	r7, r3
 800dc54:	898b      	ldrh	r3, [r1, #12]
 800dc56:	05db      	lsls	r3, r3, #23
 800dc58:	4605      	mov	r5, r0
 800dc5a:	460c      	mov	r4, r1
 800dc5c:	4616      	mov	r6, r2
 800dc5e:	d505      	bpl.n	800dc6c <__swrite+0x1e>
 800dc60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc64:	2302      	movs	r3, #2
 800dc66:	2200      	movs	r2, #0
 800dc68:	f000 f83c 	bl	800dce4 <_lseek_r>
 800dc6c:	89a3      	ldrh	r3, [r4, #12]
 800dc6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc76:	81a3      	strh	r3, [r4, #12]
 800dc78:	4632      	mov	r2, r6
 800dc7a:	463b      	mov	r3, r7
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc82:	f000 b853 	b.w	800dd2c <_write_r>

0800dc86 <__sseek>:
 800dc86:	b510      	push	{r4, lr}
 800dc88:	460c      	mov	r4, r1
 800dc8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc8e:	f000 f829 	bl	800dce4 <_lseek_r>
 800dc92:	1c43      	adds	r3, r0, #1
 800dc94:	89a3      	ldrh	r3, [r4, #12]
 800dc96:	bf15      	itete	ne
 800dc98:	6520      	strne	r0, [r4, #80]	@ 0x50
 800dc9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dc9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dca2:	81a3      	strheq	r3, [r4, #12]
 800dca4:	bf18      	it	ne
 800dca6:	81a3      	strhne	r3, [r4, #12]
 800dca8:	bd10      	pop	{r4, pc}

0800dcaa <__sclose>:
 800dcaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcae:	f000 b809 	b.w	800dcc4 <_close_r>

0800dcb2 <memset>:
 800dcb2:	4402      	add	r2, r0
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d100      	bne.n	800dcbc <memset+0xa>
 800dcba:	4770      	bx	lr
 800dcbc:	f803 1b01 	strb.w	r1, [r3], #1
 800dcc0:	e7f9      	b.n	800dcb6 <memset+0x4>
	...

0800dcc4 <_close_r>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	4d06      	ldr	r5, [pc, #24]	@ (800dce0 <_close_r+0x1c>)
 800dcc8:	2300      	movs	r3, #0
 800dcca:	4604      	mov	r4, r0
 800dccc:	4608      	mov	r0, r1
 800dcce:	602b      	str	r3, [r5, #0]
 800dcd0:	f7f3 ffc6 	bl	8001c60 <_close>
 800dcd4:	1c43      	adds	r3, r0, #1
 800dcd6:	d102      	bne.n	800dcde <_close_r+0x1a>
 800dcd8:	682b      	ldr	r3, [r5, #0]
 800dcda:	b103      	cbz	r3, 800dcde <_close_r+0x1a>
 800dcdc:	6023      	str	r3, [r4, #0]
 800dcde:	bd38      	pop	{r3, r4, r5, pc}
 800dce0:	24014b10 	.word	0x24014b10

0800dce4 <_lseek_r>:
 800dce4:	b538      	push	{r3, r4, r5, lr}
 800dce6:	4d07      	ldr	r5, [pc, #28]	@ (800dd04 <_lseek_r+0x20>)
 800dce8:	4604      	mov	r4, r0
 800dcea:	4608      	mov	r0, r1
 800dcec:	4611      	mov	r1, r2
 800dcee:	2200      	movs	r2, #0
 800dcf0:	602a      	str	r2, [r5, #0]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	f7f3 ffdb 	bl	8001cae <_lseek>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d102      	bne.n	800dd02 <_lseek_r+0x1e>
 800dcfc:	682b      	ldr	r3, [r5, #0]
 800dcfe:	b103      	cbz	r3, 800dd02 <_lseek_r+0x1e>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	24014b10 	.word	0x24014b10

0800dd08 <_read_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	4d07      	ldr	r5, [pc, #28]	@ (800dd28 <_read_r+0x20>)
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	4608      	mov	r0, r1
 800dd10:	4611      	mov	r1, r2
 800dd12:	2200      	movs	r2, #0
 800dd14:	602a      	str	r2, [r5, #0]
 800dd16:	461a      	mov	r2, r3
 800dd18:	f7f3 ff69 	bl	8001bee <_read>
 800dd1c:	1c43      	adds	r3, r0, #1
 800dd1e:	d102      	bne.n	800dd26 <_read_r+0x1e>
 800dd20:	682b      	ldr	r3, [r5, #0]
 800dd22:	b103      	cbz	r3, 800dd26 <_read_r+0x1e>
 800dd24:	6023      	str	r3, [r4, #0]
 800dd26:	bd38      	pop	{r3, r4, r5, pc}
 800dd28:	24014b10 	.word	0x24014b10

0800dd2c <_write_r>:
 800dd2c:	b538      	push	{r3, r4, r5, lr}
 800dd2e:	4d07      	ldr	r5, [pc, #28]	@ (800dd4c <_write_r+0x20>)
 800dd30:	4604      	mov	r4, r0
 800dd32:	4608      	mov	r0, r1
 800dd34:	4611      	mov	r1, r2
 800dd36:	2200      	movs	r2, #0
 800dd38:	602a      	str	r2, [r5, #0]
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	f7f3 ff74 	bl	8001c28 <_write>
 800dd40:	1c43      	adds	r3, r0, #1
 800dd42:	d102      	bne.n	800dd4a <_write_r+0x1e>
 800dd44:	682b      	ldr	r3, [r5, #0]
 800dd46:	b103      	cbz	r3, 800dd4a <_write_r+0x1e>
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	bd38      	pop	{r3, r4, r5, pc}
 800dd4c:	24014b10 	.word	0x24014b10

0800dd50 <__errno>:
 800dd50:	4b01      	ldr	r3, [pc, #4]	@ (800dd58 <__errno+0x8>)
 800dd52:	6818      	ldr	r0, [r3, #0]
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	2400001c 	.word	0x2400001c

0800dd5c <__libc_init_array>:
 800dd5c:	b570      	push	{r4, r5, r6, lr}
 800dd5e:	4d0d      	ldr	r5, [pc, #52]	@ (800dd94 <__libc_init_array+0x38>)
 800dd60:	4c0d      	ldr	r4, [pc, #52]	@ (800dd98 <__libc_init_array+0x3c>)
 800dd62:	1b64      	subs	r4, r4, r5
 800dd64:	10a4      	asrs	r4, r4, #2
 800dd66:	2600      	movs	r6, #0
 800dd68:	42a6      	cmp	r6, r4
 800dd6a:	d109      	bne.n	800dd80 <__libc_init_array+0x24>
 800dd6c:	4d0b      	ldr	r5, [pc, #44]	@ (800dd9c <__libc_init_array+0x40>)
 800dd6e:	4c0c      	ldr	r4, [pc, #48]	@ (800dda0 <__libc_init_array+0x44>)
 800dd70:	f005 fce0 	bl	8013734 <_init>
 800dd74:	1b64      	subs	r4, r4, r5
 800dd76:	10a4      	asrs	r4, r4, #2
 800dd78:	2600      	movs	r6, #0
 800dd7a:	42a6      	cmp	r6, r4
 800dd7c:	d105      	bne.n	800dd8a <__libc_init_array+0x2e>
 800dd7e:	bd70      	pop	{r4, r5, r6, pc}
 800dd80:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd84:	4798      	blx	r3
 800dd86:	3601      	adds	r6, #1
 800dd88:	e7ee      	b.n	800dd68 <__libc_init_array+0xc>
 800dd8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd8e:	4798      	blx	r3
 800dd90:	3601      	adds	r6, #1
 800dd92:	e7f2      	b.n	800dd7a <__libc_init_array+0x1e>
 800dd94:	08015eb0 	.word	0x08015eb0
 800dd98:	08015eb0 	.word	0x08015eb0
 800dd9c:	08015eb0 	.word	0x08015eb0
 800dda0:	08015eb8 	.word	0x08015eb8

0800dda4 <__retarget_lock_init_recursive>:
 800dda4:	4770      	bx	lr

0800dda6 <__retarget_lock_close_recursive>:
 800dda6:	4770      	bx	lr

0800dda8 <__retarget_lock_acquire_recursive>:
 800dda8:	4770      	bx	lr

0800ddaa <__retarget_lock_release_recursive>:
 800ddaa:	4770      	bx	lr

0800ddac <register_fini>:
 800ddac:	4b02      	ldr	r3, [pc, #8]	@ (800ddb8 <register_fini+0xc>)
 800ddae:	b113      	cbz	r3, 800ddb6 <register_fini+0xa>
 800ddb0:	4802      	ldr	r0, [pc, #8]	@ (800ddbc <register_fini+0x10>)
 800ddb2:	f000 b805 	b.w	800ddc0 <atexit>
 800ddb6:	4770      	bx	lr
 800ddb8:	00000000 	.word	0x00000000
 800ddbc:	0800f9e5 	.word	0x0800f9e5

0800ddc0 <atexit>:
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f001 be66 	b.w	800fa98 <__register_exitproc>

0800ddcc <_malloc_trim_r>:
 800ddcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddd0:	4606      	mov	r6, r0
 800ddd2:	2008      	movs	r0, #8
 800ddd4:	4689      	mov	r9, r1
 800ddd6:	f001 fe19 	bl	800fa0c <sysconf>
 800ddda:	4f24      	ldr	r7, [pc, #144]	@ (800de6c <_malloc_trim_r+0xa0>)
 800dddc:	4680      	mov	r8, r0
 800ddde:	4630      	mov	r0, r6
 800dde0:	f000 fb44 	bl	800e46c <__malloc_lock>
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	685d      	ldr	r5, [r3, #4]
 800dde8:	f025 0503 	bic.w	r5, r5, #3
 800ddec:	f1a5 0411 	sub.w	r4, r5, #17
 800ddf0:	eba4 0409 	sub.w	r4, r4, r9
 800ddf4:	4444      	add	r4, r8
 800ddf6:	fbb4 f4f8 	udiv	r4, r4, r8
 800ddfa:	3c01      	subs	r4, #1
 800ddfc:	fb08 f404 	mul.w	r4, r8, r4
 800de00:	45a0      	cmp	r8, r4
 800de02:	dd05      	ble.n	800de10 <_malloc_trim_r+0x44>
 800de04:	4630      	mov	r0, r6
 800de06:	f000 fb37 	bl	800e478 <__malloc_unlock>
 800de0a:	2000      	movs	r0, #0
 800de0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de10:	2100      	movs	r1, #0
 800de12:	4630      	mov	r0, r6
 800de14:	f001 fdd6 	bl	800f9c4 <_sbrk_r>
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	442b      	add	r3, r5
 800de1c:	4298      	cmp	r0, r3
 800de1e:	d1f1      	bne.n	800de04 <_malloc_trim_r+0x38>
 800de20:	4261      	negs	r1, r4
 800de22:	4630      	mov	r0, r6
 800de24:	f001 fdce 	bl	800f9c4 <_sbrk_r>
 800de28:	3001      	adds	r0, #1
 800de2a:	d110      	bne.n	800de4e <_malloc_trim_r+0x82>
 800de2c:	2100      	movs	r1, #0
 800de2e:	4630      	mov	r0, r6
 800de30:	f001 fdc8 	bl	800f9c4 <_sbrk_r>
 800de34:	68ba      	ldr	r2, [r7, #8]
 800de36:	1a83      	subs	r3, r0, r2
 800de38:	2b0f      	cmp	r3, #15
 800de3a:	dde3      	ble.n	800de04 <_malloc_trim_r+0x38>
 800de3c:	490c      	ldr	r1, [pc, #48]	@ (800de70 <_malloc_trim_r+0xa4>)
 800de3e:	6809      	ldr	r1, [r1, #0]
 800de40:	1a40      	subs	r0, r0, r1
 800de42:	490c      	ldr	r1, [pc, #48]	@ (800de74 <_malloc_trim_r+0xa8>)
 800de44:	f043 0301 	orr.w	r3, r3, #1
 800de48:	6008      	str	r0, [r1, #0]
 800de4a:	6053      	str	r3, [r2, #4]
 800de4c:	e7da      	b.n	800de04 <_malloc_trim_r+0x38>
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	4a08      	ldr	r2, [pc, #32]	@ (800de74 <_malloc_trim_r+0xa8>)
 800de52:	1b2d      	subs	r5, r5, r4
 800de54:	f045 0501 	orr.w	r5, r5, #1
 800de58:	605d      	str	r5, [r3, #4]
 800de5a:	6813      	ldr	r3, [r2, #0]
 800de5c:	4630      	mov	r0, r6
 800de5e:	1b1b      	subs	r3, r3, r4
 800de60:	6013      	str	r3, [r2, #0]
 800de62:	f000 fb09 	bl	800e478 <__malloc_unlock>
 800de66:	2001      	movs	r0, #1
 800de68:	e7d0      	b.n	800de0c <_malloc_trim_r+0x40>
 800de6a:	bf00      	nop
 800de6c:	2400014c 	.word	0x2400014c
 800de70:	24000144 	.word	0x24000144
 800de74:	24014b1c 	.word	0x24014b1c

0800de78 <_free_r>:
 800de78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7a:	4604      	mov	r4, r0
 800de7c:	460f      	mov	r7, r1
 800de7e:	2900      	cmp	r1, #0
 800de80:	f000 80b1 	beq.w	800dfe6 <_free_r+0x16e>
 800de84:	f000 faf2 	bl	800e46c <__malloc_lock>
 800de88:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800de8c:	4d56      	ldr	r5, [pc, #344]	@ (800dfe8 <_free_r+0x170>)
 800de8e:	f022 0001 	bic.w	r0, r2, #1
 800de92:	f1a7 0308 	sub.w	r3, r7, #8
 800de96:	eb03 0c00 	add.w	ip, r3, r0
 800de9a:	68a9      	ldr	r1, [r5, #8]
 800de9c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800dea0:	4561      	cmp	r1, ip
 800dea2:	f026 0603 	bic.w	r6, r6, #3
 800dea6:	f002 0201 	and.w	r2, r2, #1
 800deaa:	d11b      	bne.n	800dee4 <_free_r+0x6c>
 800deac:	4406      	add	r6, r0
 800deae:	b93a      	cbnz	r2, 800dec0 <_free_r+0x48>
 800deb0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800deb4:	1a9b      	subs	r3, r3, r2
 800deb6:	4416      	add	r6, r2
 800deb8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800debc:	60ca      	str	r2, [r1, #12]
 800debe:	6091      	str	r1, [r2, #8]
 800dec0:	f046 0201 	orr.w	r2, r6, #1
 800dec4:	605a      	str	r2, [r3, #4]
 800dec6:	60ab      	str	r3, [r5, #8]
 800dec8:	4b48      	ldr	r3, [pc, #288]	@ (800dfec <_free_r+0x174>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	42b3      	cmp	r3, r6
 800dece:	d804      	bhi.n	800deda <_free_r+0x62>
 800ded0:	4b47      	ldr	r3, [pc, #284]	@ (800dff0 <_free_r+0x178>)
 800ded2:	4620      	mov	r0, r4
 800ded4:	6819      	ldr	r1, [r3, #0]
 800ded6:	f7ff ff79 	bl	800ddcc <_malloc_trim_r>
 800deda:	4620      	mov	r0, r4
 800dedc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dee0:	f000 baca 	b.w	800e478 <__malloc_unlock>
 800dee4:	f8cc 6004 	str.w	r6, [ip, #4]
 800dee8:	2a00      	cmp	r2, #0
 800deea:	d138      	bne.n	800df5e <_free_r+0xe6>
 800deec:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800def0:	1a5b      	subs	r3, r3, r1
 800def2:	4408      	add	r0, r1
 800def4:	6899      	ldr	r1, [r3, #8]
 800def6:	f105 0708 	add.w	r7, r5, #8
 800defa:	42b9      	cmp	r1, r7
 800defc:	d031      	beq.n	800df62 <_free_r+0xea>
 800defe:	68df      	ldr	r7, [r3, #12]
 800df00:	60cf      	str	r7, [r1, #12]
 800df02:	60b9      	str	r1, [r7, #8]
 800df04:	eb0c 0106 	add.w	r1, ip, r6
 800df08:	6849      	ldr	r1, [r1, #4]
 800df0a:	07c9      	lsls	r1, r1, #31
 800df0c:	d40b      	bmi.n	800df26 <_free_r+0xae>
 800df0e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800df12:	4430      	add	r0, r6
 800df14:	bb3a      	cbnz	r2, 800df66 <_free_r+0xee>
 800df16:	4e37      	ldr	r6, [pc, #220]	@ (800dff4 <_free_r+0x17c>)
 800df18:	42b1      	cmp	r1, r6
 800df1a:	d124      	bne.n	800df66 <_free_r+0xee>
 800df1c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800df20:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800df24:	2201      	movs	r2, #1
 800df26:	f040 0101 	orr.w	r1, r0, #1
 800df2a:	6059      	str	r1, [r3, #4]
 800df2c:	5018      	str	r0, [r3, r0]
 800df2e:	2a00      	cmp	r2, #0
 800df30:	d1d3      	bne.n	800deda <_free_r+0x62>
 800df32:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800df36:	d21b      	bcs.n	800df70 <_free_r+0xf8>
 800df38:	08c2      	lsrs	r2, r0, #3
 800df3a:	2101      	movs	r1, #1
 800df3c:	0940      	lsrs	r0, r0, #5
 800df3e:	4081      	lsls	r1, r0
 800df40:	6868      	ldr	r0, [r5, #4]
 800df42:	3201      	adds	r2, #1
 800df44:	4301      	orrs	r1, r0
 800df46:	6069      	str	r1, [r5, #4]
 800df48:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800df4c:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 800df50:	3908      	subs	r1, #8
 800df52:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800df56:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800df5a:	60c3      	str	r3, [r0, #12]
 800df5c:	e7bd      	b.n	800deda <_free_r+0x62>
 800df5e:	2200      	movs	r2, #0
 800df60:	e7d0      	b.n	800df04 <_free_r+0x8c>
 800df62:	2201      	movs	r2, #1
 800df64:	e7ce      	b.n	800df04 <_free_r+0x8c>
 800df66:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800df6a:	60ce      	str	r6, [r1, #12]
 800df6c:	60b1      	str	r1, [r6, #8]
 800df6e:	e7da      	b.n	800df26 <_free_r+0xae>
 800df70:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 800df74:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800df78:	d214      	bcs.n	800dfa4 <_free_r+0x12c>
 800df7a:	0982      	lsrs	r2, r0, #6
 800df7c:	3238      	adds	r2, #56	@ 0x38
 800df7e:	1c51      	adds	r1, r2, #1
 800df80:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800df84:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800df88:	428e      	cmp	r6, r1
 800df8a:	d125      	bne.n	800dfd8 <_free_r+0x160>
 800df8c:	2001      	movs	r0, #1
 800df8e:	1092      	asrs	r2, r2, #2
 800df90:	fa00 f202 	lsl.w	r2, r0, r2
 800df94:	6868      	ldr	r0, [r5, #4]
 800df96:	4302      	orrs	r2, r0
 800df98:	606a      	str	r2, [r5, #4]
 800df9a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800df9e:	60b3      	str	r3, [r6, #8]
 800dfa0:	60cb      	str	r3, [r1, #12]
 800dfa2:	e79a      	b.n	800deda <_free_r+0x62>
 800dfa4:	2a14      	cmp	r2, #20
 800dfa6:	d801      	bhi.n	800dfac <_free_r+0x134>
 800dfa8:	325b      	adds	r2, #91	@ 0x5b
 800dfaa:	e7e8      	b.n	800df7e <_free_r+0x106>
 800dfac:	2a54      	cmp	r2, #84	@ 0x54
 800dfae:	d802      	bhi.n	800dfb6 <_free_r+0x13e>
 800dfb0:	0b02      	lsrs	r2, r0, #12
 800dfb2:	326e      	adds	r2, #110	@ 0x6e
 800dfb4:	e7e3      	b.n	800df7e <_free_r+0x106>
 800dfb6:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800dfba:	d802      	bhi.n	800dfc2 <_free_r+0x14a>
 800dfbc:	0bc2      	lsrs	r2, r0, #15
 800dfbe:	3277      	adds	r2, #119	@ 0x77
 800dfc0:	e7dd      	b.n	800df7e <_free_r+0x106>
 800dfc2:	f240 5154 	movw	r1, #1364	@ 0x554
 800dfc6:	428a      	cmp	r2, r1
 800dfc8:	bf9a      	itte	ls
 800dfca:	0c82      	lsrls	r2, r0, #18
 800dfcc:	327c      	addls	r2, #124	@ 0x7c
 800dfce:	227e      	movhi	r2, #126	@ 0x7e
 800dfd0:	e7d5      	b.n	800df7e <_free_r+0x106>
 800dfd2:	6889      	ldr	r1, [r1, #8]
 800dfd4:	428e      	cmp	r6, r1
 800dfd6:	d004      	beq.n	800dfe2 <_free_r+0x16a>
 800dfd8:	684a      	ldr	r2, [r1, #4]
 800dfda:	f022 0203 	bic.w	r2, r2, #3
 800dfde:	4282      	cmp	r2, r0
 800dfe0:	d8f7      	bhi.n	800dfd2 <_free_r+0x15a>
 800dfe2:	68ce      	ldr	r6, [r1, #12]
 800dfe4:	e7d9      	b.n	800df9a <_free_r+0x122>
 800dfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfe8:	2400014c 	.word	0x2400014c
 800dfec:	24000148 	.word	0x24000148
 800dff0:	24014b4c 	.word	0x24014b4c
 800dff4:	24000154 	.word	0x24000154

0800dff8 <_malloc_r>:
 800dff8:	f101 030b 	add.w	r3, r1, #11
 800dffc:	2b16      	cmp	r3, #22
 800dffe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e002:	4605      	mov	r5, r0
 800e004:	d906      	bls.n	800e014 <_malloc_r+0x1c>
 800e006:	f033 0707 	bics.w	r7, r3, #7
 800e00a:	d504      	bpl.n	800e016 <_malloc_r+0x1e>
 800e00c:	230c      	movs	r3, #12
 800e00e:	602b      	str	r3, [r5, #0]
 800e010:	2400      	movs	r4, #0
 800e012:	e1a3      	b.n	800e35c <_malloc_r+0x364>
 800e014:	2710      	movs	r7, #16
 800e016:	42b9      	cmp	r1, r7
 800e018:	d8f8      	bhi.n	800e00c <_malloc_r+0x14>
 800e01a:	4628      	mov	r0, r5
 800e01c:	f000 fa26 	bl	800e46c <__malloc_lock>
 800e020:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 800e024:	4eaf      	ldr	r6, [pc, #700]	@ (800e2e4 <_malloc_r+0x2ec>)
 800e026:	d237      	bcs.n	800e098 <_malloc_r+0xa0>
 800e028:	f107 0208 	add.w	r2, r7, #8
 800e02c:	4432      	add	r2, r6
 800e02e:	f1a2 0108 	sub.w	r1, r2, #8
 800e032:	6854      	ldr	r4, [r2, #4]
 800e034:	428c      	cmp	r4, r1
 800e036:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800e03a:	d102      	bne.n	800e042 <_malloc_r+0x4a>
 800e03c:	68d4      	ldr	r4, [r2, #12]
 800e03e:	42a2      	cmp	r2, r4
 800e040:	d010      	beq.n	800e064 <_malloc_r+0x6c>
 800e042:	6863      	ldr	r3, [r4, #4]
 800e044:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800e048:	f023 0303 	bic.w	r3, r3, #3
 800e04c:	60ca      	str	r2, [r1, #12]
 800e04e:	4423      	add	r3, r4
 800e050:	6091      	str	r1, [r2, #8]
 800e052:	685a      	ldr	r2, [r3, #4]
 800e054:	f042 0201 	orr.w	r2, r2, #1
 800e058:	605a      	str	r2, [r3, #4]
 800e05a:	4628      	mov	r0, r5
 800e05c:	f000 fa0c 	bl	800e478 <__malloc_unlock>
 800e060:	3408      	adds	r4, #8
 800e062:	e17b      	b.n	800e35c <_malloc_r+0x364>
 800e064:	3302      	adds	r3, #2
 800e066:	6934      	ldr	r4, [r6, #16]
 800e068:	499f      	ldr	r1, [pc, #636]	@ (800e2e8 <_malloc_r+0x2f0>)
 800e06a:	428c      	cmp	r4, r1
 800e06c:	d077      	beq.n	800e15e <_malloc_r+0x166>
 800e06e:	6862      	ldr	r2, [r4, #4]
 800e070:	f022 0c03 	bic.w	ip, r2, #3
 800e074:	ebac 0007 	sub.w	r0, ip, r7
 800e078:	280f      	cmp	r0, #15
 800e07a:	dd48      	ble.n	800e10e <_malloc_r+0x116>
 800e07c:	19e2      	adds	r2, r4, r7
 800e07e:	f040 0301 	orr.w	r3, r0, #1
 800e082:	f047 0701 	orr.w	r7, r7, #1
 800e086:	6067      	str	r7, [r4, #4]
 800e088:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800e08c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800e090:	6053      	str	r3, [r2, #4]
 800e092:	f844 000c 	str.w	r0, [r4, ip]
 800e096:	e7e0      	b.n	800e05a <_malloc_r+0x62>
 800e098:	0a7b      	lsrs	r3, r7, #9
 800e09a:	d02a      	beq.n	800e0f2 <_malloc_r+0xfa>
 800e09c:	2b04      	cmp	r3, #4
 800e09e:	d812      	bhi.n	800e0c6 <_malloc_r+0xce>
 800e0a0:	09bb      	lsrs	r3, r7, #6
 800e0a2:	3338      	adds	r3, #56	@ 0x38
 800e0a4:	1c5a      	adds	r2, r3, #1
 800e0a6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800e0aa:	f1a2 0c08 	sub.w	ip, r2, #8
 800e0ae:	6854      	ldr	r4, [r2, #4]
 800e0b0:	4564      	cmp	r4, ip
 800e0b2:	d006      	beq.n	800e0c2 <_malloc_r+0xca>
 800e0b4:	6862      	ldr	r2, [r4, #4]
 800e0b6:	f022 0203 	bic.w	r2, r2, #3
 800e0ba:	1bd0      	subs	r0, r2, r7
 800e0bc:	280f      	cmp	r0, #15
 800e0be:	dd1c      	ble.n	800e0fa <_malloc_r+0x102>
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	e7cf      	b.n	800e066 <_malloc_r+0x6e>
 800e0c6:	2b14      	cmp	r3, #20
 800e0c8:	d801      	bhi.n	800e0ce <_malloc_r+0xd6>
 800e0ca:	335b      	adds	r3, #91	@ 0x5b
 800e0cc:	e7ea      	b.n	800e0a4 <_malloc_r+0xac>
 800e0ce:	2b54      	cmp	r3, #84	@ 0x54
 800e0d0:	d802      	bhi.n	800e0d8 <_malloc_r+0xe0>
 800e0d2:	0b3b      	lsrs	r3, r7, #12
 800e0d4:	336e      	adds	r3, #110	@ 0x6e
 800e0d6:	e7e5      	b.n	800e0a4 <_malloc_r+0xac>
 800e0d8:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800e0dc:	d802      	bhi.n	800e0e4 <_malloc_r+0xec>
 800e0de:	0bfb      	lsrs	r3, r7, #15
 800e0e0:	3377      	adds	r3, #119	@ 0x77
 800e0e2:	e7df      	b.n	800e0a4 <_malloc_r+0xac>
 800e0e4:	f240 5254 	movw	r2, #1364	@ 0x554
 800e0e8:	4293      	cmp	r3, r2
 800e0ea:	d804      	bhi.n	800e0f6 <_malloc_r+0xfe>
 800e0ec:	0cbb      	lsrs	r3, r7, #18
 800e0ee:	337c      	adds	r3, #124	@ 0x7c
 800e0f0:	e7d8      	b.n	800e0a4 <_malloc_r+0xac>
 800e0f2:	233f      	movs	r3, #63	@ 0x3f
 800e0f4:	e7d6      	b.n	800e0a4 <_malloc_r+0xac>
 800e0f6:	237e      	movs	r3, #126	@ 0x7e
 800e0f8:	e7d4      	b.n	800e0a4 <_malloc_r+0xac>
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	68e1      	ldr	r1, [r4, #12]
 800e0fe:	db04      	blt.n	800e10a <_malloc_r+0x112>
 800e100:	68a3      	ldr	r3, [r4, #8]
 800e102:	60d9      	str	r1, [r3, #12]
 800e104:	608b      	str	r3, [r1, #8]
 800e106:	18a3      	adds	r3, r4, r2
 800e108:	e7a3      	b.n	800e052 <_malloc_r+0x5a>
 800e10a:	460c      	mov	r4, r1
 800e10c:	e7d0      	b.n	800e0b0 <_malloc_r+0xb8>
 800e10e:	2800      	cmp	r0, #0
 800e110:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800e114:	db07      	blt.n	800e126 <_malloc_r+0x12e>
 800e116:	44a4      	add	ip, r4
 800e118:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800e11c:	f043 0301 	orr.w	r3, r3, #1
 800e120:	f8cc 3004 	str.w	r3, [ip, #4]
 800e124:	e799      	b.n	800e05a <_malloc_r+0x62>
 800e126:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800e12a:	6870      	ldr	r0, [r6, #4]
 800e12c:	f080 8095 	bcs.w	800e25a <_malloc_r+0x262>
 800e130:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800e134:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800e138:	f04f 0c01 	mov.w	ip, #1
 800e13c:	3201      	adds	r2, #1
 800e13e:	fa0c fc0e 	lsl.w	ip, ip, lr
 800e142:	ea4c 0000 	orr.w	r0, ip, r0
 800e146:	6070      	str	r0, [r6, #4]
 800e148:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800e14c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800e150:	3808      	subs	r0, #8
 800e152:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800e156:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800e15a:	f8cc 400c 	str.w	r4, [ip, #12]
 800e15e:	1098      	asrs	r0, r3, #2
 800e160:	2201      	movs	r2, #1
 800e162:	4082      	lsls	r2, r0
 800e164:	6870      	ldr	r0, [r6, #4]
 800e166:	4290      	cmp	r0, r2
 800e168:	d326      	bcc.n	800e1b8 <_malloc_r+0x1c0>
 800e16a:	4210      	tst	r0, r2
 800e16c:	d106      	bne.n	800e17c <_malloc_r+0x184>
 800e16e:	f023 0303 	bic.w	r3, r3, #3
 800e172:	0052      	lsls	r2, r2, #1
 800e174:	4210      	tst	r0, r2
 800e176:	f103 0304 	add.w	r3, r3, #4
 800e17a:	d0fa      	beq.n	800e172 <_malloc_r+0x17a>
 800e17c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800e180:	46c1      	mov	r9, r8
 800e182:	469e      	mov	lr, r3
 800e184:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800e188:	454c      	cmp	r4, r9
 800e18a:	f040 80b9 	bne.w	800e300 <_malloc_r+0x308>
 800e18e:	f10e 0e01 	add.w	lr, lr, #1
 800e192:	f01e 0f03 	tst.w	lr, #3
 800e196:	f109 0908 	add.w	r9, r9, #8
 800e19a:	d1f3      	bne.n	800e184 <_malloc_r+0x18c>
 800e19c:	0798      	lsls	r0, r3, #30
 800e19e:	f040 80e3 	bne.w	800e368 <_malloc_r+0x370>
 800e1a2:	6873      	ldr	r3, [r6, #4]
 800e1a4:	ea23 0302 	bic.w	r3, r3, r2
 800e1a8:	6073      	str	r3, [r6, #4]
 800e1aa:	6870      	ldr	r0, [r6, #4]
 800e1ac:	0052      	lsls	r2, r2, #1
 800e1ae:	4290      	cmp	r0, r2
 800e1b0:	d302      	bcc.n	800e1b8 <_malloc_r+0x1c0>
 800e1b2:	2a00      	cmp	r2, #0
 800e1b4:	f040 80e5 	bne.w	800e382 <_malloc_r+0x38a>
 800e1b8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800e1bc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e1c0:	f023 0903 	bic.w	r9, r3, #3
 800e1c4:	45b9      	cmp	r9, r7
 800e1c6:	d304      	bcc.n	800e1d2 <_malloc_r+0x1da>
 800e1c8:	eba9 0207 	sub.w	r2, r9, r7
 800e1cc:	2a0f      	cmp	r2, #15
 800e1ce:	f300 8141 	bgt.w	800e454 <_malloc_r+0x45c>
 800e1d2:	4b46      	ldr	r3, [pc, #280]	@ (800e2ec <_malloc_r+0x2f4>)
 800e1d4:	6819      	ldr	r1, [r3, #0]
 800e1d6:	3110      	adds	r1, #16
 800e1d8:	4439      	add	r1, r7
 800e1da:	2008      	movs	r0, #8
 800e1dc:	9101      	str	r1, [sp, #4]
 800e1de:	f001 fc15 	bl	800fa0c <sysconf>
 800e1e2:	4a43      	ldr	r2, [pc, #268]	@ (800e2f0 <_malloc_r+0x2f8>)
 800e1e4:	9901      	ldr	r1, [sp, #4]
 800e1e6:	6813      	ldr	r3, [r2, #0]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	bf1f      	itttt	ne
 800e1ec:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 800e1f0:	1809      	addne	r1, r1, r0
 800e1f2:	4243      	negne	r3, r0
 800e1f4:	4019      	andne	r1, r3
 800e1f6:	4680      	mov	r8, r0
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	9101      	str	r1, [sp, #4]
 800e1fc:	f001 fbe2 	bl	800f9c4 <_sbrk_r>
 800e200:	1c42      	adds	r2, r0, #1
 800e202:	eb0a 0b09 	add.w	fp, sl, r9
 800e206:	4604      	mov	r4, r0
 800e208:	f000 80f7 	beq.w	800e3fa <_malloc_r+0x402>
 800e20c:	4583      	cmp	fp, r0
 800e20e:	9901      	ldr	r1, [sp, #4]
 800e210:	4a37      	ldr	r2, [pc, #220]	@ (800e2f0 <_malloc_r+0x2f8>)
 800e212:	d902      	bls.n	800e21a <_malloc_r+0x222>
 800e214:	45b2      	cmp	sl, r6
 800e216:	f040 80f0 	bne.w	800e3fa <_malloc_r+0x402>
 800e21a:	4b36      	ldr	r3, [pc, #216]	@ (800e2f4 <_malloc_r+0x2fc>)
 800e21c:	6818      	ldr	r0, [r3, #0]
 800e21e:	45a3      	cmp	fp, r4
 800e220:	eb00 0e01 	add.w	lr, r0, r1
 800e224:	f8c3 e000 	str.w	lr, [r3]
 800e228:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800e22c:	f040 80ab 	bne.w	800e386 <_malloc_r+0x38e>
 800e230:	ea1b 0f0c 	tst.w	fp, ip
 800e234:	f040 80a7 	bne.w	800e386 <_malloc_r+0x38e>
 800e238:	68b2      	ldr	r2, [r6, #8]
 800e23a:	4449      	add	r1, r9
 800e23c:	f041 0101 	orr.w	r1, r1, #1
 800e240:	6051      	str	r1, [r2, #4]
 800e242:	4a2d      	ldr	r2, [pc, #180]	@ (800e2f8 <_malloc_r+0x300>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	6811      	ldr	r1, [r2, #0]
 800e248:	428b      	cmp	r3, r1
 800e24a:	bf88      	it	hi
 800e24c:	6013      	strhi	r3, [r2, #0]
 800e24e:	4a2b      	ldr	r2, [pc, #172]	@ (800e2fc <_malloc_r+0x304>)
 800e250:	6811      	ldr	r1, [r2, #0]
 800e252:	428b      	cmp	r3, r1
 800e254:	bf88      	it	hi
 800e256:	6013      	strhi	r3, [r2, #0]
 800e258:	e0cf      	b.n	800e3fa <_malloc_r+0x402>
 800e25a:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800e25e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800e262:	d218      	bcs.n	800e296 <_malloc_r+0x29e>
 800e264:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800e268:	3238      	adds	r2, #56	@ 0x38
 800e26a:	f102 0e01 	add.w	lr, r2, #1
 800e26e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800e272:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800e276:	45f0      	cmp	r8, lr
 800e278:	d12b      	bne.n	800e2d2 <_malloc_r+0x2da>
 800e27a:	1092      	asrs	r2, r2, #2
 800e27c:	f04f 0c01 	mov.w	ip, #1
 800e280:	fa0c f202 	lsl.w	r2, ip, r2
 800e284:	4302      	orrs	r2, r0
 800e286:	6072      	str	r2, [r6, #4]
 800e288:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800e28c:	f8c8 4008 	str.w	r4, [r8, #8]
 800e290:	f8ce 400c 	str.w	r4, [lr, #12]
 800e294:	e763      	b.n	800e15e <_malloc_r+0x166>
 800e296:	2a14      	cmp	r2, #20
 800e298:	d801      	bhi.n	800e29e <_malloc_r+0x2a6>
 800e29a:	325b      	adds	r2, #91	@ 0x5b
 800e29c:	e7e5      	b.n	800e26a <_malloc_r+0x272>
 800e29e:	2a54      	cmp	r2, #84	@ 0x54
 800e2a0:	d803      	bhi.n	800e2aa <_malloc_r+0x2b2>
 800e2a2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800e2a6:	326e      	adds	r2, #110	@ 0x6e
 800e2a8:	e7df      	b.n	800e26a <_malloc_r+0x272>
 800e2aa:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800e2ae:	d803      	bhi.n	800e2b8 <_malloc_r+0x2c0>
 800e2b0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800e2b4:	3277      	adds	r2, #119	@ 0x77
 800e2b6:	e7d8      	b.n	800e26a <_malloc_r+0x272>
 800e2b8:	f240 5e54 	movw	lr, #1364	@ 0x554
 800e2bc:	4572      	cmp	r2, lr
 800e2be:	bf9a      	itte	ls
 800e2c0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800e2c4:	327c      	addls	r2, #124	@ 0x7c
 800e2c6:	227e      	movhi	r2, #126	@ 0x7e
 800e2c8:	e7cf      	b.n	800e26a <_malloc_r+0x272>
 800e2ca:	f8de e008 	ldr.w	lr, [lr, #8]
 800e2ce:	45f0      	cmp	r8, lr
 800e2d0:	d005      	beq.n	800e2de <_malloc_r+0x2e6>
 800e2d2:	f8de 2004 	ldr.w	r2, [lr, #4]
 800e2d6:	f022 0203 	bic.w	r2, r2, #3
 800e2da:	4562      	cmp	r2, ip
 800e2dc:	d8f5      	bhi.n	800e2ca <_malloc_r+0x2d2>
 800e2de:	f8de 800c 	ldr.w	r8, [lr, #12]
 800e2e2:	e7d1      	b.n	800e288 <_malloc_r+0x290>
 800e2e4:	2400014c 	.word	0x2400014c
 800e2e8:	24000154 	.word	0x24000154
 800e2ec:	24014b4c 	.word	0x24014b4c
 800e2f0:	24000144 	.word	0x24000144
 800e2f4:	24014b1c 	.word	0x24014b1c
 800e2f8:	24014b48 	.word	0x24014b48
 800e2fc:	24014b44 	.word	0x24014b44
 800e300:	6860      	ldr	r0, [r4, #4]
 800e302:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800e306:	f020 0003 	bic.w	r0, r0, #3
 800e30a:	eba0 0a07 	sub.w	sl, r0, r7
 800e30e:	f1ba 0f0f 	cmp.w	sl, #15
 800e312:	dd12      	ble.n	800e33a <_malloc_r+0x342>
 800e314:	68a3      	ldr	r3, [r4, #8]
 800e316:	19e2      	adds	r2, r4, r7
 800e318:	f047 0701 	orr.w	r7, r7, #1
 800e31c:	6067      	str	r7, [r4, #4]
 800e31e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800e322:	f8cc 3008 	str.w	r3, [ip, #8]
 800e326:	f04a 0301 	orr.w	r3, sl, #1
 800e32a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800e32e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800e332:	6053      	str	r3, [r2, #4]
 800e334:	f844 a000 	str.w	sl, [r4, r0]
 800e338:	e68f      	b.n	800e05a <_malloc_r+0x62>
 800e33a:	f1ba 0f00 	cmp.w	sl, #0
 800e33e:	db11      	blt.n	800e364 <_malloc_r+0x36c>
 800e340:	4420      	add	r0, r4
 800e342:	6843      	ldr	r3, [r0, #4]
 800e344:	f043 0301 	orr.w	r3, r3, #1
 800e348:	6043      	str	r3, [r0, #4]
 800e34a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800e34e:	4628      	mov	r0, r5
 800e350:	f8c3 c00c 	str.w	ip, [r3, #12]
 800e354:	f8cc 3008 	str.w	r3, [ip, #8]
 800e358:	f000 f88e 	bl	800e478 <__malloc_unlock>
 800e35c:	4620      	mov	r0, r4
 800e35e:	b003      	add	sp, #12
 800e360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e364:	4664      	mov	r4, ip
 800e366:	e70f      	b.n	800e188 <_malloc_r+0x190>
 800e368:	f858 0908 	ldr.w	r0, [r8], #-8
 800e36c:	4540      	cmp	r0, r8
 800e36e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e372:	f43f af13 	beq.w	800e19c <_malloc_r+0x1a4>
 800e376:	e718      	b.n	800e1aa <_malloc_r+0x1b2>
 800e378:	3304      	adds	r3, #4
 800e37a:	0052      	lsls	r2, r2, #1
 800e37c:	4210      	tst	r0, r2
 800e37e:	d0fb      	beq.n	800e378 <_malloc_r+0x380>
 800e380:	e6fc      	b.n	800e17c <_malloc_r+0x184>
 800e382:	4673      	mov	r3, lr
 800e384:	e7fa      	b.n	800e37c <_malloc_r+0x384>
 800e386:	6810      	ldr	r0, [r2, #0]
 800e388:	3001      	adds	r0, #1
 800e38a:	bf1b      	ittet	ne
 800e38c:	eba4 0b0b 	subne.w	fp, r4, fp
 800e390:	eb0b 020e 	addne.w	r2, fp, lr
 800e394:	6014      	streq	r4, [r2, #0]
 800e396:	601a      	strne	r2, [r3, #0]
 800e398:	f014 0b07 	ands.w	fp, r4, #7
 800e39c:	bf1a      	itte	ne
 800e39e:	f1cb 0008 	rsbne	r0, fp, #8
 800e3a2:	1824      	addne	r4, r4, r0
 800e3a4:	4658      	moveq	r0, fp
 800e3a6:	1862      	adds	r2, r4, r1
 800e3a8:	ea02 010c 	and.w	r1, r2, ip
 800e3ac:	4480      	add	r8, r0
 800e3ae:	eba8 0801 	sub.w	r8, r8, r1
 800e3b2:	ea08 080c 	and.w	r8, r8, ip
 800e3b6:	4641      	mov	r1, r8
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	9201      	str	r2, [sp, #4]
 800e3bc:	f001 fb02 	bl	800f9c4 <_sbrk_r>
 800e3c0:	1c43      	adds	r3, r0, #1
 800e3c2:	9a01      	ldr	r2, [sp, #4]
 800e3c4:	4b28      	ldr	r3, [pc, #160]	@ (800e468 <_malloc_r+0x470>)
 800e3c6:	d107      	bne.n	800e3d8 <_malloc_r+0x3e0>
 800e3c8:	f1bb 0f00 	cmp.w	fp, #0
 800e3cc:	d023      	beq.n	800e416 <_malloc_r+0x41e>
 800e3ce:	f1ab 0008 	sub.w	r0, fp, #8
 800e3d2:	4410      	add	r0, r2
 800e3d4:	f04f 0800 	mov.w	r8, #0
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	60b4      	str	r4, [r6, #8]
 800e3dc:	1b00      	subs	r0, r0, r4
 800e3de:	4440      	add	r0, r8
 800e3e0:	4442      	add	r2, r8
 800e3e2:	f040 0001 	orr.w	r0, r0, #1
 800e3e6:	45b2      	cmp	sl, r6
 800e3e8:	601a      	str	r2, [r3, #0]
 800e3ea:	6060      	str	r0, [r4, #4]
 800e3ec:	f43f af29 	beq.w	800e242 <_malloc_r+0x24a>
 800e3f0:	f1b9 0f0f 	cmp.w	r9, #15
 800e3f4:	d812      	bhi.n	800e41c <_malloc_r+0x424>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	6063      	str	r3, [r4, #4]
 800e3fa:	68b3      	ldr	r3, [r6, #8]
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	f023 0303 	bic.w	r3, r3, #3
 800e402:	42bb      	cmp	r3, r7
 800e404:	eba3 0207 	sub.w	r2, r3, r7
 800e408:	d301      	bcc.n	800e40e <_malloc_r+0x416>
 800e40a:	2a0f      	cmp	r2, #15
 800e40c:	dc22      	bgt.n	800e454 <_malloc_r+0x45c>
 800e40e:	4628      	mov	r0, r5
 800e410:	f000 f832 	bl	800e478 <__malloc_unlock>
 800e414:	e5fc      	b.n	800e010 <_malloc_r+0x18>
 800e416:	4610      	mov	r0, r2
 800e418:	46d8      	mov	r8, fp
 800e41a:	e7dd      	b.n	800e3d8 <_malloc_r+0x3e0>
 800e41c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800e420:	f1a9 090c 	sub.w	r9, r9, #12
 800e424:	f029 0907 	bic.w	r9, r9, #7
 800e428:	f002 0201 	and.w	r2, r2, #1
 800e42c:	ea42 0209 	orr.w	r2, r2, r9
 800e430:	f8ca 2004 	str.w	r2, [sl, #4]
 800e434:	2105      	movs	r1, #5
 800e436:	eb0a 0209 	add.w	r2, sl, r9
 800e43a:	f1b9 0f0f 	cmp.w	r9, #15
 800e43e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800e442:	f67f aefe 	bls.w	800e242 <_malloc_r+0x24a>
 800e446:	f10a 0108 	add.w	r1, sl, #8
 800e44a:	4628      	mov	r0, r5
 800e44c:	f7ff fd14 	bl	800de78 <_free_r>
 800e450:	4b05      	ldr	r3, [pc, #20]	@ (800e468 <_malloc_r+0x470>)
 800e452:	e6f6      	b.n	800e242 <_malloc_r+0x24a>
 800e454:	68b4      	ldr	r4, [r6, #8]
 800e456:	f047 0301 	orr.w	r3, r7, #1
 800e45a:	4427      	add	r7, r4
 800e45c:	f042 0201 	orr.w	r2, r2, #1
 800e460:	6063      	str	r3, [r4, #4]
 800e462:	60b7      	str	r7, [r6, #8]
 800e464:	607a      	str	r2, [r7, #4]
 800e466:	e5f8      	b.n	800e05a <_malloc_r+0x62>
 800e468:	24014b1c 	.word	0x24014b1c

0800e46c <__malloc_lock>:
 800e46c:	4801      	ldr	r0, [pc, #4]	@ (800e474 <__malloc_lock+0x8>)
 800e46e:	f7ff bc9b 	b.w	800dda8 <__retarget_lock_acquire_recursive>
 800e472:	bf00      	nop
 800e474:	24014b14 	.word	0x24014b14

0800e478 <__malloc_unlock>:
 800e478:	4801      	ldr	r0, [pc, #4]	@ (800e480 <__malloc_unlock+0x8>)
 800e47a:	f7ff bc96 	b.w	800ddaa <__retarget_lock_release_recursive>
 800e47e:	bf00      	nop
 800e480:	24014b14 	.word	0x24014b14
 800e484:	00000000 	.word	0x00000000

0800e488 <_svfprintf_r>:
 800e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e48c:	ed2d 8b04 	vpush	{d8-d9}
 800e490:	b0cb      	sub	sp, #300	@ 0x12c
 800e492:	468a      	mov	sl, r1
 800e494:	4691      	mov	r9, r2
 800e496:	461e      	mov	r6, r3
 800e498:	9002      	str	r0, [sp, #8]
 800e49a:	f001 fa8f 	bl	800f9bc <_localeconv_r>
 800e49e:	6803      	ldr	r3, [r0, #0]
 800e4a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7f1 ff6c 	bl	8000380 <strlen>
 800e4a8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e4ac:	9009      	str	r0, [sp, #36]	@ 0x24
 800e4ae:	061c      	lsls	r4, r3, #24
 800e4b0:	d515      	bpl.n	800e4de <_svfprintf_r+0x56>
 800e4b2:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e4b6:	b993      	cbnz	r3, 800e4de <_svfprintf_r+0x56>
 800e4b8:	9802      	ldr	r0, [sp, #8]
 800e4ba:	2140      	movs	r1, #64	@ 0x40
 800e4bc:	f7ff fd9c 	bl	800dff8 <_malloc_r>
 800e4c0:	f8ca 0000 	str.w	r0, [sl]
 800e4c4:	f8ca 0010 	str.w	r0, [sl, #16]
 800e4c8:	b930      	cbnz	r0, 800e4d8 <_svfprintf_r+0x50>
 800e4ca:	9a02      	ldr	r2, [sp, #8]
 800e4cc:	230c      	movs	r3, #12
 800e4ce:	6013      	str	r3, [r2, #0]
 800e4d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e4d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4d6:	e1e1      	b.n	800e89c <_svfprintf_r+0x414>
 800e4d8:	2340      	movs	r3, #64	@ 0x40
 800e4da:	f8ca 3014 	str.w	r3, [sl, #20]
 800e4de:	2300      	movs	r3, #0
 800e4e0:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 800e4e4:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 800e740 <_svfprintf_r+0x2b8>
 800e4e8:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 800e4ec:	ac21      	add	r4, sp, #132	@ 0x84
 800e4ee:	941e      	str	r4, [sp, #120]	@ 0x78
 800e4f0:	9303      	str	r3, [sp, #12]
 800e4f2:	9307      	str	r3, [sp, #28]
 800e4f4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e4f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800e4f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4fa:	464b      	mov	r3, r9
 800e4fc:	461d      	mov	r5, r3
 800e4fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e502:	b10a      	cbz	r2, 800e508 <_svfprintf_r+0x80>
 800e504:	2a25      	cmp	r2, #37	@ 0x25
 800e506:	d1f9      	bne.n	800e4fc <_svfprintf_r+0x74>
 800e508:	ebb5 0709 	subs.w	r7, r5, r9
 800e50c:	d00d      	beq.n	800e52a <_svfprintf_r+0xa2>
 800e50e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e510:	443b      	add	r3, r7
 800e512:	9320      	str	r3, [sp, #128]	@ 0x80
 800e514:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800e516:	3301      	adds	r3, #1
 800e518:	2b07      	cmp	r3, #7
 800e51a:	e9c4 9700 	strd	r9, r7, [r4]
 800e51e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e520:	dc75      	bgt.n	800e60e <_svfprintf_r+0x186>
 800e522:	3408      	adds	r4, #8
 800e524:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e526:	443b      	add	r3, r7
 800e528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e52a:	782b      	ldrb	r3, [r5, #0]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f001 80ee 	beq.w	800f70e <_svfprintf_r+0x1286>
 800e532:	2200      	movs	r2, #0
 800e534:	1c6b      	adds	r3, r5, #1
 800e536:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 800e53a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800e53e:	920a      	str	r2, [sp, #40]	@ 0x28
 800e540:	4615      	mov	r5, r2
 800e542:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e546:	9204      	str	r2, [sp, #16]
 800e548:	9308      	str	r3, [sp, #32]
 800e54a:	9b04      	ldr	r3, [sp, #16]
 800e54c:	3b20      	subs	r3, #32
 800e54e:	2b5a      	cmp	r3, #90	@ 0x5a
 800e550:	f200 8564 	bhi.w	800f01c <_svfprintf_r+0xb94>
 800e554:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e558:	0562009c 	.word	0x0562009c
 800e55c:	00a40562 	.word	0x00a40562
 800e560:	05620562 	.word	0x05620562
 800e564:	00840562 	.word	0x00840562
 800e568:	05620562 	.word	0x05620562
 800e56c:	00b100a7 	.word	0x00b100a7
 800e570:	00ae0562 	.word	0x00ae0562
 800e574:	056200b3 	.word	0x056200b3
 800e578:	00d000cd 	.word	0x00d000cd
 800e57c:	00d000d0 	.word	0x00d000d0
 800e580:	00d000d0 	.word	0x00d000d0
 800e584:	00d000d0 	.word	0x00d000d0
 800e588:	00d000d0 	.word	0x00d000d0
 800e58c:	05620562 	.word	0x05620562
 800e590:	05620562 	.word	0x05620562
 800e594:	05620562 	.word	0x05620562
 800e598:	01460562 	.word	0x01460562
 800e59c:	01070562 	.word	0x01070562
 800e5a0:	0146011a 	.word	0x0146011a
 800e5a4:	01460146 	.word	0x01460146
 800e5a8:	05620562 	.word	0x05620562
 800e5ac:	05620562 	.word	0x05620562
 800e5b0:	056200e1 	.word	0x056200e1
 800e5b4:	045c0562 	.word	0x045c0562
 800e5b8:	05620562 	.word	0x05620562
 800e5bc:	04a60562 	.word	0x04a60562
 800e5c0:	04c70562 	.word	0x04c70562
 800e5c4:	05620562 	.word	0x05620562
 800e5c8:	056204e9 	.word	0x056204e9
 800e5cc:	05620562 	.word	0x05620562
 800e5d0:	05620562 	.word	0x05620562
 800e5d4:	05620562 	.word	0x05620562
 800e5d8:	01460562 	.word	0x01460562
 800e5dc:	01070562 	.word	0x01070562
 800e5e0:	0146011c 	.word	0x0146011c
 800e5e4:	01460146 	.word	0x01460146
 800e5e8:	011c00e4 	.word	0x011c00e4
 800e5ec:	05620101 	.word	0x05620101
 800e5f0:	056200fa 	.word	0x056200fa
 800e5f4:	045e043d 	.word	0x045e043d
 800e5f8:	01010495 	.word	0x01010495
 800e5fc:	04a60562 	.word	0x04a60562
 800e600:	04c9009a 	.word	0x04c9009a
 800e604:	05620562 	.word	0x05620562
 800e608:	05620065 	.word	0x05620065
 800e60c:	009a      	.short	0x009a
 800e60e:	9802      	ldr	r0, [sp, #8]
 800e610:	aa1e      	add	r2, sp, #120	@ 0x78
 800e612:	4651      	mov	r1, sl
 800e614:	f002 fb7a 	bl	8010d0c <__ssprint_r>
 800e618:	2800      	cmp	r0, #0
 800e61a:	f040 813a 	bne.w	800e892 <_svfprintf_r+0x40a>
 800e61e:	ac21      	add	r4, sp, #132	@ 0x84
 800e620:	e780      	b.n	800e524 <_svfprintf_r+0x9c>
 800e622:	4b49      	ldr	r3, [pc, #292]	@ (800e748 <_svfprintf_r+0x2c0>)
 800e624:	9312      	str	r3, [sp, #72]	@ 0x48
 800e626:	f015 0320 	ands.w	r3, r5, #32
 800e62a:	f000 8481 	beq.w	800ef30 <_svfprintf_r+0xaa8>
 800e62e:	3607      	adds	r6, #7
 800e630:	f026 0307 	bic.w	r3, r6, #7
 800e634:	461a      	mov	r2, r3
 800e636:	685f      	ldr	r7, [r3, #4]
 800e638:	f852 6b08 	ldr.w	r6, [r2], #8
 800e63c:	9205      	str	r2, [sp, #20]
 800e63e:	07eb      	lsls	r3, r5, #31
 800e640:	d50a      	bpl.n	800e658 <_svfprintf_r+0x1d0>
 800e642:	ea56 0307 	orrs.w	r3, r6, r7
 800e646:	d007      	beq.n	800e658 <_svfprintf_r+0x1d0>
 800e648:	2330      	movs	r3, #48	@ 0x30
 800e64a:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 800e64e:	9b04      	ldr	r3, [sp, #16]
 800e650:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 800e654:	f045 0502 	orr.w	r5, r5, #2
 800e658:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800e65c:	2302      	movs	r3, #2
 800e65e:	e3e7      	b.n	800ee30 <_svfprintf_r+0x9a8>
 800e660:	9802      	ldr	r0, [sp, #8]
 800e662:	f001 f9ab 	bl	800f9bc <_localeconv_r>
 800e666:	6843      	ldr	r3, [r0, #4]
 800e668:	9310      	str	r3, [sp, #64]	@ 0x40
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7f1 fe88 	bl	8000380 <strlen>
 800e670:	900e      	str	r0, [sp, #56]	@ 0x38
 800e672:	9802      	ldr	r0, [sp, #8]
 800e674:	f001 f9a2 	bl	800f9bc <_localeconv_r>
 800e678:	6883      	ldr	r3, [r0, #8]
 800e67a:	9307      	str	r3, [sp, #28]
 800e67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e67e:	b12b      	cbz	r3, 800e68c <_svfprintf_r+0x204>
 800e680:	9b07      	ldr	r3, [sp, #28]
 800e682:	b11b      	cbz	r3, 800e68c <_svfprintf_r+0x204>
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	b10b      	cbz	r3, 800e68c <_svfprintf_r+0x204>
 800e688:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 800e68c:	9b08      	ldr	r3, [sp, #32]
 800e68e:	e758      	b.n	800e542 <_svfprintf_r+0xba>
 800e690:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 800e694:	2b00      	cmp	r3, #0
 800e696:	d1f9      	bne.n	800e68c <_svfprintf_r+0x204>
 800e698:	2320      	movs	r3, #32
 800e69a:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800e69e:	e7f5      	b.n	800e68c <_svfprintf_r+0x204>
 800e6a0:	f045 0501 	orr.w	r5, r5, #1
 800e6a4:	e7f2      	b.n	800e68c <_svfprintf_r+0x204>
 800e6a6:	f856 3b04 	ldr.w	r3, [r6], #4
 800e6aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	daed      	bge.n	800e68c <_svfprintf_r+0x204>
 800e6b0:	425b      	negs	r3, r3
 800e6b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6b4:	f045 0504 	orr.w	r5, r5, #4
 800e6b8:	e7e8      	b.n	800e68c <_svfprintf_r+0x204>
 800e6ba:	232b      	movs	r3, #43	@ 0x2b
 800e6bc:	e7ed      	b.n	800e69a <_svfprintf_r+0x212>
 800e6be:	9b08      	ldr	r3, [sp, #32]
 800e6c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6c4:	9204      	str	r2, [sp, #16]
 800e6c6:	2a2a      	cmp	r2, #42	@ 0x2a
 800e6c8:	d10f      	bne.n	800e6ea <_svfprintf_r+0x262>
 800e6ca:	f856 2b04 	ldr.w	r2, [r6], #4
 800e6ce:	9308      	str	r3, [sp, #32]
 800e6d0:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800e6d4:	e7da      	b.n	800e68c <_svfprintf_r+0x204>
 800e6d6:	fb01 2808 	mla	r8, r1, r8, r2
 800e6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6de:	9204      	str	r2, [sp, #16]
 800e6e0:	9a04      	ldr	r2, [sp, #16]
 800e6e2:	3a30      	subs	r2, #48	@ 0x30
 800e6e4:	2a09      	cmp	r2, #9
 800e6e6:	d9f6      	bls.n	800e6d6 <_svfprintf_r+0x24e>
 800e6e8:	e72e      	b.n	800e548 <_svfprintf_r+0xc0>
 800e6ea:	f04f 0800 	mov.w	r8, #0
 800e6ee:	210a      	movs	r1, #10
 800e6f0:	e7f6      	b.n	800e6e0 <_svfprintf_r+0x258>
 800e6f2:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 800e6f6:	e7c9      	b.n	800e68c <_svfprintf_r+0x204>
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	9b08      	ldr	r3, [sp, #32]
 800e6fc:	920a      	str	r2, [sp, #40]	@ 0x28
 800e6fe:	210a      	movs	r1, #10
 800e700:	9a04      	ldr	r2, [sp, #16]
 800e702:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e704:	3a30      	subs	r2, #48	@ 0x30
 800e706:	fb01 2200 	mla	r2, r1, r0, r2
 800e70a:	920a      	str	r2, [sp, #40]	@ 0x28
 800e70c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e710:	9204      	str	r2, [sp, #16]
 800e712:	3a30      	subs	r2, #48	@ 0x30
 800e714:	2a09      	cmp	r2, #9
 800e716:	d9f3      	bls.n	800e700 <_svfprintf_r+0x278>
 800e718:	e716      	b.n	800e548 <_svfprintf_r+0xc0>
 800e71a:	f045 0508 	orr.w	r5, r5, #8
 800e71e:	e7b5      	b.n	800e68c <_svfprintf_r+0x204>
 800e720:	9b08      	ldr	r3, [sp, #32]
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	2b68      	cmp	r3, #104	@ 0x68
 800e726:	bf01      	itttt	eq
 800e728:	9b08      	ldreq	r3, [sp, #32]
 800e72a:	3301      	addeq	r3, #1
 800e72c:	9308      	streq	r3, [sp, #32]
 800e72e:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800e732:	bf18      	it	ne
 800e734:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 800e738:	e7a8      	b.n	800e68c <_svfprintf_r+0x204>
 800e73a:	bf00      	nop
 800e73c:	f3af 8000 	nop.w
	...
 800e748:	08013810 	.word	0x08013810
 800e74c:	9b08      	ldr	r3, [sp, #32]
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	2b6c      	cmp	r3, #108	@ 0x6c
 800e752:	d105      	bne.n	800e760 <_svfprintf_r+0x2d8>
 800e754:	9b08      	ldr	r3, [sp, #32]
 800e756:	3301      	adds	r3, #1
 800e758:	9308      	str	r3, [sp, #32]
 800e75a:	f045 0520 	orr.w	r5, r5, #32
 800e75e:	e795      	b.n	800e68c <_svfprintf_r+0x204>
 800e760:	f045 0510 	orr.w	r5, r5, #16
 800e764:	e792      	b.n	800e68c <_svfprintf_r+0x204>
 800e766:	4632      	mov	r2, r6
 800e768:	f852 3b04 	ldr.w	r3, [r2], #4
 800e76c:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 800e770:	2300      	movs	r3, #0
 800e772:	9205      	str	r2, [sp, #20]
 800e774:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800e778:	469b      	mov	fp, r3
 800e77a:	f04f 0801 	mov.w	r8, #1
 800e77e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e780:	461f      	mov	r7, r3
 800e782:	9306      	str	r3, [sp, #24]
 800e784:	461e      	mov	r6, r3
 800e786:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 800e78a:	e1a1      	b.n	800ead0 <_svfprintf_r+0x648>
 800e78c:	f045 0510 	orr.w	r5, r5, #16
 800e790:	06a8      	lsls	r0, r5, #26
 800e792:	d512      	bpl.n	800e7ba <_svfprintf_r+0x332>
 800e794:	3607      	adds	r6, #7
 800e796:	f026 0307 	bic.w	r3, r6, #7
 800e79a:	461a      	mov	r2, r3
 800e79c:	685f      	ldr	r7, [r3, #4]
 800e79e:	f852 6b08 	ldr.w	r6, [r2], #8
 800e7a2:	9205      	str	r2, [sp, #20]
 800e7a4:	2f00      	cmp	r7, #0
 800e7a6:	da06      	bge.n	800e7b6 <_svfprintf_r+0x32e>
 800e7a8:	4276      	negs	r6, r6
 800e7aa:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800e7ae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800e7b2:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e33d      	b.n	800ee36 <_svfprintf_r+0x9ae>
 800e7ba:	4633      	mov	r3, r6
 800e7bc:	06e9      	lsls	r1, r5, #27
 800e7be:	f853 7b04 	ldr.w	r7, [r3], #4
 800e7c2:	9305      	str	r3, [sp, #20]
 800e7c4:	d502      	bpl.n	800e7cc <_svfprintf_r+0x344>
 800e7c6:	463e      	mov	r6, r7
 800e7c8:	17ff      	asrs	r7, r7, #31
 800e7ca:	e7eb      	b.n	800e7a4 <_svfprintf_r+0x31c>
 800e7cc:	066a      	lsls	r2, r5, #25
 800e7ce:	d503      	bpl.n	800e7d8 <_svfprintf_r+0x350>
 800e7d0:	b23e      	sxth	r6, r7
 800e7d2:	f347 37c0 	sbfx	r7, r7, #15, #1
 800e7d6:	e7e5      	b.n	800e7a4 <_svfprintf_r+0x31c>
 800e7d8:	05ab      	lsls	r3, r5, #22
 800e7da:	d5f4      	bpl.n	800e7c6 <_svfprintf_r+0x33e>
 800e7dc:	b27e      	sxtb	r6, r7
 800e7de:	f347 17c0 	sbfx	r7, r7, #7, #1
 800e7e2:	e7df      	b.n	800e7a4 <_svfprintf_r+0x31c>
 800e7e4:	3607      	adds	r6, #7
 800e7e6:	f026 0307 	bic.w	r3, r6, #7
 800e7ea:	ecb3 8b02 	vldmia	r3!, {d8}
 800e7ee:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 800e9b0 <_svfprintf_r+0x528>
 800e7f2:	eeb0 6bc8 	vabs.f64	d6, d8
 800e7f6:	eeb4 6b47 	vcmp.f64	d6, d7
 800e7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fe:	9305      	str	r3, [sp, #20]
 800e800:	dd18      	ble.n	800e834 <_svfprintf_r+0x3ac>
 800e802:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800e806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80a:	d502      	bpl.n	800e812 <_svfprintf_r+0x38a>
 800e80c:	232d      	movs	r3, #45	@ 0x2d
 800e80e:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800e812:	4a69      	ldr	r2, [pc, #420]	@ (800e9b8 <_svfprintf_r+0x530>)
 800e814:	4b69      	ldr	r3, [pc, #420]	@ (800e9bc <_svfprintf_r+0x534>)
 800e816:	9904      	ldr	r1, [sp, #16]
 800e818:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 800e81c:	2947      	cmp	r1, #71	@ 0x47
 800e81e:	bfd4      	ite	le
 800e820:	4691      	movle	r9, r2
 800e822:	4699      	movgt	r9, r3
 800e824:	f04f 0b00 	mov.w	fp, #0
 800e828:	f04f 0803 	mov.w	r8, #3
 800e82c:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e830:	f000 bfa4 	b.w	800f77c <_svfprintf_r+0x12f4>
 800e834:	eeb4 8b48 	vcmp.f64	d8, d8
 800e838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83c:	d709      	bvc.n	800e852 <_svfprintf_r+0x3ca>
 800e83e:	ee18 3a90 	vmov	r3, s17
 800e842:	2b00      	cmp	r3, #0
 800e844:	bfbc      	itt	lt
 800e846:	232d      	movlt	r3, #45	@ 0x2d
 800e848:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 800e84c:	4a5c      	ldr	r2, [pc, #368]	@ (800e9c0 <_svfprintf_r+0x538>)
 800e84e:	4b5d      	ldr	r3, [pc, #372]	@ (800e9c4 <_svfprintf_r+0x53c>)
 800e850:	e7e1      	b.n	800e816 <_svfprintf_r+0x38e>
 800e852:	9b04      	ldr	r3, [sp, #16]
 800e854:	2b61      	cmp	r3, #97	@ 0x61
 800e856:	d027      	beq.n	800e8a8 <_svfprintf_r+0x420>
 800e858:	2b41      	cmp	r3, #65	@ 0x41
 800e85a:	d127      	bne.n	800e8ac <_svfprintf_r+0x424>
 800e85c:	2358      	movs	r3, #88	@ 0x58
 800e85e:	2230      	movs	r2, #48	@ 0x30
 800e860:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 800e864:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 800e868:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 800e86c:	f045 0502 	orr.w	r5, r5, #2
 800e870:	f340 8089 	ble.w	800e986 <_svfprintf_r+0x4fe>
 800e874:	9802      	ldr	r0, [sp, #8]
 800e876:	f108 0101 	add.w	r1, r8, #1
 800e87a:	f7ff fbbd 	bl	800dff8 <_malloc_r>
 800e87e:	4681      	mov	r9, r0
 800e880:	2800      	cmp	r0, #0
 800e882:	f040 8085 	bne.w	800e990 <_svfprintf_r+0x508>
 800e886:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e88a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e88e:	f8aa 300c 	strh.w	r3, [sl, #12]
 800e892:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e896:	065b      	lsls	r3, r3, #25
 800e898:	f53f ae1a 	bmi.w	800e4d0 <_svfprintf_r+0x48>
 800e89c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e89e:	b04b      	add	sp, #300	@ 0x12c
 800e8a0:	ecbd 8b04 	vpop	{d8-d9}
 800e8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a8:	2378      	movs	r3, #120	@ 0x78
 800e8aa:	e7d8      	b.n	800e85e <_svfprintf_r+0x3d6>
 800e8ac:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800e8b0:	d070      	beq.n	800e994 <_svfprintf_r+0x50c>
 800e8b2:	9b04      	ldr	r3, [sp, #16]
 800e8b4:	f023 0320 	bic.w	r3, r3, #32
 800e8b8:	2b47      	cmp	r3, #71	@ 0x47
 800e8ba:	d170      	bne.n	800e99e <_svfprintf_r+0x516>
 800e8bc:	f1b8 0f00 	cmp.w	r8, #0
 800e8c0:	d16d      	bne.n	800e99e <_svfprintf_r+0x516>
 800e8c2:	46c3      	mov	fp, r8
 800e8c4:	f04f 0801 	mov.w	r8, #1
 800e8c8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800e8cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e8ce:	ee18 3a90 	vmov	r3, s17
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	da66      	bge.n	800e9a4 <_svfprintf_r+0x51c>
 800e8d6:	eeb1 9b48 	vneg.f64	d9, d8
 800e8da:	232d      	movs	r3, #45	@ 0x2d
 800e8dc:	930d      	str	r3, [sp, #52]	@ 0x34
 800e8de:	9b04      	ldr	r3, [sp, #16]
 800e8e0:	f023 0720 	bic.w	r7, r3, #32
 800e8e4:	2f41      	cmp	r7, #65	@ 0x41
 800e8e6:	f040 81c6 	bne.w	800ec76 <_svfprintf_r+0x7ee>
 800e8ea:	eeb0 0b49 	vmov.f64	d0, d9
 800e8ee:	a818      	add	r0, sp, #96	@ 0x60
 800e8f0:	f001 f89a 	bl	800fa28 <frexp>
 800e8f4:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 800e8f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e8fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e904:	bf08      	it	eq
 800e906:	2301      	moveq	r3, #1
 800e908:	9a04      	ldr	r2, [sp, #16]
 800e90a:	bf08      	it	eq
 800e90c:	9318      	streq	r3, [sp, #96]	@ 0x60
 800e90e:	492e      	ldr	r1, [pc, #184]	@ (800e9c8 <_svfprintf_r+0x540>)
 800e910:	4b2e      	ldr	r3, [pc, #184]	@ (800e9cc <_svfprintf_r+0x544>)
 800e912:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 800e916:	2a61      	cmp	r2, #97	@ 0x61
 800e918:	bf18      	it	ne
 800e91a:	4619      	movne	r1, r3
 800e91c:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800e920:	464b      	mov	r3, r9
 800e922:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e926:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800e92a:	ee16 0a90 	vmov	r0, s13
 800e92e:	5c0e      	ldrb	r6, [r1, r0]
 800e930:	f803 6b01 	strb.w	r6, [r3], #1
 800e934:	1c56      	adds	r6, r2, #1
 800e936:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e93a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e93e:	d006      	beq.n	800e94e <_svfprintf_r+0x4c6>
 800e940:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e948:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
 800e94c:	d12e      	bne.n	800e9ac <_svfprintf_r+0x524>
 800e94e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e952:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95a:	dc39      	bgt.n	800e9d0 <_svfprintf_r+0x548>
 800e95c:	eeb4 0b47 	vcmp.f64	d0, d7
 800e960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e964:	d101      	bne.n	800e96a <_svfprintf_r+0x4e2>
 800e966:	07c6      	lsls	r6, r0, #31
 800e968:	d432      	bmi.n	800e9d0 <_svfprintf_r+0x548>
 800e96a:	4619      	mov	r1, r3
 800e96c:	189e      	adds	r6, r3, r2
 800e96e:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800e972:	1a70      	subs	r0, r6, r1
 800e974:	2800      	cmp	r0, #0
 800e976:	f280 817b 	bge.w	800ec70 <_svfprintf_r+0x7e8>
 800e97a:	1c51      	adds	r1, r2, #1
 800e97c:	3201      	adds	r2, #1
 800e97e:	bfb8      	it	lt
 800e980:	2100      	movlt	r1, #0
 800e982:	440b      	add	r3, r1
 800e984:	e037      	b.n	800e9f6 <_svfprintf_r+0x56e>
 800e986:	f04f 0b00 	mov.w	fp, #0
 800e98a:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 800e98e:	e79b      	b.n	800e8c8 <_svfprintf_r+0x440>
 800e990:	4683      	mov	fp, r0
 800e992:	e799      	b.n	800e8c8 <_svfprintf_r+0x440>
 800e994:	f04f 0b00 	mov.w	fp, #0
 800e998:	f04f 0806 	mov.w	r8, #6
 800e99c:	e794      	b.n	800e8c8 <_svfprintf_r+0x440>
 800e99e:	f04f 0b00 	mov.w	fp, #0
 800e9a2:	e791      	b.n	800e8c8 <_svfprintf_r+0x440>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	eeb0 9b48 	vmov.f64	d9, d8
 800e9aa:	e797      	b.n	800e8dc <_svfprintf_r+0x454>
 800e9ac:	4632      	mov	r2, r6
 800e9ae:	e7b8      	b.n	800e922 <_svfprintf_r+0x49a>
 800e9b0:	ffffffff 	.word	0xffffffff
 800e9b4:	7fefffff 	.word	0x7fefffff
 800e9b8:	08013800 	.word	0x08013800
 800e9bc:	08013804 	.word	0x08013804
 800e9c0:	08013808 	.word	0x08013808
 800e9c4:	0801380c 	.word	0x0801380c
 800e9c8:	08013810 	.word	0x08013810
 800e9cc:	08013821 	.word	0x08013821
 800e9d0:	7bce      	ldrb	r6, [r1, #15]
 800e9d2:	931c      	str	r3, [sp, #112]	@ 0x70
 800e9d4:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 800e9d8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e9da:	1e42      	subs	r2, r0, #1
 800e9dc:	921c      	str	r2, [sp, #112]	@ 0x70
 800e9de:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 800e9e2:	42b2      	cmp	r2, r6
 800e9e4:	f000 8141 	beq.w	800ec6a <_svfprintf_r+0x7e2>
 800e9e8:	2a39      	cmp	r2, #57	@ 0x39
 800e9ea:	bf16      	itet	ne
 800e9ec:	3201      	addne	r2, #1
 800e9ee:	7a8a      	ldrbeq	r2, [r1, #10]
 800e9f0:	b2d2      	uxtbne	r2, r2
 800e9f2:	f800 2c01 	strb.w	r2, [r0, #-1]
 800e9f6:	eba3 0309 	sub.w	r3, r3, r9
 800e9fa:	2f47      	cmp	r7, #71	@ 0x47
 800e9fc:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800e9fe:	9303      	str	r3, [sp, #12]
 800ea00:	f040 8179 	bne.w	800ecf6 <_svfprintf_r+0x86e>
 800ea04:	1cf1      	adds	r1, r6, #3
 800ea06:	db02      	blt.n	800ea0e <_svfprintf_r+0x586>
 800ea08:	4546      	cmp	r6, r8
 800ea0a:	f340 8196 	ble.w	800ed3a <_svfprintf_r+0x8b2>
 800ea0e:	9b04      	ldr	r3, [sp, #16]
 800ea10:	3b02      	subs	r3, #2
 800ea12:	9304      	str	r3, [sp, #16]
 800ea14:	9904      	ldr	r1, [sp, #16]
 800ea16:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800ea1a:	f021 0120 	bic.w	r1, r1, #32
 800ea1e:	2941      	cmp	r1, #65	@ 0x41
 800ea20:	bf08      	it	eq
 800ea22:	320f      	addeq	r2, #15
 800ea24:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 800ea28:	bf06      	itte	eq
 800ea2a:	b2d2      	uxtbeq	r2, r2
 800ea2c:	2101      	moveq	r1, #1
 800ea2e:	2100      	movne	r1, #0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	9318      	str	r3, [sp, #96]	@ 0x60
 800ea34:	bfb8      	it	lt
 800ea36:	f1c6 0301 	rsblt	r3, r6, #1
 800ea3a:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 800ea3e:	bfb4      	ite	lt
 800ea40:	222d      	movlt	r2, #45	@ 0x2d
 800ea42:	222b      	movge	r2, #43	@ 0x2b
 800ea44:	2b09      	cmp	r3, #9
 800ea46:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 800ea4a:	f340 8169 	ble.w	800ed20 <_svfprintf_r+0x898>
 800ea4e:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 800ea52:	270a      	movs	r7, #10
 800ea54:	4602      	mov	r2, r0
 800ea56:	fbb3 f6f7 	udiv	r6, r3, r7
 800ea5a:	fb07 3116 	mls	r1, r7, r6, r3
 800ea5e:	3130      	adds	r1, #48	@ 0x30
 800ea60:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ea64:	4619      	mov	r1, r3
 800ea66:	2963      	cmp	r1, #99	@ 0x63
 800ea68:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 800ea6c:	4633      	mov	r3, r6
 800ea6e:	dcf1      	bgt.n	800ea54 <_svfprintf_r+0x5cc>
 800ea70:	3330      	adds	r3, #48	@ 0x30
 800ea72:	1e91      	subs	r1, r2, #2
 800ea74:	f800 3c01 	strb.w	r3, [r0, #-1]
 800ea78:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 800ea82:	4283      	cmp	r3, r0
 800ea84:	f0c0 8147 	bcc.w	800ed16 <_svfprintf_r+0x88e>
 800ea88:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 800ea8c:	1a9b      	subs	r3, r3, r2
 800ea8e:	4281      	cmp	r1, r0
 800ea90:	bf88      	it	hi
 800ea92:	2300      	movhi	r3, #0
 800ea94:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 800ea98:	441a      	add	r2, r3
 800ea9a:	ab1a      	add	r3, sp, #104	@ 0x68
 800ea9c:	1ad3      	subs	r3, r2, r3
 800ea9e:	9a03      	ldr	r2, [sp, #12]
 800eaa0:	9311      	str	r3, [sp, #68]	@ 0x44
 800eaa2:	2a01      	cmp	r2, #1
 800eaa4:	eb03 0802 	add.w	r8, r3, r2
 800eaa8:	dc01      	bgt.n	800eaae <_svfprintf_r+0x626>
 800eaaa:	07ea      	lsls	r2, r5, #31
 800eaac:	d501      	bpl.n	800eab2 <_svfprintf_r+0x62a>
 800eaae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eab0:	4498      	add	r8, r3
 800eab2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800eab6:	2700      	movs	r7, #0
 800eab8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 800eabc:	930c      	str	r3, [sp, #48]	@ 0x30
 800eabe:	9706      	str	r7, [sp, #24]
 800eac0:	463e      	mov	r6, r7
 800eac2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f040 8180 	bne.w	800edca <_svfprintf_r+0x942>
 800eaca:	2300      	movs	r3, #0
 800eacc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800eace:	930c      	str	r3, [sp, #48]	@ 0x30
 800ead0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ead2:	4543      	cmp	r3, r8
 800ead4:	bfb8      	it	lt
 800ead6:	4643      	movlt	r3, r8
 800ead8:	930d      	str	r3, [sp, #52]	@ 0x34
 800eada:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 800eade:	b113      	cbz	r3, 800eae6 <_svfprintf_r+0x65e>
 800eae0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eae2:	3301      	adds	r3, #1
 800eae4:	930d      	str	r3, [sp, #52]	@ 0x34
 800eae6:	f015 0302 	ands.w	r3, r5, #2
 800eaea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eaec:	bf1e      	ittt	ne
 800eaee:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 800eaf0:	3302      	addne	r3, #2
 800eaf2:	930d      	strne	r3, [sp, #52]	@ 0x34
 800eaf4:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 800eaf8:	9314      	str	r3, [sp, #80]	@ 0x50
 800eafa:	d120      	bne.n	800eb3e <_svfprintf_r+0x6b6>
 800eafc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eafe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb00:	1a9b      	subs	r3, r3, r2
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	dd1b      	ble.n	800eb3e <_svfprintf_r+0x6b6>
 800eb06:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 800eb0a:	49a5      	ldr	r1, [pc, #660]	@ (800eda0 <_svfprintf_r+0x918>)
 800eb0c:	6021      	str	r1, [r4, #0]
 800eb0e:	2b10      	cmp	r3, #16
 800eb10:	f102 0201 	add.w	r2, r2, #1
 800eb14:	f104 0008 	add.w	r0, r4, #8
 800eb18:	f300 828c 	bgt.w	800f034 <_svfprintf_r+0xbac>
 800eb1c:	eb0c 0103 	add.w	r1, ip, r3
 800eb20:	2a07      	cmp	r2, #7
 800eb22:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800eb26:	6063      	str	r3, [r4, #4]
 800eb28:	f340 8299 	ble.w	800f05e <_svfprintf_r+0xbd6>
 800eb2c:	9802      	ldr	r0, [sp, #8]
 800eb2e:	aa1e      	add	r2, sp, #120	@ 0x78
 800eb30:	4651      	mov	r1, sl
 800eb32:	f002 f8eb 	bl	8010d0c <__ssprint_r>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	f040 85c7 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800eb3c:	ac21      	add	r4, sp, #132	@ 0x84
 800eb3e:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 800eb42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eb44:	b16a      	cbz	r2, 800eb62 <_svfprintf_r+0x6da>
 800eb46:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 800eb4a:	6022      	str	r2, [r4, #0]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	4413      	add	r3, r2
 800eb50:	9320      	str	r3, [sp, #128]	@ 0x80
 800eb52:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800eb54:	6062      	str	r2, [r4, #4]
 800eb56:	4413      	add	r3, r2
 800eb58:	2b07      	cmp	r3, #7
 800eb5a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800eb5c:	f300 8281 	bgt.w	800f062 <_svfprintf_r+0xbda>
 800eb60:	3408      	adds	r4, #8
 800eb62:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eb64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eb66:	b162      	cbz	r2, 800eb82 <_svfprintf_r+0x6fa>
 800eb68:	aa17      	add	r2, sp, #92	@ 0x5c
 800eb6a:	6022      	str	r2, [r4, #0]
 800eb6c:	2202      	movs	r2, #2
 800eb6e:	4413      	add	r3, r2
 800eb70:	9320      	str	r3, [sp, #128]	@ 0x80
 800eb72:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800eb74:	6062      	str	r2, [r4, #4]
 800eb76:	3301      	adds	r3, #1
 800eb78:	2b07      	cmp	r3, #7
 800eb7a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800eb7c:	f300 827b 	bgt.w	800f076 <_svfprintf_r+0xbee>
 800eb80:	3408      	adds	r4, #8
 800eb82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eb84:	2b80      	cmp	r3, #128	@ 0x80
 800eb86:	d120      	bne.n	800ebca <_svfprintf_r+0x742>
 800eb88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb8c:	1a9b      	subs	r3, r3, r2
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	dd1b      	ble.n	800ebca <_svfprintf_r+0x742>
 800eb92:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 800eb96:	4983      	ldr	r1, [pc, #524]	@ (800eda4 <_svfprintf_r+0x91c>)
 800eb98:	6021      	str	r1, [r4, #0]
 800eb9a:	2b10      	cmp	r3, #16
 800eb9c:	f102 0201 	add.w	r2, r2, #1
 800eba0:	f104 0008 	add.w	r0, r4, #8
 800eba4:	f300 8271 	bgt.w	800f08a <_svfprintf_r+0xc02>
 800eba8:	eb0c 0103 	add.w	r1, ip, r3
 800ebac:	2a07      	cmp	r2, #7
 800ebae:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800ebb2:	6063      	str	r3, [r4, #4]
 800ebb4:	f340 827e 	ble.w	800f0b4 <_svfprintf_r+0xc2c>
 800ebb8:	9802      	ldr	r0, [sp, #8]
 800ebba:	aa1e      	add	r2, sp, #120	@ 0x78
 800ebbc:	4651      	mov	r1, sl
 800ebbe:	f002 f8a5 	bl	8010d0c <__ssprint_r>
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	f040 8581 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800ebc8:	ac21      	add	r4, sp, #132	@ 0x84
 800ebca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ebcc:	eba3 0308 	sub.w	r3, r3, r8
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	930c      	str	r3, [sp, #48]	@ 0x30
 800ebd4:	dd1c      	ble.n	800ec10 <_svfprintf_r+0x788>
 800ebd6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ebd8:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 800ebdc:	2810      	cmp	r0, #16
 800ebde:	4871      	ldr	r0, [pc, #452]	@ (800eda4 <_svfprintf_r+0x91c>)
 800ebe0:	6020      	str	r0, [r4, #0]
 800ebe2:	f102 0201 	add.w	r2, r2, #1
 800ebe6:	f104 0108 	add.w	r1, r4, #8
 800ebea:	f300 8265 	bgt.w	800f0b8 <_svfprintf_r+0xc30>
 800ebee:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ebf0:	6060      	str	r0, [r4, #4]
 800ebf2:	4403      	add	r3, r0
 800ebf4:	2a07      	cmp	r2, #7
 800ebf6:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800ebfa:	f340 8272 	ble.w	800f0e2 <_svfprintf_r+0xc5a>
 800ebfe:	9802      	ldr	r0, [sp, #8]
 800ec00:	aa1e      	add	r2, sp, #120	@ 0x78
 800ec02:	4651      	mov	r1, sl
 800ec04:	f002 f882 	bl	8010d0c <__ssprint_r>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	f040 855e 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800ec0e:	ac21      	add	r4, sp, #132	@ 0x84
 800ec10:	05e9      	lsls	r1, r5, #23
 800ec12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ec14:	f100 826c 	bmi.w	800f0f0 <_svfprintf_r+0xc68>
 800ec18:	4443      	add	r3, r8
 800ec1a:	9320      	str	r3, [sp, #128]	@ 0x80
 800ec1c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800ec1e:	3301      	adds	r3, #1
 800ec20:	2b07      	cmp	r3, #7
 800ec22:	e9c4 9800 	strd	r9, r8, [r4]
 800ec26:	931f      	str	r3, [sp, #124]	@ 0x7c
 800ec28:	f300 82a4 	bgt.w	800f174 <_svfprintf_r+0xcec>
 800ec2c:	3408      	adds	r4, #8
 800ec2e:	076a      	lsls	r2, r5, #29
 800ec30:	f100 852d 	bmi.w	800f68e <_svfprintf_r+0x1206>
 800ec34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800ec38:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ec3a:	428a      	cmp	r2, r1
 800ec3c:	bfac      	ite	ge
 800ec3e:	189b      	addge	r3, r3, r2
 800ec40:	185b      	addlt	r3, r3, r1
 800ec42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ec46:	b13b      	cbz	r3, 800ec58 <_svfprintf_r+0x7d0>
 800ec48:	9802      	ldr	r0, [sp, #8]
 800ec4a:	aa1e      	add	r2, sp, #120	@ 0x78
 800ec4c:	4651      	mov	r1, sl
 800ec4e:	f002 f85d 	bl	8010d0c <__ssprint_r>
 800ec52:	2800      	cmp	r0, #0
 800ec54:	f040 8539 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800ec5c:	f1bb 0f00 	cmp.w	fp, #0
 800ec60:	f040 854f 	bne.w	800f702 <_svfprintf_r+0x127a>
 800ec64:	9e05      	ldr	r6, [sp, #20]
 800ec66:	ac21      	add	r4, sp, #132	@ 0x84
 800ec68:	e0bc      	b.n	800ede4 <_svfprintf_r+0x95c>
 800ec6a:	f800 cc01 	strb.w	ip, [r0, #-1]
 800ec6e:	e6b3      	b.n	800e9d8 <_svfprintf_r+0x550>
 800ec70:	f801 cb01 	strb.w	ip, [r1], #1
 800ec74:	e67d      	b.n	800e972 <_svfprintf_r+0x4ea>
 800ec76:	2f46      	cmp	r7, #70	@ 0x46
 800ec78:	d005      	beq.n	800ec86 <_svfprintf_r+0x7fe>
 800ec7a:	2f45      	cmp	r7, #69	@ 0x45
 800ec7c:	d117      	bne.n	800ecae <_svfprintf_r+0x826>
 800ec7e:	f108 0601 	add.w	r6, r8, #1
 800ec82:	2102      	movs	r1, #2
 800ec84:	e001      	b.n	800ec8a <_svfprintf_r+0x802>
 800ec86:	4646      	mov	r6, r8
 800ec88:	2103      	movs	r1, #3
 800ec8a:	ab1c      	add	r3, sp, #112	@ 0x70
 800ec8c:	9301      	str	r3, [sp, #4]
 800ec8e:	ab19      	add	r3, sp, #100	@ 0x64
 800ec90:	9300      	str	r3, [sp, #0]
 800ec92:	9802      	ldr	r0, [sp, #8]
 800ec94:	eeb0 0b49 	vmov.f64	d0, d9
 800ec98:	ab18      	add	r3, sp, #96	@ 0x60
 800ec9a:	4632      	mov	r2, r6
 800ec9c:	f000 ffc4 	bl	800fc28 <_dtoa_r>
 800eca0:	2f47      	cmp	r7, #71	@ 0x47
 800eca2:	4681      	mov	r9, r0
 800eca4:	d115      	bne.n	800ecd2 <_svfprintf_r+0x84a>
 800eca6:	07e8      	lsls	r0, r5, #31
 800eca8:	d403      	bmi.n	800ecb2 <_svfprintf_r+0x82a>
 800ecaa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800ecac:	e6a3      	b.n	800e9f6 <_svfprintf_r+0x56e>
 800ecae:	4646      	mov	r6, r8
 800ecb0:	e7e7      	b.n	800ec82 <_svfprintf_r+0x7fa>
 800ecb2:	eb09 0306 	add.w	r3, r9, r6
 800ecb6:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800ecba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecbe:	bf08      	it	eq
 800ecc0:	931c      	streq	r3, [sp, #112]	@ 0x70
 800ecc2:	2130      	movs	r1, #48	@ 0x30
 800ecc4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d9ef      	bls.n	800ecaa <_svfprintf_r+0x822>
 800ecca:	1c50      	adds	r0, r2, #1
 800eccc:	901c      	str	r0, [sp, #112]	@ 0x70
 800ecce:	7011      	strb	r1, [r2, #0]
 800ecd0:	e7f8      	b.n	800ecc4 <_svfprintf_r+0x83c>
 800ecd2:	2f46      	cmp	r7, #70	@ 0x46
 800ecd4:	eb00 0306 	add.w	r3, r0, r6
 800ecd8:	d1ed      	bne.n	800ecb6 <_svfprintf_r+0x82e>
 800ecda:	7802      	ldrb	r2, [r0, #0]
 800ecdc:	2a30      	cmp	r2, #48	@ 0x30
 800ecde:	d107      	bne.n	800ecf0 <_svfprintf_r+0x868>
 800ece0:	eeb5 9b40 	vcmp.f64	d9, #0.0
 800ece4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece8:	bf1c      	itt	ne
 800ecea:	f1c6 0601 	rsbne	r6, r6, #1
 800ecee:	9618      	strne	r6, [sp, #96]	@ 0x60
 800ecf0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ecf2:	4413      	add	r3, r2
 800ecf4:	e7df      	b.n	800ecb6 <_svfprintf_r+0x82e>
 800ecf6:	2f46      	cmp	r7, #70	@ 0x46
 800ecf8:	f47f ae8c 	bne.w	800ea14 <_svfprintf_r+0x58c>
 800ecfc:	f005 0301 	and.w	r3, r5, #1
 800ed00:	2e00      	cmp	r6, #0
 800ed02:	ea43 0308 	orr.w	r3, r3, r8
 800ed06:	dd25      	ble.n	800ed54 <_svfprintf_r+0x8cc>
 800ed08:	b37b      	cbz	r3, 800ed6a <_svfprintf_r+0x8e2>
 800ed0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed0c:	18f3      	adds	r3, r6, r3
 800ed0e:	4498      	add	r8, r3
 800ed10:	2366      	movs	r3, #102	@ 0x66
 800ed12:	9304      	str	r3, [sp, #16]
 800ed14:	e02f      	b.n	800ed76 <_svfprintf_r+0x8ee>
 800ed16:	f813 7b01 	ldrb.w	r7, [r3], #1
 800ed1a:	f806 7f01 	strb.w	r7, [r6, #1]!
 800ed1e:	e6b0      	b.n	800ea82 <_svfprintf_r+0x5fa>
 800ed20:	b941      	cbnz	r1, 800ed34 <_svfprintf_r+0x8ac>
 800ed22:	2230      	movs	r2, #48	@ 0x30
 800ed24:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 800ed28:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 800ed2c:	3330      	adds	r3, #48	@ 0x30
 800ed2e:	f802 3b01 	strb.w	r3, [r2], #1
 800ed32:	e6b2      	b.n	800ea9a <_svfprintf_r+0x612>
 800ed34:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 800ed38:	e7f8      	b.n	800ed2c <_svfprintf_r+0x8a4>
 800ed3a:	9b03      	ldr	r3, [sp, #12]
 800ed3c:	429e      	cmp	r6, r3
 800ed3e:	da0d      	bge.n	800ed5c <_svfprintf_r+0x8d4>
 800ed40:	9b03      	ldr	r3, [sp, #12]
 800ed42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed44:	2e00      	cmp	r6, #0
 800ed46:	eb03 0802 	add.w	r8, r3, r2
 800ed4a:	dc0c      	bgt.n	800ed66 <_svfprintf_r+0x8de>
 800ed4c:	f1c6 0301 	rsb	r3, r6, #1
 800ed50:	4498      	add	r8, r3
 800ed52:	e008      	b.n	800ed66 <_svfprintf_r+0x8de>
 800ed54:	b15b      	cbz	r3, 800ed6e <_svfprintf_r+0x8e6>
 800ed56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed58:	3301      	adds	r3, #1
 800ed5a:	e7d8      	b.n	800ed0e <_svfprintf_r+0x886>
 800ed5c:	07eb      	lsls	r3, r5, #31
 800ed5e:	d51d      	bpl.n	800ed9c <_svfprintf_r+0x914>
 800ed60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed62:	eb06 0803 	add.w	r8, r6, r3
 800ed66:	2367      	movs	r3, #103	@ 0x67
 800ed68:	e7d3      	b.n	800ed12 <_svfprintf_r+0x88a>
 800ed6a:	46b0      	mov	r8, r6
 800ed6c:	e7d0      	b.n	800ed10 <_svfprintf_r+0x888>
 800ed6e:	2366      	movs	r3, #102	@ 0x66
 800ed70:	9304      	str	r3, [sp, #16]
 800ed72:	f04f 0801 	mov.w	r8, #1
 800ed76:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800ed7a:	9306      	str	r3, [sp, #24]
 800ed7c:	d023      	beq.n	800edc6 <_svfprintf_r+0x93e>
 800ed7e:	2700      	movs	r7, #0
 800ed80:	2e00      	cmp	r6, #0
 800ed82:	9706      	str	r7, [sp, #24]
 800ed84:	f77f ae9d 	ble.w	800eac2 <_svfprintf_r+0x63a>
 800ed88:	9b07      	ldr	r3, [sp, #28]
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	2bff      	cmp	r3, #255	@ 0xff
 800ed8e:	d10b      	bne.n	800eda8 <_svfprintf_r+0x920>
 800ed90:	9b06      	ldr	r3, [sp, #24]
 800ed92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed94:	443b      	add	r3, r7
 800ed96:	fb02 8803 	mla	r8, r2, r3, r8
 800ed9a:	e692      	b.n	800eac2 <_svfprintf_r+0x63a>
 800ed9c:	46b0      	mov	r8, r6
 800ed9e:	e7e2      	b.n	800ed66 <_svfprintf_r+0x8de>
 800eda0:	08013844 	.word	0x08013844
 800eda4:	08013834 	.word	0x08013834
 800eda8:	42b3      	cmp	r3, r6
 800edaa:	daf1      	bge.n	800ed90 <_svfprintf_r+0x908>
 800edac:	1af6      	subs	r6, r6, r3
 800edae:	9b07      	ldr	r3, [sp, #28]
 800edb0:	785b      	ldrb	r3, [r3, #1]
 800edb2:	b133      	cbz	r3, 800edc2 <_svfprintf_r+0x93a>
 800edb4:	9b06      	ldr	r3, [sp, #24]
 800edb6:	3301      	adds	r3, #1
 800edb8:	9306      	str	r3, [sp, #24]
 800edba:	9b07      	ldr	r3, [sp, #28]
 800edbc:	3301      	adds	r3, #1
 800edbe:	9307      	str	r3, [sp, #28]
 800edc0:	e7e2      	b.n	800ed88 <_svfprintf_r+0x900>
 800edc2:	3701      	adds	r7, #1
 800edc4:	e7e0      	b.n	800ed88 <_svfprintf_r+0x900>
 800edc6:	9f06      	ldr	r7, [sp, #24]
 800edc8:	e67b      	b.n	800eac2 <_svfprintf_r+0x63a>
 800edca:	232d      	movs	r3, #45	@ 0x2d
 800edcc:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800edd0:	e67b      	b.n	800eaca <_svfprintf_r+0x642>
 800edd2:	06af      	lsls	r7, r5, #26
 800edd4:	d50a      	bpl.n	800edec <_svfprintf_r+0x964>
 800edd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800edd8:	6833      	ldr	r3, [r6, #0]
 800edda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eddc:	17d2      	asrs	r2, r2, #31
 800edde:	e9c3 1200 	strd	r1, r2, [r3]
 800ede2:	3604      	adds	r6, #4
 800ede4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ede8:	f7ff bb87 	b.w	800e4fa <_svfprintf_r+0x72>
 800edec:	06e8      	lsls	r0, r5, #27
 800edee:	d503      	bpl.n	800edf8 <_svfprintf_r+0x970>
 800edf0:	6833      	ldr	r3, [r6, #0]
 800edf2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800edf4:	601a      	str	r2, [r3, #0]
 800edf6:	e7f4      	b.n	800ede2 <_svfprintf_r+0x95a>
 800edf8:	0669      	lsls	r1, r5, #25
 800edfa:	d503      	bpl.n	800ee04 <_svfprintf_r+0x97c>
 800edfc:	6833      	ldr	r3, [r6, #0]
 800edfe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ee00:	801a      	strh	r2, [r3, #0]
 800ee02:	e7ee      	b.n	800ede2 <_svfprintf_r+0x95a>
 800ee04:	05aa      	lsls	r2, r5, #22
 800ee06:	d5f3      	bpl.n	800edf0 <_svfprintf_r+0x968>
 800ee08:	6833      	ldr	r3, [r6, #0]
 800ee0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ee0c:	701a      	strb	r2, [r3, #0]
 800ee0e:	e7e8      	b.n	800ede2 <_svfprintf_r+0x95a>
 800ee10:	f045 0510 	orr.w	r5, r5, #16
 800ee14:	f015 0320 	ands.w	r3, r5, #32
 800ee18:	d020      	beq.n	800ee5c <_svfprintf_r+0x9d4>
 800ee1a:	3607      	adds	r6, #7
 800ee1c:	f026 0307 	bic.w	r3, r6, #7
 800ee20:	461a      	mov	r2, r3
 800ee22:	685f      	ldr	r7, [r3, #4]
 800ee24:	f852 6b08 	ldr.w	r6, [r2], #8
 800ee28:	9205      	str	r2, [sp, #20]
 800ee2a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800ee2e:	2300      	movs	r3, #0
 800ee30:	2200      	movs	r2, #0
 800ee32:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 800ee36:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800ee3a:	f000 8473 	beq.w	800f724 <_svfprintf_r+0x129c>
 800ee3e:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800ee42:	9206      	str	r2, [sp, #24]
 800ee44:	ea56 0207 	orrs.w	r2, r6, r7
 800ee48:	f040 8471 	bne.w	800f72e <_svfprintf_r+0x12a6>
 800ee4c:	f1b8 0f00 	cmp.w	r8, #0
 800ee50:	f000 80dc 	beq.w	800f00c <_svfprintf_r+0xb84>
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	f040 846d 	bne.w	800f734 <_svfprintf_r+0x12ac>
 800ee5a:	e083      	b.n	800ef64 <_svfprintf_r+0xadc>
 800ee5c:	4632      	mov	r2, r6
 800ee5e:	f015 0710 	ands.w	r7, r5, #16
 800ee62:	f852 6b04 	ldr.w	r6, [r2], #4
 800ee66:	9205      	str	r2, [sp, #20]
 800ee68:	d001      	beq.n	800ee6e <_svfprintf_r+0x9e6>
 800ee6a:	461f      	mov	r7, r3
 800ee6c:	e7dd      	b.n	800ee2a <_svfprintf_r+0x9a2>
 800ee6e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800ee72:	d001      	beq.n	800ee78 <_svfprintf_r+0x9f0>
 800ee74:	b2b6      	uxth	r6, r6
 800ee76:	e7d8      	b.n	800ee2a <_svfprintf_r+0x9a2>
 800ee78:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800ee7c:	d0d5      	beq.n	800ee2a <_svfprintf_r+0x9a2>
 800ee7e:	b2f6      	uxtb	r6, r6
 800ee80:	e7f3      	b.n	800ee6a <_svfprintf_r+0x9e2>
 800ee82:	4633      	mov	r3, r6
 800ee84:	2278      	movs	r2, #120	@ 0x78
 800ee86:	f853 6b04 	ldr.w	r6, [r3], #4
 800ee8a:	9305      	str	r3, [sp, #20]
 800ee8c:	f647 0330 	movw	r3, #30768	@ 0x7830
 800ee90:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 800ee94:	4b94      	ldr	r3, [pc, #592]	@ (800f0e8 <_svfprintf_r+0xc60>)
 800ee96:	9312      	str	r3, [sp, #72]	@ 0x48
 800ee98:	2700      	movs	r7, #0
 800ee9a:	f045 0502 	orr.w	r5, r5, #2
 800ee9e:	2302      	movs	r3, #2
 800eea0:	9204      	str	r2, [sp, #16]
 800eea2:	e7c5      	b.n	800ee30 <_svfprintf_r+0x9a8>
 800eea4:	4633      	mov	r3, r6
 800eea6:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 800eeaa:	f853 9b04 	ldr.w	r9, [r3], #4
 800eeae:	9305      	str	r3, [sp, #20]
 800eeb0:	f04f 0600 	mov.w	r6, #0
 800eeb4:	f88d 605b 	strb.w	r6, [sp, #91]	@ 0x5b
 800eeb8:	d00f      	beq.n	800eeda <_svfprintf_r+0xa52>
 800eeba:	4642      	mov	r2, r8
 800eebc:	4631      	mov	r1, r6
 800eebe:	4648      	mov	r0, r9
 800eec0:	f7f1 fa0e 	bl	80002e0 <memchr>
 800eec4:	4683      	mov	fp, r0
 800eec6:	2800      	cmp	r0, #0
 800eec8:	f43f acb0 	beq.w	800e82c <_svfprintf_r+0x3a4>
 800eecc:	eba0 0809 	sub.w	r8, r0, r9
 800eed0:	46b3      	mov	fp, r6
 800eed2:	960c      	str	r6, [sp, #48]	@ 0x30
 800eed4:	4637      	mov	r7, r6
 800eed6:	9606      	str	r6, [sp, #24]
 800eed8:	e5fa      	b.n	800ead0 <_svfprintf_r+0x648>
 800eeda:	4648      	mov	r0, r9
 800eedc:	f7f1 fa50 	bl	8000380 <strlen>
 800eee0:	46b3      	mov	fp, r6
 800eee2:	4680      	mov	r8, r0
 800eee4:	e4a2      	b.n	800e82c <_svfprintf_r+0x3a4>
 800eee6:	f045 0510 	orr.w	r5, r5, #16
 800eeea:	f015 0320 	ands.w	r3, r5, #32
 800eeee:	d009      	beq.n	800ef04 <_svfprintf_r+0xa7c>
 800eef0:	3607      	adds	r6, #7
 800eef2:	f026 0307 	bic.w	r3, r6, #7
 800eef6:	461a      	mov	r2, r3
 800eef8:	685f      	ldr	r7, [r3, #4]
 800eefa:	f852 6b08 	ldr.w	r6, [r2], #8
 800eefe:	9205      	str	r2, [sp, #20]
 800ef00:	2301      	movs	r3, #1
 800ef02:	e795      	b.n	800ee30 <_svfprintf_r+0x9a8>
 800ef04:	4632      	mov	r2, r6
 800ef06:	f015 0710 	ands.w	r7, r5, #16
 800ef0a:	f852 6b04 	ldr.w	r6, [r2], #4
 800ef0e:	9205      	str	r2, [sp, #20]
 800ef10:	d001      	beq.n	800ef16 <_svfprintf_r+0xa8e>
 800ef12:	461f      	mov	r7, r3
 800ef14:	e7f4      	b.n	800ef00 <_svfprintf_r+0xa78>
 800ef16:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800ef1a:	d001      	beq.n	800ef20 <_svfprintf_r+0xa98>
 800ef1c:	b2b6      	uxth	r6, r6
 800ef1e:	e7ef      	b.n	800ef00 <_svfprintf_r+0xa78>
 800ef20:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800ef24:	d0ec      	beq.n	800ef00 <_svfprintf_r+0xa78>
 800ef26:	b2f6      	uxtb	r6, r6
 800ef28:	e7f3      	b.n	800ef12 <_svfprintf_r+0xa8a>
 800ef2a:	4b70      	ldr	r3, [pc, #448]	@ (800f0ec <_svfprintf_r+0xc64>)
 800ef2c:	f7ff bb7a 	b.w	800e624 <_svfprintf_r+0x19c>
 800ef30:	4632      	mov	r2, r6
 800ef32:	f015 0710 	ands.w	r7, r5, #16
 800ef36:	f852 6b04 	ldr.w	r6, [r2], #4
 800ef3a:	9205      	str	r2, [sp, #20]
 800ef3c:	d002      	beq.n	800ef44 <_svfprintf_r+0xabc>
 800ef3e:	461f      	mov	r7, r3
 800ef40:	f7ff bb7d 	b.w	800e63e <_svfprintf_r+0x1b6>
 800ef44:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800ef48:	d002      	beq.n	800ef50 <_svfprintf_r+0xac8>
 800ef4a:	b2b6      	uxth	r6, r6
 800ef4c:	f7ff bb77 	b.w	800e63e <_svfprintf_r+0x1b6>
 800ef50:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800ef54:	f43f ab73 	beq.w	800e63e <_svfprintf_r+0x1b6>
 800ef58:	b2f6      	uxtb	r6, r6
 800ef5a:	e7f0      	b.n	800ef3e <_svfprintf_r+0xab6>
 800ef5c:	2e0a      	cmp	r6, #10
 800ef5e:	f177 0300 	sbcs.w	r3, r7, #0
 800ef62:	d206      	bcs.n	800ef72 <_svfprintf_r+0xaea>
 800ef64:	3630      	adds	r6, #48	@ 0x30
 800ef66:	b2f6      	uxtb	r6, r6
 800ef68:	f88d 6127 	strb.w	r6, [sp, #295]	@ 0x127
 800ef6c:	f20d 1927 	addw	r9, sp, #295	@ 0x127
 800ef70:	e3fc      	b.n	800f76c <_svfprintf_r+0x12e4>
 800ef72:	2300      	movs	r3, #0
 800ef74:	9303      	str	r3, [sp, #12]
 800ef76:	9b06      	ldr	r3, [sp, #24]
 800ef78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ef7c:	ad4a      	add	r5, sp, #296	@ 0x128
 800ef7e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ef80:	220a      	movs	r2, #10
 800ef82:	2300      	movs	r3, #0
 800ef84:	4630      	mov	r0, r6
 800ef86:	4639      	mov	r1, r7
 800ef88:	f7f1 fa02 	bl	8000390 <__aeabi_uldivmod>
 800ef8c:	3230      	adds	r2, #48	@ 0x30
 800ef8e:	f805 2c01 	strb.w	r2, [r5, #-1]
 800ef92:	9a03      	ldr	r2, [sp, #12]
 800ef94:	3201      	adds	r2, #1
 800ef96:	9203      	str	r2, [sp, #12]
 800ef98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	468b      	mov	fp, r1
 800ef9e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800efa2:	b1e2      	cbz	r2, 800efde <_svfprintf_r+0xb56>
 800efa4:	9a07      	ldr	r2, [sp, #28]
 800efa6:	9903      	ldr	r1, [sp, #12]
 800efa8:	7812      	ldrb	r2, [r2, #0]
 800efaa:	4291      	cmp	r1, r2
 800efac:	d117      	bne.n	800efde <_svfprintf_r+0xb56>
 800efae:	29ff      	cmp	r1, #255	@ 0xff
 800efb0:	d015      	beq.n	800efde <_svfprintf_r+0xb56>
 800efb2:	2e0a      	cmp	r6, #10
 800efb4:	f177 0200 	sbcs.w	r2, r7, #0
 800efb8:	d311      	bcc.n	800efde <_svfprintf_r+0xb56>
 800efba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efbc:	9003      	str	r0, [sp, #12]
 800efbe:	eba9 0903 	sub.w	r9, r9, r3
 800efc2:	461a      	mov	r2, r3
 800efc4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800efc6:	4648      	mov	r0, r9
 800efc8:	f000 fce5 	bl	800f996 <strncpy>
 800efcc:	9b07      	ldr	r3, [sp, #28]
 800efce:	785a      	ldrb	r2, [r3, #1]
 800efd0:	9b03      	ldr	r3, [sp, #12]
 800efd2:	b11a      	cbz	r2, 800efdc <_svfprintf_r+0xb54>
 800efd4:	9a07      	ldr	r2, [sp, #28]
 800efd6:	3201      	adds	r2, #1
 800efd8:	9207      	str	r2, [sp, #28]
 800efda:	2200      	movs	r2, #0
 800efdc:	9203      	str	r2, [sp, #12]
 800efde:	2e0a      	cmp	r6, #10
 800efe0:	f177 0700 	sbcs.w	r7, r7, #0
 800efe4:	f0c0 83c2 	bcc.w	800f76c <_svfprintf_r+0x12e4>
 800efe8:	461e      	mov	r6, r3
 800efea:	465f      	mov	r7, fp
 800efec:	464d      	mov	r5, r9
 800efee:	e7c7      	b.n	800ef80 <_svfprintf_r+0xaf8>
 800eff0:	f006 030f 	and.w	r3, r6, #15
 800eff4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800eff6:	0936      	lsrs	r6, r6, #4
 800eff8:	5cd3      	ldrb	r3, [r2, r3]
 800effa:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800effe:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800f002:	093f      	lsrs	r7, r7, #4
 800f004:	ea56 0307 	orrs.w	r3, r6, r7
 800f008:	d1f2      	bne.n	800eff0 <_svfprintf_r+0xb68>
 800f00a:	e3af      	b.n	800f76c <_svfprintf_r+0x12e4>
 800f00c:	b91b      	cbnz	r3, 800f016 <_svfprintf_r+0xb8e>
 800f00e:	07e8      	lsls	r0, r5, #31
 800f010:	d501      	bpl.n	800f016 <_svfprintf_r+0xb8e>
 800f012:	2630      	movs	r6, #48	@ 0x30
 800f014:	e7a8      	b.n	800ef68 <_svfprintf_r+0xae0>
 800f016:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 800f01a:	e3a7      	b.n	800f76c <_svfprintf_r+0x12e4>
 800f01c:	9b04      	ldr	r3, [sp, #16]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	f000 8375 	beq.w	800f70e <_svfprintf_r+0x1286>
 800f024:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 800f028:	2300      	movs	r3, #0
 800f02a:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 800f02e:	9605      	str	r6, [sp, #20]
 800f030:	f7ff bba2 	b.w	800e778 <_svfprintf_r+0x2f0>
 800f034:	2110      	movs	r1, #16
 800f036:	6061      	str	r1, [r4, #4]
 800f038:	2a07      	cmp	r2, #7
 800f03a:	4461      	add	r1, ip
 800f03c:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800f040:	dd0a      	ble.n	800f058 <_svfprintf_r+0xbd0>
 800f042:	9802      	ldr	r0, [sp, #8]
 800f044:	9315      	str	r3, [sp, #84]	@ 0x54
 800f046:	aa1e      	add	r2, sp, #120	@ 0x78
 800f048:	4651      	mov	r1, sl
 800f04a:	f001 fe5f 	bl	8010d0c <__ssprint_r>
 800f04e:	2800      	cmp	r0, #0
 800f050:	f040 833b 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f054:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f056:	a821      	add	r0, sp, #132	@ 0x84
 800f058:	3b10      	subs	r3, #16
 800f05a:	4604      	mov	r4, r0
 800f05c:	e553      	b.n	800eb06 <_svfprintf_r+0x67e>
 800f05e:	4604      	mov	r4, r0
 800f060:	e56d      	b.n	800eb3e <_svfprintf_r+0x6b6>
 800f062:	9802      	ldr	r0, [sp, #8]
 800f064:	aa1e      	add	r2, sp, #120	@ 0x78
 800f066:	4651      	mov	r1, sl
 800f068:	f001 fe50 	bl	8010d0c <__ssprint_r>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	f040 832c 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f072:	ac21      	add	r4, sp, #132	@ 0x84
 800f074:	e575      	b.n	800eb62 <_svfprintf_r+0x6da>
 800f076:	9802      	ldr	r0, [sp, #8]
 800f078:	aa1e      	add	r2, sp, #120	@ 0x78
 800f07a:	4651      	mov	r1, sl
 800f07c:	f001 fe46 	bl	8010d0c <__ssprint_r>
 800f080:	2800      	cmp	r0, #0
 800f082:	f040 8322 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f086:	ac21      	add	r4, sp, #132	@ 0x84
 800f088:	e57b      	b.n	800eb82 <_svfprintf_r+0x6fa>
 800f08a:	2110      	movs	r1, #16
 800f08c:	6061      	str	r1, [r4, #4]
 800f08e:	2a07      	cmp	r2, #7
 800f090:	4461      	add	r1, ip
 800f092:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800f096:	dd0a      	ble.n	800f0ae <_svfprintf_r+0xc26>
 800f098:	9802      	ldr	r0, [sp, #8]
 800f09a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f09c:	aa1e      	add	r2, sp, #120	@ 0x78
 800f09e:	4651      	mov	r1, sl
 800f0a0:	f001 fe34 	bl	8010d0c <__ssprint_r>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	f040 8310 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f0aa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f0ac:	a821      	add	r0, sp, #132	@ 0x84
 800f0ae:	3b10      	subs	r3, #16
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	e56e      	b.n	800eb92 <_svfprintf_r+0x70a>
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	e588      	b.n	800ebca <_svfprintf_r+0x742>
 800f0b8:	2010      	movs	r0, #16
 800f0ba:	4403      	add	r3, r0
 800f0bc:	2a07      	cmp	r2, #7
 800f0be:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800f0c2:	6060      	str	r0, [r4, #4]
 800f0c4:	dd08      	ble.n	800f0d8 <_svfprintf_r+0xc50>
 800f0c6:	9802      	ldr	r0, [sp, #8]
 800f0c8:	aa1e      	add	r2, sp, #120	@ 0x78
 800f0ca:	4651      	mov	r1, sl
 800f0cc:	f001 fe1e 	bl	8010d0c <__ssprint_r>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	f040 82fa 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f0d6:	a921      	add	r1, sp, #132	@ 0x84
 800f0d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0da:	3b10      	subs	r3, #16
 800f0dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800f0de:	460c      	mov	r4, r1
 800f0e0:	e579      	b.n	800ebd6 <_svfprintf_r+0x74e>
 800f0e2:	460c      	mov	r4, r1
 800f0e4:	e594      	b.n	800ec10 <_svfprintf_r+0x788>
 800f0e6:	bf00      	nop
 800f0e8:	08013810 	.word	0x08013810
 800f0ec:	08013821 	.word	0x08013821
 800f0f0:	9a04      	ldr	r2, [sp, #16]
 800f0f2:	2a65      	cmp	r2, #101	@ 0x65
 800f0f4:	f340 823e 	ble.w	800f574 <_svfprintf_r+0x10ec>
 800f0f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f100:	d169      	bne.n	800f1d6 <_svfprintf_r+0xd4e>
 800f102:	4a72      	ldr	r2, [pc, #456]	@ (800f2cc <_svfprintf_r+0xe44>)
 800f104:	6022      	str	r2, [r4, #0]
 800f106:	2201      	movs	r2, #1
 800f108:	4413      	add	r3, r2
 800f10a:	9320      	str	r3, [sp, #128]	@ 0x80
 800f10c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f10e:	6062      	str	r2, [r4, #4]
 800f110:	4413      	add	r3, r2
 800f112:	2b07      	cmp	r3, #7
 800f114:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f116:	dc37      	bgt.n	800f188 <_svfprintf_r+0xd00>
 800f118:	3408      	adds	r4, #8
 800f11a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f11c:	9a03      	ldr	r2, [sp, #12]
 800f11e:	4293      	cmp	r3, r2
 800f120:	db02      	blt.n	800f128 <_svfprintf_r+0xca0>
 800f122:	07ea      	lsls	r2, r5, #31
 800f124:	f57f ad83 	bpl.w	800ec2e <_svfprintf_r+0x7a6>
 800f128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f12a:	6023      	str	r3, [r4, #0]
 800f12c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f12e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f130:	6063      	str	r3, [r4, #4]
 800f132:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f134:	4413      	add	r3, r2
 800f136:	9320      	str	r3, [sp, #128]	@ 0x80
 800f138:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f13a:	3301      	adds	r3, #1
 800f13c:	2b07      	cmp	r3, #7
 800f13e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f140:	dc2c      	bgt.n	800f19c <_svfprintf_r+0xd14>
 800f142:	3408      	adds	r4, #8
 800f144:	9b03      	ldr	r3, [sp, #12]
 800f146:	1e5e      	subs	r6, r3, #1
 800f148:	2e00      	cmp	r6, #0
 800f14a:	f77f ad70 	ble.w	800ec2e <_svfprintf_r+0x7a6>
 800f14e:	4f60      	ldr	r7, [pc, #384]	@ (800f2d0 <_svfprintf_r+0xe48>)
 800f150:	f04f 0810 	mov.w	r8, #16
 800f154:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800f158:	2e10      	cmp	r6, #16
 800f15a:	f103 0301 	add.w	r3, r3, #1
 800f15e:	f104 0108 	add.w	r1, r4, #8
 800f162:	6027      	str	r7, [r4, #0]
 800f164:	dc24      	bgt.n	800f1b0 <_svfprintf_r+0xd28>
 800f166:	6066      	str	r6, [r4, #4]
 800f168:	2b07      	cmp	r3, #7
 800f16a:	4416      	add	r6, r2
 800f16c:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 800f170:	f340 828a 	ble.w	800f688 <_svfprintf_r+0x1200>
 800f174:	9802      	ldr	r0, [sp, #8]
 800f176:	aa1e      	add	r2, sp, #120	@ 0x78
 800f178:	4651      	mov	r1, sl
 800f17a:	f001 fdc7 	bl	8010d0c <__ssprint_r>
 800f17e:	2800      	cmp	r0, #0
 800f180:	f040 82a3 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f184:	ac21      	add	r4, sp, #132	@ 0x84
 800f186:	e552      	b.n	800ec2e <_svfprintf_r+0x7a6>
 800f188:	9802      	ldr	r0, [sp, #8]
 800f18a:	aa1e      	add	r2, sp, #120	@ 0x78
 800f18c:	4651      	mov	r1, sl
 800f18e:	f001 fdbd 	bl	8010d0c <__ssprint_r>
 800f192:	2800      	cmp	r0, #0
 800f194:	f040 8299 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f198:	ac21      	add	r4, sp, #132	@ 0x84
 800f19a:	e7be      	b.n	800f11a <_svfprintf_r+0xc92>
 800f19c:	9802      	ldr	r0, [sp, #8]
 800f19e:	aa1e      	add	r2, sp, #120	@ 0x78
 800f1a0:	4651      	mov	r1, sl
 800f1a2:	f001 fdb3 	bl	8010d0c <__ssprint_r>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	f040 828f 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f1ac:	ac21      	add	r4, sp, #132	@ 0x84
 800f1ae:	e7c9      	b.n	800f144 <_svfprintf_r+0xcbc>
 800f1b0:	3210      	adds	r2, #16
 800f1b2:	2b07      	cmp	r3, #7
 800f1b4:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800f1b8:	f8c4 8004 	str.w	r8, [r4, #4]
 800f1bc:	dd08      	ble.n	800f1d0 <_svfprintf_r+0xd48>
 800f1be:	9802      	ldr	r0, [sp, #8]
 800f1c0:	aa1e      	add	r2, sp, #120	@ 0x78
 800f1c2:	4651      	mov	r1, sl
 800f1c4:	f001 fda2 	bl	8010d0c <__ssprint_r>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	f040 827e 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f1ce:	a921      	add	r1, sp, #132	@ 0x84
 800f1d0:	3e10      	subs	r6, #16
 800f1d2:	460c      	mov	r4, r1
 800f1d4:	e7be      	b.n	800f154 <_svfprintf_r+0xccc>
 800f1d6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800f1d8:	2a00      	cmp	r2, #0
 800f1da:	dc7b      	bgt.n	800f2d4 <_svfprintf_r+0xe4c>
 800f1dc:	4a3b      	ldr	r2, [pc, #236]	@ (800f2cc <_svfprintf_r+0xe44>)
 800f1de:	6022      	str	r2, [r4, #0]
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	4413      	add	r3, r2
 800f1e4:	9320      	str	r3, [sp, #128]	@ 0x80
 800f1e6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f1e8:	6062      	str	r2, [r4, #4]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	2b07      	cmp	r3, #7
 800f1ee:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f1f0:	dc46      	bgt.n	800f280 <_svfprintf_r+0xdf8>
 800f1f2:	3408      	adds	r4, #8
 800f1f4:	9903      	ldr	r1, [sp, #12]
 800f1f6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f1f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f1fa:	430b      	orrs	r3, r1
 800f1fc:	f005 0101 	and.w	r1, r5, #1
 800f200:	430b      	orrs	r3, r1
 800f202:	f43f ad14 	beq.w	800ec2e <_svfprintf_r+0x7a6>
 800f206:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f208:	6023      	str	r3, [r4, #0]
 800f20a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f20c:	6063      	str	r3, [r4, #4]
 800f20e:	441a      	add	r2, r3
 800f210:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f212:	9220      	str	r2, [sp, #128]	@ 0x80
 800f214:	3301      	adds	r3, #1
 800f216:	2b07      	cmp	r3, #7
 800f218:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f21a:	dc3b      	bgt.n	800f294 <_svfprintf_r+0xe0c>
 800f21c:	f104 0308 	add.w	r3, r4, #8
 800f220:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800f222:	2e00      	cmp	r6, #0
 800f224:	da1b      	bge.n	800f25e <_svfprintf_r+0xdd6>
 800f226:	4f2a      	ldr	r7, [pc, #168]	@ (800f2d0 <_svfprintf_r+0xe48>)
 800f228:	4276      	negs	r6, r6
 800f22a:	461a      	mov	r2, r3
 800f22c:	2410      	movs	r4, #16
 800f22e:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 800f232:	2e10      	cmp	r6, #16
 800f234:	f101 0101 	add.w	r1, r1, #1
 800f238:	f103 0308 	add.w	r3, r3, #8
 800f23c:	6017      	str	r7, [r2, #0]
 800f23e:	dc33      	bgt.n	800f2a8 <_svfprintf_r+0xe20>
 800f240:	6056      	str	r6, [r2, #4]
 800f242:	2907      	cmp	r1, #7
 800f244:	4406      	add	r6, r0
 800f246:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 800f24a:	dd08      	ble.n	800f25e <_svfprintf_r+0xdd6>
 800f24c:	9802      	ldr	r0, [sp, #8]
 800f24e:	aa1e      	add	r2, sp, #120	@ 0x78
 800f250:	4651      	mov	r1, sl
 800f252:	f001 fd5b 	bl	8010d0c <__ssprint_r>
 800f256:	2800      	cmp	r0, #0
 800f258:	f040 8237 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f25c:	ab21      	add	r3, sp, #132	@ 0x84
 800f25e:	9a03      	ldr	r2, [sp, #12]
 800f260:	605a      	str	r2, [r3, #4]
 800f262:	9903      	ldr	r1, [sp, #12]
 800f264:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f266:	f8c3 9000 	str.w	r9, [r3]
 800f26a:	440a      	add	r2, r1
 800f26c:	9220      	str	r2, [sp, #128]	@ 0x80
 800f26e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800f270:	3201      	adds	r2, #1
 800f272:	2a07      	cmp	r2, #7
 800f274:	921f      	str	r2, [sp, #124]	@ 0x7c
 800f276:	f73f af7d 	bgt.w	800f174 <_svfprintf_r+0xcec>
 800f27a:	f103 0408 	add.w	r4, r3, #8
 800f27e:	e4d6      	b.n	800ec2e <_svfprintf_r+0x7a6>
 800f280:	9802      	ldr	r0, [sp, #8]
 800f282:	aa1e      	add	r2, sp, #120	@ 0x78
 800f284:	4651      	mov	r1, sl
 800f286:	f001 fd41 	bl	8010d0c <__ssprint_r>
 800f28a:	2800      	cmp	r0, #0
 800f28c:	f040 821d 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f290:	ac21      	add	r4, sp, #132	@ 0x84
 800f292:	e7af      	b.n	800f1f4 <_svfprintf_r+0xd6c>
 800f294:	9802      	ldr	r0, [sp, #8]
 800f296:	aa1e      	add	r2, sp, #120	@ 0x78
 800f298:	4651      	mov	r1, sl
 800f29a:	f001 fd37 	bl	8010d0c <__ssprint_r>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	f040 8213 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f2a4:	ab21      	add	r3, sp, #132	@ 0x84
 800f2a6:	e7bb      	b.n	800f220 <_svfprintf_r+0xd98>
 800f2a8:	3010      	adds	r0, #16
 800f2aa:	2907      	cmp	r1, #7
 800f2ac:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 800f2b0:	6054      	str	r4, [r2, #4]
 800f2b2:	dd08      	ble.n	800f2c6 <_svfprintf_r+0xe3e>
 800f2b4:	9802      	ldr	r0, [sp, #8]
 800f2b6:	aa1e      	add	r2, sp, #120	@ 0x78
 800f2b8:	4651      	mov	r1, sl
 800f2ba:	f001 fd27 	bl	8010d0c <__ssprint_r>
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	f040 8203 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f2c4:	ab21      	add	r3, sp, #132	@ 0x84
 800f2c6:	3e10      	subs	r6, #16
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	e7b0      	b.n	800f22e <_svfprintf_r+0xda6>
 800f2cc:	08013832 	.word	0x08013832
 800f2d0:	08013834 	.word	0x08013834
 800f2d4:	9a03      	ldr	r2, [sp, #12]
 800f2d6:	444a      	add	r2, r9
 800f2d8:	9204      	str	r2, [sp, #16]
 800f2da:	9a03      	ldr	r2, [sp, #12]
 800f2dc:	42b2      	cmp	r2, r6
 800f2de:	bfa8      	it	ge
 800f2e0:	4632      	movge	r2, r6
 800f2e2:	2a00      	cmp	r2, #0
 800f2e4:	4690      	mov	r8, r2
 800f2e6:	dd0a      	ble.n	800f2fe <_svfprintf_r+0xe76>
 800f2e8:	4413      	add	r3, r2
 800f2ea:	9320      	str	r3, [sp, #128]	@ 0x80
 800f2ec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	2b07      	cmp	r3, #7
 800f2f2:	e9c4 9200 	strd	r9, r2, [r4]
 800f2f6:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f2f8:	f300 8089 	bgt.w	800f40e <_svfprintf_r+0xf86>
 800f2fc:	3408      	adds	r4, #8
 800f2fe:	4643      	mov	r3, r8
 800f300:	2b00      	cmp	r3, #0
 800f302:	bfac      	ite	ge
 800f304:	eba6 0808 	subge.w	r8, r6, r8
 800f308:	46b0      	movlt	r8, r6
 800f30a:	f1b8 0f00 	cmp.w	r8, #0
 800f30e:	dd1b      	ble.n	800f348 <_svfprintf_r+0xec0>
 800f310:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 800f314:	4896      	ldr	r0, [pc, #600]	@ (800f570 <_svfprintf_r+0x10e8>)
 800f316:	6020      	str	r0, [r4, #0]
 800f318:	f1b8 0f10 	cmp.w	r8, #16
 800f31c:	f102 0201 	add.w	r2, r2, #1
 800f320:	f104 0108 	add.w	r1, r4, #8
 800f324:	dc7d      	bgt.n	800f422 <_svfprintf_r+0xf9a>
 800f326:	4443      	add	r3, r8
 800f328:	2a07      	cmp	r2, #7
 800f32a:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800f32e:	f8c4 8004 	str.w	r8, [r4, #4]
 800f332:	f340 808a 	ble.w	800f44a <_svfprintf_r+0xfc2>
 800f336:	9802      	ldr	r0, [sp, #8]
 800f338:	aa1e      	add	r2, sp, #120	@ 0x78
 800f33a:	4651      	mov	r1, sl
 800f33c:	f001 fce6 	bl	8010d0c <__ssprint_r>
 800f340:	2800      	cmp	r0, #0
 800f342:	f040 81c2 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f346:	ac21      	add	r4, sp, #132	@ 0x84
 800f348:	056b      	lsls	r3, r5, #21
 800f34a:	eb09 0806 	add.w	r8, r9, r6
 800f34e:	d508      	bpl.n	800f362 <_svfprintf_r+0xeda>
 800f350:	9b06      	ldr	r3, [sp, #24]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d17b      	bne.n	800f44e <_svfprintf_r+0xfc6>
 800f356:	2f00      	cmp	r7, #0
 800f358:	d17b      	bne.n	800f452 <_svfprintf_r+0xfca>
 800f35a:	9b04      	ldr	r3, [sp, #16]
 800f35c:	4598      	cmp	r8, r3
 800f35e:	bf28      	it	cs
 800f360:	4698      	movcs	r8, r3
 800f362:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800f364:	9a03      	ldr	r2, [sp, #12]
 800f366:	4293      	cmp	r3, r2
 800f368:	db01      	blt.n	800f36e <_svfprintf_r+0xee6>
 800f36a:	07ee      	lsls	r6, r5, #31
 800f36c:	d50e      	bpl.n	800f38c <_svfprintf_r+0xf04>
 800f36e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f370:	6023      	str	r3, [r4, #0]
 800f372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f376:	6063      	str	r3, [r4, #4]
 800f378:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f37a:	4413      	add	r3, r2
 800f37c:	9320      	str	r3, [sp, #128]	@ 0x80
 800f37e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f380:	3301      	adds	r3, #1
 800f382:	2b07      	cmp	r3, #7
 800f384:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f386:	f300 80df 	bgt.w	800f548 <_svfprintf_r+0x10c0>
 800f38a:	3408      	adds	r4, #8
 800f38c:	9b03      	ldr	r3, [sp, #12]
 800f38e:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 800f390:	1bdf      	subs	r7, r3, r7
 800f392:	9b04      	ldr	r3, [sp, #16]
 800f394:	eba3 0308 	sub.w	r3, r3, r8
 800f398:	429f      	cmp	r7, r3
 800f39a:	bfa8      	it	ge
 800f39c:	461f      	movge	r7, r3
 800f39e:	2f00      	cmp	r7, #0
 800f3a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f3a2:	dd0a      	ble.n	800f3ba <_svfprintf_r+0xf32>
 800f3a4:	443b      	add	r3, r7
 800f3a6:	9320      	str	r3, [sp, #128]	@ 0x80
 800f3a8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	2b07      	cmp	r3, #7
 800f3ae:	e9c4 8700 	strd	r8, r7, [r4]
 800f3b2:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f3b4:	f300 80d2 	bgt.w	800f55c <_svfprintf_r+0x10d4>
 800f3b8:	3408      	adds	r4, #8
 800f3ba:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 800f3bc:	9b03      	ldr	r3, [sp, #12]
 800f3be:	2f00      	cmp	r7, #0
 800f3c0:	eba3 0606 	sub.w	r6, r3, r6
 800f3c4:	bfa8      	it	ge
 800f3c6:	1bf6      	subge	r6, r6, r7
 800f3c8:	2e00      	cmp	r6, #0
 800f3ca:	f77f ac30 	ble.w	800ec2e <_svfprintf_r+0x7a6>
 800f3ce:	4f68      	ldr	r7, [pc, #416]	@ (800f570 <_svfprintf_r+0x10e8>)
 800f3d0:	f04f 0810 	mov.w	r8, #16
 800f3d4:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800f3d8:	2e10      	cmp	r6, #16
 800f3da:	f103 0301 	add.w	r3, r3, #1
 800f3de:	f104 0108 	add.w	r1, r4, #8
 800f3e2:	6027      	str	r7, [r4, #0]
 800f3e4:	f77f aebf 	ble.w	800f166 <_svfprintf_r+0xcde>
 800f3e8:	3210      	adds	r2, #16
 800f3ea:	2b07      	cmp	r3, #7
 800f3ec:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800f3f0:	f8c4 8004 	str.w	r8, [r4, #4]
 800f3f4:	dd08      	ble.n	800f408 <_svfprintf_r+0xf80>
 800f3f6:	9802      	ldr	r0, [sp, #8]
 800f3f8:	aa1e      	add	r2, sp, #120	@ 0x78
 800f3fa:	4651      	mov	r1, sl
 800f3fc:	f001 fc86 	bl	8010d0c <__ssprint_r>
 800f400:	2800      	cmp	r0, #0
 800f402:	f040 8162 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f406:	a921      	add	r1, sp, #132	@ 0x84
 800f408:	3e10      	subs	r6, #16
 800f40a:	460c      	mov	r4, r1
 800f40c:	e7e2      	b.n	800f3d4 <_svfprintf_r+0xf4c>
 800f40e:	9802      	ldr	r0, [sp, #8]
 800f410:	aa1e      	add	r2, sp, #120	@ 0x78
 800f412:	4651      	mov	r1, sl
 800f414:	f001 fc7a 	bl	8010d0c <__ssprint_r>
 800f418:	2800      	cmp	r0, #0
 800f41a:	f040 8156 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f41e:	ac21      	add	r4, sp, #132	@ 0x84
 800f420:	e76d      	b.n	800f2fe <_svfprintf_r+0xe76>
 800f422:	2010      	movs	r0, #16
 800f424:	4403      	add	r3, r0
 800f426:	2a07      	cmp	r2, #7
 800f428:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 800f42c:	6060      	str	r0, [r4, #4]
 800f42e:	dd08      	ble.n	800f442 <_svfprintf_r+0xfba>
 800f430:	9802      	ldr	r0, [sp, #8]
 800f432:	aa1e      	add	r2, sp, #120	@ 0x78
 800f434:	4651      	mov	r1, sl
 800f436:	f001 fc69 	bl	8010d0c <__ssprint_r>
 800f43a:	2800      	cmp	r0, #0
 800f43c:	f040 8145 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f440:	a921      	add	r1, sp, #132	@ 0x84
 800f442:	f1a8 0810 	sub.w	r8, r8, #16
 800f446:	460c      	mov	r4, r1
 800f448:	e762      	b.n	800f310 <_svfprintf_r+0xe88>
 800f44a:	460c      	mov	r4, r1
 800f44c:	e77c      	b.n	800f348 <_svfprintf_r+0xec0>
 800f44e:	2f00      	cmp	r7, #0
 800f450:	d04a      	beq.n	800f4e8 <_svfprintf_r+0x1060>
 800f452:	3f01      	subs	r7, #1
 800f454:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f456:	6023      	str	r3, [r4, #0]
 800f458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f45a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f45c:	6063      	str	r3, [r4, #4]
 800f45e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f460:	4413      	add	r3, r2
 800f462:	9320      	str	r3, [sp, #128]	@ 0x80
 800f464:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f466:	3301      	adds	r3, #1
 800f468:	2b07      	cmp	r3, #7
 800f46a:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f46c:	dc43      	bgt.n	800f4f6 <_svfprintf_r+0x106e>
 800f46e:	3408      	adds	r4, #8
 800f470:	9b07      	ldr	r3, [sp, #28]
 800f472:	781a      	ldrb	r2, [r3, #0]
 800f474:	9b04      	ldr	r3, [sp, #16]
 800f476:	eba3 0308 	sub.w	r3, r3, r8
 800f47a:	429a      	cmp	r2, r3
 800f47c:	bfa8      	it	ge
 800f47e:	461a      	movge	r2, r3
 800f480:	2a00      	cmp	r2, #0
 800f482:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f484:	4691      	mov	r9, r2
 800f486:	dd09      	ble.n	800f49c <_svfprintf_r+0x1014>
 800f488:	4413      	add	r3, r2
 800f48a:	9320      	str	r3, [sp, #128]	@ 0x80
 800f48c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f48e:	3301      	adds	r3, #1
 800f490:	2b07      	cmp	r3, #7
 800f492:	e9c4 8200 	strd	r8, r2, [r4]
 800f496:	931f      	str	r3, [sp, #124]	@ 0x7c
 800f498:	dc37      	bgt.n	800f50a <_svfprintf_r+0x1082>
 800f49a:	3408      	adds	r4, #8
 800f49c:	9b07      	ldr	r3, [sp, #28]
 800f49e:	781e      	ldrb	r6, [r3, #0]
 800f4a0:	f1b9 0f00 	cmp.w	r9, #0
 800f4a4:	bfa8      	it	ge
 800f4a6:	eba6 0609 	subge.w	r6, r6, r9
 800f4aa:	2e00      	cmp	r6, #0
 800f4ac:	dd18      	ble.n	800f4e0 <_svfprintf_r+0x1058>
 800f4ae:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800f4b2:	482f      	ldr	r0, [pc, #188]	@ (800f570 <_svfprintf_r+0x10e8>)
 800f4b4:	6020      	str	r0, [r4, #0]
 800f4b6:	2e10      	cmp	r6, #16
 800f4b8:	f103 0301 	add.w	r3, r3, #1
 800f4bc:	f104 0108 	add.w	r1, r4, #8
 800f4c0:	dc2d      	bgt.n	800f51e <_svfprintf_r+0x1096>
 800f4c2:	6066      	str	r6, [r4, #4]
 800f4c4:	2b07      	cmp	r3, #7
 800f4c6:	4416      	add	r6, r2
 800f4c8:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 800f4cc:	dd3a      	ble.n	800f544 <_svfprintf_r+0x10bc>
 800f4ce:	9802      	ldr	r0, [sp, #8]
 800f4d0:	aa1e      	add	r2, sp, #120	@ 0x78
 800f4d2:	4651      	mov	r1, sl
 800f4d4:	f001 fc1a 	bl	8010d0c <__ssprint_r>
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	f040 80f6 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f4de:	ac21      	add	r4, sp, #132	@ 0x84
 800f4e0:	9b07      	ldr	r3, [sp, #28]
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	4498      	add	r8, r3
 800f4e6:	e733      	b.n	800f350 <_svfprintf_r+0xec8>
 800f4e8:	9b07      	ldr	r3, [sp, #28]
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	9307      	str	r3, [sp, #28]
 800f4ee:	9b06      	ldr	r3, [sp, #24]
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	9306      	str	r3, [sp, #24]
 800f4f4:	e7ae      	b.n	800f454 <_svfprintf_r+0xfcc>
 800f4f6:	9802      	ldr	r0, [sp, #8]
 800f4f8:	aa1e      	add	r2, sp, #120	@ 0x78
 800f4fa:	4651      	mov	r1, sl
 800f4fc:	f001 fc06 	bl	8010d0c <__ssprint_r>
 800f500:	2800      	cmp	r0, #0
 800f502:	f040 80e2 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f506:	ac21      	add	r4, sp, #132	@ 0x84
 800f508:	e7b2      	b.n	800f470 <_svfprintf_r+0xfe8>
 800f50a:	9802      	ldr	r0, [sp, #8]
 800f50c:	aa1e      	add	r2, sp, #120	@ 0x78
 800f50e:	4651      	mov	r1, sl
 800f510:	f001 fbfc 	bl	8010d0c <__ssprint_r>
 800f514:	2800      	cmp	r0, #0
 800f516:	f040 80d8 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f51a:	ac21      	add	r4, sp, #132	@ 0x84
 800f51c:	e7be      	b.n	800f49c <_svfprintf_r+0x1014>
 800f51e:	2010      	movs	r0, #16
 800f520:	4402      	add	r2, r0
 800f522:	2b07      	cmp	r3, #7
 800f524:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800f528:	6060      	str	r0, [r4, #4]
 800f52a:	dd08      	ble.n	800f53e <_svfprintf_r+0x10b6>
 800f52c:	9802      	ldr	r0, [sp, #8]
 800f52e:	aa1e      	add	r2, sp, #120	@ 0x78
 800f530:	4651      	mov	r1, sl
 800f532:	f001 fbeb 	bl	8010d0c <__ssprint_r>
 800f536:	2800      	cmp	r0, #0
 800f538:	f040 80c7 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f53c:	a921      	add	r1, sp, #132	@ 0x84
 800f53e:	3e10      	subs	r6, #16
 800f540:	460c      	mov	r4, r1
 800f542:	e7b4      	b.n	800f4ae <_svfprintf_r+0x1026>
 800f544:	460c      	mov	r4, r1
 800f546:	e7cb      	b.n	800f4e0 <_svfprintf_r+0x1058>
 800f548:	9802      	ldr	r0, [sp, #8]
 800f54a:	aa1e      	add	r2, sp, #120	@ 0x78
 800f54c:	4651      	mov	r1, sl
 800f54e:	f001 fbdd 	bl	8010d0c <__ssprint_r>
 800f552:	2800      	cmp	r0, #0
 800f554:	f040 80b9 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f558:	ac21      	add	r4, sp, #132	@ 0x84
 800f55a:	e717      	b.n	800f38c <_svfprintf_r+0xf04>
 800f55c:	9802      	ldr	r0, [sp, #8]
 800f55e:	aa1e      	add	r2, sp, #120	@ 0x78
 800f560:	4651      	mov	r1, sl
 800f562:	f001 fbd3 	bl	8010d0c <__ssprint_r>
 800f566:	2800      	cmp	r0, #0
 800f568:	f040 80af 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f56c:	ac21      	add	r4, sp, #132	@ 0x84
 800f56e:	e724      	b.n	800f3ba <_svfprintf_r+0xf32>
 800f570:	08013834 	.word	0x08013834
 800f574:	9803      	ldr	r0, [sp, #12]
 800f576:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800f578:	2801      	cmp	r0, #1
 800f57a:	f103 0201 	add.w	r2, r3, #1
 800f57e:	f101 0101 	add.w	r1, r1, #1
 800f582:	f104 0308 	add.w	r3, r4, #8
 800f586:	dc01      	bgt.n	800f58c <_svfprintf_r+0x1104>
 800f588:	07e8      	lsls	r0, r5, #31
 800f58a:	d572      	bpl.n	800f672 <_svfprintf_r+0x11ea>
 800f58c:	2001      	movs	r0, #1
 800f58e:	2907      	cmp	r1, #7
 800f590:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800f594:	f8c4 9000 	str.w	r9, [r4]
 800f598:	6060      	str	r0, [r4, #4]
 800f59a:	dd08      	ble.n	800f5ae <_svfprintf_r+0x1126>
 800f59c:	9802      	ldr	r0, [sp, #8]
 800f59e:	aa1e      	add	r2, sp, #120	@ 0x78
 800f5a0:	4651      	mov	r1, sl
 800f5a2:	f001 fbb3 	bl	8010d0c <__ssprint_r>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	f040 808f 	bne.w	800f6ca <_svfprintf_r+0x1242>
 800f5ac:	ab21      	add	r3, sp, #132	@ 0x84
 800f5ae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f5b0:	601a      	str	r2, [r3, #0]
 800f5b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f5b6:	605a      	str	r2, [r3, #4]
 800f5b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f5ba:	440a      	add	r2, r1
 800f5bc:	9220      	str	r2, [sp, #128]	@ 0x80
 800f5be:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800f5c0:	3201      	adds	r2, #1
 800f5c2:	2a07      	cmp	r2, #7
 800f5c4:	921f      	str	r2, [sp, #124]	@ 0x7c
 800f5c6:	dc25      	bgt.n	800f614 <_svfprintf_r+0x118c>
 800f5c8:	3308      	adds	r3, #8
 800f5ca:	9803      	ldr	r0, [sp, #12]
 800f5cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d4:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 800f5d8:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800f5dc:	d023      	beq.n	800f626 <_svfprintf_r+0x119e>
 800f5de:	f109 0001 	add.w	r0, r9, #1
 800f5e2:	e9c3 0400 	strd	r0, r4, [r3]
 800f5e6:	9803      	ldr	r0, [sp, #12]
 800f5e8:	3101      	adds	r1, #1
 800f5ea:	3a01      	subs	r2, #1
 800f5ec:	4402      	add	r2, r0
 800f5ee:	2907      	cmp	r1, #7
 800f5f0:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800f5f4:	dd46      	ble.n	800f684 <_svfprintf_r+0x11fc>
 800f5f6:	9802      	ldr	r0, [sp, #8]
 800f5f8:	aa1e      	add	r2, sp, #120	@ 0x78
 800f5fa:	4651      	mov	r1, sl
 800f5fc:	f001 fb86 	bl	8010d0c <__ssprint_r>
 800f600:	2800      	cmp	r0, #0
 800f602:	d162      	bne.n	800f6ca <_svfprintf_r+0x1242>
 800f604:	ab21      	add	r3, sp, #132	@ 0x84
 800f606:	aa1a      	add	r2, sp, #104	@ 0x68
 800f608:	601a      	str	r2, [r3, #0]
 800f60a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f60c:	605a      	str	r2, [r3, #4]
 800f60e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f610:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f612:	e62a      	b.n	800f26a <_svfprintf_r+0xde2>
 800f614:	9802      	ldr	r0, [sp, #8]
 800f616:	aa1e      	add	r2, sp, #120	@ 0x78
 800f618:	4651      	mov	r1, sl
 800f61a:	f001 fb77 	bl	8010d0c <__ssprint_r>
 800f61e:	2800      	cmp	r0, #0
 800f620:	d153      	bne.n	800f6ca <_svfprintf_r+0x1242>
 800f622:	ab21      	add	r3, sp, #132	@ 0x84
 800f624:	e7d1      	b.n	800f5ca <_svfprintf_r+0x1142>
 800f626:	9a03      	ldr	r2, [sp, #12]
 800f628:	2a01      	cmp	r2, #1
 800f62a:	ddec      	ble.n	800f606 <_svfprintf_r+0x117e>
 800f62c:	4e56      	ldr	r6, [pc, #344]	@ (800f788 <_svfprintf_r+0x1300>)
 800f62e:	2710      	movs	r7, #16
 800f630:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 800f634:	2c10      	cmp	r4, #16
 800f636:	f102 0201 	add.w	r2, r2, #1
 800f63a:	f103 0008 	add.w	r0, r3, #8
 800f63e:	601e      	str	r6, [r3, #0]
 800f640:	dc07      	bgt.n	800f652 <_svfprintf_r+0x11ca>
 800f642:	605c      	str	r4, [r3, #4]
 800f644:	2a07      	cmp	r2, #7
 800f646:	440c      	add	r4, r1
 800f648:	e9cd 241f 	strd	r2, r4, [sp, #124]	@ 0x7c
 800f64c:	dcd3      	bgt.n	800f5f6 <_svfprintf_r+0x116e>
 800f64e:	4603      	mov	r3, r0
 800f650:	e7d9      	b.n	800f606 <_svfprintf_r+0x117e>
 800f652:	3110      	adds	r1, #16
 800f654:	2a07      	cmp	r2, #7
 800f656:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 800f65a:	605f      	str	r7, [r3, #4]
 800f65c:	dd06      	ble.n	800f66c <_svfprintf_r+0x11e4>
 800f65e:	9802      	ldr	r0, [sp, #8]
 800f660:	aa1e      	add	r2, sp, #120	@ 0x78
 800f662:	4651      	mov	r1, sl
 800f664:	f001 fb52 	bl	8010d0c <__ssprint_r>
 800f668:	bb78      	cbnz	r0, 800f6ca <_svfprintf_r+0x1242>
 800f66a:	a821      	add	r0, sp, #132	@ 0x84
 800f66c:	3c10      	subs	r4, #16
 800f66e:	4603      	mov	r3, r0
 800f670:	e7de      	b.n	800f630 <_svfprintf_r+0x11a8>
 800f672:	2001      	movs	r0, #1
 800f674:	2907      	cmp	r1, #7
 800f676:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 800f67a:	f8c4 9000 	str.w	r9, [r4]
 800f67e:	6060      	str	r0, [r4, #4]
 800f680:	ddc1      	ble.n	800f606 <_svfprintf_r+0x117e>
 800f682:	e7b8      	b.n	800f5f6 <_svfprintf_r+0x116e>
 800f684:	3308      	adds	r3, #8
 800f686:	e7be      	b.n	800f606 <_svfprintf_r+0x117e>
 800f688:	460c      	mov	r4, r1
 800f68a:	f7ff bad0 	b.w	800ec2e <_svfprintf_r+0x7a6>
 800f68e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f690:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f692:	1a9d      	subs	r5, r3, r2
 800f694:	2d00      	cmp	r5, #0
 800f696:	f77f aacd 	ble.w	800ec34 <_svfprintf_r+0x7ac>
 800f69a:	4e3c      	ldr	r6, [pc, #240]	@ (800f78c <_svfprintf_r+0x1304>)
 800f69c:	2710      	movs	r7, #16
 800f69e:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 800f6a2:	2d10      	cmp	r5, #16
 800f6a4:	f103 0301 	add.w	r3, r3, #1
 800f6a8:	6026      	str	r6, [r4, #0]
 800f6aa:	dc18      	bgt.n	800f6de <_svfprintf_r+0x1256>
 800f6ac:	442a      	add	r2, r5
 800f6ae:	2b07      	cmp	r3, #7
 800f6b0:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800f6b4:	6065      	str	r5, [r4, #4]
 800f6b6:	f77f aabd 	ble.w	800ec34 <_svfprintf_r+0x7ac>
 800f6ba:	9802      	ldr	r0, [sp, #8]
 800f6bc:	aa1e      	add	r2, sp, #120	@ 0x78
 800f6be:	4651      	mov	r1, sl
 800f6c0:	f001 fb24 	bl	8010d0c <__ssprint_r>
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	f43f aab5 	beq.w	800ec34 <_svfprintf_r+0x7ac>
 800f6ca:	f1bb 0f00 	cmp.w	fp, #0
 800f6ce:	f43f a8e0 	beq.w	800e892 <_svfprintf_r+0x40a>
 800f6d2:	9802      	ldr	r0, [sp, #8]
 800f6d4:	4659      	mov	r1, fp
 800f6d6:	f7fe fbcf 	bl	800de78 <_free_r>
 800f6da:	f7ff b8da 	b.w	800e892 <_svfprintf_r+0x40a>
 800f6de:	3210      	adds	r2, #16
 800f6e0:	2b07      	cmp	r3, #7
 800f6e2:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 800f6e6:	6067      	str	r7, [r4, #4]
 800f6e8:	dc02      	bgt.n	800f6f0 <_svfprintf_r+0x1268>
 800f6ea:	3408      	adds	r4, #8
 800f6ec:	3d10      	subs	r5, #16
 800f6ee:	e7d6      	b.n	800f69e <_svfprintf_r+0x1216>
 800f6f0:	9802      	ldr	r0, [sp, #8]
 800f6f2:	aa1e      	add	r2, sp, #120	@ 0x78
 800f6f4:	4651      	mov	r1, sl
 800f6f6:	f001 fb09 	bl	8010d0c <__ssprint_r>
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	d1e5      	bne.n	800f6ca <_svfprintf_r+0x1242>
 800f6fe:	ac21      	add	r4, sp, #132	@ 0x84
 800f700:	e7f4      	b.n	800f6ec <_svfprintf_r+0x1264>
 800f702:	9802      	ldr	r0, [sp, #8]
 800f704:	4659      	mov	r1, fp
 800f706:	f7fe fbb7 	bl	800de78 <_free_r>
 800f70a:	f7ff baab 	b.w	800ec64 <_svfprintf_r+0x7dc>
 800f70e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f710:	2b00      	cmp	r3, #0
 800f712:	f43f a8be 	beq.w	800e892 <_svfprintf_r+0x40a>
 800f716:	9802      	ldr	r0, [sp, #8]
 800f718:	aa1e      	add	r2, sp, #120	@ 0x78
 800f71a:	4651      	mov	r1, sl
 800f71c:	f001 faf6 	bl	8010d0c <__ssprint_r>
 800f720:	f7ff b8b7 	b.w	800e892 <_svfprintf_r+0x40a>
 800f724:	ea56 0207 	orrs.w	r2, r6, r7
 800f728:	9506      	str	r5, [sp, #24]
 800f72a:	f43f ab93 	beq.w	800ee54 <_svfprintf_r+0x9cc>
 800f72e:	2b01      	cmp	r3, #1
 800f730:	f43f ac14 	beq.w	800ef5c <_svfprintf_r+0xad4>
 800f734:	2b02      	cmp	r3, #2
 800f736:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 800f73a:	f43f ac59 	beq.w	800eff0 <_svfprintf_r+0xb68>
 800f73e:	f006 0307 	and.w	r3, r6, #7
 800f742:	08f6      	lsrs	r6, r6, #3
 800f744:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800f748:	08ff      	lsrs	r7, r7, #3
 800f74a:	3330      	adds	r3, #48	@ 0x30
 800f74c:	ea56 0107 	orrs.w	r1, r6, r7
 800f750:	464a      	mov	r2, r9
 800f752:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f756:	d1f2      	bne.n	800f73e <_svfprintf_r+0x12b6>
 800f758:	9906      	ldr	r1, [sp, #24]
 800f75a:	07cd      	lsls	r5, r1, #31
 800f75c:	d506      	bpl.n	800f76c <_svfprintf_r+0x12e4>
 800f75e:	2b30      	cmp	r3, #48	@ 0x30
 800f760:	d004      	beq.n	800f76c <_svfprintf_r+0x12e4>
 800f762:	2330      	movs	r3, #48	@ 0x30
 800f764:	f809 3c01 	strb.w	r3, [r9, #-1]
 800f768:	f1a2 0902 	sub.w	r9, r2, #2
 800f76c:	ab4a      	add	r3, sp, #296	@ 0x128
 800f76e:	9d06      	ldr	r5, [sp, #24]
 800f770:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 800f774:	f04f 0b00 	mov.w	fp, #0
 800f778:	eba3 0809 	sub.w	r8, r3, r9
 800f77c:	465f      	mov	r7, fp
 800f77e:	f8cd b018 	str.w	fp, [sp, #24]
 800f782:	465e      	mov	r6, fp
 800f784:	f7ff b9a4 	b.w	800ead0 <_svfprintf_r+0x648>
 800f788:	08013834 	.word	0x08013834
 800f78c:	08013844 	.word	0x08013844

0800f790 <_fclose_r>:
 800f790:	b570      	push	{r4, r5, r6, lr}
 800f792:	4605      	mov	r5, r0
 800f794:	460c      	mov	r4, r1
 800f796:	b1b1      	cbz	r1, 800f7c6 <_fclose_r+0x36>
 800f798:	b118      	cbz	r0, 800f7a2 <_fclose_r+0x12>
 800f79a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f79c:	b90b      	cbnz	r3, 800f7a2 <_fclose_r+0x12>
 800f79e:	f7fe f9ef 	bl	800db80 <__sinit>
 800f7a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7a4:	07de      	lsls	r6, r3, #31
 800f7a6:	d405      	bmi.n	800f7b4 <_fclose_r+0x24>
 800f7a8:	89a3      	ldrh	r3, [r4, #12]
 800f7aa:	0598      	lsls	r0, r3, #22
 800f7ac:	d402      	bmi.n	800f7b4 <_fclose_r+0x24>
 800f7ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7b0:	f7fe fafa 	bl	800dda8 <__retarget_lock_acquire_recursive>
 800f7b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7b8:	b943      	cbnz	r3, 800f7cc <_fclose_r+0x3c>
 800f7ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7bc:	07d9      	lsls	r1, r3, #31
 800f7be:	d402      	bmi.n	800f7c6 <_fclose_r+0x36>
 800f7c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7c2:	f7fe faf2 	bl	800ddaa <__retarget_lock_release_recursive>
 800f7c6:	2600      	movs	r6, #0
 800f7c8:	4630      	mov	r0, r6
 800f7ca:	bd70      	pop	{r4, r5, r6, pc}
 800f7cc:	4621      	mov	r1, r4
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	f000 f834 	bl	800f83c <__sflush_r>
 800f7d4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f7d6:	4606      	mov	r6, r0
 800f7d8:	b133      	cbz	r3, 800f7e8 <_fclose_r+0x58>
 800f7da:	69e1      	ldr	r1, [r4, #28]
 800f7dc:	4628      	mov	r0, r5
 800f7de:	4798      	blx	r3
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	bfb8      	it	lt
 800f7e4:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 800f7e8:	89a3      	ldrh	r3, [r4, #12]
 800f7ea:	061a      	lsls	r2, r3, #24
 800f7ec:	d503      	bpl.n	800f7f6 <_fclose_r+0x66>
 800f7ee:	6921      	ldr	r1, [r4, #16]
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	f7fe fb41 	bl	800de78 <_free_r>
 800f7f6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f7f8:	b141      	cbz	r1, 800f80c <_fclose_r+0x7c>
 800f7fa:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800f7fe:	4299      	cmp	r1, r3
 800f800:	d002      	beq.n	800f808 <_fclose_r+0x78>
 800f802:	4628      	mov	r0, r5
 800f804:	f7fe fb38 	bl	800de78 <_free_r>
 800f808:	2300      	movs	r3, #0
 800f80a:	6323      	str	r3, [r4, #48]	@ 0x30
 800f80c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f80e:	b121      	cbz	r1, 800f81a <_fclose_r+0x8a>
 800f810:	4628      	mov	r0, r5
 800f812:	f7fe fb31 	bl	800de78 <_free_r>
 800f816:	2300      	movs	r3, #0
 800f818:	6463      	str	r3, [r4, #68]	@ 0x44
 800f81a:	f7fe f9a5 	bl	800db68 <__sfp_lock_acquire>
 800f81e:	2300      	movs	r3, #0
 800f820:	81a3      	strh	r3, [r4, #12]
 800f822:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f824:	07db      	lsls	r3, r3, #31
 800f826:	d402      	bmi.n	800f82e <_fclose_r+0x9e>
 800f828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f82a:	f7fe fabe 	bl	800ddaa <__retarget_lock_release_recursive>
 800f82e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f830:	f7fe fab9 	bl	800dda6 <__retarget_lock_close_recursive>
 800f834:	f7fe f99e 	bl	800db74 <__sfp_lock_release>
 800f838:	e7c6      	b.n	800f7c8 <_fclose_r+0x38>
	...

0800f83c <__sflush_r>:
 800f83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f840:	4605      	mov	r5, r0
 800f842:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800f846:	0706      	lsls	r6, r0, #28
 800f848:	460c      	mov	r4, r1
 800f84a:	d457      	bmi.n	800f8fc <__sflush_r+0xc0>
 800f84c:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800f850:	818b      	strh	r3, [r1, #12]
 800f852:	684b      	ldr	r3, [r1, #4]
 800f854:	2b00      	cmp	r3, #0
 800f856:	dc02      	bgt.n	800f85e <__sflush_r+0x22>
 800f858:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	dd4c      	ble.n	800f8f8 <__sflush_r+0xbc>
 800f85e:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f860:	2e00      	cmp	r6, #0
 800f862:	d049      	beq.n	800f8f8 <__sflush_r+0xbc>
 800f864:	2300      	movs	r3, #0
 800f866:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800f86a:	682f      	ldr	r7, [r5, #0]
 800f86c:	69e1      	ldr	r1, [r4, #28]
 800f86e:	602b      	str	r3, [r5, #0]
 800f870:	d034      	beq.n	800f8dc <__sflush_r+0xa0>
 800f872:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800f874:	89a3      	ldrh	r3, [r4, #12]
 800f876:	0759      	lsls	r1, r3, #29
 800f878:	d505      	bpl.n	800f886 <__sflush_r+0x4a>
 800f87a:	6863      	ldr	r3, [r4, #4]
 800f87c:	1ad2      	subs	r2, r2, r3
 800f87e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f880:	b10b      	cbz	r3, 800f886 <__sflush_r+0x4a>
 800f882:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f884:	1ad2      	subs	r2, r2, r3
 800f886:	2300      	movs	r3, #0
 800f888:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f88a:	69e1      	ldr	r1, [r4, #28]
 800f88c:	4628      	mov	r0, r5
 800f88e:	47b0      	blx	r6
 800f890:	1c43      	adds	r3, r0, #1
 800f892:	d106      	bne.n	800f8a2 <__sflush_r+0x66>
 800f894:	682a      	ldr	r2, [r5, #0]
 800f896:	2a1d      	cmp	r2, #29
 800f898:	d848      	bhi.n	800f92c <__sflush_r+0xf0>
 800f89a:	4b2b      	ldr	r3, [pc, #172]	@ (800f948 <__sflush_r+0x10c>)
 800f89c:	4113      	asrs	r3, r2
 800f89e:	07de      	lsls	r6, r3, #31
 800f8a0:	d444      	bmi.n	800f92c <__sflush_r+0xf0>
 800f8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8a6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f8aa:	81a2      	strh	r2, [r4, #12]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	6062      	str	r2, [r4, #4]
 800f8b0:	04d9      	lsls	r1, r3, #19
 800f8b2:	6922      	ldr	r2, [r4, #16]
 800f8b4:	6022      	str	r2, [r4, #0]
 800f8b6:	d504      	bpl.n	800f8c2 <__sflush_r+0x86>
 800f8b8:	1c42      	adds	r2, r0, #1
 800f8ba:	d101      	bne.n	800f8c0 <__sflush_r+0x84>
 800f8bc:	682b      	ldr	r3, [r5, #0]
 800f8be:	b903      	cbnz	r3, 800f8c2 <__sflush_r+0x86>
 800f8c0:	6520      	str	r0, [r4, #80]	@ 0x50
 800f8c2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f8c4:	602f      	str	r7, [r5, #0]
 800f8c6:	b1b9      	cbz	r1, 800f8f8 <__sflush_r+0xbc>
 800f8c8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800f8cc:	4299      	cmp	r1, r3
 800f8ce:	d002      	beq.n	800f8d6 <__sflush_r+0x9a>
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	f7fe fad1 	bl	800de78 <_free_r>
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800f8da:	e00d      	b.n	800f8f8 <__sflush_r+0xbc>
 800f8dc:	2301      	movs	r3, #1
 800f8de:	4628      	mov	r0, r5
 800f8e0:	47b0      	blx	r6
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	1c50      	adds	r0, r2, #1
 800f8e6:	d1c5      	bne.n	800f874 <__sflush_r+0x38>
 800f8e8:	682b      	ldr	r3, [r5, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d0c2      	beq.n	800f874 <__sflush_r+0x38>
 800f8ee:	2b1d      	cmp	r3, #29
 800f8f0:	d001      	beq.n	800f8f6 <__sflush_r+0xba>
 800f8f2:	2b16      	cmp	r3, #22
 800f8f4:	d11a      	bne.n	800f92c <__sflush_r+0xf0>
 800f8f6:	602f      	str	r7, [r5, #0]
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	e01e      	b.n	800f93a <__sflush_r+0xfe>
 800f8fc:	690f      	ldr	r7, [r1, #16]
 800f8fe:	2f00      	cmp	r7, #0
 800f900:	d0fa      	beq.n	800f8f8 <__sflush_r+0xbc>
 800f902:	0783      	lsls	r3, r0, #30
 800f904:	680e      	ldr	r6, [r1, #0]
 800f906:	bf08      	it	eq
 800f908:	694b      	ldreq	r3, [r1, #20]
 800f90a:	600f      	str	r7, [r1, #0]
 800f90c:	bf18      	it	ne
 800f90e:	2300      	movne	r3, #0
 800f910:	eba6 0807 	sub.w	r8, r6, r7
 800f914:	608b      	str	r3, [r1, #8]
 800f916:	f1b8 0f00 	cmp.w	r8, #0
 800f91a:	dded      	ble.n	800f8f8 <__sflush_r+0xbc>
 800f91c:	69e1      	ldr	r1, [r4, #28]
 800f91e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800f920:	4643      	mov	r3, r8
 800f922:	463a      	mov	r2, r7
 800f924:	4628      	mov	r0, r5
 800f926:	47b0      	blx	r6
 800f928:	2800      	cmp	r0, #0
 800f92a:	dc08      	bgt.n	800f93e <__sflush_r+0x102>
 800f92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f934:	81a3      	strh	r3, [r4, #12]
 800f936:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93e:	4407      	add	r7, r0
 800f940:	eba8 0800 	sub.w	r8, r8, r0
 800f944:	e7e7      	b.n	800f916 <__sflush_r+0xda>
 800f946:	bf00      	nop
 800f948:	dfbffffe 	.word	0xdfbffffe

0800f94c <_fflush_r>:
 800f94c:	b538      	push	{r3, r4, r5, lr}
 800f94e:	460c      	mov	r4, r1
 800f950:	4605      	mov	r5, r0
 800f952:	b118      	cbz	r0, 800f95c <_fflush_r+0x10>
 800f954:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f956:	b90b      	cbnz	r3, 800f95c <_fflush_r+0x10>
 800f958:	f7fe f912 	bl	800db80 <__sinit>
 800f95c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800f960:	b1b8      	cbz	r0, 800f992 <_fflush_r+0x46>
 800f962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f964:	07db      	lsls	r3, r3, #31
 800f966:	d404      	bmi.n	800f972 <_fflush_r+0x26>
 800f968:	0581      	lsls	r1, r0, #22
 800f96a:	d402      	bmi.n	800f972 <_fflush_r+0x26>
 800f96c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f96e:	f7fe fa1b 	bl	800dda8 <__retarget_lock_acquire_recursive>
 800f972:	4628      	mov	r0, r5
 800f974:	4621      	mov	r1, r4
 800f976:	f7ff ff61 	bl	800f83c <__sflush_r>
 800f97a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f97c:	07da      	lsls	r2, r3, #31
 800f97e:	4605      	mov	r5, r0
 800f980:	d405      	bmi.n	800f98e <_fflush_r+0x42>
 800f982:	89a3      	ldrh	r3, [r4, #12]
 800f984:	059b      	lsls	r3, r3, #22
 800f986:	d402      	bmi.n	800f98e <_fflush_r+0x42>
 800f988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f98a:	f7fe fa0e 	bl	800ddaa <__retarget_lock_release_recursive>
 800f98e:	4628      	mov	r0, r5
 800f990:	bd38      	pop	{r3, r4, r5, pc}
 800f992:	4605      	mov	r5, r0
 800f994:	e7fb      	b.n	800f98e <_fflush_r+0x42>

0800f996 <strncpy>:
 800f996:	b510      	push	{r4, lr}
 800f998:	3901      	subs	r1, #1
 800f99a:	4603      	mov	r3, r0
 800f99c:	b132      	cbz	r2, 800f9ac <strncpy+0x16>
 800f99e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f9a2:	f803 4b01 	strb.w	r4, [r3], #1
 800f9a6:	3a01      	subs	r2, #1
 800f9a8:	2c00      	cmp	r4, #0
 800f9aa:	d1f7      	bne.n	800f99c <strncpy+0x6>
 800f9ac:	441a      	add	r2, r3
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d100      	bne.n	800f9b6 <strncpy+0x20>
 800f9b4:	bd10      	pop	{r4, pc}
 800f9b6:	f803 1b01 	strb.w	r1, [r3], #1
 800f9ba:	e7f9      	b.n	800f9b0 <strncpy+0x1a>

0800f9bc <_localeconv_r>:
 800f9bc:	4800      	ldr	r0, [pc, #0]	@ (800f9c0 <_localeconv_r+0x4>)
 800f9be:	4770      	bx	lr
 800f9c0:	24000644 	.word	0x24000644

0800f9c4 <_sbrk_r>:
 800f9c4:	b538      	push	{r3, r4, r5, lr}
 800f9c6:	4d06      	ldr	r5, [pc, #24]	@ (800f9e0 <_sbrk_r+0x1c>)
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	4604      	mov	r4, r0
 800f9cc:	4608      	mov	r0, r1
 800f9ce:	602b      	str	r3, [r5, #0]
 800f9d0:	f7f2 f97a 	bl	8001cc8 <_sbrk>
 800f9d4:	1c43      	adds	r3, r0, #1
 800f9d6:	d102      	bne.n	800f9de <_sbrk_r+0x1a>
 800f9d8:	682b      	ldr	r3, [r5, #0]
 800f9da:	b103      	cbz	r3, 800f9de <_sbrk_r+0x1a>
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	bd38      	pop	{r3, r4, r5, pc}
 800f9e0:	24014b10 	.word	0x24014b10

0800f9e4 <__libc_fini_array>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	4d07      	ldr	r5, [pc, #28]	@ (800fa04 <__libc_fini_array+0x20>)
 800f9e8:	4c07      	ldr	r4, [pc, #28]	@ (800fa08 <__libc_fini_array+0x24>)
 800f9ea:	1b64      	subs	r4, r4, r5
 800f9ec:	10a4      	asrs	r4, r4, #2
 800f9ee:	b91c      	cbnz	r4, 800f9f8 <__libc_fini_array+0x14>
 800f9f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9f4:	f003 bea4 	b.w	8013740 <_fini>
 800f9f8:	3c01      	subs	r4, #1
 800f9fa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800f9fe:	4798      	blx	r3
 800fa00:	e7f5      	b.n	800f9ee <__libc_fini_array+0xa>
 800fa02:	bf00      	nop
 800fa04:	08015eb8 	.word	0x08015eb8
 800fa08:	08015ebc 	.word	0x08015ebc

0800fa0c <sysconf>:
 800fa0c:	2808      	cmp	r0, #8
 800fa0e:	b508      	push	{r3, lr}
 800fa10:	d006      	beq.n	800fa20 <sysconf+0x14>
 800fa12:	f7fe f99d 	bl	800dd50 <__errno>
 800fa16:	2316      	movs	r3, #22
 800fa18:	6003      	str	r3, [r0, #0]
 800fa1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa1e:	bd08      	pop	{r3, pc}
 800fa20:	2080      	movs	r0, #128	@ 0x80
 800fa22:	e7fc      	b.n	800fa1e <sysconf+0x12>
 800fa24:	0000      	movs	r0, r0
	...

0800fa28 <frexp>:
 800fa28:	2200      	movs	r2, #0
 800fa2a:	ee10 1a90 	vmov	r1, s1
 800fa2e:	6002      	str	r2, [r0, #0]
 800fa30:	4a17      	ldr	r2, [pc, #92]	@ (800fa90 <frexp+0x68>)
 800fa32:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d823      	bhi.n	800fa82 <frexp+0x5a>
 800fa3a:	ee10 2a10 	vmov	r2, s0
 800fa3e:	431a      	orrs	r2, r3
 800fa40:	d01f      	beq.n	800fa82 <frexp+0x5a>
 800fa42:	4a14      	ldr	r2, [pc, #80]	@ (800fa94 <frexp+0x6c>)
 800fa44:	400a      	ands	r2, r1
 800fa46:	b952      	cbnz	r2, 800fa5e <frexp+0x36>
 800fa48:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 800fa88 <frexp+0x60>
 800fa4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fa50:	ee10 1a90 	vmov	r1, s1
 800fa54:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800fa58:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fa5c:	6002      	str	r2, [r0, #0]
 800fa5e:	6802      	ldr	r2, [r0, #0]
 800fa60:	151b      	asrs	r3, r3, #20
 800fa62:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800fa66:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800fa6a:	441a      	add	r2, r3
 800fa6c:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800fa70:	6002      	str	r2, [r0, #0]
 800fa72:	ec53 2b10 	vmov	r2, r3, d0
 800fa76:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
 800fa7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fa7e:	ec43 2b10 	vmov	d0, r2, r3
 800fa82:	4770      	bx	lr
 800fa84:	f3af 8000 	nop.w
 800fa88:	00000000 	.word	0x00000000
 800fa8c:	43500000 	.word	0x43500000
 800fa90:	7fefffff 	.word	0x7fefffff
 800fa94:	7ff00000 	.word	0x7ff00000

0800fa98 <__register_exitproc>:
 800fa98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa9c:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800fb14 <__register_exitproc+0x7c>
 800faa0:	4606      	mov	r6, r0
 800faa2:	f8da 0000 	ldr.w	r0, [sl]
 800faa6:	4698      	mov	r8, r3
 800faa8:	460f      	mov	r7, r1
 800faaa:	4691      	mov	r9, r2
 800faac:	f7fe f97c 	bl	800dda8 <__retarget_lock_acquire_recursive>
 800fab0:	4b16      	ldr	r3, [pc, #88]	@ (800fb0c <__register_exitproc+0x74>)
 800fab2:	681c      	ldr	r4, [r3, #0]
 800fab4:	b90c      	cbnz	r4, 800faba <__register_exitproc+0x22>
 800fab6:	4c16      	ldr	r4, [pc, #88]	@ (800fb10 <__register_exitproc+0x78>)
 800fab8:	601c      	str	r4, [r3, #0]
 800faba:	6865      	ldr	r5, [r4, #4]
 800fabc:	f8da 0000 	ldr.w	r0, [sl]
 800fac0:	2d1f      	cmp	r5, #31
 800fac2:	dd05      	ble.n	800fad0 <__register_exitproc+0x38>
 800fac4:	f7fe f971 	bl	800ddaa <__retarget_lock_release_recursive>
 800fac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800facc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad0:	b19e      	cbz	r6, 800fafa <__register_exitproc+0x62>
 800fad2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800fad6:	2201      	movs	r2, #1
 800fad8:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800fadc:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800fae0:	40aa      	lsls	r2, r5
 800fae2:	4313      	orrs	r3, r2
 800fae4:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800fae8:	2e02      	cmp	r6, #2
 800faea:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800faee:	bf02      	ittt	eq
 800faf0:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800faf4:	4313      	orreq	r3, r2
 800faf6:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800fafa:	1c6b      	adds	r3, r5, #1
 800fafc:	3502      	adds	r5, #2
 800fafe:	6063      	str	r3, [r4, #4]
 800fb00:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800fb04:	f7fe f951 	bl	800ddaa <__retarget_lock_release_recursive>
 800fb08:	2000      	movs	r0, #0
 800fb0a:	e7df      	b.n	800facc <__register_exitproc+0x34>
 800fb0c:	24014b18 	.word	0x24014b18
 800fb10:	24014b50 	.word	0x24014b50
 800fb14:	24000140 	.word	0x24000140

0800fb18 <quorem>:
 800fb18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1c:	6903      	ldr	r3, [r0, #16]
 800fb1e:	690c      	ldr	r4, [r1, #16]
 800fb20:	42a3      	cmp	r3, r4
 800fb22:	4607      	mov	r7, r0
 800fb24:	db7e      	blt.n	800fc24 <quorem+0x10c>
 800fb26:	3c01      	subs	r4, #1
 800fb28:	f101 0814 	add.w	r8, r1, #20
 800fb2c:	00a3      	lsls	r3, r4, #2
 800fb2e:	f100 0514 	add.w	r5, r0, #20
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb38:	9301      	str	r3, [sp, #4]
 800fb3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb42:	3301      	adds	r3, #1
 800fb44:	429a      	cmp	r2, r3
 800fb46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb4a:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb4e:	d32e      	bcc.n	800fbae <quorem+0x96>
 800fb50:	f04f 0a00 	mov.w	sl, #0
 800fb54:	46c4      	mov	ip, r8
 800fb56:	46ae      	mov	lr, r5
 800fb58:	46d3      	mov	fp, sl
 800fb5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fb5e:	b298      	uxth	r0, r3
 800fb60:	fb06 a000 	mla	r0, r6, r0, sl
 800fb64:	0c02      	lsrs	r2, r0, #16
 800fb66:	0c1b      	lsrs	r3, r3, #16
 800fb68:	fb06 2303 	mla	r3, r6, r3, r2
 800fb6c:	f8de 2000 	ldr.w	r2, [lr]
 800fb70:	b280      	uxth	r0, r0
 800fb72:	b292      	uxth	r2, r2
 800fb74:	1a12      	subs	r2, r2, r0
 800fb76:	445a      	add	r2, fp
 800fb78:	f8de 0000 	ldr.w	r0, [lr]
 800fb7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb80:	b29b      	uxth	r3, r3
 800fb82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fb86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fb8a:	b292      	uxth	r2, r2
 800fb8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fb90:	45e1      	cmp	r9, ip
 800fb92:	f84e 2b04 	str.w	r2, [lr], #4
 800fb96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fb9a:	d2de      	bcs.n	800fb5a <quorem+0x42>
 800fb9c:	9b00      	ldr	r3, [sp, #0]
 800fb9e:	58eb      	ldr	r3, [r5, r3]
 800fba0:	b92b      	cbnz	r3, 800fbae <quorem+0x96>
 800fba2:	9b01      	ldr	r3, [sp, #4]
 800fba4:	3b04      	subs	r3, #4
 800fba6:	429d      	cmp	r5, r3
 800fba8:	461a      	mov	r2, r3
 800fbaa:	d32f      	bcc.n	800fc0c <quorem+0xf4>
 800fbac:	613c      	str	r4, [r7, #16]
 800fbae:	4638      	mov	r0, r7
 800fbb0:	f000 ffa4 	bl	8010afc <__mcmp>
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	db25      	blt.n	800fc04 <quorem+0xec>
 800fbb8:	4629      	mov	r1, r5
 800fbba:	2000      	movs	r0, #0
 800fbbc:	f858 2b04 	ldr.w	r2, [r8], #4
 800fbc0:	f8d1 c000 	ldr.w	ip, [r1]
 800fbc4:	fa1f fe82 	uxth.w	lr, r2
 800fbc8:	fa1f f38c 	uxth.w	r3, ip
 800fbcc:	eba3 030e 	sub.w	r3, r3, lr
 800fbd0:	4403      	add	r3, r0
 800fbd2:	0c12      	lsrs	r2, r2, #16
 800fbd4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fbd8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fbdc:	b29b      	uxth	r3, r3
 800fbde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbe2:	45c1      	cmp	r9, r8
 800fbe4:	f841 3b04 	str.w	r3, [r1], #4
 800fbe8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fbec:	d2e6      	bcs.n	800fbbc <quorem+0xa4>
 800fbee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbf6:	b922      	cbnz	r2, 800fc02 <quorem+0xea>
 800fbf8:	3b04      	subs	r3, #4
 800fbfa:	429d      	cmp	r5, r3
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	d30b      	bcc.n	800fc18 <quorem+0x100>
 800fc00:	613c      	str	r4, [r7, #16]
 800fc02:	3601      	adds	r6, #1
 800fc04:	4630      	mov	r0, r6
 800fc06:	b003      	add	sp, #12
 800fc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc0c:	6812      	ldr	r2, [r2, #0]
 800fc0e:	3b04      	subs	r3, #4
 800fc10:	2a00      	cmp	r2, #0
 800fc12:	d1cb      	bne.n	800fbac <quorem+0x94>
 800fc14:	3c01      	subs	r4, #1
 800fc16:	e7c6      	b.n	800fba6 <quorem+0x8e>
 800fc18:	6812      	ldr	r2, [r2, #0]
 800fc1a:	3b04      	subs	r3, #4
 800fc1c:	2a00      	cmp	r2, #0
 800fc1e:	d1ef      	bne.n	800fc00 <quorem+0xe8>
 800fc20:	3c01      	subs	r4, #1
 800fc22:	e7ea      	b.n	800fbfa <quorem+0xe2>
 800fc24:	2000      	movs	r0, #0
 800fc26:	e7ee      	b.n	800fc06 <quorem+0xee>

0800fc28 <_dtoa_r>:
 800fc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2c:	ed2d 8b02 	vpush	{d8}
 800fc30:	b091      	sub	sp, #68	@ 0x44
 800fc32:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fc36:	9107      	str	r1, [sp, #28]
 800fc38:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800fc3a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fc3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc3e:	ec55 4b10 	vmov	r4, r5, d0
 800fc42:	4681      	mov	r9, r0
 800fc44:	930d      	str	r3, [sp, #52]	@ 0x34
 800fc46:	b149      	cbz	r1, 800fc5c <_dtoa_r+0x34>
 800fc48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc4a:	604a      	str	r2, [r1, #4]
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	4093      	lsls	r3, r2
 800fc50:	608b      	str	r3, [r1, #8]
 800fc52:	f000 fd4c 	bl	80106ee <_Bfree>
 800fc56:	2300      	movs	r3, #0
 800fc58:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 800fc5c:	1e2b      	subs	r3, r5, #0
 800fc5e:	bfbb      	ittet	lt
 800fc60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fc64:	9303      	strlt	r3, [sp, #12]
 800fc66:	2300      	movge	r3, #0
 800fc68:	2201      	movlt	r2, #1
 800fc6a:	bfac      	ite	ge
 800fc6c:	6033      	strge	r3, [r6, #0]
 800fc6e:	6032      	strlt	r2, [r6, #0]
 800fc70:	4b91      	ldr	r3, [pc, #580]	@ (800feb8 <_dtoa_r+0x290>)
 800fc72:	9e03      	ldr	r6, [sp, #12]
 800fc74:	43b3      	bics	r3, r6
 800fc76:	d114      	bne.n	800fca2 <_dtoa_r+0x7a>
 800fc78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fc7e:	6013      	str	r3, [r2, #0]
 800fc80:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fc84:	4323      	orrs	r3, r4
 800fc86:	f000 84df 	beq.w	8010648 <_dtoa_r+0xa20>
 800fc8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc8c:	4f8b      	ldr	r7, [pc, #556]	@ (800febc <_dtoa_r+0x294>)
 800fc8e:	b113      	cbz	r3, 800fc96 <_dtoa_r+0x6e>
 800fc90:	1cfb      	adds	r3, r7, #3
 800fc92:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fc94:	6013      	str	r3, [r2, #0]
 800fc96:	4638      	mov	r0, r7
 800fc98:	b011      	add	sp, #68	@ 0x44
 800fc9a:	ecbd 8b02 	vpop	{d8}
 800fc9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fca2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fca6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fcaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcae:	d109      	bne.n	800fcc4 <_dtoa_r+0x9c>
 800fcb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	6013      	str	r3, [r2, #0]
 800fcb6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fcb8:	b113      	cbz	r3, 800fcc0 <_dtoa_r+0x98>
 800fcba:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fcbc:	4b80      	ldr	r3, [pc, #512]	@ (800fec0 <_dtoa_r+0x298>)
 800fcbe:	6013      	str	r3, [r2, #0]
 800fcc0:	4f80      	ldr	r7, [pc, #512]	@ (800fec4 <_dtoa_r+0x29c>)
 800fcc2:	e7e8      	b.n	800fc96 <_dtoa_r+0x6e>
 800fcc4:	aa0e      	add	r2, sp, #56	@ 0x38
 800fcc6:	a90f      	add	r1, sp, #60	@ 0x3c
 800fcc8:	4648      	mov	r0, r9
 800fcca:	eeb0 0b48 	vmov.f64	d0, d8
 800fcce:	f000 ffc5 	bl	8010c5c <__d2b>
 800fcd2:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fcd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fcd8:	9001      	str	r0, [sp, #4]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d045      	beq.n	800fd6a <_dtoa_r+0x142>
 800fcde:	eeb0 7b48 	vmov.f64	d7, d8
 800fce2:	ee18 1a90 	vmov	r1, s17
 800fce6:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fcea:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fcee:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fcf2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fcf6:	2500      	movs	r5, #0
 800fcf8:	ee07 1a90 	vmov	s15, r1
 800fcfc:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fd00:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 800fea0 <_dtoa_r+0x278>
 800fd04:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fd08:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 800fea8 <_dtoa_r+0x280>
 800fd0c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fd10:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 800feb0 <_dtoa_r+0x288>
 800fd14:	ee07 3a90 	vmov	s15, r3
 800fd18:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fd1c:	eeb0 7b46 	vmov.f64	d7, d6
 800fd20:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fd24:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fd28:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd30:	ee16 8a90 	vmov	r8, s13
 800fd34:	d508      	bpl.n	800fd48 <_dtoa_r+0x120>
 800fd36:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fd3a:	eeb4 6b47 	vcmp.f64	d6, d7
 800fd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd42:	bf18      	it	ne
 800fd44:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800fd48:	f1b8 0f16 	cmp.w	r8, #22
 800fd4c:	d82b      	bhi.n	800fda6 <_dtoa_r+0x17e>
 800fd4e:	495e      	ldr	r1, [pc, #376]	@ (800fec8 <_dtoa_r+0x2a0>)
 800fd50:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fd54:	ed91 7b00 	vldr	d7, [r1]
 800fd58:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd60:	d501      	bpl.n	800fd66 <_dtoa_r+0x13e>
 800fd62:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800fd66:	2100      	movs	r1, #0
 800fd68:	e01e      	b.n	800fda8 <_dtoa_r+0x180>
 800fd6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd6c:	4413      	add	r3, r2
 800fd6e:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fd72:	2920      	cmp	r1, #32
 800fd74:	bfc1      	itttt	gt
 800fd76:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fd7a:	408e      	lslgt	r6, r1
 800fd7c:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fd80:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fd84:	bfd6      	itet	le
 800fd86:	f1c1 0120 	rsble	r1, r1, #32
 800fd8a:	4331      	orrgt	r1, r6
 800fd8c:	fa04 f101 	lslle.w	r1, r4, r1
 800fd90:	ee07 1a90 	vmov	s15, r1
 800fd94:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fd98:	3b01      	subs	r3, #1
 800fd9a:	ee17 1a90 	vmov	r1, s15
 800fd9e:	2501      	movs	r5, #1
 800fda0:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fda4:	e7a8      	b.n	800fcf8 <_dtoa_r+0xd0>
 800fda6:	2101      	movs	r1, #1
 800fda8:	1ad2      	subs	r2, r2, r3
 800fdaa:	1e53      	subs	r3, r2, #1
 800fdac:	9306      	str	r3, [sp, #24]
 800fdae:	bf45      	ittet	mi
 800fdb0:	f1c2 0301 	rsbmi	r3, r2, #1
 800fdb4:	9305      	strmi	r3, [sp, #20]
 800fdb6:	2300      	movpl	r3, #0
 800fdb8:	2300      	movmi	r3, #0
 800fdba:	bf4c      	ite	mi
 800fdbc:	9306      	strmi	r3, [sp, #24]
 800fdbe:	9305      	strpl	r3, [sp, #20]
 800fdc0:	f1b8 0f00 	cmp.w	r8, #0
 800fdc4:	910c      	str	r1, [sp, #48]	@ 0x30
 800fdc6:	db18      	blt.n	800fdfa <_dtoa_r+0x1d2>
 800fdc8:	9b06      	ldr	r3, [sp, #24]
 800fdca:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fdce:	4443      	add	r3, r8
 800fdd0:	9306      	str	r3, [sp, #24]
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	9a07      	ldr	r2, [sp, #28]
 800fdd6:	2a09      	cmp	r2, #9
 800fdd8:	d84a      	bhi.n	800fe70 <_dtoa_r+0x248>
 800fdda:	2a05      	cmp	r2, #5
 800fddc:	bfc4      	itt	gt
 800fdde:	3a04      	subgt	r2, #4
 800fde0:	9207      	strgt	r2, [sp, #28]
 800fde2:	9a07      	ldr	r2, [sp, #28]
 800fde4:	f1a2 0202 	sub.w	r2, r2, #2
 800fde8:	bfcc      	ite	gt
 800fdea:	2400      	movgt	r4, #0
 800fdec:	2401      	movle	r4, #1
 800fdee:	2a03      	cmp	r2, #3
 800fdf0:	d849      	bhi.n	800fe86 <_dtoa_r+0x25e>
 800fdf2:	e8df f002 	tbb	[pc, r2]
 800fdf6:	2f0b      	.short	0x2f0b
 800fdf8:	3b2d      	.short	0x3b2d
 800fdfa:	9b05      	ldr	r3, [sp, #20]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	eba3 0308 	sub.w	r3, r3, r8
 800fe02:	9305      	str	r3, [sp, #20]
 800fe04:	920a      	str	r2, [sp, #40]	@ 0x28
 800fe06:	f1c8 0300 	rsb	r3, r8, #0
 800fe0a:	e7e3      	b.n	800fdd4 <_dtoa_r+0x1ac>
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	9208      	str	r2, [sp, #32]
 800fe10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe12:	2a00      	cmp	r2, #0
 800fe14:	dc3a      	bgt.n	800fe8c <_dtoa_r+0x264>
 800fe16:	f04f 0b01 	mov.w	fp, #1
 800fe1a:	46da      	mov	sl, fp
 800fe1c:	465a      	mov	r2, fp
 800fe1e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fe22:	2100      	movs	r1, #0
 800fe24:	2004      	movs	r0, #4
 800fe26:	f100 0614 	add.w	r6, r0, #20
 800fe2a:	4296      	cmp	r6, r2
 800fe2c:	d933      	bls.n	800fe96 <_dtoa_r+0x26e>
 800fe2e:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 800fe32:	4648      	mov	r0, r9
 800fe34:	9304      	str	r3, [sp, #16]
 800fe36:	f000 fc35 	bl	80106a4 <_Balloc>
 800fe3a:	9b04      	ldr	r3, [sp, #16]
 800fe3c:	4607      	mov	r7, r0
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d148      	bne.n	800fed4 <_dtoa_r+0x2ac>
 800fe42:	4b22      	ldr	r3, [pc, #136]	@ (800fecc <_dtoa_r+0x2a4>)
 800fe44:	4602      	mov	r2, r0
 800fe46:	f240 11af 	movw	r1, #431	@ 0x1af
 800fe4a:	4821      	ldr	r0, [pc, #132]	@ (800fed0 <_dtoa_r+0x2a8>)
 800fe4c:	f001 f80a 	bl	8010e64 <__assert_func>
 800fe50:	2201      	movs	r2, #1
 800fe52:	e7dc      	b.n	800fe0e <_dtoa_r+0x1e6>
 800fe54:	2200      	movs	r2, #0
 800fe56:	9208      	str	r2, [sp, #32]
 800fe58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe5a:	eb08 0b02 	add.w	fp, r8, r2
 800fe5e:	f10b 0a01 	add.w	sl, fp, #1
 800fe62:	4652      	mov	r2, sl
 800fe64:	2a01      	cmp	r2, #1
 800fe66:	bfb8      	it	lt
 800fe68:	2201      	movlt	r2, #1
 800fe6a:	e7da      	b.n	800fe22 <_dtoa_r+0x1fa>
 800fe6c:	2201      	movs	r2, #1
 800fe6e:	e7f2      	b.n	800fe56 <_dtoa_r+0x22e>
 800fe70:	2401      	movs	r4, #1
 800fe72:	2200      	movs	r2, #0
 800fe74:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800fe78:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fe7c:	2100      	movs	r1, #0
 800fe7e:	46da      	mov	sl, fp
 800fe80:	2212      	movs	r2, #18
 800fe82:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe84:	e7cd      	b.n	800fe22 <_dtoa_r+0x1fa>
 800fe86:	2201      	movs	r2, #1
 800fe88:	9208      	str	r2, [sp, #32]
 800fe8a:	e7f5      	b.n	800fe78 <_dtoa_r+0x250>
 800fe8c:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800fe90:	46da      	mov	sl, fp
 800fe92:	465a      	mov	r2, fp
 800fe94:	e7c5      	b.n	800fe22 <_dtoa_r+0x1fa>
 800fe96:	3101      	adds	r1, #1
 800fe98:	0040      	lsls	r0, r0, #1
 800fe9a:	e7c4      	b.n	800fe26 <_dtoa_r+0x1fe>
 800fe9c:	f3af 8000 	nop.w
 800fea0:	636f4361 	.word	0x636f4361
 800fea4:	3fd287a7 	.word	0x3fd287a7
 800fea8:	8b60c8b3 	.word	0x8b60c8b3
 800feac:	3fc68a28 	.word	0x3fc68a28
 800feb0:	509f79fb 	.word	0x509f79fb
 800feb4:	3fd34413 	.word	0x3fd34413
 800feb8:	7ff00000 	.word	0x7ff00000
 800febc:	0801385d 	.word	0x0801385d
 800fec0:	08013833 	.word	0x08013833
 800fec4:	08013832 	.word	0x08013832
 800fec8:	08013958 	.word	0x08013958
 800fecc:	08013861 	.word	0x08013861
 800fed0:	08013872 	.word	0x08013872
 800fed4:	f1ba 0f0e 	cmp.w	sl, #14
 800fed8:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 800fedc:	d86f      	bhi.n	800ffbe <_dtoa_r+0x396>
 800fede:	2c00      	cmp	r4, #0
 800fee0:	d06d      	beq.n	800ffbe <_dtoa_r+0x396>
 800fee2:	f1b8 0f00 	cmp.w	r8, #0
 800fee6:	f340 80c2 	ble.w	801006e <_dtoa_r+0x446>
 800feea:	4aca      	ldr	r2, [pc, #808]	@ (8010214 <_dtoa_r+0x5ec>)
 800feec:	f008 010f 	and.w	r1, r8, #15
 800fef0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800fef4:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800fef8:	ed92 7b00 	vldr	d7, [r2]
 800fefc:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ff00:	f000 80a9 	beq.w	8010056 <_dtoa_r+0x42e>
 800ff04:	4ac4      	ldr	r2, [pc, #784]	@ (8010218 <_dtoa_r+0x5f0>)
 800ff06:	ed92 6b08 	vldr	d6, [r2, #32]
 800ff0a:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ff0e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ff12:	f001 010f 	and.w	r1, r1, #15
 800ff16:	2203      	movs	r2, #3
 800ff18:	48bf      	ldr	r0, [pc, #764]	@ (8010218 <_dtoa_r+0x5f0>)
 800ff1a:	2900      	cmp	r1, #0
 800ff1c:	f040 809d 	bne.w	801005a <_dtoa_r+0x432>
 800ff20:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ff24:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ff28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff2c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ff2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff32:	2900      	cmp	r1, #0
 800ff34:	f000 80c1 	beq.w	80100ba <_dtoa_r+0x492>
 800ff38:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ff3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ff40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff44:	f140 80b9 	bpl.w	80100ba <_dtoa_r+0x492>
 800ff48:	f1ba 0f00 	cmp.w	sl, #0
 800ff4c:	f000 80b5 	beq.w	80100ba <_dtoa_r+0x492>
 800ff50:	f1bb 0f00 	cmp.w	fp, #0
 800ff54:	dd31      	ble.n	800ffba <_dtoa_r+0x392>
 800ff56:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ff5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff62:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800ff66:	9104      	str	r1, [sp, #16]
 800ff68:	3201      	adds	r2, #1
 800ff6a:	465c      	mov	r4, fp
 800ff6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ff70:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ff74:	ee07 2a90 	vmov	s15, r2
 800ff78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ff7c:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ff80:	ee15 2a90 	vmov	r2, s11
 800ff84:	ec51 0b15 	vmov	r0, r1, d5
 800ff88:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ff8c:	2c00      	cmp	r4, #0
 800ff8e:	f040 8098 	bne.w	80100c2 <_dtoa_r+0x49a>
 800ff92:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ff96:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ff9a:	ec41 0b17 	vmov	d7, r0, r1
 800ff9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ffa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa6:	f300 8260 	bgt.w	801046a <_dtoa_r+0x842>
 800ffaa:	eeb1 7b47 	vneg.f64	d7, d7
 800ffae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ffb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb6:	f100 80f5 	bmi.w	80101a4 <_dtoa_r+0x57c>
 800ffba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ffbe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ffc0:	2a00      	cmp	r2, #0
 800ffc2:	f2c0 812b 	blt.w	801021c <_dtoa_r+0x5f4>
 800ffc6:	f1b8 0f0e 	cmp.w	r8, #14
 800ffca:	f300 8127 	bgt.w	801021c <_dtoa_r+0x5f4>
 800ffce:	4b91      	ldr	r3, [pc, #580]	@ (8010214 <_dtoa_r+0x5ec>)
 800ffd0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ffd4:	ed93 6b00 	vldr	d6, [r3]
 800ffd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	da03      	bge.n	800ffe6 <_dtoa_r+0x3be>
 800ffde:	f1ba 0f00 	cmp.w	sl, #0
 800ffe2:	f340 80d2 	ble.w	801018a <_dtoa_r+0x562>
 800ffe6:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ffea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ffee:	463e      	mov	r6, r7
 800fff0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800fff4:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800fff8:	ee15 3a10 	vmov	r3, s10
 800fffc:	3330      	adds	r3, #48	@ 0x30
 800fffe:	f806 3b01 	strb.w	r3, [r6], #1
 8010002:	1bf3      	subs	r3, r6, r7
 8010004:	459a      	cmp	sl, r3
 8010006:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801000a:	eea3 7b46 	vfms.f64	d7, d3, d6
 801000e:	f040 80f8 	bne.w	8010202 <_dtoa_r+0x5da>
 8010012:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010016:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801001a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801001e:	f300 80dd 	bgt.w	80101dc <_dtoa_r+0x5b4>
 8010022:	eeb4 7b46 	vcmp.f64	d7, d6
 8010026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801002a:	d104      	bne.n	8010036 <_dtoa_r+0x40e>
 801002c:	ee15 3a10 	vmov	r3, s10
 8010030:	07db      	lsls	r3, r3, #31
 8010032:	f100 80d3 	bmi.w	80101dc <_dtoa_r+0x5b4>
 8010036:	9901      	ldr	r1, [sp, #4]
 8010038:	4648      	mov	r0, r9
 801003a:	f000 fb58 	bl	80106ee <_Bfree>
 801003e:	2300      	movs	r3, #0
 8010040:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010042:	7033      	strb	r3, [r6, #0]
 8010044:	f108 0301 	add.w	r3, r8, #1
 8010048:	6013      	str	r3, [r2, #0]
 801004a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801004c:	2b00      	cmp	r3, #0
 801004e:	f43f ae22 	beq.w	800fc96 <_dtoa_r+0x6e>
 8010052:	601e      	str	r6, [r3, #0]
 8010054:	e61f      	b.n	800fc96 <_dtoa_r+0x6e>
 8010056:	2202      	movs	r2, #2
 8010058:	e75e      	b.n	800ff18 <_dtoa_r+0x2f0>
 801005a:	07cc      	lsls	r4, r1, #31
 801005c:	d504      	bpl.n	8010068 <_dtoa_r+0x440>
 801005e:	ed90 6b00 	vldr	d6, [r0]
 8010062:	3201      	adds	r2, #1
 8010064:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010068:	1049      	asrs	r1, r1, #1
 801006a:	3008      	adds	r0, #8
 801006c:	e755      	b.n	800ff1a <_dtoa_r+0x2f2>
 801006e:	d022      	beq.n	80100b6 <_dtoa_r+0x48e>
 8010070:	f1c8 0100 	rsb	r1, r8, #0
 8010074:	4a67      	ldr	r2, [pc, #412]	@ (8010214 <_dtoa_r+0x5ec>)
 8010076:	f001 000f 	and.w	r0, r1, #15
 801007a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801007e:	ed92 7b00 	vldr	d7, [r2]
 8010082:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010086:	ed8d 7b02 	vstr	d7, [sp, #8]
 801008a:	4863      	ldr	r0, [pc, #396]	@ (8010218 <_dtoa_r+0x5f0>)
 801008c:	1109      	asrs	r1, r1, #4
 801008e:	2400      	movs	r4, #0
 8010090:	2202      	movs	r2, #2
 8010092:	b929      	cbnz	r1, 80100a0 <_dtoa_r+0x478>
 8010094:	2c00      	cmp	r4, #0
 8010096:	f43f af49 	beq.w	800ff2c <_dtoa_r+0x304>
 801009a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801009e:	e745      	b.n	800ff2c <_dtoa_r+0x304>
 80100a0:	07ce      	lsls	r6, r1, #31
 80100a2:	d505      	bpl.n	80100b0 <_dtoa_r+0x488>
 80100a4:	ed90 6b00 	vldr	d6, [r0]
 80100a8:	3201      	adds	r2, #1
 80100aa:	2401      	movs	r4, #1
 80100ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80100b0:	1049      	asrs	r1, r1, #1
 80100b2:	3008      	adds	r0, #8
 80100b4:	e7ed      	b.n	8010092 <_dtoa_r+0x46a>
 80100b6:	2202      	movs	r2, #2
 80100b8:	e738      	b.n	800ff2c <_dtoa_r+0x304>
 80100ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80100be:	4654      	mov	r4, sl
 80100c0:	e754      	b.n	800ff6c <_dtoa_r+0x344>
 80100c2:	4a54      	ldr	r2, [pc, #336]	@ (8010214 <_dtoa_r+0x5ec>)
 80100c4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80100c8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80100cc:	9a08      	ldr	r2, [sp, #32]
 80100ce:	ec41 0b17 	vmov	d7, r0, r1
 80100d2:	443c      	add	r4, r7
 80100d4:	b34a      	cbz	r2, 801012a <_dtoa_r+0x502>
 80100d6:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80100da:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80100de:	463e      	mov	r6, r7
 80100e0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80100e4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80100e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80100ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80100f0:	ee14 2a90 	vmov	r2, s9
 80100f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80100f8:	3230      	adds	r2, #48	@ 0x30
 80100fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80100fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010106:	f806 2b01 	strb.w	r2, [r6], #1
 801010a:	d438      	bmi.n	801017e <_dtoa_r+0x556>
 801010c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010110:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010118:	d462      	bmi.n	80101e0 <_dtoa_r+0x5b8>
 801011a:	42a6      	cmp	r6, r4
 801011c:	f43f af4d 	beq.w	800ffba <_dtoa_r+0x392>
 8010120:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010124:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010128:	e7e0      	b.n	80100ec <_dtoa_r+0x4c4>
 801012a:	4621      	mov	r1, r4
 801012c:	463e      	mov	r6, r7
 801012e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010132:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010136:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801013a:	ee14 2a90 	vmov	r2, s9
 801013e:	3230      	adds	r2, #48	@ 0x30
 8010140:	f806 2b01 	strb.w	r2, [r6], #1
 8010144:	42a6      	cmp	r6, r4
 8010146:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801014a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801014e:	d119      	bne.n	8010184 <_dtoa_r+0x55c>
 8010150:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010154:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010158:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801015c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010160:	dc3e      	bgt.n	80101e0 <_dtoa_r+0x5b8>
 8010162:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010166:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801016a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016e:	f57f af24 	bpl.w	800ffba <_dtoa_r+0x392>
 8010172:	460e      	mov	r6, r1
 8010174:	3901      	subs	r1, #1
 8010176:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801017a:	2b30      	cmp	r3, #48	@ 0x30
 801017c:	d0f9      	beq.n	8010172 <_dtoa_r+0x54a>
 801017e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010182:	e758      	b.n	8010036 <_dtoa_r+0x40e>
 8010184:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010188:	e7d5      	b.n	8010136 <_dtoa_r+0x50e>
 801018a:	d10b      	bne.n	80101a4 <_dtoa_r+0x57c>
 801018c:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010190:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010194:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010198:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801019c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a0:	f2c0 8160 	blt.w	8010464 <_dtoa_r+0x83c>
 80101a4:	2400      	movs	r4, #0
 80101a6:	4625      	mov	r5, r4
 80101a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101aa:	43db      	mvns	r3, r3
 80101ac:	9304      	str	r3, [sp, #16]
 80101ae:	463e      	mov	r6, r7
 80101b0:	f04f 0800 	mov.w	r8, #0
 80101b4:	4621      	mov	r1, r4
 80101b6:	4648      	mov	r0, r9
 80101b8:	f000 fa99 	bl	80106ee <_Bfree>
 80101bc:	2d00      	cmp	r5, #0
 80101be:	d0de      	beq.n	801017e <_dtoa_r+0x556>
 80101c0:	f1b8 0f00 	cmp.w	r8, #0
 80101c4:	d005      	beq.n	80101d2 <_dtoa_r+0x5aa>
 80101c6:	45a8      	cmp	r8, r5
 80101c8:	d003      	beq.n	80101d2 <_dtoa_r+0x5aa>
 80101ca:	4641      	mov	r1, r8
 80101cc:	4648      	mov	r0, r9
 80101ce:	f000 fa8e 	bl	80106ee <_Bfree>
 80101d2:	4629      	mov	r1, r5
 80101d4:	4648      	mov	r0, r9
 80101d6:	f000 fa8a 	bl	80106ee <_Bfree>
 80101da:	e7d0      	b.n	801017e <_dtoa_r+0x556>
 80101dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80101e0:	4633      	mov	r3, r6
 80101e2:	461e      	mov	r6, r3
 80101e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101e8:	2a39      	cmp	r2, #57	@ 0x39
 80101ea:	d106      	bne.n	80101fa <_dtoa_r+0x5d2>
 80101ec:	429f      	cmp	r7, r3
 80101ee:	d1f8      	bne.n	80101e2 <_dtoa_r+0x5ba>
 80101f0:	9a04      	ldr	r2, [sp, #16]
 80101f2:	3201      	adds	r2, #1
 80101f4:	9204      	str	r2, [sp, #16]
 80101f6:	2230      	movs	r2, #48	@ 0x30
 80101f8:	703a      	strb	r2, [r7, #0]
 80101fa:	781a      	ldrb	r2, [r3, #0]
 80101fc:	3201      	adds	r2, #1
 80101fe:	701a      	strb	r2, [r3, #0]
 8010200:	e7bd      	b.n	801017e <_dtoa_r+0x556>
 8010202:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010206:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801020a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801020e:	f47f aeef 	bne.w	800fff0 <_dtoa_r+0x3c8>
 8010212:	e710      	b.n	8010036 <_dtoa_r+0x40e>
 8010214:	08013958 	.word	0x08013958
 8010218:	08013930 	.word	0x08013930
 801021c:	9908      	ldr	r1, [sp, #32]
 801021e:	2900      	cmp	r1, #0
 8010220:	f000 80e3 	beq.w	80103ea <_dtoa_r+0x7c2>
 8010224:	9907      	ldr	r1, [sp, #28]
 8010226:	2901      	cmp	r1, #1
 8010228:	f300 80c8 	bgt.w	80103bc <_dtoa_r+0x794>
 801022c:	2d00      	cmp	r5, #0
 801022e:	f000 80c1 	beq.w	80103b4 <_dtoa_r+0x78c>
 8010232:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010236:	9e05      	ldr	r6, [sp, #20]
 8010238:	461c      	mov	r4, r3
 801023a:	9304      	str	r3, [sp, #16]
 801023c:	9b05      	ldr	r3, [sp, #20]
 801023e:	4413      	add	r3, r2
 8010240:	9305      	str	r3, [sp, #20]
 8010242:	9b06      	ldr	r3, [sp, #24]
 8010244:	2101      	movs	r1, #1
 8010246:	4413      	add	r3, r2
 8010248:	4648      	mov	r0, r9
 801024a:	9306      	str	r3, [sp, #24]
 801024c:	f000 faea 	bl	8010824 <__i2b>
 8010250:	9b04      	ldr	r3, [sp, #16]
 8010252:	4605      	mov	r5, r0
 8010254:	b166      	cbz	r6, 8010270 <_dtoa_r+0x648>
 8010256:	9a06      	ldr	r2, [sp, #24]
 8010258:	2a00      	cmp	r2, #0
 801025a:	dd09      	ble.n	8010270 <_dtoa_r+0x648>
 801025c:	42b2      	cmp	r2, r6
 801025e:	9905      	ldr	r1, [sp, #20]
 8010260:	bfa8      	it	ge
 8010262:	4632      	movge	r2, r6
 8010264:	1a89      	subs	r1, r1, r2
 8010266:	9105      	str	r1, [sp, #20]
 8010268:	9906      	ldr	r1, [sp, #24]
 801026a:	1ab6      	subs	r6, r6, r2
 801026c:	1a8a      	subs	r2, r1, r2
 801026e:	9206      	str	r2, [sp, #24]
 8010270:	b1fb      	cbz	r3, 80102b2 <_dtoa_r+0x68a>
 8010272:	9a08      	ldr	r2, [sp, #32]
 8010274:	2a00      	cmp	r2, #0
 8010276:	f000 80bc 	beq.w	80103f2 <_dtoa_r+0x7ca>
 801027a:	b19c      	cbz	r4, 80102a4 <_dtoa_r+0x67c>
 801027c:	4629      	mov	r1, r5
 801027e:	4622      	mov	r2, r4
 8010280:	4648      	mov	r0, r9
 8010282:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010284:	f000 fb8e 	bl	80109a4 <__pow5mult>
 8010288:	9a01      	ldr	r2, [sp, #4]
 801028a:	4601      	mov	r1, r0
 801028c:	4605      	mov	r5, r0
 801028e:	4648      	mov	r0, r9
 8010290:	f000 fade 	bl	8010850 <__multiply>
 8010294:	9901      	ldr	r1, [sp, #4]
 8010296:	9004      	str	r0, [sp, #16]
 8010298:	4648      	mov	r0, r9
 801029a:	f000 fa28 	bl	80106ee <_Bfree>
 801029e:	9a04      	ldr	r2, [sp, #16]
 80102a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102a2:	9201      	str	r2, [sp, #4]
 80102a4:	1b1a      	subs	r2, r3, r4
 80102a6:	d004      	beq.n	80102b2 <_dtoa_r+0x68a>
 80102a8:	9901      	ldr	r1, [sp, #4]
 80102aa:	4648      	mov	r0, r9
 80102ac:	f000 fb7a 	bl	80109a4 <__pow5mult>
 80102b0:	9001      	str	r0, [sp, #4]
 80102b2:	2101      	movs	r1, #1
 80102b4:	4648      	mov	r0, r9
 80102b6:	f000 fab5 	bl	8010824 <__i2b>
 80102ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102bc:	4604      	mov	r4, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	f000 81cb 	beq.w	801065a <_dtoa_r+0xa32>
 80102c4:	461a      	mov	r2, r3
 80102c6:	4601      	mov	r1, r0
 80102c8:	4648      	mov	r0, r9
 80102ca:	f000 fb6b 	bl	80109a4 <__pow5mult>
 80102ce:	9b07      	ldr	r3, [sp, #28]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	4604      	mov	r4, r0
 80102d4:	f300 8095 	bgt.w	8010402 <_dtoa_r+0x7da>
 80102d8:	9b02      	ldr	r3, [sp, #8]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f040 808b 	bne.w	80103f6 <_dtoa_r+0x7ce>
 80102e0:	9b03      	ldr	r3, [sp, #12]
 80102e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80102e6:	2a00      	cmp	r2, #0
 80102e8:	f040 8087 	bne.w	80103fa <_dtoa_r+0x7d2>
 80102ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80102f0:	0d12      	lsrs	r2, r2, #20
 80102f2:	0512      	lsls	r2, r2, #20
 80102f4:	2a00      	cmp	r2, #0
 80102f6:	f000 8082 	beq.w	80103fe <_dtoa_r+0x7d6>
 80102fa:	9b05      	ldr	r3, [sp, #20]
 80102fc:	3301      	adds	r3, #1
 80102fe:	9305      	str	r3, [sp, #20]
 8010300:	9b06      	ldr	r3, [sp, #24]
 8010302:	3301      	adds	r3, #1
 8010304:	9306      	str	r3, [sp, #24]
 8010306:	2301      	movs	r3, #1
 8010308:	930b      	str	r3, [sp, #44]	@ 0x2c
 801030a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801030c:	2b00      	cmp	r3, #0
 801030e:	f000 81aa 	beq.w	8010666 <_dtoa_r+0xa3e>
 8010312:	6922      	ldr	r2, [r4, #16]
 8010314:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010318:	6910      	ldr	r0, [r2, #16]
 801031a:	f000 fa37 	bl	801078c <__hi0bits>
 801031e:	f1c0 0020 	rsb	r0, r0, #32
 8010322:	9b06      	ldr	r3, [sp, #24]
 8010324:	4418      	add	r0, r3
 8010326:	f010 001f 	ands.w	r0, r0, #31
 801032a:	d076      	beq.n	801041a <_dtoa_r+0x7f2>
 801032c:	f1c0 0220 	rsb	r2, r0, #32
 8010330:	2a04      	cmp	r2, #4
 8010332:	dd69      	ble.n	8010408 <_dtoa_r+0x7e0>
 8010334:	9b05      	ldr	r3, [sp, #20]
 8010336:	f1c0 001c 	rsb	r0, r0, #28
 801033a:	4403      	add	r3, r0
 801033c:	9305      	str	r3, [sp, #20]
 801033e:	9b06      	ldr	r3, [sp, #24]
 8010340:	4406      	add	r6, r0
 8010342:	4403      	add	r3, r0
 8010344:	9306      	str	r3, [sp, #24]
 8010346:	9b05      	ldr	r3, [sp, #20]
 8010348:	2b00      	cmp	r3, #0
 801034a:	dd05      	ble.n	8010358 <_dtoa_r+0x730>
 801034c:	9901      	ldr	r1, [sp, #4]
 801034e:	461a      	mov	r2, r3
 8010350:	4648      	mov	r0, r9
 8010352:	f000 fb67 	bl	8010a24 <__lshift>
 8010356:	9001      	str	r0, [sp, #4]
 8010358:	9b06      	ldr	r3, [sp, #24]
 801035a:	2b00      	cmp	r3, #0
 801035c:	dd05      	ble.n	801036a <_dtoa_r+0x742>
 801035e:	4621      	mov	r1, r4
 8010360:	461a      	mov	r2, r3
 8010362:	4648      	mov	r0, r9
 8010364:	f000 fb5e 	bl	8010a24 <__lshift>
 8010368:	4604      	mov	r4, r0
 801036a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801036c:	2b00      	cmp	r3, #0
 801036e:	d056      	beq.n	801041e <_dtoa_r+0x7f6>
 8010370:	9801      	ldr	r0, [sp, #4]
 8010372:	4621      	mov	r1, r4
 8010374:	f000 fbc2 	bl	8010afc <__mcmp>
 8010378:	2800      	cmp	r0, #0
 801037a:	da50      	bge.n	801041e <_dtoa_r+0x7f6>
 801037c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8010380:	9304      	str	r3, [sp, #16]
 8010382:	9901      	ldr	r1, [sp, #4]
 8010384:	2300      	movs	r3, #0
 8010386:	220a      	movs	r2, #10
 8010388:	4648      	mov	r0, r9
 801038a:	f000 f9b9 	bl	8010700 <__multadd>
 801038e:	9b08      	ldr	r3, [sp, #32]
 8010390:	9001      	str	r0, [sp, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	f000 8169 	beq.w	801066a <_dtoa_r+0xa42>
 8010398:	4629      	mov	r1, r5
 801039a:	2300      	movs	r3, #0
 801039c:	220a      	movs	r2, #10
 801039e:	4648      	mov	r0, r9
 80103a0:	f000 f9ae 	bl	8010700 <__multadd>
 80103a4:	f1bb 0f00 	cmp.w	fp, #0
 80103a8:	4605      	mov	r5, r0
 80103aa:	dc64      	bgt.n	8010476 <_dtoa_r+0x84e>
 80103ac:	9b07      	ldr	r3, [sp, #28]
 80103ae:	2b02      	cmp	r3, #2
 80103b0:	dc3e      	bgt.n	8010430 <_dtoa_r+0x808>
 80103b2:	e060      	b.n	8010476 <_dtoa_r+0x84e>
 80103b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80103ba:	e73c      	b.n	8010236 <_dtoa_r+0x60e>
 80103bc:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80103c0:	42a3      	cmp	r3, r4
 80103c2:	bfbf      	itttt	lt
 80103c4:	1ae2      	sublt	r2, r4, r3
 80103c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80103c8:	189b      	addlt	r3, r3, r2
 80103ca:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80103cc:	bfae      	itee	ge
 80103ce:	1b1c      	subge	r4, r3, r4
 80103d0:	4623      	movlt	r3, r4
 80103d2:	2400      	movlt	r4, #0
 80103d4:	f1ba 0f00 	cmp.w	sl, #0
 80103d8:	bfb5      	itete	lt
 80103da:	9a05      	ldrlt	r2, [sp, #20]
 80103dc:	9e05      	ldrge	r6, [sp, #20]
 80103de:	eba2 060a 	sublt.w	r6, r2, sl
 80103e2:	4652      	movge	r2, sl
 80103e4:	bfb8      	it	lt
 80103e6:	2200      	movlt	r2, #0
 80103e8:	e727      	b.n	801023a <_dtoa_r+0x612>
 80103ea:	9e05      	ldr	r6, [sp, #20]
 80103ec:	9d08      	ldr	r5, [sp, #32]
 80103ee:	461c      	mov	r4, r3
 80103f0:	e730      	b.n	8010254 <_dtoa_r+0x62c>
 80103f2:	461a      	mov	r2, r3
 80103f4:	e758      	b.n	80102a8 <_dtoa_r+0x680>
 80103f6:	2300      	movs	r3, #0
 80103f8:	e786      	b.n	8010308 <_dtoa_r+0x6e0>
 80103fa:	9b02      	ldr	r3, [sp, #8]
 80103fc:	e784      	b.n	8010308 <_dtoa_r+0x6e0>
 80103fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010400:	e783      	b.n	801030a <_dtoa_r+0x6e2>
 8010402:	2300      	movs	r3, #0
 8010404:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010406:	e784      	b.n	8010312 <_dtoa_r+0x6ea>
 8010408:	d09d      	beq.n	8010346 <_dtoa_r+0x71e>
 801040a:	9b05      	ldr	r3, [sp, #20]
 801040c:	321c      	adds	r2, #28
 801040e:	4413      	add	r3, r2
 8010410:	9305      	str	r3, [sp, #20]
 8010412:	9b06      	ldr	r3, [sp, #24]
 8010414:	4416      	add	r6, r2
 8010416:	4413      	add	r3, r2
 8010418:	e794      	b.n	8010344 <_dtoa_r+0x71c>
 801041a:	4602      	mov	r2, r0
 801041c:	e7f5      	b.n	801040a <_dtoa_r+0x7e2>
 801041e:	f1ba 0f00 	cmp.w	sl, #0
 8010422:	f8cd 8010 	str.w	r8, [sp, #16]
 8010426:	46d3      	mov	fp, sl
 8010428:	dc21      	bgt.n	801046e <_dtoa_r+0x846>
 801042a:	9b07      	ldr	r3, [sp, #28]
 801042c:	2b02      	cmp	r3, #2
 801042e:	dd1e      	ble.n	801046e <_dtoa_r+0x846>
 8010430:	f1bb 0f00 	cmp.w	fp, #0
 8010434:	f47f aeb8 	bne.w	80101a8 <_dtoa_r+0x580>
 8010438:	4621      	mov	r1, r4
 801043a:	465b      	mov	r3, fp
 801043c:	2205      	movs	r2, #5
 801043e:	4648      	mov	r0, r9
 8010440:	f000 f95e 	bl	8010700 <__multadd>
 8010444:	4601      	mov	r1, r0
 8010446:	4604      	mov	r4, r0
 8010448:	9801      	ldr	r0, [sp, #4]
 801044a:	f000 fb57 	bl	8010afc <__mcmp>
 801044e:	2800      	cmp	r0, #0
 8010450:	f77f aeaa 	ble.w	80101a8 <_dtoa_r+0x580>
 8010454:	463e      	mov	r6, r7
 8010456:	2331      	movs	r3, #49	@ 0x31
 8010458:	f806 3b01 	strb.w	r3, [r6], #1
 801045c:	9b04      	ldr	r3, [sp, #16]
 801045e:	3301      	adds	r3, #1
 8010460:	9304      	str	r3, [sp, #16]
 8010462:	e6a5      	b.n	80101b0 <_dtoa_r+0x588>
 8010464:	f8cd 8010 	str.w	r8, [sp, #16]
 8010468:	4654      	mov	r4, sl
 801046a:	4625      	mov	r5, r4
 801046c:	e7f2      	b.n	8010454 <_dtoa_r+0x82c>
 801046e:	9b08      	ldr	r3, [sp, #32]
 8010470:	2b00      	cmp	r3, #0
 8010472:	f000 80fe 	beq.w	8010672 <_dtoa_r+0xa4a>
 8010476:	2e00      	cmp	r6, #0
 8010478:	dd05      	ble.n	8010486 <_dtoa_r+0x85e>
 801047a:	4629      	mov	r1, r5
 801047c:	4632      	mov	r2, r6
 801047e:	4648      	mov	r0, r9
 8010480:	f000 fad0 	bl	8010a24 <__lshift>
 8010484:	4605      	mov	r5, r0
 8010486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010488:	2b00      	cmp	r3, #0
 801048a:	d057      	beq.n	801053c <_dtoa_r+0x914>
 801048c:	6869      	ldr	r1, [r5, #4]
 801048e:	4648      	mov	r0, r9
 8010490:	f000 f908 	bl	80106a4 <_Balloc>
 8010494:	4606      	mov	r6, r0
 8010496:	b920      	cbnz	r0, 80104a2 <_dtoa_r+0x87a>
 8010498:	4b80      	ldr	r3, [pc, #512]	@ (801069c <_dtoa_r+0xa74>)
 801049a:	4602      	mov	r2, r0
 801049c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80104a0:	e4d3      	b.n	800fe4a <_dtoa_r+0x222>
 80104a2:	692a      	ldr	r2, [r5, #16]
 80104a4:	3202      	adds	r2, #2
 80104a6:	0092      	lsls	r2, r2, #2
 80104a8:	f105 010c 	add.w	r1, r5, #12
 80104ac:	300c      	adds	r0, #12
 80104ae:	f000 fccb 	bl	8010e48 <memcpy>
 80104b2:	2201      	movs	r2, #1
 80104b4:	4631      	mov	r1, r6
 80104b6:	4648      	mov	r0, r9
 80104b8:	f000 fab4 	bl	8010a24 <__lshift>
 80104bc:	1c7b      	adds	r3, r7, #1
 80104be:	9305      	str	r3, [sp, #20]
 80104c0:	eb07 030b 	add.w	r3, r7, fp
 80104c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80104c6:	9b02      	ldr	r3, [sp, #8]
 80104c8:	f003 0301 	and.w	r3, r3, #1
 80104cc:	46a8      	mov	r8, r5
 80104ce:	9308      	str	r3, [sp, #32]
 80104d0:	4605      	mov	r5, r0
 80104d2:	9b05      	ldr	r3, [sp, #20]
 80104d4:	9801      	ldr	r0, [sp, #4]
 80104d6:	4621      	mov	r1, r4
 80104d8:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80104dc:	f7ff fb1c 	bl	800fb18 <quorem>
 80104e0:	4641      	mov	r1, r8
 80104e2:	9002      	str	r0, [sp, #8]
 80104e4:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80104e8:	9801      	ldr	r0, [sp, #4]
 80104ea:	f000 fb07 	bl	8010afc <__mcmp>
 80104ee:	462a      	mov	r2, r5
 80104f0:	9006      	str	r0, [sp, #24]
 80104f2:	4621      	mov	r1, r4
 80104f4:	4648      	mov	r0, r9
 80104f6:	f000 fb1d 	bl	8010b34 <__mdiff>
 80104fa:	68c2      	ldr	r2, [r0, #12]
 80104fc:	4606      	mov	r6, r0
 80104fe:	b9fa      	cbnz	r2, 8010540 <_dtoa_r+0x918>
 8010500:	4601      	mov	r1, r0
 8010502:	9801      	ldr	r0, [sp, #4]
 8010504:	f000 fafa 	bl	8010afc <__mcmp>
 8010508:	4602      	mov	r2, r0
 801050a:	4631      	mov	r1, r6
 801050c:	4648      	mov	r0, r9
 801050e:	920a      	str	r2, [sp, #40]	@ 0x28
 8010510:	f000 f8ed 	bl	80106ee <_Bfree>
 8010514:	9b07      	ldr	r3, [sp, #28]
 8010516:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010518:	9e05      	ldr	r6, [sp, #20]
 801051a:	ea43 0102 	orr.w	r1, r3, r2
 801051e:	9b08      	ldr	r3, [sp, #32]
 8010520:	4319      	orrs	r1, r3
 8010522:	d10f      	bne.n	8010544 <_dtoa_r+0x91c>
 8010524:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010528:	d028      	beq.n	801057c <_dtoa_r+0x954>
 801052a:	9b06      	ldr	r3, [sp, #24]
 801052c:	2b00      	cmp	r3, #0
 801052e:	dd02      	ble.n	8010536 <_dtoa_r+0x90e>
 8010530:	9b02      	ldr	r3, [sp, #8]
 8010532:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010536:	f88b a000 	strb.w	sl, [fp]
 801053a:	e63b      	b.n	80101b4 <_dtoa_r+0x58c>
 801053c:	4628      	mov	r0, r5
 801053e:	e7bd      	b.n	80104bc <_dtoa_r+0x894>
 8010540:	2201      	movs	r2, #1
 8010542:	e7e2      	b.n	801050a <_dtoa_r+0x8e2>
 8010544:	9b06      	ldr	r3, [sp, #24]
 8010546:	2b00      	cmp	r3, #0
 8010548:	db04      	blt.n	8010554 <_dtoa_r+0x92c>
 801054a:	9907      	ldr	r1, [sp, #28]
 801054c:	430b      	orrs	r3, r1
 801054e:	9908      	ldr	r1, [sp, #32]
 8010550:	430b      	orrs	r3, r1
 8010552:	d120      	bne.n	8010596 <_dtoa_r+0x96e>
 8010554:	2a00      	cmp	r2, #0
 8010556:	ddee      	ble.n	8010536 <_dtoa_r+0x90e>
 8010558:	9901      	ldr	r1, [sp, #4]
 801055a:	2201      	movs	r2, #1
 801055c:	4648      	mov	r0, r9
 801055e:	f000 fa61 	bl	8010a24 <__lshift>
 8010562:	4621      	mov	r1, r4
 8010564:	9001      	str	r0, [sp, #4]
 8010566:	f000 fac9 	bl	8010afc <__mcmp>
 801056a:	2800      	cmp	r0, #0
 801056c:	dc03      	bgt.n	8010576 <_dtoa_r+0x94e>
 801056e:	d1e2      	bne.n	8010536 <_dtoa_r+0x90e>
 8010570:	f01a 0f01 	tst.w	sl, #1
 8010574:	d0df      	beq.n	8010536 <_dtoa_r+0x90e>
 8010576:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801057a:	d1d9      	bne.n	8010530 <_dtoa_r+0x908>
 801057c:	2339      	movs	r3, #57	@ 0x39
 801057e:	f88b 3000 	strb.w	r3, [fp]
 8010582:	4633      	mov	r3, r6
 8010584:	461e      	mov	r6, r3
 8010586:	3b01      	subs	r3, #1
 8010588:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801058c:	2a39      	cmp	r2, #57	@ 0x39
 801058e:	d053      	beq.n	8010638 <_dtoa_r+0xa10>
 8010590:	3201      	adds	r2, #1
 8010592:	701a      	strb	r2, [r3, #0]
 8010594:	e60e      	b.n	80101b4 <_dtoa_r+0x58c>
 8010596:	2a00      	cmp	r2, #0
 8010598:	dd07      	ble.n	80105aa <_dtoa_r+0x982>
 801059a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801059e:	d0ed      	beq.n	801057c <_dtoa_r+0x954>
 80105a0:	f10a 0301 	add.w	r3, sl, #1
 80105a4:	f88b 3000 	strb.w	r3, [fp]
 80105a8:	e604      	b.n	80101b4 <_dtoa_r+0x58c>
 80105aa:	9b05      	ldr	r3, [sp, #20]
 80105ac:	9a05      	ldr	r2, [sp, #20]
 80105ae:	f803 ac01 	strb.w	sl, [r3, #-1]
 80105b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b4:	4293      	cmp	r3, r2
 80105b6:	d029      	beq.n	801060c <_dtoa_r+0x9e4>
 80105b8:	9901      	ldr	r1, [sp, #4]
 80105ba:	2300      	movs	r3, #0
 80105bc:	220a      	movs	r2, #10
 80105be:	4648      	mov	r0, r9
 80105c0:	f000 f89e 	bl	8010700 <__multadd>
 80105c4:	45a8      	cmp	r8, r5
 80105c6:	9001      	str	r0, [sp, #4]
 80105c8:	f04f 0300 	mov.w	r3, #0
 80105cc:	f04f 020a 	mov.w	r2, #10
 80105d0:	4641      	mov	r1, r8
 80105d2:	4648      	mov	r0, r9
 80105d4:	d107      	bne.n	80105e6 <_dtoa_r+0x9be>
 80105d6:	f000 f893 	bl	8010700 <__multadd>
 80105da:	4680      	mov	r8, r0
 80105dc:	4605      	mov	r5, r0
 80105de:	9b05      	ldr	r3, [sp, #20]
 80105e0:	3301      	adds	r3, #1
 80105e2:	9305      	str	r3, [sp, #20]
 80105e4:	e775      	b.n	80104d2 <_dtoa_r+0x8aa>
 80105e6:	f000 f88b 	bl	8010700 <__multadd>
 80105ea:	4629      	mov	r1, r5
 80105ec:	4680      	mov	r8, r0
 80105ee:	2300      	movs	r3, #0
 80105f0:	220a      	movs	r2, #10
 80105f2:	4648      	mov	r0, r9
 80105f4:	f000 f884 	bl	8010700 <__multadd>
 80105f8:	4605      	mov	r5, r0
 80105fa:	e7f0      	b.n	80105de <_dtoa_r+0x9b6>
 80105fc:	f1bb 0f00 	cmp.w	fp, #0
 8010600:	bfcc      	ite	gt
 8010602:	465e      	movgt	r6, fp
 8010604:	2601      	movle	r6, #1
 8010606:	443e      	add	r6, r7
 8010608:	f04f 0800 	mov.w	r8, #0
 801060c:	9901      	ldr	r1, [sp, #4]
 801060e:	2201      	movs	r2, #1
 8010610:	4648      	mov	r0, r9
 8010612:	f000 fa07 	bl	8010a24 <__lshift>
 8010616:	4621      	mov	r1, r4
 8010618:	9001      	str	r0, [sp, #4]
 801061a:	f000 fa6f 	bl	8010afc <__mcmp>
 801061e:	2800      	cmp	r0, #0
 8010620:	dcaf      	bgt.n	8010582 <_dtoa_r+0x95a>
 8010622:	d102      	bne.n	801062a <_dtoa_r+0xa02>
 8010624:	f01a 0f01 	tst.w	sl, #1
 8010628:	d1ab      	bne.n	8010582 <_dtoa_r+0x95a>
 801062a:	4633      	mov	r3, r6
 801062c:	461e      	mov	r6, r3
 801062e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010632:	2a30      	cmp	r2, #48	@ 0x30
 8010634:	d0fa      	beq.n	801062c <_dtoa_r+0xa04>
 8010636:	e5bd      	b.n	80101b4 <_dtoa_r+0x58c>
 8010638:	429f      	cmp	r7, r3
 801063a:	d1a3      	bne.n	8010584 <_dtoa_r+0x95c>
 801063c:	9b04      	ldr	r3, [sp, #16]
 801063e:	3301      	adds	r3, #1
 8010640:	9304      	str	r3, [sp, #16]
 8010642:	2331      	movs	r3, #49	@ 0x31
 8010644:	703b      	strb	r3, [r7, #0]
 8010646:	e5b5      	b.n	80101b4 <_dtoa_r+0x58c>
 8010648:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801064a:	4f15      	ldr	r7, [pc, #84]	@ (80106a0 <_dtoa_r+0xa78>)
 801064c:	2b00      	cmp	r3, #0
 801064e:	f43f ab22 	beq.w	800fc96 <_dtoa_r+0x6e>
 8010652:	f107 0308 	add.w	r3, r7, #8
 8010656:	f7ff bb1c 	b.w	800fc92 <_dtoa_r+0x6a>
 801065a:	9b07      	ldr	r3, [sp, #28]
 801065c:	2b01      	cmp	r3, #1
 801065e:	f77f ae3b 	ble.w	80102d8 <_dtoa_r+0x6b0>
 8010662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010664:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010666:	2001      	movs	r0, #1
 8010668:	e65b      	b.n	8010322 <_dtoa_r+0x6fa>
 801066a:	f1bb 0f00 	cmp.w	fp, #0
 801066e:	f77f aedc 	ble.w	801042a <_dtoa_r+0x802>
 8010672:	463e      	mov	r6, r7
 8010674:	9801      	ldr	r0, [sp, #4]
 8010676:	4621      	mov	r1, r4
 8010678:	f7ff fa4e 	bl	800fb18 <quorem>
 801067c:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010680:	f806 ab01 	strb.w	sl, [r6], #1
 8010684:	1bf2      	subs	r2, r6, r7
 8010686:	4593      	cmp	fp, r2
 8010688:	ddb8      	ble.n	80105fc <_dtoa_r+0x9d4>
 801068a:	9901      	ldr	r1, [sp, #4]
 801068c:	2300      	movs	r3, #0
 801068e:	220a      	movs	r2, #10
 8010690:	4648      	mov	r0, r9
 8010692:	f000 f835 	bl	8010700 <__multadd>
 8010696:	9001      	str	r0, [sp, #4]
 8010698:	e7ec      	b.n	8010674 <_dtoa_r+0xa4c>
 801069a:	bf00      	nop
 801069c:	08013861 	.word	0x08013861
 80106a0:	08013854 	.word	0x08013854

080106a4 <_Balloc>:
 80106a4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80106a6:	b570      	push	{r4, r5, r6, lr}
 80106a8:	4605      	mov	r5, r0
 80106aa:	460c      	mov	r4, r1
 80106ac:	b17b      	cbz	r3, 80106ce <_Balloc+0x2a>
 80106ae:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80106b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80106b4:	b9a0      	cbnz	r0, 80106e0 <_Balloc+0x3c>
 80106b6:	2101      	movs	r1, #1
 80106b8:	fa01 f604 	lsl.w	r6, r1, r4
 80106bc:	1d72      	adds	r2, r6, #5
 80106be:	0092      	lsls	r2, r2, #2
 80106c0:	4628      	mov	r0, r5
 80106c2:	f000 fbed 	bl	8010ea0 <_calloc_r>
 80106c6:	b148      	cbz	r0, 80106dc <_Balloc+0x38>
 80106c8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80106cc:	e00b      	b.n	80106e6 <_Balloc+0x42>
 80106ce:	2221      	movs	r2, #33	@ 0x21
 80106d0:	2104      	movs	r1, #4
 80106d2:	f000 fbe5 	bl	8010ea0 <_calloc_r>
 80106d6:	6468      	str	r0, [r5, #68]	@ 0x44
 80106d8:	2800      	cmp	r0, #0
 80106da:	d1e8      	bne.n	80106ae <_Balloc+0xa>
 80106dc:	2000      	movs	r0, #0
 80106de:	bd70      	pop	{r4, r5, r6, pc}
 80106e0:	6802      	ldr	r2, [r0, #0]
 80106e2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80106e6:	2300      	movs	r3, #0
 80106e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80106ec:	e7f7      	b.n	80106de <_Balloc+0x3a>

080106ee <_Bfree>:
 80106ee:	b131      	cbz	r1, 80106fe <_Bfree+0x10>
 80106f0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80106f2:	684a      	ldr	r2, [r1, #4]
 80106f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80106f8:	6008      	str	r0, [r1, #0]
 80106fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80106fe:	4770      	bx	lr

08010700 <__multadd>:
 8010700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010704:	690d      	ldr	r5, [r1, #16]
 8010706:	4607      	mov	r7, r0
 8010708:	460c      	mov	r4, r1
 801070a:	461e      	mov	r6, r3
 801070c:	f101 0c14 	add.w	ip, r1, #20
 8010710:	2000      	movs	r0, #0
 8010712:	f8dc 3000 	ldr.w	r3, [ip]
 8010716:	b299      	uxth	r1, r3
 8010718:	fb02 6101 	mla	r1, r2, r1, r6
 801071c:	0c1e      	lsrs	r6, r3, #16
 801071e:	0c0b      	lsrs	r3, r1, #16
 8010720:	fb02 3306 	mla	r3, r2, r6, r3
 8010724:	b289      	uxth	r1, r1
 8010726:	3001      	adds	r0, #1
 8010728:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801072c:	4285      	cmp	r5, r0
 801072e:	f84c 1b04 	str.w	r1, [ip], #4
 8010732:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010736:	dcec      	bgt.n	8010712 <__multadd+0x12>
 8010738:	b30e      	cbz	r6, 801077e <__multadd+0x7e>
 801073a:	68a3      	ldr	r3, [r4, #8]
 801073c:	42ab      	cmp	r3, r5
 801073e:	dc19      	bgt.n	8010774 <__multadd+0x74>
 8010740:	6861      	ldr	r1, [r4, #4]
 8010742:	4638      	mov	r0, r7
 8010744:	3101      	adds	r1, #1
 8010746:	f7ff ffad 	bl	80106a4 <_Balloc>
 801074a:	4680      	mov	r8, r0
 801074c:	b928      	cbnz	r0, 801075a <__multadd+0x5a>
 801074e:	4602      	mov	r2, r0
 8010750:	4b0c      	ldr	r3, [pc, #48]	@ (8010784 <__multadd+0x84>)
 8010752:	480d      	ldr	r0, [pc, #52]	@ (8010788 <__multadd+0x88>)
 8010754:	21ba      	movs	r1, #186	@ 0xba
 8010756:	f000 fb85 	bl	8010e64 <__assert_func>
 801075a:	6922      	ldr	r2, [r4, #16]
 801075c:	3202      	adds	r2, #2
 801075e:	f104 010c 	add.w	r1, r4, #12
 8010762:	0092      	lsls	r2, r2, #2
 8010764:	300c      	adds	r0, #12
 8010766:	f000 fb6f 	bl	8010e48 <memcpy>
 801076a:	4621      	mov	r1, r4
 801076c:	4638      	mov	r0, r7
 801076e:	f7ff ffbe 	bl	80106ee <_Bfree>
 8010772:	4644      	mov	r4, r8
 8010774:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010778:	3501      	adds	r5, #1
 801077a:	615e      	str	r6, [r3, #20]
 801077c:	6125      	str	r5, [r4, #16]
 801077e:	4620      	mov	r0, r4
 8010780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010784:	08013861 	.word	0x08013861
 8010788:	080138ca 	.word	0x080138ca

0801078c <__hi0bits>:
 801078c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010790:	4603      	mov	r3, r0
 8010792:	bf36      	itet	cc
 8010794:	0403      	lslcc	r3, r0, #16
 8010796:	2000      	movcs	r0, #0
 8010798:	2010      	movcc	r0, #16
 801079a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801079e:	bf3c      	itt	cc
 80107a0:	021b      	lslcc	r3, r3, #8
 80107a2:	3008      	addcc	r0, #8
 80107a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80107a8:	bf3c      	itt	cc
 80107aa:	011b      	lslcc	r3, r3, #4
 80107ac:	3004      	addcc	r0, #4
 80107ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80107b2:	bf3c      	itt	cc
 80107b4:	009b      	lslcc	r3, r3, #2
 80107b6:	3002      	addcc	r0, #2
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	db05      	blt.n	80107c8 <__hi0bits+0x3c>
 80107bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80107c0:	f100 0001 	add.w	r0, r0, #1
 80107c4:	bf08      	it	eq
 80107c6:	2020      	moveq	r0, #32
 80107c8:	4770      	bx	lr

080107ca <__lo0bits>:
 80107ca:	6803      	ldr	r3, [r0, #0]
 80107cc:	4602      	mov	r2, r0
 80107ce:	f013 0007 	ands.w	r0, r3, #7
 80107d2:	d00b      	beq.n	80107ec <__lo0bits+0x22>
 80107d4:	07d9      	lsls	r1, r3, #31
 80107d6:	d421      	bmi.n	801081c <__lo0bits+0x52>
 80107d8:	0798      	lsls	r0, r3, #30
 80107da:	bf49      	itett	mi
 80107dc:	085b      	lsrmi	r3, r3, #1
 80107de:	089b      	lsrpl	r3, r3, #2
 80107e0:	2001      	movmi	r0, #1
 80107e2:	6013      	strmi	r3, [r2, #0]
 80107e4:	bf5c      	itt	pl
 80107e6:	6013      	strpl	r3, [r2, #0]
 80107e8:	2002      	movpl	r0, #2
 80107ea:	4770      	bx	lr
 80107ec:	b299      	uxth	r1, r3
 80107ee:	b909      	cbnz	r1, 80107f4 <__lo0bits+0x2a>
 80107f0:	0c1b      	lsrs	r3, r3, #16
 80107f2:	2010      	movs	r0, #16
 80107f4:	b2d9      	uxtb	r1, r3
 80107f6:	b909      	cbnz	r1, 80107fc <__lo0bits+0x32>
 80107f8:	3008      	adds	r0, #8
 80107fa:	0a1b      	lsrs	r3, r3, #8
 80107fc:	0719      	lsls	r1, r3, #28
 80107fe:	bf04      	itt	eq
 8010800:	091b      	lsreq	r3, r3, #4
 8010802:	3004      	addeq	r0, #4
 8010804:	0799      	lsls	r1, r3, #30
 8010806:	bf04      	itt	eq
 8010808:	089b      	lsreq	r3, r3, #2
 801080a:	3002      	addeq	r0, #2
 801080c:	07d9      	lsls	r1, r3, #31
 801080e:	d403      	bmi.n	8010818 <__lo0bits+0x4e>
 8010810:	085b      	lsrs	r3, r3, #1
 8010812:	f100 0001 	add.w	r0, r0, #1
 8010816:	d003      	beq.n	8010820 <__lo0bits+0x56>
 8010818:	6013      	str	r3, [r2, #0]
 801081a:	4770      	bx	lr
 801081c:	2000      	movs	r0, #0
 801081e:	4770      	bx	lr
 8010820:	2020      	movs	r0, #32
 8010822:	4770      	bx	lr

08010824 <__i2b>:
 8010824:	b510      	push	{r4, lr}
 8010826:	460c      	mov	r4, r1
 8010828:	2101      	movs	r1, #1
 801082a:	f7ff ff3b 	bl	80106a4 <_Balloc>
 801082e:	4602      	mov	r2, r0
 8010830:	b928      	cbnz	r0, 801083e <__i2b+0x1a>
 8010832:	4b05      	ldr	r3, [pc, #20]	@ (8010848 <__i2b+0x24>)
 8010834:	4805      	ldr	r0, [pc, #20]	@ (801084c <__i2b+0x28>)
 8010836:	f240 1145 	movw	r1, #325	@ 0x145
 801083a:	f000 fb13 	bl	8010e64 <__assert_func>
 801083e:	2301      	movs	r3, #1
 8010840:	6144      	str	r4, [r0, #20]
 8010842:	6103      	str	r3, [r0, #16]
 8010844:	bd10      	pop	{r4, pc}
 8010846:	bf00      	nop
 8010848:	08013861 	.word	0x08013861
 801084c:	080138ca 	.word	0x080138ca

08010850 <__multiply>:
 8010850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010854:	4614      	mov	r4, r2
 8010856:	690a      	ldr	r2, [r1, #16]
 8010858:	6923      	ldr	r3, [r4, #16]
 801085a:	429a      	cmp	r2, r3
 801085c:	bfa8      	it	ge
 801085e:	4623      	movge	r3, r4
 8010860:	460f      	mov	r7, r1
 8010862:	bfa4      	itt	ge
 8010864:	460c      	movge	r4, r1
 8010866:	461f      	movge	r7, r3
 8010868:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801086c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010870:	68a3      	ldr	r3, [r4, #8]
 8010872:	6861      	ldr	r1, [r4, #4]
 8010874:	eb0a 0609 	add.w	r6, sl, r9
 8010878:	42b3      	cmp	r3, r6
 801087a:	b085      	sub	sp, #20
 801087c:	bfb8      	it	lt
 801087e:	3101      	addlt	r1, #1
 8010880:	f7ff ff10 	bl	80106a4 <_Balloc>
 8010884:	b930      	cbnz	r0, 8010894 <__multiply+0x44>
 8010886:	4602      	mov	r2, r0
 8010888:	4b44      	ldr	r3, [pc, #272]	@ (801099c <__multiply+0x14c>)
 801088a:	4845      	ldr	r0, [pc, #276]	@ (80109a0 <__multiply+0x150>)
 801088c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010890:	f000 fae8 	bl	8010e64 <__assert_func>
 8010894:	f100 0514 	add.w	r5, r0, #20
 8010898:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801089c:	462b      	mov	r3, r5
 801089e:	2200      	movs	r2, #0
 80108a0:	4543      	cmp	r3, r8
 80108a2:	d321      	bcc.n	80108e8 <__multiply+0x98>
 80108a4:	f107 0114 	add.w	r1, r7, #20
 80108a8:	f104 0214 	add.w	r2, r4, #20
 80108ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80108b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80108b4:	9302      	str	r3, [sp, #8]
 80108b6:	1b13      	subs	r3, r2, r4
 80108b8:	3b15      	subs	r3, #21
 80108ba:	f023 0303 	bic.w	r3, r3, #3
 80108be:	3304      	adds	r3, #4
 80108c0:	f104 0715 	add.w	r7, r4, #21
 80108c4:	42ba      	cmp	r2, r7
 80108c6:	bf38      	it	cc
 80108c8:	2304      	movcc	r3, #4
 80108ca:	9301      	str	r3, [sp, #4]
 80108cc:	9b02      	ldr	r3, [sp, #8]
 80108ce:	9103      	str	r1, [sp, #12]
 80108d0:	428b      	cmp	r3, r1
 80108d2:	d80c      	bhi.n	80108ee <__multiply+0x9e>
 80108d4:	2e00      	cmp	r6, #0
 80108d6:	dd03      	ble.n	80108e0 <__multiply+0x90>
 80108d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d05b      	beq.n	8010998 <__multiply+0x148>
 80108e0:	6106      	str	r6, [r0, #16]
 80108e2:	b005      	add	sp, #20
 80108e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e8:	f843 2b04 	str.w	r2, [r3], #4
 80108ec:	e7d8      	b.n	80108a0 <__multiply+0x50>
 80108ee:	f8b1 a000 	ldrh.w	sl, [r1]
 80108f2:	f1ba 0f00 	cmp.w	sl, #0
 80108f6:	d024      	beq.n	8010942 <__multiply+0xf2>
 80108f8:	f104 0e14 	add.w	lr, r4, #20
 80108fc:	46a9      	mov	r9, r5
 80108fe:	f04f 0c00 	mov.w	ip, #0
 8010902:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010906:	f8d9 3000 	ldr.w	r3, [r9]
 801090a:	fa1f fb87 	uxth.w	fp, r7
 801090e:	b29b      	uxth	r3, r3
 8010910:	fb0a 330b 	mla	r3, sl, fp, r3
 8010914:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010918:	f8d9 7000 	ldr.w	r7, [r9]
 801091c:	4463      	add	r3, ip
 801091e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010922:	fb0a c70b 	mla	r7, sl, fp, ip
 8010926:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801092a:	b29b      	uxth	r3, r3
 801092c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010930:	4572      	cmp	r2, lr
 8010932:	f849 3b04 	str.w	r3, [r9], #4
 8010936:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801093a:	d8e2      	bhi.n	8010902 <__multiply+0xb2>
 801093c:	9b01      	ldr	r3, [sp, #4]
 801093e:	f845 c003 	str.w	ip, [r5, r3]
 8010942:	9b03      	ldr	r3, [sp, #12]
 8010944:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010948:	3104      	adds	r1, #4
 801094a:	f1b9 0f00 	cmp.w	r9, #0
 801094e:	d021      	beq.n	8010994 <__multiply+0x144>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	f104 0c14 	add.w	ip, r4, #20
 8010956:	46ae      	mov	lr, r5
 8010958:	f04f 0a00 	mov.w	sl, #0
 801095c:	f8bc b000 	ldrh.w	fp, [ip]
 8010960:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010964:	fb09 770b 	mla	r7, r9, fp, r7
 8010968:	4457      	add	r7, sl
 801096a:	b29b      	uxth	r3, r3
 801096c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010970:	f84e 3b04 	str.w	r3, [lr], #4
 8010974:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010978:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801097c:	f8be 3000 	ldrh.w	r3, [lr]
 8010980:	fb09 330a 	mla	r3, r9, sl, r3
 8010984:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010988:	4562      	cmp	r2, ip
 801098a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801098e:	d8e5      	bhi.n	801095c <__multiply+0x10c>
 8010990:	9f01      	ldr	r7, [sp, #4]
 8010992:	51eb      	str	r3, [r5, r7]
 8010994:	3504      	adds	r5, #4
 8010996:	e799      	b.n	80108cc <__multiply+0x7c>
 8010998:	3e01      	subs	r6, #1
 801099a:	e79b      	b.n	80108d4 <__multiply+0x84>
 801099c:	08013861 	.word	0x08013861
 80109a0:	080138ca 	.word	0x080138ca

080109a4 <__pow5mult>:
 80109a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109a8:	4615      	mov	r5, r2
 80109aa:	f012 0203 	ands.w	r2, r2, #3
 80109ae:	4607      	mov	r7, r0
 80109b0:	460e      	mov	r6, r1
 80109b2:	d007      	beq.n	80109c4 <__pow5mult+0x20>
 80109b4:	4c1a      	ldr	r4, [pc, #104]	@ (8010a20 <__pow5mult+0x7c>)
 80109b6:	3a01      	subs	r2, #1
 80109b8:	2300      	movs	r3, #0
 80109ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80109be:	f7ff fe9f 	bl	8010700 <__multadd>
 80109c2:	4606      	mov	r6, r0
 80109c4:	10ad      	asrs	r5, r5, #2
 80109c6:	d027      	beq.n	8010a18 <__pow5mult+0x74>
 80109c8:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80109ca:	b944      	cbnz	r4, 80109de <__pow5mult+0x3a>
 80109cc:	f240 2171 	movw	r1, #625	@ 0x271
 80109d0:	4638      	mov	r0, r7
 80109d2:	f7ff ff27 	bl	8010824 <__i2b>
 80109d6:	2300      	movs	r3, #0
 80109d8:	6438      	str	r0, [r7, #64]	@ 0x40
 80109da:	4604      	mov	r4, r0
 80109dc:	6003      	str	r3, [r0, #0]
 80109de:	f04f 0900 	mov.w	r9, #0
 80109e2:	07eb      	lsls	r3, r5, #31
 80109e4:	d50a      	bpl.n	80109fc <__pow5mult+0x58>
 80109e6:	4631      	mov	r1, r6
 80109e8:	4622      	mov	r2, r4
 80109ea:	4638      	mov	r0, r7
 80109ec:	f7ff ff30 	bl	8010850 <__multiply>
 80109f0:	4631      	mov	r1, r6
 80109f2:	4680      	mov	r8, r0
 80109f4:	4638      	mov	r0, r7
 80109f6:	f7ff fe7a 	bl	80106ee <_Bfree>
 80109fa:	4646      	mov	r6, r8
 80109fc:	106d      	asrs	r5, r5, #1
 80109fe:	d00b      	beq.n	8010a18 <__pow5mult+0x74>
 8010a00:	6820      	ldr	r0, [r4, #0]
 8010a02:	b938      	cbnz	r0, 8010a14 <__pow5mult+0x70>
 8010a04:	4622      	mov	r2, r4
 8010a06:	4621      	mov	r1, r4
 8010a08:	4638      	mov	r0, r7
 8010a0a:	f7ff ff21 	bl	8010850 <__multiply>
 8010a0e:	6020      	str	r0, [r4, #0]
 8010a10:	f8c0 9000 	str.w	r9, [r0]
 8010a14:	4604      	mov	r4, r0
 8010a16:	e7e4      	b.n	80109e2 <__pow5mult+0x3e>
 8010a18:	4630      	mov	r0, r6
 8010a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a1e:	bf00      	nop
 8010a20:	08013924 	.word	0x08013924

08010a24 <__lshift>:
 8010a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a28:	460c      	mov	r4, r1
 8010a2a:	6849      	ldr	r1, [r1, #4]
 8010a2c:	6923      	ldr	r3, [r4, #16]
 8010a2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010a32:	68a3      	ldr	r3, [r4, #8]
 8010a34:	4607      	mov	r7, r0
 8010a36:	4691      	mov	r9, r2
 8010a38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a3c:	f108 0601 	add.w	r6, r8, #1
 8010a40:	42b3      	cmp	r3, r6
 8010a42:	db0b      	blt.n	8010a5c <__lshift+0x38>
 8010a44:	4638      	mov	r0, r7
 8010a46:	f7ff fe2d 	bl	80106a4 <_Balloc>
 8010a4a:	4605      	mov	r5, r0
 8010a4c:	b948      	cbnz	r0, 8010a62 <__lshift+0x3e>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	4b28      	ldr	r3, [pc, #160]	@ (8010af4 <__lshift+0xd0>)
 8010a52:	4829      	ldr	r0, [pc, #164]	@ (8010af8 <__lshift+0xd4>)
 8010a54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010a58:	f000 fa04 	bl	8010e64 <__assert_func>
 8010a5c:	3101      	adds	r1, #1
 8010a5e:	005b      	lsls	r3, r3, #1
 8010a60:	e7ee      	b.n	8010a40 <__lshift+0x1c>
 8010a62:	2300      	movs	r3, #0
 8010a64:	f100 0114 	add.w	r1, r0, #20
 8010a68:	f100 0210 	add.w	r2, r0, #16
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	4553      	cmp	r3, sl
 8010a70:	db33      	blt.n	8010ada <__lshift+0xb6>
 8010a72:	6920      	ldr	r0, [r4, #16]
 8010a74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a78:	f104 0314 	add.w	r3, r4, #20
 8010a7c:	f019 091f 	ands.w	r9, r9, #31
 8010a80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a88:	d02b      	beq.n	8010ae2 <__lshift+0xbe>
 8010a8a:	f1c9 0e20 	rsb	lr, r9, #32
 8010a8e:	468a      	mov	sl, r1
 8010a90:	2200      	movs	r2, #0
 8010a92:	6818      	ldr	r0, [r3, #0]
 8010a94:	fa00 f009 	lsl.w	r0, r0, r9
 8010a98:	4310      	orrs	r0, r2
 8010a9a:	f84a 0b04 	str.w	r0, [sl], #4
 8010a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aa2:	459c      	cmp	ip, r3
 8010aa4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010aa8:	d8f3      	bhi.n	8010a92 <__lshift+0x6e>
 8010aaa:	ebac 0304 	sub.w	r3, ip, r4
 8010aae:	3b15      	subs	r3, #21
 8010ab0:	f023 0303 	bic.w	r3, r3, #3
 8010ab4:	3304      	adds	r3, #4
 8010ab6:	f104 0015 	add.w	r0, r4, #21
 8010aba:	4584      	cmp	ip, r0
 8010abc:	bf38      	it	cc
 8010abe:	2304      	movcc	r3, #4
 8010ac0:	50ca      	str	r2, [r1, r3]
 8010ac2:	b10a      	cbz	r2, 8010ac8 <__lshift+0xa4>
 8010ac4:	f108 0602 	add.w	r6, r8, #2
 8010ac8:	3e01      	subs	r6, #1
 8010aca:	4638      	mov	r0, r7
 8010acc:	612e      	str	r6, [r5, #16]
 8010ace:	4621      	mov	r1, r4
 8010ad0:	f7ff fe0d 	bl	80106ee <_Bfree>
 8010ad4:	4628      	mov	r0, r5
 8010ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ada:	f842 0f04 	str.w	r0, [r2, #4]!
 8010ade:	3301      	adds	r3, #1
 8010ae0:	e7c5      	b.n	8010a6e <__lshift+0x4a>
 8010ae2:	3904      	subs	r1, #4
 8010ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ae8:	f841 2f04 	str.w	r2, [r1, #4]!
 8010aec:	459c      	cmp	ip, r3
 8010aee:	d8f9      	bhi.n	8010ae4 <__lshift+0xc0>
 8010af0:	e7ea      	b.n	8010ac8 <__lshift+0xa4>
 8010af2:	bf00      	nop
 8010af4:	08013861 	.word	0x08013861
 8010af8:	080138ca 	.word	0x080138ca

08010afc <__mcmp>:
 8010afc:	690a      	ldr	r2, [r1, #16]
 8010afe:	4603      	mov	r3, r0
 8010b00:	6900      	ldr	r0, [r0, #16]
 8010b02:	1a80      	subs	r0, r0, r2
 8010b04:	b530      	push	{r4, r5, lr}
 8010b06:	d10e      	bne.n	8010b26 <__mcmp+0x2a>
 8010b08:	3314      	adds	r3, #20
 8010b0a:	3114      	adds	r1, #20
 8010b0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010b10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010b14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010b18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010b1c:	4295      	cmp	r5, r2
 8010b1e:	d003      	beq.n	8010b28 <__mcmp+0x2c>
 8010b20:	d205      	bcs.n	8010b2e <__mcmp+0x32>
 8010b22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b26:	bd30      	pop	{r4, r5, pc}
 8010b28:	42a3      	cmp	r3, r4
 8010b2a:	d3f3      	bcc.n	8010b14 <__mcmp+0x18>
 8010b2c:	e7fb      	b.n	8010b26 <__mcmp+0x2a>
 8010b2e:	2001      	movs	r0, #1
 8010b30:	e7f9      	b.n	8010b26 <__mcmp+0x2a>
	...

08010b34 <__mdiff>:
 8010b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b38:	4689      	mov	r9, r1
 8010b3a:	4606      	mov	r6, r0
 8010b3c:	4611      	mov	r1, r2
 8010b3e:	4648      	mov	r0, r9
 8010b40:	4614      	mov	r4, r2
 8010b42:	f7ff ffdb 	bl	8010afc <__mcmp>
 8010b46:	1e05      	subs	r5, r0, #0
 8010b48:	d112      	bne.n	8010b70 <__mdiff+0x3c>
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	4630      	mov	r0, r6
 8010b4e:	f7ff fda9 	bl	80106a4 <_Balloc>
 8010b52:	4602      	mov	r2, r0
 8010b54:	b928      	cbnz	r0, 8010b62 <__mdiff+0x2e>
 8010b56:	4b3f      	ldr	r3, [pc, #252]	@ (8010c54 <__mdiff+0x120>)
 8010b58:	f240 2137 	movw	r1, #567	@ 0x237
 8010b5c:	483e      	ldr	r0, [pc, #248]	@ (8010c58 <__mdiff+0x124>)
 8010b5e:	f000 f981 	bl	8010e64 <__assert_func>
 8010b62:	2301      	movs	r3, #1
 8010b64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010b68:	4610      	mov	r0, r2
 8010b6a:	b003      	add	sp, #12
 8010b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b70:	bfbc      	itt	lt
 8010b72:	464b      	movlt	r3, r9
 8010b74:	46a1      	movlt	r9, r4
 8010b76:	4630      	mov	r0, r6
 8010b78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010b7c:	bfba      	itte	lt
 8010b7e:	461c      	movlt	r4, r3
 8010b80:	2501      	movlt	r5, #1
 8010b82:	2500      	movge	r5, #0
 8010b84:	f7ff fd8e 	bl	80106a4 <_Balloc>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	b918      	cbnz	r0, 8010b94 <__mdiff+0x60>
 8010b8c:	4b31      	ldr	r3, [pc, #196]	@ (8010c54 <__mdiff+0x120>)
 8010b8e:	f240 2145 	movw	r1, #581	@ 0x245
 8010b92:	e7e3      	b.n	8010b5c <__mdiff+0x28>
 8010b94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010b98:	6926      	ldr	r6, [r4, #16]
 8010b9a:	60c5      	str	r5, [r0, #12]
 8010b9c:	f109 0310 	add.w	r3, r9, #16
 8010ba0:	f109 0514 	add.w	r5, r9, #20
 8010ba4:	f104 0e14 	add.w	lr, r4, #20
 8010ba8:	f100 0b14 	add.w	fp, r0, #20
 8010bac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010bb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010bb4:	9301      	str	r3, [sp, #4]
 8010bb6:	46d9      	mov	r9, fp
 8010bb8:	f04f 0c00 	mov.w	ip, #0
 8010bbc:	9b01      	ldr	r3, [sp, #4]
 8010bbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010bc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010bc6:	9301      	str	r3, [sp, #4]
 8010bc8:	fa1f f38a 	uxth.w	r3, sl
 8010bcc:	4619      	mov	r1, r3
 8010bce:	b283      	uxth	r3, r0
 8010bd0:	1acb      	subs	r3, r1, r3
 8010bd2:	0c00      	lsrs	r0, r0, #16
 8010bd4:	4463      	add	r3, ip
 8010bd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010bda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010be4:	4576      	cmp	r6, lr
 8010be6:	f849 3b04 	str.w	r3, [r9], #4
 8010bea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010bee:	d8e5      	bhi.n	8010bbc <__mdiff+0x88>
 8010bf0:	1b33      	subs	r3, r6, r4
 8010bf2:	3b15      	subs	r3, #21
 8010bf4:	f023 0303 	bic.w	r3, r3, #3
 8010bf8:	3415      	adds	r4, #21
 8010bfa:	3304      	adds	r3, #4
 8010bfc:	42a6      	cmp	r6, r4
 8010bfe:	bf38      	it	cc
 8010c00:	2304      	movcc	r3, #4
 8010c02:	441d      	add	r5, r3
 8010c04:	445b      	add	r3, fp
 8010c06:	461e      	mov	r6, r3
 8010c08:	462c      	mov	r4, r5
 8010c0a:	4544      	cmp	r4, r8
 8010c0c:	d30e      	bcc.n	8010c2c <__mdiff+0xf8>
 8010c0e:	f108 0103 	add.w	r1, r8, #3
 8010c12:	1b49      	subs	r1, r1, r5
 8010c14:	f021 0103 	bic.w	r1, r1, #3
 8010c18:	3d03      	subs	r5, #3
 8010c1a:	45a8      	cmp	r8, r5
 8010c1c:	bf38      	it	cc
 8010c1e:	2100      	movcc	r1, #0
 8010c20:	440b      	add	r3, r1
 8010c22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010c26:	b191      	cbz	r1, 8010c4e <__mdiff+0x11a>
 8010c28:	6117      	str	r7, [r2, #16]
 8010c2a:	e79d      	b.n	8010b68 <__mdiff+0x34>
 8010c2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010c30:	46e6      	mov	lr, ip
 8010c32:	0c08      	lsrs	r0, r1, #16
 8010c34:	fa1c fc81 	uxtah	ip, ip, r1
 8010c38:	4471      	add	r1, lr
 8010c3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010c3e:	b289      	uxth	r1, r1
 8010c40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010c44:	f846 1b04 	str.w	r1, [r6], #4
 8010c48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010c4c:	e7dd      	b.n	8010c0a <__mdiff+0xd6>
 8010c4e:	3f01      	subs	r7, #1
 8010c50:	e7e7      	b.n	8010c22 <__mdiff+0xee>
 8010c52:	bf00      	nop
 8010c54:	08013861 	.word	0x08013861
 8010c58:	080138ca 	.word	0x080138ca

08010c5c <__d2b>:
 8010c5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c60:	460f      	mov	r7, r1
 8010c62:	2101      	movs	r1, #1
 8010c64:	ec59 8b10 	vmov	r8, r9, d0
 8010c68:	4616      	mov	r6, r2
 8010c6a:	f7ff fd1b 	bl	80106a4 <_Balloc>
 8010c6e:	4604      	mov	r4, r0
 8010c70:	b930      	cbnz	r0, 8010c80 <__d2b+0x24>
 8010c72:	4602      	mov	r2, r0
 8010c74:	4b23      	ldr	r3, [pc, #140]	@ (8010d04 <__d2b+0xa8>)
 8010c76:	4824      	ldr	r0, [pc, #144]	@ (8010d08 <__d2b+0xac>)
 8010c78:	f240 310f 	movw	r1, #783	@ 0x30f
 8010c7c:	f000 f8f2 	bl	8010e64 <__assert_func>
 8010c80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010c84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010c88:	b10d      	cbz	r5, 8010c8e <__d2b+0x32>
 8010c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010c8e:	9301      	str	r3, [sp, #4]
 8010c90:	f1b8 0300 	subs.w	r3, r8, #0
 8010c94:	d023      	beq.n	8010cde <__d2b+0x82>
 8010c96:	4668      	mov	r0, sp
 8010c98:	9300      	str	r3, [sp, #0]
 8010c9a:	f7ff fd96 	bl	80107ca <__lo0bits>
 8010c9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010ca2:	b1d0      	cbz	r0, 8010cda <__d2b+0x7e>
 8010ca4:	f1c0 0320 	rsb	r3, r0, #32
 8010ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8010cac:	430b      	orrs	r3, r1
 8010cae:	40c2      	lsrs	r2, r0
 8010cb0:	6163      	str	r3, [r4, #20]
 8010cb2:	9201      	str	r2, [sp, #4]
 8010cb4:	9b01      	ldr	r3, [sp, #4]
 8010cb6:	61a3      	str	r3, [r4, #24]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	bf0c      	ite	eq
 8010cbc:	2201      	moveq	r2, #1
 8010cbe:	2202      	movne	r2, #2
 8010cc0:	6122      	str	r2, [r4, #16]
 8010cc2:	b1a5      	cbz	r5, 8010cee <__d2b+0x92>
 8010cc4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010cc8:	4405      	add	r5, r0
 8010cca:	603d      	str	r5, [r7, #0]
 8010ccc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010cd0:	6030      	str	r0, [r6, #0]
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	b003      	add	sp, #12
 8010cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cda:	6161      	str	r1, [r4, #20]
 8010cdc:	e7ea      	b.n	8010cb4 <__d2b+0x58>
 8010cde:	a801      	add	r0, sp, #4
 8010ce0:	f7ff fd73 	bl	80107ca <__lo0bits>
 8010ce4:	9b01      	ldr	r3, [sp, #4]
 8010ce6:	6163      	str	r3, [r4, #20]
 8010ce8:	3020      	adds	r0, #32
 8010cea:	2201      	movs	r2, #1
 8010cec:	e7e8      	b.n	8010cc0 <__d2b+0x64>
 8010cee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010cf2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010cf6:	6038      	str	r0, [r7, #0]
 8010cf8:	6918      	ldr	r0, [r3, #16]
 8010cfa:	f7ff fd47 	bl	801078c <__hi0bits>
 8010cfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010d02:	e7e5      	b.n	8010cd0 <__d2b+0x74>
 8010d04:	08013861 	.word	0x08013861
 8010d08:	080138ca 	.word	0x080138ca

08010d0c <__ssprint_r>:
 8010d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d10:	6893      	ldr	r3, [r2, #8]
 8010d12:	f8d2 b000 	ldr.w	fp, [r2]
 8010d16:	9001      	str	r0, [sp, #4]
 8010d18:	460c      	mov	r4, r1
 8010d1a:	4617      	mov	r7, r2
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d157      	bne.n	8010dd0 <__ssprint_r+0xc4>
 8010d20:	2000      	movs	r0, #0
 8010d22:	2300      	movs	r3, #0
 8010d24:	607b      	str	r3, [r7, #4]
 8010d26:	b003      	add	sp, #12
 8010d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d2c:	e9db a800 	ldrd	sl, r8, [fp]
 8010d30:	f10b 0b08 	add.w	fp, fp, #8
 8010d34:	68a6      	ldr	r6, [r4, #8]
 8010d36:	6820      	ldr	r0, [r4, #0]
 8010d38:	f1b8 0f00 	cmp.w	r8, #0
 8010d3c:	d0f6      	beq.n	8010d2c <__ssprint_r+0x20>
 8010d3e:	45b0      	cmp	r8, r6
 8010d40:	d32e      	bcc.n	8010da0 <__ssprint_r+0x94>
 8010d42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d46:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010d4a:	d029      	beq.n	8010da0 <__ssprint_r+0x94>
 8010d4c:	6921      	ldr	r1, [r4, #16]
 8010d4e:	6965      	ldr	r5, [r4, #20]
 8010d50:	eba0 0901 	sub.w	r9, r0, r1
 8010d54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d5c:	f109 0001 	add.w	r0, r9, #1
 8010d60:	106d      	asrs	r5, r5, #1
 8010d62:	4440      	add	r0, r8
 8010d64:	4285      	cmp	r5, r0
 8010d66:	bf38      	it	cc
 8010d68:	4605      	movcc	r5, r0
 8010d6a:	0553      	lsls	r3, r2, #21
 8010d6c:	d534      	bpl.n	8010dd8 <__ssprint_r+0xcc>
 8010d6e:	9801      	ldr	r0, [sp, #4]
 8010d70:	4629      	mov	r1, r5
 8010d72:	f7fd f941 	bl	800dff8 <_malloc_r>
 8010d76:	4606      	mov	r6, r0
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	d038      	beq.n	8010dee <__ssprint_r+0xe2>
 8010d7c:	464a      	mov	r2, r9
 8010d7e:	6921      	ldr	r1, [r4, #16]
 8010d80:	f000 f862 	bl	8010e48 <memcpy>
 8010d84:	89a2      	ldrh	r2, [r4, #12]
 8010d86:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8010d8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010d8e:	81a2      	strh	r2, [r4, #12]
 8010d90:	6126      	str	r6, [r4, #16]
 8010d92:	6165      	str	r5, [r4, #20]
 8010d94:	444e      	add	r6, r9
 8010d96:	eba5 0509 	sub.w	r5, r5, r9
 8010d9a:	6026      	str	r6, [r4, #0]
 8010d9c:	60a5      	str	r5, [r4, #8]
 8010d9e:	4646      	mov	r6, r8
 8010da0:	4546      	cmp	r6, r8
 8010da2:	bf28      	it	cs
 8010da4:	4646      	movcs	r6, r8
 8010da6:	4632      	mov	r2, r6
 8010da8:	4651      	mov	r1, sl
 8010daa:	6820      	ldr	r0, [r4, #0]
 8010dac:	f000 f82b 	bl	8010e06 <memmove>
 8010db0:	68a2      	ldr	r2, [r4, #8]
 8010db2:	1b92      	subs	r2, r2, r6
 8010db4:	60a2      	str	r2, [r4, #8]
 8010db6:	6822      	ldr	r2, [r4, #0]
 8010db8:	4432      	add	r2, r6
 8010dba:	6022      	str	r2, [r4, #0]
 8010dbc:	68ba      	ldr	r2, [r7, #8]
 8010dbe:	eba2 0308 	sub.w	r3, r2, r8
 8010dc2:	44c2      	add	sl, r8
 8010dc4:	60bb      	str	r3, [r7, #8]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d0aa      	beq.n	8010d20 <__ssprint_r+0x14>
 8010dca:	f04f 0800 	mov.w	r8, #0
 8010dce:	e7b1      	b.n	8010d34 <__ssprint_r+0x28>
 8010dd0:	f04f 0a00 	mov.w	sl, #0
 8010dd4:	46d0      	mov	r8, sl
 8010dd6:	e7ad      	b.n	8010d34 <__ssprint_r+0x28>
 8010dd8:	9801      	ldr	r0, [sp, #4]
 8010dda:	462a      	mov	r2, r5
 8010ddc:	f000 f8a8 	bl	8010f30 <_realloc_r>
 8010de0:	4606      	mov	r6, r0
 8010de2:	2800      	cmp	r0, #0
 8010de4:	d1d4      	bne.n	8010d90 <__ssprint_r+0x84>
 8010de6:	6921      	ldr	r1, [r4, #16]
 8010de8:	9801      	ldr	r0, [sp, #4]
 8010dea:	f7fd f845 	bl	800de78 <_free_r>
 8010dee:	9a01      	ldr	r2, [sp, #4]
 8010df0:	230c      	movs	r3, #12
 8010df2:	6013      	str	r3, [r2, #0]
 8010df4:	89a3      	ldrh	r3, [r4, #12]
 8010df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dfa:	81a3      	strh	r3, [r4, #12]
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	60bb      	str	r3, [r7, #8]
 8010e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e04:	e78d      	b.n	8010d22 <__ssprint_r+0x16>

08010e06 <memmove>:
 8010e06:	4288      	cmp	r0, r1
 8010e08:	b510      	push	{r4, lr}
 8010e0a:	eb01 0402 	add.w	r4, r1, r2
 8010e0e:	d902      	bls.n	8010e16 <memmove+0x10>
 8010e10:	4284      	cmp	r4, r0
 8010e12:	4623      	mov	r3, r4
 8010e14:	d807      	bhi.n	8010e26 <memmove+0x20>
 8010e16:	1e43      	subs	r3, r0, #1
 8010e18:	42a1      	cmp	r1, r4
 8010e1a:	d008      	beq.n	8010e2e <memmove+0x28>
 8010e1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e24:	e7f8      	b.n	8010e18 <memmove+0x12>
 8010e26:	4402      	add	r2, r0
 8010e28:	4601      	mov	r1, r0
 8010e2a:	428a      	cmp	r2, r1
 8010e2c:	d100      	bne.n	8010e30 <memmove+0x2a>
 8010e2e:	bd10      	pop	{r4, pc}
 8010e30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010e38:	e7f7      	b.n	8010e2a <memmove+0x24>
	...

08010e3c <__locale_mb_cur_max>:
 8010e3c:	4b01      	ldr	r3, [pc, #4]	@ (8010e44 <__locale_mb_cur_max+0x8>)
 8010e3e:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8010e42:	4770      	bx	lr
 8010e44:	24000554 	.word	0x24000554

08010e48 <memcpy>:
 8010e48:	440a      	add	r2, r1
 8010e4a:	4291      	cmp	r1, r2
 8010e4c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010e50:	d100      	bne.n	8010e54 <memcpy+0xc>
 8010e52:	4770      	bx	lr
 8010e54:	b510      	push	{r4, lr}
 8010e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e5e:	4291      	cmp	r1, r2
 8010e60:	d1f9      	bne.n	8010e56 <memcpy+0xe>
 8010e62:	bd10      	pop	{r4, pc}

08010e64 <__assert_func>:
 8010e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e66:	4614      	mov	r4, r2
 8010e68:	461a      	mov	r2, r3
 8010e6a:	4b09      	ldr	r3, [pc, #36]	@ (8010e90 <__assert_func+0x2c>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	4605      	mov	r5, r0
 8010e70:	68d8      	ldr	r0, [r3, #12]
 8010e72:	b954      	cbnz	r4, 8010e8a <__assert_func+0x26>
 8010e74:	4b07      	ldr	r3, [pc, #28]	@ (8010e94 <__assert_func+0x30>)
 8010e76:	461c      	mov	r4, r3
 8010e78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e7c:	9100      	str	r1, [sp, #0]
 8010e7e:	462b      	mov	r3, r5
 8010e80:	4905      	ldr	r1, [pc, #20]	@ (8010e98 <__assert_func+0x34>)
 8010e82:	f000 fa0b 	bl	801129c <fiprintf>
 8010e86:	f001 f921 	bl	80120cc <abort>
 8010e8a:	4b04      	ldr	r3, [pc, #16]	@ (8010e9c <__assert_func+0x38>)
 8010e8c:	e7f4      	b.n	8010e78 <__assert_func+0x14>
 8010e8e:	bf00      	nop
 8010e90:	2400001c 	.word	0x2400001c
 8010e94:	08013a65 	.word	0x08013a65
 8010e98:	08013a37 	.word	0x08013a37
 8010e9c:	08013a2a 	.word	0x08013a2a

08010ea0 <_calloc_r>:
 8010ea0:	b538      	push	{r3, r4, r5, lr}
 8010ea2:	fba1 1502 	umull	r1, r5, r1, r2
 8010ea6:	b935      	cbnz	r5, 8010eb6 <_calloc_r+0x16>
 8010ea8:	f7fd f8a6 	bl	800dff8 <_malloc_r>
 8010eac:	4604      	mov	r4, r0
 8010eae:	b938      	cbnz	r0, 8010ec0 <_calloc_r+0x20>
 8010eb0:	2400      	movs	r4, #0
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	bd38      	pop	{r3, r4, r5, pc}
 8010eb6:	f7fc ff4b 	bl	800dd50 <__errno>
 8010eba:	230c      	movs	r3, #12
 8010ebc:	6003      	str	r3, [r0, #0]
 8010ebe:	e7f7      	b.n	8010eb0 <_calloc_r+0x10>
 8010ec0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010ec4:	f022 0203 	bic.w	r2, r2, #3
 8010ec8:	3a04      	subs	r2, #4
 8010eca:	2a24      	cmp	r2, #36	@ 0x24
 8010ecc:	d819      	bhi.n	8010f02 <_calloc_r+0x62>
 8010ece:	2a13      	cmp	r2, #19
 8010ed0:	d915      	bls.n	8010efe <_calloc_r+0x5e>
 8010ed2:	2a1b      	cmp	r2, #27
 8010ed4:	e9c0 5500 	strd	r5, r5, [r0]
 8010ed8:	d806      	bhi.n	8010ee8 <_calloc_r+0x48>
 8010eda:	f100 0308 	add.w	r3, r0, #8
 8010ede:	2200      	movs	r2, #0
 8010ee0:	e9c3 2200 	strd	r2, r2, [r3]
 8010ee4:	609a      	str	r2, [r3, #8]
 8010ee6:	e7e4      	b.n	8010eb2 <_calloc_r+0x12>
 8010ee8:	2a24      	cmp	r2, #36	@ 0x24
 8010eea:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8010eee:	bf11      	iteee	ne
 8010ef0:	f100 0310 	addne.w	r3, r0, #16
 8010ef4:	6105      	streq	r5, [r0, #16]
 8010ef6:	f100 0318 	addeq.w	r3, r0, #24
 8010efa:	6145      	streq	r5, [r0, #20]
 8010efc:	e7ef      	b.n	8010ede <_calloc_r+0x3e>
 8010efe:	4603      	mov	r3, r0
 8010f00:	e7ed      	b.n	8010ede <_calloc_r+0x3e>
 8010f02:	4629      	mov	r1, r5
 8010f04:	f7fc fed5 	bl	800dcb2 <memset>
 8010f08:	e7d3      	b.n	8010eb2 <_calloc_r+0x12>

08010f0a <__ascii_mbtowc>:
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	b901      	cbnz	r1, 8010f10 <__ascii_mbtowc+0x6>
 8010f0e:	a901      	add	r1, sp, #4
 8010f10:	b142      	cbz	r2, 8010f24 <__ascii_mbtowc+0x1a>
 8010f12:	b14b      	cbz	r3, 8010f28 <__ascii_mbtowc+0x1e>
 8010f14:	7813      	ldrb	r3, [r2, #0]
 8010f16:	600b      	str	r3, [r1, #0]
 8010f18:	7812      	ldrb	r2, [r2, #0]
 8010f1a:	1e10      	subs	r0, r2, #0
 8010f1c:	bf18      	it	ne
 8010f1e:	2001      	movne	r0, #1
 8010f20:	b002      	add	sp, #8
 8010f22:	4770      	bx	lr
 8010f24:	4610      	mov	r0, r2
 8010f26:	e7fb      	b.n	8010f20 <__ascii_mbtowc+0x16>
 8010f28:	f06f 0001 	mvn.w	r0, #1
 8010f2c:	e7f8      	b.n	8010f20 <__ascii_mbtowc+0x16>
	...

08010f30 <_realloc_r>:
 8010f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f34:	4682      	mov	sl, r0
 8010f36:	4693      	mov	fp, r2
 8010f38:	460c      	mov	r4, r1
 8010f3a:	b929      	cbnz	r1, 8010f48 <_realloc_r+0x18>
 8010f3c:	4611      	mov	r1, r2
 8010f3e:	b003      	add	sp, #12
 8010f40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f44:	f7fd b858 	b.w	800dff8 <_malloc_r>
 8010f48:	f7fd fa90 	bl	800e46c <__malloc_lock>
 8010f4c:	f10b 080b 	add.w	r8, fp, #11
 8010f50:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8010f54:	f1b8 0f16 	cmp.w	r8, #22
 8010f58:	f1a4 0908 	sub.w	r9, r4, #8
 8010f5c:	f025 0603 	bic.w	r6, r5, #3
 8010f60:	d908      	bls.n	8010f74 <_realloc_r+0x44>
 8010f62:	f038 0807 	bics.w	r8, r8, #7
 8010f66:	d507      	bpl.n	8010f78 <_realloc_r+0x48>
 8010f68:	230c      	movs	r3, #12
 8010f6a:	f8ca 3000 	str.w	r3, [sl]
 8010f6e:	f04f 0b00 	mov.w	fp, #0
 8010f72:	e032      	b.n	8010fda <_realloc_r+0xaa>
 8010f74:	f04f 0810 	mov.w	r8, #16
 8010f78:	45c3      	cmp	fp, r8
 8010f7a:	d8f5      	bhi.n	8010f68 <_realloc_r+0x38>
 8010f7c:	4546      	cmp	r6, r8
 8010f7e:	f280 8174 	bge.w	801126a <_realloc_r+0x33a>
 8010f82:	4b9e      	ldr	r3, [pc, #632]	@ (80111fc <_realloc_r+0x2cc>)
 8010f84:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8010f88:	eb09 0106 	add.w	r1, r9, r6
 8010f8c:	458c      	cmp	ip, r1
 8010f8e:	6848      	ldr	r0, [r1, #4]
 8010f90:	d005      	beq.n	8010f9e <_realloc_r+0x6e>
 8010f92:	f020 0201 	bic.w	r2, r0, #1
 8010f96:	440a      	add	r2, r1
 8010f98:	6852      	ldr	r2, [r2, #4]
 8010f9a:	07d7      	lsls	r7, r2, #31
 8010f9c:	d449      	bmi.n	8011032 <_realloc_r+0x102>
 8010f9e:	f020 0003 	bic.w	r0, r0, #3
 8010fa2:	458c      	cmp	ip, r1
 8010fa4:	eb06 0700 	add.w	r7, r6, r0
 8010fa8:	d11b      	bne.n	8010fe2 <_realloc_r+0xb2>
 8010faa:	f108 0210 	add.w	r2, r8, #16
 8010fae:	42ba      	cmp	r2, r7
 8010fb0:	dc41      	bgt.n	8011036 <_realloc_r+0x106>
 8010fb2:	eb09 0208 	add.w	r2, r9, r8
 8010fb6:	eba7 0708 	sub.w	r7, r7, r8
 8010fba:	f047 0701 	orr.w	r7, r7, #1
 8010fbe:	609a      	str	r2, [r3, #8]
 8010fc0:	6057      	str	r7, [r2, #4]
 8010fc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010fc6:	f003 0301 	and.w	r3, r3, #1
 8010fca:	ea43 0308 	orr.w	r3, r3, r8
 8010fce:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fd2:	4650      	mov	r0, sl
 8010fd4:	f7fd fa50 	bl	800e478 <__malloc_unlock>
 8010fd8:	46a3      	mov	fp, r4
 8010fda:	4658      	mov	r0, fp
 8010fdc:	b003      	add	sp, #12
 8010fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe2:	45b8      	cmp	r8, r7
 8010fe4:	dc27      	bgt.n	8011036 <_realloc_r+0x106>
 8010fe6:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8010fea:	60d3      	str	r3, [r2, #12]
 8010fec:	609a      	str	r2, [r3, #8]
 8010fee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010ff2:	eba7 0008 	sub.w	r0, r7, r8
 8010ff6:	280f      	cmp	r0, #15
 8010ff8:	f003 0301 	and.w	r3, r3, #1
 8010ffc:	eb09 0207 	add.w	r2, r9, r7
 8011000:	f240 8135 	bls.w	801126e <_realloc_r+0x33e>
 8011004:	eb09 0108 	add.w	r1, r9, r8
 8011008:	ea48 0303 	orr.w	r3, r8, r3
 801100c:	f040 0001 	orr.w	r0, r0, #1
 8011010:	f8c9 3004 	str.w	r3, [r9, #4]
 8011014:	6048      	str	r0, [r1, #4]
 8011016:	6853      	ldr	r3, [r2, #4]
 8011018:	f043 0301 	orr.w	r3, r3, #1
 801101c:	6053      	str	r3, [r2, #4]
 801101e:	3108      	adds	r1, #8
 8011020:	4650      	mov	r0, sl
 8011022:	f7fc ff29 	bl	800de78 <_free_r>
 8011026:	4650      	mov	r0, sl
 8011028:	f7fd fa26 	bl	800e478 <__malloc_unlock>
 801102c:	f109 0b08 	add.w	fp, r9, #8
 8011030:	e7d3      	b.n	8010fda <_realloc_r+0xaa>
 8011032:	2000      	movs	r0, #0
 8011034:	4601      	mov	r1, r0
 8011036:	07ea      	lsls	r2, r5, #31
 8011038:	f100 80c7 	bmi.w	80111ca <_realloc_r+0x29a>
 801103c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8011040:	eba9 0505 	sub.w	r5, r9, r5
 8011044:	686a      	ldr	r2, [r5, #4]
 8011046:	f022 0203 	bic.w	r2, r2, #3
 801104a:	4432      	add	r2, r6
 801104c:	9201      	str	r2, [sp, #4]
 801104e:	2900      	cmp	r1, #0
 8011050:	f000 8086 	beq.w	8011160 <_realloc_r+0x230>
 8011054:	458c      	cmp	ip, r1
 8011056:	eb00 0702 	add.w	r7, r0, r2
 801105a:	d149      	bne.n	80110f0 <_realloc_r+0x1c0>
 801105c:	f108 0210 	add.w	r2, r8, #16
 8011060:	42ba      	cmp	r2, r7
 8011062:	dc7d      	bgt.n	8011160 <_realloc_r+0x230>
 8011064:	46ab      	mov	fp, r5
 8011066:	68ea      	ldr	r2, [r5, #12]
 8011068:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 801106c:	60ca      	str	r2, [r1, #12]
 801106e:	6091      	str	r1, [r2, #8]
 8011070:	1f32      	subs	r2, r6, #4
 8011072:	2a24      	cmp	r2, #36	@ 0x24
 8011074:	d836      	bhi.n	80110e4 <_realloc_r+0x1b4>
 8011076:	2a13      	cmp	r2, #19
 8011078:	d932      	bls.n	80110e0 <_realloc_r+0x1b0>
 801107a:	6821      	ldr	r1, [r4, #0]
 801107c:	60a9      	str	r1, [r5, #8]
 801107e:	6861      	ldr	r1, [r4, #4]
 8011080:	60e9      	str	r1, [r5, #12]
 8011082:	2a1b      	cmp	r2, #27
 8011084:	d81a      	bhi.n	80110bc <_realloc_r+0x18c>
 8011086:	3408      	adds	r4, #8
 8011088:	f105 0210 	add.w	r2, r5, #16
 801108c:	6821      	ldr	r1, [r4, #0]
 801108e:	6011      	str	r1, [r2, #0]
 8011090:	6861      	ldr	r1, [r4, #4]
 8011092:	6051      	str	r1, [r2, #4]
 8011094:	68a1      	ldr	r1, [r4, #8]
 8011096:	6091      	str	r1, [r2, #8]
 8011098:	eb05 0208 	add.w	r2, r5, r8
 801109c:	eba7 0708 	sub.w	r7, r7, r8
 80110a0:	f047 0701 	orr.w	r7, r7, #1
 80110a4:	609a      	str	r2, [r3, #8]
 80110a6:	6057      	str	r7, [r2, #4]
 80110a8:	686b      	ldr	r3, [r5, #4]
 80110aa:	f003 0301 	and.w	r3, r3, #1
 80110ae:	ea43 0308 	orr.w	r3, r3, r8
 80110b2:	606b      	str	r3, [r5, #4]
 80110b4:	4650      	mov	r0, sl
 80110b6:	f7fd f9df 	bl	800e478 <__malloc_unlock>
 80110ba:	e78e      	b.n	8010fda <_realloc_r+0xaa>
 80110bc:	68a1      	ldr	r1, [r4, #8]
 80110be:	6129      	str	r1, [r5, #16]
 80110c0:	68e1      	ldr	r1, [r4, #12]
 80110c2:	6169      	str	r1, [r5, #20]
 80110c4:	2a24      	cmp	r2, #36	@ 0x24
 80110c6:	bf01      	itttt	eq
 80110c8:	6922      	ldreq	r2, [r4, #16]
 80110ca:	61aa      	streq	r2, [r5, #24]
 80110cc:	6961      	ldreq	r1, [r4, #20]
 80110ce:	61e9      	streq	r1, [r5, #28]
 80110d0:	bf19      	ittee	ne
 80110d2:	3410      	addne	r4, #16
 80110d4:	f105 0218 	addne.w	r2, r5, #24
 80110d8:	f105 0220 	addeq.w	r2, r5, #32
 80110dc:	3418      	addeq	r4, #24
 80110de:	e7d5      	b.n	801108c <_realloc_r+0x15c>
 80110e0:	465a      	mov	r2, fp
 80110e2:	e7d3      	b.n	801108c <_realloc_r+0x15c>
 80110e4:	4621      	mov	r1, r4
 80110e6:	4658      	mov	r0, fp
 80110e8:	f7ff fe8d 	bl	8010e06 <memmove>
 80110ec:	4b43      	ldr	r3, [pc, #268]	@ (80111fc <_realloc_r+0x2cc>)
 80110ee:	e7d3      	b.n	8011098 <_realloc_r+0x168>
 80110f0:	45b8      	cmp	r8, r7
 80110f2:	dc35      	bgt.n	8011160 <_realloc_r+0x230>
 80110f4:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80110f8:	4628      	mov	r0, r5
 80110fa:	60d3      	str	r3, [r2, #12]
 80110fc:	609a      	str	r2, [r3, #8]
 80110fe:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8011102:	68eb      	ldr	r3, [r5, #12]
 8011104:	60d3      	str	r3, [r2, #12]
 8011106:	609a      	str	r2, [r3, #8]
 8011108:	1f32      	subs	r2, r6, #4
 801110a:	2a24      	cmp	r2, #36	@ 0x24
 801110c:	d824      	bhi.n	8011158 <_realloc_r+0x228>
 801110e:	2a13      	cmp	r2, #19
 8011110:	d908      	bls.n	8011124 <_realloc_r+0x1f4>
 8011112:	6823      	ldr	r3, [r4, #0]
 8011114:	60ab      	str	r3, [r5, #8]
 8011116:	6863      	ldr	r3, [r4, #4]
 8011118:	60eb      	str	r3, [r5, #12]
 801111a:	2a1b      	cmp	r2, #27
 801111c:	d80a      	bhi.n	8011134 <_realloc_r+0x204>
 801111e:	3408      	adds	r4, #8
 8011120:	f105 0010 	add.w	r0, r5, #16
 8011124:	6823      	ldr	r3, [r4, #0]
 8011126:	6003      	str	r3, [r0, #0]
 8011128:	6863      	ldr	r3, [r4, #4]
 801112a:	6043      	str	r3, [r0, #4]
 801112c:	68a3      	ldr	r3, [r4, #8]
 801112e:	6083      	str	r3, [r0, #8]
 8011130:	46a9      	mov	r9, r5
 8011132:	e75c      	b.n	8010fee <_realloc_r+0xbe>
 8011134:	68a3      	ldr	r3, [r4, #8]
 8011136:	612b      	str	r3, [r5, #16]
 8011138:	68e3      	ldr	r3, [r4, #12]
 801113a:	616b      	str	r3, [r5, #20]
 801113c:	2a24      	cmp	r2, #36	@ 0x24
 801113e:	bf01      	itttt	eq
 8011140:	6923      	ldreq	r3, [r4, #16]
 8011142:	61ab      	streq	r3, [r5, #24]
 8011144:	6963      	ldreq	r3, [r4, #20]
 8011146:	61eb      	streq	r3, [r5, #28]
 8011148:	bf19      	ittee	ne
 801114a:	3410      	addne	r4, #16
 801114c:	f105 0018 	addne.w	r0, r5, #24
 8011150:	f105 0020 	addeq.w	r0, r5, #32
 8011154:	3418      	addeq	r4, #24
 8011156:	e7e5      	b.n	8011124 <_realloc_r+0x1f4>
 8011158:	4621      	mov	r1, r4
 801115a:	f7ff fe54 	bl	8010e06 <memmove>
 801115e:	e7e7      	b.n	8011130 <_realloc_r+0x200>
 8011160:	9b01      	ldr	r3, [sp, #4]
 8011162:	4598      	cmp	r8, r3
 8011164:	dc31      	bgt.n	80111ca <_realloc_r+0x29a>
 8011166:	4628      	mov	r0, r5
 8011168:	68eb      	ldr	r3, [r5, #12]
 801116a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801116e:	60d3      	str	r3, [r2, #12]
 8011170:	609a      	str	r2, [r3, #8]
 8011172:	1f32      	subs	r2, r6, #4
 8011174:	2a24      	cmp	r2, #36	@ 0x24
 8011176:	d824      	bhi.n	80111c2 <_realloc_r+0x292>
 8011178:	2a13      	cmp	r2, #19
 801117a:	d908      	bls.n	801118e <_realloc_r+0x25e>
 801117c:	6823      	ldr	r3, [r4, #0]
 801117e:	60ab      	str	r3, [r5, #8]
 8011180:	6863      	ldr	r3, [r4, #4]
 8011182:	60eb      	str	r3, [r5, #12]
 8011184:	2a1b      	cmp	r2, #27
 8011186:	d80a      	bhi.n	801119e <_realloc_r+0x26e>
 8011188:	3408      	adds	r4, #8
 801118a:	f105 0010 	add.w	r0, r5, #16
 801118e:	6823      	ldr	r3, [r4, #0]
 8011190:	6003      	str	r3, [r0, #0]
 8011192:	6863      	ldr	r3, [r4, #4]
 8011194:	6043      	str	r3, [r0, #4]
 8011196:	68a3      	ldr	r3, [r4, #8]
 8011198:	6083      	str	r3, [r0, #8]
 801119a:	9f01      	ldr	r7, [sp, #4]
 801119c:	e7c8      	b.n	8011130 <_realloc_r+0x200>
 801119e:	68a3      	ldr	r3, [r4, #8]
 80111a0:	612b      	str	r3, [r5, #16]
 80111a2:	68e3      	ldr	r3, [r4, #12]
 80111a4:	616b      	str	r3, [r5, #20]
 80111a6:	2a24      	cmp	r2, #36	@ 0x24
 80111a8:	bf01      	itttt	eq
 80111aa:	6923      	ldreq	r3, [r4, #16]
 80111ac:	61ab      	streq	r3, [r5, #24]
 80111ae:	6963      	ldreq	r3, [r4, #20]
 80111b0:	61eb      	streq	r3, [r5, #28]
 80111b2:	bf19      	ittee	ne
 80111b4:	3410      	addne	r4, #16
 80111b6:	f105 0018 	addne.w	r0, r5, #24
 80111ba:	f105 0020 	addeq.w	r0, r5, #32
 80111be:	3418      	addeq	r4, #24
 80111c0:	e7e5      	b.n	801118e <_realloc_r+0x25e>
 80111c2:	4621      	mov	r1, r4
 80111c4:	f7ff fe1f 	bl	8010e06 <memmove>
 80111c8:	e7e7      	b.n	801119a <_realloc_r+0x26a>
 80111ca:	4659      	mov	r1, fp
 80111cc:	4650      	mov	r0, sl
 80111ce:	f7fc ff13 	bl	800dff8 <_malloc_r>
 80111d2:	4683      	mov	fp, r0
 80111d4:	b918      	cbnz	r0, 80111de <_realloc_r+0x2ae>
 80111d6:	4650      	mov	r0, sl
 80111d8:	f7fd f94e 	bl	800e478 <__malloc_unlock>
 80111dc:	e6c7      	b.n	8010f6e <_realloc_r+0x3e>
 80111de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80111e2:	f023 0301 	bic.w	r3, r3, #1
 80111e6:	444b      	add	r3, r9
 80111e8:	f1a0 0208 	sub.w	r2, r0, #8
 80111ec:	4293      	cmp	r3, r2
 80111ee:	d107      	bne.n	8011200 <_realloc_r+0x2d0>
 80111f0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80111f4:	f027 0703 	bic.w	r7, r7, #3
 80111f8:	4437      	add	r7, r6
 80111fa:	e6f8      	b.n	8010fee <_realloc_r+0xbe>
 80111fc:	2400014c 	.word	0x2400014c
 8011200:	1f32      	subs	r2, r6, #4
 8011202:	2a24      	cmp	r2, #36	@ 0x24
 8011204:	d82d      	bhi.n	8011262 <_realloc_r+0x332>
 8011206:	2a13      	cmp	r2, #19
 8011208:	d928      	bls.n	801125c <_realloc_r+0x32c>
 801120a:	6823      	ldr	r3, [r4, #0]
 801120c:	6003      	str	r3, [r0, #0]
 801120e:	6863      	ldr	r3, [r4, #4]
 8011210:	6043      	str	r3, [r0, #4]
 8011212:	2a1b      	cmp	r2, #27
 8011214:	d80e      	bhi.n	8011234 <_realloc_r+0x304>
 8011216:	f104 0208 	add.w	r2, r4, #8
 801121a:	f100 0308 	add.w	r3, r0, #8
 801121e:	6811      	ldr	r1, [r2, #0]
 8011220:	6019      	str	r1, [r3, #0]
 8011222:	6851      	ldr	r1, [r2, #4]
 8011224:	6059      	str	r1, [r3, #4]
 8011226:	6892      	ldr	r2, [r2, #8]
 8011228:	609a      	str	r2, [r3, #8]
 801122a:	4621      	mov	r1, r4
 801122c:	4650      	mov	r0, sl
 801122e:	f7fc fe23 	bl	800de78 <_free_r>
 8011232:	e73f      	b.n	80110b4 <_realloc_r+0x184>
 8011234:	68a3      	ldr	r3, [r4, #8]
 8011236:	6083      	str	r3, [r0, #8]
 8011238:	68e3      	ldr	r3, [r4, #12]
 801123a:	60c3      	str	r3, [r0, #12]
 801123c:	2a24      	cmp	r2, #36	@ 0x24
 801123e:	bf01      	itttt	eq
 8011240:	6923      	ldreq	r3, [r4, #16]
 8011242:	6103      	streq	r3, [r0, #16]
 8011244:	6961      	ldreq	r1, [r4, #20]
 8011246:	6141      	streq	r1, [r0, #20]
 8011248:	bf19      	ittee	ne
 801124a:	f104 0210 	addne.w	r2, r4, #16
 801124e:	f100 0310 	addne.w	r3, r0, #16
 8011252:	f104 0218 	addeq.w	r2, r4, #24
 8011256:	f100 0318 	addeq.w	r3, r0, #24
 801125a:	e7e0      	b.n	801121e <_realloc_r+0x2ee>
 801125c:	4603      	mov	r3, r0
 801125e:	4622      	mov	r2, r4
 8011260:	e7dd      	b.n	801121e <_realloc_r+0x2ee>
 8011262:	4621      	mov	r1, r4
 8011264:	f7ff fdcf 	bl	8010e06 <memmove>
 8011268:	e7df      	b.n	801122a <_realloc_r+0x2fa>
 801126a:	4637      	mov	r7, r6
 801126c:	e6bf      	b.n	8010fee <_realloc_r+0xbe>
 801126e:	431f      	orrs	r7, r3
 8011270:	f8c9 7004 	str.w	r7, [r9, #4]
 8011274:	6853      	ldr	r3, [r2, #4]
 8011276:	f043 0301 	orr.w	r3, r3, #1
 801127a:	6053      	str	r3, [r2, #4]
 801127c:	e6d3      	b.n	8011026 <_realloc_r+0xf6>
 801127e:	bf00      	nop

08011280 <__ascii_wctomb>:
 8011280:	4603      	mov	r3, r0
 8011282:	4608      	mov	r0, r1
 8011284:	b141      	cbz	r1, 8011298 <__ascii_wctomb+0x18>
 8011286:	2aff      	cmp	r2, #255	@ 0xff
 8011288:	d904      	bls.n	8011294 <__ascii_wctomb+0x14>
 801128a:	228a      	movs	r2, #138	@ 0x8a
 801128c:	601a      	str	r2, [r3, #0]
 801128e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011292:	4770      	bx	lr
 8011294:	700a      	strb	r2, [r1, #0]
 8011296:	2001      	movs	r0, #1
 8011298:	4770      	bx	lr
	...

0801129c <fiprintf>:
 801129c:	b40e      	push	{r1, r2, r3}
 801129e:	b503      	push	{r0, r1, lr}
 80112a0:	4601      	mov	r1, r0
 80112a2:	ab03      	add	r3, sp, #12
 80112a4:	4805      	ldr	r0, [pc, #20]	@ (80112bc <fiprintf+0x20>)
 80112a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80112aa:	6800      	ldr	r0, [r0, #0]
 80112ac:	9301      	str	r3, [sp, #4]
 80112ae:	f000 f839 	bl	8011324 <_vfiprintf_r>
 80112b2:	b002      	add	sp, #8
 80112b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80112b8:	b003      	add	sp, #12
 80112ba:	4770      	bx	lr
 80112bc:	2400001c 	.word	0x2400001c

080112c0 <__sprint_r>:
 80112c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112c4:	6893      	ldr	r3, [r2, #8]
 80112c6:	4680      	mov	r8, r0
 80112c8:	460e      	mov	r6, r1
 80112ca:	4614      	mov	r4, r2
 80112cc:	b343      	cbz	r3, 8011320 <__sprint_r+0x60>
 80112ce:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80112d0:	049d      	lsls	r5, r3, #18
 80112d2:	d522      	bpl.n	801131a <__sprint_r+0x5a>
 80112d4:	6815      	ldr	r5, [r2, #0]
 80112d6:	68a0      	ldr	r0, [r4, #8]
 80112d8:	3508      	adds	r5, #8
 80112da:	b928      	cbnz	r0, 80112e8 <__sprint_r+0x28>
 80112dc:	2300      	movs	r3, #0
 80112de:	60a3      	str	r3, [r4, #8]
 80112e0:	2300      	movs	r3, #0
 80112e2:	6063      	str	r3, [r4, #4]
 80112e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e8:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 80112ec:	f04f 0900 	mov.w	r9, #0
 80112f0:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 80112f4:	45ca      	cmp	sl, r9
 80112f6:	dc05      	bgt.n	8011304 <__sprint_r+0x44>
 80112f8:	68a3      	ldr	r3, [r4, #8]
 80112fa:	f027 0703 	bic.w	r7, r7, #3
 80112fe:	1bdb      	subs	r3, r3, r7
 8011300:	60a3      	str	r3, [r4, #8]
 8011302:	e7e8      	b.n	80112d6 <__sprint_r+0x16>
 8011304:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8011308:	4632      	mov	r2, r6
 801130a:	4640      	mov	r0, r8
 801130c:	f000 feb5 	bl	801207a <_fputwc_r>
 8011310:	1c43      	adds	r3, r0, #1
 8011312:	d0e3      	beq.n	80112dc <__sprint_r+0x1c>
 8011314:	f109 0901 	add.w	r9, r9, #1
 8011318:	e7ec      	b.n	80112f4 <__sprint_r+0x34>
 801131a:	f000 fccb 	bl	8011cb4 <__sfvwrite_r>
 801131e:	e7dd      	b.n	80112dc <__sprint_r+0x1c>
 8011320:	4618      	mov	r0, r3
 8011322:	e7dd      	b.n	80112e0 <__sprint_r+0x20>

08011324 <_vfiprintf_r>:
 8011324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011328:	b0bb      	sub	sp, #236	@ 0xec
 801132a:	460f      	mov	r7, r1
 801132c:	4693      	mov	fp, r2
 801132e:	461c      	mov	r4, r3
 8011330:	461d      	mov	r5, r3
 8011332:	9000      	str	r0, [sp, #0]
 8011334:	b118      	cbz	r0, 801133e <_vfiprintf_r+0x1a>
 8011336:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011338:	b90b      	cbnz	r3, 801133e <_vfiprintf_r+0x1a>
 801133a:	f7fc fc21 	bl	800db80 <__sinit>
 801133e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011340:	07db      	lsls	r3, r3, #31
 8011342:	d405      	bmi.n	8011350 <_vfiprintf_r+0x2c>
 8011344:	89bb      	ldrh	r3, [r7, #12]
 8011346:	059e      	lsls	r6, r3, #22
 8011348:	d402      	bmi.n	8011350 <_vfiprintf_r+0x2c>
 801134a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801134c:	f7fc fd2c 	bl	800dda8 <__retarget_lock_acquire_recursive>
 8011350:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8011354:	0498      	lsls	r0, r3, #18
 8011356:	d406      	bmi.n	8011366 <_vfiprintf_r+0x42>
 8011358:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801135c:	81bb      	strh	r3, [r7, #12]
 801135e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011360:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011364:	667b      	str	r3, [r7, #100]	@ 0x64
 8011366:	89bb      	ldrh	r3, [r7, #12]
 8011368:	0719      	lsls	r1, r3, #28
 801136a:	d501      	bpl.n	8011370 <_vfiprintf_r+0x4c>
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	b9ab      	cbnz	r3, 801139c <_vfiprintf_r+0x78>
 8011370:	9800      	ldr	r0, [sp, #0]
 8011372:	4639      	mov	r1, r7
 8011374:	f000 fdea 	bl	8011f4c <__swsetup_r>
 8011378:	b180      	cbz	r0, 801139c <_vfiprintf_r+0x78>
 801137a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801137c:	07da      	lsls	r2, r3, #31
 801137e:	d506      	bpl.n	801138e <_vfiprintf_r+0x6a>
 8011380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011384:	9303      	str	r3, [sp, #12]
 8011386:	9803      	ldr	r0, [sp, #12]
 8011388:	b03b      	add	sp, #236	@ 0xec
 801138a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801138e:	89bb      	ldrh	r3, [r7, #12]
 8011390:	059b      	lsls	r3, r3, #22
 8011392:	d4f5      	bmi.n	8011380 <_vfiprintf_r+0x5c>
 8011394:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011396:	f7fc fd08 	bl	800ddaa <__retarget_lock_release_recursive>
 801139a:	e7f1      	b.n	8011380 <_vfiprintf_r+0x5c>
 801139c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80113a0:	f003 021a 	and.w	r2, r3, #26
 80113a4:	2a0a      	cmp	r2, #10
 80113a6:	d114      	bne.n	80113d2 <_vfiprintf_r+0xae>
 80113a8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80113ac:	2a00      	cmp	r2, #0
 80113ae:	db10      	blt.n	80113d2 <_vfiprintf_r+0xae>
 80113b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80113b2:	07d6      	lsls	r6, r2, #31
 80113b4:	d404      	bmi.n	80113c0 <_vfiprintf_r+0x9c>
 80113b6:	059d      	lsls	r5, r3, #22
 80113b8:	d402      	bmi.n	80113c0 <_vfiprintf_r+0x9c>
 80113ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80113bc:	f7fc fcf5 	bl	800ddaa <__retarget_lock_release_recursive>
 80113c0:	9800      	ldr	r0, [sp, #0]
 80113c2:	4623      	mov	r3, r4
 80113c4:	465a      	mov	r2, fp
 80113c6:	4639      	mov	r1, r7
 80113c8:	b03b      	add	sp, #236	@ 0xec
 80113ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ce:	f000 bc31 	b.w	8011c34 <__sbprintf>
 80113d2:	2300      	movs	r3, #0
 80113d4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 80113d8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80113dc:	ae11      	add	r6, sp, #68	@ 0x44
 80113de:	960e      	str	r6, [sp, #56]	@ 0x38
 80113e0:	9307      	str	r3, [sp, #28]
 80113e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80113e4:	9303      	str	r3, [sp, #12]
 80113e6:	465b      	mov	r3, fp
 80113e8:	461c      	mov	r4, r3
 80113ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113ee:	b10a      	cbz	r2, 80113f4 <_vfiprintf_r+0xd0>
 80113f0:	2a25      	cmp	r2, #37	@ 0x25
 80113f2:	d1f9      	bne.n	80113e8 <_vfiprintf_r+0xc4>
 80113f4:	ebb4 080b 	subs.w	r8, r4, fp
 80113f8:	d00d      	beq.n	8011416 <_vfiprintf_r+0xf2>
 80113fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80113fc:	4443      	add	r3, r8
 80113fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8011400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011402:	3301      	adds	r3, #1
 8011404:	2b07      	cmp	r3, #7
 8011406:	e9c6 b800 	strd	fp, r8, [r6]
 801140a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801140c:	dc75      	bgt.n	80114fa <_vfiprintf_r+0x1d6>
 801140e:	3608      	adds	r6, #8
 8011410:	9b03      	ldr	r3, [sp, #12]
 8011412:	4443      	add	r3, r8
 8011414:	9303      	str	r3, [sp, #12]
 8011416:	7823      	ldrb	r3, [r4, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	f000 83cd 	beq.w	8011bb8 <_vfiprintf_r+0x894>
 801141e:	2300      	movs	r3, #0
 8011420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011424:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8011428:	3401      	adds	r4, #1
 801142a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801142e:	469a      	mov	sl, r3
 8011430:	46a3      	mov	fp, r4
 8011432:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8011436:	f1a3 0220 	sub.w	r2, r3, #32
 801143a:	2a5a      	cmp	r2, #90	@ 0x5a
 801143c:	f200 8316 	bhi.w	8011a6c <_vfiprintf_r+0x748>
 8011440:	e8df f012 	tbh	[pc, r2, lsl #1]
 8011444:	0314009a 	.word	0x0314009a
 8011448:	00a20314 	.word	0x00a20314
 801144c:	03140314 	.word	0x03140314
 8011450:	00820314 	.word	0x00820314
 8011454:	03140314 	.word	0x03140314
 8011458:	00af00a5 	.word	0x00af00a5
 801145c:	00ac0314 	.word	0x00ac0314
 8011460:	031400b1 	.word	0x031400b1
 8011464:	00d000cd 	.word	0x00d000cd
 8011468:	00d000d0 	.word	0x00d000d0
 801146c:	00d000d0 	.word	0x00d000d0
 8011470:	00d000d0 	.word	0x00d000d0
 8011474:	00d000d0 	.word	0x00d000d0
 8011478:	03140314 	.word	0x03140314
 801147c:	03140314 	.word	0x03140314
 8011480:	03140314 	.word	0x03140314
 8011484:	03140314 	.word	0x03140314
 8011488:	00f70314 	.word	0x00f70314
 801148c:	03140104 	.word	0x03140104
 8011490:	03140314 	.word	0x03140314
 8011494:	03140314 	.word	0x03140314
 8011498:	03140314 	.word	0x03140314
 801149c:	03140314 	.word	0x03140314
 80114a0:	01520314 	.word	0x01520314
 80114a4:	03140314 	.word	0x03140314
 80114a8:	019a0314 	.word	0x019a0314
 80114ac:	027a0314 	.word	0x027a0314
 80114b0:	03140314 	.word	0x03140314
 80114b4:	0314029a 	.word	0x0314029a
 80114b8:	03140314 	.word	0x03140314
 80114bc:	03140314 	.word	0x03140314
 80114c0:	03140314 	.word	0x03140314
 80114c4:	03140314 	.word	0x03140314
 80114c8:	00f70314 	.word	0x00f70314
 80114cc:	03140106 	.word	0x03140106
 80114d0:	03140314 	.word	0x03140314
 80114d4:	010600e0 	.word	0x010600e0
 80114d8:	031400f1 	.word	0x031400f1
 80114dc:	031400eb 	.word	0x031400eb
 80114e0:	01540132 	.word	0x01540132
 80114e4:	00f10189 	.word	0x00f10189
 80114e8:	019a0314 	.word	0x019a0314
 80114ec:	027c0098 	.word	0x027c0098
 80114f0:	03140314 	.word	0x03140314
 80114f4:	03140065 	.word	0x03140065
 80114f8:	0098      	.short	0x0098
 80114fa:	9800      	ldr	r0, [sp, #0]
 80114fc:	aa0e      	add	r2, sp, #56	@ 0x38
 80114fe:	4639      	mov	r1, r7
 8011500:	f7ff fede 	bl	80112c0 <__sprint_r>
 8011504:	2800      	cmp	r0, #0
 8011506:	f040 8336 	bne.w	8011b76 <_vfiprintf_r+0x852>
 801150a:	ae11      	add	r6, sp, #68	@ 0x44
 801150c:	e780      	b.n	8011410 <_vfiprintf_r+0xec>
 801150e:	4a99      	ldr	r2, [pc, #612]	@ (8011774 <_vfiprintf_r+0x450>)
 8011510:	9205      	str	r2, [sp, #20]
 8011512:	f01a 0220 	ands.w	r2, sl, #32
 8011516:	f000 8231 	beq.w	801197c <_vfiprintf_r+0x658>
 801151a:	3507      	adds	r5, #7
 801151c:	f025 0507 	bic.w	r5, r5, #7
 8011520:	46a8      	mov	r8, r5
 8011522:	686d      	ldr	r5, [r5, #4]
 8011524:	f858 4b08 	ldr.w	r4, [r8], #8
 8011528:	f01a 0f01 	tst.w	sl, #1
 801152c:	d009      	beq.n	8011542 <_vfiprintf_r+0x21e>
 801152e:	ea54 0205 	orrs.w	r2, r4, r5
 8011532:	bf1f      	itttt	ne
 8011534:	2230      	movne	r2, #48	@ 0x30
 8011536:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 801153a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 801153e:	f04a 0a02 	orrne.w	sl, sl, #2
 8011542:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8011546:	e112      	b.n	801176e <_vfiprintf_r+0x44a>
 8011548:	9800      	ldr	r0, [sp, #0]
 801154a:	f7fe fa37 	bl	800f9bc <_localeconv_r>
 801154e:	6843      	ldr	r3, [r0, #4]
 8011550:	9309      	str	r3, [sp, #36]	@ 0x24
 8011552:	4618      	mov	r0, r3
 8011554:	f7ee ff14 	bl	8000380 <strlen>
 8011558:	9007      	str	r0, [sp, #28]
 801155a:	9800      	ldr	r0, [sp, #0]
 801155c:	f7fe fa2e 	bl	800f9bc <_localeconv_r>
 8011560:	6883      	ldr	r3, [r0, #8]
 8011562:	9306      	str	r3, [sp, #24]
 8011564:	9b07      	ldr	r3, [sp, #28]
 8011566:	b12b      	cbz	r3, 8011574 <_vfiprintf_r+0x250>
 8011568:	9b06      	ldr	r3, [sp, #24]
 801156a:	b11b      	cbz	r3, 8011574 <_vfiprintf_r+0x250>
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	b10b      	cbz	r3, 8011574 <_vfiprintf_r+0x250>
 8011570:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8011574:	465c      	mov	r4, fp
 8011576:	e75b      	b.n	8011430 <_vfiprintf_r+0x10c>
 8011578:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801157c:	2b00      	cmp	r3, #0
 801157e:	d1f9      	bne.n	8011574 <_vfiprintf_r+0x250>
 8011580:	2320      	movs	r3, #32
 8011582:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8011586:	e7f5      	b.n	8011574 <_vfiprintf_r+0x250>
 8011588:	f04a 0a01 	orr.w	sl, sl, #1
 801158c:	e7f2      	b.n	8011574 <_vfiprintf_r+0x250>
 801158e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011592:	9302      	str	r3, [sp, #8]
 8011594:	2b00      	cmp	r3, #0
 8011596:	daed      	bge.n	8011574 <_vfiprintf_r+0x250>
 8011598:	425b      	negs	r3, r3
 801159a:	9302      	str	r3, [sp, #8]
 801159c:	f04a 0a04 	orr.w	sl, sl, #4
 80115a0:	e7e8      	b.n	8011574 <_vfiprintf_r+0x250>
 80115a2:	232b      	movs	r3, #43	@ 0x2b
 80115a4:	e7ed      	b.n	8011582 <_vfiprintf_r+0x25e>
 80115a6:	465a      	mov	r2, fp
 80115a8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80115ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80115ae:	d112      	bne.n	80115d6 <_vfiprintf_r+0x2b2>
 80115b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80115b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80115b8:	9301      	str	r3, [sp, #4]
 80115ba:	4693      	mov	fp, r2
 80115bc:	e7da      	b.n	8011574 <_vfiprintf_r+0x250>
 80115be:	9b01      	ldr	r3, [sp, #4]
 80115c0:	fb00 1303 	mla	r3, r0, r3, r1
 80115c4:	9301      	str	r3, [sp, #4]
 80115c6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80115ca:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80115ce:	2909      	cmp	r1, #9
 80115d0:	d9f5      	bls.n	80115be <_vfiprintf_r+0x29a>
 80115d2:	4693      	mov	fp, r2
 80115d4:	e72f      	b.n	8011436 <_vfiprintf_r+0x112>
 80115d6:	2100      	movs	r1, #0
 80115d8:	9101      	str	r1, [sp, #4]
 80115da:	200a      	movs	r0, #10
 80115dc:	e7f5      	b.n	80115ca <_vfiprintf_r+0x2a6>
 80115de:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 80115e2:	e7c7      	b.n	8011574 <_vfiprintf_r+0x250>
 80115e4:	2100      	movs	r1, #0
 80115e6:	465a      	mov	r2, fp
 80115e8:	9102      	str	r1, [sp, #8]
 80115ea:	200a      	movs	r0, #10
 80115ec:	9902      	ldr	r1, [sp, #8]
 80115ee:	3b30      	subs	r3, #48	@ 0x30
 80115f0:	fb00 3301 	mla	r3, r0, r1, r3
 80115f4:	9302      	str	r3, [sp, #8]
 80115f6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80115fa:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 80115fe:	2909      	cmp	r1, #9
 8011600:	d9f4      	bls.n	80115ec <_vfiprintf_r+0x2c8>
 8011602:	e7e6      	b.n	80115d2 <_vfiprintf_r+0x2ae>
 8011604:	f89b 3000 	ldrb.w	r3, [fp]
 8011608:	2b68      	cmp	r3, #104	@ 0x68
 801160a:	bf06      	itte	eq
 801160c:	f10b 0b01 	addeq.w	fp, fp, #1
 8011610:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8011614:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8011618:	e7ac      	b.n	8011574 <_vfiprintf_r+0x250>
 801161a:	f89b 3000 	ldrb.w	r3, [fp]
 801161e:	2b6c      	cmp	r3, #108	@ 0x6c
 8011620:	d104      	bne.n	801162c <_vfiprintf_r+0x308>
 8011622:	f10b 0b01 	add.w	fp, fp, #1
 8011626:	f04a 0a20 	orr.w	sl, sl, #32
 801162a:	e7a3      	b.n	8011574 <_vfiprintf_r+0x250>
 801162c:	f04a 0a10 	orr.w	sl, sl, #16
 8011630:	e7a0      	b.n	8011574 <_vfiprintf_r+0x250>
 8011632:	46a8      	mov	r8, r5
 8011634:	2400      	movs	r4, #0
 8011636:	f858 3b04 	ldr.w	r3, [r8], #4
 801163a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 801163e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8011642:	2301      	movs	r3, #1
 8011644:	9301      	str	r3, [sp, #4]
 8011646:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 801164a:	e0ab      	b.n	80117a4 <_vfiprintf_r+0x480>
 801164c:	f04a 0a10 	orr.w	sl, sl, #16
 8011650:	f01a 0f20 	tst.w	sl, #32
 8011654:	d011      	beq.n	801167a <_vfiprintf_r+0x356>
 8011656:	3507      	adds	r5, #7
 8011658:	f025 0507 	bic.w	r5, r5, #7
 801165c:	46a8      	mov	r8, r5
 801165e:	686d      	ldr	r5, [r5, #4]
 8011660:	f858 4b08 	ldr.w	r4, [r8], #8
 8011664:	2d00      	cmp	r5, #0
 8011666:	da06      	bge.n	8011676 <_vfiprintf_r+0x352>
 8011668:	4264      	negs	r4, r4
 801166a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801166e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8011672:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8011676:	2301      	movs	r3, #1
 8011678:	e048      	b.n	801170c <_vfiprintf_r+0x3e8>
 801167a:	46a8      	mov	r8, r5
 801167c:	f01a 0f10 	tst.w	sl, #16
 8011680:	f858 5b04 	ldr.w	r5, [r8], #4
 8011684:	d002      	beq.n	801168c <_vfiprintf_r+0x368>
 8011686:	462c      	mov	r4, r5
 8011688:	17ed      	asrs	r5, r5, #31
 801168a:	e7eb      	b.n	8011664 <_vfiprintf_r+0x340>
 801168c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8011690:	d003      	beq.n	801169a <_vfiprintf_r+0x376>
 8011692:	b22c      	sxth	r4, r5
 8011694:	f345 35c0 	sbfx	r5, r5, #15, #1
 8011698:	e7e4      	b.n	8011664 <_vfiprintf_r+0x340>
 801169a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 801169e:	d0f2      	beq.n	8011686 <_vfiprintf_r+0x362>
 80116a0:	b26c      	sxtb	r4, r5
 80116a2:	f345 15c0 	sbfx	r5, r5, #7, #1
 80116a6:	e7dd      	b.n	8011664 <_vfiprintf_r+0x340>
 80116a8:	f01a 0f20 	tst.w	sl, #32
 80116ac:	d007      	beq.n	80116be <_vfiprintf_r+0x39a>
 80116ae:	9a03      	ldr	r2, [sp, #12]
 80116b0:	682b      	ldr	r3, [r5, #0]
 80116b2:	9903      	ldr	r1, [sp, #12]
 80116b4:	17d2      	asrs	r2, r2, #31
 80116b6:	e9c3 1200 	strd	r1, r2, [r3]
 80116ba:	3504      	adds	r5, #4
 80116bc:	e693      	b.n	80113e6 <_vfiprintf_r+0xc2>
 80116be:	f01a 0f10 	tst.w	sl, #16
 80116c2:	d003      	beq.n	80116cc <_vfiprintf_r+0x3a8>
 80116c4:	682b      	ldr	r3, [r5, #0]
 80116c6:	9a03      	ldr	r2, [sp, #12]
 80116c8:	601a      	str	r2, [r3, #0]
 80116ca:	e7f6      	b.n	80116ba <_vfiprintf_r+0x396>
 80116cc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80116d0:	d003      	beq.n	80116da <_vfiprintf_r+0x3b6>
 80116d2:	682b      	ldr	r3, [r5, #0]
 80116d4:	9a03      	ldr	r2, [sp, #12]
 80116d6:	801a      	strh	r2, [r3, #0]
 80116d8:	e7ef      	b.n	80116ba <_vfiprintf_r+0x396>
 80116da:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80116de:	d0f1      	beq.n	80116c4 <_vfiprintf_r+0x3a0>
 80116e0:	682b      	ldr	r3, [r5, #0]
 80116e2:	9a03      	ldr	r2, [sp, #12]
 80116e4:	701a      	strb	r2, [r3, #0]
 80116e6:	e7e8      	b.n	80116ba <_vfiprintf_r+0x396>
 80116e8:	f04a 0a10 	orr.w	sl, sl, #16
 80116ec:	f01a 0320 	ands.w	r3, sl, #32
 80116f0:	d01f      	beq.n	8011732 <_vfiprintf_r+0x40e>
 80116f2:	3507      	adds	r5, #7
 80116f4:	f025 0507 	bic.w	r5, r5, #7
 80116f8:	46a8      	mov	r8, r5
 80116fa:	686d      	ldr	r5, [r5, #4]
 80116fc:	f858 4b08 	ldr.w	r4, [r8], #8
 8011700:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8011704:	2300      	movs	r3, #0
 8011706:	2200      	movs	r2, #0
 8011708:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 801170c:	9a01      	ldr	r2, [sp, #4]
 801170e:	3201      	adds	r2, #1
 8011710:	f000 825f 	beq.w	8011bd2 <_vfiprintf_r+0x8ae>
 8011714:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8011718:	9204      	str	r2, [sp, #16]
 801171a:	ea54 0205 	orrs.w	r2, r4, r5
 801171e:	f040 825e 	bne.w	8011bde <_vfiprintf_r+0x8ba>
 8011722:	9a01      	ldr	r2, [sp, #4]
 8011724:	2a00      	cmp	r2, #0
 8011726:	f000 8198 	beq.w	8011a5a <_vfiprintf_r+0x736>
 801172a:	2b01      	cmp	r3, #1
 801172c:	f040 825a 	bne.w	8011be4 <_vfiprintf_r+0x8c0>
 8011730:	e13b      	b.n	80119aa <_vfiprintf_r+0x686>
 8011732:	46a8      	mov	r8, r5
 8011734:	f01a 0510 	ands.w	r5, sl, #16
 8011738:	f858 4b04 	ldr.w	r4, [r8], #4
 801173c:	d001      	beq.n	8011742 <_vfiprintf_r+0x41e>
 801173e:	461d      	mov	r5, r3
 8011740:	e7de      	b.n	8011700 <_vfiprintf_r+0x3dc>
 8011742:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8011746:	d001      	beq.n	801174c <_vfiprintf_r+0x428>
 8011748:	b2a4      	uxth	r4, r4
 801174a:	e7d9      	b.n	8011700 <_vfiprintf_r+0x3dc>
 801174c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8011750:	d0d6      	beq.n	8011700 <_vfiprintf_r+0x3dc>
 8011752:	b2e4      	uxtb	r4, r4
 8011754:	e7f3      	b.n	801173e <_vfiprintf_r+0x41a>
 8011756:	46a8      	mov	r8, r5
 8011758:	f647 0330 	movw	r3, #30768	@ 0x7830
 801175c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8011760:	f858 4b04 	ldr.w	r4, [r8], #4
 8011764:	4b03      	ldr	r3, [pc, #12]	@ (8011774 <_vfiprintf_r+0x450>)
 8011766:	9305      	str	r3, [sp, #20]
 8011768:	2500      	movs	r5, #0
 801176a:	f04a 0a02 	orr.w	sl, sl, #2
 801176e:	2302      	movs	r3, #2
 8011770:	e7c9      	b.n	8011706 <_vfiprintf_r+0x3e2>
 8011772:	bf00      	nop
 8011774:	08013810 	.word	0x08013810
 8011778:	9b01      	ldr	r3, [sp, #4]
 801177a:	46a8      	mov	r8, r5
 801177c:	1c5c      	adds	r4, r3, #1
 801177e:	f04f 0500 	mov.w	r5, #0
 8011782:	f858 9b04 	ldr.w	r9, [r8], #4
 8011786:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 801178a:	f000 80d0 	beq.w	801192e <_vfiprintf_r+0x60a>
 801178e:	461a      	mov	r2, r3
 8011790:	4629      	mov	r1, r5
 8011792:	4648      	mov	r0, r9
 8011794:	f7ee fda4 	bl	80002e0 <memchr>
 8011798:	4604      	mov	r4, r0
 801179a:	b118      	cbz	r0, 80117a4 <_vfiprintf_r+0x480>
 801179c:	eba0 0309 	sub.w	r3, r0, r9
 80117a0:	9301      	str	r3, [sp, #4]
 80117a2:	462c      	mov	r4, r5
 80117a4:	9b01      	ldr	r3, [sp, #4]
 80117a6:	42a3      	cmp	r3, r4
 80117a8:	bfb8      	it	lt
 80117aa:	4623      	movlt	r3, r4
 80117ac:	9304      	str	r3, [sp, #16]
 80117ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80117b2:	b113      	cbz	r3, 80117ba <_vfiprintf_r+0x496>
 80117b4:	9b04      	ldr	r3, [sp, #16]
 80117b6:	3301      	adds	r3, #1
 80117b8:	9304      	str	r3, [sp, #16]
 80117ba:	f01a 0302 	ands.w	r3, sl, #2
 80117be:	9308      	str	r3, [sp, #32]
 80117c0:	bf1e      	ittt	ne
 80117c2:	9b04      	ldrne	r3, [sp, #16]
 80117c4:	3302      	addne	r3, #2
 80117c6:	9304      	strne	r3, [sp, #16]
 80117c8:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 80117cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80117ce:	d11f      	bne.n	8011810 <_vfiprintf_r+0x4ec>
 80117d0:	9b02      	ldr	r3, [sp, #8]
 80117d2:	9a04      	ldr	r2, [sp, #16]
 80117d4:	1a9d      	subs	r5, r3, r2
 80117d6:	2d00      	cmp	r5, #0
 80117d8:	dd1a      	ble.n	8011810 <_vfiprintf_r+0x4ec>
 80117da:	4ba9      	ldr	r3, [pc, #676]	@ (8011a80 <_vfiprintf_r+0x75c>)
 80117dc:	6033      	str	r3, [r6, #0]
 80117de:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80117e2:	2d10      	cmp	r5, #16
 80117e4:	f102 0201 	add.w	r2, r2, #1
 80117e8:	f106 0008 	add.w	r0, r6, #8
 80117ec:	f300 814e 	bgt.w	8011a8c <_vfiprintf_r+0x768>
 80117f0:	6075      	str	r5, [r6, #4]
 80117f2:	2a07      	cmp	r2, #7
 80117f4:	4465      	add	r5, ip
 80117f6:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80117fa:	f340 815a 	ble.w	8011ab2 <_vfiprintf_r+0x78e>
 80117fe:	9800      	ldr	r0, [sp, #0]
 8011800:	aa0e      	add	r2, sp, #56	@ 0x38
 8011802:	4639      	mov	r1, r7
 8011804:	f7ff fd5c 	bl	80112c0 <__sprint_r>
 8011808:	2800      	cmp	r0, #0
 801180a:	f040 81b4 	bne.w	8011b76 <_vfiprintf_r+0x852>
 801180e:	ae11      	add	r6, sp, #68	@ 0x44
 8011810:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8011814:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8011818:	b161      	cbz	r1, 8011834 <_vfiprintf_r+0x510>
 801181a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 801181e:	3301      	adds	r3, #1
 8011820:	6031      	str	r1, [r6, #0]
 8011822:	2101      	movs	r1, #1
 8011824:	440a      	add	r2, r1
 8011826:	2b07      	cmp	r3, #7
 8011828:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801182c:	6071      	str	r1, [r6, #4]
 801182e:	f300 8142 	bgt.w	8011ab6 <_vfiprintf_r+0x792>
 8011832:	3608      	adds	r6, #8
 8011834:	9908      	ldr	r1, [sp, #32]
 8011836:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801183a:	b159      	cbz	r1, 8011854 <_vfiprintf_r+0x530>
 801183c:	a90d      	add	r1, sp, #52	@ 0x34
 801183e:	3301      	adds	r3, #1
 8011840:	6031      	str	r1, [r6, #0]
 8011842:	2102      	movs	r1, #2
 8011844:	440a      	add	r2, r1
 8011846:	2b07      	cmp	r3, #7
 8011848:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 801184c:	6071      	str	r1, [r6, #4]
 801184e:	f300 813b 	bgt.w	8011ac8 <_vfiprintf_r+0x7a4>
 8011852:	3608      	adds	r6, #8
 8011854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011856:	2b80      	cmp	r3, #128	@ 0x80
 8011858:	d11f      	bne.n	801189a <_vfiprintf_r+0x576>
 801185a:	9b02      	ldr	r3, [sp, #8]
 801185c:	9a04      	ldr	r2, [sp, #16]
 801185e:	1a9d      	subs	r5, r3, r2
 8011860:	2d00      	cmp	r5, #0
 8011862:	dd1a      	ble.n	801189a <_vfiprintf_r+0x576>
 8011864:	4b87      	ldr	r3, [pc, #540]	@ (8011a84 <_vfiprintf_r+0x760>)
 8011866:	6033      	str	r3, [r6, #0]
 8011868:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 801186c:	2d10      	cmp	r5, #16
 801186e:	f102 0201 	add.w	r2, r2, #1
 8011872:	f106 0008 	add.w	r0, r6, #8
 8011876:	f300 8130 	bgt.w	8011ada <_vfiprintf_r+0x7b6>
 801187a:	6075      	str	r5, [r6, #4]
 801187c:	2a07      	cmp	r2, #7
 801187e:	4465      	add	r5, ip
 8011880:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8011884:	f340 813c 	ble.w	8011b00 <_vfiprintf_r+0x7dc>
 8011888:	9800      	ldr	r0, [sp, #0]
 801188a:	aa0e      	add	r2, sp, #56	@ 0x38
 801188c:	4639      	mov	r1, r7
 801188e:	f7ff fd17 	bl	80112c0 <__sprint_r>
 8011892:	2800      	cmp	r0, #0
 8011894:	f040 816f 	bne.w	8011b76 <_vfiprintf_r+0x852>
 8011898:	ae11      	add	r6, sp, #68	@ 0x44
 801189a:	9b01      	ldr	r3, [sp, #4]
 801189c:	1ae4      	subs	r4, r4, r3
 801189e:	2c00      	cmp	r4, #0
 80118a0:	dd1a      	ble.n	80118d8 <_vfiprintf_r+0x5b4>
 80118a2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80118a6:	4877      	ldr	r0, [pc, #476]	@ (8011a84 <_vfiprintf_r+0x760>)
 80118a8:	6030      	str	r0, [r6, #0]
 80118aa:	2c10      	cmp	r4, #16
 80118ac:	f103 0301 	add.w	r3, r3, #1
 80118b0:	f106 0108 	add.w	r1, r6, #8
 80118b4:	f300 8126 	bgt.w	8011b04 <_vfiprintf_r+0x7e0>
 80118b8:	6074      	str	r4, [r6, #4]
 80118ba:	2b07      	cmp	r3, #7
 80118bc:	4414      	add	r4, r2
 80118be:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 80118c2:	f340 8130 	ble.w	8011b26 <_vfiprintf_r+0x802>
 80118c6:	9800      	ldr	r0, [sp, #0]
 80118c8:	aa0e      	add	r2, sp, #56	@ 0x38
 80118ca:	4639      	mov	r1, r7
 80118cc:	f7ff fcf8 	bl	80112c0 <__sprint_r>
 80118d0:	2800      	cmp	r0, #0
 80118d2:	f040 8150 	bne.w	8011b76 <_vfiprintf_r+0x852>
 80118d6:	ae11      	add	r6, sp, #68	@ 0x44
 80118d8:	9b01      	ldr	r3, [sp, #4]
 80118da:	9a01      	ldr	r2, [sp, #4]
 80118dc:	6073      	str	r3, [r6, #4]
 80118de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80118e0:	f8c6 9000 	str.w	r9, [r6]
 80118e4:	4413      	add	r3, r2
 80118e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80118e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118ea:	3301      	adds	r3, #1
 80118ec:	2b07      	cmp	r3, #7
 80118ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80118f0:	f300 811b 	bgt.w	8011b2a <_vfiprintf_r+0x806>
 80118f4:	f106 0308 	add.w	r3, r6, #8
 80118f8:	f01a 0f04 	tst.w	sl, #4
 80118fc:	f040 811d 	bne.w	8011b3a <_vfiprintf_r+0x816>
 8011900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011904:	9904      	ldr	r1, [sp, #16]
 8011906:	428a      	cmp	r2, r1
 8011908:	bfac      	ite	ge
 801190a:	189b      	addge	r3, r3, r2
 801190c:	185b      	addlt	r3, r3, r1
 801190e:	9303      	str	r3, [sp, #12]
 8011910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011912:	b13b      	cbz	r3, 8011924 <_vfiprintf_r+0x600>
 8011914:	9800      	ldr	r0, [sp, #0]
 8011916:	aa0e      	add	r2, sp, #56	@ 0x38
 8011918:	4639      	mov	r1, r7
 801191a:	f7ff fcd1 	bl	80112c0 <__sprint_r>
 801191e:	2800      	cmp	r0, #0
 8011920:	f040 8129 	bne.w	8011b76 <_vfiprintf_r+0x852>
 8011924:	2300      	movs	r3, #0
 8011926:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011928:	4645      	mov	r5, r8
 801192a:	ae11      	add	r6, sp, #68	@ 0x44
 801192c:	e55b      	b.n	80113e6 <_vfiprintf_r+0xc2>
 801192e:	4648      	mov	r0, r9
 8011930:	f7ee fd26 	bl	8000380 <strlen>
 8011934:	9001      	str	r0, [sp, #4]
 8011936:	e734      	b.n	80117a2 <_vfiprintf_r+0x47e>
 8011938:	f04a 0a10 	orr.w	sl, sl, #16
 801193c:	f01a 0320 	ands.w	r3, sl, #32
 8011940:	d008      	beq.n	8011954 <_vfiprintf_r+0x630>
 8011942:	3507      	adds	r5, #7
 8011944:	f025 0507 	bic.w	r5, r5, #7
 8011948:	46a8      	mov	r8, r5
 801194a:	686d      	ldr	r5, [r5, #4]
 801194c:	f858 4b08 	ldr.w	r4, [r8], #8
 8011950:	2301      	movs	r3, #1
 8011952:	e6d8      	b.n	8011706 <_vfiprintf_r+0x3e2>
 8011954:	46a8      	mov	r8, r5
 8011956:	f01a 0510 	ands.w	r5, sl, #16
 801195a:	f858 4b04 	ldr.w	r4, [r8], #4
 801195e:	d001      	beq.n	8011964 <_vfiprintf_r+0x640>
 8011960:	461d      	mov	r5, r3
 8011962:	e7f5      	b.n	8011950 <_vfiprintf_r+0x62c>
 8011964:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8011968:	d001      	beq.n	801196e <_vfiprintf_r+0x64a>
 801196a:	b2a4      	uxth	r4, r4
 801196c:	e7f0      	b.n	8011950 <_vfiprintf_r+0x62c>
 801196e:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8011972:	d0ed      	beq.n	8011950 <_vfiprintf_r+0x62c>
 8011974:	b2e4      	uxtb	r4, r4
 8011976:	e7f3      	b.n	8011960 <_vfiprintf_r+0x63c>
 8011978:	4a43      	ldr	r2, [pc, #268]	@ (8011a88 <_vfiprintf_r+0x764>)
 801197a:	e5c9      	b.n	8011510 <_vfiprintf_r+0x1ec>
 801197c:	46a8      	mov	r8, r5
 801197e:	f01a 0510 	ands.w	r5, sl, #16
 8011982:	f858 4b04 	ldr.w	r4, [r8], #4
 8011986:	d001      	beq.n	801198c <_vfiprintf_r+0x668>
 8011988:	4615      	mov	r5, r2
 801198a:	e5cd      	b.n	8011528 <_vfiprintf_r+0x204>
 801198c:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8011990:	d001      	beq.n	8011996 <_vfiprintf_r+0x672>
 8011992:	b2a4      	uxth	r4, r4
 8011994:	e5c8      	b.n	8011528 <_vfiprintf_r+0x204>
 8011996:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801199a:	f43f adc5 	beq.w	8011528 <_vfiprintf_r+0x204>
 801199e:	b2e4      	uxtb	r4, r4
 80119a0:	e7f2      	b.n	8011988 <_vfiprintf_r+0x664>
 80119a2:	2c0a      	cmp	r4, #10
 80119a4:	f175 0300 	sbcs.w	r3, r5, #0
 80119a8:	d206      	bcs.n	80119b8 <_vfiprintf_r+0x694>
 80119aa:	3430      	adds	r4, #48	@ 0x30
 80119ac:	b2e4      	uxtb	r4, r4
 80119ae:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 80119b2:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 80119b6:	e131      	b.n	8011c1c <_vfiprintf_r+0x8f8>
 80119b8:	ab3a      	add	r3, sp, #232	@ 0xe8
 80119ba:	9308      	str	r3, [sp, #32]
 80119bc:	9b04      	ldr	r3, [sp, #16]
 80119be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80119c2:	f04f 0a00 	mov.w	sl, #0
 80119c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80119c8:	220a      	movs	r2, #10
 80119ca:	2300      	movs	r3, #0
 80119cc:	4620      	mov	r0, r4
 80119ce:	4629      	mov	r1, r5
 80119d0:	f7ee fcde 	bl	8000390 <__aeabi_uldivmod>
 80119d4:	460b      	mov	r3, r1
 80119d6:	9908      	ldr	r1, [sp, #32]
 80119d8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80119da:	3230      	adds	r2, #48	@ 0x30
 80119dc:	f801 2c01 	strb.w	r2, [r1, #-1]
 80119e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80119e2:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 80119e6:	f10a 0a01 	add.w	sl, sl, #1
 80119ea:	b1e2      	cbz	r2, 8011a26 <_vfiprintf_r+0x702>
 80119ec:	9a06      	ldr	r2, [sp, #24]
 80119ee:	7812      	ldrb	r2, [r2, #0]
 80119f0:	4552      	cmp	r2, sl
 80119f2:	d118      	bne.n	8011a26 <_vfiprintf_r+0x702>
 80119f4:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80119f8:	d015      	beq.n	8011a26 <_vfiprintf_r+0x702>
 80119fa:	2c0a      	cmp	r4, #10
 80119fc:	f175 0200 	sbcs.w	r2, r5, #0
 8011a00:	d311      	bcc.n	8011a26 <_vfiprintf_r+0x702>
 8011a02:	9308      	str	r3, [sp, #32]
 8011a04:	9b07      	ldr	r3, [sp, #28]
 8011a06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a08:	eba9 0903 	sub.w	r9, r9, r3
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	4648      	mov	r0, r9
 8011a10:	f7fd ffc1 	bl	800f996 <strncpy>
 8011a14:	9b06      	ldr	r3, [sp, #24]
 8011a16:	785a      	ldrb	r2, [r3, #1]
 8011a18:	9b08      	ldr	r3, [sp, #32]
 8011a1a:	b172      	cbz	r2, 8011a3a <_vfiprintf_r+0x716>
 8011a1c:	9a06      	ldr	r2, [sp, #24]
 8011a1e:	3201      	adds	r2, #1
 8011a20:	9206      	str	r2, [sp, #24]
 8011a22:	f04f 0a00 	mov.w	sl, #0
 8011a26:	2c0a      	cmp	r4, #10
 8011a28:	f175 0500 	sbcs.w	r5, r5, #0
 8011a2c:	f0c0 80f6 	bcc.w	8011c1c <_vfiprintf_r+0x8f8>
 8011a30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8011a32:	f8cd 9020 	str.w	r9, [sp, #32]
 8011a36:	461d      	mov	r5, r3
 8011a38:	e7c6      	b.n	80119c8 <_vfiprintf_r+0x6a4>
 8011a3a:	4692      	mov	sl, r2
 8011a3c:	e7f3      	b.n	8011a26 <_vfiprintf_r+0x702>
 8011a3e:	f004 030f 	and.w	r3, r4, #15
 8011a42:	9a05      	ldr	r2, [sp, #20]
 8011a44:	0924      	lsrs	r4, r4, #4
 8011a46:	5cd3      	ldrb	r3, [r2, r3]
 8011a48:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011a4c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8011a50:	092d      	lsrs	r5, r5, #4
 8011a52:	ea54 0305 	orrs.w	r3, r4, r5
 8011a56:	d1f2      	bne.n	8011a3e <_vfiprintf_r+0x71a>
 8011a58:	e0e0      	b.n	8011c1c <_vfiprintf_r+0x8f8>
 8011a5a:	b923      	cbnz	r3, 8011a66 <_vfiprintf_r+0x742>
 8011a5c:	f01a 0f01 	tst.w	sl, #1
 8011a60:	d001      	beq.n	8011a66 <_vfiprintf_r+0x742>
 8011a62:	2430      	movs	r4, #48	@ 0x30
 8011a64:	e7a3      	b.n	80119ae <_vfiprintf_r+0x68a>
 8011a66:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8011a6a:	e0d7      	b.n	8011c1c <_vfiprintf_r+0x8f8>
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	f000 80a3 	beq.w	8011bb8 <_vfiprintf_r+0x894>
 8011a72:	2400      	movs	r4, #0
 8011a74:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8011a78:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8011a7c:	46a8      	mov	r8, r5
 8011a7e:	e5e0      	b.n	8011642 <_vfiprintf_r+0x31e>
 8011a80:	08013b77 	.word	0x08013b77
 8011a84:	08013b67 	.word	0x08013b67
 8011a88:	08013821 	.word	0x08013821
 8011a8c:	2110      	movs	r1, #16
 8011a8e:	6071      	str	r1, [r6, #4]
 8011a90:	2a07      	cmp	r2, #7
 8011a92:	4461      	add	r1, ip
 8011a94:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8011a98:	dd08      	ble.n	8011aac <_vfiprintf_r+0x788>
 8011a9a:	9800      	ldr	r0, [sp, #0]
 8011a9c:	aa0e      	add	r2, sp, #56	@ 0x38
 8011a9e:	4639      	mov	r1, r7
 8011aa0:	f7ff fc0e 	bl	80112c0 <__sprint_r>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	d166      	bne.n	8011b76 <_vfiprintf_r+0x852>
 8011aa8:	4b60      	ldr	r3, [pc, #384]	@ (8011c2c <_vfiprintf_r+0x908>)
 8011aaa:	a811      	add	r0, sp, #68	@ 0x44
 8011aac:	3d10      	subs	r5, #16
 8011aae:	4606      	mov	r6, r0
 8011ab0:	e694      	b.n	80117dc <_vfiprintf_r+0x4b8>
 8011ab2:	4606      	mov	r6, r0
 8011ab4:	e6ac      	b.n	8011810 <_vfiprintf_r+0x4ec>
 8011ab6:	9800      	ldr	r0, [sp, #0]
 8011ab8:	aa0e      	add	r2, sp, #56	@ 0x38
 8011aba:	4639      	mov	r1, r7
 8011abc:	f7ff fc00 	bl	80112c0 <__sprint_r>
 8011ac0:	2800      	cmp	r0, #0
 8011ac2:	d158      	bne.n	8011b76 <_vfiprintf_r+0x852>
 8011ac4:	ae11      	add	r6, sp, #68	@ 0x44
 8011ac6:	e6b5      	b.n	8011834 <_vfiprintf_r+0x510>
 8011ac8:	9800      	ldr	r0, [sp, #0]
 8011aca:	aa0e      	add	r2, sp, #56	@ 0x38
 8011acc:	4639      	mov	r1, r7
 8011ace:	f7ff fbf7 	bl	80112c0 <__sprint_r>
 8011ad2:	2800      	cmp	r0, #0
 8011ad4:	d14f      	bne.n	8011b76 <_vfiprintf_r+0x852>
 8011ad6:	ae11      	add	r6, sp, #68	@ 0x44
 8011ad8:	e6bc      	b.n	8011854 <_vfiprintf_r+0x530>
 8011ada:	2110      	movs	r1, #16
 8011adc:	6071      	str	r1, [r6, #4]
 8011ade:	2a07      	cmp	r2, #7
 8011ae0:	4461      	add	r1, ip
 8011ae2:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8011ae6:	dd08      	ble.n	8011afa <_vfiprintf_r+0x7d6>
 8011ae8:	9800      	ldr	r0, [sp, #0]
 8011aea:	aa0e      	add	r2, sp, #56	@ 0x38
 8011aec:	4639      	mov	r1, r7
 8011aee:	f7ff fbe7 	bl	80112c0 <__sprint_r>
 8011af2:	2800      	cmp	r0, #0
 8011af4:	d13f      	bne.n	8011b76 <_vfiprintf_r+0x852>
 8011af6:	4b4e      	ldr	r3, [pc, #312]	@ (8011c30 <_vfiprintf_r+0x90c>)
 8011af8:	a811      	add	r0, sp, #68	@ 0x44
 8011afa:	3d10      	subs	r5, #16
 8011afc:	4606      	mov	r6, r0
 8011afe:	e6b2      	b.n	8011866 <_vfiprintf_r+0x542>
 8011b00:	4606      	mov	r6, r0
 8011b02:	e6ca      	b.n	801189a <_vfiprintf_r+0x576>
 8011b04:	2010      	movs	r0, #16
 8011b06:	4402      	add	r2, r0
 8011b08:	2b07      	cmp	r3, #7
 8011b0a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8011b0e:	6070      	str	r0, [r6, #4]
 8011b10:	dd06      	ble.n	8011b20 <_vfiprintf_r+0x7fc>
 8011b12:	9800      	ldr	r0, [sp, #0]
 8011b14:	aa0e      	add	r2, sp, #56	@ 0x38
 8011b16:	4639      	mov	r1, r7
 8011b18:	f7ff fbd2 	bl	80112c0 <__sprint_r>
 8011b1c:	bb58      	cbnz	r0, 8011b76 <_vfiprintf_r+0x852>
 8011b1e:	a911      	add	r1, sp, #68	@ 0x44
 8011b20:	3c10      	subs	r4, #16
 8011b22:	460e      	mov	r6, r1
 8011b24:	e6bd      	b.n	80118a2 <_vfiprintf_r+0x57e>
 8011b26:	460e      	mov	r6, r1
 8011b28:	e6d6      	b.n	80118d8 <_vfiprintf_r+0x5b4>
 8011b2a:	9800      	ldr	r0, [sp, #0]
 8011b2c:	aa0e      	add	r2, sp, #56	@ 0x38
 8011b2e:	4639      	mov	r1, r7
 8011b30:	f7ff fbc6 	bl	80112c0 <__sprint_r>
 8011b34:	b9f8      	cbnz	r0, 8011b76 <_vfiprintf_r+0x852>
 8011b36:	ab11      	add	r3, sp, #68	@ 0x44
 8011b38:	e6de      	b.n	80118f8 <_vfiprintf_r+0x5d4>
 8011b3a:	9a02      	ldr	r2, [sp, #8]
 8011b3c:	9904      	ldr	r1, [sp, #16]
 8011b3e:	1a54      	subs	r4, r2, r1
 8011b40:	2c00      	cmp	r4, #0
 8011b42:	f77f aedd 	ble.w	8011900 <_vfiprintf_r+0x5dc>
 8011b46:	4d39      	ldr	r5, [pc, #228]	@ (8011c2c <_vfiprintf_r+0x908>)
 8011b48:	2610      	movs	r6, #16
 8011b4a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8011b4e:	2c10      	cmp	r4, #16
 8011b50:	f102 0201 	add.w	r2, r2, #1
 8011b54:	601d      	str	r5, [r3, #0]
 8011b56:	dc1d      	bgt.n	8011b94 <_vfiprintf_r+0x870>
 8011b58:	605c      	str	r4, [r3, #4]
 8011b5a:	2a07      	cmp	r2, #7
 8011b5c:	440c      	add	r4, r1
 8011b5e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8011b62:	f77f aecd 	ble.w	8011900 <_vfiprintf_r+0x5dc>
 8011b66:	9800      	ldr	r0, [sp, #0]
 8011b68:	aa0e      	add	r2, sp, #56	@ 0x38
 8011b6a:	4639      	mov	r1, r7
 8011b6c:	f7ff fba8 	bl	80112c0 <__sprint_r>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	f43f aec5 	beq.w	8011900 <_vfiprintf_r+0x5dc>
 8011b76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011b78:	07d9      	lsls	r1, r3, #31
 8011b7a:	d405      	bmi.n	8011b88 <_vfiprintf_r+0x864>
 8011b7c:	89bb      	ldrh	r3, [r7, #12]
 8011b7e:	059a      	lsls	r2, r3, #22
 8011b80:	d402      	bmi.n	8011b88 <_vfiprintf_r+0x864>
 8011b82:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011b84:	f7fc f911 	bl	800ddaa <__retarget_lock_release_recursive>
 8011b88:	89bb      	ldrh	r3, [r7, #12]
 8011b8a:	065b      	lsls	r3, r3, #25
 8011b8c:	f57f abfb 	bpl.w	8011386 <_vfiprintf_r+0x62>
 8011b90:	f7ff bbf6 	b.w	8011380 <_vfiprintf_r+0x5c>
 8011b94:	3110      	adds	r1, #16
 8011b96:	2a07      	cmp	r2, #7
 8011b98:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8011b9c:	605e      	str	r6, [r3, #4]
 8011b9e:	dc02      	bgt.n	8011ba6 <_vfiprintf_r+0x882>
 8011ba0:	3308      	adds	r3, #8
 8011ba2:	3c10      	subs	r4, #16
 8011ba4:	e7d1      	b.n	8011b4a <_vfiprintf_r+0x826>
 8011ba6:	9800      	ldr	r0, [sp, #0]
 8011ba8:	aa0e      	add	r2, sp, #56	@ 0x38
 8011baa:	4639      	mov	r1, r7
 8011bac:	f7ff fb88 	bl	80112c0 <__sprint_r>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	d1e0      	bne.n	8011b76 <_vfiprintf_r+0x852>
 8011bb4:	ab11      	add	r3, sp, #68	@ 0x44
 8011bb6:	e7f4      	b.n	8011ba2 <_vfiprintf_r+0x87e>
 8011bb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011bba:	b913      	cbnz	r3, 8011bc2 <_vfiprintf_r+0x89e>
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011bc0:	e7d9      	b.n	8011b76 <_vfiprintf_r+0x852>
 8011bc2:	9800      	ldr	r0, [sp, #0]
 8011bc4:	aa0e      	add	r2, sp, #56	@ 0x38
 8011bc6:	4639      	mov	r1, r7
 8011bc8:	f7ff fb7a 	bl	80112c0 <__sprint_r>
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	d0f5      	beq.n	8011bbc <_vfiprintf_r+0x898>
 8011bd0:	e7d1      	b.n	8011b76 <_vfiprintf_r+0x852>
 8011bd2:	ea54 0205 	orrs.w	r2, r4, r5
 8011bd6:	f8cd a010 	str.w	sl, [sp, #16]
 8011bda:	f43f ada6 	beq.w	801172a <_vfiprintf_r+0x406>
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	f43f aedf 	beq.w	80119a2 <_vfiprintf_r+0x67e>
 8011be4:	2b02      	cmp	r3, #2
 8011be6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8011bea:	f43f af28 	beq.w	8011a3e <_vfiprintf_r+0x71a>
 8011bee:	f004 0307 	and.w	r3, r4, #7
 8011bf2:	08e4      	lsrs	r4, r4, #3
 8011bf4:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8011bf8:	08ed      	lsrs	r5, r5, #3
 8011bfa:	3330      	adds	r3, #48	@ 0x30
 8011bfc:	ea54 0105 	orrs.w	r1, r4, r5
 8011c00:	464a      	mov	r2, r9
 8011c02:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011c06:	d1f2      	bne.n	8011bee <_vfiprintf_r+0x8ca>
 8011c08:	9904      	ldr	r1, [sp, #16]
 8011c0a:	07c8      	lsls	r0, r1, #31
 8011c0c:	d506      	bpl.n	8011c1c <_vfiprintf_r+0x8f8>
 8011c0e:	2b30      	cmp	r3, #48	@ 0x30
 8011c10:	d004      	beq.n	8011c1c <_vfiprintf_r+0x8f8>
 8011c12:	2330      	movs	r3, #48	@ 0x30
 8011c14:	f809 3c01 	strb.w	r3, [r9, #-1]
 8011c18:	f1a2 0902 	sub.w	r9, r2, #2
 8011c1c:	ab3a      	add	r3, sp, #232	@ 0xe8
 8011c1e:	eba3 0309 	sub.w	r3, r3, r9
 8011c22:	9c01      	ldr	r4, [sp, #4]
 8011c24:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011c28:	9301      	str	r3, [sp, #4]
 8011c2a:	e5bb      	b.n	80117a4 <_vfiprintf_r+0x480>
 8011c2c:	08013b77 	.word	0x08013b77
 8011c30:	08013b67 	.word	0x08013b67

08011c34 <__sbprintf>:
 8011c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c36:	461f      	mov	r7, r3
 8011c38:	898b      	ldrh	r3, [r1, #12]
 8011c3a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8011c3e:	f023 0302 	bic.w	r3, r3, #2
 8011c42:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011c46:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8011c48:	9319      	str	r3, [sp, #100]	@ 0x64
 8011c4a:	89cb      	ldrh	r3, [r1, #14]
 8011c4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011c50:	69cb      	ldr	r3, [r1, #28]
 8011c52:	9307      	str	r3, [sp, #28]
 8011c54:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8011c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c58:	ab1a      	add	r3, sp, #104	@ 0x68
 8011c5a:	9300      	str	r3, [sp, #0]
 8011c5c:	9304      	str	r3, [sp, #16]
 8011c5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c62:	4615      	mov	r5, r2
 8011c64:	4606      	mov	r6, r0
 8011c66:	9302      	str	r3, [sp, #8]
 8011c68:	9305      	str	r3, [sp, #20]
 8011c6a:	a816      	add	r0, sp, #88	@ 0x58
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	460c      	mov	r4, r1
 8011c70:	9306      	str	r3, [sp, #24]
 8011c72:	f7fc f897 	bl	800dda4 <__retarget_lock_init_recursive>
 8011c76:	462a      	mov	r2, r5
 8011c78:	463b      	mov	r3, r7
 8011c7a:	4669      	mov	r1, sp
 8011c7c:	4630      	mov	r0, r6
 8011c7e:	f7ff fb51 	bl	8011324 <_vfiprintf_r>
 8011c82:	1e05      	subs	r5, r0, #0
 8011c84:	db07      	blt.n	8011c96 <__sbprintf+0x62>
 8011c86:	4669      	mov	r1, sp
 8011c88:	4630      	mov	r0, r6
 8011c8a:	f7fd fe5f 	bl	800f94c <_fflush_r>
 8011c8e:	2800      	cmp	r0, #0
 8011c90:	bf18      	it	ne
 8011c92:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8011c96:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011c9a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8011c9c:	065b      	lsls	r3, r3, #25
 8011c9e:	bf42      	ittt	mi
 8011ca0:	89a3      	ldrhmi	r3, [r4, #12]
 8011ca2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8011ca6:	81a3      	strhmi	r3, [r4, #12]
 8011ca8:	f7fc f87d 	bl	800dda6 <__retarget_lock_close_recursive>
 8011cac:	4628      	mov	r0, r5
 8011cae:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8011cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011cb4 <__sfvwrite_r>:
 8011cb4:	6893      	ldr	r3, [r2, #8]
 8011cb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cba:	4606      	mov	r6, r0
 8011cbc:	460c      	mov	r4, r1
 8011cbe:	4691      	mov	r9, r2
 8011cc0:	b91b      	cbnz	r3, 8011cca <__sfvwrite_r+0x16>
 8011cc2:	2000      	movs	r0, #0
 8011cc4:	b003      	add	sp, #12
 8011cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cca:	898b      	ldrh	r3, [r1, #12]
 8011ccc:	0718      	lsls	r0, r3, #28
 8011cce:	d550      	bpl.n	8011d72 <__sfvwrite_r+0xbe>
 8011cd0:	690b      	ldr	r3, [r1, #16]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d04d      	beq.n	8011d72 <__sfvwrite_r+0xbe>
 8011cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cda:	f8d9 8000 	ldr.w	r8, [r9]
 8011cde:	f013 0702 	ands.w	r7, r3, #2
 8011ce2:	d16b      	bne.n	8011dbc <__sfvwrite_r+0x108>
 8011ce4:	f013 0301 	ands.w	r3, r3, #1
 8011ce8:	f000 809c 	beq.w	8011e24 <__sfvwrite_r+0x170>
 8011cec:	4638      	mov	r0, r7
 8011cee:	46ba      	mov	sl, r7
 8011cf0:	46bb      	mov	fp, r7
 8011cf2:	f1bb 0f00 	cmp.w	fp, #0
 8011cf6:	f000 8103 	beq.w	8011f00 <__sfvwrite_r+0x24c>
 8011cfa:	b950      	cbnz	r0, 8011d12 <__sfvwrite_r+0x5e>
 8011cfc:	465a      	mov	r2, fp
 8011cfe:	210a      	movs	r1, #10
 8011d00:	4650      	mov	r0, sl
 8011d02:	f7ee faed 	bl	80002e0 <memchr>
 8011d06:	2800      	cmp	r0, #0
 8011d08:	f000 8100 	beq.w	8011f0c <__sfvwrite_r+0x258>
 8011d0c:	3001      	adds	r0, #1
 8011d0e:	eba0 070a 	sub.w	r7, r0, sl
 8011d12:	6820      	ldr	r0, [r4, #0]
 8011d14:	6921      	ldr	r1, [r4, #16]
 8011d16:	68a5      	ldr	r5, [r4, #8]
 8011d18:	6963      	ldr	r3, [r4, #20]
 8011d1a:	455f      	cmp	r7, fp
 8011d1c:	463a      	mov	r2, r7
 8011d1e:	bf28      	it	cs
 8011d20:	465a      	movcs	r2, fp
 8011d22:	4288      	cmp	r0, r1
 8011d24:	f240 80f5 	bls.w	8011f12 <__sfvwrite_r+0x25e>
 8011d28:	441d      	add	r5, r3
 8011d2a:	42aa      	cmp	r2, r5
 8011d2c:	f340 80f1 	ble.w	8011f12 <__sfvwrite_r+0x25e>
 8011d30:	4651      	mov	r1, sl
 8011d32:	462a      	mov	r2, r5
 8011d34:	f7ff f867 	bl	8010e06 <memmove>
 8011d38:	6823      	ldr	r3, [r4, #0]
 8011d3a:	442b      	add	r3, r5
 8011d3c:	6023      	str	r3, [r4, #0]
 8011d3e:	4621      	mov	r1, r4
 8011d40:	4630      	mov	r0, r6
 8011d42:	f7fd fe03 	bl	800f94c <_fflush_r>
 8011d46:	2800      	cmp	r0, #0
 8011d48:	d167      	bne.n	8011e1a <__sfvwrite_r+0x166>
 8011d4a:	1b7f      	subs	r7, r7, r5
 8011d4c:	f040 80f9 	bne.w	8011f42 <__sfvwrite_r+0x28e>
 8011d50:	4621      	mov	r1, r4
 8011d52:	4630      	mov	r0, r6
 8011d54:	f7fd fdfa 	bl	800f94c <_fflush_r>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	d15e      	bne.n	8011e1a <__sfvwrite_r+0x166>
 8011d5c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011d60:	1b5b      	subs	r3, r3, r5
 8011d62:	44aa      	add	sl, r5
 8011d64:	ebab 0b05 	sub.w	fp, fp, r5
 8011d68:	f8c9 3008 	str.w	r3, [r9, #8]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d1c0      	bne.n	8011cf2 <__sfvwrite_r+0x3e>
 8011d70:	e7a7      	b.n	8011cc2 <__sfvwrite_r+0xe>
 8011d72:	4621      	mov	r1, r4
 8011d74:	4630      	mov	r0, r6
 8011d76:	f000 f8e9 	bl	8011f4c <__swsetup_r>
 8011d7a:	2800      	cmp	r0, #0
 8011d7c:	d0ab      	beq.n	8011cd6 <__sfvwrite_r+0x22>
 8011d7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d82:	e79f      	b.n	8011cc4 <__sfvwrite_r+0x10>
 8011d84:	e9d8 a500 	ldrd	sl, r5, [r8]
 8011d88:	f108 0808 	add.w	r8, r8, #8
 8011d8c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8011d90:	69e1      	ldr	r1, [r4, #28]
 8011d92:	2d00      	cmp	r5, #0
 8011d94:	d0f6      	beq.n	8011d84 <__sfvwrite_r+0xd0>
 8011d96:	42bd      	cmp	r5, r7
 8011d98:	462b      	mov	r3, r5
 8011d9a:	4652      	mov	r2, sl
 8011d9c:	bf28      	it	cs
 8011d9e:	463b      	movcs	r3, r7
 8011da0:	4630      	mov	r0, r6
 8011da2:	47d8      	blx	fp
 8011da4:	2800      	cmp	r0, #0
 8011da6:	dd38      	ble.n	8011e1a <__sfvwrite_r+0x166>
 8011da8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011dac:	1a1b      	subs	r3, r3, r0
 8011dae:	4482      	add	sl, r0
 8011db0:	1a2d      	subs	r5, r5, r0
 8011db2:	f8c9 3008 	str.w	r3, [r9, #8]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d1e8      	bne.n	8011d8c <__sfvwrite_r+0xd8>
 8011dba:	e782      	b.n	8011cc2 <__sfvwrite_r+0xe>
 8011dbc:	f04f 0a00 	mov.w	sl, #0
 8011dc0:	4f61      	ldr	r7, [pc, #388]	@ (8011f48 <__sfvwrite_r+0x294>)
 8011dc2:	4655      	mov	r5, sl
 8011dc4:	e7e2      	b.n	8011d8c <__sfvwrite_r+0xd8>
 8011dc6:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8011dca:	f108 0808 	add.w	r8, r8, #8
 8011dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dd2:	6820      	ldr	r0, [r4, #0]
 8011dd4:	68a2      	ldr	r2, [r4, #8]
 8011dd6:	f1ba 0f00 	cmp.w	sl, #0
 8011dda:	d0f4      	beq.n	8011dc6 <__sfvwrite_r+0x112>
 8011ddc:	0599      	lsls	r1, r3, #22
 8011dde:	d563      	bpl.n	8011ea8 <__sfvwrite_r+0x1f4>
 8011de0:	4552      	cmp	r2, sl
 8011de2:	d836      	bhi.n	8011e52 <__sfvwrite_r+0x19e>
 8011de4:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8011de8:	d033      	beq.n	8011e52 <__sfvwrite_r+0x19e>
 8011dea:	6921      	ldr	r1, [r4, #16]
 8011dec:	6965      	ldr	r5, [r4, #20]
 8011dee:	eba0 0b01 	sub.w	fp, r0, r1
 8011df2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011df6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011dfa:	f10b 0201 	add.w	r2, fp, #1
 8011dfe:	106d      	asrs	r5, r5, #1
 8011e00:	4452      	add	r2, sl
 8011e02:	4295      	cmp	r5, r2
 8011e04:	bf38      	it	cc
 8011e06:	4615      	movcc	r5, r2
 8011e08:	055b      	lsls	r3, r3, #21
 8011e0a:	d53d      	bpl.n	8011e88 <__sfvwrite_r+0x1d4>
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f7fc f8f2 	bl	800dff8 <_malloc_r>
 8011e14:	b948      	cbnz	r0, 8011e2a <__sfvwrite_r+0x176>
 8011e16:	230c      	movs	r3, #12
 8011e18:	6033      	str	r3, [r6, #0]
 8011e1a:	89a3      	ldrh	r3, [r4, #12]
 8011e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e20:	81a3      	strh	r3, [r4, #12]
 8011e22:	e7ac      	b.n	8011d7e <__sfvwrite_r+0xca>
 8011e24:	461f      	mov	r7, r3
 8011e26:	469a      	mov	sl, r3
 8011e28:	e7d1      	b.n	8011dce <__sfvwrite_r+0x11a>
 8011e2a:	465a      	mov	r2, fp
 8011e2c:	6921      	ldr	r1, [r4, #16]
 8011e2e:	9001      	str	r0, [sp, #4]
 8011e30:	f7ff f80a 	bl	8010e48 <memcpy>
 8011e34:	89a2      	ldrh	r2, [r4, #12]
 8011e36:	9b01      	ldr	r3, [sp, #4]
 8011e38:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8011e3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8011e40:	81a2      	strh	r2, [r4, #12]
 8011e42:	6123      	str	r3, [r4, #16]
 8011e44:	6165      	str	r5, [r4, #20]
 8011e46:	445b      	add	r3, fp
 8011e48:	eba5 050b 	sub.w	r5, r5, fp
 8011e4c:	6023      	str	r3, [r4, #0]
 8011e4e:	4652      	mov	r2, sl
 8011e50:	60a5      	str	r5, [r4, #8]
 8011e52:	4552      	cmp	r2, sl
 8011e54:	bf28      	it	cs
 8011e56:	4652      	movcs	r2, sl
 8011e58:	6820      	ldr	r0, [r4, #0]
 8011e5a:	9201      	str	r2, [sp, #4]
 8011e5c:	4639      	mov	r1, r7
 8011e5e:	f7fe ffd2 	bl	8010e06 <memmove>
 8011e62:	68a3      	ldr	r3, [r4, #8]
 8011e64:	9a01      	ldr	r2, [sp, #4]
 8011e66:	1a9b      	subs	r3, r3, r2
 8011e68:	60a3      	str	r3, [r4, #8]
 8011e6a:	6823      	ldr	r3, [r4, #0]
 8011e6c:	4413      	add	r3, r2
 8011e6e:	4655      	mov	r5, sl
 8011e70:	6023      	str	r3, [r4, #0]
 8011e72:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011e76:	1b5b      	subs	r3, r3, r5
 8011e78:	442f      	add	r7, r5
 8011e7a:	ebaa 0a05 	sub.w	sl, sl, r5
 8011e7e:	f8c9 3008 	str.w	r3, [r9, #8]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d1a3      	bne.n	8011dce <__sfvwrite_r+0x11a>
 8011e86:	e71c      	b.n	8011cc2 <__sfvwrite_r+0xe>
 8011e88:	462a      	mov	r2, r5
 8011e8a:	4630      	mov	r0, r6
 8011e8c:	f7ff f850 	bl	8010f30 <_realloc_r>
 8011e90:	4603      	mov	r3, r0
 8011e92:	2800      	cmp	r0, #0
 8011e94:	d1d5      	bne.n	8011e42 <__sfvwrite_r+0x18e>
 8011e96:	6921      	ldr	r1, [r4, #16]
 8011e98:	4630      	mov	r0, r6
 8011e9a:	f7fb ffed 	bl	800de78 <_free_r>
 8011e9e:	89a3      	ldrh	r3, [r4, #12]
 8011ea0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011ea4:	81a3      	strh	r3, [r4, #12]
 8011ea6:	e7b6      	b.n	8011e16 <__sfvwrite_r+0x162>
 8011ea8:	6923      	ldr	r3, [r4, #16]
 8011eaa:	4283      	cmp	r3, r0
 8011eac:	d302      	bcc.n	8011eb4 <__sfvwrite_r+0x200>
 8011eae:	6961      	ldr	r1, [r4, #20]
 8011eb0:	4551      	cmp	r1, sl
 8011eb2:	d915      	bls.n	8011ee0 <__sfvwrite_r+0x22c>
 8011eb4:	4552      	cmp	r2, sl
 8011eb6:	bf28      	it	cs
 8011eb8:	4652      	movcs	r2, sl
 8011eba:	4639      	mov	r1, r7
 8011ebc:	4615      	mov	r5, r2
 8011ebe:	f7fe ffa2 	bl	8010e06 <memmove>
 8011ec2:	68a3      	ldr	r3, [r4, #8]
 8011ec4:	6822      	ldr	r2, [r4, #0]
 8011ec6:	1b5b      	subs	r3, r3, r5
 8011ec8:	442a      	add	r2, r5
 8011eca:	60a3      	str	r3, [r4, #8]
 8011ecc:	6022      	str	r2, [r4, #0]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d1cf      	bne.n	8011e72 <__sfvwrite_r+0x1be>
 8011ed2:	4621      	mov	r1, r4
 8011ed4:	4630      	mov	r0, r6
 8011ed6:	f7fd fd39 	bl	800f94c <_fflush_r>
 8011eda:	2800      	cmp	r0, #0
 8011edc:	d0c9      	beq.n	8011e72 <__sfvwrite_r+0x1be>
 8011ede:	e79c      	b.n	8011e1a <__sfvwrite_r+0x166>
 8011ee0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011ee4:	4553      	cmp	r3, sl
 8011ee6:	bf28      	it	cs
 8011ee8:	4653      	movcs	r3, sl
 8011eea:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8011eec:	fb93 f3f1 	sdiv	r3, r3, r1
 8011ef0:	463a      	mov	r2, r7
 8011ef2:	434b      	muls	r3, r1
 8011ef4:	4630      	mov	r0, r6
 8011ef6:	69e1      	ldr	r1, [r4, #28]
 8011ef8:	47a8      	blx	r5
 8011efa:	1e05      	subs	r5, r0, #0
 8011efc:	dcb9      	bgt.n	8011e72 <__sfvwrite_r+0x1be>
 8011efe:	e78c      	b.n	8011e1a <__sfvwrite_r+0x166>
 8011f00:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8011f04:	2000      	movs	r0, #0
 8011f06:	f108 0808 	add.w	r8, r8, #8
 8011f0a:	e6f2      	b.n	8011cf2 <__sfvwrite_r+0x3e>
 8011f0c:	f10b 0701 	add.w	r7, fp, #1
 8011f10:	e6ff      	b.n	8011d12 <__sfvwrite_r+0x5e>
 8011f12:	4293      	cmp	r3, r2
 8011f14:	dc08      	bgt.n	8011f28 <__sfvwrite_r+0x274>
 8011f16:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8011f18:	69e1      	ldr	r1, [r4, #28]
 8011f1a:	4652      	mov	r2, sl
 8011f1c:	4630      	mov	r0, r6
 8011f1e:	47a8      	blx	r5
 8011f20:	1e05      	subs	r5, r0, #0
 8011f22:	f73f af12 	bgt.w	8011d4a <__sfvwrite_r+0x96>
 8011f26:	e778      	b.n	8011e1a <__sfvwrite_r+0x166>
 8011f28:	4651      	mov	r1, sl
 8011f2a:	9201      	str	r2, [sp, #4]
 8011f2c:	f7fe ff6b 	bl	8010e06 <memmove>
 8011f30:	9a01      	ldr	r2, [sp, #4]
 8011f32:	68a3      	ldr	r3, [r4, #8]
 8011f34:	1a9b      	subs	r3, r3, r2
 8011f36:	60a3      	str	r3, [r4, #8]
 8011f38:	6823      	ldr	r3, [r4, #0]
 8011f3a:	4413      	add	r3, r2
 8011f3c:	6023      	str	r3, [r4, #0]
 8011f3e:	4615      	mov	r5, r2
 8011f40:	e703      	b.n	8011d4a <__sfvwrite_r+0x96>
 8011f42:	2001      	movs	r0, #1
 8011f44:	e70a      	b.n	8011d5c <__sfvwrite_r+0xa8>
 8011f46:	bf00      	nop
 8011f48:	7ffffc00 	.word	0x7ffffc00

08011f4c <__swsetup_r>:
 8011f4c:	b538      	push	{r3, r4, r5, lr}
 8011f4e:	4b29      	ldr	r3, [pc, #164]	@ (8011ff4 <__swsetup_r+0xa8>)
 8011f50:	4605      	mov	r5, r0
 8011f52:	6818      	ldr	r0, [r3, #0]
 8011f54:	460c      	mov	r4, r1
 8011f56:	b118      	cbz	r0, 8011f60 <__swsetup_r+0x14>
 8011f58:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8011f5a:	b90b      	cbnz	r3, 8011f60 <__swsetup_r+0x14>
 8011f5c:	f7fb fe10 	bl	800db80 <__sinit>
 8011f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f64:	0719      	lsls	r1, r3, #28
 8011f66:	d422      	bmi.n	8011fae <__swsetup_r+0x62>
 8011f68:	06da      	lsls	r2, r3, #27
 8011f6a:	d407      	bmi.n	8011f7c <__swsetup_r+0x30>
 8011f6c:	2209      	movs	r2, #9
 8011f6e:	602a      	str	r2, [r5, #0]
 8011f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f74:	81a3      	strh	r3, [r4, #12]
 8011f76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f7a:	e033      	b.n	8011fe4 <__swsetup_r+0x98>
 8011f7c:	0758      	lsls	r0, r3, #29
 8011f7e:	d512      	bpl.n	8011fa6 <__swsetup_r+0x5a>
 8011f80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011f82:	b141      	cbz	r1, 8011f96 <__swsetup_r+0x4a>
 8011f84:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8011f88:	4299      	cmp	r1, r3
 8011f8a:	d002      	beq.n	8011f92 <__swsetup_r+0x46>
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	f7fb ff73 	bl	800de78 <_free_r>
 8011f92:	2300      	movs	r3, #0
 8011f94:	6323      	str	r3, [r4, #48]	@ 0x30
 8011f96:	89a3      	ldrh	r3, [r4, #12]
 8011f98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011f9c:	81a3      	strh	r3, [r4, #12]
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	6063      	str	r3, [r4, #4]
 8011fa2:	6923      	ldr	r3, [r4, #16]
 8011fa4:	6023      	str	r3, [r4, #0]
 8011fa6:	89a3      	ldrh	r3, [r4, #12]
 8011fa8:	f043 0308 	orr.w	r3, r3, #8
 8011fac:	81a3      	strh	r3, [r4, #12]
 8011fae:	6923      	ldr	r3, [r4, #16]
 8011fb0:	b94b      	cbnz	r3, 8011fc6 <__swsetup_r+0x7a>
 8011fb2:	89a3      	ldrh	r3, [r4, #12]
 8011fb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011fbc:	d003      	beq.n	8011fc6 <__swsetup_r+0x7a>
 8011fbe:	4621      	mov	r1, r4
 8011fc0:	4628      	mov	r0, r5
 8011fc2:	f000 f8c9 	bl	8012158 <__smakebuf_r>
 8011fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fca:	f013 0201 	ands.w	r2, r3, #1
 8011fce:	d00a      	beq.n	8011fe6 <__swsetup_r+0x9a>
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	60a2      	str	r2, [r4, #8]
 8011fd4:	6962      	ldr	r2, [r4, #20]
 8011fd6:	4252      	negs	r2, r2
 8011fd8:	61a2      	str	r2, [r4, #24]
 8011fda:	6922      	ldr	r2, [r4, #16]
 8011fdc:	b942      	cbnz	r2, 8011ff0 <__swsetup_r+0xa4>
 8011fde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011fe2:	d1c5      	bne.n	8011f70 <__swsetup_r+0x24>
 8011fe4:	bd38      	pop	{r3, r4, r5, pc}
 8011fe6:	0799      	lsls	r1, r3, #30
 8011fe8:	bf58      	it	pl
 8011fea:	6962      	ldrpl	r2, [r4, #20]
 8011fec:	60a2      	str	r2, [r4, #8]
 8011fee:	e7f4      	b.n	8011fda <__swsetup_r+0x8e>
 8011ff0:	2000      	movs	r0, #0
 8011ff2:	e7f7      	b.n	8011fe4 <__swsetup_r+0x98>
 8011ff4:	2400001c 	.word	0x2400001c

08011ff8 <__fputwc>:
 8011ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ffc:	4680      	mov	r8, r0
 8011ffe:	460f      	mov	r7, r1
 8012000:	4614      	mov	r4, r2
 8012002:	f7fe ff1b 	bl	8010e3c <__locale_mb_cur_max>
 8012006:	2801      	cmp	r0, #1
 8012008:	4605      	mov	r5, r0
 801200a:	d11b      	bne.n	8012044 <__fputwc+0x4c>
 801200c:	1e7b      	subs	r3, r7, #1
 801200e:	2bfe      	cmp	r3, #254	@ 0xfe
 8012010:	d818      	bhi.n	8012044 <__fputwc+0x4c>
 8012012:	f88d 7004 	strb.w	r7, [sp, #4]
 8012016:	2600      	movs	r6, #0
 8012018:	f10d 0904 	add.w	r9, sp, #4
 801201c:	42ae      	cmp	r6, r5
 801201e:	d021      	beq.n	8012064 <__fputwc+0x6c>
 8012020:	68a3      	ldr	r3, [r4, #8]
 8012022:	f816 1009 	ldrb.w	r1, [r6, r9]
 8012026:	3b01      	subs	r3, #1
 8012028:	2b00      	cmp	r3, #0
 801202a:	60a3      	str	r3, [r4, #8]
 801202c:	da04      	bge.n	8012038 <__fputwc+0x40>
 801202e:	69a2      	ldr	r2, [r4, #24]
 8012030:	4293      	cmp	r3, r2
 8012032:	db1b      	blt.n	801206c <__fputwc+0x74>
 8012034:	290a      	cmp	r1, #10
 8012036:	d019      	beq.n	801206c <__fputwc+0x74>
 8012038:	6823      	ldr	r3, [r4, #0]
 801203a:	1c5a      	adds	r2, r3, #1
 801203c:	6022      	str	r2, [r4, #0]
 801203e:	7019      	strb	r1, [r3, #0]
 8012040:	3601      	adds	r6, #1
 8012042:	e7eb      	b.n	801201c <__fputwc+0x24>
 8012044:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8012048:	463a      	mov	r2, r7
 801204a:	a901      	add	r1, sp, #4
 801204c:	4640      	mov	r0, r8
 801204e:	f000 f845 	bl	80120dc <_wcrtomb_r>
 8012052:	1c43      	adds	r3, r0, #1
 8012054:	4605      	mov	r5, r0
 8012056:	d1de      	bne.n	8012016 <__fputwc+0x1e>
 8012058:	89a3      	ldrh	r3, [r4, #12]
 801205a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801205e:	81a3      	strh	r3, [r4, #12]
 8012060:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012064:	4638      	mov	r0, r7
 8012066:	b003      	add	sp, #12
 8012068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801206c:	4622      	mov	r2, r4
 801206e:	4640      	mov	r0, r8
 8012070:	f000 f8ae 	bl	80121d0 <__swbuf_r>
 8012074:	3001      	adds	r0, #1
 8012076:	d1e3      	bne.n	8012040 <__fputwc+0x48>
 8012078:	e7f2      	b.n	8012060 <__fputwc+0x68>

0801207a <_fputwc_r>:
 801207a:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 801207c:	07db      	lsls	r3, r3, #31
 801207e:	b570      	push	{r4, r5, r6, lr}
 8012080:	4605      	mov	r5, r0
 8012082:	460e      	mov	r6, r1
 8012084:	4614      	mov	r4, r2
 8012086:	d405      	bmi.n	8012094 <_fputwc_r+0x1a>
 8012088:	8993      	ldrh	r3, [r2, #12]
 801208a:	0598      	lsls	r0, r3, #22
 801208c:	d402      	bmi.n	8012094 <_fputwc_r+0x1a>
 801208e:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8012090:	f7fb fe8a 	bl	800dda8 <__retarget_lock_acquire_recursive>
 8012094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012098:	0499      	lsls	r1, r3, #18
 801209a:	d406      	bmi.n	80120aa <_fputwc_r+0x30>
 801209c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80120a0:	81a3      	strh	r3, [r4, #12]
 80120a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80120a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80120a8:	6663      	str	r3, [r4, #100]	@ 0x64
 80120aa:	4622      	mov	r2, r4
 80120ac:	4628      	mov	r0, r5
 80120ae:	4631      	mov	r1, r6
 80120b0:	f7ff ffa2 	bl	8011ff8 <__fputwc>
 80120b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80120b6:	07da      	lsls	r2, r3, #31
 80120b8:	4605      	mov	r5, r0
 80120ba:	d405      	bmi.n	80120c8 <_fputwc_r+0x4e>
 80120bc:	89a3      	ldrh	r3, [r4, #12]
 80120be:	059b      	lsls	r3, r3, #22
 80120c0:	d402      	bmi.n	80120c8 <_fputwc_r+0x4e>
 80120c2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80120c4:	f7fb fe71 	bl	800ddaa <__retarget_lock_release_recursive>
 80120c8:	4628      	mov	r0, r5
 80120ca:	bd70      	pop	{r4, r5, r6, pc}

080120cc <abort>:
 80120cc:	b508      	push	{r3, lr}
 80120ce:	2006      	movs	r0, #6
 80120d0:	f000 f8f0 	bl	80122b4 <raise>
 80120d4:	2001      	movs	r0, #1
 80120d6:	f7ef fd7f 	bl	8001bd8 <_exit>
	...

080120dc <_wcrtomb_r>:
 80120dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120de:	4c09      	ldr	r4, [pc, #36]	@ (8012104 <_wcrtomb_r+0x28>)
 80120e0:	b085      	sub	sp, #20
 80120e2:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 80120e6:	4605      	mov	r5, r0
 80120e8:	461e      	mov	r6, r3
 80120ea:	b909      	cbnz	r1, 80120f0 <_wcrtomb_r+0x14>
 80120ec:	460a      	mov	r2, r1
 80120ee:	a901      	add	r1, sp, #4
 80120f0:	47b8      	blx	r7
 80120f2:	1c43      	adds	r3, r0, #1
 80120f4:	bf01      	itttt	eq
 80120f6:	2300      	moveq	r3, #0
 80120f8:	6033      	streq	r3, [r6, #0]
 80120fa:	238a      	moveq	r3, #138	@ 0x8a
 80120fc:	602b      	streq	r3, [r5, #0]
 80120fe:	b005      	add	sp, #20
 8012100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012102:	bf00      	nop
 8012104:	24000554 	.word	0x24000554

08012108 <__swhatbuf_r>:
 8012108:	b570      	push	{r4, r5, r6, lr}
 801210a:	460c      	mov	r4, r1
 801210c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012110:	2900      	cmp	r1, #0
 8012112:	b096      	sub	sp, #88	@ 0x58
 8012114:	4615      	mov	r5, r2
 8012116:	461e      	mov	r6, r3
 8012118:	da07      	bge.n	801212a <__swhatbuf_r+0x22>
 801211a:	89a1      	ldrh	r1, [r4, #12]
 801211c:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8012120:	d117      	bne.n	8012152 <__swhatbuf_r+0x4a>
 8012122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012126:	4608      	mov	r0, r1
 8012128:	e00f      	b.n	801214a <__swhatbuf_r+0x42>
 801212a:	466a      	mov	r2, sp
 801212c:	f000 f8ca 	bl	80122c4 <_fstat_r>
 8012130:	2800      	cmp	r0, #0
 8012132:	dbf2      	blt.n	801211a <__swhatbuf_r+0x12>
 8012134:	9901      	ldr	r1, [sp, #4]
 8012136:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801213a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801213e:	4259      	negs	r1, r3
 8012140:	4159      	adcs	r1, r3
 8012142:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8012146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801214a:	6031      	str	r1, [r6, #0]
 801214c:	602b      	str	r3, [r5, #0]
 801214e:	b016      	add	sp, #88	@ 0x58
 8012150:	bd70      	pop	{r4, r5, r6, pc}
 8012152:	2100      	movs	r1, #0
 8012154:	2340      	movs	r3, #64	@ 0x40
 8012156:	e7e6      	b.n	8012126 <__swhatbuf_r+0x1e>

08012158 <__smakebuf_r>:
 8012158:	898b      	ldrh	r3, [r1, #12]
 801215a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801215c:	079d      	lsls	r5, r3, #30
 801215e:	4606      	mov	r6, r0
 8012160:	460c      	mov	r4, r1
 8012162:	d507      	bpl.n	8012174 <__smakebuf_r+0x1c>
 8012164:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8012168:	6023      	str	r3, [r4, #0]
 801216a:	6123      	str	r3, [r4, #16]
 801216c:	2301      	movs	r3, #1
 801216e:	6163      	str	r3, [r4, #20]
 8012170:	b003      	add	sp, #12
 8012172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012174:	ab01      	add	r3, sp, #4
 8012176:	466a      	mov	r2, sp
 8012178:	f7ff ffc6 	bl	8012108 <__swhatbuf_r>
 801217c:	9f00      	ldr	r7, [sp, #0]
 801217e:	4605      	mov	r5, r0
 8012180:	4639      	mov	r1, r7
 8012182:	4630      	mov	r0, r6
 8012184:	f7fb ff38 	bl	800dff8 <_malloc_r>
 8012188:	b948      	cbnz	r0, 801219e <__smakebuf_r+0x46>
 801218a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801218e:	059a      	lsls	r2, r3, #22
 8012190:	d4ee      	bmi.n	8012170 <__smakebuf_r+0x18>
 8012192:	f023 0303 	bic.w	r3, r3, #3
 8012196:	f043 0302 	orr.w	r3, r3, #2
 801219a:	81a3      	strh	r3, [r4, #12]
 801219c:	e7e2      	b.n	8012164 <__smakebuf_r+0xc>
 801219e:	89a3      	ldrh	r3, [r4, #12]
 80121a0:	6020      	str	r0, [r4, #0]
 80121a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80121a6:	81a3      	strh	r3, [r4, #12]
 80121a8:	9b01      	ldr	r3, [sp, #4]
 80121aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80121ae:	b15b      	cbz	r3, 80121c8 <__smakebuf_r+0x70>
 80121b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121b4:	4630      	mov	r0, r6
 80121b6:	f000 f897 	bl	80122e8 <_isatty_r>
 80121ba:	b128      	cbz	r0, 80121c8 <__smakebuf_r+0x70>
 80121bc:	89a3      	ldrh	r3, [r4, #12]
 80121be:	f023 0303 	bic.w	r3, r3, #3
 80121c2:	f043 0301 	orr.w	r3, r3, #1
 80121c6:	81a3      	strh	r3, [r4, #12]
 80121c8:	89a3      	ldrh	r3, [r4, #12]
 80121ca:	431d      	orrs	r5, r3
 80121cc:	81a5      	strh	r5, [r4, #12]
 80121ce:	e7cf      	b.n	8012170 <__smakebuf_r+0x18>

080121d0 <__swbuf_r>:
 80121d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121d2:	460e      	mov	r6, r1
 80121d4:	4614      	mov	r4, r2
 80121d6:	4605      	mov	r5, r0
 80121d8:	b118      	cbz	r0, 80121e2 <__swbuf_r+0x12>
 80121da:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80121dc:	b90b      	cbnz	r3, 80121e2 <__swbuf_r+0x12>
 80121de:	f7fb fccf 	bl	800db80 <__sinit>
 80121e2:	69a3      	ldr	r3, [r4, #24]
 80121e4:	60a3      	str	r3, [r4, #8]
 80121e6:	89a3      	ldrh	r3, [r4, #12]
 80121e8:	0719      	lsls	r1, r3, #28
 80121ea:	d501      	bpl.n	80121f0 <__swbuf_r+0x20>
 80121ec:	6923      	ldr	r3, [r4, #16]
 80121ee:	b943      	cbnz	r3, 8012202 <__swbuf_r+0x32>
 80121f0:	4621      	mov	r1, r4
 80121f2:	4628      	mov	r0, r5
 80121f4:	f7ff feaa 	bl	8011f4c <__swsetup_r>
 80121f8:	b118      	cbz	r0, 8012202 <__swbuf_r+0x32>
 80121fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80121fe:	4638      	mov	r0, r7
 8012200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012206:	b2f6      	uxtb	r6, r6
 8012208:	049a      	lsls	r2, r3, #18
 801220a:	4637      	mov	r7, r6
 801220c:	d406      	bmi.n	801221c <__swbuf_r+0x4c>
 801220e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012212:	81a3      	strh	r3, [r4, #12]
 8012214:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012216:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801221a:	6663      	str	r3, [r4, #100]	@ 0x64
 801221c:	6823      	ldr	r3, [r4, #0]
 801221e:	6922      	ldr	r2, [r4, #16]
 8012220:	1a98      	subs	r0, r3, r2
 8012222:	6963      	ldr	r3, [r4, #20]
 8012224:	4283      	cmp	r3, r0
 8012226:	dc05      	bgt.n	8012234 <__swbuf_r+0x64>
 8012228:	4621      	mov	r1, r4
 801222a:	4628      	mov	r0, r5
 801222c:	f7fd fb8e 	bl	800f94c <_fflush_r>
 8012230:	2800      	cmp	r0, #0
 8012232:	d1e2      	bne.n	80121fa <__swbuf_r+0x2a>
 8012234:	68a3      	ldr	r3, [r4, #8]
 8012236:	3b01      	subs	r3, #1
 8012238:	60a3      	str	r3, [r4, #8]
 801223a:	6823      	ldr	r3, [r4, #0]
 801223c:	1c5a      	adds	r2, r3, #1
 801223e:	6022      	str	r2, [r4, #0]
 8012240:	701e      	strb	r6, [r3, #0]
 8012242:	6962      	ldr	r2, [r4, #20]
 8012244:	1c43      	adds	r3, r0, #1
 8012246:	429a      	cmp	r2, r3
 8012248:	d004      	beq.n	8012254 <__swbuf_r+0x84>
 801224a:	89a3      	ldrh	r3, [r4, #12]
 801224c:	07db      	lsls	r3, r3, #31
 801224e:	d5d6      	bpl.n	80121fe <__swbuf_r+0x2e>
 8012250:	2e0a      	cmp	r6, #10
 8012252:	d1d4      	bne.n	80121fe <__swbuf_r+0x2e>
 8012254:	4621      	mov	r1, r4
 8012256:	4628      	mov	r0, r5
 8012258:	f7fd fb78 	bl	800f94c <_fflush_r>
 801225c:	2800      	cmp	r0, #0
 801225e:	d0ce      	beq.n	80121fe <__swbuf_r+0x2e>
 8012260:	e7cb      	b.n	80121fa <__swbuf_r+0x2a>

08012262 <_raise_r>:
 8012262:	291f      	cmp	r1, #31
 8012264:	b538      	push	{r3, r4, r5, lr}
 8012266:	4605      	mov	r5, r0
 8012268:	460c      	mov	r4, r1
 801226a:	d904      	bls.n	8012276 <_raise_r+0x14>
 801226c:	2316      	movs	r3, #22
 801226e:	6003      	str	r3, [r0, #0]
 8012270:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012274:	bd38      	pop	{r3, r4, r5, pc}
 8012276:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 801227a:	b112      	cbz	r2, 8012282 <_raise_r+0x20>
 801227c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012280:	b94b      	cbnz	r3, 8012296 <_raise_r+0x34>
 8012282:	4628      	mov	r0, r5
 8012284:	f000 f852 	bl	801232c <_getpid_r>
 8012288:	4622      	mov	r2, r4
 801228a:	4601      	mov	r1, r0
 801228c:	4628      	mov	r0, r5
 801228e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012292:	f000 b839 	b.w	8012308 <_kill_r>
 8012296:	2b01      	cmp	r3, #1
 8012298:	d00a      	beq.n	80122b0 <_raise_r+0x4e>
 801229a:	1c59      	adds	r1, r3, #1
 801229c:	d103      	bne.n	80122a6 <_raise_r+0x44>
 801229e:	2316      	movs	r3, #22
 80122a0:	6003      	str	r3, [r0, #0]
 80122a2:	2001      	movs	r0, #1
 80122a4:	e7e6      	b.n	8012274 <_raise_r+0x12>
 80122a6:	2100      	movs	r1, #0
 80122a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80122ac:	4620      	mov	r0, r4
 80122ae:	4798      	blx	r3
 80122b0:	2000      	movs	r0, #0
 80122b2:	e7df      	b.n	8012274 <_raise_r+0x12>

080122b4 <raise>:
 80122b4:	4b02      	ldr	r3, [pc, #8]	@ (80122c0 <raise+0xc>)
 80122b6:	4601      	mov	r1, r0
 80122b8:	6818      	ldr	r0, [r3, #0]
 80122ba:	f7ff bfd2 	b.w	8012262 <_raise_r>
 80122be:	bf00      	nop
 80122c0:	2400001c 	.word	0x2400001c

080122c4 <_fstat_r>:
 80122c4:	b538      	push	{r3, r4, r5, lr}
 80122c6:	4d07      	ldr	r5, [pc, #28]	@ (80122e4 <_fstat_r+0x20>)
 80122c8:	2300      	movs	r3, #0
 80122ca:	4604      	mov	r4, r0
 80122cc:	4608      	mov	r0, r1
 80122ce:	4611      	mov	r1, r2
 80122d0:	602b      	str	r3, [r5, #0]
 80122d2:	f7ef fcd1 	bl	8001c78 <_fstat>
 80122d6:	1c43      	adds	r3, r0, #1
 80122d8:	d102      	bne.n	80122e0 <_fstat_r+0x1c>
 80122da:	682b      	ldr	r3, [r5, #0]
 80122dc:	b103      	cbz	r3, 80122e0 <_fstat_r+0x1c>
 80122de:	6023      	str	r3, [r4, #0]
 80122e0:	bd38      	pop	{r3, r4, r5, pc}
 80122e2:	bf00      	nop
 80122e4:	24014b10 	.word	0x24014b10

080122e8 <_isatty_r>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4d06      	ldr	r5, [pc, #24]	@ (8012304 <_isatty_r+0x1c>)
 80122ec:	2300      	movs	r3, #0
 80122ee:	4604      	mov	r4, r0
 80122f0:	4608      	mov	r0, r1
 80122f2:	602b      	str	r3, [r5, #0]
 80122f4:	f7ef fcd0 	bl	8001c98 <_isatty>
 80122f8:	1c43      	adds	r3, r0, #1
 80122fa:	d102      	bne.n	8012302 <_isatty_r+0x1a>
 80122fc:	682b      	ldr	r3, [r5, #0]
 80122fe:	b103      	cbz	r3, 8012302 <_isatty_r+0x1a>
 8012300:	6023      	str	r3, [r4, #0]
 8012302:	bd38      	pop	{r3, r4, r5, pc}
 8012304:	24014b10 	.word	0x24014b10

08012308 <_kill_r>:
 8012308:	b538      	push	{r3, r4, r5, lr}
 801230a:	4d07      	ldr	r5, [pc, #28]	@ (8012328 <_kill_r+0x20>)
 801230c:	2300      	movs	r3, #0
 801230e:	4604      	mov	r4, r0
 8012310:	4608      	mov	r0, r1
 8012312:	4611      	mov	r1, r2
 8012314:	602b      	str	r3, [r5, #0]
 8012316:	f7ef fc4f 	bl	8001bb8 <_kill>
 801231a:	1c43      	adds	r3, r0, #1
 801231c:	d102      	bne.n	8012324 <_kill_r+0x1c>
 801231e:	682b      	ldr	r3, [r5, #0]
 8012320:	b103      	cbz	r3, 8012324 <_kill_r+0x1c>
 8012322:	6023      	str	r3, [r4, #0]
 8012324:	bd38      	pop	{r3, r4, r5, pc}
 8012326:	bf00      	nop
 8012328:	24014b10 	.word	0x24014b10

0801232c <_getpid_r>:
 801232c:	f7ef bc3c 	b.w	8001ba8 <_getpid>

08012330 <cos>:
 8012330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012332:	eeb0 7b40 	vmov.f64	d7, d0
 8012336:	ee17 3a90 	vmov	r3, s15
 801233a:	4a21      	ldr	r2, [pc, #132]	@ (80123c0 <cos+0x90>)
 801233c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012340:	4293      	cmp	r3, r2
 8012342:	d806      	bhi.n	8012352 <cos+0x22>
 8012344:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80123b8 <cos+0x88>
 8012348:	b005      	add	sp, #20
 801234a:	f85d eb04 	ldr.w	lr, [sp], #4
 801234e:	f000 bc77 	b.w	8012c40 <__kernel_cos>
 8012352:	4a1c      	ldr	r2, [pc, #112]	@ (80123c4 <cos+0x94>)
 8012354:	4293      	cmp	r3, r2
 8012356:	d904      	bls.n	8012362 <cos+0x32>
 8012358:	ee30 0b40 	vsub.f64	d0, d0, d0
 801235c:	b005      	add	sp, #20
 801235e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012362:	4668      	mov	r0, sp
 8012364:	f000 fd2c 	bl	8012dc0 <__ieee754_rem_pio2>
 8012368:	f000 0003 	and.w	r0, r0, #3
 801236c:	2801      	cmp	r0, #1
 801236e:	d009      	beq.n	8012384 <cos+0x54>
 8012370:	2802      	cmp	r0, #2
 8012372:	d010      	beq.n	8012396 <cos+0x66>
 8012374:	b9b0      	cbnz	r0, 80123a4 <cos+0x74>
 8012376:	ed9d 1b02 	vldr	d1, [sp, #8]
 801237a:	ed9d 0b00 	vldr	d0, [sp]
 801237e:	f000 fc5f 	bl	8012c40 <__kernel_cos>
 8012382:	e7eb      	b.n	801235c <cos+0x2c>
 8012384:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012388:	ed9d 0b00 	vldr	d0, [sp]
 801238c:	f000 fcc0 	bl	8012d10 <__kernel_sin>
 8012390:	eeb1 0b40 	vneg.f64	d0, d0
 8012394:	e7e2      	b.n	801235c <cos+0x2c>
 8012396:	ed9d 1b02 	vldr	d1, [sp, #8]
 801239a:	ed9d 0b00 	vldr	d0, [sp]
 801239e:	f000 fc4f 	bl	8012c40 <__kernel_cos>
 80123a2:	e7f5      	b.n	8012390 <cos+0x60>
 80123a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123a8:	ed9d 0b00 	vldr	d0, [sp]
 80123ac:	2001      	movs	r0, #1
 80123ae:	f000 fcaf 	bl	8012d10 <__kernel_sin>
 80123b2:	e7d3      	b.n	801235c <cos+0x2c>
 80123b4:	f3af 8000 	nop.w
	...
 80123c0:	3fe921fb 	.word	0x3fe921fb
 80123c4:	7fefffff 	.word	0x7fefffff

080123c8 <sin>:
 80123c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123ca:	eeb0 7b40 	vmov.f64	d7, d0
 80123ce:	ee17 3a90 	vmov	r3, s15
 80123d2:	4a21      	ldr	r2, [pc, #132]	@ (8012458 <sin+0x90>)
 80123d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80123d8:	4293      	cmp	r3, r2
 80123da:	d807      	bhi.n	80123ec <sin+0x24>
 80123dc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8012450 <sin+0x88>
 80123e0:	2000      	movs	r0, #0
 80123e2:	b005      	add	sp, #20
 80123e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80123e8:	f000 bc92 	b.w	8012d10 <__kernel_sin>
 80123ec:	4a1b      	ldr	r2, [pc, #108]	@ (801245c <sin+0x94>)
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d904      	bls.n	80123fc <sin+0x34>
 80123f2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80123f6:	b005      	add	sp, #20
 80123f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80123fc:	4668      	mov	r0, sp
 80123fe:	f000 fcdf 	bl	8012dc0 <__ieee754_rem_pio2>
 8012402:	f000 0003 	and.w	r0, r0, #3
 8012406:	2801      	cmp	r0, #1
 8012408:	d00a      	beq.n	8012420 <sin+0x58>
 801240a:	2802      	cmp	r0, #2
 801240c:	d00f      	beq.n	801242e <sin+0x66>
 801240e:	b9c0      	cbnz	r0, 8012442 <sin+0x7a>
 8012410:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012414:	ed9d 0b00 	vldr	d0, [sp]
 8012418:	2001      	movs	r0, #1
 801241a:	f000 fc79 	bl	8012d10 <__kernel_sin>
 801241e:	e7ea      	b.n	80123f6 <sin+0x2e>
 8012420:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012424:	ed9d 0b00 	vldr	d0, [sp]
 8012428:	f000 fc0a 	bl	8012c40 <__kernel_cos>
 801242c:	e7e3      	b.n	80123f6 <sin+0x2e>
 801242e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012432:	ed9d 0b00 	vldr	d0, [sp]
 8012436:	2001      	movs	r0, #1
 8012438:	f000 fc6a 	bl	8012d10 <__kernel_sin>
 801243c:	eeb1 0b40 	vneg.f64	d0, d0
 8012440:	e7d9      	b.n	80123f6 <sin+0x2e>
 8012442:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012446:	ed9d 0b00 	vldr	d0, [sp]
 801244a:	f000 fbf9 	bl	8012c40 <__kernel_cos>
 801244e:	e7f5      	b.n	801243c <sin+0x74>
	...
 8012458:	3fe921fb 	.word	0x3fe921fb
 801245c:	7fefffff 	.word	0x7fefffff

08012460 <log>:
 8012460:	b4f0      	push	{r4, r5, r6, r7}
 8012462:	ee10 0a90 	vmov	r0, s1
 8012466:	ee10 3a10 	vmov	r3, s0
 801246a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801246e:	429c      	cmp	r4, r3
 8012470:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8012474:	4c70      	ldr	r4, [pc, #448]	@ (8012638 <log+0x1d8>)
 8012476:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 801247a:	418c      	sbcs	r4, r1
 801247c:	ed2d 8b02 	vpush	{d8}
 8012480:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8012484:	d35a      	bcc.n	801253c <log+0xdc>
 8012486:	4a6d      	ldr	r2, [pc, #436]	@ (801263c <log+0x1dc>)
 8012488:	4290      	cmp	r0, r2
 801248a:	bf08      	it	eq
 801248c:	2b00      	cmpeq	r3, #0
 801248e:	f000 80c4 	beq.w	801261a <log+0x1ba>
 8012492:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8012496:	ee30 0b47 	vsub.f64	d0, d0, d7
 801249a:	4b69      	ldr	r3, [pc, #420]	@ (8012640 <log+0x1e0>)
 801249c:	ee20 2b00 	vmul.f64	d2, d0, d0
 80124a0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80124a4:	ee20 4b02 	vmul.f64	d4, d0, d2
 80124a8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80124ac:	eea6 7b00 	vfma.f64	d7, d6, d0
 80124b0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80124b4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80124b8:	eea6 7b02 	vfma.f64	d7, d6, d2
 80124bc:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80124c0:	eea5 6b00 	vfma.f64	d6, d5, d0
 80124c4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80124c8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80124cc:	eea5 6b02 	vfma.f64	d6, d5, d2
 80124d0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80124d4:	eea3 5b00 	vfma.f64	d5, d3, d0
 80124d8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80124dc:	eea3 5b02 	vfma.f64	d5, d3, d2
 80124e0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80124e4:	eea3 5b04 	vfma.f64	d5, d3, d4
 80124e8:	eea5 6b04 	vfma.f64	d6, d5, d4
 80124ec:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80124f0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80124f4:	eeb0 2b47 	vmov.f64	d2, d7
 80124f8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8012620 <log+0x1c0>
 80124fc:	eeb0 6b40 	vmov.f64	d6, d0
 8012500:	eeb0 3b40 	vmov.f64	d3, d0
 8012504:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012508:	eea0 6b47 	vfms.f64	d6, d0, d7
 801250c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8012510:	ee26 1b06 	vmul.f64	d1, d6, d6
 8012514:	eea1 3b05 	vfma.f64	d3, d1, d5
 8012518:	ee30 7b43 	vsub.f64	d7, d0, d3
 801251c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8012520:	eea1 7b05 	vfma.f64	d7, d1, d5
 8012524:	ee25 5b08 	vmul.f64	d5, d5, d8
 8012528:	eea5 7b00 	vfma.f64	d7, d5, d0
 801252c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8012530:	ee33 0b07 	vadd.f64	d0, d3, d7
 8012534:	ecbd 8b02 	vpop	{d8}
 8012538:	bcf0      	pop	{r4, r5, r6, r7}
 801253a:	4770      	bx	lr
 801253c:	f1a2 0410 	sub.w	r4, r2, #16
 8012540:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8012544:	428c      	cmp	r4, r1
 8012546:	d923      	bls.n	8012590 <log+0x130>
 8012548:	18d9      	adds	r1, r3, r3
 801254a:	eb40 0400 	adc.w	r4, r0, r0
 801254e:	4321      	orrs	r1, r4
 8012550:	d105      	bne.n	801255e <log+0xfe>
 8012552:	ecbd 8b02 	vpop	{d8}
 8012556:	2001      	movs	r0, #1
 8012558:	bcf0      	pop	{r4, r5, r6, r7}
 801255a:	f000 bdad 	b.w	80130b8 <__math_divzero>
 801255e:	4939      	ldr	r1, [pc, #228]	@ (8012644 <log+0x1e4>)
 8012560:	4288      	cmp	r0, r1
 8012562:	bf08      	it	eq
 8012564:	2b00      	cmpeq	r3, #0
 8012566:	d0e5      	beq.n	8012534 <log+0xd4>
 8012568:	0413      	lsls	r3, r2, #16
 801256a:	d403      	bmi.n	8012574 <log+0x114>
 801256c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8012570:	4393      	bics	r3, r2
 8012572:	d104      	bne.n	801257e <log+0x11e>
 8012574:	ecbd 8b02 	vpop	{d8}
 8012578:	bcf0      	pop	{r4, r5, r6, r7}
 801257a:	f000 bdb5 	b.w	80130e8 <__math_invalid>
 801257e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8012628 <log+0x1c8>
 8012582:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012586:	ec53 2b17 	vmov	r2, r3, d7
 801258a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 801258e:	4613      	mov	r3, r2
 8012590:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8012594:	492a      	ldr	r1, [pc, #168]	@ (8012640 <log+0x1e0>)
 8012596:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 801259a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 801259e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80125a2:	0d15      	lsrs	r5, r2, #20
 80125a4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 80125a8:	052d      	lsls	r5, r5, #20
 80125aa:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 80125ae:	1e1e      	subs	r6, r3, #0
 80125b0:	1b47      	subs	r7, r0, r5
 80125b2:	ec47 6b16 	vmov	d6, r6, r7
 80125b6:	1512      	asrs	r2, r2, #20
 80125b8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80125bc:	ee07 2a90 	vmov	s15, r2
 80125c0:	ee25 2b05 	vmul.f64	d2, d5, d5
 80125c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80125c8:	ed91 4b00 	vldr	d4, [r1]
 80125cc:	ee25 1b02 	vmul.f64	d1, d5, d2
 80125d0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 80125d4:	eea4 7b06 	vfma.f64	d7, d4, d6
 80125d8:	ee35 4b07 	vadd.f64	d4, d5, d7
 80125dc:	ee37 0b44 	vsub.f64	d0, d7, d4
 80125e0:	ed91 7b02 	vldr	d7, [r1, #8]
 80125e4:	ee30 0b05 	vadd.f64	d0, d0, d5
 80125e8:	eea7 0b06 	vfma.f64	d0, d7, d6
 80125ec:	ed91 7b04 	vldr	d7, [r1, #16]
 80125f0:	ed91 6b08 	vldr	d6, [r1, #32]
 80125f4:	eea7 0b02 	vfma.f64	d0, d7, d2
 80125f8:	ed91 7b06 	vldr	d7, [r1, #24]
 80125fc:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8012600:	eea6 7b05 	vfma.f64	d7, d6, d5
 8012604:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8012608:	eea3 6b05 	vfma.f64	d6, d3, d5
 801260c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8012610:	eea1 0b07 	vfma.f64	d0, d1, d7
 8012614:	ee30 0b04 	vadd.f64	d0, d0, d4
 8012618:	e78c      	b.n	8012534 <log+0xd4>
 801261a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8012630 <log+0x1d0>
 801261e:	e789      	b.n	8012534 <log+0xd4>
 8012620:	00000000 	.word	0x00000000
 8012624:	41a00000 	.word	0x41a00000
 8012628:	00000000 	.word	0x00000000
 801262c:	43300000 	.word	0x43300000
	...
 8012638:	000308ff 	.word	0x000308ff
 801263c:	3ff00000 	.word	0x3ff00000
 8012640:	08013b88 	.word	0x08013b88
 8012644:	7ff00000 	.word	0x7ff00000

08012648 <checkint>:
 8012648:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801264c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8012650:	429a      	cmp	r2, r3
 8012652:	b570      	push	{r4, r5, r6, lr}
 8012654:	dd2a      	ble.n	80126ac <checkint+0x64>
 8012656:	f240 4333 	movw	r3, #1075	@ 0x433
 801265a:	429a      	cmp	r2, r3
 801265c:	dc24      	bgt.n	80126a8 <checkint+0x60>
 801265e:	1a9b      	subs	r3, r3, r2
 8012660:	f1a3 0620 	sub.w	r6, r3, #32
 8012664:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012668:	fa02 f403 	lsl.w	r4, r2, r3
 801266c:	fa02 f606 	lsl.w	r6, r2, r6
 8012670:	f1c3 0520 	rsb	r5, r3, #32
 8012674:	fa22 f505 	lsr.w	r5, r2, r5
 8012678:	4334      	orrs	r4, r6
 801267a:	432c      	orrs	r4, r5
 801267c:	409a      	lsls	r2, r3
 801267e:	ea20 0202 	bic.w	r2, r0, r2
 8012682:	ea21 0404 	bic.w	r4, r1, r4
 8012686:	4322      	orrs	r2, r4
 8012688:	f1a3 0420 	sub.w	r4, r3, #32
 801268c:	f1c3 0220 	rsb	r2, r3, #32
 8012690:	d10c      	bne.n	80126ac <checkint+0x64>
 8012692:	40d8      	lsrs	r0, r3
 8012694:	fa01 f302 	lsl.w	r3, r1, r2
 8012698:	4318      	orrs	r0, r3
 801269a:	40e1      	lsrs	r1, r4
 801269c:	4308      	orrs	r0, r1
 801269e:	f000 0001 	and.w	r0, r0, #1
 80126a2:	f1d0 0002 	rsbs	r0, r0, #2
 80126a6:	bd70      	pop	{r4, r5, r6, pc}
 80126a8:	2002      	movs	r0, #2
 80126aa:	e7fc      	b.n	80126a6 <checkint+0x5e>
 80126ac:	2000      	movs	r0, #0
 80126ae:	e7fa      	b.n	80126a6 <checkint+0x5e>

080126b0 <pow>:
 80126b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b4:	ee10 4a90 	vmov	r4, s1
 80126b8:	ed2d 8b0a 	vpush	{d8-d12}
 80126bc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 80126c0:	ee11 aa90 	vmov	sl, s3
 80126c4:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80126c8:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 80126cc:	429a      	cmp	r2, r3
 80126ce:	ee10 5a10 	vmov	r5, s0
 80126d2:	ee11 0a10 	vmov	r0, s2
 80126d6:	b087      	sub	sp, #28
 80126d8:	46c4      	mov	ip, r8
 80126da:	ea4f 561a 	mov.w	r6, sl, lsr #20
 80126de:	d806      	bhi.n	80126ee <pow+0x3e>
 80126e0:	f3c6 030a 	ubfx	r3, r6, #0, #11
 80126e4:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 80126e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80126ea:	f240 8157 	bls.w	801299c <pow+0x2ec>
 80126ee:	1802      	adds	r2, r0, r0
 80126f0:	eb4a 010a 	adc.w	r1, sl, sl
 80126f4:	f06f 0b01 	mvn.w	fp, #1
 80126f8:	1e57      	subs	r7, r2, #1
 80126fa:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 80126fe:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8012702:	45bb      	cmp	fp, r7
 8012704:	eb7e 0303 	sbcs.w	r3, lr, r3
 8012708:	d242      	bcs.n	8012790 <pow+0xe0>
 801270a:	ea52 0301 	orrs.w	r3, r2, r1
 801270e:	f04f 0300 	mov.w	r3, #0
 8012712:	d10c      	bne.n	801272e <pow+0x7e>
 8012714:	196d      	adds	r5, r5, r5
 8012716:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 801271a:	4164      	adcs	r4, r4
 801271c:	42ab      	cmp	r3, r5
 801271e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012722:	41a3      	sbcs	r3, r4
 8012724:	f0c0 808f 	bcc.w	8012846 <pow+0x196>
 8012728:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801272c:	e02b      	b.n	8012786 <pow+0xd6>
 801272e:	4ed4      	ldr	r6, [pc, #848]	@ (8012a80 <pow+0x3d0>)
 8012730:	42b4      	cmp	r4, r6
 8012732:	bf08      	it	eq
 8012734:	429d      	cmpeq	r5, r3
 8012736:	d109      	bne.n	801274c <pow+0x9c>
 8012738:	1800      	adds	r0, r0, r0
 801273a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 801273e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8012742:	4283      	cmp	r3, r0
 8012744:	4bcf      	ldr	r3, [pc, #828]	@ (8012a84 <pow+0x3d4>)
 8012746:	eb73 030a 	sbcs.w	r3, r3, sl
 801274a:	e7eb      	b.n	8012724 <pow+0x74>
 801274c:	196d      	adds	r5, r5, r5
 801274e:	48ce      	ldr	r0, [pc, #824]	@ (8012a88 <pow+0x3d8>)
 8012750:	4164      	adcs	r4, r4
 8012752:	42ab      	cmp	r3, r5
 8012754:	eb70 0604 	sbcs.w	r6, r0, r4
 8012758:	d375      	bcc.n	8012846 <pow+0x196>
 801275a:	4281      	cmp	r1, r0
 801275c:	bf08      	it	eq
 801275e:	429a      	cmpeq	r2, r3
 8012760:	d171      	bne.n	8012846 <pow+0x196>
 8012762:	4aca      	ldr	r2, [pc, #808]	@ (8012a8c <pow+0x3dc>)
 8012764:	4294      	cmp	r4, r2
 8012766:	bf08      	it	eq
 8012768:	429d      	cmpeq	r5, r3
 801276a:	d0dd      	beq.n	8012728 <pow+0x78>
 801276c:	4294      	cmp	r4, r2
 801276e:	ea6f 0a0a 	mvn.w	sl, sl
 8012772:	bf34      	ite	cc
 8012774:	2400      	movcc	r4, #0
 8012776:	2401      	movcs	r4, #1
 8012778:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801277c:	4554      	cmp	r4, sl
 801277e:	f040 81dc 	bne.w	8012b3a <pow+0x48a>
 8012782:	ee21 0b01 	vmul.f64	d0, d1, d1
 8012786:	b007      	add	sp, #28
 8012788:	ecbd 8b0a 	vpop	{d8-d12}
 801278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012790:	196f      	adds	r7, r5, r5
 8012792:	eb44 0904 	adc.w	r9, r4, r4
 8012796:	1e7a      	subs	r2, r7, #1
 8012798:	f169 0300 	sbc.w	r3, r9, #0
 801279c:	4593      	cmp	fp, r2
 801279e:	eb7e 0303 	sbcs.w	r3, lr, r3
 80127a2:	d225      	bcs.n	80127f0 <pow+0x140>
 80127a4:	ee20 0b00 	vmul.f64	d0, d0, d0
 80127a8:	2c00      	cmp	r4, #0
 80127aa:	da13      	bge.n	80127d4 <pow+0x124>
 80127ac:	4651      	mov	r1, sl
 80127ae:	f7ff ff4b 	bl	8012648 <checkint>
 80127b2:	2801      	cmp	r0, #1
 80127b4:	d10e      	bne.n	80127d4 <pow+0x124>
 80127b6:	eeb1 0b40 	vneg.f64	d0, d0
 80127ba:	ea57 0909 	orrs.w	r9, r7, r9
 80127be:	d10b      	bne.n	80127d8 <pow+0x128>
 80127c0:	f1ba 0f00 	cmp.w	sl, #0
 80127c4:	dadf      	bge.n	8012786 <pow+0xd6>
 80127c6:	b007      	add	sp, #28
 80127c8:	ecbd 8b0a 	vpop	{d8-d12}
 80127cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127d0:	f000 bc72 	b.w	80130b8 <__math_divzero>
 80127d4:	2000      	movs	r0, #0
 80127d6:	e7f0      	b.n	80127ba <pow+0x10a>
 80127d8:	f1ba 0f00 	cmp.w	sl, #0
 80127dc:	dad3      	bge.n	8012786 <pow+0xd6>
 80127de:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80127e2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80127e6:	ed8d 7b00 	vstr	d7, [sp]
 80127ea:	ed9d 0b00 	vldr	d0, [sp]
 80127ee:	e7ca      	b.n	8012786 <pow+0xd6>
 80127f0:	2c00      	cmp	r4, #0
 80127f2:	da2b      	bge.n	801284c <pow+0x19c>
 80127f4:	4651      	mov	r1, sl
 80127f6:	f7ff ff27 	bl	8012648 <checkint>
 80127fa:	b930      	cbnz	r0, 801280a <pow+0x15a>
 80127fc:	b007      	add	sp, #28
 80127fe:	ecbd 8b0a 	vpop	{d8-d12}
 8012802:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012806:	f000 bc6f 	b.w	80130e8 <__math_invalid>
 801280a:	1e41      	subs	r1, r0, #1
 801280c:	4248      	negs	r0, r1
 801280e:	4148      	adcs	r0, r1
 8012810:	0480      	lsls	r0, r0, #18
 8012812:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8012816:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 801281a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 801281e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8012822:	2b7f      	cmp	r3, #127	@ 0x7f
 8012824:	d92d      	bls.n	8012882 <pow+0x1d2>
 8012826:	4b96      	ldr	r3, [pc, #600]	@ (8012a80 <pow+0x3d0>)
 8012828:	2000      	movs	r0, #0
 801282a:	429c      	cmp	r4, r3
 801282c:	bf08      	it	eq
 801282e:	4285      	cmpeq	r5, r0
 8012830:	f43f af7a 	beq.w	8012728 <pow+0x78>
 8012834:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8012838:	428a      	cmp	r2, r1
 801283a:	d80c      	bhi.n	8012856 <pow+0x1a6>
 801283c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012840:	42a8      	cmp	r0, r5
 8012842:	41a3      	sbcs	r3, r4
 8012844:	d204      	bcs.n	8012850 <pow+0x1a0>
 8012846:	ee31 0b00 	vadd.f64	d0, d1, d0
 801284a:	e79c      	b.n	8012786 <pow+0xd6>
 801284c:	2000      	movs	r0, #0
 801284e:	e7e4      	b.n	801281a <pow+0x16a>
 8012850:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012854:	e797      	b.n	8012786 <pow+0xd6>
 8012856:	2d01      	cmp	r5, #1
 8012858:	eb74 0303 	sbcs.w	r3, r4, r3
 801285c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012860:	bf34      	ite	cc
 8012862:	2301      	movcc	r3, #1
 8012864:	2300      	movcs	r3, #0
 8012866:	4296      	cmp	r6, r2
 8012868:	bf8c      	ite	hi
 801286a:	2600      	movhi	r6, #0
 801286c:	2601      	movls	r6, #1
 801286e:	42b3      	cmp	r3, r6
 8012870:	f000 809c 	beq.w	80129ac <pow+0x2fc>
 8012874:	b007      	add	sp, #28
 8012876:	ecbd 8b0a 	vpop	{d8-d12}
 801287a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801287e:	f000 bc13 	b.w	80130a8 <__math_oflow>
 8012882:	f1bc 0f00 	cmp.w	ip, #0
 8012886:	d10a      	bne.n	801289e <pow+0x1ee>
 8012888:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8012a70 <pow+0x3c0>
 801288c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8012890:	ec53 2b17 	vmov	r2, r3, d7
 8012894:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8012898:	4615      	mov	r5, r2
 801289a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 801289e:	4a7c      	ldr	r2, [pc, #496]	@ (8012a90 <pow+0x3e0>)
 80128a0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80128a4:	4422      	add	r2, r4
 80128a6:	1513      	asrs	r3, r2, #20
 80128a8:	f3c2 3146 	ubfx	r1, r2, #13, #7
 80128ac:	ee03 3a10 	vmov	s6, r3
 80128b0:	0d12      	lsrs	r2, r2, #20
 80128b2:	4b78      	ldr	r3, [pc, #480]	@ (8012a94 <pow+0x3e4>)
 80128b4:	0512      	lsls	r2, r2, #20
 80128b6:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 80128ba:	1aa7      	subs	r7, r4, r2
 80128bc:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 80128c0:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 80128c4:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 80128c8:	1e2e      	subs	r6, r5, #0
 80128ca:	ec47 6b14 	vmov	d4, r6, r7
 80128ce:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 80128d2:	eea4 6b05 	vfma.f64	d6, d4, d5
 80128d6:	ed93 5b00 	vldr	d5, [r3]
 80128da:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80128de:	eea3 2b05 	vfma.f64	d2, d3, d5
 80128e2:	ed93 5b02 	vldr	d5, [r3, #8]
 80128e6:	ee36 4b02 	vadd.f64	d4, d6, d2
 80128ea:	ee32 2b44 	vsub.f64	d2, d2, d4
 80128ee:	eea3 7b05 	vfma.f64	d7, d3, d5
 80128f2:	ed93 5b04 	vldr	d5, [r3, #16]
 80128f6:	ee32 2b06 	vadd.f64	d2, d2, d6
 80128fa:	ee37 7b02 	vadd.f64	d7, d7, d2
 80128fe:	ee26 5b05 	vmul.f64	d5, d6, d5
 8012902:	ee26 0b05 	vmul.f64	d0, d6, d5
 8012906:	ee34 8b00 	vadd.f64	d8, d4, d0
 801290a:	eeb0 9b40 	vmov.f64	d9, d0
 801290e:	ee34 4b48 	vsub.f64	d4, d4, d8
 8012912:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8012916:	ee34 ab00 	vadd.f64	d10, d4, d0
 801291a:	ed93 5b06 	vldr	d5, [r3, #24]
 801291e:	ee26 bb00 	vmul.f64	d11, d6, d0
 8012922:	ee37 7b09 	vadd.f64	d7, d7, d9
 8012926:	ed93 4b08 	vldr	d4, [r3, #32]
 801292a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 801292e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8012932:	eea6 5b04 	vfma.f64	d5, d6, d4
 8012936:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 801293a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 801293e:	eea6 4b03 	vfma.f64	d4, d6, d3
 8012942:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8012946:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801294a:	eea0 4b03 	vfma.f64	d4, d0, d3
 801294e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8012952:	eeab 7b05 	vfma.f64	d7, d11, d5
 8012956:	ee38 4b07 	vadd.f64	d4, d8, d7
 801295a:	ee21 6b04 	vmul.f64	d6, d1, d4
 801295e:	ee16 3a90 	vmov	r3, s13
 8012962:	eeb0 5b46 	vmov.f64	d5, d6
 8012966:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801296a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 801296e:	18b2      	adds	r2, r6, r2
 8012970:	2a3e      	cmp	r2, #62	@ 0x3e
 8012972:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8012976:	ee38 8b44 	vsub.f64	d8, d8, d4
 801297a:	ee38 8b07 	vadd.f64	d8, d8, d7
 801297e:	eea1 5b08 	vfma.f64	d5, d1, d8
 8012982:	d91b      	bls.n	80129bc <pow+0x30c>
 8012984:	2a00      	cmp	r2, #0
 8012986:	da0b      	bge.n	80129a0 <pow+0x2f0>
 8012988:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801298c:	ee36 0b00 	vadd.f64	d0, d6, d0
 8012990:	2800      	cmp	r0, #0
 8012992:	f43f aef8 	beq.w	8012786 <pow+0xd6>
 8012996:	eeb1 0b40 	vneg.f64	d0, d0
 801299a:	e6f4      	b.n	8012786 <pow+0xd6>
 801299c:	2000      	movs	r0, #0
 801299e:	e77e      	b.n	801289e <pow+0x1ee>
 80129a0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 80129a4:	d909      	bls.n	80129ba <pow+0x30a>
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	f6bf af64 	bge.w	8012874 <pow+0x1c4>
 80129ac:	b007      	add	sp, #28
 80129ae:	ecbd 8b0a 	vpop	{d8-d12}
 80129b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129b6:	f000 bb6f 	b.w	8013098 <__math_uflow>
 80129ba:	2600      	movs	r6, #0
 80129bc:	4936      	ldr	r1, [pc, #216]	@ (8012a98 <pow+0x3e8>)
 80129be:	ed91 4b02 	vldr	d4, [r1, #8]
 80129c2:	ed91 3b00 	vldr	d3, [r1]
 80129c6:	eeb0 7b44 	vmov.f64	d7, d4
 80129ca:	eea6 7b03 	vfma.f64	d7, d6, d3
 80129ce:	ee17 5a10 	vmov	r5, s14
 80129d2:	ee37 7b44 	vsub.f64	d7, d7, d4
 80129d6:	ed91 4b04 	vldr	d4, [r1, #16]
 80129da:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 80129de:	eea7 6b04 	vfma.f64	d6, d7, d4
 80129e2:	ed91 4b06 	vldr	d4, [r1, #24]
 80129e6:	18dc      	adds	r4, r3, r3
 80129e8:	f104 030f 	add.w	r3, r4, #15
 80129ec:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80129f0:	eea7 6b04 	vfma.f64	d6, d7, d4
 80129f4:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 80129f8:	ee35 5b06 	vadd.f64	d5, d5, d6
 80129fc:	ee25 6b05 	vmul.f64	d6, d5, d5
 8012a00:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8012a04:	ed91 4b08 	vldr	d4, [r1, #32]
 8012a08:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012a0c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8012a10:	eea5 4b03 	vfma.f64	d4, d5, d3
 8012a14:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8012a18:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012a1c:	ee26 6b06 	vmul.f64	d6, d6, d6
 8012a20:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8012a24:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8012a28:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8012a2c:	eea5 4b03 	vfma.f64	d4, d5, d3
 8012a30:	1940      	adds	r0, r0, r5
 8012a32:	2700      	movs	r7, #0
 8012a34:	eb17 020c 	adds.w	r2, r7, ip
 8012a38:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8012a3c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8012a40:	2e00      	cmp	r6, #0
 8012a42:	d175      	bne.n	8012b30 <pow+0x480>
 8012a44:	42bd      	cmp	r5, r7
 8012a46:	db29      	blt.n	8012a9c <pow+0x3ec>
 8012a48:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8012a4c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8012a50:	4610      	mov	r0, r2
 8012a52:	ec41 0b10 	vmov	d0, r0, r1
 8012a56:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012a5a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8012a78 <pow+0x3c8>
 8012a5e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012a62:	b007      	add	sp, #28
 8012a64:	ecbd 8b0a 	vpop	{d8-d12}
 8012a68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a6c:	f000 bb54 	b.w	8013118 <__math_check_oflow>
 8012a70:	00000000 	.word	0x00000000
 8012a74:	43300000 	.word	0x43300000
 8012a78:	00000000 	.word	0x00000000
 8012a7c:	7f000000 	.word	0x7f000000
 8012a80:	3ff00000 	.word	0x3ff00000
 8012a84:	fff00000 	.word	0xfff00000
 8012a88:	ffe00000 	.word	0xffe00000
 8012a8c:	7fe00000 	.word	0x7fe00000
 8012a90:	c0196aab 	.word	0xc0196aab
 8012a94:	08014418 	.word	0x08014418
 8012a98:	080155e8 	.word	0x080155e8
 8012a9c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012aa0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8012aa4:	4610      	mov	r0, r2
 8012aa6:	ec41 0b15 	vmov	d5, r0, r1
 8012aaa:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8012aae:	ee27 6b05 	vmul.f64	d6, d7, d5
 8012ab2:	ee35 7b06 	vadd.f64	d7, d5, d6
 8012ab6:	eeb0 4bc7 	vabs.f64	d4, d7
 8012aba:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8012abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac2:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8012b40 <pow+0x490>
 8012ac6:	d52a      	bpl.n	8012b1e <pow+0x46e>
 8012ac8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012acc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad4:	ee35 5b06 	vadd.f64	d5, d5, d6
 8012ad8:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8012adc:	bf58      	it	pl
 8012ade:	eeb0 4b43 	vmovpl.f64	d4, d3
 8012ae2:	ee37 3b04 	vadd.f64	d3, d7, d4
 8012ae6:	ee34 6b43 	vsub.f64	d6, d4, d3
 8012aea:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012aee:	ee36 6b05 	vadd.f64	d6, d6, d5
 8012af2:	ee36 6b03 	vadd.f64	d6, d6, d3
 8012af6:	ee36 7b44 	vsub.f64	d7, d6, d4
 8012afa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b02:	d104      	bne.n	8012b0e <pow+0x45e>
 8012b04:	4632      	mov	r2, r6
 8012b06:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8012b0a:	ec43 2b17 	vmov	d7, r2, r3
 8012b0e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012b12:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012b16:	ee26 6b00 	vmul.f64	d6, d6, d0
 8012b1a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8012b1e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8012b22:	b007      	add	sp, #28
 8012b24:	ecbd 8b0a 	vpop	{d8-d12}
 8012b28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b2c:	f000 baeb 	b.w	8013106 <__math_check_uflow>
 8012b30:	ec43 2b10 	vmov	d0, r2, r3
 8012b34:	eea7 0b00 	vfma.f64	d0, d7, d0
 8012b38:	e625      	b.n	8012786 <pow+0xd6>
 8012b3a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8012b48 <pow+0x498>
 8012b3e:	e622      	b.n	8012786 <pow+0xd6>
 8012b40:	00000000 	.word	0x00000000
 8012b44:	00100000 	.word	0x00100000
	...

08012b50 <floor>:
 8012b50:	ee10 3a90 	vmov	r3, s1
 8012b54:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8012b58:	ee10 2a10 	vmov	r2, s0
 8012b5c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8012b60:	2913      	cmp	r1, #19
 8012b62:	b530      	push	{r4, r5, lr}
 8012b64:	4615      	mov	r5, r2
 8012b66:	dc33      	bgt.n	8012bd0 <floor+0x80>
 8012b68:	2900      	cmp	r1, #0
 8012b6a:	da18      	bge.n	8012b9e <floor+0x4e>
 8012b6c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8012c30 <floor+0xe0>
 8012b70:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012b74:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b7c:	dd0a      	ble.n	8012b94 <floor+0x44>
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	da50      	bge.n	8012c24 <floor+0xd4>
 8012b82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b86:	4313      	orrs	r3, r2
 8012b88:	2200      	movs	r2, #0
 8012b8a:	4293      	cmp	r3, r2
 8012b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8012c38 <floor+0xe8>)
 8012b8e:	bf08      	it	eq
 8012b90:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8012b94:	4619      	mov	r1, r3
 8012b96:	4610      	mov	r0, r2
 8012b98:	ec41 0b10 	vmov	d0, r0, r1
 8012b9c:	e01f      	b.n	8012bde <floor+0x8e>
 8012b9e:	4827      	ldr	r0, [pc, #156]	@ (8012c3c <floor+0xec>)
 8012ba0:	4108      	asrs	r0, r1
 8012ba2:	ea03 0400 	and.w	r4, r3, r0
 8012ba6:	4314      	orrs	r4, r2
 8012ba8:	d019      	beq.n	8012bde <floor+0x8e>
 8012baa:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012c30 <floor+0xe0>
 8012bae:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012bb2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bba:	ddeb      	ble.n	8012b94 <floor+0x44>
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	bfbe      	ittt	lt
 8012bc0:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8012bc4:	410a      	asrlt	r2, r1
 8012bc6:	189b      	addlt	r3, r3, r2
 8012bc8:	ea23 0300 	bic.w	r3, r3, r0
 8012bcc:	2200      	movs	r2, #0
 8012bce:	e7e1      	b.n	8012b94 <floor+0x44>
 8012bd0:	2933      	cmp	r1, #51	@ 0x33
 8012bd2:	dd05      	ble.n	8012be0 <floor+0x90>
 8012bd4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8012bd8:	d101      	bne.n	8012bde <floor+0x8e>
 8012bda:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012bde:	bd30      	pop	{r4, r5, pc}
 8012be0:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8012be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012be8:	40e0      	lsrs	r0, r4
 8012bea:	4210      	tst	r0, r2
 8012bec:	d0f7      	beq.n	8012bde <floor+0x8e>
 8012bee:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8012c30 <floor+0xe0>
 8012bf2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012bf6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfe:	ddc9      	ble.n	8012b94 <floor+0x44>
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	da02      	bge.n	8012c0a <floor+0xba>
 8012c04:	2914      	cmp	r1, #20
 8012c06:	d103      	bne.n	8012c10 <floor+0xc0>
 8012c08:	3301      	adds	r3, #1
 8012c0a:	ea22 0200 	bic.w	r2, r2, r0
 8012c0e:	e7c1      	b.n	8012b94 <floor+0x44>
 8012c10:	2401      	movs	r4, #1
 8012c12:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8012c16:	fa04 f101 	lsl.w	r1, r4, r1
 8012c1a:	440a      	add	r2, r1
 8012c1c:	42aa      	cmp	r2, r5
 8012c1e:	bf38      	it	cc
 8012c20:	191b      	addcc	r3, r3, r4
 8012c22:	e7f2      	b.n	8012c0a <floor+0xba>
 8012c24:	2200      	movs	r2, #0
 8012c26:	4613      	mov	r3, r2
 8012c28:	e7b4      	b.n	8012b94 <floor+0x44>
 8012c2a:	bf00      	nop
 8012c2c:	f3af 8000 	nop.w
 8012c30:	8800759c 	.word	0x8800759c
 8012c34:	7e37e43c 	.word	0x7e37e43c
 8012c38:	bff00000 	.word	0xbff00000
 8012c3c:	000fffff 	.word	0x000fffff

08012c40 <__kernel_cos>:
 8012c40:	eeb0 5b40 	vmov.f64	d5, d0
 8012c44:	ee15 1a90 	vmov	r1, s11
 8012c48:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8012c4c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8012c50:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8012c54:	d204      	bcs.n	8012c60 <__kernel_cos+0x20>
 8012c56:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8012c5a:	ee17 3a90 	vmov	r3, s15
 8012c5e:	b343      	cbz	r3, 8012cb2 <__kernel_cos+0x72>
 8012c60:	ee25 6b05 	vmul.f64	d6, d5, d5
 8012c64:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8012c68:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8012cd8 <__kernel_cos+0x98>
 8012c6c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8012ce0 <__kernel_cos+0xa0>
 8012c70:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012c74:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8012ce8 <__kernel_cos+0xa8>
 8012c78:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012c7c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8012cf0 <__kernel_cos+0xb0>
 8012c80:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012c84:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8012cf8 <__kernel_cos+0xb8>
 8012c88:	4b1f      	ldr	r3, [pc, #124]	@ (8012d08 <__kernel_cos+0xc8>)
 8012c8a:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012c8e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8012d00 <__kernel_cos+0xc0>
 8012c92:	4299      	cmp	r1, r3
 8012c94:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012c98:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8012c9c:	ee24 4b06 	vmul.f64	d4, d4, d6
 8012ca0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012ca4:	eea6 1b04 	vfma.f64	d1, d6, d4
 8012ca8:	d804      	bhi.n	8012cb4 <__kernel_cos+0x74>
 8012caa:	ee37 7b41 	vsub.f64	d7, d7, d1
 8012cae:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012cb2:	4770      	bx	lr
 8012cb4:	4b15      	ldr	r3, [pc, #84]	@ (8012d0c <__kernel_cos+0xcc>)
 8012cb6:	4299      	cmp	r1, r3
 8012cb8:	d809      	bhi.n	8012cce <__kernel_cos+0x8e>
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8012cc0:	ec43 2b16 	vmov	d6, r2, r3
 8012cc4:	ee30 0b46 	vsub.f64	d0, d0, d6
 8012cc8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012ccc:	e7ed      	b.n	8012caa <__kernel_cos+0x6a>
 8012cce:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8012cd2:	e7f7      	b.n	8012cc4 <__kernel_cos+0x84>
 8012cd4:	f3af 8000 	nop.w
 8012cd8:	be8838d4 	.word	0xbe8838d4
 8012cdc:	bda8fae9 	.word	0xbda8fae9
 8012ce0:	bdb4b1c4 	.word	0xbdb4b1c4
 8012ce4:	3e21ee9e 	.word	0x3e21ee9e
 8012ce8:	809c52ad 	.word	0x809c52ad
 8012cec:	be927e4f 	.word	0xbe927e4f
 8012cf0:	19cb1590 	.word	0x19cb1590
 8012cf4:	3efa01a0 	.word	0x3efa01a0
 8012cf8:	16c15177 	.word	0x16c15177
 8012cfc:	bf56c16c 	.word	0xbf56c16c
 8012d00:	5555554c 	.word	0x5555554c
 8012d04:	3fa55555 	.word	0x3fa55555
 8012d08:	3fd33332 	.word	0x3fd33332
 8012d0c:	3fe90000 	.word	0x3fe90000

08012d10 <__kernel_sin>:
 8012d10:	ee10 3a90 	vmov	r3, s1
 8012d14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012d18:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012d1c:	d204      	bcs.n	8012d28 <__kernel_sin+0x18>
 8012d1e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8012d22:	ee17 3a90 	vmov	r3, s15
 8012d26:	b35b      	cbz	r3, 8012d80 <__kernel_sin+0x70>
 8012d28:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012d2c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012d30:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8012d88 <__kernel_sin+0x78>
 8012d34:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8012d90 <__kernel_sin+0x80>
 8012d38:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012d3c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8012d98 <__kernel_sin+0x88>
 8012d40:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012d44:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8012da0 <__kernel_sin+0x90>
 8012d48:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012d4c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8012da8 <__kernel_sin+0x98>
 8012d50:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012d54:	b930      	cbnz	r0, 8012d64 <__kernel_sin+0x54>
 8012d56:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8012db0 <__kernel_sin+0xa0>
 8012d5a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012d5e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8012d62:	4770      	bx	lr
 8012d64:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012d68:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8012d6c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012d70:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8012d74:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8012db8 <__kernel_sin+0xa8>
 8012d78:	eea5 1b07 	vfma.f64	d1, d5, d7
 8012d7c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012d80:	4770      	bx	lr
 8012d82:	bf00      	nop
 8012d84:	f3af 8000 	nop.w
 8012d88:	5acfd57c 	.word	0x5acfd57c
 8012d8c:	3de5d93a 	.word	0x3de5d93a
 8012d90:	8a2b9ceb 	.word	0x8a2b9ceb
 8012d94:	be5ae5e6 	.word	0xbe5ae5e6
 8012d98:	57b1fe7d 	.word	0x57b1fe7d
 8012d9c:	3ec71de3 	.word	0x3ec71de3
 8012da0:	19c161d5 	.word	0x19c161d5
 8012da4:	bf2a01a0 	.word	0xbf2a01a0
 8012da8:	1110f8a6 	.word	0x1110f8a6
 8012dac:	3f811111 	.word	0x3f811111
 8012db0:	55555549 	.word	0x55555549
 8012db4:	bfc55555 	.word	0xbfc55555
 8012db8:	55555549 	.word	0x55555549
 8012dbc:	3fc55555 	.word	0x3fc55555

08012dc0 <__ieee754_rem_pio2>:
 8012dc0:	b570      	push	{r4, r5, r6, lr}
 8012dc2:	eeb0 7b40 	vmov.f64	d7, d0
 8012dc6:	ee17 5a90 	vmov	r5, s15
 8012dca:	4b99      	ldr	r3, [pc, #612]	@ (8013030 <__ieee754_rem_pio2+0x270>)
 8012dcc:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012dd0:	429e      	cmp	r6, r3
 8012dd2:	b088      	sub	sp, #32
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	d807      	bhi.n	8012de8 <__ieee754_rem_pio2+0x28>
 8012dd8:	2200      	movs	r2, #0
 8012dda:	2300      	movs	r3, #0
 8012ddc:	ed84 0b00 	vstr	d0, [r4]
 8012de0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012de4:	2000      	movs	r0, #0
 8012de6:	e01b      	b.n	8012e20 <__ieee754_rem_pio2+0x60>
 8012de8:	4b92      	ldr	r3, [pc, #584]	@ (8013034 <__ieee754_rem_pio2+0x274>)
 8012dea:	429e      	cmp	r6, r3
 8012dec:	d83b      	bhi.n	8012e66 <__ieee754_rem_pio2+0xa6>
 8012dee:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8012df2:	2d00      	cmp	r5, #0
 8012df4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8012ff0 <__ieee754_rem_pio2+0x230>
 8012df8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8012dfc:	dd19      	ble.n	8012e32 <__ieee754_rem_pio2+0x72>
 8012dfe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8012e02:	429e      	cmp	r6, r3
 8012e04:	d00e      	beq.n	8012e24 <__ieee754_rem_pio2+0x64>
 8012e06:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8012ff8 <__ieee754_rem_pio2+0x238>
 8012e0a:	ee37 6b45 	vsub.f64	d6, d7, d5
 8012e0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012e12:	ed84 6b00 	vstr	d6, [r4]
 8012e16:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012e1a:	ed84 7b02 	vstr	d7, [r4, #8]
 8012e1e:	2001      	movs	r0, #1
 8012e20:	b008      	add	sp, #32
 8012e22:	bd70      	pop	{r4, r5, r6, pc}
 8012e24:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8013000 <__ieee754_rem_pio2+0x240>
 8012e28:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8013008 <__ieee754_rem_pio2+0x248>
 8012e2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012e30:	e7eb      	b.n	8012e0a <__ieee754_rem_pio2+0x4a>
 8012e32:	429e      	cmp	r6, r3
 8012e34:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012e38:	d00e      	beq.n	8012e58 <__ieee754_rem_pio2+0x98>
 8012e3a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8012ff8 <__ieee754_rem_pio2+0x238>
 8012e3e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012e42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012e46:	ed84 6b00 	vstr	d6, [r4]
 8012e4a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012e4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e52:	ed84 7b02 	vstr	d7, [r4, #8]
 8012e56:	e7e3      	b.n	8012e20 <__ieee754_rem_pio2+0x60>
 8012e58:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8013000 <__ieee754_rem_pio2+0x240>
 8012e5c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8013008 <__ieee754_rem_pio2+0x248>
 8012e60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012e64:	e7eb      	b.n	8012e3e <__ieee754_rem_pio2+0x7e>
 8012e66:	4b74      	ldr	r3, [pc, #464]	@ (8013038 <__ieee754_rem_pio2+0x278>)
 8012e68:	429e      	cmp	r6, r3
 8012e6a:	d870      	bhi.n	8012f4e <__ieee754_rem_pio2+0x18e>
 8012e6c:	f000 f8ec 	bl	8013048 <fabs>
 8012e70:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8012e74:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013010 <__ieee754_rem_pio2+0x250>
 8012e78:	eea0 7b06 	vfma.f64	d7, d0, d6
 8012e7c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012e80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012e84:	ee17 0a90 	vmov	r0, s15
 8012e88:	eeb1 4b45 	vneg.f64	d4, d5
 8012e8c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8012ff0 <__ieee754_rem_pio2+0x230>
 8012e90:	eea5 0b47 	vfms.f64	d0, d5, d7
 8012e94:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8012ff8 <__ieee754_rem_pio2+0x238>
 8012e98:	281f      	cmp	r0, #31
 8012e9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8012e9e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012ea2:	dc05      	bgt.n	8012eb0 <__ieee754_rem_pio2+0xf0>
 8012ea4:	4b65      	ldr	r3, [pc, #404]	@ (801303c <__ieee754_rem_pio2+0x27c>)
 8012ea6:	1e42      	subs	r2, r0, #1
 8012ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eac:	42b3      	cmp	r3, r6
 8012eae:	d109      	bne.n	8012ec4 <__ieee754_rem_pio2+0x104>
 8012eb0:	ee16 3a90 	vmov	r3, s13
 8012eb4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8012eb8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8012ebc:	2b10      	cmp	r3, #16
 8012ebe:	ea4f 5226 	mov.w	r2, r6, asr #20
 8012ec2:	dc02      	bgt.n	8012eca <__ieee754_rem_pio2+0x10a>
 8012ec4:	ed84 6b00 	vstr	d6, [r4]
 8012ec8:	e01a      	b.n	8012f00 <__ieee754_rem_pio2+0x140>
 8012eca:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8013000 <__ieee754_rem_pio2+0x240>
 8012ece:	eeb0 6b40 	vmov.f64	d6, d0
 8012ed2:	eea4 6b03 	vfma.f64	d6, d4, d3
 8012ed6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8012eda:	eea4 7b03 	vfma.f64	d7, d4, d3
 8012ede:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8013008 <__ieee754_rem_pio2+0x248>
 8012ee2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8012ee6:	ee36 3b47 	vsub.f64	d3, d6, d7
 8012eea:	ee13 3a90 	vmov	r3, s7
 8012eee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8012ef2:	1ad3      	subs	r3, r2, r3
 8012ef4:	2b31      	cmp	r3, #49	@ 0x31
 8012ef6:	dc17      	bgt.n	8012f28 <__ieee754_rem_pio2+0x168>
 8012ef8:	eeb0 0b46 	vmov.f64	d0, d6
 8012efc:	ed84 3b00 	vstr	d3, [r4]
 8012f00:	ed94 6b00 	vldr	d6, [r4]
 8012f04:	2d00      	cmp	r5, #0
 8012f06:	ee30 0b46 	vsub.f64	d0, d0, d6
 8012f0a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012f0e:	ed84 0b02 	vstr	d0, [r4, #8]
 8012f12:	da85      	bge.n	8012e20 <__ieee754_rem_pio2+0x60>
 8012f14:	eeb1 6b46 	vneg.f64	d6, d6
 8012f18:	eeb1 0b40 	vneg.f64	d0, d0
 8012f1c:	ed84 6b00 	vstr	d6, [r4]
 8012f20:	ed84 0b02 	vstr	d0, [r4, #8]
 8012f24:	4240      	negs	r0, r0
 8012f26:	e77b      	b.n	8012e20 <__ieee754_rem_pio2+0x60>
 8012f28:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8013018 <__ieee754_rem_pio2+0x258>
 8012f2c:	eeb0 0b46 	vmov.f64	d0, d6
 8012f30:	eea4 0b07 	vfma.f64	d0, d4, d7
 8012f34:	ee36 6b40 	vsub.f64	d6, d6, d0
 8012f38:	eea4 6b07 	vfma.f64	d6, d4, d7
 8012f3c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8013020 <__ieee754_rem_pio2+0x260>
 8012f40:	eeb0 7b46 	vmov.f64	d7, d6
 8012f44:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8012f48:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012f4c:	e7ba      	b.n	8012ec4 <__ieee754_rem_pio2+0x104>
 8012f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8013040 <__ieee754_rem_pio2+0x280>)
 8012f50:	429e      	cmp	r6, r3
 8012f52:	d906      	bls.n	8012f62 <__ieee754_rem_pio2+0x1a2>
 8012f54:	ee30 7b40 	vsub.f64	d7, d0, d0
 8012f58:	ed80 7b02 	vstr	d7, [r0, #8]
 8012f5c:	ed80 7b00 	vstr	d7, [r0]
 8012f60:	e740      	b.n	8012de4 <__ieee754_rem_pio2+0x24>
 8012f62:	ee10 3a10 	vmov	r3, s0
 8012f66:	1532      	asrs	r2, r6, #20
 8012f68:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8012f72:	ec41 0b17 	vmov	d7, r0, r1
 8012f76:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012f7a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8013028 <__ieee754_rem_pio2+0x268>
 8012f7e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012f82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012f86:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012f8a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012f8e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012f92:	a808      	add	r0, sp, #32
 8012f94:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012f98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012f9c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8012fa0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012fa4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012fa8:	2103      	movs	r1, #3
 8012faa:	ed30 7b02 	vldmdb	r0!, {d7}
 8012fae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fb6:	460b      	mov	r3, r1
 8012fb8:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8012fbc:	d0f5      	beq.n	8012faa <__ieee754_rem_pio2+0x1ea>
 8012fbe:	4921      	ldr	r1, [pc, #132]	@ (8013044 <__ieee754_rem_pio2+0x284>)
 8012fc0:	9101      	str	r1, [sp, #4]
 8012fc2:	2102      	movs	r1, #2
 8012fc4:	9100      	str	r1, [sp, #0]
 8012fc6:	a802      	add	r0, sp, #8
 8012fc8:	4621      	mov	r1, r4
 8012fca:	f000 f8b9 	bl	8013140 <__kernel_rem_pio2>
 8012fce:	2d00      	cmp	r5, #0
 8012fd0:	f6bf af26 	bge.w	8012e20 <__ieee754_rem_pio2+0x60>
 8012fd4:	ed94 7b00 	vldr	d7, [r4]
 8012fd8:	eeb1 7b47 	vneg.f64	d7, d7
 8012fdc:	ed84 7b00 	vstr	d7, [r4]
 8012fe0:	ed94 7b02 	vldr	d7, [r4, #8]
 8012fe4:	eeb1 7b47 	vneg.f64	d7, d7
 8012fe8:	ed84 7b02 	vstr	d7, [r4, #8]
 8012fec:	e79a      	b.n	8012f24 <__ieee754_rem_pio2+0x164>
 8012fee:	bf00      	nop
 8012ff0:	54400000 	.word	0x54400000
 8012ff4:	3ff921fb 	.word	0x3ff921fb
 8012ff8:	1a626331 	.word	0x1a626331
 8012ffc:	3dd0b461 	.word	0x3dd0b461
 8013000:	1a600000 	.word	0x1a600000
 8013004:	3dd0b461 	.word	0x3dd0b461
 8013008:	2e037073 	.word	0x2e037073
 801300c:	3ba3198a 	.word	0x3ba3198a
 8013010:	6dc9c883 	.word	0x6dc9c883
 8013014:	3fe45f30 	.word	0x3fe45f30
 8013018:	2e000000 	.word	0x2e000000
 801301c:	3ba3198a 	.word	0x3ba3198a
 8013020:	252049c1 	.word	0x252049c1
 8013024:	397b839a 	.word	0x397b839a
 8013028:	00000000 	.word	0x00000000
 801302c:	41700000 	.word	0x41700000
 8013030:	3fe921fb 	.word	0x3fe921fb
 8013034:	4002d97b 	.word	0x4002d97b
 8013038:	413921fb 	.word	0x413921fb
 801303c:	08015460 	.word	0x08015460
 8013040:	7fefffff 	.word	0x7fefffff
 8013044:	080154e0 	.word	0x080154e0

08013048 <fabs>:
 8013048:	ec51 0b10 	vmov	r0, r1, d0
 801304c:	4602      	mov	r2, r0
 801304e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013052:	ec43 2b10 	vmov	d0, r2, r3
 8013056:	4770      	bx	lr

08013058 <with_errno>:
 8013058:	b510      	push	{r4, lr}
 801305a:	ed2d 8b02 	vpush	{d8}
 801305e:	eeb0 8b40 	vmov.f64	d8, d0
 8013062:	4604      	mov	r4, r0
 8013064:	f7fa fe74 	bl	800dd50 <__errno>
 8013068:	eeb0 0b48 	vmov.f64	d0, d8
 801306c:	ecbd 8b02 	vpop	{d8}
 8013070:	6004      	str	r4, [r0, #0]
 8013072:	bd10      	pop	{r4, pc}

08013074 <xflow>:
 8013074:	b082      	sub	sp, #8
 8013076:	b158      	cbz	r0, 8013090 <xflow+0x1c>
 8013078:	eeb1 7b40 	vneg.f64	d7, d0
 801307c:	ed8d 7b00 	vstr	d7, [sp]
 8013080:	ed9d 7b00 	vldr	d7, [sp]
 8013084:	2022      	movs	r0, #34	@ 0x22
 8013086:	ee20 0b07 	vmul.f64	d0, d0, d7
 801308a:	b002      	add	sp, #8
 801308c:	f7ff bfe4 	b.w	8013058 <with_errno>
 8013090:	eeb0 7b40 	vmov.f64	d7, d0
 8013094:	e7f2      	b.n	801307c <xflow+0x8>
	...

08013098 <__math_uflow>:
 8013098:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80130a0 <__math_uflow+0x8>
 801309c:	f7ff bfea 	b.w	8013074 <xflow>
 80130a0:	00000000 	.word	0x00000000
 80130a4:	10000000 	.word	0x10000000

080130a8 <__math_oflow>:
 80130a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80130b0 <__math_oflow+0x8>
 80130ac:	f7ff bfe2 	b.w	8013074 <xflow>
 80130b0:	00000000 	.word	0x00000000
 80130b4:	70000000 	.word	0x70000000

080130b8 <__math_divzero>:
 80130b8:	b082      	sub	sp, #8
 80130ba:	2800      	cmp	r0, #0
 80130bc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80130c0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80130c4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80130c8:	ed8d 7b00 	vstr	d7, [sp]
 80130cc:	ed9d 0b00 	vldr	d0, [sp]
 80130d0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80130e0 <__math_divzero+0x28>
 80130d4:	2022      	movs	r0, #34	@ 0x22
 80130d6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80130da:	b002      	add	sp, #8
 80130dc:	f7ff bfbc 	b.w	8013058 <with_errno>
	...

080130e8 <__math_invalid>:
 80130e8:	eeb0 7b40 	vmov.f64	d7, d0
 80130ec:	eeb4 7b47 	vcmp.f64	d7, d7
 80130f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f4:	ee30 6b40 	vsub.f64	d6, d0, d0
 80130f8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80130fc:	d602      	bvs.n	8013104 <__math_invalid+0x1c>
 80130fe:	2021      	movs	r0, #33	@ 0x21
 8013100:	f7ff bfaa 	b.w	8013058 <with_errno>
 8013104:	4770      	bx	lr

08013106 <__math_check_uflow>:
 8013106:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801310a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801310e:	d102      	bne.n	8013116 <__math_check_uflow+0x10>
 8013110:	2022      	movs	r0, #34	@ 0x22
 8013112:	f7ff bfa1 	b.w	8013058 <with_errno>
 8013116:	4770      	bx	lr

08013118 <__math_check_oflow>:
 8013118:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8013138 <__math_check_oflow+0x20>
 801311c:	eeb0 7bc0 	vabs.f64	d7, d0
 8013120:	eeb4 7b46 	vcmp.f64	d7, d6
 8013124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013128:	dd02      	ble.n	8013130 <__math_check_oflow+0x18>
 801312a:	2022      	movs	r0, #34	@ 0x22
 801312c:	f7ff bf94 	b.w	8013058 <with_errno>
 8013130:	4770      	bx	lr
 8013132:	bf00      	nop
 8013134:	f3af 8000 	nop.w
 8013138:	ffffffff 	.word	0xffffffff
 801313c:	7fefffff 	.word	0x7fefffff

08013140 <__kernel_rem_pio2>:
 8013140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013144:	ed2d 8b06 	vpush	{d8-d10}
 8013148:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801314c:	469b      	mov	fp, r3
 801314e:	9001      	str	r0, [sp, #4]
 8013150:	4bbb      	ldr	r3, [pc, #748]	@ (8013440 <__kernel_rem_pio2+0x300>)
 8013152:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8013154:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8013158:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801315c:	f112 0f14 	cmn.w	r2, #20
 8013160:	bfa8      	it	ge
 8013162:	1ed3      	subge	r3, r2, #3
 8013164:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8013168:	bfb8      	it	lt
 801316a:	2300      	movlt	r3, #0
 801316c:	f06f 0517 	mvn.w	r5, #23
 8013170:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8013428 <__kernel_rem_pio2+0x2e8>
 8013174:	bfa4      	itt	ge
 8013176:	2018      	movge	r0, #24
 8013178:	fb93 f3f0 	sdivge	r3, r3, r0
 801317c:	fb03 5505 	mla	r5, r3, r5, r5
 8013180:	eba3 040a 	sub.w	r4, r3, sl
 8013184:	4415      	add	r5, r2
 8013186:	460f      	mov	r7, r1
 8013188:	eb09 060a 	add.w	r6, r9, sl
 801318c:	a81a      	add	r0, sp, #104	@ 0x68
 801318e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8013192:	2200      	movs	r2, #0
 8013194:	42b2      	cmp	r2, r6
 8013196:	dd0e      	ble.n	80131b6 <__kernel_rem_pio2+0x76>
 8013198:	aa1a      	add	r2, sp, #104	@ 0x68
 801319a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801319e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 80131a2:	2600      	movs	r6, #0
 80131a4:	454e      	cmp	r6, r9
 80131a6:	dc25      	bgt.n	80131f4 <__kernel_rem_pio2+0xb4>
 80131a8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8013428 <__kernel_rem_pio2+0x2e8>
 80131ac:	f8dd c004 	ldr.w	ip, [sp, #4]
 80131b0:	4614      	mov	r4, r2
 80131b2:	2000      	movs	r0, #0
 80131b4:	e015      	b.n	80131e2 <__kernel_rem_pio2+0xa2>
 80131b6:	42d4      	cmn	r4, r2
 80131b8:	d409      	bmi.n	80131ce <__kernel_rem_pio2+0x8e>
 80131ba:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 80131be:	ee07 1a90 	vmov	s15, r1
 80131c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80131c6:	eca0 7b02 	vstmia	r0!, {d7}
 80131ca:	3201      	adds	r2, #1
 80131cc:	e7e2      	b.n	8013194 <__kernel_rem_pio2+0x54>
 80131ce:	eeb0 7b46 	vmov.f64	d7, d6
 80131d2:	e7f8      	b.n	80131c6 <__kernel_rem_pio2+0x86>
 80131d4:	ecbc 5b02 	vldmia	ip!, {d5}
 80131d8:	ed94 6b00 	vldr	d6, [r4]
 80131dc:	3001      	adds	r0, #1
 80131de:	eea5 7b06 	vfma.f64	d7, d5, d6
 80131e2:	4550      	cmp	r0, sl
 80131e4:	f1a4 0408 	sub.w	r4, r4, #8
 80131e8:	ddf4      	ble.n	80131d4 <__kernel_rem_pio2+0x94>
 80131ea:	ecae 7b02 	vstmia	lr!, {d7}
 80131ee:	3601      	adds	r6, #1
 80131f0:	3208      	adds	r2, #8
 80131f2:	e7d7      	b.n	80131a4 <__kernel_rem_pio2+0x64>
 80131f4:	aa06      	add	r2, sp, #24
 80131f6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8013430 <__kernel_rem_pio2+0x2f0>
 80131fa:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8013438 <__kernel_rem_pio2+0x2f8>
 80131fe:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8013202:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8013206:	9203      	str	r2, [sp, #12]
 8013208:	9302      	str	r3, [sp, #8]
 801320a:	464c      	mov	r4, r9
 801320c:	00e3      	lsls	r3, r4, #3
 801320e:	9304      	str	r3, [sp, #16]
 8013210:	ab92      	add	r3, sp, #584	@ 0x248
 8013212:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013216:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801321a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801321c:	ab06      	add	r3, sp, #24
 801321e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013222:	461e      	mov	r6, r3
 8013224:	4620      	mov	r0, r4
 8013226:	2800      	cmp	r0, #0
 8013228:	f1a2 0208 	sub.w	r2, r2, #8
 801322c:	dc4a      	bgt.n	80132c4 <__kernel_rem_pio2+0x184>
 801322e:	4628      	mov	r0, r5
 8013230:	9305      	str	r3, [sp, #20]
 8013232:	f000 fa01 	bl	8013638 <scalbn>
 8013236:	eeb0 8b40 	vmov.f64	d8, d0
 801323a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801323e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8013242:	f7ff fc85 	bl	8012b50 <floor>
 8013246:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801324a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801324e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8013252:	2d00      	cmp	r5, #0
 8013254:	ee17 8a90 	vmov	r8, s15
 8013258:	9b05      	ldr	r3, [sp, #20]
 801325a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801325e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8013262:	dd41      	ble.n	80132e8 <__kernel_rem_pio2+0x1a8>
 8013264:	1e60      	subs	r0, r4, #1
 8013266:	aa06      	add	r2, sp, #24
 8013268:	f1c5 0c18 	rsb	ip, r5, #24
 801326c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8013270:	fa46 f20c 	asr.w	r2, r6, ip
 8013274:	4490      	add	r8, r2
 8013276:	fa02 f20c 	lsl.w	r2, r2, ip
 801327a:	1ab6      	subs	r6, r6, r2
 801327c:	aa06      	add	r2, sp, #24
 801327e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8013282:	f1c5 0217 	rsb	r2, r5, #23
 8013286:	4116      	asrs	r6, r2
 8013288:	2e00      	cmp	r6, #0
 801328a:	dd3c      	ble.n	8013306 <__kernel_rem_pio2+0x1c6>
 801328c:	f04f 0c00 	mov.w	ip, #0
 8013290:	f108 0801 	add.w	r8, r8, #1
 8013294:	4660      	mov	r0, ip
 8013296:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801329a:	4564      	cmp	r4, ip
 801329c:	dc66      	bgt.n	801336c <__kernel_rem_pio2+0x22c>
 801329e:	2d00      	cmp	r5, #0
 80132a0:	dd03      	ble.n	80132aa <__kernel_rem_pio2+0x16a>
 80132a2:	2d01      	cmp	r5, #1
 80132a4:	d072      	beq.n	801338c <__kernel_rem_pio2+0x24c>
 80132a6:	2d02      	cmp	r5, #2
 80132a8:	d07a      	beq.n	80133a0 <__kernel_rem_pio2+0x260>
 80132aa:	2e02      	cmp	r6, #2
 80132ac:	d12b      	bne.n	8013306 <__kernel_rem_pio2+0x1c6>
 80132ae:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80132b2:	ee30 8b48 	vsub.f64	d8, d0, d8
 80132b6:	b330      	cbz	r0, 8013306 <__kernel_rem_pio2+0x1c6>
 80132b8:	4628      	mov	r0, r5
 80132ba:	f000 f9bd 	bl	8013638 <scalbn>
 80132be:	ee38 8b40 	vsub.f64	d8, d8, d0
 80132c2:	e020      	b.n	8013306 <__kernel_rem_pio2+0x1c6>
 80132c4:	ee20 7b09 	vmul.f64	d7, d0, d9
 80132c8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80132cc:	3801      	subs	r0, #1
 80132ce:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80132d2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80132d6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80132da:	eca6 0a01 	vstmia	r6!, {s0}
 80132de:	ed92 0b00 	vldr	d0, [r2]
 80132e2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80132e6:	e79e      	b.n	8013226 <__kernel_rem_pio2+0xe6>
 80132e8:	d105      	bne.n	80132f6 <__kernel_rem_pio2+0x1b6>
 80132ea:	1e62      	subs	r2, r4, #1
 80132ec:	a906      	add	r1, sp, #24
 80132ee:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80132f2:	15f6      	asrs	r6, r6, #23
 80132f4:	e7c8      	b.n	8013288 <__kernel_rem_pio2+0x148>
 80132f6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80132fa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80132fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013302:	da31      	bge.n	8013368 <__kernel_rem_pio2+0x228>
 8013304:	2600      	movs	r6, #0
 8013306:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801330e:	f040 809b 	bne.w	8013448 <__kernel_rem_pio2+0x308>
 8013312:	1e62      	subs	r2, r4, #1
 8013314:	2000      	movs	r0, #0
 8013316:	454a      	cmp	r2, r9
 8013318:	da49      	bge.n	80133ae <__kernel_rem_pio2+0x26e>
 801331a:	2800      	cmp	r0, #0
 801331c:	d062      	beq.n	80133e4 <__kernel_rem_pio2+0x2a4>
 801331e:	3c01      	subs	r4, #1
 8013320:	ab06      	add	r3, sp, #24
 8013322:	3d18      	subs	r5, #24
 8013324:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d0f8      	beq.n	801331e <__kernel_rem_pio2+0x1de>
 801332c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013330:	4628      	mov	r0, r5
 8013332:	f000 f981 	bl	8013638 <scalbn>
 8013336:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8013430 <__kernel_rem_pio2+0x2f0>
 801333a:	1c62      	adds	r2, r4, #1
 801333c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801333e:	00d3      	lsls	r3, r2, #3
 8013340:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8013344:	4622      	mov	r2, r4
 8013346:	2a00      	cmp	r2, #0
 8013348:	f280 80a8 	bge.w	801349c <__kernel_rem_pio2+0x35c>
 801334c:	4622      	mov	r2, r4
 801334e:	2a00      	cmp	r2, #0
 8013350:	f2c0 80c6 	blt.w	80134e0 <__kernel_rem_pio2+0x3a0>
 8013354:	a96a      	add	r1, sp, #424	@ 0x1a8
 8013356:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801335a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8013428 <__kernel_rem_pio2+0x2e8>
 801335e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8013444 <__kernel_rem_pio2+0x304>
 8013362:	2000      	movs	r0, #0
 8013364:	1aa1      	subs	r1, r4, r2
 8013366:	e0b0      	b.n	80134ca <__kernel_rem_pio2+0x38a>
 8013368:	2602      	movs	r6, #2
 801336a:	e78f      	b.n	801328c <__kernel_rem_pio2+0x14c>
 801336c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013370:	b948      	cbnz	r0, 8013386 <__kernel_rem_pio2+0x246>
 8013372:	b122      	cbz	r2, 801337e <__kernel_rem_pio2+0x23e>
 8013374:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8013378:	f843 2c04 	str.w	r2, [r3, #-4]
 801337c:	2201      	movs	r2, #1
 801337e:	f10c 0c01 	add.w	ip, ip, #1
 8013382:	4610      	mov	r0, r2
 8013384:	e789      	b.n	801329a <__kernel_rem_pio2+0x15a>
 8013386:	ebae 0202 	sub.w	r2, lr, r2
 801338a:	e7f5      	b.n	8013378 <__kernel_rem_pio2+0x238>
 801338c:	1e62      	subs	r2, r4, #1
 801338e:	ab06      	add	r3, sp, #24
 8013390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013394:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013398:	a906      	add	r1, sp, #24
 801339a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801339e:	e784      	b.n	80132aa <__kernel_rem_pio2+0x16a>
 80133a0:	1e62      	subs	r2, r4, #1
 80133a2:	ab06      	add	r3, sp, #24
 80133a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80133ac:	e7f4      	b.n	8013398 <__kernel_rem_pio2+0x258>
 80133ae:	ab06      	add	r3, sp, #24
 80133b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133b4:	3a01      	subs	r2, #1
 80133b6:	4318      	orrs	r0, r3
 80133b8:	e7ad      	b.n	8013316 <__kernel_rem_pio2+0x1d6>
 80133ba:	3301      	adds	r3, #1
 80133bc:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80133c0:	2800      	cmp	r0, #0
 80133c2:	d0fa      	beq.n	80133ba <__kernel_rem_pio2+0x27a>
 80133c4:	9a04      	ldr	r2, [sp, #16]
 80133c6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 80133ca:	446a      	add	r2, sp
 80133cc:	eb04 000b 	add.w	r0, r4, fp
 80133d0:	a91a      	add	r1, sp, #104	@ 0x68
 80133d2:	1c66      	adds	r6, r4, #1
 80133d4:	3a98      	subs	r2, #152	@ 0x98
 80133d6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80133da:	4423      	add	r3, r4
 80133dc:	42b3      	cmp	r3, r6
 80133de:	da04      	bge.n	80133ea <__kernel_rem_pio2+0x2aa>
 80133e0:	461c      	mov	r4, r3
 80133e2:	e713      	b.n	801320c <__kernel_rem_pio2+0xcc>
 80133e4:	9a03      	ldr	r2, [sp, #12]
 80133e6:	2301      	movs	r3, #1
 80133e8:	e7e8      	b.n	80133bc <__kernel_rem_pio2+0x27c>
 80133ea:	9902      	ldr	r1, [sp, #8]
 80133ec:	f8dd c004 	ldr.w	ip, [sp, #4]
 80133f0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80133f4:	9104      	str	r1, [sp, #16]
 80133f6:	ee07 1a90 	vmov	s15, r1
 80133fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80133fe:	2400      	movs	r4, #0
 8013400:	eca0 7b02 	vstmia	r0!, {d7}
 8013404:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013428 <__kernel_rem_pio2+0x2e8>
 8013408:	4686      	mov	lr, r0
 801340a:	4554      	cmp	r4, sl
 801340c:	dd03      	ble.n	8013416 <__kernel_rem_pio2+0x2d6>
 801340e:	eca2 7b02 	vstmia	r2!, {d7}
 8013412:	3601      	adds	r6, #1
 8013414:	e7e2      	b.n	80133dc <__kernel_rem_pio2+0x29c>
 8013416:	ecbc 5b02 	vldmia	ip!, {d5}
 801341a:	ed3e 6b02 	vldmdb	lr!, {d6}
 801341e:	3401      	adds	r4, #1
 8013420:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013424:	e7f1      	b.n	801340a <__kernel_rem_pio2+0x2ca>
 8013426:	bf00      	nop
	...
 8013434:	3e700000 	.word	0x3e700000
 8013438:	00000000 	.word	0x00000000
 801343c:	41700000 	.word	0x41700000
 8013440:	08015e98 	.word	0x08015e98
 8013444:	08015e58 	.word	0x08015e58
 8013448:	4268      	negs	r0, r5
 801344a:	eeb0 0b48 	vmov.f64	d0, d8
 801344e:	f000 f8f3 	bl	8013638 <scalbn>
 8013452:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8013620 <__kernel_rem_pio2+0x4e0>
 8013456:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801345e:	db17      	blt.n	8013490 <__kernel_rem_pio2+0x350>
 8013460:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8013628 <__kernel_rem_pio2+0x4e8>
 8013464:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013468:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801346c:	aa06      	add	r2, sp, #24
 801346e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8013472:	eea5 0b46 	vfms.f64	d0, d5, d6
 8013476:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801347a:	3518      	adds	r5, #24
 801347c:	ee10 3a10 	vmov	r3, s0
 8013480:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013484:	ee17 3a10 	vmov	r3, s14
 8013488:	3401      	adds	r4, #1
 801348a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801348e:	e74d      	b.n	801332c <__kernel_rem_pio2+0x1ec>
 8013490:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013494:	aa06      	add	r2, sp, #24
 8013496:	ee10 3a10 	vmov	r3, s0
 801349a:	e7f6      	b.n	801348a <__kernel_rem_pio2+0x34a>
 801349c:	a806      	add	r0, sp, #24
 801349e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80134a2:	9001      	str	r0, [sp, #4]
 80134a4:	ee07 0a90 	vmov	s15, r0
 80134a8:	3a01      	subs	r2, #1
 80134aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80134ae:	ee27 7b00 	vmul.f64	d7, d7, d0
 80134b2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80134b6:	ed21 7b02 	vstmdb	r1!, {d7}
 80134ba:	e744      	b.n	8013346 <__kernel_rem_pio2+0x206>
 80134bc:	ecbc 5b02 	vldmia	ip!, {d5}
 80134c0:	ecb5 6b02 	vldmia	r5!, {d6}
 80134c4:	3001      	adds	r0, #1
 80134c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80134ca:	4548      	cmp	r0, r9
 80134cc:	dc01      	bgt.n	80134d2 <__kernel_rem_pio2+0x392>
 80134ce:	4281      	cmp	r1, r0
 80134d0:	daf4      	bge.n	80134bc <__kernel_rem_pio2+0x37c>
 80134d2:	a842      	add	r0, sp, #264	@ 0x108
 80134d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80134d8:	ed81 7b00 	vstr	d7, [r1]
 80134dc:	3a01      	subs	r2, #1
 80134de:	e736      	b.n	801334e <__kernel_rem_pio2+0x20e>
 80134e0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80134e2:	2a02      	cmp	r2, #2
 80134e4:	dc0a      	bgt.n	80134fc <__kernel_rem_pio2+0x3bc>
 80134e6:	2a00      	cmp	r2, #0
 80134e8:	dc2d      	bgt.n	8013546 <__kernel_rem_pio2+0x406>
 80134ea:	d046      	beq.n	801357a <__kernel_rem_pio2+0x43a>
 80134ec:	f008 0007 	and.w	r0, r8, #7
 80134f0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80134f4:	ecbd 8b06 	vpop	{d8-d10}
 80134f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134fc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80134fe:	2a03      	cmp	r2, #3
 8013500:	d1f4      	bne.n	80134ec <__kernel_rem_pio2+0x3ac>
 8013502:	a942      	add	r1, sp, #264	@ 0x108
 8013504:	f1a3 0208 	sub.w	r2, r3, #8
 8013508:	440a      	add	r2, r1
 801350a:	4611      	mov	r1, r2
 801350c:	4620      	mov	r0, r4
 801350e:	2800      	cmp	r0, #0
 8013510:	f1a1 0108 	sub.w	r1, r1, #8
 8013514:	dc52      	bgt.n	80135bc <__kernel_rem_pio2+0x47c>
 8013516:	4621      	mov	r1, r4
 8013518:	2901      	cmp	r1, #1
 801351a:	f1a2 0208 	sub.w	r2, r2, #8
 801351e:	dc5d      	bgt.n	80135dc <__kernel_rem_pio2+0x49c>
 8013520:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8013630 <__kernel_rem_pio2+0x4f0>
 8013524:	aa42      	add	r2, sp, #264	@ 0x108
 8013526:	4413      	add	r3, r2
 8013528:	2c01      	cmp	r4, #1
 801352a:	dc67      	bgt.n	80135fc <__kernel_rem_pio2+0x4bc>
 801352c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8013530:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8013534:	2e00      	cmp	r6, #0
 8013536:	d167      	bne.n	8013608 <__kernel_rem_pio2+0x4c8>
 8013538:	ed87 5b00 	vstr	d5, [r7]
 801353c:	ed87 6b02 	vstr	d6, [r7, #8]
 8013540:	ed87 7b04 	vstr	d7, [r7, #16]
 8013544:	e7d2      	b.n	80134ec <__kernel_rem_pio2+0x3ac>
 8013546:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8013630 <__kernel_rem_pio2+0x4f0>
 801354a:	aa42      	add	r2, sp, #264	@ 0x108
 801354c:	4413      	add	r3, r2
 801354e:	4622      	mov	r2, r4
 8013550:	2a00      	cmp	r2, #0
 8013552:	da24      	bge.n	801359e <__kernel_rem_pio2+0x45e>
 8013554:	b34e      	cbz	r6, 80135aa <__kernel_rem_pio2+0x46a>
 8013556:	eeb1 7b46 	vneg.f64	d7, d6
 801355a:	ed87 7b00 	vstr	d7, [r7]
 801355e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8013562:	aa44      	add	r2, sp, #272	@ 0x110
 8013564:	2301      	movs	r3, #1
 8013566:	ee37 7b46 	vsub.f64	d7, d7, d6
 801356a:	429c      	cmp	r4, r3
 801356c:	da20      	bge.n	80135b0 <__kernel_rem_pio2+0x470>
 801356e:	b10e      	cbz	r6, 8013574 <__kernel_rem_pio2+0x434>
 8013570:	eeb1 7b47 	vneg.f64	d7, d7
 8013574:	ed87 7b02 	vstr	d7, [r7, #8]
 8013578:	e7b8      	b.n	80134ec <__kernel_rem_pio2+0x3ac>
 801357a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8013630 <__kernel_rem_pio2+0x4f0>
 801357e:	aa42      	add	r2, sp, #264	@ 0x108
 8013580:	4413      	add	r3, r2
 8013582:	2c00      	cmp	r4, #0
 8013584:	da05      	bge.n	8013592 <__kernel_rem_pio2+0x452>
 8013586:	b10e      	cbz	r6, 801358c <__kernel_rem_pio2+0x44c>
 8013588:	eeb1 7b47 	vneg.f64	d7, d7
 801358c:	ed87 7b00 	vstr	d7, [r7]
 8013590:	e7ac      	b.n	80134ec <__kernel_rem_pio2+0x3ac>
 8013592:	ed33 6b02 	vldmdb	r3!, {d6}
 8013596:	3c01      	subs	r4, #1
 8013598:	ee37 7b06 	vadd.f64	d7, d7, d6
 801359c:	e7f1      	b.n	8013582 <__kernel_rem_pio2+0x442>
 801359e:	ed33 7b02 	vldmdb	r3!, {d7}
 80135a2:	3a01      	subs	r2, #1
 80135a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80135a8:	e7d2      	b.n	8013550 <__kernel_rem_pio2+0x410>
 80135aa:	eeb0 7b46 	vmov.f64	d7, d6
 80135ae:	e7d4      	b.n	801355a <__kernel_rem_pio2+0x41a>
 80135b0:	ecb2 6b02 	vldmia	r2!, {d6}
 80135b4:	3301      	adds	r3, #1
 80135b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80135ba:	e7d6      	b.n	801356a <__kernel_rem_pio2+0x42a>
 80135bc:	ed91 7b00 	vldr	d7, [r1]
 80135c0:	ed91 5b02 	vldr	d5, [r1, #8]
 80135c4:	3801      	subs	r0, #1
 80135c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80135ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80135ce:	ed81 6b00 	vstr	d6, [r1]
 80135d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80135d6:	ed81 7b02 	vstr	d7, [r1, #8]
 80135da:	e798      	b.n	801350e <__kernel_rem_pio2+0x3ce>
 80135dc:	ed92 7b00 	vldr	d7, [r2]
 80135e0:	ed92 5b02 	vldr	d5, [r2, #8]
 80135e4:	3901      	subs	r1, #1
 80135e6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80135ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80135ee:	ed82 6b00 	vstr	d6, [r2]
 80135f2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80135f6:	ed82 7b02 	vstr	d7, [r2, #8]
 80135fa:	e78d      	b.n	8013518 <__kernel_rem_pio2+0x3d8>
 80135fc:	ed33 6b02 	vldmdb	r3!, {d6}
 8013600:	3c01      	subs	r4, #1
 8013602:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013606:	e78f      	b.n	8013528 <__kernel_rem_pio2+0x3e8>
 8013608:	eeb1 5b45 	vneg.f64	d5, d5
 801360c:	eeb1 6b46 	vneg.f64	d6, d6
 8013610:	ed87 5b00 	vstr	d5, [r7]
 8013614:	eeb1 7b47 	vneg.f64	d7, d7
 8013618:	ed87 6b02 	vstr	d6, [r7, #8]
 801361c:	e790      	b.n	8013540 <__kernel_rem_pio2+0x400>
 801361e:	bf00      	nop
 8013620:	00000000 	.word	0x00000000
 8013624:	41700000 	.word	0x41700000
 8013628:	00000000 	.word	0x00000000
 801362c:	3e700000 	.word	0x3e700000
	...

08013638 <scalbn>:
 8013638:	ee10 1a90 	vmov	r1, s1
 801363c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013640:	b98b      	cbnz	r3, 8013666 <scalbn+0x2e>
 8013642:	ee10 3a10 	vmov	r3, s0
 8013646:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801364a:	4319      	orrs	r1, r3
 801364c:	d00a      	beq.n	8013664 <scalbn+0x2c>
 801364e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013700 <scalbn+0xc8>
 8013652:	4b37      	ldr	r3, [pc, #220]	@ (8013730 <scalbn+0xf8>)
 8013654:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013658:	4298      	cmp	r0, r3
 801365a:	da0b      	bge.n	8013674 <scalbn+0x3c>
 801365c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013708 <scalbn+0xd0>
 8013660:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013664:	4770      	bx	lr
 8013666:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801366a:	4293      	cmp	r3, r2
 801366c:	d107      	bne.n	801367e <scalbn+0x46>
 801366e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013672:	4770      	bx	lr
 8013674:	ee10 1a90 	vmov	r1, s1
 8013678:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801367c:	3b36      	subs	r3, #54	@ 0x36
 801367e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013682:	4290      	cmp	r0, r2
 8013684:	dd0d      	ble.n	80136a2 <scalbn+0x6a>
 8013686:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013710 <scalbn+0xd8>
 801368a:	ee10 3a90 	vmov	r3, s1
 801368e:	eeb0 6b47 	vmov.f64	d6, d7
 8013692:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8013718 <scalbn+0xe0>
 8013696:	2b00      	cmp	r3, #0
 8013698:	fe27 7b05 	vselge.f64	d7, d7, d5
 801369c:	ee27 0b06 	vmul.f64	d0, d7, d6
 80136a0:	4770      	bx	lr
 80136a2:	4418      	add	r0, r3
 80136a4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 80136a8:	4298      	cmp	r0, r3
 80136aa:	dcec      	bgt.n	8013686 <scalbn+0x4e>
 80136ac:	2800      	cmp	r0, #0
 80136ae:	dd0a      	ble.n	80136c6 <scalbn+0x8e>
 80136b0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80136b4:	ec53 2b10 	vmov	r2, r3, d0
 80136b8:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80136bc:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80136c0:	ec43 2b10 	vmov	d0, r2, r3
 80136c4:	4770      	bx	lr
 80136c6:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 80136ca:	da09      	bge.n	80136e0 <scalbn+0xa8>
 80136cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8013708 <scalbn+0xd0>
 80136d0:	ee10 3a90 	vmov	r3, s1
 80136d4:	eeb0 6b47 	vmov.f64	d6, d7
 80136d8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8013720 <scalbn+0xe8>
 80136dc:	2b00      	cmp	r3, #0
 80136de:	e7db      	b.n	8013698 <scalbn+0x60>
 80136e0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80136e4:	ec53 2b10 	vmov	r2, r3, d0
 80136e8:	3036      	adds	r0, #54	@ 0x36
 80136ea:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80136ee:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80136f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013728 <scalbn+0xf0>
 80136f6:	ec43 2b10 	vmov	d0, r2, r3
 80136fa:	e7b1      	b.n	8013660 <scalbn+0x28>
 80136fc:	f3af 8000 	nop.w
 8013700:	00000000 	.word	0x00000000
 8013704:	43500000 	.word	0x43500000
 8013708:	c2f8f359 	.word	0xc2f8f359
 801370c:	01a56e1f 	.word	0x01a56e1f
 8013710:	8800759c 	.word	0x8800759c
 8013714:	7e37e43c 	.word	0x7e37e43c
 8013718:	8800759c 	.word	0x8800759c
 801371c:	fe37e43c 	.word	0xfe37e43c
 8013720:	c2f8f359 	.word	0xc2f8f359
 8013724:	81a56e1f 	.word	0x81a56e1f
 8013728:	00000000 	.word	0x00000000
 801372c:	3c900000 	.word	0x3c900000
 8013730:	ffff3cb0 	.word	0xffff3cb0

08013734 <_init>:
 8013734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013736:	bf00      	nop
 8013738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801373a:	bc08      	pop	{r3}
 801373c:	469e      	mov	lr, r3
 801373e:	4770      	bx	lr

08013740 <_fini>:
 8013740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013742:	bf00      	nop
 8013744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013746:	bc08      	pop	{r3}
 8013748:	469e      	mov	lr, r3
 801374a:	4770      	bx	lr
