
2023D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145d4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002898  08014878  08014878  00015878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017110  08017110  00018110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08017118  08017118  00018118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017120  08017120  00018120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000006c4  24000000  08017124  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00004000  240006e0  080177e8  000196e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ARM.__at_0x38000000 00000190  240046e0  0801b7e8  0001d6e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010cac  24004870  0801b978  0001d870  2**3
                  ALLOC
 10 ._user_heap_stack 00004004  2401551c  0801b978  0001e51c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001d870  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e29  00000000  00000000  0001d89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004846  00000000  00000000  000426c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b48  00000000  00000000  00046f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001530  00000000  00000000  00048a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d76d  00000000  00000000  00049f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027464  00000000  00000000  000876f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017bcb5  00000000  00000000  000aeb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0022a80e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bc0  00000000  00000000  0022a894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00233454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004870 	.word	0x24004870
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801485c 	.word	0x0801485c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004874 	.word	0x24004874
 80002dc:	0801485c 	.word	0x0801485c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 bac6 	b.w	8000934 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f962 	bl	8000678 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__muldc3>:
 80003c0:	ee20 5b02 	vmul.f64	d5, d0, d2
 80003c4:	ee21 4b03 	vmul.f64	d4, d1, d3
 80003c8:	ee35 7b44 	vsub.f64	d7, d5, d4
 80003cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80003d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d4:	ed2d 8b0a 	vpush	{d8-d12}
 80003d8:	ee20 9b03 	vmul.f64	d9, d0, d3
 80003dc:	ee22 8b01 	vmul.f64	d8, d2, d1
 80003e0:	ee39 6b08 	vadd.f64	d6, d9, d8
 80003e4:	d606      	bvs.n	80003f4 <__muldc3+0x34>
 80003e6:	eeb0 0b47 	vmov.f64	d0, d7
 80003ea:	eeb0 1b46 	vmov.f64	d1, d6
 80003ee:	ecbd 8b0a 	vpop	{d8-d12}
 80003f2:	4770      	bx	lr
 80003f4:	eeb4 6b46 	vcmp.f64	d6, d6
 80003f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003fc:	d7f3      	bvc.n	80003e6 <__muldc3+0x26>
 80003fe:	eeb0 bbc0 	vabs.f64	d11, d0
 8000402:	eeb0 cbc1 	vabs.f64	d12, d1
 8000406:	ed9f ab94 	vldr	d10, [pc, #592]	@ 8000658 <__muldc3+0x298>
 800040a:	eeb4 bb4a 	vcmp.f64	d11, d10
 800040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000412:	f300 809d 	bgt.w	8000550 <__muldc3+0x190>
 8000416:	eeb4 cb4a 	vcmp.f64	d12, d10
 800041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041e:	f300 8097 	bgt.w	8000550 <__muldc3+0x190>
 8000422:	2300      	movs	r3, #0
 8000424:	ed9f ab8c 	vldr	d10, [pc, #560]	@ 8000658 <__muldc3+0x298>
 8000428:	eeb0 bbc2 	vabs.f64	d11, d2
 800042c:	eeb0 cbc3 	vabs.f64	d12, d3
 8000430:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000438:	dc48      	bgt.n	80004cc <__muldc3+0x10c>
 800043a:	eeb4 cb4a 	vcmp.f64	d12, d10
 800043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000442:	dc43      	bgt.n	80004cc <__muldc3+0x10c>
 8000444:	bb9b      	cbnz	r3, 80004ae <__muldc3+0xee>
 8000446:	eeb0 5bc5 	vabs.f64	d5, d5
 800044a:	eeb4 5b4a 	vcmp.f64	d5, d10
 800044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000452:	dc14      	bgt.n	800047e <__muldc3+0xbe>
 8000454:	eeb0 4bc4 	vabs.f64	d4, d4
 8000458:	eeb4 4b4a 	vcmp.f64	d4, d10
 800045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000460:	dc0d      	bgt.n	800047e <__muldc3+0xbe>
 8000462:	eeb0 9bc9 	vabs.f64	d9, d9
 8000466:	eeb4 9b4a 	vcmp.f64	d9, d10
 800046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046e:	dc06      	bgt.n	800047e <__muldc3+0xbe>
 8000470:	eeb0 8bc8 	vabs.f64	d8, d8
 8000474:	eeb4 8b4a 	vcmp.f64	d8, d10
 8000478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047c:	ddb3      	ble.n	80003e6 <__muldc3+0x26>
 800047e:	eeb4 0b40 	vcmp.f64	d0, d0
 8000482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000486:	f180 80dc 	bvs.w	8000642 <__muldc3+0x282>
 800048a:	eeb4 1b41 	vcmp.f64	d1, d1
 800048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000492:	f180 80cc 	bvs.w	800062e <__muldc3+0x26e>
 8000496:	eeb4 2b42 	vcmp.f64	d2, d2
 800049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049e:	f180 80bc 	bvs.w	800061a <__muldc3+0x25a>
 80004a2:	eeb4 3b43 	vcmp.f64	d3, d3
 80004a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004aa:	f180 80ac 	bvs.w	8000606 <__muldc3+0x246>
 80004ae:	ee23 7b41 	vnmul.f64	d7, d3, d1
 80004b2:	ee21 1b02 	vmul.f64	d1, d1, d2
 80004b6:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000660 <__muldc3+0x2a0>
 80004ba:	eea0 7b02 	vfma.f64	d7, d0, d2
 80004be:	eea0 1b03 	vfma.f64	d1, d0, d3
 80004c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80004c6:	ee21 6b06 	vmul.f64	d6, d1, d6
 80004ca:	e78c      	b.n	80003e6 <__muldc3+0x26>
 80004cc:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8000658 <__muldc3+0x298>
 80004d0:	eeb4 bb47 	vcmp.f64	d11, d7
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	bfcc      	ite	gt
 80004da:	2301      	movgt	r3, #1
 80004dc:	2300      	movle	r3, #0
 80004de:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000658 <__muldc3+0x298>
 80004e2:	ee07 3a10 	vmov	s14, r3
 80004e6:	eeb4 cb46 	vcmp.f64	d12, d6
 80004ea:	ee12 3a90 	vmov	r3, s5
 80004ee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80004f8:	bfb8      	it	lt
 80004fa:	eeb1 7b47 	vneglt.f64	d7, d7
 80004fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000502:	bfcc      	ite	gt
 8000504:	2301      	movgt	r3, #1
 8000506:	2300      	movle	r3, #0
 8000508:	eeb0 2b47 	vmov.f64	d2, d7
 800050c:	ee07 3a10 	vmov	s14, r3
 8000510:	eeb4 0b40 	vcmp.f64	d0, d0
 8000514:	ee13 3a90 	vmov	r3, s7
 8000518:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800051c:	2b00      	cmp	r3, #0
 800051e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000522:	bfb8      	it	lt
 8000524:	eeb1 7b47 	vneglt.f64	d7, d7
 8000528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052c:	eeb0 3b47 	vmov.f64	d3, d7
 8000530:	d655      	bvs.n	80005de <__muldc3+0x21e>
 8000532:	eeb4 1b41 	vcmp.f64	d1, d1
 8000536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053a:	d7b8      	bvc.n	80004ae <__muldc3+0xee>
 800053c:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000668 <__muldc3+0x2a8>
 8000540:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8000670 <__muldc3+0x2b0>
 8000544:	ee11 3a90 	vmov	r3, s3
 8000548:	2b00      	cmp	r3, #0
 800054a:	fe26 1b07 	vselge.f64	d1, d6, d7
 800054e:	e7ae      	b.n	80004ae <__muldc3+0xee>
 8000550:	ed9f ab41 	vldr	d10, [pc, #260]	@ 8000658 <__muldc3+0x298>
 8000554:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055c:	bfcc      	ite	gt
 800055e:	2301      	movgt	r3, #1
 8000560:	2300      	movle	r3, #0
 8000562:	ee0a 3a10 	vmov	s20, r3
 8000566:	ee10 3a90 	vmov	r3, s1
 800056a:	eeb8 abca 	vcvt.f64.s32	d10, s20
 800056e:	2b00      	cmp	r3, #0
 8000570:	eeb0 abca 	vabs.f64	d10, d10
 8000574:	bfb8      	it	lt
 8000576:	eeb1 ab4a 	vneglt.f64	d10, d10
 800057a:	eeb0 0b4a 	vmov.f64	d0, d10
 800057e:	ed9f ab36 	vldr	d10, [pc, #216]	@ 8000658 <__muldc3+0x298>
 8000582:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	bfcc      	ite	gt
 800058c:	2301      	movgt	r3, #1
 800058e:	2300      	movle	r3, #0
 8000590:	ee0a 3a10 	vmov	s20, r3
 8000594:	eeb4 2b42 	vcmp.f64	d2, d2
 8000598:	ee11 3a90 	vmov	r3, s3
 800059c:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	eeb0 abca 	vabs.f64	d10, d10
 80005a6:	bfb8      	it	lt
 80005a8:	eeb1 ab4a 	vneglt.f64	d10, d10
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	eeb0 1b4a 	vmov.f64	d1, d10
 80005b4:	d61d      	bvs.n	80005f2 <__muldc3+0x232>
 80005b6:	eeb4 3b43 	vcmp.f64	d3, d3
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	bf78      	it	vc
 80005c0:	2301      	movvc	r3, #1
 80005c2:	f5ff af2f 	bvc.w	8000424 <__muldc3+0x64>
 80005c6:	ee13 3a90 	vmov	r3, s7
 80005ca:	ed9f ab29 	vldr	d10, [pc, #164]	@ 8000670 <__muldc3+0x2b0>
 80005ce:	ed9f 3b26 	vldr	d3, [pc, #152]	@ 8000668 <__muldc3+0x2a8>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f04f 0301 	mov.w	r3, #1
 80005d8:	fe23 3b0a 	vselge.f64	d3, d3, d10
 80005dc:	e722      	b.n	8000424 <__muldc3+0x64>
 80005de:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8000668 <__muldc3+0x2a8>
 80005e2:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8000670 <__muldc3+0x2b0>
 80005e6:	ee10 3a90 	vmov	r3, s1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe26 0b07 	vselge.f64	d0, d6, d7
 80005f0:	e79f      	b.n	8000532 <__muldc3+0x172>
 80005f2:	ee12 3a90 	vmov	r3, s5
 80005f6:	ed9f ab1e 	vldr	d10, [pc, #120]	@ 8000670 <__muldc3+0x2b0>
 80005fa:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 8000668 <__muldc3+0x2a8>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe22 2b0a 	vselge.f64	d2, d2, d10
 8000604:	e7d7      	b.n	80005b6 <__muldc3+0x1f6>
 8000606:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000668 <__muldc3+0x2a8>
 800060a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8000670 <__muldc3+0x2b0>
 800060e:	ee13 3a90 	vmov	r3, s7
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe26 3b07 	vselge.f64	d3, d6, d7
 8000618:	e749      	b.n	80004ae <__muldc3+0xee>
 800061a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000668 <__muldc3+0x2a8>
 800061e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000670 <__muldc3+0x2b0>
 8000622:	ee12 3a90 	vmov	r3, s5
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe26 2b07 	vselge.f64	d2, d6, d7
 800062c:	e739      	b.n	80004a2 <__muldc3+0xe2>
 800062e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000668 <__muldc3+0x2a8>
 8000632:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000670 <__muldc3+0x2b0>
 8000636:	ee11 3a90 	vmov	r3, s3
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000640:	e729      	b.n	8000496 <__muldc3+0xd6>
 8000642:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000668 <__muldc3+0x2a8>
 8000646:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8000670 <__muldc3+0x2b0>
 800064a:	ee10 3a90 	vmov	r3, s1
 800064e:	2b00      	cmp	r3, #0
 8000650:	fe26 0b07 	vselge.f64	d0, d6, d7
 8000654:	e719      	b.n	800048a <__muldc3+0xca>
 8000656:	bf00      	nop
 8000658:	ffffffff 	.word	0xffffffff
 800065c:	7fefffff 	.word	0x7fefffff
 8000660:	00000000 	.word	0x00000000
 8000664:	7ff00000 	.word	0x7ff00000
	...
 8000674:	80000000 	.word	0x80000000

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <rev>:
    }
    return A;
}

int rev(int size , int index)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	ed2d 8b02 	vpush	{d8}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
    int k = floor(log2(size)) , reg = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000950:	eeb0 0b47 	vmov.f64	d0, d7
 8000954:	f012 fc90 	bl	8013278 <log>
 8000958:	eeb0 6b40 	vmov.f64	d6, d0
 800095c:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000a18 <rev+0xe0>
 8000960:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000964:	eeb0 0b47 	vmov.f64	d0, d7
 8000968:	f013 f89a 	bl	8013aa0 <floor>
 800096c:	eeb0 7b40 	vmov.f64	d7, d0
 8000970:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000974:	ee17 3a90 	vmov	r3, s15
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
    int ans = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
    for (int i =size/2 ; i>0 ; i/=2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da00      	bge.n	800098a <rev+0x52>
 8000988:	3301      	adds	r3, #1
 800098a:	105b      	asrs	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e036      	b.n	80009fe <rev+0xc6>
    {
        reg = index%2;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
        ans += reg * pow(2 , k - 1) ;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009b4:	eeb0 1b47 	vmov.f64	d1, d7
 80009b8:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 80009bc:	f012 fd84 	bl	80134c8 <pow>
 80009c0:	eeb0 7b40 	vmov.f64	d7, d0
 80009c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009da:	ee17 3a90 	vmov	r3, s15
 80009de:	613b      	str	r3, [r7, #16]
        k--;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
        index/= 2;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da00      	bge.n	80009ee <rev+0xb6>
 80009ec:	3301      	adds	r3, #1
 80009ee:	105b      	asrs	r3, r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
    for (int i =size/2 ; i>0 ; i/=2)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da00      	bge.n	80009fa <rev+0xc2>
 80009f8:	3301      	adds	r3, #1
 80009fa:	105b      	asrs	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dcc5      	bgt.n	8000990 <rev+0x58>
    }
    return ans;
 8000a04:	693b      	ldr	r3, [r7, #16]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	f3af 8000 	nop.w
 8000a18:	fefa39ef 	.word	0xfefa39ef
 8000a1c:	3fe62e42 	.word	0x3fe62e42

08000a20 <FFT>:
    }
    return X;
}

double complex* FFT(int size , double x[])
{
 8000a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	ed2d 8b02 	vpush	{d8}
 8000a28:	b0a9      	sub	sp, #164	@ 0xa4
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	466b      	mov	r3, sp
 8000a32:	461e      	mov	r6, r3
    double complex W[size/2];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <FFT+0x1c>
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	105b      	asrs	r3, r3, #1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	1e4b      	subs	r3, r1, #1
 8000a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a46:	460a      	mov	r2, r1
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	01c3      	lsls	r3, r0, #7
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	01c2      	lsls	r2, r0, #7
 8000a64:	460a      	mov	r2, r1
 8000a66:	2300      	movs	r3, #0
 8000a68:	4692      	mov	sl, r2
 8000a6a:	469b      	mov	fp, r3
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8000a78:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8000a7c:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8000a80:	460b      	mov	r3, r1
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	466b      	mov	r3, sp
 8000a90:	3307      	adds	r3, #7
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    for (int i = 0 ; i < size/2 ; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000aa0:	e049      	b.n	8000b36 <FFT+0x116>
    {
        W[i] = cos(2*M_PI*i/size) + I*sin(2*M_PI*i/size);
 8000aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aae:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8000c50 <FFT+0x230>
 8000ab2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ac0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ac4:	eeb0 0b45 	vmov.f64	d0, d5
 8000ac8:	f012 ff9a 	bl	8013a00 <sin>
 8000acc:	eeb0 8b40 	vmov.f64	d8, d0
 8000ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000adc:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 8000c50 <FFT+0x230>
 8000ae0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000af2:	eeb0 0b45 	vmov.f64	d0, d5
 8000af6:	f012 ff37 	bl	8013968 <cos>
 8000afa:	eeb0 6b40 	vmov.f64	d6, d0
 8000afe:	ed9f 7b56 	vldr	d7, [pc, #344]	@ 8000c58 <FFT+0x238>
 8000b02:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4413      	add	r3, r2
 8000b16:	ed83 7b00 	vstr	d7, [r3]
 8000b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	4413      	add	r3, r2
 8000b26:	3308      	adds	r3, #8
 8000b28:	ed83 8b00 	vstr	d8, [r3]
    for (int i = 0 ; i < size/2 ; i++)
 8000b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <FFT+0x11e>
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	105b      	asrs	r3, r3, #1
 8000b40:	461a      	mov	r2, r3
 8000b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dbab      	blt.n	8000aa2 <FFT+0x82>
    }

    double complex A[size];
 8000b4a:	68f9      	ldr	r1, [r7, #12]
 8000b4c:	1e4b      	subs	r3, r1, #1
 8000b4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b52:	460a      	mov	r2, r1
 8000b54:	2300      	movs	r3, #0
 8000b56:	4690      	mov	r8, r2
 8000b58:	4699      	mov	r9, r3
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000b66:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000b6a:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000b6e:	460a      	mov	r2, r1
 8000b70:	2300      	movs	r3, #0
 8000b72:	4614      	mov	r4, r2
 8000b74:	461d      	mov	r5, r3
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	01eb      	lsls	r3, r5, #7
 8000b80:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000b84:	01e2      	lsls	r2, r4, #7
 8000b86:	460b      	mov	r3, r1
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	3307      	adds	r3, #7
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	ebad 0d03 	sub.w	sp, sp, r3
 8000b94:	466b      	mov	r3, sp
 8000b96:	3307      	adds	r3, #7
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    double complex *X = A;
 8000b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0;i < size ; i ++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ba8:	e027      	b.n	8000bfa <FFT+0x1da>
    {
    	A[i] = x[rev(size,i)] + 0*I;
 8000baa:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff fec2 	bl	8000938 <rev>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	4413      	add	r3, r2
 8000bbc:	ed93 7b00 	vldr	d7, [r3]
 8000bc0:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8000c58 <FFT+0x238>
 8000bc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bc8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	ed83 7b00 	vstr	d7, [r3]
 8000bd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	4413      	add	r3, r2
 8000be0:	f103 0108 	add.w	r1, r3, #8
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0;i < size ; i ++)
 8000bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbd2      	blt.n	8000baa <FFT+0x18a>
    }
    
    int s ,m ,k ,j;
    double complex omega , t, u;

    for(s = 1 ; s <size ; s*=2)
 8000c04:	2301      	movs	r3, #1
 8000c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000c0a:	e0f6      	b.n	8000dfa <FFT+0x3da>
    {
        m = s * 2;
 8000c0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	677b      	str	r3, [r7, #116]	@ 0x74
        for ( k = 0 ; k< size ; k += m)
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000c1a:	e0e3      	b.n	8000de4 <FFT+0x3c4>
        {
            omega = 1;
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <FFT+0x240>)
 8000c22:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
            for (j = 0; j < m/2; j++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <FFT+0x240>)
 8000c4a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000c4e:	e0b8      	b.n	8000dc2 <FFT+0x3a2>
 8000c50:	54442d18 	.word	0x54442d18
 8000c54:	401921fb 	.word	0x401921fb
	...
 8000c60:	3ff00000 	.word	0x3ff00000
            {
                t = omega * A[k+j+m/2];
 8000c64:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c6c:	441a      	add	r2, r3
 8000c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da00      	bge.n	8000c76 <FFT+0x256>
 8000c74:	3301      	adds	r3, #1
 8000c76:	105b      	asrs	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000c7c:	011a      	lsls	r2, r3, #4
 8000c7e:	440a      	add	r2, r1
 8000c80:	ed92 7b00 	vldr	d7, [r2]
 8000c84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	4413      	add	r3, r2
 8000c8a:	ed93 6b02 	vldr	d6, [r3, #8]
 8000c8e:	eeb0 3b46 	vmov.f64	d3, d6
 8000c92:	eeb0 2b47 	vmov.f64	d2, d7
 8000c96:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000c9a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000c9e:	f7ff fb8f 	bl	80003c0 <__muldc3>
 8000ca2:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 8000ca6:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 8000caa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000cb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
                u = A[k+j];
 8000cba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cc2:	18d1      	adds	r1, r2, r3
 8000cc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cc6:	010b      	lsls	r3, r1, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cd4:	010b      	lsls	r3, r1, #4
 8000cd6:	4413      	add	r3, r2
 8000cd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ce4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ce8:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8000cec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
                A[k+j] = u + t;
 8000cf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cf8:	4413      	add	r3, r2
 8000cfa:	ed97 6b06 	vldr	d6, [r7, #24]
 8000cfe:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d02:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d06:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d0a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d0e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d14:	011a      	lsls	r2, r3, #4
 8000d16:	440a      	add	r2, r1
 8000d18:	ed82 6b00 	vstr	d6, [r2]
 8000d1c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4413      	add	r3, r2
 8000d22:	3308      	adds	r3, #8
 8000d24:	ed83 7b00 	vstr	d7, [r3]
                A[k+j+m/2] = u - t;
 8000d28:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d30:	441a      	add	r2, r3
 8000d32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da00      	bge.n	8000d3a <FFT+0x31a>
 8000d38:	3301      	adds	r3, #1
 8000d3a:	105b      	asrs	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d42:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d4a:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d4e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d58:	011a      	lsls	r2, r3, #4
 8000d5a:	440a      	add	r2, r1
 8000d5c:	ed82 6b00 	vstr	d6, [r2]
 8000d60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4413      	add	r3, r2
 8000d66:	3308      	adds	r3, #8
 8000d68:	ed83 7b00 	vstr	d7, [r3]
                omega = omega * W[size/m];
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d74:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000d78:	011a      	lsls	r2, r3, #4
 8000d7a:	440a      	add	r2, r1
 8000d7c:	ed92 7b00 	vldr	d7, [r2]
 8000d80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	4413      	add	r3, r2
 8000d88:	ed93 6b02 	vldr	d6, [r3, #8]
 8000d8c:	eeb0 3b46 	vmov.f64	d3, d6
 8000d90:	eeb0 2b47 	vmov.f64	d2, d7
 8000d94:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000d98:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000d9c:	f7ff fb10 	bl	80003c0 <__muldc3>
 8000da0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8000da4:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8000da8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000dac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000db0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000db4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            for (j = 0; j < m/2; j++)
 8000db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da00      	bge.n	8000dca <FFT+0x3aa>
 8000dc8:	3301      	adds	r3, #1
 8000dca:	105b      	asrs	r3, r3, #1
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f6ff af46 	blt.w	8000c64 <FFT+0x244>
        for ( k = 0 ; k< size ; k += m)
 8000dd8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000ddc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dde:	4413      	add	r3, r2
 8000de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000de4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	f6ff af16 	blt.w	8000c1c <FFT+0x1fc>
    for(s = 1 ; s <size ; s*=2)
 8000df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f6ff af03 	blt.w	8000c0c <FFT+0x1ec>
            } 
        }
    }
    return X;
 8000e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e08:	46b5      	mov	sp, r6

}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	37a4      	adds	r7, #164	@ 0xa4
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	ecbd 8b02 	vpop	{d8}
 8000e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e18 <FFT_Mag_sqrt>:
    }
}


void FFT_Mag_sqrt(int size , double x[])
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    double complex* X = FFT(size , x);
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fdfb 	bl	8000a20 <FFT>
 8000e2a:	60b8      	str	r0, [r7, #8]
    for (int i = 0 ; i < size ; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	e01c      	b.n	8000e6c <FFT_Mag_sqrt+0x54>
    {
        x[i] = cabs(X[i]);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	4413      	add	r3, r2
 8000e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e42:	68fc      	ldr	r4, [r7, #12]
 8000e44:	00e4      	lsls	r4, r4, #3
 8000e46:	683d      	ldr	r5, [r7, #0]
 8000e48:	442c      	add	r4, r5
 8000e4a:	ec41 0b16 	vmov	d6, r0, r1
 8000e4e:	ec43 2b17 	vmov	d7, r2, r3
 8000e52:	eeb0 0b46 	vmov.f64	d0, d6
 8000e56:	eeb0 1b47 	vmov.f64	d1, d7
 8000e5a:	f012 f9f1 	bl	8013240 <cabs>
 8000e5e:	eeb0 7b40 	vmov.f64	d7, d0
 8000e62:	ed84 7b00 	vstr	d7, [r4]
    for (int i = 0 ; i < size ; i++)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbde      	blt.n	8000e32 <FFT_Mag_sqrt+0x1a>
    }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e80 <Hamming>:
    }
}


void Hamming(int size , int left , int right , double para , double x[])
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	ed2d 8b04 	vpush	{d8-d9}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6178      	str	r0, [r7, #20]
 8000e8c:	6139      	str	r1, [r7, #16]
 8000e8e:	60fa      	str	r2, [r7, #12]
 8000e90:	ed87 0b00 	vstr	d0, [r7]
 8000e94:	60bb      	str	r3, [r7, #8]

    for (int i = 0 ; i < size ; i++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	e04e      	b.n	8000f3a <Hamming+0xba>
    {
    	if (i < right && i >=  left)
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	da3d      	bge.n	8000f20 <Hamming+0xa0>
 8000ea4:	69fa      	ldr	r2, [r7, #28]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	db39      	blt.n	8000f20 <Hamming+0xa0>
    	{
    		x[i] = 10* x[i] * ((1 - para) - para* cos(2*M_PI*(i - left )/(right - left - 1)));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	68ba      	ldr	r2, [r7, #8]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	ed93 7b00 	vldr	d7, [r3]
 8000eb8:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000ebc:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000ec0:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8000ec4:	ed97 7b00 	vldr	d7, [r7]
 8000ec8:	ee36 9b47 	vsub.f64	d9, d6, d7
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000eda:	ed9f 6b1d 	vldr	d6, [pc, #116]	@ 8000f50 <Hamming+0xd0>
 8000ede:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ef2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ef6:	eeb0 0b45 	vmov.f64	d0, d5
 8000efa:	f012 fd35 	bl	8013968 <cos>
 8000efe:	eeb0 6b40 	vmov.f64	d6, d0
 8000f02:	ed97 7b00 	vldr	d7, [r7]
 8000f06:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000f0a:	ee39 7b47 	vsub.f64	d7, d9, d7
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4413      	add	r3, r2
 8000f16:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000f1a:	ed83 7b00 	vstr	d7, [r3]
 8000f1e:	e009      	b.n	8000f34 <Hamming+0xb4>
    	}
    	else
    	{
    		x[i] = 0;
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	18d1      	adds	r1, r2, r3
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0 ; i < size ; i++)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	3301      	adds	r3, #1
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	dbac      	blt.n	8000e9c <Hamming+0x1c>
    	}
    }
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	ecbd 8b04 	vpop	{d8-d9}
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	54442d18 	.word	0x54442d18
 8000f54:	401921fb 	.word	0x401921fb

08000f58 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f7c:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000f7e:	4a31      	ldr	r2, [pc, #196]	@ (8001044 <MX_ADC1_Init+0xec>)
 8000f80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f82:	4b2f      	ldr	r3, [pc, #188]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f94:	4b2a      	ldr	r3, [pc, #168]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000f96:	2204      	movs	r2, #4
 8000f98:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fac:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000fb4:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8000fb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fba:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000fbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fdc:	4818      	ldr	r0, [pc, #96]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000fde:	f002 f9e9 	bl	80033b4 <HAL_ADC_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000fe8:	f001 fae0 	bl	80025ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4812      	ldr	r0, [pc, #72]	@ (8001040 <MX_ADC1_Init+0xe8>)
 8000ff8:	f003 fd2a 	bl	8004a50 <HAL_ADCEx_MultiModeConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001002:	f001 fad3 	bl	80025ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <MX_ADC1_Init+0xf0>)
 8001008:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100a:	2306      	movs	r3, #6
 800100c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800100e:	2306      	movs	r3, #6
 8001010:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001012:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001016:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001018:	2304      	movs	r3, #4
 800101a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_ADC1_Init+0xe8>)
 800102a:	f002 fdbd 	bl	8003ba8 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001034:	f001 faba 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	@ 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2400488c 	.word	0x2400488c
 8001044:	40022000 	.word	0x40022000
 8001048:	0c900008 	.word	0x0c900008

0800104c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0bc      	sub	sp, #240	@ 0xf0
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	22c0      	movs	r2, #192	@ 0xc0
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00e fd35 	bl	800fadc <memset>
  if(adcHandle->Instance==ADC1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a53      	ldr	r2, [pc, #332]	@ (80011c4 <HAL_ADC_MspInit+0x178>)
 8001078:	4293      	cmp	r3, r2
 800107a:	f040 809e 	bne.w	80011ba <HAL_ADC_MspInit+0x16e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800107e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 10;
 800108a:	230a      	movs	r3, #10
 800108c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 384;
 800108e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 6;
 8001094:	2306      	movs	r3, #6
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001098:	2302      	movs	r3, #2
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800109c:	2302      	movs	r3, #2
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80010a0:	2340      	movs	r3, #64	@ 0x40
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	4618      	mov	r0, r3
 80010b8:	f008 fe18 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 80010c2:	f001 fa73 	bl	80025ac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010c6:	4b40      	ldr	r3, [pc, #256]	@ (80011c8 <HAL_ADC_MspInit+0x17c>)
 80010c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010cc:	4a3e      	ldr	r2, [pc, #248]	@ (80011c8 <HAL_ADC_MspInit+0x17c>)
 80010ce:	f043 0320 	orr.w	r3, r3, #32
 80010d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010d6:	4b3c      	ldr	r3, [pc, #240]	@ (80011c8 <HAL_ADC_MspInit+0x17c>)
 80010d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b38      	ldr	r3, [pc, #224]	@ (80011c8 <HAL_ADC_MspInit+0x17c>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ea:	4a37      	ldr	r2, [pc, #220]	@ (80011c8 <HAL_ADC_MspInit+0x17c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f4:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <HAL_ADC_MspInit+0x17c>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b31      	ldr	r3, [pc, #196]	@ (80011c8 <HAL_ADC_MspInit+0x17c>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001108:	4a2f      	ldr	r2, [pc, #188]	@ (80011c8 <HAL_ADC_MspInit+0x17c>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001112:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <HAL_ADC_MspInit+0x17c>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001120:	2340      	movs	r3, #64	@ 0x40
 8001122:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001136:	4619      	mov	r1, r3
 8001138:	4824      	ldr	r0, [pc, #144]	@ (80011cc <HAL_ADC_MspInit+0x180>)
 800113a:	f007 f9b9 	bl	80084b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800113e:	2310      	movs	r3, #16
 8001140:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001144:	2303      	movs	r3, #3
 8001146:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001150:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001154:	4619      	mov	r1, r3
 8001156:	481e      	ldr	r0, [pc, #120]	@ (80011d0 <HAL_ADC_MspInit+0x184>)
 8001158:	f007 f9aa 	bl	80084b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 800115e:	4a1e      	ldr	r2, [pc, #120]	@ (80011d8 <HAL_ADC_MspInit+0x18c>)
 8001160:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001162:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 8001164:	2209      	movs	r2, #9
 8001166:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 8001176:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800117a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 800117e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001182:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 8001186:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800118a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800119e:	480d      	ldr	r0, [pc, #52]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 80011a0:	f004 f994 	bl	80054cc <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_ADC_MspInit+0x162>
    {
      Error_Handler();
 80011aa:	f001 f9ff 	bl	80025ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a08      	ldr	r2, [pc, #32]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 80011b2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011b4:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <HAL_ADC_MspInit+0x188>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	37f0      	adds	r7, #240	@ 0xf0
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000
 80011c8:	58024400 	.word	0x58024400
 80011cc:	58020000 	.word	0x58020000
 80011d0:	58020800 	.word	0x58020800
 80011d4:	240048f0 	.word	0x240048f0
 80011d8:	40020010 	.word	0x40020010

080011dc <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001220 <HAL_ADC_MspDeInit+0x44>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d114      	bne.n	8001218 <HAL_ADC_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <HAL_ADC_MspDeInit+0x48>)
 80011f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <HAL_ADC_MspDeInit+0x48>)
 80011f6:	f023 0320 	bic.w	r3, r3, #32
 80011fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 80011fe:	2140      	movs	r1, #64	@ 0x40
 8001200:	4809      	ldr	r0, [pc, #36]	@ (8001228 <HAL_ADC_MspDeInit+0x4c>)
 8001202:	f007 fb05 	bl	8008810 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4);
 8001206:	2110      	movs	r1, #16
 8001208:	4808      	ldr	r0, [pc, #32]	@ (800122c <HAL_ADC_MspDeInit+0x50>)
 800120a:	f007 fb01 	bl	8008810 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	4618      	mov	r0, r3
 8001214:	f004 fcb6 	bl	8005b84 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40022000 	.word	0x40022000
 8001224:	58024400 	.word	0x58024400
 8001228:	58020000 	.word	0x58020000
 800122c:	58020800 	.word	0x58020800

08001230 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2224      	movs	r2, #36	@ 0x24
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f00e fc4d 	bl	800fadc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_DAC1_Init+0x5c>)
 8001244:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <MX_DAC1_Init+0x60>)
 8001246:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001248:	4810      	ldr	r0, [pc, #64]	@ (800128c <MX_DAC1_Init+0x5c>)
 800124a:	f003 fe6b 	bl	8004f24 <HAL_DAC_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001254:	f001 f9aa 	bl	80025ac <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800125c:	2316      	movs	r3, #22
 800125e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001260:	2302      	movs	r3, #2
 8001262:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001264:	2301      	movs	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2210      	movs	r2, #16
 8001270:	4619      	mov	r1, r3
 8001272:	4806      	ldr	r0, [pc, #24]	@ (800128c <MX_DAC1_Init+0x5c>)
 8001274:	f003 ff62 	bl	800513c <HAL_DAC_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800127e:	f001 f995 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	@ 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	24004968 	.word	0x24004968
 8001290:	40007400 	.word	0x40007400

08001294 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a30      	ldr	r2, [pc, #192]	@ (8001374 <HAL_DAC_MspInit+0xe0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d159      	bne.n	800136a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80012b6:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <HAL_DAC_MspInit+0xe4>)
 80012b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012bc:	4a2e      	ldr	r2, [pc, #184]	@ (8001378 <HAL_DAC_MspInit+0xe4>)
 80012be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80012c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001378 <HAL_DAC_MspInit+0xe4>)
 80012c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <HAL_DAC_MspInit+0xe4>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	4a27      	ldr	r2, [pc, #156]	@ (8001378 <HAL_DAC_MspInit+0xe4>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e4:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <HAL_DAC_MspInit+0xe4>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012f2:	2320      	movs	r3, #32
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f6:	2303      	movs	r3, #3
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	481d      	ldr	r0, [pc, #116]	@ (800137c <HAL_DAC_MspInit+0xe8>)
 8001306:	f007 f8d3 	bl	80084b0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 800130c:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <HAL_DAC_MspInit+0xf0>)
 800130e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001310:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 8001312:	2244      	movs	r2, #68	@ 0x44
 8001314:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 8001318:	2240      	movs	r2, #64	@ 0x40
 800131a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 8001324:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001328:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 800132c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001330:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001332:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 8001334:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001338:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 800133c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001340:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001348:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800134e:	480c      	ldr	r0, [pc, #48]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 8001350:	f004 f8bc 	bl	80054cc <HAL_DMA_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800135a:	f001 f927 	bl	80025ac <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a07      	ldr	r2, [pc, #28]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	4a06      	ldr	r2, [pc, #24]	@ (8001380 <HAL_DAC_MspInit+0xec>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	@ 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40007400 	.word	0x40007400
 8001378:	58024400 	.word	0x58024400
 800137c:	58020000 	.word	0x58020000
 8001380:	2400497c 	.word	0x2400497c
 8001384:	40020028 	.word	0x40020028

08001388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_DMA_Init+0x4c>)
 8001390:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001394:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <MX_DMA_Init+0x4c>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <MX_DMA_Init+0x4c>)
 80013a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	200b      	movs	r0, #11
 80013b2:	f003 fd06 	bl	8004dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013b6:	200b      	movs	r0, #11
 80013b8:	f003 fd1d 	bl	8004df6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	200c      	movs	r0, #12
 80013c2:	f003 fcfe 	bl	8004dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013c6:	200c      	movs	r0, #12
 80013c8:	f003 fd15 	bl	8004df6 <HAL_NVIC_EnableIRQ>

}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	58024400 	.word	0x58024400

080013d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	4b39      	ldr	r3, [pc, #228]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f4:	4a37      	ldr	r2, [pc, #220]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 80013f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fe:	4b35      	ldr	r3, [pc, #212]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001412:	4a30      	ldr	r2, [pc, #192]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800141c:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142a:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001430:	4a28      	ldr	r2, [pc, #160]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800143a:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144e:	4a21      	ldr	r2, [pc, #132]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001458:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001466:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146c:	4a19      	ldr	r2, [pc, #100]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 800146e:	f043 0308 	orr.w	r3, r3, #8
 8001472:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <MX_GPIO_Init+0xfc>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2
 8001484:	2200      	movs	r2, #0
 8001486:	f24c 011e 	movw	r1, #49182	@ 0xc01e
 800148a:	4813      	ldr	r0, [pc, #76]	@ (80014d8 <MX_GPIO_Init+0x100>)
 800148c:	f007 faca 	bl	8008a24 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001490:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <MX_GPIO_Init+0x100>)
 80014aa:	f007 f801 	bl	80084b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80014ae:	231e      	movs	r3, #30
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	2302      	movs	r3, #2
 80014bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <MX_GPIO_Init+0x100>)
 80014c6:	f006 fff3 	bl	80084b0 <HAL_GPIO_Init>

}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	@ 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	58024400 	.word	0x58024400
 80014d8:	58020c00 	.word	0x58020c00

080014dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <MX_I2C1_Init+0x74>)
 80014e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <MX_I2C1_Init+0x78>)
 80014e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_I2C1_Init+0x74>)
 80014e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001558 <MX_I2C1_Init+0x7c>)
 80014ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014ec:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <MX_I2C1_Init+0x74>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f8:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014fe:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_I2C1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_I2C1_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <MX_I2C1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001516:	480e      	ldr	r0, [pc, #56]	@ (8001550 <MX_I2C1_Init+0x74>)
 8001518:	f007 fa9e 	bl	8008a58 <HAL_I2C_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001522:	f001 f843 	bl	80025ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001526:	2100      	movs	r1, #0
 8001528:	4809      	ldr	r0, [pc, #36]	@ (8001550 <MX_I2C1_Init+0x74>)
 800152a:	f007 fb25 	bl	8008b78 <HAL_I2CEx_ConfigAnalogFilter>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001534:	f001 f83a 	bl	80025ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001538:	2100      	movs	r1, #0
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_I2C1_Init+0x74>)
 800153c:	f007 fb67 	bl	8008c0e <HAL_I2CEx_ConfigDigitalFilter>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001546:	f001 f831 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	240049f4 	.word	0x240049f4
 8001554:	40005400 	.word	0x40005400
 8001558:	00b03fdb 	.word	0x00b03fdb

0800155c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0ba      	sub	sp, #232	@ 0xe8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	22c0      	movs	r2, #192	@ 0xc0
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f00e faad 	bl	800fadc <memset>
  if(i2cHandle->Instance==I2C1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a26      	ldr	r2, [pc, #152]	@ (8001620 <HAL_I2C_MspInit+0xc4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d145      	bne.n	8001618 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800158c:	f04f 0208 	mov.w	r2, #8
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	4618      	mov	r0, r3
 80015a4:	f008 fba2 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80015ae:	f000 fffd 	bl	80025ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 80015ba:	f043 0302 	orr.w	r3, r3, #2
 80015be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 80015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015d0:	23c0      	movs	r3, #192	@ 0xc0
 80015d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d6:	2312      	movs	r3, #18
 80015d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e8:	2304      	movs	r3, #4
 80015ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015f2:	4619      	mov	r1, r3
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <HAL_I2C_MspInit+0xcc>)
 80015f6:	f006 ff5b 	bl	80084b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 80015fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001600:	4a08      	ldr	r2, [pc, #32]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 8001602:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001606:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 800160c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001618:	bf00      	nop
 800161a:	37e8      	adds	r7, #232	@ 0xe8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40005400 	.word	0x40005400
 8001624:	58024400 	.word	0x58024400
 8001628:	58020400 	.word	0x58020400
 800162c:	00000000 	.word	0x00000000

08001630 <Analog_Judge>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"

int Analog_Judge(double x[], double v[])
{
 8001630:	b580      	push	{r7, lr}
 8001632:	f5ad 5dc3 	sub.w	sp, sp, #6240	@ 0x1860
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 800163e:	f6a3 0374 	subw	r3, r3, #2164	@ 0x874
 8001642:	6018      	str	r0, [r3, #0]
 8001644:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001648:	f6a3 0378 	subw	r3, r3, #2168	@ 0x878
 800164c:	6019      	str	r1, [r3, #0]
    double bands[FO_LENGTH / 16];
    int bands_idx[FO_LENGTH / 16];
    double bands_sum = 0;
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	f641 0170 	movw	r1, #6256	@ 0x1870
 800165a:	4439      	add	r1, r7
 800165c:	e9c1 2300 	strd	r2, r3, [r1]
    int main_band_idx = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	f641 026c 	movw	r2, #6252	@ 0x186c
 8001666:	443a      	add	r2, r7
 8001668:	6013      	str	r3, [r2, #0]
    int n_bands = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	f641 0268 	movw	r2, #6248	@ 0x1868
 8001670:	443a      	add	r2, r7
 8001672:	6013      	str	r3, [r2, #0]
    int bands_gap = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	f641 0248 	movw	r2, #6216	@ 0x1848
 800167a:	443a      	add	r2, r7
 800167c:	6013      	str	r3, [r2, #0]
    char str[50];


    // This can be optimized with specific threshold
    double main_band = 0;
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	f507 51c3 	add.w	r1, r7, #6240	@ 0x1860
 800168a:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 100; i < FO_LENGTH / 2 - 100; i++)
 800168e:	2364      	movs	r3, #100	@ 0x64
 8001690:	f641 025c 	movw	r2, #6236	@ 0x185c
 8001694:	443a      	add	r2, r7
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e037      	b.n	800170a <Analog_Judge+0xda>
    {
        if (x[i] > main_band)
 800169a:	f641 035c 	movw	r3, #6236	@ 0x185c
 800169e:	443b      	add	r3, r7
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80016a8:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	ed93 7b00 	vldr	d7, [r3]
 80016b4:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 80016b8:	ed93 6b00 	vldr	d6, [r3]
 80016bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	d518      	bpl.n	80016f8 <Analog_Judge+0xc8>
        {
            main_band = x[i];
 80016c6:	f641 035c 	movw	r3, #6236	@ 0x185c
 80016ca:	443b      	add	r3, r7
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80016d4:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f507 51c3 	add.w	r1, r7, #6240	@ 0x1860
 80016e4:	e9c1 2300 	strd	r2, r3, [r1]
            main_band_idx = i;
 80016e8:	f641 035c 	movw	r3, #6236	@ 0x185c
 80016ec:	443b      	add	r3, r7
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f641 026c 	movw	r2, #6252	@ 0x186c
 80016f4:	443a      	add	r2, r7
 80016f6:	6013      	str	r3, [r2, #0]
    for (int i = 100; i < FO_LENGTH / 2 - 100; i++)
 80016f8:	f641 035c 	movw	r3, #6236	@ 0x185c
 80016fc:	443b      	add	r3, r7
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	f641 025c 	movw	r2, #6236	@ 0x185c
 8001706:	443a      	add	r2, r7
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	f641 035c 	movw	r3, #6236	@ 0x185c
 800170e:	443b      	add	r3, r7
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f640 729b 	movw	r2, #3995	@ 0xf9b
 8001716:	4293      	cmp	r3, r2
 8001718:	ddbf      	ble.n	800169a <Analog_Judge+0x6a>
        }
    }
    double threshold = main_band * 0.1;
 800171a:	f507 53c3 	add.w	r3, r7, #6240	@ 0x1860
 800171e:	ed93 7b00 	vldr	d7, [r3]
 8001722:	ed9f 6b79 	vldr	d6, [pc, #484]	@ 8001908 <Analog_Judge+0x2d8>
 8001726:	ee27 7b06 	vmul.f64	d7, d7, d6
 800172a:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 800172e:	ed83 7b00 	vstr	d7, [r3]
    
    for(int i = main_band_idx - FO_LENGTH / 16; i < main_band_idx +  FO_LENGTH / 16 ; i++)
 8001732:	f641 036c 	movw	r3, #6252	@ 0x186c
 8001736:	443b      	add	r3, r7
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800173e:	f641 0258 	movw	r2, #6232	@ 0x1858
 8001742:	443a      	add	r2, r7
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e0ca      	b.n	80018de <Analog_Judge+0x2ae>
    {
        if(x[i] > threshold && x[i] > 20)
 8001748:	f641 0358 	movw	r3, #6232	@ 0x1858
 800174c:	443b      	add	r3, r7
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001756:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	4413      	add	r3, r2
 800175e:	ed93 7b00 	vldr	d7, [r3]
 8001762:	f507 53c2 	add.w	r3, r7, #6208	@ 0x1840
 8001766:	ed93 6b00 	vldr	d6, [r3]
 800176a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	f140 80ab 	bpl.w	80018cc <Analog_Judge+0x29c>
 8001776:	f641 0358 	movw	r3, #6232	@ 0x1858
 800177a:	443b      	add	r3, r7
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001784:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	4413      	add	r3, r2
 800178c:	ed93 7b00 	vldr	d7, [r3]
 8001790:	eeb3 6b04 	vmov.f64	d6, #52	@ 0x41a00000  20.0
 8001794:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179c:	f340 8096 	ble.w	80018cc <Analog_Judge+0x29c>
        {
        	int flag = 1 ;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f641 0254 	movw	r2, #6228	@ 0x1854
 80017a6:	443a      	add	r2, r7
 80017a8:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 80017aa:	f641 0358 	movw	r3, #6232	@ 0x1858
 80017ae:	443b      	add	r3, r7
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3b02      	subs	r3, #2
 80017b4:	f641 0250 	movw	r2, #6224	@ 0x1850
 80017b8:	443a      	add	r2, r7
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e02c      	b.n	8001818 <Analog_Judge+0x1e8>
        	{
        		if (x[j] > x[i])flag = 0;
 80017be:	f641 0350 	movw	r3, #6224	@ 0x1850
 80017c2:	443b      	add	r3, r7
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80017cc:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	ed93 6b00 	vldr	d6, [r3]
 80017d8:	f641 0358 	movw	r3, #6232	@ 0x1858
 80017dc:	443b      	add	r3, r7
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 80017e6:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	ed93 7b00 	vldr	d7, [r3]
 80017f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	dd04      	ble.n	8001806 <Analog_Judge+0x1d6>
 80017fc:	2300      	movs	r3, #0
 80017fe:	f641 0254 	movw	r2, #6228	@ 0x1854
 8001802:	443a      	add	r2, r7
 8001804:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 8001806:	f641 0350 	movw	r3, #6224	@ 0x1850
 800180a:	443b      	add	r3, r7
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	f641 0250 	movw	r2, #6224	@ 0x1850
 8001814:	443a      	add	r2, r7
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	f641 0358 	movw	r3, #6232	@ 0x1858
 800181c:	443b      	add	r3, r7
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	f641 0250 	movw	r2, #6224	@ 0x1850
 8001826:	443a      	add	r2, r7
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	ddc7      	ble.n	80017be <Analog_Judge+0x18e>
        	}
        	if (flag == 1)
 800182e:	f641 0354 	movw	r3, #6228	@ 0x1854
 8001832:	443b      	add	r3, r7
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d148      	bne.n	80018cc <Analog_Judge+0x29c>
        	{
        		bands_sum += x[i];
 800183a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800183e:	443b      	add	r3, r7
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001848:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	4413      	add	r3, r2
 8001850:	ed93 7b00 	vldr	d7, [r3]
 8001854:	f641 0370 	movw	r3, #6256	@ 0x1870
 8001858:	443b      	add	r3, r7
 800185a:	ed93 6b00 	vldr	d6, [r3]
 800185e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001862:	f641 0370 	movw	r3, #6256	@ 0x1870
 8001866:	443b      	add	r3, r7
 8001868:	ed83 7b00 	vstr	d7, [r3]
        		bands[n_bands] = x[i];
 800186c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001870:	443b      	add	r3, r7
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 800187a:	f6a2 0274 	subw	r2, r2, #2164	@ 0x874
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	4413      	add	r3, r2
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 800188a:	4608      	mov	r0, r1
 800188c:	f641 0168 	movw	r1, #6248	@ 0x1868
 8001890:	4439      	add	r1, r7
 8001892:	6809      	ldr	r1, [r1, #0]
 8001894:	00c9      	lsls	r1, r1, #3
 8001896:	4401      	add	r1, r0
 8001898:	3938      	subs	r1, #56	@ 0x38
 800189a:	e9c1 2300 	strd	r2, r3, [r1]
        		bands_idx[n_bands] = i;
 800189e:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80018a2:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 80018a6:	f641 0268 	movw	r2, #6248	@ 0x1868
 80018aa:	443a      	add	r2, r7
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	f641 0158 	movw	r1, #6232	@ 0x1858
 80018b2:	4439      	add	r1, r7
 80018b4:	6809      	ldr	r1, [r1, #0]
 80018b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        		n_bands++;
 80018ba:	f641 0368 	movw	r3, #6248	@ 0x1868
 80018be:	443b      	add	r3, r7
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	f641 0268 	movw	r2, #6248	@ 0x1868
 80018c8:	443a      	add	r2, r7
 80018ca:	6013      	str	r3, [r2, #0]
    for(int i = main_band_idx - FO_LENGTH / 16; i < main_band_idx +  FO_LENGTH / 16 ; i++)
 80018cc:	f641 0358 	movw	r3, #6232	@ 0x1858
 80018d0:	443b      	add	r3, r7
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	f641 0258 	movw	r2, #6232	@ 0x1858
 80018da:	443a      	add	r2, r7
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	f641 036c 	movw	r3, #6252	@ 0x186c
 80018e2:	443b      	add	r3, r7
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80018ea:	f641 0258 	movw	r2, #6232	@ 0x1858
 80018ee:	443a      	add	r2, r7
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	f77f af28 	ble.w	8001748 <Analog_Judge+0x118>
        	}
        }
    }

    for (int i = 0 ; i < n_bands; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	f641 024c 	movw	r2, #6220	@ 0x184c
 80018fe:	443a      	add	r2, r7
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e034      	b.n	800196e <Analog_Judge+0x33e>
 8001904:	f3af 8000 	nop.w
 8001908:	9999999a 	.word	0x9999999a
 800190c:	3fb99999 	.word	0x3fb99999
    {
    	sprintf(str , "separated bands idx: %d." , bands_idx[i]);
 8001910:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001914:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 8001918:	f641 024c 	movw	r2, #6220	@ 0x184c
 800191c:	443a      	add	r2, r7
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001924:	4b9e      	ldr	r3, [pc, #632]	@ (8001ba0 <Analog_Judge+0x570>)
 8001926:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 800192a:	f103 0318 	add.w	r3, r3, #24
 800192e:	443b      	add	r3, r7
 8001930:	499c      	ldr	r1, [pc, #624]	@ (8001ba4 <Analog_Judge+0x574>)
 8001932:	4618      	mov	r0, r3
 8001934:	f00d fdca 	bl	800f4cc <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 26, HAL_MAX_DELAY);
 8001938:	4999      	ldr	r1, [pc, #612]	@ (8001ba0 <Analog_Judge+0x570>)
 800193a:	f641 0378 	movw	r3, #6264	@ 0x1878
 800193e:	440b      	add	r3, r1
 8001940:	19d9      	adds	r1, r3, r7
 8001942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001946:	221a      	movs	r2, #26
 8001948:	4897      	ldr	r0, [pc, #604]	@ (8001ba8 <Analog_Judge+0x578>)
 800194a:	f00b facb 	bl	800cee4 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 800194e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001952:	2201      	movs	r2, #1
 8001954:	4995      	ldr	r1, [pc, #596]	@ (8001bac <Analog_Judge+0x57c>)
 8001956:	4894      	ldr	r0, [pc, #592]	@ (8001ba8 <Analog_Judge+0x578>)
 8001958:	f00b fac4 	bl	800cee4 <HAL_UART_Transmit>
    for (int i = 0 ; i < n_bands; i++)
 800195c:	f641 034c 	movw	r3, #6220	@ 0x184c
 8001960:	443b      	add	r3, r7
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	f641 024c 	movw	r2, #6220	@ 0x184c
 800196a:	443a      	add	r2, r7
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	f641 034c 	movw	r3, #6220	@ 0x184c
 8001972:	443b      	add	r3, r7
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	f641 0368 	movw	r3, #6248	@ 0x1868
 800197a:	443b      	add	r3, r7
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbc6      	blt.n	8001910 <Analog_Judge+0x2e0>
    }


    bands_gap = bands_idx[n_bands / 2 + 1] - bands_idx[n_bands / 2];
 8001982:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001986:	443b      	add	r3, r7
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	da00      	bge.n	8001990 <Analog_Judge+0x360>
 800198e:	3301      	adds	r3, #1
 8001990:	105b      	asrs	r3, r3, #1
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001998:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 800199c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019a0:	f641 0368 	movw	r3, #6248	@ 0x1868
 80019a4:	443b      	add	r3, r7
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	da00      	bge.n	80019ae <Analog_Judge+0x37e>
 80019ac:	3301      	adds	r3, #1
 80019ae:	105b      	asrs	r3, r3, #1
 80019b0:	4619      	mov	r1, r3
 80019b2:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 80019b6:	f6a3 0338 	subw	r3, r3, #2104	@ 0x838
 80019ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f641 0248 	movw	r2, #6216	@ 0x1848
 80019c4:	443a      	add	r2, r7
 80019c6:	6013      	str	r3, [r2, #0]
	sprintf(str , "number of separated bands: %d." , n_bands);
 80019c8:	4b75      	ldr	r3, [pc, #468]	@ (8001ba0 <Analog_Judge+0x570>)
 80019ca:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 80019ce:	f103 0318 	add.w	r3, r3, #24
 80019d2:	443b      	add	r3, r7
 80019d4:	f641 0268 	movw	r2, #6248	@ 0x1868
 80019d8:	443a      	add	r2, r7
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	4974      	ldr	r1, [pc, #464]	@ (8001bb0 <Analog_Judge+0x580>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f00d fd74 	bl	800f4cc <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 30   ,HAL_MAX_DELAY);
 80019e4:	496e      	ldr	r1, [pc, #440]	@ (8001ba0 <Analog_Judge+0x570>)
 80019e6:	f641 0378 	movw	r3, #6264	@ 0x1878
 80019ea:	440b      	add	r3, r1
 80019ec:	19d9      	adds	r1, r3, r7
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019f2:	221e      	movs	r2, #30
 80019f4:	486c      	ldr	r0, [pc, #432]	@ (8001ba8 <Analog_Judge+0x578>)
 80019f6:	f00b fa75 	bl	800cee4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019fe:	2201      	movs	r2, #1
 8001a00:	496a      	ldr	r1, [pc, #424]	@ (8001bac <Analog_Judge+0x57c>)
 8001a02:	4869      	ldr	r0, [pc, #420]	@ (8001ba8 <Analog_Judge+0x578>)
 8001a04:	f00b fa6e 	bl	800cee4 <HAL_UART_Transmit>

	sprintf(str , "bands' gap: %d." , bands_gap);
 8001a08:	4b65      	ldr	r3, [pc, #404]	@ (8001ba0 <Analog_Judge+0x570>)
 8001a0a:	f503 53c3 	add.w	r3, r3, #6240	@ 0x1860
 8001a0e:	f103 0318 	add.w	r3, r3, #24
 8001a12:	443b      	add	r3, r7
 8001a14:	f641 0248 	movw	r2, #6216	@ 0x1848
 8001a18:	443a      	add	r2, r7
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	4965      	ldr	r1, [pc, #404]	@ (8001bb4 <Analog_Judge+0x584>)
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00d fd54 	bl	800f4cc <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 15   ,HAL_MAX_DELAY);
 8001a24:	495e      	ldr	r1, [pc, #376]	@ (8001ba0 <Analog_Judge+0x570>)
 8001a26:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001a2a:	440b      	add	r3, r1
 8001a2c:	19d9      	adds	r1, r3, r7
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a32:	220f      	movs	r2, #15
 8001a34:	485c      	ldr	r0, [pc, #368]	@ (8001ba8 <Analog_Judge+0x578>)
 8001a36:	f00b fa55 	bl	800cee4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a3e:	2201      	movs	r2, #1
 8001a40:	495a      	ldr	r1, [pc, #360]	@ (8001bac <Analog_Judge+0x57c>)
 8001a42:	4859      	ldr	r0, [pc, #356]	@ (8001ba8 <Analog_Judge+0x578>)
 8001a44:	f00b fa4e 	bl	800cee4 <HAL_UART_Transmit>

	sprintf(str , "frequency: %.2lf kHz." , (double)bands_gap / 40.600);
 8001a48:	f641 0348 	movw	r3, #6216	@ 0x1848
 8001a4c:	443b      	add	r3, r7
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a58:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 8001b98 <Analog_Judge+0x568>
 8001a5c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001a60:	484f      	ldr	r0, [pc, #316]	@ (8001ba0 <Analog_Judge+0x570>)
 8001a62:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001a66:	4403      	add	r3, r0
 8001a68:	19d8      	adds	r0, r3, r7
 8001a6a:	ec53 2b15 	vmov	r2, r3, d5
 8001a6e:	4952      	ldr	r1, [pc, #328]	@ (8001bb8 <Analog_Judge+0x588>)
 8001a70:	f00d fd2c 	bl	800f4cc <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 8001a74:	494a      	ldr	r1, [pc, #296]	@ (8001ba0 <Analog_Judge+0x570>)
 8001a76:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001a7a:	440b      	add	r3, r1
 8001a7c:	19d9      	adds	r1, r3, r7
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a82:	2214      	movs	r2, #20
 8001a84:	4848      	ldr	r0, [pc, #288]	@ (8001ba8 <Analog_Judge+0x578>)
 8001a86:	f00b fa2d 	bl	800cee4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4946      	ldr	r1, [pc, #280]	@ (8001bac <Analog_Judge+0x57c>)
 8001a92:	4845      	ldr	r0, [pc, #276]	@ (8001ba8 <Analog_Judge+0x578>)
 8001a94:	f00b fa26 	bl	800cee4 <HAL_UART_Transmit>

	if (n_bands == 0)
 8001a98:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001a9c:	443b      	add	r3, r7
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <Analog_Judge+0x47a>
	{
		return -1;
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aa8:	e06d      	b.n	8001b86 <Analog_Judge+0x556>
	}
	else if (n_bands == 1)
 8001aaa:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001aae:	443b      	add	r3, r7
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <Analog_Judge+0x48a>
    {
        return 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e065      	b.n	8001b86 <Analog_Judge+0x556>
    }
    else if (n_bands <= 3)
 8001aba:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001abe:	443b      	add	r3, r7
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	dc44      	bgt.n	8001b50 <Analog_Judge+0x520>
    {
    	sprintf(str , "degree of moderation: %.2lf" ,(bands_sum - bands[n_bands / 2]) / bands[n_bands / 2]);
 8001ac6:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001aca:	443b      	add	r3, r7
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da00      	bge.n	8001ad4 <Analog_Judge+0x4a4>
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	105b      	asrs	r3, r3, #1
 8001ad6:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4413      	add	r3, r2
 8001ade:	3b38      	subs	r3, #56	@ 0x38
 8001ae0:	ed93 7b00 	vldr	d7, [r3]
 8001ae4:	f641 0370 	movw	r3, #6256	@ 0x1870
 8001ae8:	443b      	add	r3, r7
 8001aea:	ed93 6b00 	vldr	d6, [r3]
 8001aee:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001af2:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001af6:	443b      	add	r3, r7
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	da00      	bge.n	8001b00 <Analog_Judge+0x4d0>
 8001afe:	3301      	adds	r3, #1
 8001b00:	105b      	asrs	r3, r3, #1
 8001b02:	f607 0278 	addw	r2, r7, #2168	@ 0x878
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3b38      	subs	r3, #56	@ 0x38
 8001b0c:	ed93 7b00 	vldr	d7, [r3]
 8001b10:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001b14:	4822      	ldr	r0, [pc, #136]	@ (8001ba0 <Analog_Judge+0x570>)
 8001b16:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001b1a:	4403      	add	r3, r0
 8001b1c:	19d8      	adds	r0, r3, r7
 8001b1e:	ec53 2b15 	vmov	r2, r3, d5
 8001b22:	4926      	ldr	r1, [pc, #152]	@ (8001bbc <Analog_Judge+0x58c>)
 8001b24:	f00d fcd2 	bl	800f4cc <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 26   ,HAL_MAX_DELAY);
 8001b28:	491d      	ldr	r1, [pc, #116]	@ (8001ba0 <Analog_Judge+0x570>)
 8001b2a:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001b2e:	440b      	add	r3, r1
 8001b30:	19d9      	adds	r1, r3, r7
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b36:	221a      	movs	r2, #26
 8001b38:	481b      	ldr	r0, [pc, #108]	@ (8001ba8 <Analog_Judge+0x578>)
 8001b3a:	f00b f9d3 	bl	800cee4 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b42:	2201      	movs	r2, #1
 8001b44:	4919      	ldr	r1, [pc, #100]	@ (8001bac <Analog_Judge+0x57c>)
 8001b46:	4818      	ldr	r0, [pc, #96]	@ (8001ba8 <Analog_Judge+0x578>)
 8001b48:	f00b f9cc 	bl	800cee4 <HAL_UART_Transmit>
        return 1; 
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e01a      	b.n	8001b86 <Analog_Judge+0x556>
    } 
    else if (n_bands > 3 && n_bands < 20)
 8001b50:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001b54:	443b      	add	r3, r7
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	dd07      	ble.n	8001b6c <Analog_Judge+0x53c>
 8001b5c:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001b60:	443b      	add	r3, r7
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b13      	cmp	r3, #19
 8001b66:	dc01      	bgt.n	8001b6c <Analog_Judge+0x53c>
    {
        return 2; 
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e00c      	b.n	8001b86 <Analog_Judge+0x556>
    }
    else
    {
        return Digital_Judge(x, v);
 8001b6c:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001b70:	f6a3 0278 	subw	r2, r3, #2168	@ 0x878
 8001b74:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8001b78:	f6a3 0374 	subw	r3, r3, #2164	@ 0x874
 8001b7c:	6811      	ldr	r1, [r2, #0]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	f000 f81e 	bl	8001bc0 <Digital_Judge>
 8001b84:	4603      	mov	r3, r0
    }
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	f507 57c3 	add.w	r7, r7, #6240	@ 0x1860
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	f3af 8000 	nop.w
 8001b98:	cccccccd 	.word	0xcccccccd
 8001b9c:	40444ccc 	.word	0x40444ccc
 8001ba0:	ffffe794 	.word	0xffffe794
 8001ba4:	08014878 	.word	0x08014878
 8001ba8:	24015178 	.word	0x24015178
 8001bac:	08014894 	.word	0x08014894
 8001bb0:	08014898 	.word	0x08014898
 8001bb4:	080148b8 	.word	0x080148b8
 8001bb8:	080148c8 	.word	0x080148c8
 8001bbc:	080148e0 	.word	0x080148e0

08001bc0 <Digital_Judge>:
    

int Digital_Judge(double x[], double v[])
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b09e      	sub	sp, #120	@ 0x78
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
    double main_band = 0;
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    int main_band_idx = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    char str[50];

    for (int i = 50; i < FO_LENGTH / 2 - 50; i++)
 8001bda:	2332      	movs	r3, #50	@ 0x32
 8001bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001bde:	e019      	b.n	8001c14 <Digital_Judge+0x54>
    {
        if (x[i] > main_band)
 8001be0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	ed93 7b00 	vldr	d7, [r3]
 8001bec:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8001bf0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	d509      	bpl.n	8001c0e <Digital_Judge+0x4e>
        {
            main_band = x[i];
 8001bfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
            main_band_idx = i;
 8001c0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    for (int i = 50; i < FO_LENGTH / 2 - 50; i++)
 8001c0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c10:	3301      	adds	r3, #1
 8001c12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c16:	f640 72cd 	movw	r2, #4045	@ 0xfcd
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	dde0      	ble.n	8001be0 <Digital_Judge+0x20>
        }
    }

    double threshold = main_band * 0.4;
 8001c1e:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 8001c22:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8001d70 <Digital_Judge+0x1b0>
 8001c26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c2a:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    int significant_bands = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	667b      	str	r3, [r7, #100]	@ 0x64
    double band_sum = 0;
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    for (int i = main_band_idx - 100; i <= main_band_idx + 100; i++)
 8001c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c40:	3b64      	subs	r3, #100	@ 0x64
 8001c42:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c44:	e049      	b.n	8001cda <Digital_Judge+0x11a>
    {
        if (i >= 100 && i < FO_LENGTH / 2 && x[i] > threshold)
 8001c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c48:	2b63      	cmp	r3, #99	@ 0x63
 8001c4a:	dd43      	ble.n	8001cd4 <Digital_Judge+0x114>
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c52:	da3f      	bge.n	8001cd4 <Digital_Judge+0x114>
 8001c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	ed93 7b00 	vldr	d7, [r3]
 8001c60:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 8001c64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d532      	bpl.n	8001cd4 <Digital_Judge+0x114>
        {
            int flag = 1;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	653b      	str	r3, [r7, #80]	@ 0x50
            for (int j = i - 5; j < i + 5; j++)
 8001c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c74:	3b05      	subs	r3, #5
 8001c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c78:	e015      	b.n	8001ca6 <Digital_Judge+0xe6>
            {
                if (x[j] > x[i])
 8001c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	ed93 6b00 	vldr	d6, [r3]
 8001c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	ed93 7b00 	vldr	d7, [r3]
 8001c92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	dd01      	ble.n	8001ca0 <Digital_Judge+0xe0>
                    flag = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	653b      	str	r3, [r7, #80]	@ 0x50
            for (int j = i - 5; j < i + 5; j++)
 8001ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca8:	3304      	adds	r3, #4
 8001caa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dde4      	ble.n	8001c7a <Digital_Judge+0xba>
            }
            if (flag == 1)
 8001cb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d10e      	bne.n	8001cd4 <Digital_Judge+0x114>
            {
                significant_bands++;
 8001cb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cb8:	3301      	adds	r3, #1
 8001cba:	667b      	str	r3, [r7, #100]	@ 0x64
                band_sum += x[i];
 8001cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	ed93 7b00 	vldr	d7, [r3]
 8001cc8:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8001ccc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001cd0:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
    for (int i = main_band_idx - 100; i <= main_band_idx + 100; i++)
 8001cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cdc:	3364      	adds	r3, #100	@ 0x64
 8001cde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	ddb0      	ble.n	8001c46 <Digital_Judge+0x86>
            }
        }
    }

    for (int i = 50 ; i < FO_LENGTH / 2;  i++)
 8001ce4:	2332      	movs	r3, #50	@ 0x32
 8001ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ce8:	e01e      	b.n	8001d28 <Digital_Judge+0x168>
    {
    	if (abs(v[i] - v[i-1]) > 1)
 8001cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	ed93 6b00 	vldr	d6, [r3]
 8001cf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cf8:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	ed93 7b00 	vldr	d7, [r3]
 8001d08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d0c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001d10:	ee17 3a90 	vmov	r3, s15
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bfb8      	it	lt
 8001d18:	425b      	neglt	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	dd01      	ble.n	8001d22 <Digital_Judge+0x162>
    	{
    		return 5;
 8001d1e:	2305      	movs	r3, #5
 8001d20:	e022      	b.n	8001d68 <Digital_Judge+0x1a8>
    for (int i = 50 ; i < FO_LENGTH / 2;  i++)
 8001d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d24:	3301      	adds	r3, #1
 8001d26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d2e:	dbdc      	blt.n	8001cea <Digital_Judge+0x12a>
    	}
    }

	sprintf(str , "number of significant bands: %d." , significant_bands);
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001d36:	4910      	ldr	r1, [pc, #64]	@ (8001d78 <Digital_Judge+0x1b8>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f00d fbc7 	bl	800f4cc <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 31   ,HAL_MAX_DELAY);
 8001d3e:	f107 010c 	add.w	r1, r7, #12
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d46:	221f      	movs	r2, #31
 8001d48:	480c      	ldr	r0, [pc, #48]	@ (8001d7c <Digital_Judge+0x1bc>)
 8001d4a:	f00b f8cb 	bl	800cee4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d52:	2201      	movs	r2, #1
 8001d54:	490a      	ldr	r1, [pc, #40]	@ (8001d80 <Digital_Judge+0x1c0>)
 8001d56:	4809      	ldr	r0, [pc, #36]	@ (8001d7c <Digital_Judge+0x1bc>)
 8001d58:	f00b f8c4 	bl	800cee4 <HAL_UART_Transmit>

    if (significant_bands < 2)
 8001d5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	dc01      	bgt.n	8001d66 <Digital_Judge+0x1a6>
    {
        return 3;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e000      	b.n	8001d68 <Digital_Judge+0x1a8>
    }
    else
    {
        return 4;
 8001d66:	2304      	movs	r3, #4
    }
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3778      	adds	r7, #120	@ 0x78
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	9999999a 	.word	0x9999999a
 8001d74:	3fd99999 	.word	0x3fd99999
 8001d78:	080148fc 	.word	0x080148fc
 8001d7c:	24015178 	.word	0x24015178
 8001d80:	08014894 	.word	0x08014894

08001d84 <Judger>:

 


void Judger(int value)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b0b4      	sub	sp, #208	@ 0xd0
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	char str[200];

	if (value == -1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d92:	d10e      	bne.n	8001db2 <Judger+0x2e>
	{
    	sprintf(str , "No signal.\n");
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	4945      	ldr	r1, [pc, #276]	@ (8001eb0 <Judger+0x12c>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f00d fb96 	bl	800f4cc <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 8001da0:	f107 0108 	add.w	r1, r7, #8
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001da8:	220c      	movs	r2, #12
 8001daa:	4842      	ldr	r0, [pc, #264]	@ (8001eb4 <Judger+0x130>)
 8001dac:	f00b f89a 	bl	800cee4 <HAL_UART_Transmit>
    else
    {
    	sprintf(str , "Unknown signal.\n");
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
	}
}
 8001db0:	e079      	b.n	8001ea6 <Judger+0x122>
	else if (value == 0)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10e      	bne.n	8001dd6 <Judger+0x52>
    	sprintf(str , "Sin signal.\n");
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	493e      	ldr	r1, [pc, #248]	@ (8001eb8 <Judger+0x134>)
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00d fb84 	bl	800f4cc <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 8001dc4:	f107 0108 	add.w	r1, r7, #8
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dcc:	220c      	movs	r2, #12
 8001dce:	4839      	ldr	r0, [pc, #228]	@ (8001eb4 <Judger+0x130>)
 8001dd0:	f00b f888 	bl	800cee4 <HAL_UART_Transmit>
}
 8001dd4:	e067      	b.n	8001ea6 <Judger+0x122>
    else if (value == 1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10e      	bne.n	8001dfa <Judger+0x76>
    	sprintf(str , "AM signal.\n");
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	4936      	ldr	r1, [pc, #216]	@ (8001ebc <Judger+0x138>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f00d fb72 	bl	800f4cc <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 8001de8:	f107 0108 	add.w	r1, r7, #8
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001df0:	220b      	movs	r2, #11
 8001df2:	4830      	ldr	r0, [pc, #192]	@ (8001eb4 <Judger+0x130>)
 8001df4:	f00b f876 	bl	800cee4 <HAL_UART_Transmit>
}
 8001df8:	e055      	b.n	8001ea6 <Judger+0x122>
    else if (value == 2)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d10e      	bne.n	8001e1e <Judger+0x9a>
    	sprintf(str , "FM signal.\n");
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	492e      	ldr	r1, [pc, #184]	@ (8001ec0 <Judger+0x13c>)
 8001e06:	4618      	mov	r0, r3
 8001e08:	f00d fb60 	bl	800f4cc <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 8001e0c:	f107 0108 	add.w	r1, r7, #8
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e14:	220b      	movs	r2, #11
 8001e16:	4827      	ldr	r0, [pc, #156]	@ (8001eb4 <Judger+0x130>)
 8001e18:	f00b f864 	bl	800cee4 <HAL_UART_Transmit>
}
 8001e1c:	e043      	b.n	8001ea6 <Judger+0x122>
    else if (value == 3)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d10e      	bne.n	8001e42 <Judger+0xbe>
    	sprintf(str , "ASK signal.\n");
 8001e24:	f107 0308 	add.w	r3, r7, #8
 8001e28:	4926      	ldr	r1, [pc, #152]	@ (8001ec4 <Judger+0x140>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f00d fb4e 	bl	800f4cc <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001e30:	f107 0108 	add.w	r1, r7, #8
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e38:	221c      	movs	r2, #28
 8001e3a:	481e      	ldr	r0, [pc, #120]	@ (8001eb4 <Judger+0x130>)
 8001e3c:	f00b f852 	bl	800cee4 <HAL_UART_Transmit>
}
 8001e40:	e031      	b.n	8001ea6 <Judger+0x122>
    else if (value == 4)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d10e      	bne.n	8001e66 <Judger+0xe2>
    	sprintf(str , "FSK signal.\n");
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	491e      	ldr	r1, [pc, #120]	@ (8001ec8 <Judger+0x144>)
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f00d fb3c 	bl	800f4cc <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001e54:	f107 0108 	add.w	r1, r7, #8
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e5c:	221c      	movs	r2, #28
 8001e5e:	4815      	ldr	r0, [pc, #84]	@ (8001eb4 <Judger+0x130>)
 8001e60:	f00b f840 	bl	800cee4 <HAL_UART_Transmit>
}
 8001e64:	e01f      	b.n	8001ea6 <Judger+0x122>
    else if (value == 5)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d10e      	bne.n	8001e8a <Judger+0x106>
    	sprintf(str, "PSK signal.\n");
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	4916      	ldr	r1, [pc, #88]	@ (8001ecc <Judger+0x148>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f00d fb2a 	bl	800f4cc <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001e78:	f107 0108 	add.w	r1, r7, #8
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e80:	221c      	movs	r2, #28
 8001e82:	480c      	ldr	r0, [pc, #48]	@ (8001eb4 <Judger+0x130>)
 8001e84:	f00b f82e 	bl	800cee4 <HAL_UART_Transmit>
}
 8001e88:	e00d      	b.n	8001ea6 <Judger+0x122>
    	sprintf(str , "Unknown signal.\n");
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	4910      	ldr	r1, [pc, #64]	@ (8001ed0 <Judger+0x14c>)
 8001e90:	4618      	mov	r0, r3
 8001e92:	f00d fb1b 	bl	800f4cc <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8001e96:	f107 0108 	add.w	r1, r7, #8
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e9e:	221c      	movs	r2, #28
 8001ea0:	4804      	ldr	r0, [pc, #16]	@ (8001eb4 <Judger+0x130>)
 8001ea2:	f00b f81f 	bl	800cee4 <HAL_UART_Transmit>
}
 8001ea6:	bf00      	nop
 8001ea8:	37d0      	adds	r7, #208	@ 0xd0
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	08014920 	.word	0x08014920
 8001eb4:	24015178 	.word	0x24015178
 8001eb8:	0801492c 	.word	0x0801492c
 8001ebc:	0801493c 	.word	0x0801493c
 8001ec0:	08014948 	.word	0x08014948
 8001ec4:	08014954 	.word	0x08014954
 8001ec8:	08014964 	.word	0x08014964
 8001ecc:	08014974 	.word	0x08014974
 8001ed0:	08014984 	.word	0x08014984

08001ed4 <adc_init>:

double v[FO_LENGTH];
double demodulated_signal[200];

void adc_init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001edc:	220b      	movs	r2, #11
 8001ede:	4920      	ldr	r1, [pc, #128]	@ (8001f60 <adc_init+0x8c>)
 8001ee0:	4820      	ldr	r0, [pc, #128]	@ (8001f64 <adc_init+0x90>)
 8001ee2:	f00a ffff 	bl	800cee4 <HAL_UART_Transmit>
	MX_ADC1_Init();
 8001ee6:	f7ff f837 	bl	8000f58 <MX_ADC1_Init>
	HAL_Delay(1);
 8001eea:	2001      	movs	r0, #1
 8001eec:	f000 fffa 	bl	8002ee4 <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8001ef0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	481c      	ldr	r0, [pc, #112]	@ (8001f68 <adc_init+0x94>)
 8001ef8:	f002 fd46 	bl	8004988 <HAL_ADCEx_Calibration_Start>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <adc_init+0x40>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f06:	222f      	movs	r2, #47	@ 0x2f
 8001f08:	4918      	ldr	r1, [pc, #96]	@ (8001f6c <adc_init+0x98>)
 8001f0a:	4816      	ldr	r0, [pc, #88]	@ (8001f64 <adc_init+0x90>)
 8001f0c:	f00a ffea 	bl	800cee4 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001f10:	f000 fb4c 	bl	80025ac <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH) != HAL_OK)
 8001f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f18:	4915      	ldr	r1, [pc, #84]	@ (8001f70 <adc_init+0x9c>)
 8001f1a:	4813      	ldr	r0, [pc, #76]	@ (8001f68 <adc_init+0x94>)
 8001f1c:	f001 fd6c 	bl	80039f8 <HAL_ADC_Start_DMA>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <adc_init+0x64>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f2a:	2225      	movs	r2, #37	@ 0x25
 8001f2c:	4911      	ldr	r1, [pc, #68]	@ (8001f74 <adc_init+0xa0>)
 8001f2e:	480d      	ldr	r0, [pc, #52]	@ (8001f64 <adc_init+0x90>)
 8001f30:	f00a ffd8 	bl	800cee4 <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8001f34:	f000 fb3a 	bl	80025ac <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8001f38:	480f      	ldr	r0, [pc, #60]	@ (8001f78 <adc_init+0xa4>)
 8001f3a:	f00a fc2d 	bl	800c798 <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 8001f3e:	bf00      	nop
 8001f40:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <adc_init+0xa8>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0fa      	beq.n	8001f40 <adc_init+0x6c>
	AdcConvEnd = 0;
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <adc_init+0xa8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 8001f50:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <adc_init+0x94>)
 8001f52:	f001 fbd1 	bl	80036f8 <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 8001f56:	4808      	ldr	r0, [pc, #32]	@ (8001f78 <adc_init+0xa4>)
 8001f58:	f00a fc8e 	bl	800c878 <HAL_TIM_Base_Stop>
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	08014998 	.word	0x08014998
 8001f64:	24015178 	.word	0x24015178
 8001f68:	2400488c 	.word	0x2400488c
 8001f6c:	080149a4 	.word	0x080149a4
 8001f70:	240006e0 	.word	0x240006e0
 8001f74:	080149d4 	.word	0x080149d4
 8001f78:	2401512c 	.word	0x2401512c
 8001f7c:	24004a48 	.word	0x24004a48

08001f80 <ADC_Get>:


void ADC_Get(double arr[])
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	adc_init();
 8001f88:	f7ff ffa4 	bl	8001ed4 <adc_init>
	double voltage;
//	char str[50];

	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	82fb      	strh	r3, [r7, #22]
 8001f90:	e020      	b.n	8001fd4 <ADC_Get+0x54>
		voltage = ((double)adc1_data[temp]*3.3)/65535 *3;
 8001f92:	8afb      	ldrh	r3, [r7, #22]
 8001f94:	4a18      	ldr	r2, [pc, #96]	@ (8001ff8 <ADC_Get+0x78>)
 8001f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001fa2:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8001fe8 <ADC_Get+0x68>
 8001fa6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001faa:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001ff0 <ADC_Get+0x70>
 8001fae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fb2:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 8001fb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fba:	ed87 7b02 	vstr	d7, [r7, #8]

		arr[temp] = voltage;
 8001fbe:	8afb      	ldrh	r3, [r7, #22]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	18d1      	adds	r1, r2, r3
 8001fc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fca:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 8001fce:	8afb      	ldrh	r3, [r7, #22]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	82fb      	strh	r3, [r7, #22]
 8001fd4:	8afb      	ldrh	r3, [r7, #22]
 8001fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fda:	d3da      	bcc.n	8001f92 <ADC_Get+0x12>
//		sprintf(str , "%.5f" , v[temp]);
//		HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//		HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
	}
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	66666666 	.word	0x66666666
 8001fec:	400a6666 	.word	0x400a6666
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	40efffe0 	.word	0x40efffe0
 8001ff8:	240006e0 	.word	0x240006e0
 8001ffc:	00000000 	.word	0x00000000

08002000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	f5ad 3d80 	sub.w	sp, sp, #65536	@ 0x10000
 8002006:	b09c      	sub	sp, #112	@ 0x70
 8002008:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800200a:	f000 fa71 	bl	80024f0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800200e:	4ba2      	ldr	r3, [pc, #648]	@ (8002298 <main+0x298>)
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d11b      	bne.n	8002052 <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800201a:	f3bf 8f4f 	dsb	sy
}
 800201e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002020:	f3bf 8f6f 	isb	sy
}
 8002024:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002026:	4b9c      	ldr	r3, [pc, #624]	@ (8002298 <main+0x298>)
 8002028:	2200      	movs	r2, #0
 800202a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800202e:	f3bf 8f4f 	dsb	sy
}
 8002032:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002034:	f3bf 8f6f 	isb	sy
}
 8002038:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800203a:	4b97      	ldr	r3, [pc, #604]	@ (8002298 <main+0x298>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4a96      	ldr	r2, [pc, #600]	@ (8002298 <main+0x298>)
 8002040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002044:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002046:	f3bf 8f4f 	dsb	sy
}
 800204a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800204c:	f3bf 8f6f 	isb	sy
}
 8002050:	e000      	b.n	8002054 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002052:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002054:	4b90      	ldr	r3, [pc, #576]	@ (8002298 <main+0x298>)
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d14e      	bne.n	80020fe <main+0xfe>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002060:	4b8d      	ldr	r3, [pc, #564]	@ (8002298 <main+0x298>)
 8002062:	2200      	movs	r2, #0
 8002064:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002068:	f3bf 8f4f 	dsb	sy
}
 800206c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800206e:	4b8a      	ldr	r3, [pc, #552]	@ (8002298 <main+0x298>)
 8002070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002074:	4a89      	ldr	r2, [pc, #548]	@ (800229c <main+0x29c>)
 8002076:	443a      	add	r2, r7
 8002078:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800207a:	4b88      	ldr	r3, [pc, #544]	@ (800229c <main+0x29c>)
 800207c:	443b      	add	r3, r7
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0b5b      	lsrs	r3, r3, #13
 8002082:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002086:	4a86      	ldr	r2, [pc, #536]	@ (80022a0 <main+0x2a0>)
 8002088:	443a      	add	r2, r7
 800208a:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800208c:	4b83      	ldr	r3, [pc, #524]	@ (800229c <main+0x29c>)
 800208e:	443b      	add	r3, r7
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	08db      	lsrs	r3, r3, #3
 8002094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002098:	4a82      	ldr	r2, [pc, #520]	@ (80022a4 <main+0x2a4>)
 800209a:	443a      	add	r2, r7
 800209c:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800209e:	4b80      	ldr	r3, [pc, #512]	@ (80022a0 <main+0x2a0>)
 80020a0:	443b      	add	r3, r7
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80020aa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80020ac:	4a7d      	ldr	r2, [pc, #500]	@ (80022a4 <main+0x2a4>)
 80020ae:	443a      	add	r2, r7
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80020b4:	4978      	ldr	r1, [pc, #480]	@ (8002298 <main+0x298>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80020bc:	4b79      	ldr	r3, [pc, #484]	@ (80022a4 <main+0x2a4>)
 80020be:	443b      	add	r3, r7
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1e5a      	subs	r2, r3, #1
 80020c4:	4977      	ldr	r1, [pc, #476]	@ (80022a4 <main+0x2a4>)
 80020c6:	4439      	add	r1, r7
 80020c8:	600a      	str	r2, [r1, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e7      	bne.n	800209e <main+0x9e>
    } while(sets-- != 0U);
 80020ce:	4b74      	ldr	r3, [pc, #464]	@ (80022a0 <main+0x2a0>)
 80020d0:	443b      	add	r3, r7
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	1e5a      	subs	r2, r3, #1
 80020d6:	4972      	ldr	r1, [pc, #456]	@ (80022a0 <main+0x2a0>)
 80020d8:	4439      	add	r1, r7
 80020da:	600a      	str	r2, [r1, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1d5      	bne.n	800208c <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 80020e0:	f3bf 8f4f 	dsb	sy
}
 80020e4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80020e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002298 <main+0x298>)
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4a6b      	ldr	r2, [pc, #428]	@ (8002298 <main+0x298>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80020f2:	f3bf 8f4f 	dsb	sy
}
 80020f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020f8:	f3bf 8f6f 	isb	sy
}
 80020fc:	e000      	b.n	8002100 <main+0x100>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80020fe:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002100:	f000 fe5e 	bl	8002dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002104:	f000 f92e 	bl	8002364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002108:	f7ff f966 	bl	80013d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800210c:	f7ff f93c 	bl	8001388 <MX_DMA_Init>
  MX_I2C1_Init();
 8002110:	f7ff f9e4 	bl	80014dc <MX_I2C1_Init>
  MX_TIM15_Init();
 8002114:	f000 fcca 	bl	8002aac <MX_TIM15_Init>
  MX_DAC1_Init();
 8002118:	f7ff f88a 	bl	8001230 <MX_DAC1_Init>
  MX_TIM7_Init();
 800211c:	f000 fc90 	bl	8002a40 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002120:	f000 fd66 	bl	8002bf0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002124:	f7fe ff18 	bl	8000f58 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002128:	f000 fc54 	bl	80029d4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  char str[50];
  double v_cpy[FO_LENGTH];
  ADC_Get(v);
 800212c:	485e      	ldr	r0, [pc, #376]	@ (80022a8 <main+0x2a8>)
 800212e:	f7ff ff27 	bl	8001f80 <ADC_Get>
  for (int i = 1 ;i < FO_LENGTH	; i++)
 8002132:	2301      	movs	r3, #1
 8002134:	4a5d      	ldr	r2, [pc, #372]	@ (80022ac <main+0x2ac>)
 8002136:	443a      	add	r2, r7
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e022      	b.n	8002182 <main+0x182>
  {
	  sprintf(str , "%.5f" , v[i]);
 800213c:	4a5a      	ldr	r2, [pc, #360]	@ (80022a8 <main+0x2a8>)
 800213e:	4b5b      	ldr	r3, [pc, #364]	@ (80022ac <main+0x2ac>)
 8002140:	443b      	add	r3, r7
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	4858      	ldr	r0, [pc, #352]	@ (80022b0 <main+0x2b0>)
 800214e:	4438      	add	r0, r7
 8002150:	4958      	ldr	r1, [pc, #352]	@ (80022b4 <main+0x2b4>)
 8002152:	f00d f9bb 	bl	800f4cc <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 8002156:	4956      	ldr	r1, [pc, #344]	@ (80022b0 <main+0x2b0>)
 8002158:	4439      	add	r1, r7
 800215a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800215e:	2207      	movs	r2, #7
 8002160:	4855      	ldr	r0, [pc, #340]	@ (80022b8 <main+0x2b8>)
 8002162:	f00a febf 	bl	800cee4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8002166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800216a:	2201      	movs	r2, #1
 800216c:	4953      	ldr	r1, [pc, #332]	@ (80022bc <main+0x2bc>)
 800216e:	4852      	ldr	r0, [pc, #328]	@ (80022b8 <main+0x2b8>)
 8002170:	f00a feb8 	bl	800cee4 <HAL_UART_Transmit>
  for (int i = 1 ;i < FO_LENGTH	; i++)
 8002174:	4b4d      	ldr	r3, [pc, #308]	@ (80022ac <main+0x2ac>)
 8002176:	443b      	add	r3, r7
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a4b      	ldr	r2, [pc, #300]	@ (80022ac <main+0x2ac>)
 800217e:	443a      	add	r2, r7
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b4a      	ldr	r3, [pc, #296]	@ (80022ac <main+0x2ac>)
 8002184:	443b      	add	r3, r7
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800218c:	dbd6      	blt.n	800213c <main+0x13c>
  }
  memcpy(v_cpy, v, FO_LENGTH);
 800218e:	4b4c      	ldr	r3, [pc, #304]	@ (80022c0 <main+0x2c0>)
 8002190:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002194:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8002198:	443b      	add	r3, r7
 800219a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800219e:	4942      	ldr	r1, [pc, #264]	@ (80022a8 <main+0x2a8>)
 80021a0:	4618      	mov	r0, r3
 80021a2:	f00d fcef 	bl	800fb84 <memcpy>

  Hamming(FO_LENGTH, (821 - FO_LENGTH/16), (821 + FO_LENGTH / 16), 0.46, v);
 80021a6:	4b40      	ldr	r3, [pc, #256]	@ (80022a8 <main+0x2a8>)
 80021a8:	ed9f 0b39 	vldr	d0, [pc, #228]	@ 8002290 <main+0x290>
 80021ac:	f240 5235 	movw	r2, #1333	@ 0x535
 80021b0:	f240 1135 	movw	r1, #309	@ 0x135
 80021b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80021b8:	f7fe fe62 	bl	8000e80 <Hamming>
  FFT_Mag_sqrt(FO_LENGTH, v);
 80021bc:	493a      	ldr	r1, [pc, #232]	@ (80022a8 <main+0x2a8>)
 80021be:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80021c2:	f7fe fe29 	bl	8000e18 <FFT_Mag_sqrt>

  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	4a3e      	ldr	r2, [pc, #248]	@ (80022c4 <main+0x2c4>)
 80021ca:	443a      	add	r2, r7
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e022      	b.n	8002216 <main+0x216>
  {
	  sprintf(str , "%.5f" , v[i]);
 80021d0:	4a35      	ldr	r2, [pc, #212]	@ (80022a8 <main+0x2a8>)
 80021d2:	4b3c      	ldr	r3, [pc, #240]	@ (80022c4 <main+0x2c4>)
 80021d4:	443b      	add	r3, r7
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	4833      	ldr	r0, [pc, #204]	@ (80022b0 <main+0x2b0>)
 80021e2:	4438      	add	r0, r7
 80021e4:	4933      	ldr	r1, [pc, #204]	@ (80022b4 <main+0x2b4>)
 80021e6:	f00d f971 	bl	800f4cc <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 80021ea:	4931      	ldr	r1, [pc, #196]	@ (80022b0 <main+0x2b0>)
 80021ec:	4439      	add	r1, r7
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021f2:	2207      	movs	r2, #7
 80021f4:	4830      	ldr	r0, [pc, #192]	@ (80022b8 <main+0x2b8>)
 80021f6:	f00a fe75 	bl	800cee4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021fe:	2201      	movs	r2, #1
 8002200:	492e      	ldr	r1, [pc, #184]	@ (80022bc <main+0x2bc>)
 8002202:	482d      	ldr	r0, [pc, #180]	@ (80022b8 <main+0x2b8>)
 8002204:	f00a fe6e 	bl	800cee4 <HAL_UART_Transmit>
  for (int i = 0 ;i < FO_LENGTH / 2	; i++)
 8002208:	4b2e      	ldr	r3, [pc, #184]	@ (80022c4 <main+0x2c4>)
 800220a:	443b      	add	r3, r7
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	4a2c      	ldr	r2, [pc, #176]	@ (80022c4 <main+0x2c4>)
 8002212:	443a      	add	r2, r7
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b2b      	ldr	r3, [pc, #172]	@ (80022c4 <main+0x2c4>)
 8002218:	443b      	add	r3, r7
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002220:	dbd6      	blt.n	80021d0 <main+0x1d0>
  }
  int value = Analog_Judge(v, v_cpy);
 8002222:	4b27      	ldr	r3, [pc, #156]	@ (80022c0 <main+0x2c0>)
 8002224:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002228:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800222c:	443b      	add	r3, r7
 800222e:	4619      	mov	r1, r3
 8002230:	481d      	ldr	r0, [pc, #116]	@ (80022a8 <main+0x2a8>)
 8002232:	f7ff f9fd 	bl	8001630 <Analog_Judge>
 8002236:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <main+0x2c8>)
 8002238:	443b      	add	r3, r7
 800223a:	6018      	str	r0, [r3, #0]
  Judger(value);
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <main+0x2c8>)
 800223e:	443b      	add	r3, r7
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	f7ff fd9f 	bl	8001d84 <Judger>

  wave_arg arg = {0.5, 1000.0, 0.0};
 8002246:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800224a:	4a20      	ldr	r2, [pc, #128]	@ (80022cc <main+0x2cc>)
 800224c:	f1a3 0468 	sub.w	r4, r3, #104	@ 0x68
 8002250:	4615      	mov	r5, r2
 8002252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002256:	e895 0003 	ldmia.w	r5, {r0, r1}
 800225a:	e884 0003 	stmia.w	r4, {r0, r1}



  SineWave_Generator(demodulated_signal, 200, 1, arg);
 800225e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002262:	ed13 5b1a 	vldr	d5, [r3, #-104]	@ 0xffffff98
 8002266:	ed13 6b18 	vldr	d6, [r3, #-96]	@ 0xffffffa0
 800226a:	ed13 7b16 	vldr	d7, [r3, #-88]	@ 0xffffffa8
 800226e:	eeb0 1b45 	vmov.f64	d1, d5
 8002272:	eeb0 2b46 	vmov.f64	d2, d6
 8002276:	eeb0 3b47 	vmov.f64	d3, d7
 800227a:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800227e:	21c8      	movs	r1, #200	@ 0xc8
 8002280:	4813      	ldr	r0, [pc, #76]	@ (80022d0 <main+0x2d0>)
 8002282:	f000 f999 	bl	80025b8 <SineWave_Generator>
  for (int i = 0 ; i < 200 ; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <main+0x2d4>)
 800228a:	443a      	add	r2, r7
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e045      	b.n	800231c <main+0x31c>
 8002290:	d70a3d71 	.word	0xd70a3d71
 8002294:	3fdd70a3 	.word	0x3fdd70a3
 8002298:	e000ed00 	.word	0xe000ed00
 800229c:	00010054 	.word	0x00010054
 80022a0:	00010050 	.word	0x00010050
 80022a4:	0001004c 	.word	0x0001004c
 80022a8:	24004a50 	.word	0x24004a50
 80022ac:	00010064 	.word	0x00010064
 80022b0:	00010018 	.word	0x00010018
 80022b4:	080149fc 	.word	0x080149fc
 80022b8:	24015178 	.word	0x24015178
 80022bc:	08014a04 	.word	0x08014a04
 80022c0:	fffeffb0 	.word	0xfffeffb0
 80022c4:	00010060 	.word	0x00010060
 80022c8:	00010058 	.word	0x00010058
 80022cc:	08014a08 	.word	0x08014a08
 80022d0:	24014a50 	.word	0x24014a50
 80022d4:	0001005c 	.word	0x0001005c
  {
	  Dat[i] = (uint16_t)(demodulated_signal[i] * 4095 + 2048);
 80022d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <main+0x350>)
 80022da:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <main+0x354>)
 80022dc:	443b      	add	r3, r7
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	ed93 7b00 	vldr	d7, [r3]
 80022e8:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8002340 <main+0x340>
 80022ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022f0:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 8002348 <main+0x348>
 80022f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022fc:	ee17 3a90 	vmov	r3, s15
 8002300:	b299      	uxth	r1, r3
 8002302:	4a15      	ldr	r2, [pc, #84]	@ (8002358 <main+0x358>)
 8002304:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <main+0x354>)
 8002306:	443b      	add	r3, r7
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0 ; i < 200 ; i++)
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <main+0x354>)
 8002310:	443b      	add	r3, r7
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3301      	adds	r3, #1
 8002316:	4a0f      	ldr	r2, [pc, #60]	@ (8002354 <main+0x354>)
 8002318:	443a      	add	r2, r7
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <main+0x354>)
 800231e:	443b      	add	r3, r7
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2bc7      	cmp	r3, #199	@ 0xc7
 8002324:	ddd8      	ble.n	80022d8 <main+0x2d8>
  }
  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_2,(uint32_t *)Dat,200,DAC_ALIGN_12B_R);
 8002326:	2300      	movs	r3, #0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	23c8      	movs	r3, #200	@ 0xc8
 800232c:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <main+0x358>)
 800232e:	2110      	movs	r1, #16
 8002330:	480a      	ldr	r0, [pc, #40]	@ (800235c <main+0x35c>)
 8002332:	f002 fe19 	bl	8004f68 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start(&htim6);
 8002336:	480a      	ldr	r0, [pc, #40]	@ (8002360 <main+0x360>)
 8002338:	f00a fa2e 	bl	800c798 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <main+0x33c>
 8002340:	00000000 	.word	0x00000000
 8002344:	40affe00 	.word	0x40affe00
 8002348:	00000000 	.word	0x00000000
 800234c:	40a00000 	.word	0x40a00000
 8002350:	24014a50 	.word	0x24014a50
 8002354:	0001005c 	.word	0x0001005c
 8002358:	240046e0 	.word	0x240046e0
 800235c:	24004968 	.word	0x24004968
 8002360:	24015094 	.word	0x24015094

08002364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b09e      	sub	sp, #120	@ 0x78
 8002368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800236e:	224c      	movs	r2, #76	@ 0x4c
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f00d fbb2 	bl	800fadc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2220      	movs	r2, #32
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f00d fbab 	bl	800fadc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002386:	2002      	movs	r0, #2
 8002388:	f006 fc8e 	bl	8008ca8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	4b4c      	ldr	r3, [pc, #304]	@ (80024c4 <SystemClock_Config+0x160>)
 8002392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002394:	4a4b      	ldr	r2, [pc, #300]	@ (80024c4 <SystemClock_Config+0x160>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800239c:	4b49      	ldr	r3, [pc, #292]	@ (80024c4 <SystemClock_Config+0x160>)
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b48      	ldr	r3, [pc, #288]	@ (80024c8 <SystemClock_Config+0x164>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	4a47      	ldr	r2, [pc, #284]	@ (80024c8 <SystemClock_Config+0x164>)
 80023ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023b0:	6193      	str	r3, [r2, #24]
 80023b2:	4b45      	ldr	r3, [pc, #276]	@ (80024c8 <SystemClock_Config+0x164>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023be:	bf00      	nop
 80023c0:	4b41      	ldr	r3, [pc, #260]	@ (80024c8 <SystemClock_Config+0x164>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023cc:	d1f8      	bne.n	80023c0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	4b3f      	ldr	r3, [pc, #252]	@ (80024cc <SystemClock_Config+0x168>)
 80023d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023d4:	4a3d      	ldr	r2, [pc, #244]	@ (80024cc <SystemClock_Config+0x168>)
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023de:	4b3b      	ldr	r3, [pc, #236]	@ (80024cc <SystemClock_Config+0x168>)
 80023e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80023ec:	2300      	movs	r3, #0
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4b35      	ldr	r3, [pc, #212]	@ (80024c8 <SystemClock_Config+0x164>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a34      	ldr	r2, [pc, #208]	@ (80024c8 <SystemClock_Config+0x164>)
 80023f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b32      	ldr	r3, [pc, #200]	@ (80024c8 <SystemClock_Config+0x164>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	4b2f      	ldr	r3, [pc, #188]	@ (80024c4 <SystemClock_Config+0x160>)
 8002408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240a:	4a2e      	ldr	r2, [pc, #184]	@ (80024c4 <SystemClock_Config+0x160>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002412:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <SystemClock_Config+0x160>)
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800241e:	bf00      	nop
 8002420:	4b29      	ldr	r3, [pc, #164]	@ (80024c8 <SystemClock_Config+0x164>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800242c:	d1f8      	bne.n	8002420 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800242e:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <SystemClock_Config+0x168>)
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	4a25      	ldr	r2, [pc, #148]	@ (80024cc <SystemClock_Config+0x168>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800243e:	2301      	movs	r3, #1
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002442:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002446:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002448:	2302      	movs	r3, #2
 800244a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800244c:	2302      	movs	r3, #2
 800244e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002450:	2305      	movs	r3, #5
 8002452:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002454:	23c0      	movs	r3, #192	@ 0xc0
 8002456:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002458:	2302      	movs	r3, #2
 800245a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800245c:	2302      	movs	r3, #2
 800245e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002460:	2302      	movs	r3, #2
 8002462:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002464:	2308      	movs	r3, #8
 8002466:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002468:	2300      	movs	r3, #0
 800246a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002470:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002474:	4618      	mov	r0, r3
 8002476:	f006 fc51 	bl	8008d1c <HAL_RCC_OscConfig>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8002480:	f000 f894 	bl	80025ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002484:	233f      	movs	r3, #63	@ 0x3f
 8002486:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002488:	2303      	movs	r3, #3
 800248a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002490:	2308      	movs	r3, #8
 8002492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002494:	2340      	movs	r3, #64	@ 0x40
 8002496:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002498:	2340      	movs	r3, #64	@ 0x40
 800249a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800249c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80024a2:	2340      	movs	r3, #64	@ 0x40
 80024a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	2104      	movs	r1, #4
 80024ac:	4618      	mov	r0, r3
 80024ae:	f007 f891 	bl	80095d4 <HAL_RCC_ClockConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <SystemClock_Config+0x158>
  {
    Error_Handler();
 80024b8:	f000 f878 	bl	80025ac <Error_Handler>
  }
}
 80024bc:	bf00      	nop
 80024be:	3778      	adds	r7, #120	@ 0x78
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	58000400 	.word	0x58000400
 80024c8:	58024800 	.word	0x58024800
 80024cc:	58024400 	.word	0x58024400

080024d0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 80024d8:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <HAL_ADC_ConvCpltCallback+0x1c>)
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	24004a48 	.word	0x24004a48

080024f0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80024f6:	463b      	mov	r3, r7
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002502:	f002 fc93 	bl	8004e2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002506:	2301      	movs	r3, #1
 8002508:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800250a:	2300      	movs	r3, #0
 800250c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800250e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8002512:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002514:	2312      	movs	r3, #18
 8002516:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002518:	2300      	movs	r3, #0
 800251a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800251c:	2301      	movs	r3, #1
 800251e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002520:	2303      	movs	r3, #3
 8002522:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800252c:	2301      	movs	r3, #1
 800252e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002534:	463b      	mov	r3, r7
 8002536:	4618      	mov	r0, r3
 8002538:	f002 fcb0 	bl	8004e9c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800253c:	2301      	movs	r3, #1
 800253e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002540:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002544:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002546:	2310      	movs	r3, #16
 8002548:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002552:	463b      	mov	r3, r7
 8002554:	4618      	mov	r0, r3
 8002556:	f002 fca1 	bl	8004e9c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800255a:	2302      	movs	r3, #2
 800255c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <MPU_Config+0xb4>)
 8002560:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002562:	463b      	mov	r3, r7
 8002564:	4618      	mov	r0, r3
 8002566:	f002 fc99 	bl	8004e9c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800256a:	2303      	movs	r3, #3
 800256c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <MPU_Config+0xb8>)
 8002570:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8002572:	230e      	movs	r3, #14
 8002574:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002576:	463b      	mov	r3, r7
 8002578:	4618      	mov	r0, r3
 800257a:	f002 fc8f 	bl	8004e9c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800257e:	2304      	movs	r3, #4
 8002580:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8002582:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8002586:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002588:	230f      	movs	r3, #15
 800258a:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800258c:	463b      	mov	r3, r7
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fc84 	bl	8004e9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002594:	2004      	movs	r0, #4
 8002596:	f002 fc61 	bl	8004e5c <HAL_MPU_Enable>

}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	30020000 	.word	0x30020000
 80025a8:	30040000 	.word	0x30040000

080025ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025b0:	b672      	cpsid	i
}
 80025b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <Error_Handler+0x8>

080025b8 <SineWave_Generator>:
#include "signals.h"

void SineWave_Generator(double wave[], int size, double time, wave_arg arg)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	ed2d 8b02 	vpush	{d8}
 80025be:	b08e      	sub	sp, #56	@ 0x38
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6278      	str	r0, [r7, #36]	@ 0x24
 80025c4:	6239      	str	r1, [r7, #32]
 80025c6:	ed87 0b06 	vstr	d0, [r7, #24]
 80025ca:	eeb0 5b41 	vmov.f64	d5, d1
 80025ce:	eeb0 6b42 	vmov.f64	d6, d2
 80025d2:	eeb0 7b43 	vmov.f64	d7, d3
 80025d6:	ed87 5b00 	vstr	d5, [r7]
 80025da:	ed87 6b02 	vstr	d6, [r7, #8]
 80025de:	ed87 7b04 	vstr	d7, [r7, #16]
    double time_step = (double)time / size;
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	ee07 3a90 	vmov	s15, r3
 80025e8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80025ec:	ed97 5b06 	vldr	d5, [r7, #24]
 80025f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80025f4:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    for (int i = 0; i < size; i++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80025fc:	e023      	b.n	8002646 <SineWave_Generator+0x8e>
    {
        wave[i] = arg.amp * sin(2 * M_PI * i * time_step + arg.phase);
 80025fe:	ed97 8b00 	vldr	d8, [r7]
 8002602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002604:	ee07 3a90 	vmov	s15, r3
 8002608:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800260c:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8002660 <SineWave_Generator+0xa8>
 8002610:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002614:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002618:	ee26 6b07 	vmul.f64	d6, d6, d7
 800261c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002620:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002624:	eeb0 0b47 	vmov.f64	d0, d7
 8002628:	f011 f9ea 	bl	8013a00 <sin>
 800262c:	eeb0 7b40 	vmov.f64	d7, d0
 8002630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002636:	4413      	add	r3, r2
 8002638:	ee28 7b07 	vmul.f64	d7, d8, d7
 800263c:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < size; i++)
 8002640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002642:	3301      	adds	r3, #1
 8002644:	637b      	str	r3, [r7, #52]	@ 0x34
 8002646:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	429a      	cmp	r2, r3
 800264c:	dbd7      	blt.n	80025fe <SineWave_Generator+0x46>
    }
}
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	3738      	adds	r7, #56	@ 0x38
 8002654:	46bd      	mov	sp, r7
 8002656:	ecbd 8b02 	vpop	{d8}
 800265a:	bd80      	pop	{r7, pc}
 800265c:	f3af 8000 	nop.w
 8002660:	54442d18 	.word	0x54442d18
 8002664:	401921fb 	.word	0x401921fb

08002668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_MspInit+0x30>)
 8002670:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002674:	4a08      	ldr	r2, [pc, #32]	@ (8002698 <HAL_MspInit+0x30>)
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_MspInit+0x30>)
 8002680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	58024400 	.word	0x58024400

0800269c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <NMI_Handler+0x4>

080026a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <HardFault_Handler+0x4>

080026ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <MemManage_Handler+0x4>

080026b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <BusFault_Handler+0x4>

080026bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <UsageFault_Handler+0x4>

080026c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f2:	f000 fbd7 	bl	8002ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <DMA1_Stream0_IRQHandler+0x10>)
 8002702:	f004 fbc3 	bl	8006e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	240048f0 	.word	0x240048f0

08002710 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <DMA1_Stream1_IRQHandler+0x10>)
 8002716:	f004 fbb9 	bl	8006e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	2400497c 	.word	0x2400497c

08002724 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <USART1_IRQHandler+0x10>)
 800272a:	f00a fc69 	bl	800d000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	24015178 	.word	0x24015178

08002738 <_getpid>:
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
 800273c:	2301      	movs	r3, #1
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_kill>:
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	f00d f9e9 	bl	800fb28 <__errno>
 8002756:	4603      	mov	r3, r0
 8002758:	2216      	movs	r2, #22
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <_exit>:
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ffe7 	bl	8002748 <_kill>
 800277a:	bf00      	nop
 800277c:	e7fd      	b.n	800277a <_exit+0x12>

0800277e <_read>:
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e00a      	b.n	80027a6 <_read+0x28>
 8002790:	f3af 8000 	nop.w
 8002794:	4601      	mov	r1, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	60ba      	str	r2, [r7, #8]
 800279c:	b2ca      	uxtb	r2, r1
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	dbf0      	blt.n	8002790 <_read+0x12>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_write>:
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	e009      	b.n	80027de <_write+0x26>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	60ba      	str	r2, [r7, #8]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f3af 8000 	nop.w
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3301      	adds	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	dbf1      	blt.n	80027ca <_write+0x12>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_close>:
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <_fstat>:
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	2300      	movs	r3, #0
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <_isatty>:
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	2301      	movs	r3, #1
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <_lseek>:
 800283e:	b480      	push	{r7}
 8002840:	b085      	sub	sp, #20
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	2300      	movs	r3, #0
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_sbrk>:
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	4a14      	ldr	r2, [pc, #80]	@ (80028b4 <_sbrk+0x5c>)
 8002862:	4b15      	ldr	r3, [pc, #84]	@ (80028b8 <_sbrk+0x60>)
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <_sbrk+0x64>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <_sbrk+0x22>
 8002874:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <_sbrk+0x64>)
 8002876:	4a12      	ldr	r2, [pc, #72]	@ (80028c0 <_sbrk+0x68>)
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	429a      	cmp	r2, r3
 8002886:	d207      	bcs.n	8002898 <_sbrk+0x40>
 8002888:	f00d f94e 	bl	800fb28 <__errno>
 800288c:	4603      	mov	r3, r0
 800288e:	220c      	movs	r2, #12
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002896:	e009      	b.n	80028ac <_sbrk+0x54>
 8002898:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <_sbrk+0x64>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <_sbrk+0x64>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	4a05      	ldr	r2, [pc, #20]	@ (80028bc <_sbrk+0x64>)
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	24080000 	.word	0x24080000
 80028b8:	00001000 	.word	0x00001000
 80028bc:	24015090 	.word	0x24015090
 80028c0:	24015520 	.word	0x24015520

080028c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028c8:	4b37      	ldr	r3, [pc, #220]	@ (80029a8 <SystemInit+0xe4>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ce:	4a36      	ldr	r2, [pc, #216]	@ (80029a8 <SystemInit+0xe4>)
 80028d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028d8:	4b34      	ldr	r3, [pc, #208]	@ (80029ac <SystemInit+0xe8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	2b06      	cmp	r3, #6
 80028e2:	d807      	bhi.n	80028f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028e4:	4b31      	ldr	r3, [pc, #196]	@ (80029ac <SystemInit+0xe8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 030f 	bic.w	r3, r3, #15
 80028ec:	4a2f      	ldr	r2, [pc, #188]	@ (80029ac <SystemInit+0xe8>)
 80028ee:	f043 0307 	orr.w	r3, r3, #7
 80028f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028f4:	4b2e      	ldr	r3, [pc, #184]	@ (80029b0 <SystemInit+0xec>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a2d      	ldr	r2, [pc, #180]	@ (80029b0 <SystemInit+0xec>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002900:	4b2b      	ldr	r3, [pc, #172]	@ (80029b0 <SystemInit+0xec>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002906:	4b2a      	ldr	r3, [pc, #168]	@ (80029b0 <SystemInit+0xec>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4929      	ldr	r1, [pc, #164]	@ (80029b0 <SystemInit+0xec>)
 800290c:	4b29      	ldr	r3, [pc, #164]	@ (80029b4 <SystemInit+0xf0>)
 800290e:	4013      	ands	r3, r2
 8002910:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002912:	4b26      	ldr	r3, [pc, #152]	@ (80029ac <SystemInit+0xe8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800291e:	4b23      	ldr	r3, [pc, #140]	@ (80029ac <SystemInit+0xe8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 030f 	bic.w	r3, r3, #15
 8002926:	4a21      	ldr	r2, [pc, #132]	@ (80029ac <SystemInit+0xe8>)
 8002928:	f043 0307 	orr.w	r3, r3, #7
 800292c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800292e:	4b20      	ldr	r3, [pc, #128]	@ (80029b0 <SystemInit+0xec>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002934:	4b1e      	ldr	r3, [pc, #120]	@ (80029b0 <SystemInit+0xec>)
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800293a:	4b1d      	ldr	r3, [pc, #116]	@ (80029b0 <SystemInit+0xec>)
 800293c:	2200      	movs	r2, #0
 800293e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002940:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <SystemInit+0xec>)
 8002942:	4a1d      	ldr	r2, [pc, #116]	@ (80029b8 <SystemInit+0xf4>)
 8002944:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002946:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <SystemInit+0xec>)
 8002948:	4a1c      	ldr	r2, [pc, #112]	@ (80029bc <SystemInit+0xf8>)
 800294a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800294c:	4b18      	ldr	r3, [pc, #96]	@ (80029b0 <SystemInit+0xec>)
 800294e:	4a1c      	ldr	r2, [pc, #112]	@ (80029c0 <SystemInit+0xfc>)
 8002950:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002952:	4b17      	ldr	r3, [pc, #92]	@ (80029b0 <SystemInit+0xec>)
 8002954:	2200      	movs	r2, #0
 8002956:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002958:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <SystemInit+0xec>)
 800295a:	4a19      	ldr	r2, [pc, #100]	@ (80029c0 <SystemInit+0xfc>)
 800295c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800295e:	4b14      	ldr	r3, [pc, #80]	@ (80029b0 <SystemInit+0xec>)
 8002960:	2200      	movs	r2, #0
 8002962:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002964:	4b12      	ldr	r3, [pc, #72]	@ (80029b0 <SystemInit+0xec>)
 8002966:	4a16      	ldr	r2, [pc, #88]	@ (80029c0 <SystemInit+0xfc>)
 8002968:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800296a:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <SystemInit+0xec>)
 800296c:	2200      	movs	r2, #0
 800296e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002970:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <SystemInit+0xec>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0e      	ldr	r2, [pc, #56]	@ (80029b0 <SystemInit+0xec>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800297a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800297c:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <SystemInit+0xec>)
 800297e:	2200      	movs	r2, #0
 8002980:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <SystemInit+0x100>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <SystemInit+0x104>)
 8002988:	4013      	ands	r3, r2
 800298a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800298e:	d202      	bcs.n	8002996 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002990:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <SystemInit+0x108>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002996:	4b0e      	ldr	r3, [pc, #56]	@ (80029d0 <SystemInit+0x10c>)
 8002998:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800299c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00
 80029ac:	52002000 	.word	0x52002000
 80029b0:	58024400 	.word	0x58024400
 80029b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80029b8:	02020200 	.word	0x02020200
 80029bc:	01ff0000 	.word	0x01ff0000
 80029c0:	01010280 	.word	0x01010280
 80029c4:	5c001000 	.word	0x5c001000
 80029c8:	ffff0000 	.word	0xffff0000
 80029cc:	51008108 	.word	0x51008108
 80029d0:	52004000 	.word	0x52004000

080029d4 <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80029e4:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <MX_TIM6_Init+0x64>)
 80029e6:	4a15      	ldr	r2, [pc, #84]	@ (8002a3c <MX_TIM6_Init+0x68>)
 80029e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 12 - 1;
 80029ea:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <MX_TIM6_Init+0x64>)
 80029ec:	220b      	movs	r2, #11
 80029ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f0:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <MX_TIM6_Init+0x64>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 80029f6:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <MX_TIM6_Init+0x64>)
 80029f8:	22c7      	movs	r2, #199	@ 0xc7
 80029fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <MX_TIM6_Init+0x64>)
 80029fe:	2280      	movs	r2, #128	@ 0x80
 8002a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a02:	480d      	ldr	r0, [pc, #52]	@ (8002a38 <MX_TIM6_Init+0x64>)
 8002a04:	f009 fe70 	bl	800c6e8 <HAL_TIM_Base_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002a0e:	f7ff fdcd 	bl	80025ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a12:	2320      	movs	r3, #32
 8002a14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4806      	ldr	r0, [pc, #24]	@ (8002a38 <MX_TIM6_Init+0x64>)
 8002a20:	f00a f982 	bl	800cd28 <HAL_TIMEx_MasterConfigSynchronization>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002a2a:	f7ff fdbf 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	24015094 	.word	0x24015094
 8002a3c:	40001000 	.word	0x40001000

08002a40 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a50:	4b14      	ldr	r3, [pc, #80]	@ (8002aa4 <MX_TIM7_Init+0x64>)
 8002a52:	4a15      	ldr	r2, [pc, #84]	@ (8002aa8 <MX_TIM7_Init+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8002a56:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <MX_TIM7_Init+0x64>)
 8002a58:	22ef      	movs	r2, #239	@ 0xef
 8002a5a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <MX_TIM7_Init+0x64>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002a62:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <MX_TIM7_Init+0x64>)
 8002a64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a68:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa4 <MX_TIM7_Init+0x64>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a70:	480c      	ldr	r0, [pc, #48]	@ (8002aa4 <MX_TIM7_Init+0x64>)
 8002a72:	f009 fe39 	bl	800c6e8 <HAL_TIM_Base_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002a7c:	f7ff fd96 	bl	80025ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4805      	ldr	r0, [pc, #20]	@ (8002aa4 <MX_TIM7_Init+0x64>)
 8002a8e:	f00a f94b 	bl	800cd28 <HAL_TIMEx_MasterConfigSynchronization>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002a98:	f7ff fd88 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	240150e0 	.word	0x240150e0
 8002aa8:	40001400 	.word	0x40001400

08002aac <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ab2:	f107 0310 	add.w	r3, r7, #16
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002aca:	4b1f      	ldr	r3, [pc, #124]	@ (8002b48 <MX_TIM15_Init+0x9c>)
 8002acc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b4c <MX_TIM15_Init+0xa0>)
 8002ace:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2-1;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <MX_TIM15_Init+0x9c>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b48 <MX_TIM15_Init+0x9c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2-1;
 8002adc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <MX_TIM15_Init+0x9c>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002ae2:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <MX_TIM15_Init+0x9c>)
 8002ae4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ae8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002aea:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <MX_TIM15_Init+0x9c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002af0:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <MX_TIM15_Init+0x9c>)
 8002af2:	2280      	movs	r2, #128	@ 0x80
 8002af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002af6:	4814      	ldr	r0, [pc, #80]	@ (8002b48 <MX_TIM15_Init+0x9c>)
 8002af8:	f009 fdf6 	bl	800c6e8 <HAL_TIM_Base_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002b02:	f7ff fd53 	bl	80025ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	4619      	mov	r1, r3
 8002b12:	480d      	ldr	r0, [pc, #52]	@ (8002b48 <MX_TIM15_Init+0x9c>)
 8002b14:	f009 fed8 	bl	800c8c8 <HAL_TIM_ConfigClockSource>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002b1e:	f7ff fd45 	bl	80025ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002b22:	2310      	movs	r3, #16
 8002b24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4806      	ldr	r0, [pc, #24]	@ (8002b48 <MX_TIM15_Init+0x9c>)
 8002b30:	f00a f8fa 	bl	800cd28 <HAL_TIMEx_MasterConfigSynchronization>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002b3a:	f7ff fd37 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002b3e:	bf00      	nop
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	2401512c 	.word	0x2401512c
 8002b4c:	40014000 	.word	0x40014000

08002b50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a20      	ldr	r2, [pc, #128]	@ (8002be0 <HAL_TIM_Base_MspInit+0x90>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10f      	bne.n	8002b82 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b62:	4b20      	ldr	r3, [pc, #128]	@ (8002be4 <HAL_TIM_Base_MspInit+0x94>)
 8002b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b68:	4a1e      	ldr	r2, [pc, #120]	@ (8002be4 <HAL_TIM_Base_MspInit+0x94>)
 8002b6a:	f043 0310 	orr.w	r3, r3, #16
 8002b6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b72:	4b1c      	ldr	r3, [pc, #112]	@ (8002be4 <HAL_TIM_Base_MspInit+0x94>)
 8002b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002b80:	e028      	b.n	8002bd4 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM7)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a18      	ldr	r2, [pc, #96]	@ (8002be8 <HAL_TIM_Base_MspInit+0x98>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10f      	bne.n	8002bac <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b8c:	4b15      	ldr	r3, [pc, #84]	@ (8002be4 <HAL_TIM_Base_MspInit+0x94>)
 8002b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b92:	4a14      	ldr	r2, [pc, #80]	@ (8002be4 <HAL_TIM_Base_MspInit+0x94>)
 8002b94:	f043 0320 	orr.w	r3, r3, #32
 8002b98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <HAL_TIM_Base_MspInit+0x94>)
 8002b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]
}
 8002baa:	e013      	b.n	8002bd4 <HAL_TIM_Base_MspInit+0x84>
  else if(tim_baseHandle->Instance==TIM15)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002bec <HAL_TIM_Base_MspInit+0x9c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_TIM_Base_MspInit+0x94>)
 8002bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bbc:	4a09      	ldr	r2, [pc, #36]	@ (8002be4 <HAL_TIM_Base_MspInit+0x94>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002bc6:	4b07      	ldr	r3, [pc, #28]	@ (8002be4 <HAL_TIM_Base_MspInit+0x94>)
 8002bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40001000 	.word	0x40001000
 8002be4:	58024400 	.word	0x58024400
 8002be8:	40001400 	.word	0x40001400
 8002bec:	40014000 	.word	0x40014000

08002bf0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bf4:	4b22      	ldr	r3, [pc, #136]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002bf6:	4a23      	ldr	r2, [pc, #140]	@ (8002c84 <MX_USART1_UART_Init+0x94>)
 8002bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bfa:	4b21      	ldr	r3, [pc, #132]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c02:	4b1f      	ldr	r3, [pc, #124]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c08:	4b1d      	ldr	r3, [pc, #116]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c16:	220c      	movs	r2, #12
 8002c18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1a:	4b19      	ldr	r3, [pc, #100]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c20:	4b17      	ldr	r3, [pc, #92]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c26:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c2c:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c32:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c38:	4811      	ldr	r0, [pc, #68]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c3a:	f00a f903 	bl	800ce44 <HAL_UART_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002c44:	f7ff fcb2 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c48:	2100      	movs	r1, #0
 8002c4a:	480d      	ldr	r0, [pc, #52]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c4c:	f00b fdcc 	bl	800e7e8 <HAL_UARTEx_SetTxFifoThreshold>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002c56:	f7ff fca9 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4808      	ldr	r0, [pc, #32]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c5e:	f00b fe01 	bl	800e864 <HAL_UARTEx_SetRxFifoThreshold>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c68:	f7ff fca0 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c6c:	4804      	ldr	r0, [pc, #16]	@ (8002c80 <MX_USART1_UART_Init+0x90>)
 8002c6e:	f00b fd82 	bl	800e776 <HAL_UARTEx_DisableFifoMode>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002c78:	f7ff fc98 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	24015178 	.word	0x24015178
 8002c84:	40011000 	.word	0x40011000

08002c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b0ba      	sub	sp, #232	@ 0xe8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ca0:	f107 0310 	add.w	r3, r7, #16
 8002ca4:	22c0      	movs	r2, #192	@ 0xc0
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f00c ff17 	bl	800fadc <memset>
  if(uartHandle->Instance==USART1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a2b      	ldr	r2, [pc, #172]	@ (8002d60 <HAL_UART_MspInit+0xd8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d14e      	bne.n	8002d56 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002cb8:	f04f 0201 	mov.w	r2, #1
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cca:	f107 0310 	add.w	r3, r7, #16
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f007 f80c 	bl	8009cec <HAL_RCCEx_PeriphCLKConfig>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002cda:	f7ff fc67 	bl	80025ac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cde:	4b21      	ldr	r3, [pc, #132]	@ (8002d64 <HAL_UART_MspInit+0xdc>)
 8002ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <HAL_UART_MspInit+0xdc>)
 8002ce6:	f043 0310 	orr.w	r3, r3, #16
 8002cea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002cee:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HAL_UART_MspInit+0xdc>)
 8002cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfc:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_UART_MspInit+0xdc>)
 8002cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d02:	4a18      	ldr	r2, [pc, #96]	@ (8002d64 <HAL_UART_MspInit+0xdc>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d0c:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <HAL_UART_MspInit+0xdc>)
 8002d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002d1a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002d34:	2304      	movs	r3, #4
 8002d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4809      	ldr	r0, [pc, #36]	@ (8002d68 <HAL_UART_MspInit+0xe0>)
 8002d42:	f005 fbb5 	bl	80084b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2025      	movs	r0, #37	@ 0x25
 8002d4c:	f002 f839 	bl	8004dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d50:	2025      	movs	r0, #37	@ 0x25
 8002d52:	f002 f850 	bl	8004df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d56:	bf00      	nop
 8002d58:	37e8      	adds	r7, #232	@ 0xe8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40011000 	.word	0x40011000
 8002d64:	58024400 	.word	0x58024400
 8002d68:	58020400 	.word	0x58020400

08002d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d70:	f7ff fda8 	bl	80028c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d74:	480c      	ldr	r0, [pc, #48]	@ (8002da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d76:	490d      	ldr	r1, [pc, #52]	@ (8002dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d78:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d7c:	e002      	b.n	8002d84 <LoopCopyDataInit>

08002d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d82:	3304      	adds	r3, #4

08002d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d88:	d3f9      	bcc.n	8002d7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d90:	e001      	b.n	8002d96 <LoopFillZerobss>

08002d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d94:	3204      	adds	r2, #4

08002d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d98:	d3fb      	bcc.n	8002d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d9a:	f00c fecb 	bl	800fb34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d9e:	f7ff f92f 	bl	8002000 <main>
  bx  lr
 8002da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002da4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002da8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002dac:	240006c4 	.word	0x240006c4
  ldr r2, =_sidata
 8002db0:	08017124 	.word	0x08017124
  ldr r2, =_sbss
 8002db4:	24004870 	.word	0x24004870
  ldr r4, =_ebss
 8002db8:	2401551c 	.word	0x2401551c

08002dbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dbc:	e7fe      	b.n	8002dbc <ADC3_IRQHandler>
	...

08002dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc6:	2003      	movs	r0, #3
 8002dc8:	f001 fff0 	bl	8004dac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dcc:	f006 fdb8 	bl	8009940 <HAL_RCC_GetSysClockFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b15      	ldr	r3, [pc, #84]	@ (8002e28 <HAL_Init+0x68>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	4913      	ldr	r1, [pc, #76]	@ (8002e2c <HAL_Init+0x6c>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
 8002de8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dea:	4b0f      	ldr	r3, [pc, #60]	@ (8002e28 <HAL_Init+0x68>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	4a0e      	ldr	r2, [pc, #56]	@ (8002e2c <HAL_Init+0x6c>)
 8002df4:	5cd3      	ldrb	r3, [r2, r3]
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002e00:	4a0b      	ldr	r2, [pc, #44]	@ (8002e30 <HAL_Init+0x70>)
 8002e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e04:	4a0b      	ldr	r2, [pc, #44]	@ (8002e34 <HAL_Init+0x74>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e0a:	200f      	movs	r0, #15
 8002e0c:	f000 f814 	bl	8002e38 <HAL_InitTick>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e002      	b.n	8002e20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1a:	f7ff fc25 	bl	8002668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	08014a20 	.word	0x08014a20
 8002e30:	24000004 	.word	0x24000004
 8002e34:	24000000 	.word	0x24000000

08002e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e40:	4b15      	ldr	r3, [pc, #84]	@ (8002e98 <HAL_InitTick+0x60>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e021      	b.n	8002e90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e4c:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <HAL_InitTick+0x64>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b11      	ldr	r3, [pc, #68]	@ (8002e98 <HAL_InitTick+0x60>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 ffd5 	bl	8004e12 <HAL_SYSTICK_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00e      	b.n	8002e90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b0f      	cmp	r3, #15
 8002e76:	d80a      	bhi.n	8002e8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e80:	f001 ff9f 	bl	8004dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e84:	4a06      	ldr	r2, [pc, #24]	@ (8002ea0 <HAL_InitTick+0x68>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	e000      	b.n	8002e90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	2400000c 	.word	0x2400000c
 8002e9c:	24000000 	.word	0x24000000
 8002ea0:	24000008 	.word	0x24000008

08002ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <HAL_IncTick+0x20>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_IncTick+0x24>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a04      	ldr	r2, [pc, #16]	@ (8002ec8 <HAL_IncTick+0x24>)
 8002eb6:	6013      	str	r3, [r2, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	2400000c 	.word	0x2400000c
 8002ec8:	2401520c 	.word	0x2401520c

08002ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	@ (8002ee0 <HAL_GetTick+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	2401520c 	.word	0x2401520c

08002ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7ff ffee 	bl	8002ecc <HAL_GetTick>
 8002ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002efc:	d005      	beq.n	8002f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efe:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <HAL_Delay+0x44>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f0a:	bf00      	nop
 8002f0c:	f7ff ffde 	bl	8002ecc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d8f7      	bhi.n	8002f0c <HAL_Delay+0x28>
  {
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	2400000c 	.word	0x2400000c

08002f2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f30:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <HAL_GetREVID+0x14>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0c1b      	lsrs	r3, r3, #16
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	5c001000 	.word	0x5c001000

08002f44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3360      	adds	r3, #96	@ 0x60
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	431a      	orrs	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	611a      	str	r2, [r3, #16]
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800301e:	b480      	push	{r7}
 8003020:	b087      	sub	sp, #28
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3360      	adds	r3, #96	@ 0x60
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	431a      	orrs	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	601a      	str	r2, [r3, #0]
  }
}
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800307a:	b480      	push	{r7}
 800307c:	b087      	sub	sp, #28
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3330      	adds	r3, #48	@ 0x30
 800308a:	461a      	mov	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	4413      	add	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	211f      	movs	r1, #31
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	401a      	ands	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0e9b      	lsrs	r3, r3, #26
 80030b2:	f003 011f 	and.w	r1, r3, #31
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	431a      	orrs	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f023 0203 	bic.w	r2, r3, #3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	60da      	str	r2, [r3, #12]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3314      	adds	r3, #20
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	0e5b      	lsrs	r3, r3, #25
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	4413      	add	r3, r2
 8003116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	0d1b      	lsrs	r3, r3, #20
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2107      	movs	r1, #7
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	401a      	ands	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	0d1b      	lsrs	r3, r3, #20
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	431a      	orrs	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003168:	43db      	mvns	r3, r3
 800316a:	401a      	ands	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0318 	and.w	r3, r3, #24
 8003172:	4908      	ldr	r1, [pc, #32]	@ (8003194 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003174:	40d9      	lsrs	r1, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	400b      	ands	r3, r1
 800317a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800317e:	431a      	orrs	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	000fffff 	.word	0x000fffff

08003198 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 031f 	and.w	r3, r3, #31
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6093      	str	r3, [r2, #8]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	5fffffc0 	.word	0x5fffffc0

080031d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ec:	d101      	bne.n	80031f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <LL_ADC_EnableInternalRegulator+0x24>)
 800320e:	4013      	ands	r3, r2
 8003210:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	6fffffc0 	.word	0x6fffffc0

08003228 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003238:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800323c:	d101      	bne.n	8003242 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <LL_ADC_Enable+0x24>)
 800325e:	4013      	ands	r3, r2
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	7fffffc0 	.word	0x7fffffc0

08003278 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <LL_ADC_Disable+0x24>)
 8003286:	4013      	ands	r3, r2
 8003288:	f043 0202 	orr.w	r2, r3, #2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	7fffffc0 	.word	0x7fffffc0

080032a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <LL_ADC_IsEnabled+0x18>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <LL_ADC_IsEnabled+0x1a>
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d101      	bne.n	80032de <LL_ADC_IsDisableOngoing+0x18>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <LL_ADC_IsDisableOngoing+0x1a>
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <LL_ADC_REG_StartConversion+0x24>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	f043 0204 	orr.w	r2, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	7fffffc0 	.word	0x7fffffc0

08003314 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <LL_ADC_REG_StopConversion+0x24>)
 8003322:	4013      	ands	r3, r2
 8003324:	f043 0210 	orr.w	r2, r3, #16
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	7fffffc0 	.word	0x7fffffc0

0800333c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b04      	cmp	r3, #4
 800334e:	d101      	bne.n	8003354 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <LL_ADC_INJ_StopConversion+0x24>)
 8003372:	4013      	ands	r3, r2
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	7fffffc0 	.word	0x7fffffc0

0800338c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d101      	bne.n	80033a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b089      	sub	sp, #36	@ 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e18f      	b.n	80036ee <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7fd fe35 	bl	800104c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff feef 	bl	80031d8 <LL_ADC_IsDeepPowerDownEnabled>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d004      	beq.n	800340a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fed5 	bl	80031b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff ff0a 	bl	8003228 <LL_ADC_IsInternalRegulatorEnabled>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d114      	bne.n	8003444 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff feee 	bl	8003200 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003424:	4b87      	ldr	r3, [pc, #540]	@ (8003644 <HAL_ADC_Init+0x290>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	4a87      	ldr	r2, [pc, #540]	@ (8003648 <HAL_ADC_Init+0x294>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	3301      	adds	r3, #1
 8003434:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003436:	e002      	b.n	800343e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	3b01      	subs	r3, #1
 800343c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f9      	bne.n	8003438 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff feed 	bl	8003228 <LL_ADC_IsInternalRegulatorEnabled>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10d      	bne.n	8003470 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003458:	f043 0210 	orr.w	r2, r3, #16
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff61 	bl	800333c <LL_ADC_REG_IsConversionOngoing>
 800347a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	f040 8129 	bne.w	80036dc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 8125 	bne.w	80036dc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003496:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800349a:	f043 0202 	orr.w	r2, r3, #2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fefa 	bl	80032a0 <LL_ADC_IsEnabled>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d136      	bne.n	8003520 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a65      	ldr	r2, [pc, #404]	@ (800364c <HAL_ADC_Init+0x298>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_ADC_Init+0x112>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a63      	ldr	r2, [pc, #396]	@ (8003650 <HAL_ADC_Init+0x29c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10e      	bne.n	80034e4 <HAL_ADC_Init+0x130>
 80034c6:	4861      	ldr	r0, [pc, #388]	@ (800364c <HAL_ADC_Init+0x298>)
 80034c8:	f7ff feea 	bl	80032a0 <LL_ADC_IsEnabled>
 80034cc:	4604      	mov	r4, r0
 80034ce:	4860      	ldr	r0, [pc, #384]	@ (8003650 <HAL_ADC_Init+0x29c>)
 80034d0:	f7ff fee6 	bl	80032a0 <LL_ADC_IsEnabled>
 80034d4:	4603      	mov	r3, r0
 80034d6:	4323      	orrs	r3, r4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e008      	b.n	80034f6 <HAL_ADC_Init+0x142>
 80034e4:	485b      	ldr	r0, [pc, #364]	@ (8003654 <HAL_ADC_Init+0x2a0>)
 80034e6:	f7ff fedb 	bl	80032a0 <LL_ADC_IsEnabled>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d012      	beq.n	8003520 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a53      	ldr	r2, [pc, #332]	@ (800364c <HAL_ADC_Init+0x298>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_ADC_Init+0x15a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a51      	ldr	r2, [pc, #324]	@ (8003650 <HAL_ADC_Init+0x29c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d101      	bne.n	8003512 <HAL_ADC_Init+0x15e>
 800350e:	4a52      	ldr	r2, [pc, #328]	@ (8003658 <HAL_ADC_Init+0x2a4>)
 8003510:	e000      	b.n	8003514 <HAL_ADC_Init+0x160>
 8003512:	4a52      	ldr	r2, [pc, #328]	@ (800365c <HAL_ADC_Init+0x2a8>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4619      	mov	r1, r3
 800351a:	4610      	mov	r0, r2
 800351c:	f7ff fd12 	bl	8002f44 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003520:	f7ff fd04 	bl	8002f2c <HAL_GetREVID>
 8003524:	4603      	mov	r3, r0
 8003526:	f241 0203 	movw	r2, #4099	@ 0x1003
 800352a:	4293      	cmp	r3, r2
 800352c:	d914      	bls.n	8003558 <HAL_ADC_Init+0x1a4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b10      	cmp	r3, #16
 8003534:	d110      	bne.n	8003558 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	7d5b      	ldrb	r3, [r3, #21]
 800353a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003540:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003546:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	7f1b      	ldrb	r3, [r3, #28]
 800354c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800354e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003550:	f043 030c 	orr.w	r3, r3, #12
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	e00d      	b.n	8003574 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7d5b      	ldrb	r3, [r3, #21]
 800355c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003562:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003568:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7f1b      	ldrb	r3, [r3, #28]
 800356e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7f1b      	ldrb	r3, [r3, #28]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d106      	bne.n	800358a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	3b01      	subs	r3, #1
 8003582:	045b      	lsls	r3, r3, #17
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003660 <HAL_ADC_Init+0x2ac>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	69b9      	ldr	r1, [r7, #24]
 80035b6:	430b      	orrs	r3, r1
 80035b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff febc 	bl	800333c <LL_ADC_REG_IsConversionOngoing>
 80035c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fede 	bl	800338c <LL_ADC_INJ_IsConversionOngoing>
 80035d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d15f      	bne.n	8003698 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d15c      	bne.n	8003698 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7d1b      	ldrb	r3, [r3, #20]
 80035e2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003664 <HAL_ADC_Init+0x2b0>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	69b9      	ldr	r1, [r7, #24]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003606:	2b01      	cmp	r3, #1
 8003608:	d130      	bne.n	800366c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	4b14      	ldr	r3, [pc, #80]	@ (8003668 <HAL_ADC_Init+0x2b4>)
 8003618:	4013      	ands	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800361e:	3a01      	subs	r2, #1
 8003620:	0411      	lsls	r1, r2, #16
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003626:	4311      	orrs	r1, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800362c:	4311      	orrs	r1, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003632:	430a      	orrs	r2, r1
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	611a      	str	r2, [r3, #16]
 8003640:	e01c      	b.n	800367c <HAL_ADC_Init+0x2c8>
 8003642:	bf00      	nop
 8003644:	24000000 	.word	0x24000000
 8003648:	053e2d63 	.word	0x053e2d63
 800364c:	40022000 	.word	0x40022000
 8003650:	40022100 	.word	0x40022100
 8003654:	58026000 	.word	0x58026000
 8003658:	40022300 	.word	0x40022300
 800365c:	58026300 	.word	0x58026300
 8003660:	fff0c003 	.word	0xfff0c003
 8003664:	ffffbffc 	.word	0xffffbffc
 8003668:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f001 f812 	bl	80046bc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d10c      	bne.n	80036ba <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	f023 010f 	bic.w	r1, r3, #15
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	1e5a      	subs	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80036b8:	e007      	b.n	80036ca <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 020f 	bic.w	r2, r2, #15
 80036c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ce:	f023 0303 	bic.w	r3, r3, #3
 80036d2:	f043 0201 	orr.w	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80036da:	e007      	b.n	80036ec <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f043 0210 	orr.w	r2, r3, #16
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3724      	adds	r7, #36	@ 0x24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd90      	pop	{r4, r7, pc}
 80036f6:	bf00      	nop

080036f8 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e16e      	b.n	80039e8 <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370e:	f043 0202 	orr.w	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003716:	2103      	movs	r1, #3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fd95 	bl	8004248 <ADC_ConversionStop>
 800371e:	4603      	mov	r3, r0
 8003720:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8003730:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fecb 	bl	80044d4 <ADC_Disable>
 800373e:	4603      	mov	r3, r0
 8003740:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b8c      	ldr	r3, [pc, #560]	@ (800398c <HAL_ADC_DeInit+0x294>)
 800375a:	400b      	ands	r3, r1
 800375c:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8003766:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 8003776:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003786:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 8003796:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80037a6:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6919      	ldr	r1, [r3, #16]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4b77      	ldr	r3, [pc, #476]	@ (8003990 <HAL_ADC_DeInit+0x298>)
 80037b4:	400b      	ands	r3, r1
 80037b6:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80037c6:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 80037d6:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a1a      	ldr	r2, [r3, #32]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80037e6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 80037f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003808:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 800381c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003830:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8003844:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4b50      	ldr	r3, [pc, #320]	@ (8003994 <HAL_ADC_DeInit+0x29c>)
 8003854:	400b      	ands	r3, r1
 8003856:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4b4d      	ldr	r3, [pc, #308]	@ (8003998 <HAL_ADC_DeInit+0x2a0>)
 8003864:	400b      	ands	r3, r1
 8003866:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4b49      	ldr	r3, [pc, #292]	@ (8003998 <HAL_ADC_DeInit+0x2a0>)
 8003874:	400b      	ands	r3, r1
 8003876:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4b46      	ldr	r3, [pc, #280]	@ (800399c <HAL_ADC_DeInit+0x2a4>)
 8003884:	400b      	ands	r3, r1
 8003886:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2200      	movs	r2, #0
 8003894:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2200      	movs	r2, #0
 80038a2:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2200      	movs	r2, #0
 80038b0:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b34      	ldr	r3, [pc, #208]	@ (80039a0 <HAL_ADC_DeInit+0x2a8>)
 80038ce:	400b      	ands	r3, r1
 80038d0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b2f      	ldr	r3, [pc, #188]	@ (80039a0 <HAL_ADC_DeInit+0x2a8>)
 80038e2:	400b      	ands	r3, r1
 80038e4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b2a      	ldr	r3, [pc, #168]	@ (80039a0 <HAL_ADC_DeInit+0x2a8>)
 80038f6:	400b      	ands	r3, r1
 80038f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 800390c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a23      	ldr	r2, [pc, #140]	@ (80039a4 <HAL_ADC_DeInit+0x2ac>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_ADC_DeInit+0x22c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a22      	ldr	r2, [pc, #136]	@ (80039a8 <HAL_ADC_DeInit+0x2b0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d10e      	bne.n	8003942 <HAL_ADC_DeInit+0x24a>
 8003924:	481f      	ldr	r0, [pc, #124]	@ (80039a4 <HAL_ADC_DeInit+0x2ac>)
 8003926:	f7ff fcbb 	bl	80032a0 <LL_ADC_IsEnabled>
 800392a:	4604      	mov	r4, r0
 800392c:	481e      	ldr	r0, [pc, #120]	@ (80039a8 <HAL_ADC_DeInit+0x2b0>)
 800392e:	f7ff fcb7 	bl	80032a0 <LL_ADC_IsEnabled>
 8003932:	4603      	mov	r3, r0
 8003934:	4323      	orrs	r3, r4
 8003936:	2b00      	cmp	r3, #0
 8003938:	bf0c      	ite	eq
 800393a:	2301      	moveq	r3, #1
 800393c:	2300      	movne	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	e008      	b.n	8003954 <HAL_ADC_DeInit+0x25c>
 8003942:	481a      	ldr	r0, [pc, #104]	@ (80039ac <HAL_ADC_DeInit+0x2b4>)
 8003944:	f7ff fcac 	bl	80032a0 <LL_ADC_IsEnabled>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	bf0c      	ite	eq
 800394e:	2301      	moveq	r3, #1
 8003950:	2300      	movne	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d036      	beq.n	80039c6 <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a11      	ldr	r2, [pc, #68]	@ (80039a4 <HAL_ADC_DeInit+0x2ac>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_ADC_DeInit+0x274>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a10      	ldr	r2, [pc, #64]	@ (80039a8 <HAL_ADC_DeInit+0x2b0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <HAL_ADC_DeInit+0x278>
 800396c:	4b10      	ldr	r3, [pc, #64]	@ (80039b0 <HAL_ADC_DeInit+0x2b8>)
 800396e:	e000      	b.n	8003972 <HAL_ADC_DeInit+0x27a>
 8003970:	4b10      	ldr	r3, [pc, #64]	@ (80039b4 <HAL_ADC_DeInit+0x2bc>)
 8003972:	6899      	ldr	r1, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0a      	ldr	r2, [pc, #40]	@ (80039a4 <HAL_ADC_DeInit+0x2ac>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_ADC_DeInit+0x290>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a09      	ldr	r2, [pc, #36]	@ (80039a8 <HAL_ADC_DeInit+0x2b0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d117      	bne.n	80039b8 <HAL_ADC_DeInit+0x2c0>
 8003988:	4a09      	ldr	r2, [pc, #36]	@ (80039b0 <HAL_ADC_DeInit+0x2b8>)
 800398a:	e016      	b.n	80039ba <HAL_ADC_DeInit+0x2c2>
 800398c:	fffff800 	.word	0xfffff800
 8003990:	fc00f81c 	.word	0xfc00f81c
 8003994:	e0820830 	.word	0xe0820830
 8003998:	e0820820 	.word	0xe0820820
 800399c:	fffff820 	.word	0xfffff820
 80039a0:	fff00000 	.word	0xfff00000
 80039a4:	40022000 	.word	0x40022000
 80039a8:	40022100 	.word	0x40022100
 80039ac:	58026000 	.word	0x58026000
 80039b0:	40022300 	.word	0x40022300
 80039b4:	58026300 	.word	0x58026300
 80039b8:	4a0d      	ldr	r2, [pc, #52]	@ (80039f0 <HAL_ADC_DeInit+0x2f8>)
 80039ba:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <HAL_ADC_DeInit+0x2fc>)
 80039bc:	400b      	ands	r3, r1
 80039be:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fd fc0b 	bl	80011dc <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd90      	pop	{r4, r7, pc}
 80039f0:	58026300 	.word	0x58026300
 80039f4:	fe0030e0 	.word	0xfe0030e0

080039f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a55      	ldr	r2, [pc, #340]	@ (8003b60 <HAL_ADC_Start_DMA+0x168>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d004      	beq.n	8003a18 <HAL_ADC_Start_DMA+0x20>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a54      	ldr	r2, [pc, #336]	@ (8003b64 <HAL_ADC_Start_DMA+0x16c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_ADC_Start_DMA+0x24>
 8003a18:	4b53      	ldr	r3, [pc, #332]	@ (8003b68 <HAL_ADC_Start_DMA+0x170>)
 8003a1a:	e000      	b.n	8003a1e <HAL_ADC_Start_DMA+0x26>
 8003a1c:	4b53      	ldr	r3, [pc, #332]	@ (8003b6c <HAL_ADC_Start_DMA+0x174>)
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fbba 	bl	8003198 <LL_ADC_GetMultimode>
 8003a24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fc86 	bl	800333c <LL_ADC_REG_IsConversionOngoing>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 808c 	bne.w	8003b50 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_ADC_Start_DMA+0x4e>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e087      	b.n	8003b56 <HAL_ADC_Start_DMA+0x15e>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d002      	beq.n	8003a60 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b09      	cmp	r3, #9
 8003a5e:	d170      	bne.n	8003b42 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fcad 	bl	80043c0 <ADC_Enable>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d163      	bne.n	8003b38 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a74:	4b3e      	ldr	r3, [pc, #248]	@ (8003b70 <HAL_ADC_Start_DMA+0x178>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a37      	ldr	r2, [pc, #220]	@ (8003b64 <HAL_ADC_Start_DMA+0x16c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d002      	beq.n	8003a90 <HAL_ADC_Start_DMA+0x98>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	e000      	b.n	8003a92 <HAL_ADC_Start_DMA+0x9a>
 8003a90:	4b33      	ldr	r3, [pc, #204]	@ (8003b60 <HAL_ADC_Start_DMA+0x168>)
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d002      	beq.n	8003aa0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d006      	beq.n	8003ac6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abc:	f023 0206 	bic.w	r2, r3, #6
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ac4:	e002      	b.n	8003acc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad0:	4a28      	ldr	r2, [pc, #160]	@ (8003b74 <HAL_ADC_Start_DMA+0x17c>)
 8003ad2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad8:	4a27      	ldr	r2, [pc, #156]	@ (8003b78 <HAL_ADC_Start_DMA+0x180>)
 8003ada:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae0:	4a26      	ldr	r2, [pc, #152]	@ (8003b7c <HAL_ADC_Start_DMA+0x184>)
 8003ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	221c      	movs	r2, #28
 8003aea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0210 	orr.w	r2, r2, #16
 8003b02:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f7ff fadf 	bl	80030d2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3340      	adds	r3, #64	@ 0x40
 8003b1e:	4619      	mov	r1, r3
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f002 f9e4 	bl	8005ef0 <HAL_DMA_Start_IT>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fbdb 	bl	80032ec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b36:	e00d      	b.n	8003b54 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003b40:	e008      	b.n	8003b54 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003b4e:	e001      	b.n	8003b54 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
 8003b52:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40022000 	.word	0x40022000
 8003b64:	40022100 	.word	0x40022100
 8003b68:	40022300 	.word	0x40022300
 8003b6c:	58026300 	.word	0x58026300
 8003b70:	fffff0fe 	.word	0xfffff0fe
 8003b74:	08004593 	.word	0x08004593
 8003b78:	0800466b 	.word	0x0800466b
 8003b7c:	08004687 	.word	0x08004687

08003b80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ba8:	b590      	push	{r4, r7, lr}
 8003baa:	b0a1      	sub	sp, #132	@ 0x84
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a9d      	ldr	r2, [pc, #628]	@ (8003e38 <HAL_ADC_ConfigChannel+0x290>)
 8003bc2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x2a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e321      	b.n	8004216 <HAL_ADC_ConfigChannel+0x66e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fbac 	bl	800333c <LL_ADC_REG_IsConversionOngoing>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 8306 	bne.w	80041f8 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d108      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x62>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0e9b      	lsrs	r3, r3, #26
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	2201      	movs	r2, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	e016      	b.n	8003c38 <HAL_ADC_ConfigChannel+0x90>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c1a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003c22:	2320      	movs	r3, #32
 8003c24:	e003      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003c26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c28:	fab3 f383 	clz	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2201      	movs	r2, #1
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	69d1      	ldr	r1, [r2, #28]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	430b      	orrs	r3, r1
 8003c44:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6859      	ldr	r1, [r3, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	f7ff fa11 	bl	800307a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fb6d 	bl	800333c <LL_ADC_REG_IsConversionOngoing>
 8003c62:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fb8f 	bl	800338c <LL_ADC_INJ_IsConversionOngoing>
 8003c6e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f040 80b3 	bne.w	8003dde <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f040 80af 	bne.w	8003dde <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	6819      	ldr	r1, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f7ff fa33 	bl	80030f8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c92:	4b6a      	ldr	r3, [pc, #424]	@ (8003e3c <HAL_ADC_ConfigChannel+0x294>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003c9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c9e:	d10b      	bne.n	8003cb8 <HAL_ADC_ConfigChannel+0x110>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	089b      	lsrs	r3, r3, #2
 8003cac:	f003 0307 	and.w	r3, r3, #7
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	e01d      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x14c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x136>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	089b      	lsrs	r3, r3, #2
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	e00a      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x14c>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d027      	beq.n	8003d4e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6919      	ldr	r1, [r3, #16]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d0c:	f7ff f94e 	bl	8002fac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	6919      	ldr	r1, [r3, #16]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	7e5b      	ldrb	r3, [r3, #25]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x17e>
 8003d20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003d24:	e000      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x180>
 8003d26:	2300      	movs	r3, #0
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f7ff f978 	bl	800301e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6919      	ldr	r1, [r3, #16]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	7e1b      	ldrb	r3, [r3, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d102      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x19c>
 8003d3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d42:	e000      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x19e>
 8003d44:	2300      	movs	r3, #0
 8003d46:	461a      	mov	r2, r3
 8003d48:	f7ff f950 	bl	8002fec <LL_ADC_SetDataRightShift>
 8003d4c:	e047      	b.n	8003dde <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	069b      	lsls	r3, r3, #26
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d107      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d70:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	069b      	lsls	r3, r3, #26
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d107      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d94:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	069b      	lsls	r3, r3, #26
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d107      	bne.n	8003dba <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003db8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	069b      	lsls	r3, r3, #26
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d107      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ddc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fa5c 	bl	80032a0 <LL_ADC_IsEnabled>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f040 820d 	bne.w	800420a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6819      	ldr	r1, [r3, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f7ff f9a7 	bl	8003150 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	4a0c      	ldr	r2, [pc, #48]	@ (8003e38 <HAL_ADC_ConfigChannel+0x290>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	f040 8133 	bne.w	8004074 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d110      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x298>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	0e9b      	lsrs	r3, r3, #26
 8003e24:	3301      	adds	r3, #1
 8003e26:	f003 031f 	and.w	r3, r3, #31
 8003e2a:	2b09      	cmp	r3, #9
 8003e2c:	bf94      	ite	ls
 8003e2e:	2301      	movls	r3, #1
 8003e30:	2300      	movhi	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	e01e      	b.n	8003e74 <HAL_ADC_ConfigChannel+0x2cc>
 8003e36:	bf00      	nop
 8003e38:	47ff0000 	.word	0x47ff0000
 8003e3c:	5c001000 	.word	0x5c001000
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003e52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003e58:	2320      	movs	r3, #32
 8003e5a:	e003      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003e5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e5e:	fab3 f383 	clz	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	3301      	adds	r3, #1
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2b09      	cmp	r3, #9
 8003e6c:	bf94      	ite	ls
 8003e6e:	2301      	movls	r3, #1
 8003e70:	2300      	movhi	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d079      	beq.n	8003f6c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x2ec>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	0e9b      	lsrs	r3, r3, #26
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	069b      	lsls	r3, r3, #26
 8003e8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e92:	e015      	b.n	8003ec0 <HAL_ADC_ConfigChannel+0x318>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003eac:	2320      	movs	r3, #32
 8003eae:	e003      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eb2:	fab3 f383 	clz	r3, r3
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	069b      	lsls	r3, r3, #26
 8003ebc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x338>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	0e9b      	lsrs	r3, r3, #26
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2101      	movs	r1, #1
 8003eda:	fa01 f303 	lsl.w	r3, r1, r3
 8003ede:	e017      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x368>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8003ef8:	2320      	movs	r3, #32
 8003efa:	e003      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	3301      	adds	r3, #1
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f10:	ea42 0103 	orr.w	r1, r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x38e>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	0e9b      	lsrs	r3, r3, #26
 8003f26:	3301      	adds	r3, #1
 8003f28:	f003 021f 	and.w	r2, r3, #31
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	051b      	lsls	r3, r3, #20
 8003f34:	e018      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x3c0>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3e:	fa93 f3a3 	rbit	r3, r3
 8003f42:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003f4e:	2320      	movs	r3, #32
 8003f50:	e003      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8003f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f54:	fab3 f383 	clz	r3, r3
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f003 021f 	and.w	r2, r3, #31
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	e07e      	b.n	800406a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d107      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x3e0>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	0e9b      	lsrs	r3, r3, #26
 8003f7e:	3301      	adds	r3, #1
 8003f80:	069b      	lsls	r3, r3, #26
 8003f82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f86:	e015      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x40c>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	e003      	b.n	8003fac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa6:	fab3 f383 	clz	r3, r3
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	3301      	adds	r3, #1
 8003fae:	069b      	lsls	r3, r3, #26
 8003fb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d109      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x42c>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	0e9b      	lsrs	r3, r3, #26
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2101      	movs	r1, #1
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	e017      	b.n	8004004 <HAL_ADC_ConfigChannel+0x45c>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	61bb      	str	r3, [r7, #24]
  return result;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003fec:	2320      	movs	r3, #32
 8003fee:	e003      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	2101      	movs	r1, #1
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	ea42 0103 	orr.w	r1, r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10d      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x488>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0e9b      	lsrs	r3, r3, #26
 800401a:	3301      	adds	r3, #1
 800401c:	f003 021f 	and.w	r2, r3, #31
 8004020:	4613      	mov	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4413      	add	r3, r2
 8004026:	3b1e      	subs	r3, #30
 8004028:	051b      	lsls	r3, r3, #20
 800402a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800402e:	e01b      	b.n	8004068 <HAL_ADC_ConfigChannel+0x4c0>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	fa93 f3a3 	rbit	r3, r3
 800403c:	60fb      	str	r3, [r7, #12]
  return result;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004048:	2320      	movs	r3, #32
 800404a:	e003      	b.n	8004054 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	fab3 f383 	clz	r3, r3
 8004052:	b2db      	uxtb	r3, r3
 8004054:	3301      	adds	r3, #1
 8004056:	f003 021f 	and.w	r2, r3, #31
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	3b1e      	subs	r3, #30
 8004062:	051b      	lsls	r3, r3, #20
 8004064:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004068:	430b      	orrs	r3, r1
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	6892      	ldr	r2, [r2, #8]
 800406e:	4619      	mov	r1, r3
 8004070:	f7ff f842 	bl	80030f8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f280 80c6 	bge.w	800420a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a67      	ldr	r2, [pc, #412]	@ (8004220 <HAL_ADC_ConfigChannel+0x678>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d004      	beq.n	8004092 <HAL_ADC_ConfigChannel+0x4ea>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a65      	ldr	r2, [pc, #404]	@ (8004224 <HAL_ADC_ConfigChannel+0x67c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x4ee>
 8004092:	4b65      	ldr	r3, [pc, #404]	@ (8004228 <HAL_ADC_ConfigChannel+0x680>)
 8004094:	e000      	b.n	8004098 <HAL_ADC_ConfigChannel+0x4f0>
 8004096:	4b65      	ldr	r3, [pc, #404]	@ (800422c <HAL_ADC_ConfigChannel+0x684>)
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe ff79 	bl	8002f90 <LL_ADC_GetCommonPathInternalCh>
 800409e:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004220 <HAL_ADC_ConfigChannel+0x678>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_ADC_ConfigChannel+0x50c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a5d      	ldr	r2, [pc, #372]	@ (8004224 <HAL_ADC_ConfigChannel+0x67c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10e      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x52a>
 80040b4:	485a      	ldr	r0, [pc, #360]	@ (8004220 <HAL_ADC_ConfigChannel+0x678>)
 80040b6:	f7ff f8f3 	bl	80032a0 <LL_ADC_IsEnabled>
 80040ba:	4604      	mov	r4, r0
 80040bc:	4859      	ldr	r0, [pc, #356]	@ (8004224 <HAL_ADC_ConfigChannel+0x67c>)
 80040be:	f7ff f8ef 	bl	80032a0 <LL_ADC_IsEnabled>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4323      	orrs	r3, r4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	e008      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x53c>
 80040d2:	4857      	ldr	r0, [pc, #348]	@ (8004230 <HAL_ADC_ConfigChannel+0x688>)
 80040d4:	f7ff f8e4 	bl	80032a0 <LL_ADC_IsEnabled>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bf0c      	ite	eq
 80040de:	2301      	moveq	r3, #1
 80040e0:	2300      	movne	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d07d      	beq.n	80041e4 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a51      	ldr	r2, [pc, #324]	@ (8004234 <HAL_ADC_ConfigChannel+0x68c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d130      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x5ac>
 80040f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d12b      	bne.n	8004154 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a4b      	ldr	r2, [pc, #300]	@ (8004230 <HAL_ADC_ConfigChannel+0x688>)
 8004102:	4293      	cmp	r3, r2
 8004104:	f040 8081 	bne.w	800420a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a44      	ldr	r2, [pc, #272]	@ (8004220 <HAL_ADC_ConfigChannel+0x678>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_ADC_ConfigChannel+0x574>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a43      	ldr	r2, [pc, #268]	@ (8004224 <HAL_ADC_ConfigChannel+0x67c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x578>
 800411c:	4a42      	ldr	r2, [pc, #264]	@ (8004228 <HAL_ADC_ConfigChannel+0x680>)
 800411e:	e000      	b.n	8004122 <HAL_ADC_ConfigChannel+0x57a>
 8004120:	4a42      	ldr	r2, [pc, #264]	@ (800422c <HAL_ADC_ConfigChannel+0x684>)
 8004122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004124:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004128:	4619      	mov	r1, r3
 800412a:	4610      	mov	r0, r2
 800412c:	f7fe ff1d 	bl	8002f6a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004130:	4b41      	ldr	r3, [pc, #260]	@ (8004238 <HAL_ADC_ConfigChannel+0x690>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	099b      	lsrs	r3, r3, #6
 8004136:	4a41      	ldr	r2, [pc, #260]	@ (800423c <HAL_ADC_ConfigChannel+0x694>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	3301      	adds	r3, #1
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004144:	e002      	b.n	800414c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	3b01      	subs	r3, #1
 800414a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f9      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004152:	e05a      	b.n	800420a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a39      	ldr	r2, [pc, #228]	@ (8004240 <HAL_ADC_ConfigChannel+0x698>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d11e      	bne.n	800419c <HAL_ADC_ConfigChannel+0x5f4>
 800415e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004160:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d119      	bne.n	800419c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a30      	ldr	r2, [pc, #192]	@ (8004230 <HAL_ADC_ConfigChannel+0x688>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d14b      	bne.n	800420a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a2a      	ldr	r2, [pc, #168]	@ (8004220 <HAL_ADC_ConfigChannel+0x678>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_ADC_ConfigChannel+0x5de>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a28      	ldr	r2, [pc, #160]	@ (8004224 <HAL_ADC_ConfigChannel+0x67c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <HAL_ADC_ConfigChannel+0x5e2>
 8004186:	4a28      	ldr	r2, [pc, #160]	@ (8004228 <HAL_ADC_ConfigChannel+0x680>)
 8004188:	e000      	b.n	800418c <HAL_ADC_ConfigChannel+0x5e4>
 800418a:	4a28      	ldr	r2, [pc, #160]	@ (800422c <HAL_ADC_ConfigChannel+0x684>)
 800418c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800418e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f7fe fee8 	bl	8002f6a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800419a:	e036      	b.n	800420a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a28      	ldr	r2, [pc, #160]	@ (8004244 <HAL_ADC_ConfigChannel+0x69c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d131      	bne.n	800420a <HAL_ADC_ConfigChannel+0x662>
 80041a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d12c      	bne.n	800420a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004230 <HAL_ADC_ConfigChannel+0x688>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d127      	bne.n	800420a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a18      	ldr	r2, [pc, #96]	@ (8004220 <HAL_ADC_ConfigChannel+0x678>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d004      	beq.n	80041ce <HAL_ADC_ConfigChannel+0x626>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a16      	ldr	r2, [pc, #88]	@ (8004224 <HAL_ADC_ConfigChannel+0x67c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x62a>
 80041ce:	4a16      	ldr	r2, [pc, #88]	@ (8004228 <HAL_ADC_ConfigChannel+0x680>)
 80041d0:	e000      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x62c>
 80041d2:	4a16      	ldr	r2, [pc, #88]	@ (800422c <HAL_ADC_ConfigChannel+0x684>)
 80041d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f7fe fec4 	bl	8002f6a <LL_ADC_SetCommonPathInternalCh>
 80041e2:	e012      	b.n	800420a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80041f6:	e008      	b.n	800420a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004212:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004216:	4618      	mov	r0, r3
 8004218:	3784      	adds	r7, #132	@ 0x84
 800421a:	46bd      	mov	sp, r7
 800421c:	bd90      	pop	{r4, r7, pc}
 800421e:	bf00      	nop
 8004220:	40022000 	.word	0x40022000
 8004224:	40022100 	.word	0x40022100
 8004228:	40022300 	.word	0x40022300
 800422c:	58026300 	.word	0x58026300
 8004230:	58026000 	.word	0x58026000
 8004234:	cb840000 	.word	0xcb840000
 8004238:	24000000 	.word	0x24000000
 800423c:	053e2d63 	.word	0x053e2d63
 8004240:	c7520000 	.word	0xc7520000
 8004244:	cfb80000 	.word	0xcfb80000

08004248 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff f86c 	bl	800333c <LL_ADC_REG_IsConversionOngoing>
 8004264:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff f88e 	bl	800338c <LL_ADC_INJ_IsConversionOngoing>
 8004270:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d103      	bne.n	8004280 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8098 	beq.w	80043b0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d02a      	beq.n	80042e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7d5b      	ldrb	r3, [r3, #21]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d126      	bne.n	80042e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	7d1b      	ldrb	r3, [r3, #20]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d122      	bne.n	80042e4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800429e:	2301      	movs	r3, #1
 80042a0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80042a2:	e014      	b.n	80042ce <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	4a45      	ldr	r2, [pc, #276]	@ (80043bc <ADC_ConversionStop+0x174>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d90d      	bls.n	80042c8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b0:	f043 0210 	orr.w	r2, r3, #16
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e074      	b.n	80043b2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	3301      	adds	r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d8:	2b40      	cmp	r3, #64	@ 0x40
 80042da:	d1e3      	bne.n	80042a4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2240      	movs	r2, #64	@ 0x40
 80042e2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d014      	beq.n	8004314 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff f824 	bl	800333c <LL_ADC_REG_IsConversionOngoing>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00c      	beq.n	8004314 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fe ffe1 	bl	80032c6 <LL_ADC_IsDisableOngoing>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d104      	bne.n	8004314 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff f800 	bl	8003314 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d014      	beq.n	8004344 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff f834 	bl	800338c <LL_ADC_INJ_IsConversionOngoing>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00c      	beq.n	8004344 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe ffc9 	bl	80032c6 <LL_ADC_IsDisableOngoing>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d104      	bne.n	8004344 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff f810 	bl	8003364 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d005      	beq.n	8004356 <ADC_ConversionStop+0x10e>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d105      	bne.n	800435c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004350:	230c      	movs	r3, #12
 8004352:	617b      	str	r3, [r7, #20]
        break;
 8004354:	e005      	b.n	8004362 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004356:	2308      	movs	r3, #8
 8004358:	617b      	str	r3, [r7, #20]
        break;
 800435a:	e002      	b.n	8004362 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800435c:	2304      	movs	r3, #4
 800435e:	617b      	str	r3, [r7, #20]
        break;
 8004360:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004362:	f7fe fdb3 	bl	8002ecc <HAL_GetTick>
 8004366:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004368:	e01b      	b.n	80043a2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800436a:	f7fe fdaf 	bl	8002ecc <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b05      	cmp	r3, #5
 8004376:	d914      	bls.n	80043a2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	4013      	ands	r3, r2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438a:	f043 0210 	orr.w	r2, r3, #16
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e007      	b.n	80043b2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1dc      	bne.n	800436a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	000cdbff 	.word	0x000cdbff

080043c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe ff67 	bl	80032a0 <LL_ADC_IsEnabled>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d16e      	bne.n	80044b6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	4b38      	ldr	r3, [pc, #224]	@ (80044c0 <ADC_Enable+0x100>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ea:	f043 0210 	orr.w	r2, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	f043 0201 	orr.w	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e05a      	b.n	80044b8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe ff22 	bl	8003250 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800440c:	f7fe fd5e 	bl	8002ecc <HAL_GetTick>
 8004410:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2b      	ldr	r2, [pc, #172]	@ (80044c4 <ADC_Enable+0x104>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <ADC_Enable+0x66>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a29      	ldr	r2, [pc, #164]	@ (80044c8 <ADC_Enable+0x108>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <ADC_Enable+0x6a>
 8004426:	4b29      	ldr	r3, [pc, #164]	@ (80044cc <ADC_Enable+0x10c>)
 8004428:	e000      	b.n	800442c <ADC_Enable+0x6c>
 800442a:	4b29      	ldr	r3, [pc, #164]	@ (80044d0 <ADC_Enable+0x110>)
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe feb3 	bl	8003198 <LL_ADC_GetMultimode>
 8004432:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a23      	ldr	r2, [pc, #140]	@ (80044c8 <ADC_Enable+0x108>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d002      	beq.n	8004444 <ADC_Enable+0x84>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	e000      	b.n	8004446 <ADC_Enable+0x86>
 8004444:	4b1f      	ldr	r3, [pc, #124]	@ (80044c4 <ADC_Enable+0x104>)
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	4293      	cmp	r3, r2
 800444c:	d02c      	beq.n	80044a8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d130      	bne.n	80044b6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004454:	e028      	b.n	80044a8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe ff20 	bl	80032a0 <LL_ADC_IsEnabled>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d104      	bne.n	8004470 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fef0 	bl	8003250 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004470:	f7fe fd2c 	bl	8002ecc <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d914      	bls.n	80044a8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d00d      	beq.n	80044a8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004490:	f043 0210 	orr.w	r2, r3, #16
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449c:	f043 0201 	orr.w	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e007      	b.n	80044b8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d1cf      	bne.n	8004456 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	8000003f 	.word	0x8000003f
 80044c4:	40022000 	.word	0x40022000
 80044c8:	40022100 	.word	0x40022100
 80044cc:	40022300 	.word	0x40022300
 80044d0:	58026300 	.word	0x58026300

080044d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fef0 	bl	80032c6 <LL_ADC_IsDisableOngoing>
 80044e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe fed7 	bl	80032a0 <LL_ADC_IsEnabled>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d047      	beq.n	8004588 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d144      	bne.n	8004588 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 030d 	and.w	r3, r3, #13
 8004508:	2b01      	cmp	r3, #1
 800450a:	d10c      	bne.n	8004526 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7fe feb1 	bl	8003278 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2203      	movs	r2, #3
 800451c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800451e:	f7fe fcd5 	bl	8002ecc <HAL_GetTick>
 8004522:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004524:	e029      	b.n	800457a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452a:	f043 0210 	orr.w	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	f043 0201 	orr.w	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e023      	b.n	800458a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004542:	f7fe fcc3 	bl	8002ecc <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d914      	bls.n	800457a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00d      	beq.n	800457a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004562:	f043 0210 	orr.w	r2, r3, #16
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	f043 0201 	orr.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e007      	b.n	800458a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1dc      	bne.n	8004542 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d14b      	bne.n	8004644 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d021      	beq.n	800460a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fd42 	bl	8003054 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d032      	beq.n	800463c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d12b      	bne.n	800463c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11f      	bne.n	800463c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004600:	f043 0201 	orr.w	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	655a      	str	r2, [r3, #84]	@ 0x54
 8004608:	e018      	b.n	800463c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d111      	bne.n	800463c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004628:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004634:	f043 0201 	orr.w	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7fd ff47 	bl	80024d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004642:	e00e      	b.n	8004662 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff fa9f 	bl	8003b94 <HAL_ADC_ErrorCallback>
}
 8004656:	e004      	b.n	8004662 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4798      	blx	r3
}
 8004662:	bf00      	nop
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004676:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff fa81 	bl	8003b80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004692:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004698:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a4:	f043 0204 	orr.w	r2, r3, #4
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff fa71 	bl	8003b94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a7a      	ldr	r2, [pc, #488]	@ (80048b4 <ADC_ConfigureBoostMode+0x1f8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d004      	beq.n	80046d8 <ADC_ConfigureBoostMode+0x1c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a79      	ldr	r2, [pc, #484]	@ (80048b8 <ADC_ConfigureBoostMode+0x1fc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d109      	bne.n	80046ec <ADC_ConfigureBoostMode+0x30>
 80046d8:	4b78      	ldr	r3, [pc, #480]	@ (80048bc <ADC_ConfigureBoostMode+0x200>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bf14      	ite	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	2300      	moveq	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	e008      	b.n	80046fe <ADC_ConfigureBoostMode+0x42>
 80046ec:	4b74      	ldr	r3, [pc, #464]	@ (80048c0 <ADC_ConfigureBoostMode+0x204>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf14      	ite	ne
 80046f8:	2301      	movne	r3, #1
 80046fa:	2300      	moveq	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01c      	beq.n	800473c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004702:	f005 fa97 	bl	8009c34 <HAL_RCC_GetHCLKFreq>
 8004706:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004710:	d010      	beq.n	8004734 <ADC_ConfigureBoostMode+0x78>
 8004712:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004716:	d873      	bhi.n	8004800 <ADC_ConfigureBoostMode+0x144>
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800471c:	d002      	beq.n	8004724 <ADC_ConfigureBoostMode+0x68>
 800471e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004722:	d16d      	bne.n	8004800 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	0c1b      	lsrs	r3, r3, #16
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	60fb      	str	r3, [r7, #12]
        break;
 8004732:	e068      	b.n	8004806 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	089b      	lsrs	r3, r3, #2
 8004738:	60fb      	str	r3, [r7, #12]
        break;
 800473a:	e064      	b.n	8004806 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800473c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004740:	f04f 0100 	mov.w	r1, #0
 8004744:	f006 fcdc 	bl	800b100 <HAL_RCCEx_GetPeriphCLKFreq>
 8004748:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004752:	d051      	beq.n	80047f8 <ADC_ConfigureBoostMode+0x13c>
 8004754:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004758:	d854      	bhi.n	8004804 <ADC_ConfigureBoostMode+0x148>
 800475a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800475e:	d047      	beq.n	80047f0 <ADC_ConfigureBoostMode+0x134>
 8004760:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004764:	d84e      	bhi.n	8004804 <ADC_ConfigureBoostMode+0x148>
 8004766:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800476a:	d03d      	beq.n	80047e8 <ADC_ConfigureBoostMode+0x12c>
 800476c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004770:	d848      	bhi.n	8004804 <ADC_ConfigureBoostMode+0x148>
 8004772:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004776:	d033      	beq.n	80047e0 <ADC_ConfigureBoostMode+0x124>
 8004778:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800477c:	d842      	bhi.n	8004804 <ADC_ConfigureBoostMode+0x148>
 800477e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004782:	d029      	beq.n	80047d8 <ADC_ConfigureBoostMode+0x11c>
 8004784:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004788:	d83c      	bhi.n	8004804 <ADC_ConfigureBoostMode+0x148>
 800478a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800478e:	d01a      	beq.n	80047c6 <ADC_ConfigureBoostMode+0x10a>
 8004790:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004794:	d836      	bhi.n	8004804 <ADC_ConfigureBoostMode+0x148>
 8004796:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800479a:	d014      	beq.n	80047c6 <ADC_ConfigureBoostMode+0x10a>
 800479c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047a0:	d830      	bhi.n	8004804 <ADC_ConfigureBoostMode+0x148>
 80047a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047a6:	d00e      	beq.n	80047c6 <ADC_ConfigureBoostMode+0x10a>
 80047a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ac:	d82a      	bhi.n	8004804 <ADC_ConfigureBoostMode+0x148>
 80047ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047b2:	d008      	beq.n	80047c6 <ADC_ConfigureBoostMode+0x10a>
 80047b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047b8:	d824      	bhi.n	8004804 <ADC_ConfigureBoostMode+0x148>
 80047ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047be:	d002      	beq.n	80047c6 <ADC_ConfigureBoostMode+0x10a>
 80047c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047c4:	d11e      	bne.n	8004804 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	0c9b      	lsrs	r3, r3, #18
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	60fb      	str	r3, [r7, #12]
        break;
 80047d6:	e016      	b.n	8004806 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	091b      	lsrs	r3, r3, #4
 80047dc:	60fb      	str	r3, [r7, #12]
        break;
 80047de:	e012      	b.n	8004806 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	60fb      	str	r3, [r7, #12]
        break;
 80047e6:	e00e      	b.n	8004806 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	60fb      	str	r3, [r7, #12]
        break;
 80047ee:	e00a      	b.n	8004806 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	09db      	lsrs	r3, r3, #7
 80047f4:	60fb      	str	r3, [r7, #12]
        break;
 80047f6:	e006      	b.n	8004806 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	60fb      	str	r3, [r7, #12]
        break;
 80047fe:	e002      	b.n	8004806 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004800:	bf00      	nop
 8004802:	e000      	b.n	8004806 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004804:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004806:	f7fe fb91 	bl	8002f2c <HAL_GetREVID>
 800480a:	4603      	mov	r3, r0
 800480c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004810:	4293      	cmp	r3, r2
 8004812:	d815      	bhi.n	8004840 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a2b      	ldr	r2, [pc, #172]	@ (80048c4 <ADC_ConfigureBoostMode+0x208>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d908      	bls.n	800482e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800482a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800482c:	e03e      	b.n	80048ac <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800483c:	609a      	str	r2, [r3, #8]
}
 800483e:	e035      	b.n	80048ac <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4a1f      	ldr	r2, [pc, #124]	@ (80048c8 <ADC_ConfigureBoostMode+0x20c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d808      	bhi.n	8004860 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800485c:	609a      	str	r2, [r3, #8]
}
 800485e:	e025      	b.n	80048ac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a1a      	ldr	r2, [pc, #104]	@ (80048cc <ADC_ConfigureBoostMode+0x210>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d80a      	bhi.n	800487e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800487a:	609a      	str	r2, [r3, #8]
}
 800487c:	e016      	b.n	80048ac <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4a13      	ldr	r2, [pc, #76]	@ (80048d0 <ADC_ConfigureBoostMode+0x214>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d80a      	bhi.n	800489c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004898:	609a      	str	r2, [r3, #8]
}
 800489a:	e007      	b.n	80048ac <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80048aa:	609a      	str	r2, [r3, #8]
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40022000 	.word	0x40022000
 80048b8:	40022100 	.word	0x40022100
 80048bc:	40022300 	.word	0x40022300
 80048c0:	58026300 	.word	0x58026300
 80048c4:	01312d00 	.word	0x01312d00
 80048c8:	005f5e10 	.word	0x005f5e10
 80048cc:	00bebc20 	.word	0x00bebc20
 80048d0:	017d7840 	.word	0x017d7840

080048d4 <LL_ADC_IsEnabled>:
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <LL_ADC_IsEnabled+0x18>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <LL_ADC_IsEnabled+0x1a>
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <LL_ADC_StartCalibration>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	4b09      	ldr	r3, [pc, #36]	@ (8004934 <LL_ADC_StartCalibration+0x38>)
 800490e:	4013      	ands	r3, r2
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800491c:	430a      	orrs	r2, r1
 800491e:	4313      	orrs	r3, r2
 8004920:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	609a      	str	r2, [r3, #8]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	3ffeffc0 	.word	0x3ffeffc0

08004938 <LL_ADC_IsCalibrationOnGoing>:
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004948:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800494c:	d101      	bne.n	8004952 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_ADC_REG_IsConversionOngoing>:
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b04      	cmp	r3, #4
 8004972:	d101      	bne.n	8004978 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_ADCEx_Calibration_Start+0x1e>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e04c      	b.n	8004a40 <HAL_ADCEx_Calibration_Start+0xb8>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff fd90 	bl	80044d4 <ADC_Disable>
 80049b4:	4603      	mov	r3, r0
 80049b6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d135      	bne.n	8004a2a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049c2:	4b21      	ldr	r3, [pc, #132]	@ (8004a48 <HAL_ADCEx_Calibration_Start+0xc0>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	f043 0202 	orr.w	r2, r3, #2
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff ff90 	bl	80048fc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049dc:	e014      	b.n	8004a08 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	3301      	adds	r3, #1
 80049e2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4a19      	ldr	r2, [pc, #100]	@ (8004a4c <HAL_ADCEx_Calibration_Start+0xc4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d30d      	bcc.n	8004a08 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f0:	f023 0312 	bic.w	r3, r3, #18
 80049f4:	f043 0210 	orr.w	r2, r3, #16
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e01b      	b.n	8004a40 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff ff93 	bl	8004938 <LL_ADC_IsCalibrationOnGoing>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e2      	bne.n	80049de <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	f023 0303 	bic.w	r3, r3, #3
 8004a20:	f043 0201 	orr.w	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a28:	e005      	b.n	8004a36 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2e:	f043 0210 	orr.w	r2, r3, #16
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	ffffeefd 	.word	0xffffeefd
 8004a4c:	25c3f800 	.word	0x25c3f800

08004a50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b09f      	sub	sp, #124	@ 0x7c
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e0be      	b.n	8004bec <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004a76:	2300      	movs	r3, #0
 8004a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a5c      	ldr	r2, [pc, #368]	@ (8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d102      	bne.n	8004a8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a88:	4b5b      	ldr	r3, [pc, #364]	@ (8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a8a:	60bb      	str	r3, [r7, #8]
 8004a8c:	e001      	b.n	8004a92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9c:	f043 0220 	orr.w	r2, r3, #32
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e09d      	b.n	8004bec <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff ff54 	bl	8004960 <LL_ADC_REG_IsConversionOngoing>
 8004ab8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff ff4e 	bl	8004960 <LL_ADC_REG_IsConversionOngoing>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d17f      	bne.n	8004bca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d17c      	bne.n	8004bca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a47      	ldr	r2, [pc, #284]	@ (8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d004      	beq.n	8004ae4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a46      	ldr	r2, [pc, #280]	@ (8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d101      	bne.n	8004ae8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004ae4:	4b45      	ldr	r3, [pc, #276]	@ (8004bfc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ae6:	e000      	b.n	8004aea <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004ae8:	4b45      	ldr	r3, [pc, #276]	@ (8004c00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004aea:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d039      	beq.n	8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b04:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a3a      	ldr	r2, [pc, #232]	@ (8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d004      	beq.n	8004b1a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a38      	ldr	r2, [pc, #224]	@ (8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d10e      	bne.n	8004b38 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004b1a:	4836      	ldr	r0, [pc, #216]	@ (8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004b1c:	f7ff feda 	bl	80048d4 <LL_ADC_IsEnabled>
 8004b20:	4604      	mov	r4, r0
 8004b22:	4835      	ldr	r0, [pc, #212]	@ (8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004b24:	f7ff fed6 	bl	80048d4 <LL_ADC_IsEnabled>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	4323      	orrs	r3, r4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bf0c      	ite	eq
 8004b30:	2301      	moveq	r3, #1
 8004b32:	2300      	movne	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e008      	b.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004b38:	4832      	ldr	r0, [pc, #200]	@ (8004c04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004b3a:	f7ff fecb 	bl	80048d4 <LL_ADC_IsEnabled>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d047      	beq.n	8004bde <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	4b2d      	ldr	r3, [pc, #180]	@ (8004c08 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004b54:	4013      	ands	r3, r2
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	6811      	ldr	r1, [r2, #0]
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	6892      	ldr	r2, [r2, #8]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	431a      	orrs	r2, r3
 8004b62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b64:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b66:	e03a      	b.n	8004bde <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b72:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a1e      	ldr	r2, [pc, #120]	@ (8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d004      	beq.n	8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d10e      	bne.n	8004ba6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004b88:	481a      	ldr	r0, [pc, #104]	@ (8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004b8a:	f7ff fea3 	bl	80048d4 <LL_ADC_IsEnabled>
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4819      	ldr	r0, [pc, #100]	@ (8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004b92:	f7ff fe9f 	bl	80048d4 <LL_ADC_IsEnabled>
 8004b96:	4603      	mov	r3, r0
 8004b98:	4323      	orrs	r3, r4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bf0c      	ite	eq
 8004b9e:	2301      	moveq	r3, #1
 8004ba0:	2300      	movne	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e008      	b.n	8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004ba6:	4817      	ldr	r0, [pc, #92]	@ (8004c04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ba8:	f7ff fe94 	bl	80048d4 <LL_ADC_IsEnabled>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf0c      	ite	eq
 8004bb2:	2301      	moveq	r3, #1
 8004bb4:	2300      	movne	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d010      	beq.n	8004bde <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	4b11      	ldr	r3, [pc, #68]	@ (8004c08 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bc6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bc8:	e009      	b.n	8004bde <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bce:	f043 0220 	orr.w	r2, r3, #32
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004bdc:	e000      	b.n	8004be0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bde:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004be8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	377c      	adds	r7, #124	@ 0x7c
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd90      	pop	{r4, r7, pc}
 8004bf4:	40022000 	.word	0x40022000
 8004bf8:	40022100 	.word	0x40022100
 8004bfc:	40022300 	.word	0x40022300
 8004c00:	58026300 	.word	0x58026300
 8004c04:	58026000 	.word	0x58026000
 8004c08:	fffff0e0 	.word	0xfffff0e0

08004c0c <__NVIC_SetPriorityGrouping>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <__NVIC_SetPriorityGrouping+0x40>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <__NVIC_SetPriorityGrouping+0x44>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c3a:	4a04      	ldr	r2, [pc, #16]	@ (8004c4c <__NVIC_SetPriorityGrouping+0x40>)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	60d3      	str	r3, [r2, #12]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	e000ed00 	.word	0xe000ed00
 8004c50:	05fa0000 	.word	0x05fa0000

08004c54 <__NVIC_GetPriorityGrouping>:
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c58:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <__NVIC_GetPriorityGrouping+0x18>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	f003 0307 	and.w	r3, r3, #7
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	e000ed00 	.word	0xe000ed00

08004c70 <__NVIC_EnableIRQ>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	db0b      	blt.n	8004c9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	f003 021f 	and.w	r2, r3, #31
 8004c88:	4907      	ldr	r1, [pc, #28]	@ (8004ca8 <__NVIC_EnableIRQ+0x38>)
 8004c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	2001      	movs	r0, #1
 8004c92:	fa00 f202 	lsl.w	r2, r0, r2
 8004c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	e000e100 	.word	0xe000e100

08004cac <__NVIC_SetPriority>:
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	db0a      	blt.n	8004cd6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	490c      	ldr	r1, [pc, #48]	@ (8004cf8 <__NVIC_SetPriority+0x4c>)
 8004cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cca:	0112      	lsls	r2, r2, #4
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	440b      	add	r3, r1
 8004cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004cd4:	e00a      	b.n	8004cec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4908      	ldr	r1, [pc, #32]	@ (8004cfc <__NVIC_SetPriority+0x50>)
 8004cdc:	88fb      	ldrh	r3, [r7, #6]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	3b04      	subs	r3, #4
 8004ce4:	0112      	lsls	r2, r2, #4
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	440b      	add	r3, r1
 8004cea:	761a      	strb	r2, [r3, #24]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000e100 	.word	0xe000e100
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <NVIC_EncodePriority>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	@ 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f1c3 0307 	rsb	r3, r3, #7
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	bf28      	it	cs
 8004d1e:	2304      	movcs	r3, #4
 8004d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d902      	bls.n	8004d30 <NVIC_EncodePriority+0x30>
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3b03      	subs	r3, #3
 8004d2e:	e000      	b.n	8004d32 <NVIC_EncodePriority+0x32>
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	401a      	ands	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	43d9      	mvns	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d58:	4313      	orrs	r3, r2
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3724      	adds	r7, #36	@ 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d78:	d301      	bcc.n	8004d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e00f      	b.n	8004d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <SysTick_Config+0x40>)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d86:	210f      	movs	r1, #15
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d8c:	f7ff ff8e 	bl	8004cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d90:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <SysTick_Config+0x40>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d96:	4b04      	ldr	r3, [pc, #16]	@ (8004da8 <SysTick_Config+0x40>)
 8004d98:	2207      	movs	r2, #7
 8004d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	e000e010 	.word	0xe000e010

08004dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff ff29 	bl	8004c0c <__NVIC_SetPriorityGrouping>
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b086      	sub	sp, #24
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	4603      	mov	r3, r0
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dd0:	f7ff ff40 	bl	8004c54 <__NVIC_GetPriorityGrouping>
 8004dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	6978      	ldr	r0, [r7, #20]
 8004ddc:	f7ff ff90 	bl	8004d00 <NVIC_EncodePriority>
 8004de0:	4602      	mov	r2, r0
 8004de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff5f 	bl	8004cac <__NVIC_SetPriority>
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff33 	bl	8004c70 <__NVIC_EnableIRQ>
}
 8004e0a:	bf00      	nop
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff ffa4 	bl	8004d68 <SysTick_Config>
 8004e20:	4603      	mov	r3, r0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004e30:	f3bf 8f5f 	dmb	sy
}
 8004e34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004e36:	4b07      	ldr	r3, [pc, #28]	@ (8004e54 <HAL_MPU_Disable+0x28>)
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	4a06      	ldr	r2, [pc, #24]	@ (8004e54 <HAL_MPU_Disable+0x28>)
 8004e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e40:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004e42:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <HAL_MPU_Disable+0x2c>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	605a      	str	r2, [r3, #4]
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	e000ed00 	.word	0xe000ed00
 8004e58:	e000ed90 	.word	0xe000ed90

08004e5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004e64:	4a0b      	ldr	r2, [pc, #44]	@ (8004e94 <HAL_MPU_Enable+0x38>)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <HAL_MPU_Enable+0x3c>)
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	4a09      	ldr	r2, [pc, #36]	@ (8004e98 <HAL_MPU_Enable+0x3c>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e78:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004e7a:	f3bf 8f4f 	dsb	sy
}
 8004e7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004e80:	f3bf 8f6f 	isb	sy
}
 8004e84:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	e000ed90 	.word	0xe000ed90
 8004e98:	e000ed00 	.word	0xe000ed00

08004e9c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	785a      	ldrb	r2, [r3, #1]
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f20 <HAL_MPU_ConfigRegion+0x84>)
 8004eaa:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d029      	beq.n	8004f08 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f20 <HAL_MPU_ConfigRegion+0x84>)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	7b1b      	ldrb	r3, [r3, #12]
 8004ec0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	7adb      	ldrb	r3, [r3, #11]
 8004ec6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004ec8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	7a9b      	ldrb	r3, [r3, #10]
 8004ece:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004ed0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7b5b      	ldrb	r3, [r3, #13]
 8004ed6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004ed8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	7b9b      	ldrb	r3, [r3, #14]
 8004ede:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004ee0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7bdb      	ldrb	r3, [r3, #15]
 8004ee6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004ee8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	7a5b      	ldrb	r3, [r3, #9]
 8004eee:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004ef0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	7a1b      	ldrb	r3, [r3, #8]
 8004ef6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004ef8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	7812      	ldrb	r2, [r2, #0]
 8004efe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f00:	4a07      	ldr	r2, [pc, #28]	@ (8004f20 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004f02:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f04:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004f06:	e005      	b.n	8004f14 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_MPU_ConfigRegion+0x84>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004f0e:	4b04      	ldr	r3, [pc, #16]	@ (8004f20 <HAL_MPU_ConfigRegion+0x84>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	611a      	str	r2, [r3, #16]
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	e000ed90 	.word	0xe000ed90

08004f24 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e014      	b.n	8004f60 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	791b      	ldrb	r3, [r3, #4]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fc f9a4 	bl	8001294 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	795b      	ldrb	r3, [r3, #5]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_DAC_Start_DMA+0x1e>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e0ab      	b.n	80050de <HAL_DAC_Start_DMA+0x176>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d12f      	bne.n	8004ff8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	4a52      	ldr	r2, [pc, #328]	@ (80050e8 <HAL_DAC_Start_DMA+0x180>)
 8004f9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4a51      	ldr	r2, [pc, #324]	@ (80050ec <HAL_DAC_Start_DMA+0x184>)
 8004fa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4a50      	ldr	r2, [pc, #320]	@ (80050f0 <HAL_DAC_Start_DMA+0x188>)
 8004fae:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004fbe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d013      	beq.n	8004fee <HAL_DAC_Start_DMA+0x86>
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d845      	bhi.n	8005058 <HAL_DAC_Start_DMA+0xf0>
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_DAC_Start_DMA+0x72>
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d005      	beq.n	8004fe4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004fd8:	e03e      	b.n	8005058 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	613b      	str	r3, [r7, #16]
        break;
 8004fe2:	e03c      	b.n	800505e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	613b      	str	r3, [r7, #16]
        break;
 8004fec:	e037      	b.n	800505e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3310      	adds	r3, #16
 8004ff4:	613b      	str	r3, [r7, #16]
        break;
 8004ff6:	e032      	b.n	800505e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4a3d      	ldr	r2, [pc, #244]	@ (80050f4 <HAL_DAC_Start_DMA+0x18c>)
 8004ffe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a3c      	ldr	r2, [pc, #240]	@ (80050f8 <HAL_DAC_Start_DMA+0x190>)
 8005006:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a3b      	ldr	r2, [pc, #236]	@ (80050fc <HAL_DAC_Start_DMA+0x194>)
 800500e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800501e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	2b08      	cmp	r3, #8
 8005024:	d013      	beq.n	800504e <HAL_DAC_Start_DMA+0xe6>
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d817      	bhi.n	800505c <HAL_DAC_Start_DMA+0xf4>
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_DAC_Start_DMA+0xd2>
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	2b04      	cmp	r3, #4
 8005036:	d005      	beq.n	8005044 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005038:	e010      	b.n	800505c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3314      	adds	r3, #20
 8005040:	613b      	str	r3, [r7, #16]
        break;
 8005042:	e00c      	b.n	800505e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3318      	adds	r3, #24
 800504a:	613b      	str	r3, [r7, #16]
        break;
 800504c:	e007      	b.n	800505e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	331c      	adds	r3, #28
 8005054:	613b      	str	r3, [r7, #16]
        break;
 8005056:	e002      	b.n	800505e <HAL_DAC_Start_DMA+0xf6>
        break;
 8005058:	bf00      	nop
 800505a:	e000      	b.n	800505e <HAL_DAC_Start_DMA+0xf6>
        break;
 800505c:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d111      	bne.n	8005088 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005072:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6898      	ldr	r0, [r3, #8]
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	f000 ff37 	bl	8005ef0 <HAL_DMA_Start_IT>
 8005082:	4603      	mov	r3, r0
 8005084:	75fb      	strb	r3, [r7, #23]
 8005086:	e010      	b.n	80050aa <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8005096:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68d8      	ldr	r0, [r3, #12]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	f000 ff25 	bl	8005ef0 <HAL_DMA_Start_IT>
 80050a6:	4603      	mov	r3, r0
 80050a8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80050b0:	7dfb      	ldrb	r3, [r7, #23]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10c      	bne.n	80050d0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6819      	ldr	r1, [r3, #0]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0310 	and.w	r3, r3, #16
 80050c2:	2201      	movs	r2, #1
 80050c4:	409a      	lsls	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e005      	b.n	80050dc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f043 0204 	orr.w	r2, r3, #4
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	080053b9 	.word	0x080053b9
 80050ec:	080053db 	.word	0x080053db
 80050f0:	080053f7 	.word	0x080053f7
 80050f4:	08005461 	.word	0x08005461
 80050f8:	08005483 	.word	0x08005483
 80050fc:	0800549f 	.word	0x0800549f

08005100 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	795b      	ldrb	r3, [r3, #5]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_DAC_ConfigChannel+0x18>
 8005150:	2302      	movs	r3, #2
 8005152:	e12a      	b.n	80053aa <HAL_DAC_ConfigChannel+0x26e>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2202      	movs	r2, #2
 800515e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b04      	cmp	r3, #4
 8005166:	f040 8081 	bne.w	800526c <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800516a:	f7fd feaf 	bl	8002ecc <HAL_GetTick>
 800516e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d140      	bne.n	80051f8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005176:	e018      	b.n	80051aa <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005178:	f7fd fea8 	bl	8002ecc <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b01      	cmp	r3, #1
 8005184:	d911      	bls.n	80051aa <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800518c:	4b89      	ldr	r3, [pc, #548]	@ (80053b4 <HAL_DAC_ConfigChannel+0x278>)
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	f043 0208 	orr.w	r2, r3, #8
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2203      	movs	r2, #3
 80051a4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e0ff      	b.n	80053aa <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051b0:	4b80      	ldr	r3, [pc, #512]	@ (80053b4 <HAL_DAC_ConfigChannel+0x278>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1df      	bne.n	8005178 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80051b8:	2001      	movs	r0, #1
 80051ba:	f7fd fe93 	bl	8002ee4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	6992      	ldr	r2, [r2, #24]
 80051c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80051c8:	e023      	b.n	8005212 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80051ca:	f7fd fe7f 	bl	8002ecc <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d90f      	bls.n	80051f8 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da0a      	bge.n	80051f8 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f043 0208 	orr.w	r2, r3, #8
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2203      	movs	r2, #3
 80051f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e0d8      	b.n	80053aa <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fe:	2b00      	cmp	r3, #0
 8005200:	dbe3      	blt.n	80051ca <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005202:	2001      	movs	r0, #1
 8005204:	f7fd fe6e 	bl	8002ee4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	6992      	ldr	r2, [r2, #24]
 8005210:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005222:	fa01 f303 	lsl.w	r3, r1, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	ea02 0103 	and.w	r1, r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f003 0310 	and.w	r3, r3, #16
 8005236:	409a      	lsls	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	21ff      	movs	r1, #255	@ 0xff
 800524e:	fa01 f303 	lsl.w	r3, r1, r3
 8005252:	43db      	mvns	r3, r3
 8005254:	ea02 0103 	and.w	r1, r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	409a      	lsls	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d11d      	bne.n	80052b0 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	221f      	movs	r2, #31
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	43db      	mvns	r3, r3
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4013      	ands	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2207      	movs	r2, #7
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	43db      	mvns	r3, r3
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4013      	ands	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d102      	bne.n	80052da <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	e00f      	b.n	80052fa <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d102      	bne.n	80052e8 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80052e2:	2301      	movs	r3, #1
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	e008      	b.n	80052fa <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d102      	bne.n	80052f6 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80052f0:	2301      	movs	r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	e001      	b.n	80052fa <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	4313      	orrs	r3, r2
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	fa02 f303 	lsl.w	r3, r2, r3
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6819      	ldr	r1, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43da      	mvns	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	400a      	ands	r2, r1
 8005340:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	43db      	mvns	r3, r3
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4013      	ands	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6819      	ldr	r1, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	22c0      	movs	r2, #192	@ 0xc0
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43da      	mvns	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	400a      	ands	r2, r1
 800539a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20008000 	.word	0x20008000

080053b8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff fe9a 	bl	8005100 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	711a      	strb	r2, [r3, #4]
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff fe93 	bl	8005114 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005402:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f043 0204 	orr.w	r2, r3, #4
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff fe89 	bl	8005128 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	711a      	strb	r2, [r3, #4]
}
 800541c:	bf00      	nop
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff ffd8 	bl	8005424 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	711a      	strb	r2, [r3, #4]
}
 800547a:	bf00      	nop
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff ffd1 	bl	8005438 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f043 0204 	orr.w	r2, r3, #4
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7ff ffc7 	bl	800544c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	711a      	strb	r2, [r3, #4]
}
 80054c4:	bf00      	nop
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80054d4:	f7fd fcfa 	bl	8002ecc <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e316      	b.n	8005b12 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a66      	ldr	r2, [pc, #408]	@ (8005684 <HAL_DMA_Init+0x1b8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d04a      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a65      	ldr	r2, [pc, #404]	@ (8005688 <HAL_DMA_Init+0x1bc>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d045      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a63      	ldr	r2, [pc, #396]	@ (800568c <HAL_DMA_Init+0x1c0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d040      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a62      	ldr	r2, [pc, #392]	@ (8005690 <HAL_DMA_Init+0x1c4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d03b      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a60      	ldr	r2, [pc, #384]	@ (8005694 <HAL_DMA_Init+0x1c8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d036      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a5f      	ldr	r2, [pc, #380]	@ (8005698 <HAL_DMA_Init+0x1cc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d031      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a5d      	ldr	r2, [pc, #372]	@ (800569c <HAL_DMA_Init+0x1d0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d02c      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a5c      	ldr	r2, [pc, #368]	@ (80056a0 <HAL_DMA_Init+0x1d4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d027      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a5a      	ldr	r2, [pc, #360]	@ (80056a4 <HAL_DMA_Init+0x1d8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d022      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a59      	ldr	r2, [pc, #356]	@ (80056a8 <HAL_DMA_Init+0x1dc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d01d      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a57      	ldr	r2, [pc, #348]	@ (80056ac <HAL_DMA_Init+0x1e0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d018      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a56      	ldr	r2, [pc, #344]	@ (80056b0 <HAL_DMA_Init+0x1e4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a54      	ldr	r2, [pc, #336]	@ (80056b4 <HAL_DMA_Init+0x1e8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00e      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a53      	ldr	r2, [pc, #332]	@ (80056b8 <HAL_DMA_Init+0x1ec>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d009      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a51      	ldr	r2, [pc, #324]	@ (80056bc <HAL_DMA_Init+0x1f0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_DMA_Init+0xb8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a50      	ldr	r2, [pc, #320]	@ (80056c0 <HAL_DMA_Init+0x1f4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_DMA_Init+0xbc>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <HAL_DMA_Init+0xbe>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 813b 	beq.w	8005806 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a37      	ldr	r2, [pc, #220]	@ (8005684 <HAL_DMA_Init+0x1b8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d04a      	beq.n	8005640 <HAL_DMA_Init+0x174>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a36      	ldr	r2, [pc, #216]	@ (8005688 <HAL_DMA_Init+0x1bc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d045      	beq.n	8005640 <HAL_DMA_Init+0x174>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a34      	ldr	r2, [pc, #208]	@ (800568c <HAL_DMA_Init+0x1c0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d040      	beq.n	8005640 <HAL_DMA_Init+0x174>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a33      	ldr	r2, [pc, #204]	@ (8005690 <HAL_DMA_Init+0x1c4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d03b      	beq.n	8005640 <HAL_DMA_Init+0x174>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a31      	ldr	r2, [pc, #196]	@ (8005694 <HAL_DMA_Init+0x1c8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d036      	beq.n	8005640 <HAL_DMA_Init+0x174>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a30      	ldr	r2, [pc, #192]	@ (8005698 <HAL_DMA_Init+0x1cc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d031      	beq.n	8005640 <HAL_DMA_Init+0x174>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2e      	ldr	r2, [pc, #184]	@ (800569c <HAL_DMA_Init+0x1d0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d02c      	beq.n	8005640 <HAL_DMA_Init+0x174>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2d      	ldr	r2, [pc, #180]	@ (80056a0 <HAL_DMA_Init+0x1d4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d027      	beq.n	8005640 <HAL_DMA_Init+0x174>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a2b      	ldr	r2, [pc, #172]	@ (80056a4 <HAL_DMA_Init+0x1d8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d022      	beq.n	8005640 <HAL_DMA_Init+0x174>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a2a      	ldr	r2, [pc, #168]	@ (80056a8 <HAL_DMA_Init+0x1dc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d01d      	beq.n	8005640 <HAL_DMA_Init+0x174>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a28      	ldr	r2, [pc, #160]	@ (80056ac <HAL_DMA_Init+0x1e0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d018      	beq.n	8005640 <HAL_DMA_Init+0x174>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a27      	ldr	r2, [pc, #156]	@ (80056b0 <HAL_DMA_Init+0x1e4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d013      	beq.n	8005640 <HAL_DMA_Init+0x174>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a25      	ldr	r2, [pc, #148]	@ (80056b4 <HAL_DMA_Init+0x1e8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00e      	beq.n	8005640 <HAL_DMA_Init+0x174>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a24      	ldr	r2, [pc, #144]	@ (80056b8 <HAL_DMA_Init+0x1ec>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d009      	beq.n	8005640 <HAL_DMA_Init+0x174>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a22      	ldr	r2, [pc, #136]	@ (80056bc <HAL_DMA_Init+0x1f0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_DMA_Init+0x174>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a21      	ldr	r2, [pc, #132]	@ (80056c0 <HAL_DMA_Init+0x1f4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d108      	bne.n	8005652 <HAL_DMA_Init+0x186>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e007      	b.n	8005662 <HAL_DMA_Init+0x196>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0201 	bic.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005662:	e02f      	b.n	80056c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005664:	f7fd fc32 	bl	8002ecc <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b05      	cmp	r3, #5
 8005670:	d928      	bls.n	80056c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2203      	movs	r2, #3
 800567c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e246      	b.n	8005b12 <HAL_DMA_Init+0x646>
 8005684:	40020010 	.word	0x40020010
 8005688:	40020028 	.word	0x40020028
 800568c:	40020040 	.word	0x40020040
 8005690:	40020058 	.word	0x40020058
 8005694:	40020070 	.word	0x40020070
 8005698:	40020088 	.word	0x40020088
 800569c:	400200a0 	.word	0x400200a0
 80056a0:	400200b8 	.word	0x400200b8
 80056a4:	40020410 	.word	0x40020410
 80056a8:	40020428 	.word	0x40020428
 80056ac:	40020440 	.word	0x40020440
 80056b0:	40020458 	.word	0x40020458
 80056b4:	40020470 	.word	0x40020470
 80056b8:	40020488 	.word	0x40020488
 80056bc:	400204a0 	.word	0x400204a0
 80056c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1c8      	bne.n	8005664 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4b83      	ldr	r3, [pc, #524]	@ (80058ec <HAL_DMA_Init+0x420>)
 80056de:	4013      	ands	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80056ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005702:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	2b04      	cmp	r3, #4
 8005716:	d107      	bne.n	8005728 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005720:	4313      	orrs	r3, r2
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005728:	4b71      	ldr	r3, [pc, #452]	@ (80058f0 <HAL_DMA_Init+0x424>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b71      	ldr	r3, [pc, #452]	@ (80058f4 <HAL_DMA_Init+0x428>)
 800572e:	4013      	ands	r3, r2
 8005730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005734:	d328      	bcc.n	8005788 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b28      	cmp	r3, #40	@ 0x28
 800573c:	d903      	bls.n	8005746 <HAL_DMA_Init+0x27a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b2e      	cmp	r3, #46	@ 0x2e
 8005744:	d917      	bls.n	8005776 <HAL_DMA_Init+0x2aa>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b3e      	cmp	r3, #62	@ 0x3e
 800574c:	d903      	bls.n	8005756 <HAL_DMA_Init+0x28a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b42      	cmp	r3, #66	@ 0x42
 8005754:	d90f      	bls.n	8005776 <HAL_DMA_Init+0x2aa>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b46      	cmp	r3, #70	@ 0x46
 800575c:	d903      	bls.n	8005766 <HAL_DMA_Init+0x29a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b48      	cmp	r3, #72	@ 0x48
 8005764:	d907      	bls.n	8005776 <HAL_DMA_Init+0x2aa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b4e      	cmp	r3, #78	@ 0x4e
 800576c:	d905      	bls.n	800577a <HAL_DMA_Init+0x2ae>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b52      	cmp	r3, #82	@ 0x52
 8005774:	d801      	bhi.n	800577a <HAL_DMA_Init+0x2ae>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <HAL_DMA_Init+0x2b0>
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005786:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0307 	bic.w	r3, r3, #7
 800579e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	d117      	bne.n	80057e2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00e      	beq.n	80057e2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f002 fce9 	bl	800819c <DMA_CheckFifoParam>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2240      	movs	r2, #64	@ 0x40
 80057d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e197      	b.n	8005b12 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f002 fc24 	bl	8008038 <DMA_CalcBaseAndBitshift>
 80057f0:	4603      	mov	r3, r0
 80057f2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	223f      	movs	r2, #63	@ 0x3f
 80057fe:	409a      	lsls	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	e0cd      	b.n	80059a2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a3b      	ldr	r2, [pc, #236]	@ (80058f8 <HAL_DMA_Init+0x42c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d022      	beq.n	8005856 <HAL_DMA_Init+0x38a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a39      	ldr	r2, [pc, #228]	@ (80058fc <HAL_DMA_Init+0x430>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01d      	beq.n	8005856 <HAL_DMA_Init+0x38a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a38      	ldr	r2, [pc, #224]	@ (8005900 <HAL_DMA_Init+0x434>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_DMA_Init+0x38a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a36      	ldr	r2, [pc, #216]	@ (8005904 <HAL_DMA_Init+0x438>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_DMA_Init+0x38a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a35      	ldr	r2, [pc, #212]	@ (8005908 <HAL_DMA_Init+0x43c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00e      	beq.n	8005856 <HAL_DMA_Init+0x38a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a33      	ldr	r2, [pc, #204]	@ (800590c <HAL_DMA_Init+0x440>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_DMA_Init+0x38a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a32      	ldr	r2, [pc, #200]	@ (8005910 <HAL_DMA_Init+0x444>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_DMA_Init+0x38a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a30      	ldr	r2, [pc, #192]	@ (8005914 <HAL_DMA_Init+0x448>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d101      	bne.n	800585a <HAL_DMA_Init+0x38e>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <HAL_DMA_Init+0x390>
 800585a:	2300      	movs	r3, #0
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8097 	beq.w	8005990 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a24      	ldr	r2, [pc, #144]	@ (80058f8 <HAL_DMA_Init+0x42c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d021      	beq.n	80058b0 <HAL_DMA_Init+0x3e4>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a22      	ldr	r2, [pc, #136]	@ (80058fc <HAL_DMA_Init+0x430>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d01c      	beq.n	80058b0 <HAL_DMA_Init+0x3e4>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a21      	ldr	r2, [pc, #132]	@ (8005900 <HAL_DMA_Init+0x434>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d017      	beq.n	80058b0 <HAL_DMA_Init+0x3e4>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a1f      	ldr	r2, [pc, #124]	@ (8005904 <HAL_DMA_Init+0x438>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d012      	beq.n	80058b0 <HAL_DMA_Init+0x3e4>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1e      	ldr	r2, [pc, #120]	@ (8005908 <HAL_DMA_Init+0x43c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00d      	beq.n	80058b0 <HAL_DMA_Init+0x3e4>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1c      	ldr	r2, [pc, #112]	@ (800590c <HAL_DMA_Init+0x440>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d008      	beq.n	80058b0 <HAL_DMA_Init+0x3e4>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005910 <HAL_DMA_Init+0x444>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <HAL_DMA_Init+0x3e4>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a19      	ldr	r2, [pc, #100]	@ (8005914 <HAL_DMA_Init+0x448>)
 80058ae:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4b13      	ldr	r3, [pc, #76]	@ (8005918 <HAL_DMA_Init+0x44c>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b40      	cmp	r3, #64	@ 0x40
 80058d6:	d021      	beq.n	800591c <HAL_DMA_Init+0x450>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b80      	cmp	r3, #128	@ 0x80
 80058de:	d102      	bne.n	80058e6 <HAL_DMA_Init+0x41a>
 80058e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80058e4:	e01b      	b.n	800591e <HAL_DMA_Init+0x452>
 80058e6:	2300      	movs	r3, #0
 80058e8:	e019      	b.n	800591e <HAL_DMA_Init+0x452>
 80058ea:	bf00      	nop
 80058ec:	fe10803f 	.word	0xfe10803f
 80058f0:	5c001000 	.word	0x5c001000
 80058f4:	ffff0000 	.word	0xffff0000
 80058f8:	58025408 	.word	0x58025408
 80058fc:	5802541c 	.word	0x5802541c
 8005900:	58025430 	.word	0x58025430
 8005904:	58025444 	.word	0x58025444
 8005908:	58025458 	.word	0x58025458
 800590c:	5802546c 	.word	0x5802546c
 8005910:	58025480 	.word	0x58025480
 8005914:	58025494 	.word	0x58025494
 8005918:	fffe000f 	.word	0xfffe000f
 800591c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	68d2      	ldr	r2, [r2, #12]
 8005922:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005924:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800592c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005934:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800593c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005944:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800594c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	4b6e      	ldr	r3, [pc, #440]	@ (8005b1c <HAL_DMA_Init+0x650>)
 8005964:	4413      	add	r3, r2
 8005966:	4a6e      	ldr	r2, [pc, #440]	@ (8005b20 <HAL_DMA_Init+0x654>)
 8005968:	fba2 2303 	umull	r2, r3, r2, r3
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	009a      	lsls	r2, r3, #2
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f002 fb5f 	bl	8008038 <DMA_CalcBaseAndBitshift>
 800597a:	4603      	mov	r3, r0
 800597c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	2201      	movs	r2, #1
 8005988:	409a      	lsls	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	605a      	str	r2, [r3, #4]
 800598e:	e008      	b.n	80059a2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2240      	movs	r2, #64	@ 0x40
 8005994:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2203      	movs	r2, #3
 800599a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e0b7      	b.n	8005b12 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005b24 <HAL_DMA_Init+0x658>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d072      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a5d      	ldr	r2, [pc, #372]	@ (8005b28 <HAL_DMA_Init+0x65c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d06d      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a5c      	ldr	r2, [pc, #368]	@ (8005b2c <HAL_DMA_Init+0x660>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d068      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005b30 <HAL_DMA_Init+0x664>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d063      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a59      	ldr	r2, [pc, #356]	@ (8005b34 <HAL_DMA_Init+0x668>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d05e      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a57      	ldr	r2, [pc, #348]	@ (8005b38 <HAL_DMA_Init+0x66c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d059      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a56      	ldr	r2, [pc, #344]	@ (8005b3c <HAL_DMA_Init+0x670>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d054      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a54      	ldr	r2, [pc, #336]	@ (8005b40 <HAL_DMA_Init+0x674>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d04f      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a53      	ldr	r2, [pc, #332]	@ (8005b44 <HAL_DMA_Init+0x678>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d04a      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a51      	ldr	r2, [pc, #324]	@ (8005b48 <HAL_DMA_Init+0x67c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d045      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a50      	ldr	r2, [pc, #320]	@ (8005b4c <HAL_DMA_Init+0x680>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d040      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a4e      	ldr	r2, [pc, #312]	@ (8005b50 <HAL_DMA_Init+0x684>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d03b      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8005b54 <HAL_DMA_Init+0x688>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d036      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a4b      	ldr	r2, [pc, #300]	@ (8005b58 <HAL_DMA_Init+0x68c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d031      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a4a      	ldr	r2, [pc, #296]	@ (8005b5c <HAL_DMA_Init+0x690>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d02c      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a48      	ldr	r2, [pc, #288]	@ (8005b60 <HAL_DMA_Init+0x694>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d027      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a47      	ldr	r2, [pc, #284]	@ (8005b64 <HAL_DMA_Init+0x698>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d022      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a45      	ldr	r2, [pc, #276]	@ (8005b68 <HAL_DMA_Init+0x69c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d01d      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a44      	ldr	r2, [pc, #272]	@ (8005b6c <HAL_DMA_Init+0x6a0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d018      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a42      	ldr	r2, [pc, #264]	@ (8005b70 <HAL_DMA_Init+0x6a4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d013      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a41      	ldr	r2, [pc, #260]	@ (8005b74 <HAL_DMA_Init+0x6a8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00e      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a3f      	ldr	r2, [pc, #252]	@ (8005b78 <HAL_DMA_Init+0x6ac>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d009      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a3e      	ldr	r2, [pc, #248]	@ (8005b7c <HAL_DMA_Init+0x6b0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d004      	beq.n	8005a92 <HAL_DMA_Init+0x5c6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b80 <HAL_DMA_Init+0x6b4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d101      	bne.n	8005a96 <HAL_DMA_Init+0x5ca>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <HAL_DMA_Init+0x5cc>
 8005a96:	2300      	movs	r3, #0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d032      	beq.n	8005b02 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f002 fbf9 	bl	8008294 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b80      	cmp	r3, #128	@ 0x80
 8005aa8:	d102      	bne.n	8005ab0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005ac4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d010      	beq.n	8005af0 <HAL_DMA_Init+0x624>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d80c      	bhi.n	8005af0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f002 fc76 	bl	80083c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005aec:	605a      	str	r2, [r3, #4]
 8005aee:	e008      	b.n	8005b02 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	a7fdabf8 	.word	0xa7fdabf8
 8005b20:	cccccccd 	.word	0xcccccccd
 8005b24:	40020010 	.word	0x40020010
 8005b28:	40020028 	.word	0x40020028
 8005b2c:	40020040 	.word	0x40020040
 8005b30:	40020058 	.word	0x40020058
 8005b34:	40020070 	.word	0x40020070
 8005b38:	40020088 	.word	0x40020088
 8005b3c:	400200a0 	.word	0x400200a0
 8005b40:	400200b8 	.word	0x400200b8
 8005b44:	40020410 	.word	0x40020410
 8005b48:	40020428 	.word	0x40020428
 8005b4c:	40020440 	.word	0x40020440
 8005b50:	40020458 	.word	0x40020458
 8005b54:	40020470 	.word	0x40020470
 8005b58:	40020488 	.word	0x40020488
 8005b5c:	400204a0 	.word	0x400204a0
 8005b60:	400204b8 	.word	0x400204b8
 8005b64:	58025408 	.word	0x58025408
 8005b68:	5802541c 	.word	0x5802541c
 8005b6c:	58025430 	.word	0x58025430
 8005b70:	58025444 	.word	0x58025444
 8005b74:	58025458 	.word	0x58025458
 8005b78:	5802546c 	.word	0x5802546c
 8005b7c:	58025480 	.word	0x58025480
 8005b80:	58025494 	.word	0x58025494

08005b84 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e1a8      	b.n	8005ee8 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a82      	ldr	r2, [pc, #520]	@ (8005da4 <HAL_DMA_DeInit+0x220>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d04a      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a80      	ldr	r2, [pc, #512]	@ (8005da8 <HAL_DMA_DeInit+0x224>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d045      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a7f      	ldr	r2, [pc, #508]	@ (8005dac <HAL_DMA_DeInit+0x228>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d040      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a7d      	ldr	r2, [pc, #500]	@ (8005db0 <HAL_DMA_DeInit+0x22c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d03b      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a7c      	ldr	r2, [pc, #496]	@ (8005db4 <HAL_DMA_DeInit+0x230>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d036      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a7a      	ldr	r2, [pc, #488]	@ (8005db8 <HAL_DMA_DeInit+0x234>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d031      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a79      	ldr	r2, [pc, #484]	@ (8005dbc <HAL_DMA_DeInit+0x238>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d02c      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a77      	ldr	r2, [pc, #476]	@ (8005dc0 <HAL_DMA_DeInit+0x23c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d027      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a76      	ldr	r2, [pc, #472]	@ (8005dc4 <HAL_DMA_DeInit+0x240>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d022      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a74      	ldr	r2, [pc, #464]	@ (8005dc8 <HAL_DMA_DeInit+0x244>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01d      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a73      	ldr	r2, [pc, #460]	@ (8005dcc <HAL_DMA_DeInit+0x248>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d018      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a71      	ldr	r2, [pc, #452]	@ (8005dd0 <HAL_DMA_DeInit+0x24c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d013      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a70      	ldr	r2, [pc, #448]	@ (8005dd4 <HAL_DMA_DeInit+0x250>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d00e      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a6e      	ldr	r2, [pc, #440]	@ (8005dd8 <HAL_DMA_DeInit+0x254>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d009      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a6d      	ldr	r2, [pc, #436]	@ (8005ddc <HAL_DMA_DeInit+0x258>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d004      	beq.n	8005c36 <HAL_DMA_DeInit+0xb2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a6b      	ldr	r2, [pc, #428]	@ (8005de0 <HAL_DMA_DeInit+0x25c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d108      	bne.n	8005c48 <HAL_DMA_DeInit+0xc4>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	e007      	b.n	8005c58 <HAL_DMA_DeInit+0xd4>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0201 	bic.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a51      	ldr	r2, [pc, #324]	@ (8005da4 <HAL_DMA_DeInit+0x220>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d04a      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a50      	ldr	r2, [pc, #320]	@ (8005da8 <HAL_DMA_DeInit+0x224>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d045      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a4e      	ldr	r2, [pc, #312]	@ (8005dac <HAL_DMA_DeInit+0x228>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d040      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8005db0 <HAL_DMA_DeInit+0x22c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d03b      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a4b      	ldr	r2, [pc, #300]	@ (8005db4 <HAL_DMA_DeInit+0x230>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d036      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8005db8 <HAL_DMA_DeInit+0x234>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d031      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a48      	ldr	r2, [pc, #288]	@ (8005dbc <HAL_DMA_DeInit+0x238>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d02c      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a47      	ldr	r2, [pc, #284]	@ (8005dc0 <HAL_DMA_DeInit+0x23c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d027      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a45      	ldr	r2, [pc, #276]	@ (8005dc4 <HAL_DMA_DeInit+0x240>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d022      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a44      	ldr	r2, [pc, #272]	@ (8005dc8 <HAL_DMA_DeInit+0x244>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d01d      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a42      	ldr	r2, [pc, #264]	@ (8005dcc <HAL_DMA_DeInit+0x248>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d018      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a41      	ldr	r2, [pc, #260]	@ (8005dd0 <HAL_DMA_DeInit+0x24c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a3f      	ldr	r2, [pc, #252]	@ (8005dd4 <HAL_DMA_DeInit+0x250>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a3e      	ldr	r2, [pc, #248]	@ (8005dd8 <HAL_DMA_DeInit+0x254>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a3c      	ldr	r2, [pc, #240]	@ (8005ddc <HAL_DMA_DeInit+0x258>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_DMA_DeInit+0x174>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a3b      	ldr	r2, [pc, #236]	@ (8005de0 <HAL_DMA_DeInit+0x25c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d101      	bne.n	8005cfc <HAL_DMA_DeInit+0x178>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e000      	b.n	8005cfe <HAL_DMA_DeInit+0x17a>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d025      	beq.n	8005d4e <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2200      	movs	r2, #0
 8005d18:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2200      	movs	r2, #0
 8005d28:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2221      	movs	r2, #33	@ 0x21
 8005d30:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f002 f980 	bl	8008038 <DMA_CalcBaseAndBitshift>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	223f      	movs	r2, #63	@ 0x3f
 8005d46:	409a      	lsls	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	609a      	str	r2, [r3, #8]
 8005d4c:	e081      	b.n	8005e52 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a24      	ldr	r2, [pc, #144]	@ (8005de4 <HAL_DMA_DeInit+0x260>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d022      	beq.n	8005d9e <HAL_DMA_DeInit+0x21a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a22      	ldr	r2, [pc, #136]	@ (8005de8 <HAL_DMA_DeInit+0x264>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01d      	beq.n	8005d9e <HAL_DMA_DeInit+0x21a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a21      	ldr	r2, [pc, #132]	@ (8005dec <HAL_DMA_DeInit+0x268>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d018      	beq.n	8005d9e <HAL_DMA_DeInit+0x21a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a1f      	ldr	r2, [pc, #124]	@ (8005df0 <HAL_DMA_DeInit+0x26c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d013      	beq.n	8005d9e <HAL_DMA_DeInit+0x21a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005df4 <HAL_DMA_DeInit+0x270>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00e      	beq.n	8005d9e <HAL_DMA_DeInit+0x21a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1c      	ldr	r2, [pc, #112]	@ (8005df8 <HAL_DMA_DeInit+0x274>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d009      	beq.n	8005d9e <HAL_DMA_DeInit+0x21a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dfc <HAL_DMA_DeInit+0x278>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d004      	beq.n	8005d9e <HAL_DMA_DeInit+0x21a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a19      	ldr	r2, [pc, #100]	@ (8005e00 <HAL_DMA_DeInit+0x27c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d132      	bne.n	8005e04 <HAL_DMA_DeInit+0x280>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e031      	b.n	8005e06 <HAL_DMA_DeInit+0x282>
 8005da2:	bf00      	nop
 8005da4:	40020010 	.word	0x40020010
 8005da8:	40020028 	.word	0x40020028
 8005dac:	40020040 	.word	0x40020040
 8005db0:	40020058 	.word	0x40020058
 8005db4:	40020070 	.word	0x40020070
 8005db8:	40020088 	.word	0x40020088
 8005dbc:	400200a0 	.word	0x400200a0
 8005dc0:	400200b8 	.word	0x400200b8
 8005dc4:	40020410 	.word	0x40020410
 8005dc8:	40020428 	.word	0x40020428
 8005dcc:	40020440 	.word	0x40020440
 8005dd0:	40020458 	.word	0x40020458
 8005dd4:	40020470 	.word	0x40020470
 8005dd8:	40020488 	.word	0x40020488
 8005ddc:	400204a0 	.word	0x400204a0
 8005de0:	400204b8 	.word	0x400204b8
 8005de4:	58025408 	.word	0x58025408
 8005de8:	5802541c 	.word	0x5802541c
 8005dec:	58025430 	.word	0x58025430
 8005df0:	58025444 	.word	0x58025444
 8005df4:	58025458 	.word	0x58025458
 8005df8:	5802546c 	.word	0x5802546c
 8005dfc:	58025480 	.word	0x58025480
 8005e00:	58025494 	.word	0x58025494
 8005e04:	2300      	movs	r3, #0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d021      	beq.n	8005e4e <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f002 f900 	bl	8008038 <DMA_CalcBaseAndBitshift>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	2201      	movs	r2, #1
 8005e46:	409a      	lsls	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	e001      	b.n	8005e52 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e04a      	b.n	8005ee8 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f002 fa1e 	bl	8008294 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005e70:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00f      	beq.n	8005e9a <HAL_DMA_DeInit+0x316>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d80b      	bhi.n	8005e9a <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f002 faa0 	bl	80083c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005e98:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e226      	b.n	800635a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_DMA_Start_IT+0x2a>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e21f      	b.n	800635a <HAL_DMA_Start_IT+0x46a>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	f040 820a 	bne.w	8006344 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a68      	ldr	r2, [pc, #416]	@ (80060e4 <HAL_DMA_Start_IT+0x1f4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d04a      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a66      	ldr	r2, [pc, #408]	@ (80060e8 <HAL_DMA_Start_IT+0x1f8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d045      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a65      	ldr	r2, [pc, #404]	@ (80060ec <HAL_DMA_Start_IT+0x1fc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d040      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a63      	ldr	r2, [pc, #396]	@ (80060f0 <HAL_DMA_Start_IT+0x200>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d03b      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a62      	ldr	r2, [pc, #392]	@ (80060f4 <HAL_DMA_Start_IT+0x204>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d036      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a60      	ldr	r2, [pc, #384]	@ (80060f8 <HAL_DMA_Start_IT+0x208>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d031      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a5f      	ldr	r2, [pc, #380]	@ (80060fc <HAL_DMA_Start_IT+0x20c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d02c      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a5d      	ldr	r2, [pc, #372]	@ (8006100 <HAL_DMA_Start_IT+0x210>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d027      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a5c      	ldr	r2, [pc, #368]	@ (8006104 <HAL_DMA_Start_IT+0x214>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d022      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a5a      	ldr	r2, [pc, #360]	@ (8006108 <HAL_DMA_Start_IT+0x218>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d01d      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a59      	ldr	r2, [pc, #356]	@ (800610c <HAL_DMA_Start_IT+0x21c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d018      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a57      	ldr	r2, [pc, #348]	@ (8006110 <HAL_DMA_Start_IT+0x220>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a56      	ldr	r2, [pc, #344]	@ (8006114 <HAL_DMA_Start_IT+0x224>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a54      	ldr	r2, [pc, #336]	@ (8006118 <HAL_DMA_Start_IT+0x228>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a53      	ldr	r2, [pc, #332]	@ (800611c <HAL_DMA_Start_IT+0x22c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a51      	ldr	r2, [pc, #324]	@ (8006120 <HAL_DMA_Start_IT+0x230>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <HAL_DMA_Start_IT+0x100>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e007      	b.n	8006000 <HAL_DMA_Start_IT+0x110>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f001 fe6a 	bl	8007ce0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a34      	ldr	r2, [pc, #208]	@ (80060e4 <HAL_DMA_Start_IT+0x1f4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d04a      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a33      	ldr	r2, [pc, #204]	@ (80060e8 <HAL_DMA_Start_IT+0x1f8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d045      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a31      	ldr	r2, [pc, #196]	@ (80060ec <HAL_DMA_Start_IT+0x1fc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d040      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a30      	ldr	r2, [pc, #192]	@ (80060f0 <HAL_DMA_Start_IT+0x200>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d03b      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2e      	ldr	r2, [pc, #184]	@ (80060f4 <HAL_DMA_Start_IT+0x204>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d036      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2d      	ldr	r2, [pc, #180]	@ (80060f8 <HAL_DMA_Start_IT+0x208>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d031      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2b      	ldr	r2, [pc, #172]	@ (80060fc <HAL_DMA_Start_IT+0x20c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02c      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2a      	ldr	r2, [pc, #168]	@ (8006100 <HAL_DMA_Start_IT+0x210>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d027      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a28      	ldr	r2, [pc, #160]	@ (8006104 <HAL_DMA_Start_IT+0x214>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a27      	ldr	r2, [pc, #156]	@ (8006108 <HAL_DMA_Start_IT+0x218>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d01d      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a25      	ldr	r2, [pc, #148]	@ (800610c <HAL_DMA_Start_IT+0x21c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a24      	ldr	r2, [pc, #144]	@ (8006110 <HAL_DMA_Start_IT+0x220>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a22      	ldr	r2, [pc, #136]	@ (8006114 <HAL_DMA_Start_IT+0x224>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a21      	ldr	r2, [pc, #132]	@ (8006118 <HAL_DMA_Start_IT+0x228>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1f      	ldr	r2, [pc, #124]	@ (800611c <HAL_DMA_Start_IT+0x22c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006120 <HAL_DMA_Start_IT+0x230>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d101      	bne.n	80060b0 <HAL_DMA_Start_IT+0x1c0>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <HAL_DMA_Start_IT+0x1c2>
 80060b0:	2300      	movs	r3, #0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d036      	beq.n	8006124 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f023 021e 	bic.w	r2, r3, #30
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0216 	orr.w	r2, r2, #22
 80060c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d03e      	beq.n	8006150 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0208 	orr.w	r2, r2, #8
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e035      	b.n	8006150 <HAL_DMA_Start_IT+0x260>
 80060e4:	40020010 	.word	0x40020010
 80060e8:	40020028 	.word	0x40020028
 80060ec:	40020040 	.word	0x40020040
 80060f0:	40020058 	.word	0x40020058
 80060f4:	40020070 	.word	0x40020070
 80060f8:	40020088 	.word	0x40020088
 80060fc:	400200a0 	.word	0x400200a0
 8006100:	400200b8 	.word	0x400200b8
 8006104:	40020410 	.word	0x40020410
 8006108:	40020428 	.word	0x40020428
 800610c:	40020440 	.word	0x40020440
 8006110:	40020458 	.word	0x40020458
 8006114:	40020470 	.word	0x40020470
 8006118:	40020488 	.word	0x40020488
 800611c:	400204a0 	.word	0x400204a0
 8006120:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 020e 	bic.w	r2, r3, #14
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 020a 	orr.w	r2, r2, #10
 8006136:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0204 	orr.w	r2, r2, #4
 800614e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a83      	ldr	r2, [pc, #524]	@ (8006364 <HAL_DMA_Start_IT+0x474>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d072      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a82      	ldr	r2, [pc, #520]	@ (8006368 <HAL_DMA_Start_IT+0x478>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d06d      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a80      	ldr	r2, [pc, #512]	@ (800636c <HAL_DMA_Start_IT+0x47c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d068      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a7f      	ldr	r2, [pc, #508]	@ (8006370 <HAL_DMA_Start_IT+0x480>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d063      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7d      	ldr	r2, [pc, #500]	@ (8006374 <HAL_DMA_Start_IT+0x484>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d05e      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a7c      	ldr	r2, [pc, #496]	@ (8006378 <HAL_DMA_Start_IT+0x488>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d059      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a7a      	ldr	r2, [pc, #488]	@ (800637c <HAL_DMA_Start_IT+0x48c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d054      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a79      	ldr	r2, [pc, #484]	@ (8006380 <HAL_DMA_Start_IT+0x490>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d04f      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a77      	ldr	r2, [pc, #476]	@ (8006384 <HAL_DMA_Start_IT+0x494>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d04a      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a76      	ldr	r2, [pc, #472]	@ (8006388 <HAL_DMA_Start_IT+0x498>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d045      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a74      	ldr	r2, [pc, #464]	@ (800638c <HAL_DMA_Start_IT+0x49c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d040      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a73      	ldr	r2, [pc, #460]	@ (8006390 <HAL_DMA_Start_IT+0x4a0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d03b      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a71      	ldr	r2, [pc, #452]	@ (8006394 <HAL_DMA_Start_IT+0x4a4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d036      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a70      	ldr	r2, [pc, #448]	@ (8006398 <HAL_DMA_Start_IT+0x4a8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d031      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a6e      	ldr	r2, [pc, #440]	@ (800639c <HAL_DMA_Start_IT+0x4ac>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d02c      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6d      	ldr	r2, [pc, #436]	@ (80063a0 <HAL_DMA_Start_IT+0x4b0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d027      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6b      	ldr	r2, [pc, #428]	@ (80063a4 <HAL_DMA_Start_IT+0x4b4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d022      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6a      	ldr	r2, [pc, #424]	@ (80063a8 <HAL_DMA_Start_IT+0x4b8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d01d      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a68      	ldr	r2, [pc, #416]	@ (80063ac <HAL_DMA_Start_IT+0x4bc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d018      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a67      	ldr	r2, [pc, #412]	@ (80063b0 <HAL_DMA_Start_IT+0x4c0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a65      	ldr	r2, [pc, #404]	@ (80063b4 <HAL_DMA_Start_IT+0x4c4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00e      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a64      	ldr	r2, [pc, #400]	@ (80063b8 <HAL_DMA_Start_IT+0x4c8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d009      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a62      	ldr	r2, [pc, #392]	@ (80063bc <HAL_DMA_Start_IT+0x4cc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a61      	ldr	r2, [pc, #388]	@ (80063c0 <HAL_DMA_Start_IT+0x4d0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d101      	bne.n	8006244 <HAL_DMA_Start_IT+0x354>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_DMA_Start_IT+0x356>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01a      	beq.n	8006280 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006262:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006266:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800627a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800627e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a37      	ldr	r2, [pc, #220]	@ (8006364 <HAL_DMA_Start_IT+0x474>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d04a      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a36      	ldr	r2, [pc, #216]	@ (8006368 <HAL_DMA_Start_IT+0x478>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d045      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a34      	ldr	r2, [pc, #208]	@ (800636c <HAL_DMA_Start_IT+0x47c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d040      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a33      	ldr	r2, [pc, #204]	@ (8006370 <HAL_DMA_Start_IT+0x480>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d03b      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a31      	ldr	r2, [pc, #196]	@ (8006374 <HAL_DMA_Start_IT+0x484>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d036      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a30      	ldr	r2, [pc, #192]	@ (8006378 <HAL_DMA_Start_IT+0x488>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d031      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2e      	ldr	r2, [pc, #184]	@ (800637c <HAL_DMA_Start_IT+0x48c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d02c      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006380 <HAL_DMA_Start_IT+0x490>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d027      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006384 <HAL_DMA_Start_IT+0x494>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d022      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2a      	ldr	r2, [pc, #168]	@ (8006388 <HAL_DMA_Start_IT+0x498>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d01d      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a28      	ldr	r2, [pc, #160]	@ (800638c <HAL_DMA_Start_IT+0x49c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d018      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a27      	ldr	r2, [pc, #156]	@ (8006390 <HAL_DMA_Start_IT+0x4a0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a25      	ldr	r2, [pc, #148]	@ (8006394 <HAL_DMA_Start_IT+0x4a4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a24      	ldr	r2, [pc, #144]	@ (8006398 <HAL_DMA_Start_IT+0x4a8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a22      	ldr	r2, [pc, #136]	@ (800639c <HAL_DMA_Start_IT+0x4ac>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a21      	ldr	r2, [pc, #132]	@ (80063a0 <HAL_DMA_Start_IT+0x4b0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d108      	bne.n	8006332 <HAL_DMA_Start_IT+0x442>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e012      	b.n	8006358 <HAL_DMA_Start_IT+0x468>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e009      	b.n	8006358 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800634a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40020010 	.word	0x40020010
 8006368:	40020028 	.word	0x40020028
 800636c:	40020040 	.word	0x40020040
 8006370:	40020058 	.word	0x40020058
 8006374:	40020070 	.word	0x40020070
 8006378:	40020088 	.word	0x40020088
 800637c:	400200a0 	.word	0x400200a0
 8006380:	400200b8 	.word	0x400200b8
 8006384:	40020410 	.word	0x40020410
 8006388:	40020428 	.word	0x40020428
 800638c:	40020440 	.word	0x40020440
 8006390:	40020458 	.word	0x40020458
 8006394:	40020470 	.word	0x40020470
 8006398:	40020488 	.word	0x40020488
 800639c:	400204a0 	.word	0x400204a0
 80063a0:	400204b8 	.word	0x400204b8
 80063a4:	58025408 	.word	0x58025408
 80063a8:	5802541c 	.word	0x5802541c
 80063ac:	58025430 	.word	0x58025430
 80063b0:	58025444 	.word	0x58025444
 80063b4:	58025458 	.word	0x58025458
 80063b8:	5802546c 	.word	0x5802546c
 80063bc:	58025480 	.word	0x58025480
 80063c0:	58025494 	.word	0x58025494

080063c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80063cc:	f7fc fd7e 	bl	8002ecc <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e2dc      	b.n	8006996 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d008      	beq.n	80063fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2280      	movs	r2, #128	@ 0x80
 80063ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e2cd      	b.n	8006996 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a76      	ldr	r2, [pc, #472]	@ (80065d8 <HAL_DMA_Abort+0x214>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d04a      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a74      	ldr	r2, [pc, #464]	@ (80065dc <HAL_DMA_Abort+0x218>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d045      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a73      	ldr	r2, [pc, #460]	@ (80065e0 <HAL_DMA_Abort+0x21c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d040      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a71      	ldr	r2, [pc, #452]	@ (80065e4 <HAL_DMA_Abort+0x220>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d03b      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a70      	ldr	r2, [pc, #448]	@ (80065e8 <HAL_DMA_Abort+0x224>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d036      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a6e      	ldr	r2, [pc, #440]	@ (80065ec <HAL_DMA_Abort+0x228>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d031      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a6d      	ldr	r2, [pc, #436]	@ (80065f0 <HAL_DMA_Abort+0x22c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d02c      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a6b      	ldr	r2, [pc, #428]	@ (80065f4 <HAL_DMA_Abort+0x230>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d027      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a6a      	ldr	r2, [pc, #424]	@ (80065f8 <HAL_DMA_Abort+0x234>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a68      	ldr	r2, [pc, #416]	@ (80065fc <HAL_DMA_Abort+0x238>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01d      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a67      	ldr	r2, [pc, #412]	@ (8006600 <HAL_DMA_Abort+0x23c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a65      	ldr	r2, [pc, #404]	@ (8006604 <HAL_DMA_Abort+0x240>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a64      	ldr	r2, [pc, #400]	@ (8006608 <HAL_DMA_Abort+0x244>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a62      	ldr	r2, [pc, #392]	@ (800660c <HAL_DMA_Abort+0x248>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a61      	ldr	r2, [pc, #388]	@ (8006610 <HAL_DMA_Abort+0x24c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_DMA_Abort+0xd6>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a5f      	ldr	r2, [pc, #380]	@ (8006614 <HAL_DMA_Abort+0x250>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d101      	bne.n	800649e <HAL_DMA_Abort+0xda>
 800649a:	2301      	movs	r3, #1
 800649c:	e000      	b.n	80064a0 <HAL_DMA_Abort+0xdc>
 800649e:	2300      	movs	r3, #0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d013      	beq.n	80064cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 021e 	bic.w	r2, r2, #30
 80064b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695a      	ldr	r2, [r3, #20]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	e00a      	b.n	80064e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 020e 	bic.w	r2, r2, #14
 80064da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a3c      	ldr	r2, [pc, #240]	@ (80065d8 <HAL_DMA_Abort+0x214>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d072      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a3a      	ldr	r2, [pc, #232]	@ (80065dc <HAL_DMA_Abort+0x218>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d06d      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a39      	ldr	r2, [pc, #228]	@ (80065e0 <HAL_DMA_Abort+0x21c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d068      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a37      	ldr	r2, [pc, #220]	@ (80065e4 <HAL_DMA_Abort+0x220>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d063      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a36      	ldr	r2, [pc, #216]	@ (80065e8 <HAL_DMA_Abort+0x224>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d05e      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a34      	ldr	r2, [pc, #208]	@ (80065ec <HAL_DMA_Abort+0x228>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d059      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a33      	ldr	r2, [pc, #204]	@ (80065f0 <HAL_DMA_Abort+0x22c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d054      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a31      	ldr	r2, [pc, #196]	@ (80065f4 <HAL_DMA_Abort+0x230>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d04f      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a30      	ldr	r2, [pc, #192]	@ (80065f8 <HAL_DMA_Abort+0x234>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d04a      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a2e      	ldr	r2, [pc, #184]	@ (80065fc <HAL_DMA_Abort+0x238>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d045      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a2d      	ldr	r2, [pc, #180]	@ (8006600 <HAL_DMA_Abort+0x23c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d040      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a2b      	ldr	r2, [pc, #172]	@ (8006604 <HAL_DMA_Abort+0x240>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d03b      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2a      	ldr	r2, [pc, #168]	@ (8006608 <HAL_DMA_Abort+0x244>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d036      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a28      	ldr	r2, [pc, #160]	@ (800660c <HAL_DMA_Abort+0x248>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d031      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a27      	ldr	r2, [pc, #156]	@ (8006610 <HAL_DMA_Abort+0x24c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d02c      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a25      	ldr	r2, [pc, #148]	@ (8006614 <HAL_DMA_Abort+0x250>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d027      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a24      	ldr	r2, [pc, #144]	@ (8006618 <HAL_DMA_Abort+0x254>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d022      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a22      	ldr	r2, [pc, #136]	@ (800661c <HAL_DMA_Abort+0x258>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01d      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a21      	ldr	r2, [pc, #132]	@ (8006620 <HAL_DMA_Abort+0x25c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d018      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006624 <HAL_DMA_Abort+0x260>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d013      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006628 <HAL_DMA_Abort+0x264>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00e      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	@ (800662c <HAL_DMA_Abort+0x268>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d009      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006630 <HAL_DMA_Abort+0x26c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_DMA_Abort+0x20e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a19      	ldr	r2, [pc, #100]	@ (8006634 <HAL_DMA_Abort+0x270>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d132      	bne.n	8006638 <HAL_DMA_Abort+0x274>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e031      	b.n	800663a <HAL_DMA_Abort+0x276>
 80065d6:	bf00      	nop
 80065d8:	40020010 	.word	0x40020010
 80065dc:	40020028 	.word	0x40020028
 80065e0:	40020040 	.word	0x40020040
 80065e4:	40020058 	.word	0x40020058
 80065e8:	40020070 	.word	0x40020070
 80065ec:	40020088 	.word	0x40020088
 80065f0:	400200a0 	.word	0x400200a0
 80065f4:	400200b8 	.word	0x400200b8
 80065f8:	40020410 	.word	0x40020410
 80065fc:	40020428 	.word	0x40020428
 8006600:	40020440 	.word	0x40020440
 8006604:	40020458 	.word	0x40020458
 8006608:	40020470 	.word	0x40020470
 800660c:	40020488 	.word	0x40020488
 8006610:	400204a0 	.word	0x400204a0
 8006614:	400204b8 	.word	0x400204b8
 8006618:	58025408 	.word	0x58025408
 800661c:	5802541c 	.word	0x5802541c
 8006620:	58025430 	.word	0x58025430
 8006624:	58025444 	.word	0x58025444
 8006628:	58025458 	.word	0x58025458
 800662c:	5802546c 	.word	0x5802546c
 8006630:	58025480 	.word	0x58025480
 8006634:	58025494 	.word	0x58025494
 8006638:	2300      	movs	r3, #0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006648:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800664c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a6d      	ldr	r2, [pc, #436]	@ (8006808 <HAL_DMA_Abort+0x444>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d04a      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a6b      	ldr	r2, [pc, #428]	@ (800680c <HAL_DMA_Abort+0x448>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d045      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a6a      	ldr	r2, [pc, #424]	@ (8006810 <HAL_DMA_Abort+0x44c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d040      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a68      	ldr	r2, [pc, #416]	@ (8006814 <HAL_DMA_Abort+0x450>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d03b      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a67      	ldr	r2, [pc, #412]	@ (8006818 <HAL_DMA_Abort+0x454>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d036      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a65      	ldr	r2, [pc, #404]	@ (800681c <HAL_DMA_Abort+0x458>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d031      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a64      	ldr	r2, [pc, #400]	@ (8006820 <HAL_DMA_Abort+0x45c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d02c      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a62      	ldr	r2, [pc, #392]	@ (8006824 <HAL_DMA_Abort+0x460>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d027      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a61      	ldr	r2, [pc, #388]	@ (8006828 <HAL_DMA_Abort+0x464>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d022      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a5f      	ldr	r2, [pc, #380]	@ (800682c <HAL_DMA_Abort+0x468>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01d      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a5e      	ldr	r2, [pc, #376]	@ (8006830 <HAL_DMA_Abort+0x46c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d018      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a5c      	ldr	r2, [pc, #368]	@ (8006834 <HAL_DMA_Abort+0x470>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d013      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006838 <HAL_DMA_Abort+0x474>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00e      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a59      	ldr	r2, [pc, #356]	@ (800683c <HAL_DMA_Abort+0x478>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a58      	ldr	r2, [pc, #352]	@ (8006840 <HAL_DMA_Abort+0x47c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d004      	beq.n	80066ee <HAL_DMA_Abort+0x32a>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a56      	ldr	r2, [pc, #344]	@ (8006844 <HAL_DMA_Abort+0x480>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d108      	bne.n	8006700 <HAL_DMA_Abort+0x33c>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	e007      	b.n	8006710 <HAL_DMA_Abort+0x34c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0201 	bic.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006710:	e013      	b.n	800673a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006712:	f7fc fbdb 	bl	8002ecc <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b05      	cmp	r3, #5
 800671e:	d90c      	bls.n	800673a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2203      	movs	r2, #3
 800672a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e12d      	b.n	8006996 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e5      	bne.n	8006712 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2f      	ldr	r2, [pc, #188]	@ (8006808 <HAL_DMA_Abort+0x444>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d04a      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a2d      	ldr	r2, [pc, #180]	@ (800680c <HAL_DMA_Abort+0x448>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d045      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a2c      	ldr	r2, [pc, #176]	@ (8006810 <HAL_DMA_Abort+0x44c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d040      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a2a      	ldr	r2, [pc, #168]	@ (8006814 <HAL_DMA_Abort+0x450>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d03b      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a29      	ldr	r2, [pc, #164]	@ (8006818 <HAL_DMA_Abort+0x454>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d036      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a27      	ldr	r2, [pc, #156]	@ (800681c <HAL_DMA_Abort+0x458>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d031      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a26      	ldr	r2, [pc, #152]	@ (8006820 <HAL_DMA_Abort+0x45c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d02c      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a24      	ldr	r2, [pc, #144]	@ (8006824 <HAL_DMA_Abort+0x460>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d027      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a23      	ldr	r2, [pc, #140]	@ (8006828 <HAL_DMA_Abort+0x464>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d022      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a21      	ldr	r2, [pc, #132]	@ (800682c <HAL_DMA_Abort+0x468>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01d      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a20      	ldr	r2, [pc, #128]	@ (8006830 <HAL_DMA_Abort+0x46c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d018      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006834 <HAL_DMA_Abort+0x470>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006838 <HAL_DMA_Abort+0x474>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	@ (800683c <HAL_DMA_Abort+0x478>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006840 <HAL_DMA_Abort+0x47c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_DMA_Abort+0x422>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a18      	ldr	r2, [pc, #96]	@ (8006844 <HAL_DMA_Abort+0x480>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d101      	bne.n	80067ea <HAL_DMA_Abort+0x426>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <HAL_DMA_Abort+0x428>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d02b      	beq.n	8006848 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	223f      	movs	r2, #63	@ 0x3f
 8006800:	409a      	lsls	r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	609a      	str	r2, [r3, #8]
 8006806:	e02a      	b.n	800685e <HAL_DMA_Abort+0x49a>
 8006808:	40020010 	.word	0x40020010
 800680c:	40020028 	.word	0x40020028
 8006810:	40020040 	.word	0x40020040
 8006814:	40020058 	.word	0x40020058
 8006818:	40020070 	.word	0x40020070
 800681c:	40020088 	.word	0x40020088
 8006820:	400200a0 	.word	0x400200a0
 8006824:	400200b8 	.word	0x400200b8
 8006828:	40020410 	.word	0x40020410
 800682c:	40020428 	.word	0x40020428
 8006830:	40020440 	.word	0x40020440
 8006834:	40020458 	.word	0x40020458
 8006838:	40020470 	.word	0x40020470
 800683c:	40020488 	.word	0x40020488
 8006840:	400204a0 	.word	0x400204a0
 8006844:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800684c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006852:	f003 031f 	and.w	r3, r3, #31
 8006856:	2201      	movs	r2, #1
 8006858:	409a      	lsls	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a4f      	ldr	r2, [pc, #316]	@ (80069a0 <HAL_DMA_Abort+0x5dc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d072      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a4d      	ldr	r2, [pc, #308]	@ (80069a4 <HAL_DMA_Abort+0x5e0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d06d      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a4c      	ldr	r2, [pc, #304]	@ (80069a8 <HAL_DMA_Abort+0x5e4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d068      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a4a      	ldr	r2, [pc, #296]	@ (80069ac <HAL_DMA_Abort+0x5e8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d063      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a49      	ldr	r2, [pc, #292]	@ (80069b0 <HAL_DMA_Abort+0x5ec>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d05e      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a47      	ldr	r2, [pc, #284]	@ (80069b4 <HAL_DMA_Abort+0x5f0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d059      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a46      	ldr	r2, [pc, #280]	@ (80069b8 <HAL_DMA_Abort+0x5f4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d054      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a44      	ldr	r2, [pc, #272]	@ (80069bc <HAL_DMA_Abort+0x5f8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d04f      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a43      	ldr	r2, [pc, #268]	@ (80069c0 <HAL_DMA_Abort+0x5fc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d04a      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a41      	ldr	r2, [pc, #260]	@ (80069c4 <HAL_DMA_Abort+0x600>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d045      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a40      	ldr	r2, [pc, #256]	@ (80069c8 <HAL_DMA_Abort+0x604>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d040      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a3e      	ldr	r2, [pc, #248]	@ (80069cc <HAL_DMA_Abort+0x608>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d03b      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a3d      	ldr	r2, [pc, #244]	@ (80069d0 <HAL_DMA_Abort+0x60c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d036      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a3b      	ldr	r2, [pc, #236]	@ (80069d4 <HAL_DMA_Abort+0x610>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d031      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a3a      	ldr	r2, [pc, #232]	@ (80069d8 <HAL_DMA_Abort+0x614>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d02c      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a38      	ldr	r2, [pc, #224]	@ (80069dc <HAL_DMA_Abort+0x618>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d027      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a37      	ldr	r2, [pc, #220]	@ (80069e0 <HAL_DMA_Abort+0x61c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d022      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a35      	ldr	r2, [pc, #212]	@ (80069e4 <HAL_DMA_Abort+0x620>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01d      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a34      	ldr	r2, [pc, #208]	@ (80069e8 <HAL_DMA_Abort+0x624>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d018      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a32      	ldr	r2, [pc, #200]	@ (80069ec <HAL_DMA_Abort+0x628>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a31      	ldr	r2, [pc, #196]	@ (80069f0 <HAL_DMA_Abort+0x62c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00e      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a2f      	ldr	r2, [pc, #188]	@ (80069f4 <HAL_DMA_Abort+0x630>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d009      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2e      	ldr	r2, [pc, #184]	@ (80069f8 <HAL_DMA_Abort+0x634>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d004      	beq.n	800694e <HAL_DMA_Abort+0x58a>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a2c      	ldr	r2, [pc, #176]	@ (80069fc <HAL_DMA_Abort+0x638>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d101      	bne.n	8006952 <HAL_DMA_Abort+0x58e>
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <HAL_DMA_Abort+0x590>
 8006952:	2300      	movs	r3, #0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d015      	beq.n	8006984 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006960:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00c      	beq.n	8006984 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006974:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006978:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006982:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	40020010 	.word	0x40020010
 80069a4:	40020028 	.word	0x40020028
 80069a8:	40020040 	.word	0x40020040
 80069ac:	40020058 	.word	0x40020058
 80069b0:	40020070 	.word	0x40020070
 80069b4:	40020088 	.word	0x40020088
 80069b8:	400200a0 	.word	0x400200a0
 80069bc:	400200b8 	.word	0x400200b8
 80069c0:	40020410 	.word	0x40020410
 80069c4:	40020428 	.word	0x40020428
 80069c8:	40020440 	.word	0x40020440
 80069cc:	40020458 	.word	0x40020458
 80069d0:	40020470 	.word	0x40020470
 80069d4:	40020488 	.word	0x40020488
 80069d8:	400204a0 	.word	0x400204a0
 80069dc:	400204b8 	.word	0x400204b8
 80069e0:	58025408 	.word	0x58025408
 80069e4:	5802541c 	.word	0x5802541c
 80069e8:	58025430 	.word	0x58025430
 80069ec:	58025444 	.word	0x58025444
 80069f0:	58025458 	.word	0x58025458
 80069f4:	5802546c 	.word	0x5802546c
 80069f8:	58025480 	.word	0x58025480
 80069fc:	58025494 	.word	0x58025494

08006a00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e237      	b.n	8006e82 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d004      	beq.n	8006a28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2280      	movs	r2, #128	@ 0x80
 8006a22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e22c      	b.n	8006e82 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a5c      	ldr	r2, [pc, #368]	@ (8006ba0 <HAL_DMA_Abort_IT+0x1a0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d04a      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a5b      	ldr	r2, [pc, #364]	@ (8006ba4 <HAL_DMA_Abort_IT+0x1a4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d045      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a59      	ldr	r2, [pc, #356]	@ (8006ba8 <HAL_DMA_Abort_IT+0x1a8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d040      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a58      	ldr	r2, [pc, #352]	@ (8006bac <HAL_DMA_Abort_IT+0x1ac>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d03b      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a56      	ldr	r2, [pc, #344]	@ (8006bb0 <HAL_DMA_Abort_IT+0x1b0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d036      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a55      	ldr	r2, [pc, #340]	@ (8006bb4 <HAL_DMA_Abort_IT+0x1b4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d031      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a53      	ldr	r2, [pc, #332]	@ (8006bb8 <HAL_DMA_Abort_IT+0x1b8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d02c      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a52      	ldr	r2, [pc, #328]	@ (8006bbc <HAL_DMA_Abort_IT+0x1bc>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d027      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a50      	ldr	r2, [pc, #320]	@ (8006bc0 <HAL_DMA_Abort_IT+0x1c0>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d022      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a4f      	ldr	r2, [pc, #316]	@ (8006bc4 <HAL_DMA_Abort_IT+0x1c4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d01d      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a4d      	ldr	r2, [pc, #308]	@ (8006bc8 <HAL_DMA_Abort_IT+0x1c8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d018      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a4c      	ldr	r2, [pc, #304]	@ (8006bcc <HAL_DMA_Abort_IT+0x1cc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d013      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8006bd0 <HAL_DMA_Abort_IT+0x1d0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a49      	ldr	r2, [pc, #292]	@ (8006bd4 <HAL_DMA_Abort_IT+0x1d4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d009      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a47      	ldr	r2, [pc, #284]	@ (8006bd8 <HAL_DMA_Abort_IT+0x1d8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d004      	beq.n	8006ac8 <HAL_DMA_Abort_IT+0xc8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a46      	ldr	r2, [pc, #280]	@ (8006bdc <HAL_DMA_Abort_IT+0x1dc>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d101      	bne.n	8006acc <HAL_DMA_Abort_IT+0xcc>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <HAL_DMA_Abort_IT+0xce>
 8006acc:	2300      	movs	r3, #0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 8086 	beq.w	8006be0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2204      	movs	r2, #4
 8006ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8006ba0 <HAL_DMA_Abort_IT+0x1a0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d04a      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2e      	ldr	r2, [pc, #184]	@ (8006ba4 <HAL_DMA_Abort_IT+0x1a4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d045      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a2c      	ldr	r2, [pc, #176]	@ (8006ba8 <HAL_DMA_Abort_IT+0x1a8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d040      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a2b      	ldr	r2, [pc, #172]	@ (8006bac <HAL_DMA_Abort_IT+0x1ac>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d03b      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a29      	ldr	r2, [pc, #164]	@ (8006bb0 <HAL_DMA_Abort_IT+0x1b0>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d036      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a28      	ldr	r2, [pc, #160]	@ (8006bb4 <HAL_DMA_Abort_IT+0x1b4>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d031      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a26      	ldr	r2, [pc, #152]	@ (8006bb8 <HAL_DMA_Abort_IT+0x1b8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d02c      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a25      	ldr	r2, [pc, #148]	@ (8006bbc <HAL_DMA_Abort_IT+0x1bc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d027      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a23      	ldr	r2, [pc, #140]	@ (8006bc0 <HAL_DMA_Abort_IT+0x1c0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d022      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a22      	ldr	r2, [pc, #136]	@ (8006bc4 <HAL_DMA_Abort_IT+0x1c4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d01d      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a20      	ldr	r2, [pc, #128]	@ (8006bc8 <HAL_DMA_Abort_IT+0x1c8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d018      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006bcc <HAL_DMA_Abort_IT+0x1cc>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1d      	ldr	r2, [pc, #116]	@ (8006bd0 <HAL_DMA_Abort_IT+0x1d0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00e      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd4 <HAL_DMA_Abort_IT+0x1d4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8006bd8 <HAL_DMA_Abort_IT+0x1d8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d004      	beq.n	8006b7c <HAL_DMA_Abort_IT+0x17c>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a19      	ldr	r2, [pc, #100]	@ (8006bdc <HAL_DMA_Abort_IT+0x1dc>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d108      	bne.n	8006b8e <HAL_DMA_Abort_IT+0x18e>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0201 	bic.w	r2, r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	e178      	b.n	8006e80 <HAL_DMA_Abort_IT+0x480>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0201 	bic.w	r2, r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e16f      	b.n	8006e80 <HAL_DMA_Abort_IT+0x480>
 8006ba0:	40020010 	.word	0x40020010
 8006ba4:	40020028 	.word	0x40020028
 8006ba8:	40020040 	.word	0x40020040
 8006bac:	40020058 	.word	0x40020058
 8006bb0:	40020070 	.word	0x40020070
 8006bb4:	40020088 	.word	0x40020088
 8006bb8:	400200a0 	.word	0x400200a0
 8006bbc:	400200b8 	.word	0x400200b8
 8006bc0:	40020410 	.word	0x40020410
 8006bc4:	40020428 	.word	0x40020428
 8006bc8:	40020440 	.word	0x40020440
 8006bcc:	40020458 	.word	0x40020458
 8006bd0:	40020470 	.word	0x40020470
 8006bd4:	40020488 	.word	0x40020488
 8006bd8:	400204a0 	.word	0x400204a0
 8006bdc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 020e 	bic.w	r2, r2, #14
 8006bee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a6c      	ldr	r2, [pc, #432]	@ (8006da8 <HAL_DMA_Abort_IT+0x3a8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d04a      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a6b      	ldr	r2, [pc, #428]	@ (8006dac <HAL_DMA_Abort_IT+0x3ac>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d045      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a69      	ldr	r2, [pc, #420]	@ (8006db0 <HAL_DMA_Abort_IT+0x3b0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d040      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a68      	ldr	r2, [pc, #416]	@ (8006db4 <HAL_DMA_Abort_IT+0x3b4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d03b      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a66      	ldr	r2, [pc, #408]	@ (8006db8 <HAL_DMA_Abort_IT+0x3b8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d036      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a65      	ldr	r2, [pc, #404]	@ (8006dbc <HAL_DMA_Abort_IT+0x3bc>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d031      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a63      	ldr	r2, [pc, #396]	@ (8006dc0 <HAL_DMA_Abort_IT+0x3c0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d02c      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a62      	ldr	r2, [pc, #392]	@ (8006dc4 <HAL_DMA_Abort_IT+0x3c4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d027      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a60      	ldr	r2, [pc, #384]	@ (8006dc8 <HAL_DMA_Abort_IT+0x3c8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d022      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a5f      	ldr	r2, [pc, #380]	@ (8006dcc <HAL_DMA_Abort_IT+0x3cc>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d01d      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a5d      	ldr	r2, [pc, #372]	@ (8006dd0 <HAL_DMA_Abort_IT+0x3d0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d018      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a5c      	ldr	r2, [pc, #368]	@ (8006dd4 <HAL_DMA_Abort_IT+0x3d4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a5a      	ldr	r2, [pc, #360]	@ (8006dd8 <HAL_DMA_Abort_IT+0x3d8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00e      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a59      	ldr	r2, [pc, #356]	@ (8006ddc <HAL_DMA_Abort_IT+0x3dc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a57      	ldr	r2, [pc, #348]	@ (8006de0 <HAL_DMA_Abort_IT+0x3e0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_DMA_Abort_IT+0x290>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a56      	ldr	r2, [pc, #344]	@ (8006de4 <HAL_DMA_Abort_IT+0x3e4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d108      	bne.n	8006ca2 <HAL_DMA_Abort_IT+0x2a2>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0201 	bic.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	e007      	b.n	8006cb2 <HAL_DMA_Abort_IT+0x2b2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a3c      	ldr	r2, [pc, #240]	@ (8006da8 <HAL_DMA_Abort_IT+0x3a8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d072      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8006dac <HAL_DMA_Abort_IT+0x3ac>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d06d      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a39      	ldr	r2, [pc, #228]	@ (8006db0 <HAL_DMA_Abort_IT+0x3b0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d068      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a37      	ldr	r2, [pc, #220]	@ (8006db4 <HAL_DMA_Abort_IT+0x3b4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d063      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a36      	ldr	r2, [pc, #216]	@ (8006db8 <HAL_DMA_Abort_IT+0x3b8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d05e      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a34      	ldr	r2, [pc, #208]	@ (8006dbc <HAL_DMA_Abort_IT+0x3bc>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d059      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a33      	ldr	r2, [pc, #204]	@ (8006dc0 <HAL_DMA_Abort_IT+0x3c0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d054      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a31      	ldr	r2, [pc, #196]	@ (8006dc4 <HAL_DMA_Abort_IT+0x3c4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d04f      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a30      	ldr	r2, [pc, #192]	@ (8006dc8 <HAL_DMA_Abort_IT+0x3c8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d04a      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2e      	ldr	r2, [pc, #184]	@ (8006dcc <HAL_DMA_Abort_IT+0x3cc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d045      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd0 <HAL_DMA_Abort_IT+0x3d0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d040      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd4 <HAL_DMA_Abort_IT+0x3d4>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d03b      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd8 <HAL_DMA_Abort_IT+0x3d8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d036      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a28      	ldr	r2, [pc, #160]	@ (8006ddc <HAL_DMA_Abort_IT+0x3dc>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d031      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a27      	ldr	r2, [pc, #156]	@ (8006de0 <HAL_DMA_Abort_IT+0x3e0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d02c      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a25      	ldr	r2, [pc, #148]	@ (8006de4 <HAL_DMA_Abort_IT+0x3e4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d027      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a24      	ldr	r2, [pc, #144]	@ (8006de8 <HAL_DMA_Abort_IT+0x3e8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d022      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a22      	ldr	r2, [pc, #136]	@ (8006dec <HAL_DMA_Abort_IT+0x3ec>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d01d      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a21      	ldr	r2, [pc, #132]	@ (8006df0 <HAL_DMA_Abort_IT+0x3f0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d018      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1f      	ldr	r2, [pc, #124]	@ (8006df4 <HAL_DMA_Abort_IT+0x3f4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d013      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006df8 <HAL_DMA_Abort_IT+0x3f8>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d00e      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a1c      	ldr	r2, [pc, #112]	@ (8006dfc <HAL_DMA_Abort_IT+0x3fc>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d009      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1b      	ldr	r2, [pc, #108]	@ (8006e00 <HAL_DMA_Abort_IT+0x400>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d004      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x3a2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a19      	ldr	r2, [pc, #100]	@ (8006e04 <HAL_DMA_Abort_IT+0x404>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d132      	bne.n	8006e08 <HAL_DMA_Abort_IT+0x408>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e031      	b.n	8006e0a <HAL_DMA_Abort_IT+0x40a>
 8006da6:	bf00      	nop
 8006da8:	40020010 	.word	0x40020010
 8006dac:	40020028 	.word	0x40020028
 8006db0:	40020040 	.word	0x40020040
 8006db4:	40020058 	.word	0x40020058
 8006db8:	40020070 	.word	0x40020070
 8006dbc:	40020088 	.word	0x40020088
 8006dc0:	400200a0 	.word	0x400200a0
 8006dc4:	400200b8 	.word	0x400200b8
 8006dc8:	40020410 	.word	0x40020410
 8006dcc:	40020428 	.word	0x40020428
 8006dd0:	40020440 	.word	0x40020440
 8006dd4:	40020458 	.word	0x40020458
 8006dd8:	40020470 	.word	0x40020470
 8006ddc:	40020488 	.word	0x40020488
 8006de0:	400204a0 	.word	0x400204a0
 8006de4:	400204b8 	.word	0x400204b8
 8006de8:	58025408 	.word	0x58025408
 8006dec:	5802541c 	.word	0x5802541c
 8006df0:	58025430 	.word	0x58025430
 8006df4:	58025444 	.word	0x58025444
 8006df8:	58025458 	.word	0x58025458
 8006dfc:	5802546c 	.word	0x5802546c
 8006e00:	58025480 	.word	0x58025480
 8006e04:	58025494 	.word	0x58025494
 8006e08:	2300      	movs	r3, #0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d028      	beq.n	8006e60 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e1c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e22:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e28:	f003 031f 	and.w	r3, r3, #31
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	409a      	lsls	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006e3c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00c      	beq.n	8006e60 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e54:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006e5e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop

08006e8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	@ 0x28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e98:	4b67      	ldr	r3, [pc, #412]	@ (8007038 <HAL_DMA_IRQHandler+0x1ac>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a67      	ldr	r2, [pc, #412]	@ (800703c <HAL_DMA_IRQHandler+0x1b0>)
 8006e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea2:	0a9b      	lsrs	r3, r3, #10
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eaa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eb0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a5f      	ldr	r2, [pc, #380]	@ (8007040 <HAL_DMA_IRQHandler+0x1b4>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d04a      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a5d      	ldr	r2, [pc, #372]	@ (8007044 <HAL_DMA_IRQHandler+0x1b8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d045      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a5c      	ldr	r2, [pc, #368]	@ (8007048 <HAL_DMA_IRQHandler+0x1bc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d040      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a5a      	ldr	r2, [pc, #360]	@ (800704c <HAL_DMA_IRQHandler+0x1c0>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d03b      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a59      	ldr	r2, [pc, #356]	@ (8007050 <HAL_DMA_IRQHandler+0x1c4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d036      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a57      	ldr	r2, [pc, #348]	@ (8007054 <HAL_DMA_IRQHandler+0x1c8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d031      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a56      	ldr	r2, [pc, #344]	@ (8007058 <HAL_DMA_IRQHandler+0x1cc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d02c      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a54      	ldr	r2, [pc, #336]	@ (800705c <HAL_DMA_IRQHandler+0x1d0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d027      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a53      	ldr	r2, [pc, #332]	@ (8007060 <HAL_DMA_IRQHandler+0x1d4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d022      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a51      	ldr	r2, [pc, #324]	@ (8007064 <HAL_DMA_IRQHandler+0x1d8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d01d      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a50      	ldr	r2, [pc, #320]	@ (8007068 <HAL_DMA_IRQHandler+0x1dc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d018      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a4e      	ldr	r2, [pc, #312]	@ (800706c <HAL_DMA_IRQHandler+0x1e0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d013      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a4d      	ldr	r2, [pc, #308]	@ (8007070 <HAL_DMA_IRQHandler+0x1e4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00e      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a4b      	ldr	r2, [pc, #300]	@ (8007074 <HAL_DMA_IRQHandler+0x1e8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d009      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a4a      	ldr	r2, [pc, #296]	@ (8007078 <HAL_DMA_IRQHandler+0x1ec>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d004      	beq.n	8006f5e <HAL_DMA_IRQHandler+0xd2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a48      	ldr	r2, [pc, #288]	@ (800707c <HAL_DMA_IRQHandler+0x1f0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d101      	bne.n	8006f62 <HAL_DMA_IRQHandler+0xd6>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <HAL_DMA_IRQHandler+0xd8>
 8006f62:	2300      	movs	r3, #0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 842b 	beq.w	80077c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f6e:	f003 031f 	and.w	r3, r3, #31
 8006f72:	2208      	movs	r2, #8
 8006f74:	409a      	lsls	r2, r3
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 80a2 	beq.w	80070c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a2e      	ldr	r2, [pc, #184]	@ (8007040 <HAL_DMA_IRQHandler+0x1b4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d04a      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8007044 <HAL_DMA_IRQHandler+0x1b8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d045      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a2b      	ldr	r2, [pc, #172]	@ (8007048 <HAL_DMA_IRQHandler+0x1bc>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d040      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800704c <HAL_DMA_IRQHandler+0x1c0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d03b      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a28      	ldr	r2, [pc, #160]	@ (8007050 <HAL_DMA_IRQHandler+0x1c4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d036      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a27      	ldr	r2, [pc, #156]	@ (8007054 <HAL_DMA_IRQHandler+0x1c8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d031      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a25      	ldr	r2, [pc, #148]	@ (8007058 <HAL_DMA_IRQHandler+0x1cc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d02c      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a24      	ldr	r2, [pc, #144]	@ (800705c <HAL_DMA_IRQHandler+0x1d0>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d027      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a22      	ldr	r2, [pc, #136]	@ (8007060 <HAL_DMA_IRQHandler+0x1d4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d022      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a21      	ldr	r2, [pc, #132]	@ (8007064 <HAL_DMA_IRQHandler+0x1d8>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d01d      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8007068 <HAL_DMA_IRQHandler+0x1dc>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d018      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800706c <HAL_DMA_IRQHandler+0x1e0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d013      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8007070 <HAL_DMA_IRQHandler+0x1e4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00e      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1b      	ldr	r2, [pc, #108]	@ (8007074 <HAL_DMA_IRQHandler+0x1e8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d009      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a19      	ldr	r2, [pc, #100]	@ (8007078 <HAL_DMA_IRQHandler+0x1ec>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d004      	beq.n	8007020 <HAL_DMA_IRQHandler+0x194>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a18      	ldr	r2, [pc, #96]	@ (800707c <HAL_DMA_IRQHandler+0x1f0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d12f      	bne.n	8007080 <HAL_DMA_IRQHandler+0x1f4>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b00      	cmp	r3, #0
 800702c:	bf14      	ite	ne
 800702e:	2301      	movne	r3, #1
 8007030:	2300      	moveq	r3, #0
 8007032:	b2db      	uxtb	r3, r3
 8007034:	e02e      	b.n	8007094 <HAL_DMA_IRQHandler+0x208>
 8007036:	bf00      	nop
 8007038:	24000000 	.word	0x24000000
 800703c:	1b4e81b5 	.word	0x1b4e81b5
 8007040:	40020010 	.word	0x40020010
 8007044:	40020028 	.word	0x40020028
 8007048:	40020040 	.word	0x40020040
 800704c:	40020058 	.word	0x40020058
 8007050:	40020070 	.word	0x40020070
 8007054:	40020088 	.word	0x40020088
 8007058:	400200a0 	.word	0x400200a0
 800705c:	400200b8 	.word	0x400200b8
 8007060:	40020410 	.word	0x40020410
 8007064:	40020428 	.word	0x40020428
 8007068:	40020440 	.word	0x40020440
 800706c:	40020458 	.word	0x40020458
 8007070:	40020470 	.word	0x40020470
 8007074:	40020488 	.word	0x40020488
 8007078:	400204a0 	.word	0x400204a0
 800707c:	400204b8 	.word	0x400204b8
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0308 	and.w	r3, r3, #8
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf14      	ite	ne
 800708e:	2301      	movne	r3, #1
 8007090:	2300      	moveq	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d015      	beq.n	80070c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0204 	bic.w	r2, r2, #4
 80070a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ac:	f003 031f 	and.w	r3, r3, #31
 80070b0:	2208      	movs	r2, #8
 80070b2:	409a      	lsls	r2, r3
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070bc:	f043 0201 	orr.w	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	fa22 f303 	lsr.w	r3, r2, r3
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d06e      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a69      	ldr	r2, [pc, #420]	@ (8007284 <HAL_DMA_IRQHandler+0x3f8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d04a      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a67      	ldr	r2, [pc, #412]	@ (8007288 <HAL_DMA_IRQHandler+0x3fc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d045      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a66      	ldr	r2, [pc, #408]	@ (800728c <HAL_DMA_IRQHandler+0x400>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d040      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a64      	ldr	r2, [pc, #400]	@ (8007290 <HAL_DMA_IRQHandler+0x404>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d03b      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a63      	ldr	r2, [pc, #396]	@ (8007294 <HAL_DMA_IRQHandler+0x408>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d036      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a61      	ldr	r2, [pc, #388]	@ (8007298 <HAL_DMA_IRQHandler+0x40c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d031      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a60      	ldr	r2, [pc, #384]	@ (800729c <HAL_DMA_IRQHandler+0x410>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d02c      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a5e      	ldr	r2, [pc, #376]	@ (80072a0 <HAL_DMA_IRQHandler+0x414>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d027      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a5d      	ldr	r2, [pc, #372]	@ (80072a4 <HAL_DMA_IRQHandler+0x418>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d022      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a5b      	ldr	r2, [pc, #364]	@ (80072a8 <HAL_DMA_IRQHandler+0x41c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01d      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a5a      	ldr	r2, [pc, #360]	@ (80072ac <HAL_DMA_IRQHandler+0x420>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d018      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a58      	ldr	r2, [pc, #352]	@ (80072b0 <HAL_DMA_IRQHandler+0x424>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a57      	ldr	r2, [pc, #348]	@ (80072b4 <HAL_DMA_IRQHandler+0x428>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00e      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a55      	ldr	r2, [pc, #340]	@ (80072b8 <HAL_DMA_IRQHandler+0x42c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d009      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a54      	ldr	r2, [pc, #336]	@ (80072bc <HAL_DMA_IRQHandler+0x430>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d004      	beq.n	800717a <HAL_DMA_IRQHandler+0x2ee>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a52      	ldr	r2, [pc, #328]	@ (80072c0 <HAL_DMA_IRQHandler+0x434>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d10a      	bne.n	8007190 <HAL_DMA_IRQHandler+0x304>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007184:	2b00      	cmp	r3, #0
 8007186:	bf14      	ite	ne
 8007188:	2301      	movne	r3, #1
 800718a:	2300      	moveq	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	e003      	b.n	8007198 <HAL_DMA_IRQHandler+0x30c>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2300      	movs	r3, #0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00d      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071a0:	f003 031f 	and.w	r3, r3, #31
 80071a4:	2201      	movs	r2, #1
 80071a6:	409a      	lsls	r2, r3
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b0:	f043 0202 	orr.w	r2, r3, #2
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071bc:	f003 031f 	and.w	r3, r3, #31
 80071c0:	2204      	movs	r2, #4
 80071c2:	409a      	lsls	r2, r3
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 808f 	beq.w	80072ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007284 <HAL_DMA_IRQHandler+0x3f8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d04a      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a2a      	ldr	r2, [pc, #168]	@ (8007288 <HAL_DMA_IRQHandler+0x3fc>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d045      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a29      	ldr	r2, [pc, #164]	@ (800728c <HAL_DMA_IRQHandler+0x400>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d040      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a27      	ldr	r2, [pc, #156]	@ (8007290 <HAL_DMA_IRQHandler+0x404>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d03b      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a26      	ldr	r2, [pc, #152]	@ (8007294 <HAL_DMA_IRQHandler+0x408>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d036      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a24      	ldr	r2, [pc, #144]	@ (8007298 <HAL_DMA_IRQHandler+0x40c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d031      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a23      	ldr	r2, [pc, #140]	@ (800729c <HAL_DMA_IRQHandler+0x410>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d02c      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a21      	ldr	r2, [pc, #132]	@ (80072a0 <HAL_DMA_IRQHandler+0x414>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d027      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a20      	ldr	r2, [pc, #128]	@ (80072a4 <HAL_DMA_IRQHandler+0x418>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a1e      	ldr	r2, [pc, #120]	@ (80072a8 <HAL_DMA_IRQHandler+0x41c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1d      	ldr	r2, [pc, #116]	@ (80072ac <HAL_DMA_IRQHandler+0x420>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d018      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1b      	ldr	r2, [pc, #108]	@ (80072b0 <HAL_DMA_IRQHandler+0x424>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1a      	ldr	r2, [pc, #104]	@ (80072b4 <HAL_DMA_IRQHandler+0x428>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a18      	ldr	r2, [pc, #96]	@ (80072b8 <HAL_DMA_IRQHandler+0x42c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a17      	ldr	r2, [pc, #92]	@ (80072bc <HAL_DMA_IRQHandler+0x430>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_DMA_IRQHandler+0x3e2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a15      	ldr	r2, [pc, #84]	@ (80072c0 <HAL_DMA_IRQHandler+0x434>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d12a      	bne.n	80072c4 <HAL_DMA_IRQHandler+0x438>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	bf14      	ite	ne
 800727c:	2301      	movne	r3, #1
 800727e:	2300      	moveq	r3, #0
 8007280:	b2db      	uxtb	r3, r3
 8007282:	e023      	b.n	80072cc <HAL_DMA_IRQHandler+0x440>
 8007284:	40020010 	.word	0x40020010
 8007288:	40020028 	.word	0x40020028
 800728c:	40020040 	.word	0x40020040
 8007290:	40020058 	.word	0x40020058
 8007294:	40020070 	.word	0x40020070
 8007298:	40020088 	.word	0x40020088
 800729c:	400200a0 	.word	0x400200a0
 80072a0:	400200b8 	.word	0x400200b8
 80072a4:	40020410 	.word	0x40020410
 80072a8:	40020428 	.word	0x40020428
 80072ac:	40020440 	.word	0x40020440
 80072b0:	40020458 	.word	0x40020458
 80072b4:	40020470 	.word	0x40020470
 80072b8:	40020488 	.word	0x40020488
 80072bc:	400204a0 	.word	0x400204a0
 80072c0:	400204b8 	.word	0x400204b8
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2300      	movs	r3, #0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00d      	beq.n	80072ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d4:	f003 031f 	and.w	r3, r3, #31
 80072d8:	2204      	movs	r2, #4
 80072da:	409a      	lsls	r2, r3
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072e4:	f043 0204 	orr.w	r2, r3, #4
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f0:	f003 031f 	and.w	r3, r3, #31
 80072f4:	2210      	movs	r2, #16
 80072f6:	409a      	lsls	r2, r3
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	4013      	ands	r3, r2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 80a6 	beq.w	800744e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a85      	ldr	r2, [pc, #532]	@ (800751c <HAL_DMA_IRQHandler+0x690>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d04a      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a83      	ldr	r2, [pc, #524]	@ (8007520 <HAL_DMA_IRQHandler+0x694>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d045      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a82      	ldr	r2, [pc, #520]	@ (8007524 <HAL_DMA_IRQHandler+0x698>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d040      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a80      	ldr	r2, [pc, #512]	@ (8007528 <HAL_DMA_IRQHandler+0x69c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d03b      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a7f      	ldr	r2, [pc, #508]	@ (800752c <HAL_DMA_IRQHandler+0x6a0>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d036      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a7d      	ldr	r2, [pc, #500]	@ (8007530 <HAL_DMA_IRQHandler+0x6a4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d031      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a7c      	ldr	r2, [pc, #496]	@ (8007534 <HAL_DMA_IRQHandler+0x6a8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d02c      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a7a      	ldr	r2, [pc, #488]	@ (8007538 <HAL_DMA_IRQHandler+0x6ac>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d027      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a79      	ldr	r2, [pc, #484]	@ (800753c <HAL_DMA_IRQHandler+0x6b0>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d022      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a77      	ldr	r2, [pc, #476]	@ (8007540 <HAL_DMA_IRQHandler+0x6b4>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01d      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a76      	ldr	r2, [pc, #472]	@ (8007544 <HAL_DMA_IRQHandler+0x6b8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d018      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a74      	ldr	r2, [pc, #464]	@ (8007548 <HAL_DMA_IRQHandler+0x6bc>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a73      	ldr	r2, [pc, #460]	@ (800754c <HAL_DMA_IRQHandler+0x6c0>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00e      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a71      	ldr	r2, [pc, #452]	@ (8007550 <HAL_DMA_IRQHandler+0x6c4>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d009      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a70      	ldr	r2, [pc, #448]	@ (8007554 <HAL_DMA_IRQHandler+0x6c8>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d004      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x516>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a6e      	ldr	r2, [pc, #440]	@ (8007558 <HAL_DMA_IRQHandler+0x6cc>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d10a      	bne.n	80073b8 <HAL_DMA_IRQHandler+0x52c>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	bf14      	ite	ne
 80073b0:	2301      	movne	r3, #1
 80073b2:	2300      	moveq	r3, #0
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	e009      	b.n	80073cc <HAL_DMA_IRQHandler+0x540>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0304 	and.w	r3, r3, #4
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	bf14      	ite	ne
 80073c6:	2301      	movne	r3, #1
 80073c8:	2300      	moveq	r3, #0
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d03e      	beq.n	800744e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2210      	movs	r2, #16
 80073da:	409a      	lsls	r2, r3
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d018      	beq.n	8007420 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d108      	bne.n	800740e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007400:	2b00      	cmp	r3, #0
 8007402:	d024      	beq.n	800744e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	4798      	blx	r3
 800740c:	e01f      	b.n	800744e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007412:	2b00      	cmp	r3, #0
 8007414:	d01b      	beq.n	800744e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
 800741e:	e016      	b.n	800744e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800742a:	2b00      	cmp	r3, #0
 800742c:	d107      	bne.n	800743e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0208 	bic.w	r2, r2, #8
 800743c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	2220      	movs	r2, #32
 8007458:	409a      	lsls	r2, r3
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	4013      	ands	r3, r2
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8110 	beq.w	8007684 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a2c      	ldr	r2, [pc, #176]	@ (800751c <HAL_DMA_IRQHandler+0x690>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d04a      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a2b      	ldr	r2, [pc, #172]	@ (8007520 <HAL_DMA_IRQHandler+0x694>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d045      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a29      	ldr	r2, [pc, #164]	@ (8007524 <HAL_DMA_IRQHandler+0x698>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d040      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a28      	ldr	r2, [pc, #160]	@ (8007528 <HAL_DMA_IRQHandler+0x69c>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d03b      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a26      	ldr	r2, [pc, #152]	@ (800752c <HAL_DMA_IRQHandler+0x6a0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d036      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a25      	ldr	r2, [pc, #148]	@ (8007530 <HAL_DMA_IRQHandler+0x6a4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d031      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a23      	ldr	r2, [pc, #140]	@ (8007534 <HAL_DMA_IRQHandler+0x6a8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d02c      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a22      	ldr	r2, [pc, #136]	@ (8007538 <HAL_DMA_IRQHandler+0x6ac>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d027      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a20      	ldr	r2, [pc, #128]	@ (800753c <HAL_DMA_IRQHandler+0x6b0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d022      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007540 <HAL_DMA_IRQHandler+0x6b4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d01d      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007544 <HAL_DMA_IRQHandler+0x6b8>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d018      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007548 <HAL_DMA_IRQHandler+0x6bc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d013      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1a      	ldr	r2, [pc, #104]	@ (800754c <HAL_DMA_IRQHandler+0x6c0>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d00e      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a19      	ldr	r2, [pc, #100]	@ (8007550 <HAL_DMA_IRQHandler+0x6c4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d009      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a17      	ldr	r2, [pc, #92]	@ (8007554 <HAL_DMA_IRQHandler+0x6c8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d004      	beq.n	8007504 <HAL_DMA_IRQHandler+0x678>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a16      	ldr	r2, [pc, #88]	@ (8007558 <HAL_DMA_IRQHandler+0x6cc>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d12b      	bne.n	800755c <HAL_DMA_IRQHandler+0x6d0>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0310 	and.w	r3, r3, #16
 800750e:	2b00      	cmp	r3, #0
 8007510:	bf14      	ite	ne
 8007512:	2301      	movne	r3, #1
 8007514:	2300      	moveq	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	e02a      	b.n	8007570 <HAL_DMA_IRQHandler+0x6e4>
 800751a:	bf00      	nop
 800751c:	40020010 	.word	0x40020010
 8007520:	40020028 	.word	0x40020028
 8007524:	40020040 	.word	0x40020040
 8007528:	40020058 	.word	0x40020058
 800752c:	40020070 	.word	0x40020070
 8007530:	40020088 	.word	0x40020088
 8007534:	400200a0 	.word	0x400200a0
 8007538:	400200b8 	.word	0x400200b8
 800753c:	40020410 	.word	0x40020410
 8007540:	40020428 	.word	0x40020428
 8007544:	40020440 	.word	0x40020440
 8007548:	40020458 	.word	0x40020458
 800754c:	40020470 	.word	0x40020470
 8007550:	40020488 	.word	0x40020488
 8007554:	400204a0 	.word	0x400204a0
 8007558:	400204b8 	.word	0x400204b8
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b00      	cmp	r3, #0
 8007568:	bf14      	ite	ne
 800756a:	2301      	movne	r3, #1
 800756c:	2300      	moveq	r3, #0
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8087 	beq.w	8007684 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800757a:	f003 031f 	and.w	r3, r3, #31
 800757e:	2220      	movs	r2, #32
 8007580:	409a      	lsls	r2, r3
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b04      	cmp	r3, #4
 8007590:	d139      	bne.n	8007606 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0216 	bic.w	r2, r2, #22
 80075a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d103      	bne.n	80075c2 <HAL_DMA_IRQHandler+0x736>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d007      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0208 	bic.w	r2, r2, #8
 80075d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075d6:	f003 031f 	and.w	r3, r3, #31
 80075da:	223f      	movs	r2, #63	@ 0x3f
 80075dc:	409a      	lsls	r2, r3
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 834a 	beq.w	8007c90 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4798      	blx	r3
          }
          return;
 8007604:	e344      	b.n	8007c90 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d018      	beq.n	8007646 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d108      	bne.n	8007634 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007626:	2b00      	cmp	r3, #0
 8007628:	d02c      	beq.n	8007684 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
 8007632:	e027      	b.n	8007684 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d023      	beq.n	8007684 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	4798      	blx	r3
 8007644:	e01e      	b.n	8007684 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10f      	bne.n	8007674 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0210 	bic.w	r2, r2, #16
 8007662:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8306 	beq.w	8007c9a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 8088 	beq.w	80077ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2204      	movs	r2, #4
 80076a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a7a      	ldr	r2, [pc, #488]	@ (8007894 <HAL_DMA_IRQHandler+0xa08>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d04a      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a79      	ldr	r2, [pc, #484]	@ (8007898 <HAL_DMA_IRQHandler+0xa0c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d045      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a77      	ldr	r2, [pc, #476]	@ (800789c <HAL_DMA_IRQHandler+0xa10>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d040      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a76      	ldr	r2, [pc, #472]	@ (80078a0 <HAL_DMA_IRQHandler+0xa14>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d03b      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a74      	ldr	r2, [pc, #464]	@ (80078a4 <HAL_DMA_IRQHandler+0xa18>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d036      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a73      	ldr	r2, [pc, #460]	@ (80078a8 <HAL_DMA_IRQHandler+0xa1c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d031      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a71      	ldr	r2, [pc, #452]	@ (80078ac <HAL_DMA_IRQHandler+0xa20>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d02c      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a70      	ldr	r2, [pc, #448]	@ (80078b0 <HAL_DMA_IRQHandler+0xa24>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d027      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a6e      	ldr	r2, [pc, #440]	@ (80078b4 <HAL_DMA_IRQHandler+0xa28>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d022      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a6d      	ldr	r2, [pc, #436]	@ (80078b8 <HAL_DMA_IRQHandler+0xa2c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d01d      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a6b      	ldr	r2, [pc, #428]	@ (80078bc <HAL_DMA_IRQHandler+0xa30>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d018      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a6a      	ldr	r2, [pc, #424]	@ (80078c0 <HAL_DMA_IRQHandler+0xa34>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d013      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a68      	ldr	r2, [pc, #416]	@ (80078c4 <HAL_DMA_IRQHandler+0xa38>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d00e      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a67      	ldr	r2, [pc, #412]	@ (80078c8 <HAL_DMA_IRQHandler+0xa3c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d009      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a65      	ldr	r2, [pc, #404]	@ (80078cc <HAL_DMA_IRQHandler+0xa40>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d004      	beq.n	8007744 <HAL_DMA_IRQHandler+0x8b8>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a64      	ldr	r2, [pc, #400]	@ (80078d0 <HAL_DMA_IRQHandler+0xa44>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d108      	bne.n	8007756 <HAL_DMA_IRQHandler+0x8ca>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0201 	bic.w	r2, r2, #1
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	e007      	b.n	8007766 <HAL_DMA_IRQHandler+0x8da>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0201 	bic.w	r2, r2, #1
 8007764:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800776e:	429a      	cmp	r2, r3
 8007770:	d307      	bcc.n	8007782 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1f2      	bne.n	8007766 <HAL_DMA_IRQHandler+0x8da>
 8007780:	e000      	b.n	8007784 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007782:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d004      	beq.n	800779c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2203      	movs	r2, #3
 8007796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800779a:	e003      	b.n	80077a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 8272 	beq.w	8007c9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
 80077be:	e26c      	b.n	8007c9a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a43      	ldr	r2, [pc, #268]	@ (80078d4 <HAL_DMA_IRQHandler+0xa48>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d022      	beq.n	8007810 <HAL_DMA_IRQHandler+0x984>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a42      	ldr	r2, [pc, #264]	@ (80078d8 <HAL_DMA_IRQHandler+0xa4c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d01d      	beq.n	8007810 <HAL_DMA_IRQHandler+0x984>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a40      	ldr	r2, [pc, #256]	@ (80078dc <HAL_DMA_IRQHandler+0xa50>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d018      	beq.n	8007810 <HAL_DMA_IRQHandler+0x984>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a3f      	ldr	r2, [pc, #252]	@ (80078e0 <HAL_DMA_IRQHandler+0xa54>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d013      	beq.n	8007810 <HAL_DMA_IRQHandler+0x984>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a3d      	ldr	r2, [pc, #244]	@ (80078e4 <HAL_DMA_IRQHandler+0xa58>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d00e      	beq.n	8007810 <HAL_DMA_IRQHandler+0x984>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a3c      	ldr	r2, [pc, #240]	@ (80078e8 <HAL_DMA_IRQHandler+0xa5c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d009      	beq.n	8007810 <HAL_DMA_IRQHandler+0x984>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a3a      	ldr	r2, [pc, #232]	@ (80078ec <HAL_DMA_IRQHandler+0xa60>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d004      	beq.n	8007810 <HAL_DMA_IRQHandler+0x984>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a39      	ldr	r2, [pc, #228]	@ (80078f0 <HAL_DMA_IRQHandler+0xa64>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d101      	bne.n	8007814 <HAL_DMA_IRQHandler+0x988>
 8007810:	2301      	movs	r3, #1
 8007812:	e000      	b.n	8007816 <HAL_DMA_IRQHandler+0x98a>
 8007814:	2300      	movs	r3, #0
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 823f 	beq.w	8007c9a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	2204      	movs	r2, #4
 800782e:	409a      	lsls	r2, r3
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	4013      	ands	r3, r2
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 80cd 	beq.w	80079d4 <HAL_DMA_IRQHandler+0xb48>
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 80c7 	beq.w	80079d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800784a:	f003 031f 	and.w	r3, r3, #31
 800784e:	2204      	movs	r2, #4
 8007850:	409a      	lsls	r2, r3
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d049      	beq.n	80078f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d109      	bne.n	800787e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 8210 	beq.w	8007c94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800787c:	e20a      	b.n	8007c94 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 8206 	beq.w	8007c94 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007890:	e200      	b.n	8007c94 <HAL_DMA_IRQHandler+0xe08>
 8007892:	bf00      	nop
 8007894:	40020010 	.word	0x40020010
 8007898:	40020028 	.word	0x40020028
 800789c:	40020040 	.word	0x40020040
 80078a0:	40020058 	.word	0x40020058
 80078a4:	40020070 	.word	0x40020070
 80078a8:	40020088 	.word	0x40020088
 80078ac:	400200a0 	.word	0x400200a0
 80078b0:	400200b8 	.word	0x400200b8
 80078b4:	40020410 	.word	0x40020410
 80078b8:	40020428 	.word	0x40020428
 80078bc:	40020440 	.word	0x40020440
 80078c0:	40020458 	.word	0x40020458
 80078c4:	40020470 	.word	0x40020470
 80078c8:	40020488 	.word	0x40020488
 80078cc:	400204a0 	.word	0x400204a0
 80078d0:	400204b8 	.word	0x400204b8
 80078d4:	58025408 	.word	0x58025408
 80078d8:	5802541c 	.word	0x5802541c
 80078dc:	58025430 	.word	0x58025430
 80078e0:	58025444 	.word	0x58025444
 80078e4:	58025458 	.word	0x58025458
 80078e8:	5802546c 	.word	0x5802546c
 80078ec:	58025480 	.word	0x58025480
 80078f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d160      	bne.n	80079c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a7f      	ldr	r2, [pc, #508]	@ (8007b00 <HAL_DMA_IRQHandler+0xc74>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d04a      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a7d      	ldr	r2, [pc, #500]	@ (8007b04 <HAL_DMA_IRQHandler+0xc78>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d045      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a7c      	ldr	r2, [pc, #496]	@ (8007b08 <HAL_DMA_IRQHandler+0xc7c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d040      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a7a      	ldr	r2, [pc, #488]	@ (8007b0c <HAL_DMA_IRQHandler+0xc80>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d03b      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a79      	ldr	r2, [pc, #484]	@ (8007b10 <HAL_DMA_IRQHandler+0xc84>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d036      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a77      	ldr	r2, [pc, #476]	@ (8007b14 <HAL_DMA_IRQHandler+0xc88>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d031      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a76      	ldr	r2, [pc, #472]	@ (8007b18 <HAL_DMA_IRQHandler+0xc8c>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d02c      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a74      	ldr	r2, [pc, #464]	@ (8007b1c <HAL_DMA_IRQHandler+0xc90>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d027      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a73      	ldr	r2, [pc, #460]	@ (8007b20 <HAL_DMA_IRQHandler+0xc94>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d022      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a71      	ldr	r2, [pc, #452]	@ (8007b24 <HAL_DMA_IRQHandler+0xc98>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d01d      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a70      	ldr	r2, [pc, #448]	@ (8007b28 <HAL_DMA_IRQHandler+0xc9c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d018      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a6e      	ldr	r2, [pc, #440]	@ (8007b2c <HAL_DMA_IRQHandler+0xca0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d013      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a6d      	ldr	r2, [pc, #436]	@ (8007b30 <HAL_DMA_IRQHandler+0xca4>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00e      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a6b      	ldr	r2, [pc, #428]	@ (8007b34 <HAL_DMA_IRQHandler+0xca8>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d009      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a6a      	ldr	r2, [pc, #424]	@ (8007b38 <HAL_DMA_IRQHandler+0xcac>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d004      	beq.n	800799e <HAL_DMA_IRQHandler+0xb12>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a68      	ldr	r2, [pc, #416]	@ (8007b3c <HAL_DMA_IRQHandler+0xcb0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d108      	bne.n	80079b0 <HAL_DMA_IRQHandler+0xb24>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0208 	bic.w	r2, r2, #8
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	e007      	b.n	80079c0 <HAL_DMA_IRQHandler+0xb34>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0204 	bic.w	r2, r2, #4
 80079be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8165 	beq.w	8007c94 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079d2:	e15f      	b.n	8007c94 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	2202      	movs	r2, #2
 80079de:	409a      	lsls	r2, r3
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	4013      	ands	r3, r2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80c5 	beq.w	8007b74 <HAL_DMA_IRQHandler+0xce8>
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80bf 	beq.w	8007b74 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079fa:	f003 031f 	and.w	r3, r3, #31
 80079fe:	2202      	movs	r2, #2
 8007a00:	409a      	lsls	r2, r3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d018      	beq.n	8007a42 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d109      	bne.n	8007a2e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 813a 	beq.w	8007c98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a2c:	e134      	b.n	8007c98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 8130 	beq.w	8007c98 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a40:	e12a      	b.n	8007c98 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f040 8089 	bne.w	8007b60 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a2b      	ldr	r2, [pc, #172]	@ (8007b00 <HAL_DMA_IRQHandler+0xc74>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d04a      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a29      	ldr	r2, [pc, #164]	@ (8007b04 <HAL_DMA_IRQHandler+0xc78>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d045      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a28      	ldr	r2, [pc, #160]	@ (8007b08 <HAL_DMA_IRQHandler+0xc7c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d040      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a26      	ldr	r2, [pc, #152]	@ (8007b0c <HAL_DMA_IRQHandler+0xc80>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d03b      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a25      	ldr	r2, [pc, #148]	@ (8007b10 <HAL_DMA_IRQHandler+0xc84>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d036      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a23      	ldr	r2, [pc, #140]	@ (8007b14 <HAL_DMA_IRQHandler+0xc88>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d031      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a22      	ldr	r2, [pc, #136]	@ (8007b18 <HAL_DMA_IRQHandler+0xc8c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d02c      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a20      	ldr	r2, [pc, #128]	@ (8007b1c <HAL_DMA_IRQHandler+0xc90>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d027      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b20 <HAL_DMA_IRQHandler+0xc94>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d022      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1d      	ldr	r2, [pc, #116]	@ (8007b24 <HAL_DMA_IRQHandler+0xc98>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d01d      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8007b28 <HAL_DMA_IRQHandler+0xc9c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d018      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8007b2c <HAL_DMA_IRQHandler+0xca0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d013      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a19      	ldr	r2, [pc, #100]	@ (8007b30 <HAL_DMA_IRQHandler+0xca4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d00e      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a17      	ldr	r2, [pc, #92]	@ (8007b34 <HAL_DMA_IRQHandler+0xca8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d009      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a16      	ldr	r2, [pc, #88]	@ (8007b38 <HAL_DMA_IRQHandler+0xcac>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d004      	beq.n	8007aee <HAL_DMA_IRQHandler+0xc62>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a14      	ldr	r2, [pc, #80]	@ (8007b3c <HAL_DMA_IRQHandler+0xcb0>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d128      	bne.n	8007b40 <HAL_DMA_IRQHandler+0xcb4>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 0214 	bic.w	r2, r2, #20
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	e027      	b.n	8007b50 <HAL_DMA_IRQHandler+0xcc4>
 8007b00:	40020010 	.word	0x40020010
 8007b04:	40020028 	.word	0x40020028
 8007b08:	40020040 	.word	0x40020040
 8007b0c:	40020058 	.word	0x40020058
 8007b10:	40020070 	.word	0x40020070
 8007b14:	40020088 	.word	0x40020088
 8007b18:	400200a0 	.word	0x400200a0
 8007b1c:	400200b8 	.word	0x400200b8
 8007b20:	40020410 	.word	0x40020410
 8007b24:	40020428 	.word	0x40020428
 8007b28:	40020440 	.word	0x40020440
 8007b2c:	40020458 	.word	0x40020458
 8007b30:	40020470 	.word	0x40020470
 8007b34:	40020488 	.word	0x40020488
 8007b38:	400204a0 	.word	0x400204a0
 8007b3c:	400204b8 	.word	0x400204b8
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 020a 	bic.w	r2, r2, #10
 8007b4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8097 	beq.w	8007c98 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b72:	e091      	b.n	8007c98 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	2208      	movs	r2, #8
 8007b7e:	409a      	lsls	r2, r3
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	4013      	ands	r3, r2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 8088 	beq.w	8007c9a <HAL_DMA_IRQHandler+0xe0e>
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f003 0308 	and.w	r3, r3, #8
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 8082 	beq.w	8007c9a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a41      	ldr	r2, [pc, #260]	@ (8007ca0 <HAL_DMA_IRQHandler+0xe14>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d04a      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a3f      	ldr	r2, [pc, #252]	@ (8007ca4 <HAL_DMA_IRQHandler+0xe18>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d045      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a3e      	ldr	r2, [pc, #248]	@ (8007ca8 <HAL_DMA_IRQHandler+0xe1c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d040      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8007cac <HAL_DMA_IRQHandler+0xe20>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d03b      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a3b      	ldr	r2, [pc, #236]	@ (8007cb0 <HAL_DMA_IRQHandler+0xe24>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d036      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a39      	ldr	r2, [pc, #228]	@ (8007cb4 <HAL_DMA_IRQHandler+0xe28>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d031      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a38      	ldr	r2, [pc, #224]	@ (8007cb8 <HAL_DMA_IRQHandler+0xe2c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d02c      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a36      	ldr	r2, [pc, #216]	@ (8007cbc <HAL_DMA_IRQHandler+0xe30>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d027      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a35      	ldr	r2, [pc, #212]	@ (8007cc0 <HAL_DMA_IRQHandler+0xe34>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d022      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a33      	ldr	r2, [pc, #204]	@ (8007cc4 <HAL_DMA_IRQHandler+0xe38>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d01d      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a32      	ldr	r2, [pc, #200]	@ (8007cc8 <HAL_DMA_IRQHandler+0xe3c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d018      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a30      	ldr	r2, [pc, #192]	@ (8007ccc <HAL_DMA_IRQHandler+0xe40>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d013      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a2f      	ldr	r2, [pc, #188]	@ (8007cd0 <HAL_DMA_IRQHandler+0xe44>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00e      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8007cd4 <HAL_DMA_IRQHandler+0xe48>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d009      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a2c      	ldr	r2, [pc, #176]	@ (8007cd8 <HAL_DMA_IRQHandler+0xe4c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d004      	beq.n	8007c36 <HAL_DMA_IRQHandler+0xdaa>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a2a      	ldr	r2, [pc, #168]	@ (8007cdc <HAL_DMA_IRQHandler+0xe50>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d108      	bne.n	8007c48 <HAL_DMA_IRQHandler+0xdbc>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 021c 	bic.w	r2, r2, #28
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e007      	b.n	8007c58 <HAL_DMA_IRQHandler+0xdcc>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 020e 	bic.w	r2, r2, #14
 8007c56:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c5c:	f003 031f 	and.w	r3, r3, #31
 8007c60:	2201      	movs	r2, #1
 8007c62:	409a      	lsls	r2, r3
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d009      	beq.n	8007c9a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
 8007c8e:	e004      	b.n	8007c9a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c90:	bf00      	nop
 8007c92:	e002      	b.n	8007c9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c94:	bf00      	nop
 8007c96:	e000      	b.n	8007c9a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c98:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c9a:	3728      	adds	r7, #40	@ 0x28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	40020010 	.word	0x40020010
 8007ca4:	40020028 	.word	0x40020028
 8007ca8:	40020040 	.word	0x40020040
 8007cac:	40020058 	.word	0x40020058
 8007cb0:	40020070 	.word	0x40020070
 8007cb4:	40020088 	.word	0x40020088
 8007cb8:	400200a0 	.word	0x400200a0
 8007cbc:	400200b8 	.word	0x400200b8
 8007cc0:	40020410 	.word	0x40020410
 8007cc4:	40020428 	.word	0x40020428
 8007cc8:	40020440 	.word	0x40020440
 8007ccc:	40020458 	.word	0x40020458
 8007cd0:	40020470 	.word	0x40020470
 8007cd4:	40020488 	.word	0x40020488
 8007cd8:	400204a0 	.word	0x400204a0
 8007cdc:	400204b8 	.word	0x400204b8

08007ce0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a7f      	ldr	r2, [pc, #508]	@ (8007efc <DMA_SetConfig+0x21c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d072      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a7d      	ldr	r2, [pc, #500]	@ (8007f00 <DMA_SetConfig+0x220>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d06d      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a7c      	ldr	r2, [pc, #496]	@ (8007f04 <DMA_SetConfig+0x224>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d068      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a7a      	ldr	r2, [pc, #488]	@ (8007f08 <DMA_SetConfig+0x228>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d063      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a79      	ldr	r2, [pc, #484]	@ (8007f0c <DMA_SetConfig+0x22c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d05e      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a77      	ldr	r2, [pc, #476]	@ (8007f10 <DMA_SetConfig+0x230>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d059      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a76      	ldr	r2, [pc, #472]	@ (8007f14 <DMA_SetConfig+0x234>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d054      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a74      	ldr	r2, [pc, #464]	@ (8007f18 <DMA_SetConfig+0x238>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d04f      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a73      	ldr	r2, [pc, #460]	@ (8007f1c <DMA_SetConfig+0x23c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d04a      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a71      	ldr	r2, [pc, #452]	@ (8007f20 <DMA_SetConfig+0x240>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d045      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a70      	ldr	r2, [pc, #448]	@ (8007f24 <DMA_SetConfig+0x244>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d040      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8007f28 <DMA_SetConfig+0x248>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d03b      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a6d      	ldr	r2, [pc, #436]	@ (8007f2c <DMA_SetConfig+0x24c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d036      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a6b      	ldr	r2, [pc, #428]	@ (8007f30 <DMA_SetConfig+0x250>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d031      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a6a      	ldr	r2, [pc, #424]	@ (8007f34 <DMA_SetConfig+0x254>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d02c      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a68      	ldr	r2, [pc, #416]	@ (8007f38 <DMA_SetConfig+0x258>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d027      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a67      	ldr	r2, [pc, #412]	@ (8007f3c <DMA_SetConfig+0x25c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d022      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a65      	ldr	r2, [pc, #404]	@ (8007f40 <DMA_SetConfig+0x260>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d01d      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a64      	ldr	r2, [pc, #400]	@ (8007f44 <DMA_SetConfig+0x264>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d018      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a62      	ldr	r2, [pc, #392]	@ (8007f48 <DMA_SetConfig+0x268>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a61      	ldr	r2, [pc, #388]	@ (8007f4c <DMA_SetConfig+0x26c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00e      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a5f      	ldr	r2, [pc, #380]	@ (8007f50 <DMA_SetConfig+0x270>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d009      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a5e      	ldr	r2, [pc, #376]	@ (8007f54 <DMA_SetConfig+0x274>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d004      	beq.n	8007dea <DMA_SetConfig+0x10a>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a5c      	ldr	r2, [pc, #368]	@ (8007f58 <DMA_SetConfig+0x278>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d101      	bne.n	8007dee <DMA_SetConfig+0x10e>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e000      	b.n	8007df0 <DMA_SetConfig+0x110>
 8007dee:	2300      	movs	r3, #0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00d      	beq.n	8007e10 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007dfc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d004      	beq.n	8007e10 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e0e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a39      	ldr	r2, [pc, #228]	@ (8007efc <DMA_SetConfig+0x21c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d04a      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a38      	ldr	r2, [pc, #224]	@ (8007f00 <DMA_SetConfig+0x220>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d045      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a36      	ldr	r2, [pc, #216]	@ (8007f04 <DMA_SetConfig+0x224>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d040      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a35      	ldr	r2, [pc, #212]	@ (8007f08 <DMA_SetConfig+0x228>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d03b      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a33      	ldr	r2, [pc, #204]	@ (8007f0c <DMA_SetConfig+0x22c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d036      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a32      	ldr	r2, [pc, #200]	@ (8007f10 <DMA_SetConfig+0x230>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d031      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a30      	ldr	r2, [pc, #192]	@ (8007f14 <DMA_SetConfig+0x234>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d02c      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8007f18 <DMA_SetConfig+0x238>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d027      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a2d      	ldr	r2, [pc, #180]	@ (8007f1c <DMA_SetConfig+0x23c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d022      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8007f20 <DMA_SetConfig+0x240>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d01d      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a2a      	ldr	r2, [pc, #168]	@ (8007f24 <DMA_SetConfig+0x244>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d018      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a29      	ldr	r2, [pc, #164]	@ (8007f28 <DMA_SetConfig+0x248>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d013      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a27      	ldr	r2, [pc, #156]	@ (8007f2c <DMA_SetConfig+0x24c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00e      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a26      	ldr	r2, [pc, #152]	@ (8007f30 <DMA_SetConfig+0x250>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d009      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a24      	ldr	r2, [pc, #144]	@ (8007f34 <DMA_SetConfig+0x254>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d004      	beq.n	8007eb0 <DMA_SetConfig+0x1d0>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a23      	ldr	r2, [pc, #140]	@ (8007f38 <DMA_SetConfig+0x258>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d101      	bne.n	8007eb4 <DMA_SetConfig+0x1d4>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <DMA_SetConfig+0x1d6>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d059      	beq.n	8007f6e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ebe:	f003 031f 	and.w	r3, r3, #31
 8007ec2:	223f      	movs	r2, #63	@ 0x3f
 8007ec4:	409a      	lsls	r2, r3
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007ed8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	2b40      	cmp	r3, #64	@ 0x40
 8007ee8:	d138      	bne.n	8007f5c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007efa:	e086      	b.n	800800a <DMA_SetConfig+0x32a>
 8007efc:	40020010 	.word	0x40020010
 8007f00:	40020028 	.word	0x40020028
 8007f04:	40020040 	.word	0x40020040
 8007f08:	40020058 	.word	0x40020058
 8007f0c:	40020070 	.word	0x40020070
 8007f10:	40020088 	.word	0x40020088
 8007f14:	400200a0 	.word	0x400200a0
 8007f18:	400200b8 	.word	0x400200b8
 8007f1c:	40020410 	.word	0x40020410
 8007f20:	40020428 	.word	0x40020428
 8007f24:	40020440 	.word	0x40020440
 8007f28:	40020458 	.word	0x40020458
 8007f2c:	40020470 	.word	0x40020470
 8007f30:	40020488 	.word	0x40020488
 8007f34:	400204a0 	.word	0x400204a0
 8007f38:	400204b8 	.word	0x400204b8
 8007f3c:	58025408 	.word	0x58025408
 8007f40:	5802541c 	.word	0x5802541c
 8007f44:	58025430 	.word	0x58025430
 8007f48:	58025444 	.word	0x58025444
 8007f4c:	58025458 	.word	0x58025458
 8007f50:	5802546c 	.word	0x5802546c
 8007f54:	58025480 	.word	0x58025480
 8007f58:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	60da      	str	r2, [r3, #12]
}
 8007f6c:	e04d      	b.n	800800a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a29      	ldr	r2, [pc, #164]	@ (8008018 <DMA_SetConfig+0x338>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d022      	beq.n	8007fbe <DMA_SetConfig+0x2de>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a27      	ldr	r2, [pc, #156]	@ (800801c <DMA_SetConfig+0x33c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d01d      	beq.n	8007fbe <DMA_SetConfig+0x2de>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a26      	ldr	r2, [pc, #152]	@ (8008020 <DMA_SetConfig+0x340>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d018      	beq.n	8007fbe <DMA_SetConfig+0x2de>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a24      	ldr	r2, [pc, #144]	@ (8008024 <DMA_SetConfig+0x344>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d013      	beq.n	8007fbe <DMA_SetConfig+0x2de>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a23      	ldr	r2, [pc, #140]	@ (8008028 <DMA_SetConfig+0x348>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d00e      	beq.n	8007fbe <DMA_SetConfig+0x2de>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a21      	ldr	r2, [pc, #132]	@ (800802c <DMA_SetConfig+0x34c>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d009      	beq.n	8007fbe <DMA_SetConfig+0x2de>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a20      	ldr	r2, [pc, #128]	@ (8008030 <DMA_SetConfig+0x350>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d004      	beq.n	8007fbe <DMA_SetConfig+0x2de>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8008034 <DMA_SetConfig+0x354>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d101      	bne.n	8007fc2 <DMA_SetConfig+0x2e2>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e000      	b.n	8007fc4 <DMA_SetConfig+0x2e4>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d020      	beq.n	800800a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fcc:	f003 031f 	and.w	r3, r3, #31
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	409a      	lsls	r2, r3
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	2b40      	cmp	r3, #64	@ 0x40
 8007fe6:	d108      	bne.n	8007ffa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	60da      	str	r2, [r3, #12]
}
 8007ff8:	e007      	b.n	800800a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	60da      	str	r2, [r3, #12]
}
 800800a:	bf00      	nop
 800800c:	371c      	adds	r7, #28
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	58025408 	.word	0x58025408
 800801c:	5802541c 	.word	0x5802541c
 8008020:	58025430 	.word	0x58025430
 8008024:	58025444 	.word	0x58025444
 8008028:	58025458 	.word	0x58025458
 800802c:	5802546c 	.word	0x5802546c
 8008030:	58025480 	.word	0x58025480
 8008034:	58025494 	.word	0x58025494

08008038 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a42      	ldr	r2, [pc, #264]	@ (8008150 <DMA_CalcBaseAndBitshift+0x118>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d04a      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a41      	ldr	r2, [pc, #260]	@ (8008154 <DMA_CalcBaseAndBitshift+0x11c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d045      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a3f      	ldr	r2, [pc, #252]	@ (8008158 <DMA_CalcBaseAndBitshift+0x120>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d040      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a3e      	ldr	r2, [pc, #248]	@ (800815c <DMA_CalcBaseAndBitshift+0x124>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d03b      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a3c      	ldr	r2, [pc, #240]	@ (8008160 <DMA_CalcBaseAndBitshift+0x128>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d036      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a3b      	ldr	r2, [pc, #236]	@ (8008164 <DMA_CalcBaseAndBitshift+0x12c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d031      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a39      	ldr	r2, [pc, #228]	@ (8008168 <DMA_CalcBaseAndBitshift+0x130>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d02c      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a38      	ldr	r2, [pc, #224]	@ (800816c <DMA_CalcBaseAndBitshift+0x134>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d027      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a36      	ldr	r2, [pc, #216]	@ (8008170 <DMA_CalcBaseAndBitshift+0x138>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d022      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a35      	ldr	r2, [pc, #212]	@ (8008174 <DMA_CalcBaseAndBitshift+0x13c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d01d      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a33      	ldr	r2, [pc, #204]	@ (8008178 <DMA_CalcBaseAndBitshift+0x140>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d018      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a32      	ldr	r2, [pc, #200]	@ (800817c <DMA_CalcBaseAndBitshift+0x144>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d013      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a30      	ldr	r2, [pc, #192]	@ (8008180 <DMA_CalcBaseAndBitshift+0x148>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d00e      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a2f      	ldr	r2, [pc, #188]	@ (8008184 <DMA_CalcBaseAndBitshift+0x14c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d009      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008188 <DMA_CalcBaseAndBitshift+0x150>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d004      	beq.n	80080e0 <DMA_CalcBaseAndBitshift+0xa8>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a2c      	ldr	r2, [pc, #176]	@ (800818c <DMA_CalcBaseAndBitshift+0x154>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d101      	bne.n	80080e4 <DMA_CalcBaseAndBitshift+0xac>
 80080e0:	2301      	movs	r3, #1
 80080e2:	e000      	b.n	80080e6 <DMA_CalcBaseAndBitshift+0xae>
 80080e4:	2300      	movs	r3, #0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d024      	beq.n	8008134 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	3b10      	subs	r3, #16
 80080f2:	4a27      	ldr	r2, [pc, #156]	@ (8008190 <DMA_CalcBaseAndBitshift+0x158>)
 80080f4:	fba2 2303 	umull	r2, r3, r2, r3
 80080f8:	091b      	lsrs	r3, r3, #4
 80080fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	4a24      	ldr	r2, [pc, #144]	@ (8008194 <DMA_CalcBaseAndBitshift+0x15c>)
 8008104:	5cd3      	ldrb	r3, [r2, r3]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b03      	cmp	r3, #3
 8008110:	d908      	bls.n	8008124 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	4b1f      	ldr	r3, [pc, #124]	@ (8008198 <DMA_CalcBaseAndBitshift+0x160>)
 800811a:	4013      	ands	r3, r2
 800811c:	1d1a      	adds	r2, r3, #4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	659a      	str	r2, [r3, #88]	@ 0x58
 8008122:	e00d      	b.n	8008140 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	461a      	mov	r2, r3
 800812a:	4b1b      	ldr	r3, [pc, #108]	@ (8008198 <DMA_CalcBaseAndBitshift+0x160>)
 800812c:	4013      	ands	r3, r2
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6593      	str	r3, [r2, #88]	@ 0x58
 8008132:	e005      	b.n	8008140 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	40020010 	.word	0x40020010
 8008154:	40020028 	.word	0x40020028
 8008158:	40020040 	.word	0x40020040
 800815c:	40020058 	.word	0x40020058
 8008160:	40020070 	.word	0x40020070
 8008164:	40020088 	.word	0x40020088
 8008168:	400200a0 	.word	0x400200a0
 800816c:	400200b8 	.word	0x400200b8
 8008170:	40020410 	.word	0x40020410
 8008174:	40020428 	.word	0x40020428
 8008178:	40020440 	.word	0x40020440
 800817c:	40020458 	.word	0x40020458
 8008180:	40020470 	.word	0x40020470
 8008184:	40020488 	.word	0x40020488
 8008188:	400204a0 	.word	0x400204a0
 800818c:	400204b8 	.word	0x400204b8
 8008190:	aaaaaaab 	.word	0xaaaaaaab
 8008194:	08014a30 	.word	0x08014a30
 8008198:	fffffc00 	.word	0xfffffc00

0800819c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d120      	bne.n	80081f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d858      	bhi.n	800826a <DMA_CheckFifoParam+0xce>
 80081b8:	a201      	add	r2, pc, #4	@ (adr r2, 80081c0 <DMA_CheckFifoParam+0x24>)
 80081ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081be:	bf00      	nop
 80081c0:	080081d1 	.word	0x080081d1
 80081c4:	080081e3 	.word	0x080081e3
 80081c8:	080081d1 	.word	0x080081d1
 80081cc:	0800826b 	.word	0x0800826b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d048      	beq.n	800826e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081e0:	e045      	b.n	800826e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80081ea:	d142      	bne.n	8008272 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081f0:	e03f      	b.n	8008272 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081fa:	d123      	bne.n	8008244 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008200:	2b03      	cmp	r3, #3
 8008202:	d838      	bhi.n	8008276 <DMA_CheckFifoParam+0xda>
 8008204:	a201      	add	r2, pc, #4	@ (adr r2, 800820c <DMA_CheckFifoParam+0x70>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	0800821d 	.word	0x0800821d
 8008210:	08008223 	.word	0x08008223
 8008214:	0800821d 	.word	0x0800821d
 8008218:	08008235 	.word	0x08008235
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
        break;
 8008220:	e030      	b.n	8008284 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008226:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d025      	beq.n	800827a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008232:	e022      	b.n	800827a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008238:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800823c:	d11f      	bne.n	800827e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008242:	e01c      	b.n	800827e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008248:	2b02      	cmp	r3, #2
 800824a:	d902      	bls.n	8008252 <DMA_CheckFifoParam+0xb6>
 800824c:	2b03      	cmp	r3, #3
 800824e:	d003      	beq.n	8008258 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008250:	e018      	b.n	8008284 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	73fb      	strb	r3, [r7, #15]
        break;
 8008256:	e015      	b.n	8008284 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00e      	beq.n	8008282 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	73fb      	strb	r3, [r7, #15]
    break;
 8008268:	e00b      	b.n	8008282 <DMA_CheckFifoParam+0xe6>
        break;
 800826a:	bf00      	nop
 800826c:	e00a      	b.n	8008284 <DMA_CheckFifoParam+0xe8>
        break;
 800826e:	bf00      	nop
 8008270:	e008      	b.n	8008284 <DMA_CheckFifoParam+0xe8>
        break;
 8008272:	bf00      	nop
 8008274:	e006      	b.n	8008284 <DMA_CheckFifoParam+0xe8>
        break;
 8008276:	bf00      	nop
 8008278:	e004      	b.n	8008284 <DMA_CheckFifoParam+0xe8>
        break;
 800827a:	bf00      	nop
 800827c:	e002      	b.n	8008284 <DMA_CheckFifoParam+0xe8>
        break;
 800827e:	bf00      	nop
 8008280:	e000      	b.n	8008284 <DMA_CheckFifoParam+0xe8>
    break;
 8008282:	bf00      	nop
    }
  }

  return status;
 8008284:	7bfb      	ldrb	r3, [r7, #15]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop

08008294 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a38      	ldr	r2, [pc, #224]	@ (8008388 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d022      	beq.n	80082f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a36      	ldr	r2, [pc, #216]	@ (800838c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d01d      	beq.n	80082f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a35      	ldr	r2, [pc, #212]	@ (8008390 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d018      	beq.n	80082f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a33      	ldr	r2, [pc, #204]	@ (8008394 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d013      	beq.n	80082f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a32      	ldr	r2, [pc, #200]	@ (8008398 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d00e      	beq.n	80082f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a30      	ldr	r2, [pc, #192]	@ (800839c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d009      	beq.n	80082f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a2f      	ldr	r2, [pc, #188]	@ (80083a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d004      	beq.n	80082f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a2d      	ldr	r2, [pc, #180]	@ (80083a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d101      	bne.n	80082f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e000      	b.n	80082f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80082f6:	2300      	movs	r3, #0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d01a      	beq.n	8008332 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	3b08      	subs	r3, #8
 8008304:	4a28      	ldr	r2, [pc, #160]	@ (80083a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008306:	fba2 2303 	umull	r2, r3, r2, r3
 800830a:	091b      	lsrs	r3, r3, #4
 800830c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	4b26      	ldr	r3, [pc, #152]	@ (80083ac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008312:	4413      	add	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	461a      	mov	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a24      	ldr	r2, [pc, #144]	@ (80083b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008320:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f003 031f 	and.w	r3, r3, #31
 8008328:	2201      	movs	r2, #1
 800832a:	409a      	lsls	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008330:	e024      	b.n	800837c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	3b10      	subs	r3, #16
 800833a:	4a1e      	ldr	r2, [pc, #120]	@ (80083b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800833c:	fba2 2303 	umull	r2, r3, r2, r3
 8008340:	091b      	lsrs	r3, r3, #4
 8008342:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	4a1c      	ldr	r2, [pc, #112]	@ (80083b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d806      	bhi.n	800835a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	4a1b      	ldr	r2, [pc, #108]	@ (80083bc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d902      	bls.n	800835a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3308      	adds	r3, #8
 8008358:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4b18      	ldr	r3, [pc, #96]	@ (80083c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800835e:	4413      	add	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	461a      	mov	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a16      	ldr	r2, [pc, #88]	@ (80083c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800836c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f003 031f 	and.w	r3, r3, #31
 8008374:	2201      	movs	r2, #1
 8008376:	409a      	lsls	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800837c:	bf00      	nop
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	58025408 	.word	0x58025408
 800838c:	5802541c 	.word	0x5802541c
 8008390:	58025430 	.word	0x58025430
 8008394:	58025444 	.word	0x58025444
 8008398:	58025458 	.word	0x58025458
 800839c:	5802546c 	.word	0x5802546c
 80083a0:	58025480 	.word	0x58025480
 80083a4:	58025494 	.word	0x58025494
 80083a8:	cccccccd 	.word	0xcccccccd
 80083ac:	16009600 	.word	0x16009600
 80083b0:	58025880 	.word	0x58025880
 80083b4:	aaaaaaab 	.word	0xaaaaaaab
 80083b8:	400204b8 	.word	0x400204b8
 80083bc:	4002040f 	.word	0x4002040f
 80083c0:	10008200 	.word	0x10008200
 80083c4:	40020880 	.word	0x40020880

080083c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d04a      	beq.n	8008474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d847      	bhi.n	8008474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a25      	ldr	r2, [pc, #148]	@ (8008480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d022      	beq.n	8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a24      	ldr	r2, [pc, #144]	@ (8008484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d01d      	beq.n	8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a22      	ldr	r2, [pc, #136]	@ (8008488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d018      	beq.n	8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a21      	ldr	r2, [pc, #132]	@ (800848c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d013      	beq.n	8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a1f      	ldr	r2, [pc, #124]	@ (8008490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00e      	beq.n	8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a1e      	ldr	r2, [pc, #120]	@ (8008494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d009      	beq.n	8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a1c      	ldr	r2, [pc, #112]	@ (8008498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d004      	beq.n	8008434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a1b      	ldr	r2, [pc, #108]	@ (800849c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d101      	bne.n	8008438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008434:	2301      	movs	r3, #1
 8008436:	e000      	b.n	800843a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008438:	2300      	movs	r3, #0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	4b17      	ldr	r3, [pc, #92]	@ (80084a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	461a      	mov	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a15      	ldr	r2, [pc, #84]	@ (80084a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008450:	671a      	str	r2, [r3, #112]	@ 0x70
 8008452:	e009      	b.n	8008468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4b14      	ldr	r3, [pc, #80]	@ (80084a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	461a      	mov	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a11      	ldr	r2, [pc, #68]	@ (80084ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008466:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	3b01      	subs	r3, #1
 800846c:	2201      	movs	r2, #1
 800846e:	409a      	lsls	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008474:	bf00      	nop
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	58025408 	.word	0x58025408
 8008484:	5802541c 	.word	0x5802541c
 8008488:	58025430 	.word	0x58025430
 800848c:	58025444 	.word	0x58025444
 8008490:	58025458 	.word	0x58025458
 8008494:	5802546c 	.word	0x5802546c
 8008498:	58025480 	.word	0x58025480
 800849c:	58025494 	.word	0x58025494
 80084a0:	1600963f 	.word	0x1600963f
 80084a4:	58025940 	.word	0x58025940
 80084a8:	1000823f 	.word	0x1000823f
 80084ac:	40020940 	.word	0x40020940

080084b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b089      	sub	sp, #36	@ 0x24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084be:	4b89      	ldr	r3, [pc, #548]	@ (80086e4 <HAL_GPIO_Init+0x234>)
 80084c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084c2:	e194      	b.n	80087ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	2101      	movs	r1, #1
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	fa01 f303 	lsl.w	r3, r1, r3
 80084d0:	4013      	ands	r3, r2
 80084d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 8186 	beq.w	80087e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f003 0303 	and.w	r3, r3, #3
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d005      	beq.n	80084f4 <HAL_GPIO_Init+0x44>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f003 0303 	and.w	r3, r3, #3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d130      	bne.n	8008556 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	2203      	movs	r2, #3
 8008500:	fa02 f303 	lsl.w	r3, r2, r3
 8008504:	43db      	mvns	r3, r3
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	4013      	ands	r3, r2
 800850a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	68da      	ldr	r2, [r3, #12]
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	fa02 f303 	lsl.w	r3, r2, r3
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	4313      	orrs	r3, r2
 800851c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800852a:	2201      	movs	r2, #1
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	fa02 f303 	lsl.w	r3, r2, r3
 8008532:	43db      	mvns	r3, r3
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	4013      	ands	r3, r2
 8008538:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	091b      	lsrs	r3, r3, #4
 8008540:	f003 0201 	and.w	r2, r3, #1
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	fa02 f303 	lsl.w	r3, r2, r3
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	4313      	orrs	r3, r2
 800854e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	2b03      	cmp	r3, #3
 8008560:	d017      	beq.n	8008592 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	005b      	lsls	r3, r3, #1
 800856c:	2203      	movs	r2, #3
 800856e:	fa02 f303 	lsl.w	r3, r2, r3
 8008572:	43db      	mvns	r3, r3
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	4013      	ands	r3, r2
 8008578:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	005b      	lsls	r3, r3, #1
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	4313      	orrs	r3, r2
 800858a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f003 0303 	and.w	r3, r3, #3
 800859a:	2b02      	cmp	r3, #2
 800859c:	d123      	bne.n	80085e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	08da      	lsrs	r2, r3, #3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3208      	adds	r2, #8
 80085a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	220f      	movs	r2, #15
 80085b6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ba:	43db      	mvns	r3, r3
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	4013      	ands	r3, r2
 80085c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	691a      	ldr	r2, [r3, #16]
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	fa02 f303 	lsl.w	r3, r2, r3
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	08da      	lsrs	r2, r3, #3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3208      	adds	r2, #8
 80085e0:	69b9      	ldr	r1, [r7, #24]
 80085e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	2203      	movs	r2, #3
 80085f2:	fa02 f303 	lsl.w	r3, r2, r3
 80085f6:	43db      	mvns	r3, r3
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	4013      	ands	r3, r2
 80085fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f003 0203 	and.w	r2, r3, #3
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	005b      	lsls	r3, r3, #1
 800860a:	fa02 f303 	lsl.w	r3, r2, r3
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	4313      	orrs	r3, r2
 8008612:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80e0 	beq.w	80087e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008628:	4b2f      	ldr	r3, [pc, #188]	@ (80086e8 <HAL_GPIO_Init+0x238>)
 800862a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800862e:	4a2e      	ldr	r2, [pc, #184]	@ (80086e8 <HAL_GPIO_Init+0x238>)
 8008630:	f043 0302 	orr.w	r3, r3, #2
 8008634:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008638:	4b2b      	ldr	r3, [pc, #172]	@ (80086e8 <HAL_GPIO_Init+0x238>)
 800863a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008646:	4a29      	ldr	r2, [pc, #164]	@ (80086ec <HAL_GPIO_Init+0x23c>)
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	089b      	lsrs	r3, r3, #2
 800864c:	3302      	adds	r3, #2
 800864e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	220f      	movs	r2, #15
 800865e:	fa02 f303 	lsl.w	r3, r2, r3
 8008662:	43db      	mvns	r3, r3
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	4013      	ands	r3, r2
 8008668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a20      	ldr	r2, [pc, #128]	@ (80086f0 <HAL_GPIO_Init+0x240>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d052      	beq.n	8008718 <HAL_GPIO_Init+0x268>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a1f      	ldr	r2, [pc, #124]	@ (80086f4 <HAL_GPIO_Init+0x244>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d031      	beq.n	80086de <HAL_GPIO_Init+0x22e>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a1e      	ldr	r2, [pc, #120]	@ (80086f8 <HAL_GPIO_Init+0x248>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d02b      	beq.n	80086da <HAL_GPIO_Init+0x22a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a1d      	ldr	r2, [pc, #116]	@ (80086fc <HAL_GPIO_Init+0x24c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d025      	beq.n	80086d6 <HAL_GPIO_Init+0x226>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a1c      	ldr	r2, [pc, #112]	@ (8008700 <HAL_GPIO_Init+0x250>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d01f      	beq.n	80086d2 <HAL_GPIO_Init+0x222>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a1b      	ldr	r2, [pc, #108]	@ (8008704 <HAL_GPIO_Init+0x254>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d019      	beq.n	80086ce <HAL_GPIO_Init+0x21e>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a1a      	ldr	r2, [pc, #104]	@ (8008708 <HAL_GPIO_Init+0x258>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d013      	beq.n	80086ca <HAL_GPIO_Init+0x21a>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a19      	ldr	r2, [pc, #100]	@ (800870c <HAL_GPIO_Init+0x25c>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00d      	beq.n	80086c6 <HAL_GPIO_Init+0x216>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a18      	ldr	r2, [pc, #96]	@ (8008710 <HAL_GPIO_Init+0x260>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d007      	beq.n	80086c2 <HAL_GPIO_Init+0x212>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a17      	ldr	r2, [pc, #92]	@ (8008714 <HAL_GPIO_Init+0x264>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d101      	bne.n	80086be <HAL_GPIO_Init+0x20e>
 80086ba:	2309      	movs	r3, #9
 80086bc:	e02d      	b.n	800871a <HAL_GPIO_Init+0x26a>
 80086be:	230a      	movs	r3, #10
 80086c0:	e02b      	b.n	800871a <HAL_GPIO_Init+0x26a>
 80086c2:	2308      	movs	r3, #8
 80086c4:	e029      	b.n	800871a <HAL_GPIO_Init+0x26a>
 80086c6:	2307      	movs	r3, #7
 80086c8:	e027      	b.n	800871a <HAL_GPIO_Init+0x26a>
 80086ca:	2306      	movs	r3, #6
 80086cc:	e025      	b.n	800871a <HAL_GPIO_Init+0x26a>
 80086ce:	2305      	movs	r3, #5
 80086d0:	e023      	b.n	800871a <HAL_GPIO_Init+0x26a>
 80086d2:	2304      	movs	r3, #4
 80086d4:	e021      	b.n	800871a <HAL_GPIO_Init+0x26a>
 80086d6:	2303      	movs	r3, #3
 80086d8:	e01f      	b.n	800871a <HAL_GPIO_Init+0x26a>
 80086da:	2302      	movs	r3, #2
 80086dc:	e01d      	b.n	800871a <HAL_GPIO_Init+0x26a>
 80086de:	2301      	movs	r3, #1
 80086e0:	e01b      	b.n	800871a <HAL_GPIO_Init+0x26a>
 80086e2:	bf00      	nop
 80086e4:	58000080 	.word	0x58000080
 80086e8:	58024400 	.word	0x58024400
 80086ec:	58000400 	.word	0x58000400
 80086f0:	58020000 	.word	0x58020000
 80086f4:	58020400 	.word	0x58020400
 80086f8:	58020800 	.word	0x58020800
 80086fc:	58020c00 	.word	0x58020c00
 8008700:	58021000 	.word	0x58021000
 8008704:	58021400 	.word	0x58021400
 8008708:	58021800 	.word	0x58021800
 800870c:	58021c00 	.word	0x58021c00
 8008710:	58022000 	.word	0x58022000
 8008714:	58022400 	.word	0x58022400
 8008718:	2300      	movs	r3, #0
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	f002 0203 	and.w	r2, r2, #3
 8008720:	0092      	lsls	r2, r2, #2
 8008722:	4093      	lsls	r3, r2
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	4313      	orrs	r3, r2
 8008728:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800872a:	4938      	ldr	r1, [pc, #224]	@ (800880c <HAL_GPIO_Init+0x35c>)
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	089b      	lsrs	r3, r3, #2
 8008730:	3302      	adds	r3, #2
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	43db      	mvns	r3, r3
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	4013      	ands	r3, r2
 8008748:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	4313      	orrs	r3, r2
 800875c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800875e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	43db      	mvns	r3, r3
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	4013      	ands	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800878c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	43db      	mvns	r3, r3
 800879e:	69ba      	ldr	r2, [r7, #24]
 80087a0:	4013      	ands	r3, r2
 80087a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	43db      	mvns	r3, r3
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	4013      	ands	r3, r2
 80087cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4313      	orrs	r3, r2
 80087e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	3301      	adds	r3, #1
 80087ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	fa22 f303 	lsr.w	r3, r2, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f47f ae63 	bne.w	80084c4 <HAL_GPIO_Init+0x14>
  }
}
 80087fe:	bf00      	nop
 8008800:	bf00      	nop
 8008802:	3724      	adds	r7, #36	@ 0x24
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	58000400 	.word	0x58000400

08008810 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800881a:	2300      	movs	r3, #0
 800881c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800881e:	4b75      	ldr	r3, [pc, #468]	@ (80089f4 <HAL_GPIO_DeInit+0x1e4>)
 8008820:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008822:	e0d9      	b.n	80089d8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008824:	2201      	movs	r2, #1
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	fa02 f303 	lsl.w	r3, r2, r3
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	4013      	ands	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 80cc 	beq.w	80089d2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800883a:	4a6f      	ldr	r2, [pc, #444]	@ (80089f8 <HAL_GPIO_DeInit+0x1e8>)
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	089b      	lsrs	r3, r3, #2
 8008840:	3302      	adds	r3, #2
 8008842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008846:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	220f      	movs	r2, #15
 8008852:	fa02 f303 	lsl.w	r3, r2, r3
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	4013      	ands	r3, r2
 800885a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a67      	ldr	r2, [pc, #412]	@ (80089fc <HAL_GPIO_DeInit+0x1ec>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d037      	beq.n	80088d4 <HAL_GPIO_DeInit+0xc4>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a66      	ldr	r2, [pc, #408]	@ (8008a00 <HAL_GPIO_DeInit+0x1f0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d031      	beq.n	80088d0 <HAL_GPIO_DeInit+0xc0>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a65      	ldr	r2, [pc, #404]	@ (8008a04 <HAL_GPIO_DeInit+0x1f4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d02b      	beq.n	80088cc <HAL_GPIO_DeInit+0xbc>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a64      	ldr	r2, [pc, #400]	@ (8008a08 <HAL_GPIO_DeInit+0x1f8>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d025      	beq.n	80088c8 <HAL_GPIO_DeInit+0xb8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a63      	ldr	r2, [pc, #396]	@ (8008a0c <HAL_GPIO_DeInit+0x1fc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d01f      	beq.n	80088c4 <HAL_GPIO_DeInit+0xb4>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a62      	ldr	r2, [pc, #392]	@ (8008a10 <HAL_GPIO_DeInit+0x200>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d019      	beq.n	80088c0 <HAL_GPIO_DeInit+0xb0>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a61      	ldr	r2, [pc, #388]	@ (8008a14 <HAL_GPIO_DeInit+0x204>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d013      	beq.n	80088bc <HAL_GPIO_DeInit+0xac>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a60      	ldr	r2, [pc, #384]	@ (8008a18 <HAL_GPIO_DeInit+0x208>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d00d      	beq.n	80088b8 <HAL_GPIO_DeInit+0xa8>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a5f      	ldr	r2, [pc, #380]	@ (8008a1c <HAL_GPIO_DeInit+0x20c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d007      	beq.n	80088b4 <HAL_GPIO_DeInit+0xa4>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a5e      	ldr	r2, [pc, #376]	@ (8008a20 <HAL_GPIO_DeInit+0x210>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d101      	bne.n	80088b0 <HAL_GPIO_DeInit+0xa0>
 80088ac:	2309      	movs	r3, #9
 80088ae:	e012      	b.n	80088d6 <HAL_GPIO_DeInit+0xc6>
 80088b0:	230a      	movs	r3, #10
 80088b2:	e010      	b.n	80088d6 <HAL_GPIO_DeInit+0xc6>
 80088b4:	2308      	movs	r3, #8
 80088b6:	e00e      	b.n	80088d6 <HAL_GPIO_DeInit+0xc6>
 80088b8:	2307      	movs	r3, #7
 80088ba:	e00c      	b.n	80088d6 <HAL_GPIO_DeInit+0xc6>
 80088bc:	2306      	movs	r3, #6
 80088be:	e00a      	b.n	80088d6 <HAL_GPIO_DeInit+0xc6>
 80088c0:	2305      	movs	r3, #5
 80088c2:	e008      	b.n	80088d6 <HAL_GPIO_DeInit+0xc6>
 80088c4:	2304      	movs	r3, #4
 80088c6:	e006      	b.n	80088d6 <HAL_GPIO_DeInit+0xc6>
 80088c8:	2303      	movs	r3, #3
 80088ca:	e004      	b.n	80088d6 <HAL_GPIO_DeInit+0xc6>
 80088cc:	2302      	movs	r3, #2
 80088ce:	e002      	b.n	80088d6 <HAL_GPIO_DeInit+0xc6>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e000      	b.n	80088d6 <HAL_GPIO_DeInit+0xc6>
 80088d4:	2300      	movs	r3, #0
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	f002 0203 	and.w	r2, r2, #3
 80088dc:	0092      	lsls	r2, r2, #2
 80088de:	4093      	lsls	r3, r2
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d136      	bne.n	8008954 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	43db      	mvns	r3, r3
 80088ee:	401a      	ands	r2, r3
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	43db      	mvns	r3, r3
 80088fc:	401a      	ands	r2, r3
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	43db      	mvns	r3, r3
 800890c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008910:	4013      	ands	r3, r2
 8008912:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	43db      	mvns	r3, r3
 800891e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008922:	4013      	ands	r3, r2
 8008924:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f003 0303 	and.w	r3, r3, #3
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	220f      	movs	r2, #15
 8008930:	fa02 f303 	lsl.w	r3, r2, r3
 8008934:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008936:	4a30      	ldr	r2, [pc, #192]	@ (80089f8 <HAL_GPIO_DeInit+0x1e8>)
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	089b      	lsrs	r3, r3, #2
 800893c:	3302      	adds	r3, #2
 800893e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	43da      	mvns	r2, r3
 8008946:	482c      	ldr	r0, [pc, #176]	@ (80089f8 <HAL_GPIO_DeInit+0x1e8>)
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	089b      	lsrs	r3, r3, #2
 800894c:	400a      	ands	r2, r1
 800894e:	3302      	adds	r3, #2
 8008950:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	2103      	movs	r1, #3
 800895e:	fa01 f303 	lsl.w	r3, r1, r3
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	08da      	lsrs	r2, r3, #3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	3208      	adds	r2, #8
 8008970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	220f      	movs	r2, #15
 800897e:	fa02 f303 	lsl.w	r3, r2, r3
 8008982:	43db      	mvns	r3, r3
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	08d2      	lsrs	r2, r2, #3
 8008988:	4019      	ands	r1, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3208      	adds	r2, #8
 800898e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	005b      	lsls	r3, r3, #1
 800899a:	2103      	movs	r1, #3
 800899c:	fa01 f303 	lsl.w	r3, r1, r3
 80089a0:	43db      	mvns	r3, r3
 80089a2:	401a      	ands	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	2101      	movs	r1, #1
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	fa01 f303 	lsl.w	r3, r1, r3
 80089b4:	43db      	mvns	r3, r3
 80089b6:	401a      	ands	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689a      	ldr	r2, [r3, #8]
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	2103      	movs	r1, #3
 80089c6:	fa01 f303 	lsl.w	r3, r1, r3
 80089ca:	43db      	mvns	r3, r3
 80089cc:	401a      	ands	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	3301      	adds	r3, #1
 80089d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	fa22 f303 	lsr.w	r3, r2, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f47f af1f 	bne.w	8008824 <HAL_GPIO_DeInit+0x14>
  }
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	371c      	adds	r7, #28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	58000080 	.word	0x58000080
 80089f8:	58000400 	.word	0x58000400
 80089fc:	58020000 	.word	0x58020000
 8008a00:	58020400 	.word	0x58020400
 8008a04:	58020800 	.word	0x58020800
 8008a08:	58020c00 	.word	0x58020c00
 8008a0c:	58021000 	.word	0x58021000
 8008a10:	58021400 	.word	0x58021400
 8008a14:	58021800 	.word	0x58021800
 8008a18:	58021c00 	.word	0x58021c00
 8008a1c:	58022000 	.word	0x58022000
 8008a20:	58022400 	.word	0x58022400

08008a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	807b      	strh	r3, [r7, #2]
 8008a30:	4613      	mov	r3, r2
 8008a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a34:	787b      	ldrb	r3, [r7, #1]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a3a:	887a      	ldrh	r2, [r7, #2]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008a40:	e003      	b.n	8008a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008a42:	887b      	ldrh	r3, [r7, #2]
 8008a44:	041a      	lsls	r2, r3, #16
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	619a      	str	r2, [r3, #24]
}
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
	...

08008a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e07f      	b.n	8008b6a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7f8 fd6c 	bl	800155c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2224      	movs	r2, #36	@ 0x24
 8008a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 0201 	bic.w	r2, r2, #1
 8008a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008aa8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ab8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d107      	bne.n	8008ad2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ace:	609a      	str	r2, [r3, #8]
 8008ad0:	e006      	b.n	8008ae0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689a      	ldr	r2, [r3, #8]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008ade:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d104      	bne.n	8008af2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008af0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6859      	ldr	r1, [r3, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	4b1d      	ldr	r3, [pc, #116]	@ (8008b74 <HAL_I2C_Init+0x11c>)
 8008afe:	430b      	orrs	r3, r1
 8008b00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691a      	ldr	r2, [r3, #16]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	69d9      	ldr	r1, [r3, #28]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a1a      	ldr	r2, [r3, #32]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0201 	orr.w	r2, r2, #1
 8008b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	02008000 	.word	0x02008000

08008b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	d138      	bne.n	8008c00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d101      	bne.n	8008b9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	e032      	b.n	8008c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2224      	movs	r2, #36	@ 0x24
 8008ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f022 0201 	bic.w	r2, r2, #1
 8008bba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008bca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6819      	ldr	r1, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f042 0201 	orr.w	r2, r2, #1
 8008bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e000      	b.n	8008c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008c00:	2302      	movs	r3, #2
  }
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b085      	sub	sp, #20
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	d139      	bne.n	8008c98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d101      	bne.n	8008c32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008c2e:	2302      	movs	r3, #2
 8008c30:	e033      	b.n	8008c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2224      	movs	r2, #36	@ 0x24
 8008c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0201 	bic.w	r2, r2, #1
 8008c50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008c60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	021b      	lsls	r3, r3, #8
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f042 0201 	orr.w	r2, r2, #1
 8008c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	e000      	b.n	8008c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008c98:	2302      	movs	r3, #2
  }
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
	...

08008ca8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008cb0:	4b19      	ldr	r3, [pc, #100]	@ (8008d18 <HAL_PWREx_ConfigSupply+0x70>)
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f003 0304 	and.w	r3, r3, #4
 8008cb8:	2b04      	cmp	r3, #4
 8008cba:	d00a      	beq.n	8008cd2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008cbc:	4b16      	ldr	r3, [pc, #88]	@ (8008d18 <HAL_PWREx_ConfigSupply+0x70>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d001      	beq.n	8008cce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e01f      	b.n	8008d0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e01d      	b.n	8008d0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008cd2:	4b11      	ldr	r3, [pc, #68]	@ (8008d18 <HAL_PWREx_ConfigSupply+0x70>)
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f023 0207 	bic.w	r2, r3, #7
 8008cda:	490f      	ldr	r1, [pc, #60]	@ (8008d18 <HAL_PWREx_ConfigSupply+0x70>)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008ce2:	f7fa f8f3 	bl	8002ecc <HAL_GetTick>
 8008ce6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ce8:	e009      	b.n	8008cfe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008cea:	f7fa f8ef 	bl	8002ecc <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008cf8:	d901      	bls.n	8008cfe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e007      	b.n	8008d0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008cfe:	4b06      	ldr	r3, [pc, #24]	@ (8008d18 <HAL_PWREx_ConfigSupply+0x70>)
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d0a:	d1ee      	bne.n	8008cea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	58024800 	.word	0x58024800

08008d1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08c      	sub	sp, #48	@ 0x30
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d102      	bne.n	8008d30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	f000 bc48 	b.w	80095c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 808c 	beq.w	8008e56 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d3e:	4b96      	ldr	r3, [pc, #600]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d48:	4b93      	ldr	r3, [pc, #588]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d50:	2b10      	cmp	r3, #16
 8008d52:	d007      	beq.n	8008d64 <HAL_RCC_OscConfig+0x48>
 8008d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d56:	2b18      	cmp	r3, #24
 8008d58:	d111      	bne.n	8008d7e <HAL_RCC_OscConfig+0x62>
 8008d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d10c      	bne.n	8008d7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d64:	4b8c      	ldr	r3, [pc, #560]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d071      	beq.n	8008e54 <HAL_RCC_OscConfig+0x138>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d16d      	bne.n	8008e54 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f000 bc21 	b.w	80095c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d86:	d106      	bne.n	8008d96 <HAL_RCC_OscConfig+0x7a>
 8008d88:	4b83      	ldr	r3, [pc, #524]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a82      	ldr	r2, [pc, #520]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d92:	6013      	str	r3, [r2, #0]
 8008d94:	e02e      	b.n	8008df4 <HAL_RCC_OscConfig+0xd8>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10c      	bne.n	8008db8 <HAL_RCC_OscConfig+0x9c>
 8008d9e:	4b7e      	ldr	r3, [pc, #504]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a7d      	ldr	r2, [pc, #500]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	4b7b      	ldr	r3, [pc, #492]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a7a      	ldr	r2, [pc, #488]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008db0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	e01d      	b.n	8008df4 <HAL_RCC_OscConfig+0xd8>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008dc0:	d10c      	bne.n	8008ddc <HAL_RCC_OscConfig+0xc0>
 8008dc2:	4b75      	ldr	r3, [pc, #468]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a74      	ldr	r2, [pc, #464]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008dcc:	6013      	str	r3, [r2, #0]
 8008dce:	4b72      	ldr	r3, [pc, #456]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a71      	ldr	r2, [pc, #452]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	e00b      	b.n	8008df4 <HAL_RCC_OscConfig+0xd8>
 8008ddc:	4b6e      	ldr	r3, [pc, #440]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a6d      	ldr	r2, [pc, #436]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008de6:	6013      	str	r3, [r2, #0]
 8008de8:	4b6b      	ldr	r3, [pc, #428]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a6a      	ldr	r2, [pc, #424]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d015      	beq.n	8008e28 <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dfc:	f7fa f866 	bl	8002ecc <HAL_GetTick>
 8008e00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e02:	e00a      	b.n	8008e1a <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e04:	f7fa f862 	bl	8002ecc <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d901      	bls.n	8008e1a <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e3d2      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0ee      	beq.n	8008e04 <HAL_RCC_OscConfig+0xe8>
 8008e26:	e016      	b.n	8008e56 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e28:	f7fa f850 	bl	8002ecc <HAL_GetTick>
 8008e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e2e:	e00a      	b.n	8008e46 <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e30:	f7fa f84c 	bl	8002ecc <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d901      	bls.n	8008e46 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e3bc      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e46:	4b54      	ldr	r3, [pc, #336]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1ee      	bne.n	8008e30 <HAL_RCC_OscConfig+0x114>
 8008e52:	e000      	b.n	8008e56 <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 80cb 	beq.w	8008ffa <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e64:	4b4c      	ldr	r3, [pc, #304]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d007      	beq.n	8008e8a <HAL_RCC_OscConfig+0x16e>
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	2b18      	cmp	r3, #24
 8008e7e:	d156      	bne.n	8008f2e <HAL_RCC_OscConfig+0x212>
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d151      	bne.n	8008f2e <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e8a:	4b43      	ldr	r3, [pc, #268]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0304 	and.w	r3, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d005      	beq.n	8008ea2 <HAL_RCC_OscConfig+0x186>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e38e      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f023 0219 	bic.w	r2, r3, #25
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	493a      	ldr	r1, [pc, #232]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eb4:	f7fa f80a 	bl	8002ecc <HAL_GetTick>
 8008eb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008eba:	e008      	b.n	8008ece <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ebc:	f7fa f806 	bl	8002ecc <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d901      	bls.n	8008ece <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e378      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ece:	4b32      	ldr	r3, [pc, #200]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0304 	and.w	r3, r3, #4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0f0      	beq.n	8008ebc <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eda:	f7fa f827 	bl	8002f2c <HAL_GetREVID>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d817      	bhi.n	8008f18 <HAL_RCC_OscConfig+0x1fc>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b40      	cmp	r3, #64	@ 0x40
 8008eee:	d108      	bne.n	8008f02 <HAL_RCC_OscConfig+0x1e6>
 8008ef0:	4b29      	ldr	r3, [pc, #164]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008ef8:	4a27      	ldr	r2, [pc, #156]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008efe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f00:	e07b      	b.n	8008ffa <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f02:	4b25      	ldr	r3, [pc, #148]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	031b      	lsls	r3, r3, #12
 8008f10:	4921      	ldr	r1, [pc, #132]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f16:	e070      	b.n	8008ffa <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f18:	4b1f      	ldr	r3, [pc, #124]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	061b      	lsls	r3, r3, #24
 8008f26:	491c      	ldr	r1, [pc, #112]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f2c:	e065      	b.n	8008ffa <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d048      	beq.n	8008fc8 <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f36:	4b18      	ldr	r3, [pc, #96]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f023 0219 	bic.w	r2, r3, #25
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	4915      	ldr	r1, [pc, #84]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008f44:	4313      	orrs	r3, r2
 8008f46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f48:	f7f9 ffc0 	bl	8002ecc <HAL_GetTick>
 8008f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f4e:	e008      	b.n	8008f62 <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f50:	f7f9 ffbc 	bl	8002ecc <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d901      	bls.n	8008f62 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e32e      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f62:	4b0d      	ldr	r3, [pc, #52]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0304 	and.w	r3, r3, #4
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0f0      	beq.n	8008f50 <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f6e:	f7f9 ffdd 	bl	8002f2c <HAL_GetREVID>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d81a      	bhi.n	8008fb2 <HAL_RCC_OscConfig+0x296>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	2b40      	cmp	r3, #64	@ 0x40
 8008f82:	d10b      	bne.n	8008f9c <HAL_RCC_OscConfig+0x280>
 8008f84:	4b04      	ldr	r3, [pc, #16]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008f8c:	4a02      	ldr	r2, [pc, #8]	@ (8008f98 <HAL_RCC_OscConfig+0x27c>)
 8008f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f92:	6053      	str	r3, [r2, #4]
 8008f94:	e031      	b.n	8008ffa <HAL_RCC_OscConfig+0x2de>
 8008f96:	bf00      	nop
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	4b9c      	ldr	r3, [pc, #624]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	031b      	lsls	r3, r3, #12
 8008faa:	4999      	ldr	r1, [pc, #612]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	604b      	str	r3, [r1, #4]
 8008fb0:	e023      	b.n	8008ffa <HAL_RCC_OscConfig+0x2de>
 8008fb2:	4b97      	ldr	r3, [pc, #604]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	061b      	lsls	r3, r3, #24
 8008fc0:	4993      	ldr	r1, [pc, #588]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	604b      	str	r3, [r1, #4]
 8008fc6:	e018      	b.n	8008ffa <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fc8:	4b91      	ldr	r3, [pc, #580]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a90      	ldr	r2, [pc, #576]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8008fce:	f023 0301 	bic.w	r3, r3, #1
 8008fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd4:	f7f9 ff7a 	bl	8002ecc <HAL_GetTick>
 8008fd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fda:	e008      	b.n	8008fee <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fdc:	f7f9 ff76 	bl	8002ecc <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e2e8      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fee:	4b88      	ldr	r3, [pc, #544]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0304 	and.w	r3, r3, #4
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1f0      	bne.n	8008fdc <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0310 	and.w	r3, r3, #16
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 80a9 	beq.w	800915a <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009008:	4b81      	ldr	r3, [pc, #516]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009010:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009012:	4b7f      	ldr	r3, [pc, #508]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009016:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	2b08      	cmp	r3, #8
 800901c:	d007      	beq.n	800902e <HAL_RCC_OscConfig+0x312>
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b18      	cmp	r3, #24
 8009022:	d13a      	bne.n	800909a <HAL_RCC_OscConfig+0x37e>
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	f003 0303 	and.w	r3, r3, #3
 800902a:	2b01      	cmp	r3, #1
 800902c:	d135      	bne.n	800909a <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800902e:	4b78      	ldr	r3, [pc, #480]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009036:	2b00      	cmp	r3, #0
 8009038:	d005      	beq.n	8009046 <HAL_RCC_OscConfig+0x32a>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	2b80      	cmp	r3, #128	@ 0x80
 8009040:	d001      	beq.n	8009046 <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e2bc      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009046:	f7f9 ff71 	bl	8002f2c <HAL_GetREVID>
 800904a:	4603      	mov	r3, r0
 800904c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009050:	4293      	cmp	r3, r2
 8009052:	d817      	bhi.n	8009084 <HAL_RCC_OscConfig+0x368>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a1b      	ldr	r3, [r3, #32]
 8009058:	2b20      	cmp	r3, #32
 800905a:	d108      	bne.n	800906e <HAL_RCC_OscConfig+0x352>
 800905c:	4b6c      	ldr	r3, [pc, #432]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009064:	4a6a      	ldr	r2, [pc, #424]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009066:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800906a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800906c:	e075      	b.n	800915a <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800906e:	4b68      	ldr	r3, [pc, #416]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	069b      	lsls	r3, r3, #26
 800907c:	4964      	ldr	r1, [pc, #400]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 800907e:	4313      	orrs	r3, r2
 8009080:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009082:	e06a      	b.n	800915a <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009084:	4b62      	ldr	r3, [pc, #392]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	061b      	lsls	r3, r3, #24
 8009092:	495f      	ldr	r1, [pc, #380]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009094:	4313      	orrs	r3, r2
 8009096:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009098:	e05f      	b.n	800915a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d042      	beq.n	8009128 <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80090a2:	4b5b      	ldr	r3, [pc, #364]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a5a      	ldr	r2, [pc, #360]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 80090a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ae:	f7f9 ff0d 	bl	8002ecc <HAL_GetTick>
 80090b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090b4:	e008      	b.n	80090c8 <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80090b6:	f7f9 ff09 	bl	8002ecc <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d901      	bls.n	80090c8 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e27b      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090c8:	4b51      	ldr	r3, [pc, #324]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d0f0      	beq.n	80090b6 <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090d4:	f7f9 ff2a 	bl	8002f2c <HAL_GetREVID>
 80090d8:	4603      	mov	r3, r0
 80090da:	f241 0203 	movw	r2, #4099	@ 0x1003
 80090de:	4293      	cmp	r3, r2
 80090e0:	d817      	bhi.n	8009112 <HAL_RCC_OscConfig+0x3f6>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	2b20      	cmp	r3, #32
 80090e8:	d108      	bne.n	80090fc <HAL_RCC_OscConfig+0x3e0>
 80090ea:	4b49      	ldr	r3, [pc, #292]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80090f2:	4a47      	ldr	r2, [pc, #284]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 80090f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090f8:	6053      	str	r3, [r2, #4]
 80090fa:	e02e      	b.n	800915a <HAL_RCC_OscConfig+0x43e>
 80090fc:	4b44      	ldr	r3, [pc, #272]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a1b      	ldr	r3, [r3, #32]
 8009108:	069b      	lsls	r3, r3, #26
 800910a:	4941      	ldr	r1, [pc, #260]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 800910c:	4313      	orrs	r3, r2
 800910e:	604b      	str	r3, [r1, #4]
 8009110:	e023      	b.n	800915a <HAL_RCC_OscConfig+0x43e>
 8009112:	4b3f      	ldr	r3, [pc, #252]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	061b      	lsls	r3, r3, #24
 8009120:	493b      	ldr	r1, [pc, #236]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009122:	4313      	orrs	r3, r2
 8009124:	60cb      	str	r3, [r1, #12]
 8009126:	e018      	b.n	800915a <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009128:	4b39      	ldr	r3, [pc, #228]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a38      	ldr	r2, [pc, #224]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 800912e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009134:	f7f9 feca 	bl	8002ecc <HAL_GetTick>
 8009138:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800913a:	e008      	b.n	800914e <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800913c:	f7f9 fec6 	bl	8002ecc <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	2b02      	cmp	r3, #2
 8009148:	d901      	bls.n	800914e <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 800914a:	2303      	movs	r3, #3
 800914c:	e238      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800914e:	4b30      	ldr	r3, [pc, #192]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1f0      	bne.n	800913c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0308 	and.w	r3, r3, #8
 8009162:	2b00      	cmp	r3, #0
 8009164:	d036      	beq.n	80091d4 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d019      	beq.n	80091a2 <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800916e:	4b28      	ldr	r3, [pc, #160]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009172:	4a27      	ldr	r2, [pc, #156]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009174:	f043 0301 	orr.w	r3, r3, #1
 8009178:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800917a:	f7f9 fea7 	bl	8002ecc <HAL_GetTick>
 800917e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009180:	e008      	b.n	8009194 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009182:	f7f9 fea3 	bl	8002ecc <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d901      	bls.n	8009194 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e215      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009194:	4b1e      	ldr	r3, [pc, #120]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 8009196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009198:	f003 0302 	and.w	r3, r3, #2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0f0      	beq.n	8009182 <HAL_RCC_OscConfig+0x466>
 80091a0:	e018      	b.n	80091d4 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 80091a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 80091a8:	f023 0301 	bic.w	r3, r3, #1
 80091ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ae:	f7f9 fe8d 	bl	8002ecc <HAL_GetTick>
 80091b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80091b4:	e008      	b.n	80091c8 <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091b6:	f7f9 fe89 	bl	8002ecc <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d901      	bls.n	80091c8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e1fb      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80091c8:	4b11      	ldr	r3, [pc, #68]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 80091ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1f0      	bne.n	80091b6 <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d039      	beq.n	8009254 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01c      	beq.n	8009222 <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80091e8:	4b09      	ldr	r3, [pc, #36]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a08      	ldr	r2, [pc, #32]	@ (8009210 <HAL_RCC_OscConfig+0x4f4>)
 80091ee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80091f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80091f4:	f7f9 fe6a 	bl	8002ecc <HAL_GetTick>
 80091f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091fa:	e00b      	b.n	8009214 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091fc:	f7f9 fe66 	bl	8002ecc <HAL_GetTick>
 8009200:	4602      	mov	r2, r0
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	2b02      	cmp	r3, #2
 8009208:	d904      	bls.n	8009214 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e1d8      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
 800920e:	bf00      	nop
 8009210:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009214:	4b65      	ldr	r3, [pc, #404]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d0ed      	beq.n	80091fc <HAL_RCC_OscConfig+0x4e0>
 8009220:	e018      	b.n	8009254 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009222:	4b62      	ldr	r3, [pc, #392]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a61      	ldr	r2, [pc, #388]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 8009228:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800922c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800922e:	f7f9 fe4d 	bl	8002ecc <HAL_GetTick>
 8009232:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009234:	e008      	b.n	8009248 <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009236:	f7f9 fe49 	bl	8002ecc <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	2b02      	cmp	r3, #2
 8009242:	d901      	bls.n	8009248 <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8009244:	2303      	movs	r3, #3
 8009246:	e1bb      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009248:	4b58      	ldr	r3, [pc, #352]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1f0      	bne.n	8009236 <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 8081 	beq.w	8009364 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009262:	4b53      	ldr	r3, [pc, #332]	@ (80093b0 <HAL_RCC_OscConfig+0x694>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a52      	ldr	r2, [pc, #328]	@ (80093b0 <HAL_RCC_OscConfig+0x694>)
 8009268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800926c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800926e:	f7f9 fe2d 	bl	8002ecc <HAL_GetTick>
 8009272:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009274:	e008      	b.n	8009288 <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009276:	f7f9 fe29 	bl	8002ecc <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	2b64      	cmp	r3, #100	@ 0x64
 8009282:	d901      	bls.n	8009288 <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e19b      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009288:	4b49      	ldr	r3, [pc, #292]	@ (80093b0 <HAL_RCC_OscConfig+0x694>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0f0      	beq.n	8009276 <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d106      	bne.n	80092aa <HAL_RCC_OscConfig+0x58e>
 800929c:	4b43      	ldr	r3, [pc, #268]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 800929e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092a0:	4a42      	ldr	r2, [pc, #264]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092a2:	f043 0301 	orr.w	r3, r3, #1
 80092a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80092a8:	e02d      	b.n	8009306 <HAL_RCC_OscConfig+0x5ea>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10c      	bne.n	80092cc <HAL_RCC_OscConfig+0x5b0>
 80092b2:	4b3e      	ldr	r3, [pc, #248]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092b6:	4a3d      	ldr	r2, [pc, #244]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092b8:	f023 0301 	bic.w	r3, r3, #1
 80092bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80092be:	4b3b      	ldr	r3, [pc, #236]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092c2:	4a3a      	ldr	r2, [pc, #232]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092c4:	f023 0304 	bic.w	r3, r3, #4
 80092c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80092ca:	e01c      	b.n	8009306 <HAL_RCC_OscConfig+0x5ea>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	2b05      	cmp	r3, #5
 80092d2:	d10c      	bne.n	80092ee <HAL_RCC_OscConfig+0x5d2>
 80092d4:	4b35      	ldr	r3, [pc, #212]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d8:	4a34      	ldr	r2, [pc, #208]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092da:	f043 0304 	orr.w	r3, r3, #4
 80092de:	6713      	str	r3, [r2, #112]	@ 0x70
 80092e0:	4b32      	ldr	r3, [pc, #200]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092e4:	4a31      	ldr	r2, [pc, #196]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092e6:	f043 0301 	orr.w	r3, r3, #1
 80092ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80092ec:	e00b      	b.n	8009306 <HAL_RCC_OscConfig+0x5ea>
 80092ee:	4b2f      	ldr	r3, [pc, #188]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092f2:	4a2e      	ldr	r2, [pc, #184]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092f4:	f023 0301 	bic.w	r3, r3, #1
 80092f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80092fa:	4b2c      	ldr	r3, [pc, #176]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 80092fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092fe:	4a2b      	ldr	r2, [pc, #172]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 8009300:	f023 0304 	bic.w	r3, r3, #4
 8009304:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d015      	beq.n	800933a <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800930e:	f7f9 fddd 	bl	8002ecc <HAL_GetTick>
 8009312:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009314:	e00a      	b.n	800932c <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009316:	f7f9 fdd9 	bl	8002ecc <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009324:	4293      	cmp	r3, r2
 8009326:	d901      	bls.n	800932c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e149      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800932c:	4b1f      	ldr	r3, [pc, #124]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 800932e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0ee      	beq.n	8009316 <HAL_RCC_OscConfig+0x5fa>
 8009338:	e014      	b.n	8009364 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800933a:	f7f9 fdc7 	bl	8002ecc <HAL_GetTick>
 800933e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009340:	e00a      	b.n	8009358 <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009342:	f7f9 fdc3 	bl	8002ecc <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009350:	4293      	cmp	r3, r2
 8009352:	d901      	bls.n	8009358 <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e133      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009358:	4b14      	ldr	r3, [pc, #80]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 800935a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935c:	f003 0302 	and.w	r3, r3, #2
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1ee      	bne.n	8009342 <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 8128 	beq.w	80095be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800936e:	4b0f      	ldr	r3, [pc, #60]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009376:	2b18      	cmp	r3, #24
 8009378:	f000 80b8 	beq.w	80094ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009380:	2b02      	cmp	r3, #2
 8009382:	f040 8099 	bne.w	80094b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009386:	4b09      	ldr	r3, [pc, #36]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a08      	ldr	r2, [pc, #32]	@ (80093ac <HAL_RCC_OscConfig+0x690>)
 800938c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009392:	f7f9 fd9b 	bl	8002ecc <HAL_GetTick>
 8009396:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009398:	e00c      	b.n	80093b4 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800939a:	f7f9 fd97 	bl	8002ecc <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d905      	bls.n	80093b4 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e109      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
 80093ac:	58024400 	.word	0x58024400
 80093b0:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093b4:	4b84      	ldr	r3, [pc, #528]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1ec      	bne.n	800939a <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80093c0:	4b81      	ldr	r3, [pc, #516]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80093c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093c4:	4b81      	ldr	r3, [pc, #516]	@ (80095cc <HAL_RCC_OscConfig+0x8b0>)
 80093c6:	4013      	ands	r3, r2
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80093d0:	0112      	lsls	r2, r2, #4
 80093d2:	430a      	orrs	r2, r1
 80093d4:	497c      	ldr	r1, [pc, #496]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	628b      	str	r3, [r1, #40]	@ 0x28
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093de:	3b01      	subs	r3, #1
 80093e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093e8:	3b01      	subs	r3, #1
 80093ea:	025b      	lsls	r3, r3, #9
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	431a      	orrs	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f4:	3b01      	subs	r3, #1
 80093f6:	041b      	lsls	r3, r3, #16
 80093f8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80093fc:	431a      	orrs	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009402:	3b01      	subs	r3, #1
 8009404:	061b      	lsls	r3, r3, #24
 8009406:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800940a:	496f      	ldr	r1, [pc, #444]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 800940c:	4313      	orrs	r3, r2
 800940e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009410:	4b6d      	ldr	r3, [pc, #436]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	4a6c      	ldr	r2, [pc, #432]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009416:	f023 0301 	bic.w	r3, r3, #1
 800941a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800941c:	4b6a      	ldr	r3, [pc, #424]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 800941e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009420:	4b6b      	ldr	r3, [pc, #428]	@ (80095d0 <HAL_RCC_OscConfig+0x8b4>)
 8009422:	4013      	ands	r3, r2
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009428:	00d2      	lsls	r2, r2, #3
 800942a:	4967      	ldr	r1, [pc, #412]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 800942c:	4313      	orrs	r3, r2
 800942e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009430:	4b65      	ldr	r3, [pc, #404]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009434:	f023 020c 	bic.w	r2, r3, #12
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943c:	4962      	ldr	r1, [pc, #392]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 800943e:	4313      	orrs	r3, r2
 8009440:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009442:	4b61      	ldr	r3, [pc, #388]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009446:	f023 0202 	bic.w	r2, r3, #2
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800944e:	495e      	ldr	r1, [pc, #376]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009450:	4313      	orrs	r3, r2
 8009452:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009454:	4b5c      	ldr	r3, [pc, #368]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009458:	4a5b      	ldr	r2, [pc, #364]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 800945a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800945e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009460:	4b59      	ldr	r3, [pc, #356]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009464:	4a58      	ldr	r2, [pc, #352]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800946a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800946c:	4b56      	ldr	r3, [pc, #344]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 800946e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009470:	4a55      	ldr	r2, [pc, #340]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009472:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009478:	4b53      	ldr	r3, [pc, #332]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 800947a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947c:	4a52      	ldr	r2, [pc, #328]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009484:	4b50      	ldr	r3, [pc, #320]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a4f      	ldr	r2, [pc, #316]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 800948a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800948e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009490:	f7f9 fd1c 	bl	8002ecc <HAL_GetTick>
 8009494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009496:	e008      	b.n	80094aa <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009498:	f7f9 fd18 	bl	8002ecc <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d901      	bls.n	80094aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e08a      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094aa:	4b47      	ldr	r3, [pc, #284]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0f0      	beq.n	8009498 <HAL_RCC_OscConfig+0x77c>
 80094b6:	e082      	b.n	80095be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094b8:	4b43      	ldr	r3, [pc, #268]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a42      	ldr	r2, [pc, #264]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80094be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094c4:	f7f9 fd02 	bl	8002ecc <HAL_GetTick>
 80094c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094ca:	e008      	b.n	80094de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094cc:	f7f9 fcfe 	bl	8002ecc <HAL_GetTick>
 80094d0:	4602      	mov	r2, r0
 80094d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d901      	bls.n	80094de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80094da:	2303      	movs	r3, #3
 80094dc:	e070      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094de:	4b3a      	ldr	r3, [pc, #232]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1f0      	bne.n	80094cc <HAL_RCC_OscConfig+0x7b0>
 80094ea:	e068      	b.n	80095be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80094ec:	4b36      	ldr	r3, [pc, #216]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80094ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80094f2:	4b35      	ldr	r3, [pc, #212]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80094f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d031      	beq.n	8009564 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f003 0203 	and.w	r2, r3, #3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800950a:	429a      	cmp	r2, r3
 800950c:	d12a      	bne.n	8009564 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	091b      	lsrs	r3, r3, #4
 8009512:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800951a:	429a      	cmp	r2, r3
 800951c:	d122      	bne.n	8009564 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009528:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800952a:	429a      	cmp	r2, r3
 800952c:	d11a      	bne.n	8009564 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	0a5b      	lsrs	r3, r3, #9
 8009532:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800953a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800953c:	429a      	cmp	r2, r3
 800953e:	d111      	bne.n	8009564 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	0c1b      	lsrs	r3, r3, #16
 8009544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800954c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800954e:	429a      	cmp	r2, r3
 8009550:	d108      	bne.n	8009564 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	0e1b      	lsrs	r3, r3, #24
 8009556:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800955e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009560:	429a      	cmp	r2, r3
 8009562:	d001      	beq.n	8009568 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e02b      	b.n	80095c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009568:	4b17      	ldr	r3, [pc, #92]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 800956a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800956c:	08db      	lsrs	r3, r3, #3
 800956e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009572:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	429a      	cmp	r2, r3
 800957c:	d01f      	beq.n	80095be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800957e:	4b12      	ldr	r3, [pc, #72]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009582:	4a11      	ldr	r2, [pc, #68]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 8009584:	f023 0301 	bic.w	r3, r3, #1
 8009588:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800958a:	f7f9 fc9f 	bl	8002ecc <HAL_GetTick>
 800958e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009590:	bf00      	nop
 8009592:	f7f9 fc9b 	bl	8002ecc <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959a:	4293      	cmp	r3, r2
 800959c:	d0f9      	beq.n	8009592 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800959e:	4b0a      	ldr	r3, [pc, #40]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80095a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095a2:	4b0b      	ldr	r3, [pc, #44]	@ (80095d0 <HAL_RCC_OscConfig+0x8b4>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80095aa:	00d2      	lsls	r2, r2, #3
 80095ac:	4906      	ldr	r1, [pc, #24]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80095b2:	4b05      	ldr	r3, [pc, #20]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80095b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b6:	4a04      	ldr	r2, [pc, #16]	@ (80095c8 <HAL_RCC_OscConfig+0x8ac>)
 80095b8:	f043 0301 	orr.w	r3, r3, #1
 80095bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3730      	adds	r7, #48	@ 0x30
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	58024400 	.word	0x58024400
 80095cc:	fffffc0c 	.word	0xfffffc0c
 80095d0:	ffff0007 	.word	0xffff0007

080095d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e19c      	b.n	8009922 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80095e8:	4b8a      	ldr	r3, [pc, #552]	@ (8009814 <HAL_RCC_ClockConfig+0x240>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 030f 	and.w	r3, r3, #15
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d910      	bls.n	8009618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095f6:	4b87      	ldr	r3, [pc, #540]	@ (8009814 <HAL_RCC_ClockConfig+0x240>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f023 020f 	bic.w	r2, r3, #15
 80095fe:	4985      	ldr	r1, [pc, #532]	@ (8009814 <HAL_RCC_ClockConfig+0x240>)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	4313      	orrs	r3, r2
 8009604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009606:	4b83      	ldr	r3, [pc, #524]	@ (8009814 <HAL_RCC_ClockConfig+0x240>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 030f 	and.w	r3, r3, #15
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	429a      	cmp	r2, r3
 8009612:	d001      	beq.n	8009618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e184      	b.n	8009922 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d010      	beq.n	8009646 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	691a      	ldr	r2, [r3, #16]
 8009628:	4b7b      	ldr	r3, [pc, #492]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009630:	429a      	cmp	r2, r3
 8009632:	d908      	bls.n	8009646 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009634:	4b78      	ldr	r3, [pc, #480]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	4975      	ldr	r1, [pc, #468]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009642:	4313      	orrs	r3, r2
 8009644:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 0308 	and.w	r3, r3, #8
 800964e:	2b00      	cmp	r3, #0
 8009650:	d010      	beq.n	8009674 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	695a      	ldr	r2, [r3, #20]
 8009656:	4b70      	ldr	r3, [pc, #448]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800965e:	429a      	cmp	r2, r3
 8009660:	d908      	bls.n	8009674 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009662:	4b6d      	ldr	r3, [pc, #436]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	496a      	ldr	r1, [pc, #424]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009670:	4313      	orrs	r3, r2
 8009672:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0310 	and.w	r3, r3, #16
 800967c:	2b00      	cmp	r3, #0
 800967e:	d010      	beq.n	80096a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	699a      	ldr	r2, [r3, #24]
 8009684:	4b64      	ldr	r3, [pc, #400]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800968c:	429a      	cmp	r2, r3
 800968e:	d908      	bls.n	80096a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009690:	4b61      	ldr	r3, [pc, #388]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	495e      	ldr	r1, [pc, #376]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0320 	and.w	r3, r3, #32
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d010      	beq.n	80096d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69da      	ldr	r2, [r3, #28]
 80096b2:	4b59      	ldr	r3, [pc, #356]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 80096b4:	6a1b      	ldr	r3, [r3, #32]
 80096b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d908      	bls.n	80096d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80096be:	4b56      	ldr	r3, [pc, #344]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	69db      	ldr	r3, [r3, #28]
 80096ca:	4953      	ldr	r1, [pc, #332]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0302 	and.w	r3, r3, #2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d010      	beq.n	80096fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68da      	ldr	r2, [r3, #12]
 80096e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	f003 030f 	and.w	r3, r3, #15
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d908      	bls.n	80096fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096ec:	4b4a      	ldr	r3, [pc, #296]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	f023 020f 	bic.w	r2, r3, #15
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	4947      	ldr	r1, [pc, #284]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	d055      	beq.n	80097b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800970a:	4b43      	ldr	r3, [pc, #268]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	4940      	ldr	r1, [pc, #256]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009718:	4313      	orrs	r3, r2
 800971a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	2b02      	cmp	r3, #2
 8009722:	d107      	bne.n	8009734 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009724:	4b3c      	ldr	r3, [pc, #240]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d121      	bne.n	8009774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e0f6      	b.n	8009922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	2b03      	cmp	r3, #3
 800973a:	d107      	bne.n	800974c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800973c:	4b36      	ldr	r3, [pc, #216]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d115      	bne.n	8009774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e0ea      	b.n	8009922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d107      	bne.n	8009764 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009754:	4b30      	ldr	r3, [pc, #192]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800975c:	2b00      	cmp	r3, #0
 800975e:	d109      	bne.n	8009774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e0de      	b.n	8009922 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009764:	4b2c      	ldr	r3, [pc, #176]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0304 	and.w	r3, r3, #4
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e0d6      	b.n	8009922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009774:	4b28      	ldr	r3, [pc, #160]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	f023 0207 	bic.w	r2, r3, #7
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	4925      	ldr	r1, [pc, #148]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 8009782:	4313      	orrs	r3, r2
 8009784:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009786:	f7f9 fba1 	bl	8002ecc <HAL_GetTick>
 800978a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800978c:	e00a      	b.n	80097a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800978e:	f7f9 fb9d 	bl	8002ecc <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800979c:	4293      	cmp	r3, r2
 800979e:	d901      	bls.n	80097a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	e0be      	b.n	8009922 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d1eb      	bne.n	800978e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0302 	and.w	r3, r3, #2
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d010      	beq.n	80097e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68da      	ldr	r2, [r3, #12]
 80097c6:	4b14      	ldr	r3, [pc, #80]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d208      	bcs.n	80097e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097d2:	4b11      	ldr	r3, [pc, #68]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	f023 020f 	bic.w	r2, r3, #15
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	490e      	ldr	r1, [pc, #56]	@ (8009818 <HAL_RCC_ClockConfig+0x244>)
 80097e0:	4313      	orrs	r3, r2
 80097e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80097e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <HAL_RCC_ClockConfig+0x240>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 030f 	and.w	r3, r3, #15
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d214      	bcs.n	800981c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097f2:	4b08      	ldr	r3, [pc, #32]	@ (8009814 <HAL_RCC_ClockConfig+0x240>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f023 020f 	bic.w	r2, r3, #15
 80097fa:	4906      	ldr	r1, [pc, #24]	@ (8009814 <HAL_RCC_ClockConfig+0x240>)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	4313      	orrs	r3, r2
 8009800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009802:	4b04      	ldr	r3, [pc, #16]	@ (8009814 <HAL_RCC_ClockConfig+0x240>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 030f 	and.w	r3, r3, #15
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	429a      	cmp	r2, r3
 800980e:	d005      	beq.n	800981c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e086      	b.n	8009922 <HAL_RCC_ClockConfig+0x34e>
 8009814:	52002000 	.word	0x52002000
 8009818:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b00      	cmp	r3, #0
 8009826:	d010      	beq.n	800984a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691a      	ldr	r2, [r3, #16]
 800982c:	4b3f      	ldr	r3, [pc, #252]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009834:	429a      	cmp	r2, r3
 8009836:	d208      	bcs.n	800984a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009838:	4b3c      	ldr	r3, [pc, #240]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	4939      	ldr	r1, [pc, #228]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 8009846:	4313      	orrs	r3, r2
 8009848:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0308 	and.w	r3, r3, #8
 8009852:	2b00      	cmp	r3, #0
 8009854:	d010      	beq.n	8009878 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	695a      	ldr	r2, [r3, #20]
 800985a:	4b34      	ldr	r3, [pc, #208]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009862:	429a      	cmp	r2, r3
 8009864:	d208      	bcs.n	8009878 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009866:	4b31      	ldr	r3, [pc, #196]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	492e      	ldr	r1, [pc, #184]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 8009874:	4313      	orrs	r3, r2
 8009876:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 0310 	and.w	r3, r3, #16
 8009880:	2b00      	cmp	r3, #0
 8009882:	d010      	beq.n	80098a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	699a      	ldr	r2, [r3, #24]
 8009888:	4b28      	ldr	r3, [pc, #160]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 800988a:	69db      	ldr	r3, [r3, #28]
 800988c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009890:	429a      	cmp	r2, r3
 8009892:	d208      	bcs.n	80098a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009894:	4b25      	ldr	r3, [pc, #148]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 8009896:	69db      	ldr	r3, [r3, #28]
 8009898:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	4922      	ldr	r1, [pc, #136]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 0320 	and.w	r3, r3, #32
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d010      	beq.n	80098d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	69da      	ldr	r2, [r3, #28]
 80098b6:	4b1d      	ldr	r3, [pc, #116]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80098be:	429a      	cmp	r2, r3
 80098c0:	d208      	bcs.n	80098d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80098c2:	4b1a      	ldr	r3, [pc, #104]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	69db      	ldr	r3, [r3, #28]
 80098ce:	4917      	ldr	r1, [pc, #92]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 80098d0:	4313      	orrs	r3, r2
 80098d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80098d4:	f000 f834 	bl	8009940 <HAL_RCC_GetSysClockFreq>
 80098d8:	4602      	mov	r2, r0
 80098da:	4b14      	ldr	r3, [pc, #80]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	0a1b      	lsrs	r3, r3, #8
 80098e0:	f003 030f 	and.w	r3, r3, #15
 80098e4:	4912      	ldr	r1, [pc, #72]	@ (8009930 <HAL_RCC_ClockConfig+0x35c>)
 80098e6:	5ccb      	ldrb	r3, [r1, r3]
 80098e8:	f003 031f 	and.w	r3, r3, #31
 80098ec:	fa22 f303 	lsr.w	r3, r2, r3
 80098f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80098f2:	4b0e      	ldr	r3, [pc, #56]	@ (800992c <HAL_RCC_ClockConfig+0x358>)
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	f003 030f 	and.w	r3, r3, #15
 80098fa:	4a0d      	ldr	r2, [pc, #52]	@ (8009930 <HAL_RCC_ClockConfig+0x35c>)
 80098fc:	5cd3      	ldrb	r3, [r2, r3]
 80098fe:	f003 031f 	and.w	r3, r3, #31
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	fa22 f303 	lsr.w	r3, r2, r3
 8009908:	4a0a      	ldr	r2, [pc, #40]	@ (8009934 <HAL_RCC_ClockConfig+0x360>)
 800990a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800990c:	4a0a      	ldr	r2, [pc, #40]	@ (8009938 <HAL_RCC_ClockConfig+0x364>)
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009912:	4b0a      	ldr	r3, [pc, #40]	@ (800993c <HAL_RCC_ClockConfig+0x368>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f7f9 fa8e 	bl	8002e38 <HAL_InitTick>
 800991c:	4603      	mov	r3, r0
 800991e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009920:	7bfb      	ldrb	r3, [r7, #15]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3718      	adds	r7, #24
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	58024400 	.word	0x58024400
 8009930:	08014a20 	.word	0x08014a20
 8009934:	24000004 	.word	0x24000004
 8009938:	24000000 	.word	0x24000000
 800993c:	24000008 	.word	0x24000008

08009940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009940:	b480      	push	{r7}
 8009942:	b089      	sub	sp, #36	@ 0x24
 8009944:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009946:	4bb3      	ldr	r3, [pc, #716]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800994e:	2b18      	cmp	r3, #24
 8009950:	f200 8155 	bhi.w	8009bfe <HAL_RCC_GetSysClockFreq+0x2be>
 8009954:	a201      	add	r2, pc, #4	@ (adr r2, 800995c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995a:	bf00      	nop
 800995c:	080099c1 	.word	0x080099c1
 8009960:	08009bff 	.word	0x08009bff
 8009964:	08009bff 	.word	0x08009bff
 8009968:	08009bff 	.word	0x08009bff
 800996c:	08009bff 	.word	0x08009bff
 8009970:	08009bff 	.word	0x08009bff
 8009974:	08009bff 	.word	0x08009bff
 8009978:	08009bff 	.word	0x08009bff
 800997c:	080099e7 	.word	0x080099e7
 8009980:	08009bff 	.word	0x08009bff
 8009984:	08009bff 	.word	0x08009bff
 8009988:	08009bff 	.word	0x08009bff
 800998c:	08009bff 	.word	0x08009bff
 8009990:	08009bff 	.word	0x08009bff
 8009994:	08009bff 	.word	0x08009bff
 8009998:	08009bff 	.word	0x08009bff
 800999c:	080099ed 	.word	0x080099ed
 80099a0:	08009bff 	.word	0x08009bff
 80099a4:	08009bff 	.word	0x08009bff
 80099a8:	08009bff 	.word	0x08009bff
 80099ac:	08009bff 	.word	0x08009bff
 80099b0:	08009bff 	.word	0x08009bff
 80099b4:	08009bff 	.word	0x08009bff
 80099b8:	08009bff 	.word	0x08009bff
 80099bc:	080099f3 	.word	0x080099f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099c0:	4b94      	ldr	r3, [pc, #592]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0320 	and.w	r3, r3, #32
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d009      	beq.n	80099e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099cc:	4b91      	ldr	r3, [pc, #580]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	08db      	lsrs	r3, r3, #3
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	4a90      	ldr	r2, [pc, #576]	@ (8009c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80099d8:	fa22 f303 	lsr.w	r3, r2, r3
 80099dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80099de:	e111      	b.n	8009c04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80099e0:	4b8d      	ldr	r3, [pc, #564]	@ (8009c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80099e2:	61bb      	str	r3, [r7, #24]
      break;
 80099e4:	e10e      	b.n	8009c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80099e6:	4b8d      	ldr	r3, [pc, #564]	@ (8009c1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80099e8:	61bb      	str	r3, [r7, #24]
      break;
 80099ea:	e10b      	b.n	8009c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80099ec:	4b8c      	ldr	r3, [pc, #560]	@ (8009c20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80099ee:	61bb      	str	r3, [r7, #24]
      break;
 80099f0:	e108      	b.n	8009c04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099f2:	4b88      	ldr	r3, [pc, #544]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f6:	f003 0303 	and.w	r3, r3, #3
 80099fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80099fc:	4b85      	ldr	r3, [pc, #532]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a00:	091b      	lsrs	r3, r3, #4
 8009a02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a08:	4b82      	ldr	r3, [pc, #520]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a12:	4b80      	ldr	r3, [pc, #512]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a16:	08db      	lsrs	r3, r3, #3
 8009a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	fb02 f303 	mul.w	r3, r2, r3
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 80e1 	beq.w	8009bf8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	f000 8083 	beq.w	8009b44 <HAL_RCC_GetSysClockFreq+0x204>
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	f200 80a1 	bhi.w	8009b88 <HAL_RCC_GetSysClockFreq+0x248>
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <HAL_RCC_GetSysClockFreq+0x114>
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d056      	beq.n	8009b00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009a52:	e099      	b.n	8009b88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a54:	4b6f      	ldr	r3, [pc, #444]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0320 	and.w	r3, r3, #32
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d02d      	beq.n	8009abc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a60:	4b6c      	ldr	r3, [pc, #432]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	08db      	lsrs	r3, r3, #3
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	4a6b      	ldr	r2, [pc, #428]	@ (8009c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	ee07 3a90 	vmov	s15, r3
 8009a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a8a:	4b62      	ldr	r3, [pc, #392]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a92:	ee07 3a90 	vmov	s15, r3
 8009a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009aba:	e087      	b.n	8009bcc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	ee07 3a90 	vmov	s15, r3
 8009ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009c28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ace:	4b51      	ldr	r3, [pc, #324]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ae2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009afe:	e065      	b.n	8009bcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009c2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b12:	4b40      	ldr	r3, [pc, #256]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b42:	e043      	b.n	8009bcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	ee07 3a90 	vmov	s15, r3
 8009b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009c30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b56:	4b2f      	ldr	r3, [pc, #188]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b86:	e021      	b.n	8009bcc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009c2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009bcc:	4b11      	ldr	r3, [pc, #68]	@ (8009c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd0:	0a5b      	lsrs	r3, r3, #9
 8009bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	ee07 3a90 	vmov	s15, r3
 8009be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009be4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bf0:	ee17 3a90 	vmov	r3, s15
 8009bf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009bf6:	e005      	b.n	8009c04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	61bb      	str	r3, [r7, #24]
      break;
 8009bfc:	e002      	b.n	8009c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009bfe:	4b07      	ldr	r3, [pc, #28]	@ (8009c1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c00:	61bb      	str	r3, [r7, #24]
      break;
 8009c02:	bf00      	nop
  }

  return sysclockfreq;
 8009c04:	69bb      	ldr	r3, [r7, #24]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3724      	adds	r7, #36	@ 0x24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	58024400 	.word	0x58024400
 8009c18:	03d09000 	.word	0x03d09000
 8009c1c:	003d0900 	.word	0x003d0900
 8009c20:	017d7840 	.word	0x017d7840
 8009c24:	46000000 	.word	0x46000000
 8009c28:	4c742400 	.word	0x4c742400
 8009c2c:	4a742400 	.word	0x4a742400
 8009c30:	4bbebc20 	.word	0x4bbebc20

08009c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009c3a:	f7ff fe81 	bl	8009940 <HAL_RCC_GetSysClockFreq>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	4b10      	ldr	r3, [pc, #64]	@ (8009c84 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	0a1b      	lsrs	r3, r3, #8
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	490f      	ldr	r1, [pc, #60]	@ (8009c88 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c4c:	5ccb      	ldrb	r3, [r1, r3]
 8009c4e:	f003 031f 	and.w	r3, r3, #31
 8009c52:	fa22 f303 	lsr.w	r3, r2, r3
 8009c56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c58:	4b0a      	ldr	r3, [pc, #40]	@ (8009c84 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	4a09      	ldr	r2, [pc, #36]	@ (8009c88 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c62:	5cd3      	ldrb	r3, [r2, r3]
 8009c64:	f003 031f 	and.w	r3, r3, #31
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c6e:	4a07      	ldr	r2, [pc, #28]	@ (8009c8c <HAL_RCC_GetHCLKFreq+0x58>)
 8009c70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009c72:	4a07      	ldr	r2, [pc, #28]	@ (8009c90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009c78:	4b04      	ldr	r3, [pc, #16]	@ (8009c8c <HAL_RCC_GetHCLKFreq+0x58>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	58024400 	.word	0x58024400
 8009c88:	08014a20 	.word	0x08014a20
 8009c8c:	24000004 	.word	0x24000004
 8009c90:	24000000 	.word	0x24000000

08009c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009c98:	f7ff ffcc 	bl	8009c34 <HAL_RCC_GetHCLKFreq>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	4b06      	ldr	r3, [pc, #24]	@ (8009cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ca0:	69db      	ldr	r3, [r3, #28]
 8009ca2:	091b      	lsrs	r3, r3, #4
 8009ca4:	f003 0307 	and.w	r3, r3, #7
 8009ca8:	4904      	ldr	r1, [pc, #16]	@ (8009cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8009caa:	5ccb      	ldrb	r3, [r1, r3]
 8009cac:	f003 031f 	and.w	r3, r3, #31
 8009cb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	58024400 	.word	0x58024400
 8009cbc:	08014a20 	.word	0x08014a20

08009cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009cc4:	f7ff ffb6 	bl	8009c34 <HAL_RCC_GetHCLKFreq>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	4b06      	ldr	r3, [pc, #24]	@ (8009ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ccc:	69db      	ldr	r3, [r3, #28]
 8009cce:	0a1b      	lsrs	r3, r3, #8
 8009cd0:	f003 0307 	and.w	r3, r3, #7
 8009cd4:	4904      	ldr	r1, [pc, #16]	@ (8009ce8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009cd6:	5ccb      	ldrb	r3, [r1, r3]
 8009cd8:	f003 031f 	and.w	r3, r3, #31
 8009cdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	58024400 	.word	0x58024400
 8009ce8:	08014a20 	.word	0x08014a20

08009cec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cf0:	b0ca      	sub	sp, #296	@ 0x128
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009d10:	2500      	movs	r5, #0
 8009d12:	ea54 0305 	orrs.w	r3, r4, r5
 8009d16:	d049      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d22:	d02f      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009d24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d28:	d828      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d2e:	d01a      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009d30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d34:	d822      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d3e:	d007      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d40:	e01c      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d42:	4bb8      	ldr	r3, [pc, #736]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d46:	4ab7      	ldr	r2, [pc, #732]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d4e:	e01a      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d54:	3308      	adds	r3, #8
 8009d56:	2102      	movs	r1, #2
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f002 fb61 	bl	800c420 <RCCEx_PLL2_Config>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d64:	e00f      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d6a:	3328      	adds	r3, #40	@ 0x28
 8009d6c:	2102      	movs	r1, #2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f002 fc08 	bl	800c584 <RCCEx_PLL3_Config>
 8009d74:	4603      	mov	r3, r0
 8009d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d7a:	e004      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d82:	e000      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10a      	bne.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009d8e:	4ba5      	ldr	r3, [pc, #660]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d9c:	4aa1      	ldr	r2, [pc, #644]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d9e:	430b      	orrs	r3, r1
 8009da0:	6513      	str	r3, [r2, #80]	@ 0x50
 8009da2:	e003      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009db8:	f04f 0900 	mov.w	r9, #0
 8009dbc:	ea58 0309 	orrs.w	r3, r8, r9
 8009dc0:	d047      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	d82a      	bhi.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd2:	bf00      	nop
 8009dd4:	08009de9 	.word	0x08009de9
 8009dd8:	08009df7 	.word	0x08009df7
 8009ddc:	08009e0d 	.word	0x08009e0d
 8009de0:	08009e2b 	.word	0x08009e2b
 8009de4:	08009e2b 	.word	0x08009e2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009de8:	4b8e      	ldr	r3, [pc, #568]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dec:	4a8d      	ldr	r2, [pc, #564]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009df2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009df4:	e01a      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f002 fb0e 	bl	800c420 <RCCEx_PLL2_Config>
 8009e04:	4603      	mov	r3, r0
 8009e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e0a:	e00f      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e10:	3328      	adds	r3, #40	@ 0x28
 8009e12:	2100      	movs	r1, #0
 8009e14:	4618      	mov	r0, r3
 8009e16:	f002 fbb5 	bl	800c584 <RCCEx_PLL3_Config>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e20:	e004      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e28:	e000      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10a      	bne.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e34:	4b7b      	ldr	r3, [pc, #492]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e38:	f023 0107 	bic.w	r1, r3, #7
 8009e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e42:	4a78      	ldr	r2, [pc, #480]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e44:	430b      	orrs	r3, r1
 8009e46:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e48:	e003      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009e5e:	f04f 0b00 	mov.w	fp, #0
 8009e62:	ea5a 030b 	orrs.w	r3, sl, fp
 8009e66:	d04c      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e72:	d030      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e78:	d829      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009e7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e7c:	d02d      	beq.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e80:	d825      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009e82:	2b80      	cmp	r3, #128	@ 0x80
 8009e84:	d018      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009e86:	2b80      	cmp	r3, #128	@ 0x80
 8009e88:	d821      	bhi.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d002      	beq.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009e8e:	2b40      	cmp	r3, #64	@ 0x40
 8009e90:	d007      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009e92:	e01c      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e94:	4b63      	ldr	r3, [pc, #396]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e98:	4a62      	ldr	r2, [pc, #392]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009ea0:	e01c      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f002 fab8 	bl	800c420 <RCCEx_PLL2_Config>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009eb6:	e011      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ebc:	3328      	adds	r3, #40	@ 0x28
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f002 fb5f 	bl	800c584 <RCCEx_PLL3_Config>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009ecc:	e006      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ed4:	e002      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009ed6:	bf00      	nop
 8009ed8:	e000      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009ee4:	4b4f      	ldr	r3, [pc, #316]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ee8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ef2:	4a4c      	ldr	r2, [pc, #304]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ef8:	e003      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009efe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009f0e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009f12:	2300      	movs	r3, #0
 8009f14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009f18:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	d053      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009f2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f2e:	d035      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009f30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f34:	d82e      	bhi.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009f36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f3a:	d031      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009f3c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009f40:	d828      	bhi.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009f42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f46:	d01a      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009f48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f4c:	d822      	bhi.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009f52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f56:	d007      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009f58:	e01c      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f5a:	4b32      	ldr	r3, [pc, #200]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5e:	4a31      	ldr	r2, [pc, #196]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f66:	e01c      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	2100      	movs	r1, #0
 8009f70:	4618      	mov	r0, r3
 8009f72:	f002 fa55 	bl	800c420 <RCCEx_PLL2_Config>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009f7c:	e011      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f82:	3328      	adds	r3, #40	@ 0x28
 8009f84:	2100      	movs	r1, #0
 8009f86:	4618      	mov	r0, r3
 8009f88:	f002 fafc 	bl	800c584 <RCCEx_PLL3_Config>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f92:	e006      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f9a:	e002      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009f9c:	bf00      	nop
 8009f9e:	e000      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10b      	bne.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009faa:	4b1e      	ldr	r3, [pc, #120]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009fba:	4a1a      	ldr	r2, [pc, #104]	@ (800a024 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fbc:	430b      	orrs	r3, r1
 8009fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fc0:	e003      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009fd6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009fe0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	d056      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ff2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ff6:	d038      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009ff8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ffc:	d831      	bhi.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009ffe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a002:	d034      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a004:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a008:	d82b      	bhi.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a00a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a00e:	d01d      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a010:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a014:	d825      	bhi.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a016:	2b00      	cmp	r3, #0
 800a018:	d006      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a01a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a01e:	d00a      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a020:	e01f      	b.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a022:	bf00      	nop
 800a024:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a028:	4ba2      	ldr	r3, [pc, #648]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02c:	4aa1      	ldr	r2, [pc, #644]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a02e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a034:	e01c      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a03a:	3308      	adds	r3, #8
 800a03c:	2100      	movs	r1, #0
 800a03e:	4618      	mov	r0, r3
 800a040:	f002 f9ee 	bl	800c420 <RCCEx_PLL2_Config>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a04a:	e011      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a050:	3328      	adds	r3, #40	@ 0x28
 800a052:	2100      	movs	r1, #0
 800a054:	4618      	mov	r0, r3
 800a056:	f002 fa95 	bl	800c584 <RCCEx_PLL3_Config>
 800a05a:	4603      	mov	r3, r0
 800a05c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a060:	e006      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a068:	e002      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a06a:	bf00      	nop
 800a06c:	e000      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a06e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10b      	bne.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a078:	4b8e      	ldr	r3, [pc, #568]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a07a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a07c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a084:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a088:	4a8a      	ldr	r2, [pc, #552]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a08a:	430b      	orrs	r3, r1
 800a08c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a08e:	e003      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a0a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a0ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	d03a      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0be:	2b30      	cmp	r3, #48	@ 0x30
 800a0c0:	d01f      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a0c2:	2b30      	cmp	r3, #48	@ 0x30
 800a0c4:	d819      	bhi.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a0c6:	2b20      	cmp	r3, #32
 800a0c8:	d00c      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	d815      	bhi.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d019      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a0d2:	2b10      	cmp	r3, #16
 800a0d4:	d111      	bne.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0d6:	4b77      	ldr	r3, [pc, #476]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0da:	4a76      	ldr	r2, [pc, #472]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a0e2:	e011      	b.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	2102      	movs	r1, #2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f002 f997 	bl	800c420 <RCCEx_PLL2_Config>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a0f8:	e006      	b.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a100:	e002      	b.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a102:	bf00      	nop
 800a104:	e000      	b.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a106:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d10a      	bne.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a110:	4b68      	ldr	r3, [pc, #416]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a114:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a11e:	4a65      	ldr	r2, [pc, #404]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a120:	430b      	orrs	r3, r1
 800a122:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a124:	e003      	b.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a12a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a13a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a13e:	2300      	movs	r3, #0
 800a140:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a144:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a148:	460b      	mov	r3, r1
 800a14a:	4313      	orrs	r3, r2
 800a14c:	d051      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a158:	d035      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a15a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a15e:	d82e      	bhi.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a160:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a164:	d031      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a166:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a16a:	d828      	bhi.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a16c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a170:	d01a      	beq.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a176:	d822      	bhi.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d003      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a17c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a180:	d007      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a182:	e01c      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a184:	4b4b      	ldr	r3, [pc, #300]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a188:	4a4a      	ldr	r2, [pc, #296]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a18a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a18e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a190:	e01c      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a196:	3308      	adds	r3, #8
 800a198:	2100      	movs	r1, #0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f002 f940 	bl	800c420 <RCCEx_PLL2_Config>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a1a6:	e011      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ac:	3328      	adds	r3, #40	@ 0x28
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f002 f9e7 	bl	800c584 <RCCEx_PLL3_Config>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a1bc:	e006      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1c4:	e002      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a1c6:	bf00      	nop
 800a1c8:	e000      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a1ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a1d4:	4b37      	ldr	r3, [pc, #220]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1e2:	4a34      	ldr	r2, [pc, #208]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1e4:	430b      	orrs	r3, r1
 800a1e6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a1e8:	e003      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a1fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a202:	2300      	movs	r3, #0
 800a204:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a208:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a20c:	460b      	mov	r3, r1
 800a20e:	4313      	orrs	r3, r2
 800a210:	d056      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a21c:	d033      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a21e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a222:	d82c      	bhi.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a224:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a228:	d02f      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a22a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a22e:	d826      	bhi.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a230:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a234:	d02b      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a236:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a23a:	d820      	bhi.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a23c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a240:	d012      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a242:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a246:	d81a      	bhi.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d022      	beq.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a24c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a250:	d115      	bne.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a256:	3308      	adds	r3, #8
 800a258:	2101      	movs	r1, #1
 800a25a:	4618      	mov	r0, r3
 800a25c:	f002 f8e0 	bl	800c420 <RCCEx_PLL2_Config>
 800a260:	4603      	mov	r3, r0
 800a262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a266:	e015      	b.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a26c:	3328      	adds	r3, #40	@ 0x28
 800a26e:	2101      	movs	r1, #1
 800a270:	4618      	mov	r0, r3
 800a272:	f002 f987 	bl	800c584 <RCCEx_PLL3_Config>
 800a276:	4603      	mov	r3, r0
 800a278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a27c:	e00a      	b.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a284:	e006      	b.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a286:	bf00      	nop
 800a288:	e004      	b.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a28a:	bf00      	nop
 800a28c:	e002      	b.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a28e:	bf00      	nop
 800a290:	e000      	b.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a292:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10d      	bne.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a29c:	4b05      	ldr	r3, [pc, #20]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a29e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2aa:	4a02      	ldr	r2, [pc, #8]	@ (800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2ac:	430b      	orrs	r3, r1
 800a2ae:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2b0:	e006      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a2b2:	bf00      	nop
 800a2b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a2cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	d055      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2ec:	d033      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a2ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2f2:	d82c      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a2f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2f8:	d02f      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2fe:	d826      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a300:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a304:	d02b      	beq.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a306:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a30a:	d820      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a30c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a310:	d012      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a316:	d81a      	bhi.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d022      	beq.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a31c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a320:	d115      	bne.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a326:	3308      	adds	r3, #8
 800a328:	2101      	movs	r1, #1
 800a32a:	4618      	mov	r0, r3
 800a32c:	f002 f878 	bl	800c420 <RCCEx_PLL2_Config>
 800a330:	4603      	mov	r3, r0
 800a332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a336:	e015      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a33c:	3328      	adds	r3, #40	@ 0x28
 800a33e:	2101      	movs	r1, #1
 800a340:	4618      	mov	r0, r3
 800a342:	f002 f91f 	bl	800c584 <RCCEx_PLL3_Config>
 800a346:	4603      	mov	r3, r0
 800a348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a34c:	e00a      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a354:	e006      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a356:	bf00      	nop
 800a358:	e004      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a35a:	bf00      	nop
 800a35c:	e002      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a35e:	bf00      	nop
 800a360:	e000      	b.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a362:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10b      	bne.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a36c:	4ba3      	ldr	r3, [pc, #652]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a36e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a370:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a37c:	4a9f      	ldr	r2, [pc, #636]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a37e:	430b      	orrs	r3, r1
 800a380:	6593      	str	r3, [r2, #88]	@ 0x58
 800a382:	e003      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a398:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a39c:	2300      	movs	r3, #0
 800a39e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a3a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	d037      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3b6:	d00e      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a3b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3bc:	d816      	bhi.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d018      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a3c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3c6:	d111      	bne.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3c8:	4b8c      	ldr	r3, [pc, #560]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3cc:	4a8b      	ldr	r2, [pc, #556]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a3d4:	e00f      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3da:	3308      	adds	r3, #8
 800a3dc:	2101      	movs	r1, #1
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f002 f81e 	bl	800c420 <RCCEx_PLL2_Config>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a3ea:	e004      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3f2:	e000      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a3f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10a      	bne.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a3fe:	4b7f      	ldr	r3, [pc, #508]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a402:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a40a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a40c:	4a7b      	ldr	r2, [pc, #492]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a40e:	430b      	orrs	r3, r1
 800a410:	6513      	str	r3, [r2, #80]	@ 0x50
 800a412:	e003      	b.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a42c:	2300      	movs	r3, #0
 800a42e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a432:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a436:	460b      	mov	r3, r1
 800a438:	4313      	orrs	r3, r2
 800a43a:	d039      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a43c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a442:	2b03      	cmp	r3, #3
 800a444:	d81c      	bhi.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a446:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a489 	.word	0x0800a489
 800a450:	0800a45d 	.word	0x0800a45d
 800a454:	0800a46b 	.word	0x0800a46b
 800a458:	0800a489 	.word	0x0800a489
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a45c:	4b67      	ldr	r3, [pc, #412]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a460:	4a66      	ldr	r2, [pc, #408]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a468:	e00f      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a46e:	3308      	adds	r3, #8
 800a470:	2102      	movs	r1, #2
 800a472:	4618      	mov	r0, r3
 800a474:	f001 ffd4 	bl	800c420 <RCCEx_PLL2_Config>
 800a478:	4603      	mov	r3, r0
 800a47a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a47e:	e004      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a486:	e000      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a48a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d10a      	bne.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a492:	4b5a      	ldr	r3, [pc, #360]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a496:	f023 0103 	bic.w	r1, r3, #3
 800a49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a49e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4a0:	4a56      	ldr	r2, [pc, #344]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4a2:	430b      	orrs	r3, r1
 800a4a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a4a6:	e003      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a4bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a4c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	f000 809f 	beq.w	800a610 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a4d2:	4b4b      	ldr	r3, [pc, #300]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a4a      	ldr	r2, [pc, #296]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a4d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a4de:	f7f8 fcf5 	bl	8002ecc <HAL_GetTick>
 800a4e2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4e6:	e00b      	b.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4e8:	f7f8 fcf0 	bl	8002ecc <HAL_GetTick>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	2b64      	cmp	r3, #100	@ 0x64
 800a4f6:	d903      	bls.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a4fe:	e005      	b.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a500:	4b3f      	ldr	r3, [pc, #252]	@ (800a600 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d0ed      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a50c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a510:	2b00      	cmp	r3, #0
 800a512:	d179      	bne.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a514:	4b39      	ldr	r3, [pc, #228]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a516:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a51c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a520:	4053      	eors	r3, r2
 800a522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a526:	2b00      	cmp	r3, #0
 800a528:	d015      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a52a:	4b34      	ldr	r3, [pc, #208]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a52c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a52e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a532:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a536:	4b31      	ldr	r3, [pc, #196]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a53a:	4a30      	ldr	r2, [pc, #192]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a53c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a540:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a542:	4b2e      	ldr	r3, [pc, #184]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a546:	4a2d      	ldr	r2, [pc, #180]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a54c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a54e:	4a2b      	ldr	r2, [pc, #172]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a550:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a554:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a55a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a55e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a562:	d118      	bne.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a564:	f7f8 fcb2 	bl	8002ecc <HAL_GetTick>
 800a568:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a56c:	e00d      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a56e:	f7f8 fcad 	bl	8002ecc <HAL_GetTick>
 800a572:	4602      	mov	r2, r0
 800a574:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a578:	1ad2      	subs	r2, r2, r3
 800a57a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a57e:	429a      	cmp	r2, r3
 800a580:	d903      	bls.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a588:	e005      	b.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a58a:	4b1c      	ldr	r3, [pc, #112]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a58c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0eb      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d129      	bne.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a5a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5ae:	d10e      	bne.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a5b0:	4b12      	ldr	r3, [pc, #72]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a5c0:	091a      	lsrs	r2, r3, #4
 800a5c2:	4b10      	ldr	r3, [pc, #64]	@ (800a604 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	4a0d      	ldr	r2, [pc, #52]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5c8:	430b      	orrs	r3, r1
 800a5ca:	6113      	str	r3, [r2, #16]
 800a5cc:	e005      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a5ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	4a0a      	ldr	r2, [pc, #40]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a5d8:	6113      	str	r3, [r2, #16]
 800a5da:	4b08      	ldr	r3, [pc, #32]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a5e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5ea:	4a04      	ldr	r2, [pc, #16]	@ (800a5fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5ec:	430b      	orrs	r3, r1
 800a5ee:	6713      	str	r3, [r2, #112]	@ 0x70
 800a5f0:	e00e      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a5fa:	e009      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a5fc:	58024400 	.word	0x58024400
 800a600:	58024800 	.word	0x58024800
 800a604:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a60c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	f002 0301 	and.w	r3, r2, #1
 800a61c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a620:	2300      	movs	r3, #0
 800a622:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a626:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4313      	orrs	r3, r2
 800a62e:	f000 8089 	beq.w	800a744 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a636:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a638:	2b28      	cmp	r3, #40	@ 0x28
 800a63a:	d86b      	bhi.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a63c:	a201      	add	r2, pc, #4	@ (adr r2, 800a644 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a642:	bf00      	nop
 800a644:	0800a71d 	.word	0x0800a71d
 800a648:	0800a715 	.word	0x0800a715
 800a64c:	0800a715 	.word	0x0800a715
 800a650:	0800a715 	.word	0x0800a715
 800a654:	0800a715 	.word	0x0800a715
 800a658:	0800a715 	.word	0x0800a715
 800a65c:	0800a715 	.word	0x0800a715
 800a660:	0800a715 	.word	0x0800a715
 800a664:	0800a6e9 	.word	0x0800a6e9
 800a668:	0800a715 	.word	0x0800a715
 800a66c:	0800a715 	.word	0x0800a715
 800a670:	0800a715 	.word	0x0800a715
 800a674:	0800a715 	.word	0x0800a715
 800a678:	0800a715 	.word	0x0800a715
 800a67c:	0800a715 	.word	0x0800a715
 800a680:	0800a715 	.word	0x0800a715
 800a684:	0800a6ff 	.word	0x0800a6ff
 800a688:	0800a715 	.word	0x0800a715
 800a68c:	0800a715 	.word	0x0800a715
 800a690:	0800a715 	.word	0x0800a715
 800a694:	0800a715 	.word	0x0800a715
 800a698:	0800a715 	.word	0x0800a715
 800a69c:	0800a715 	.word	0x0800a715
 800a6a0:	0800a715 	.word	0x0800a715
 800a6a4:	0800a71d 	.word	0x0800a71d
 800a6a8:	0800a715 	.word	0x0800a715
 800a6ac:	0800a715 	.word	0x0800a715
 800a6b0:	0800a715 	.word	0x0800a715
 800a6b4:	0800a715 	.word	0x0800a715
 800a6b8:	0800a715 	.word	0x0800a715
 800a6bc:	0800a715 	.word	0x0800a715
 800a6c0:	0800a715 	.word	0x0800a715
 800a6c4:	0800a71d 	.word	0x0800a71d
 800a6c8:	0800a715 	.word	0x0800a715
 800a6cc:	0800a715 	.word	0x0800a715
 800a6d0:	0800a715 	.word	0x0800a715
 800a6d4:	0800a715 	.word	0x0800a715
 800a6d8:	0800a715 	.word	0x0800a715
 800a6dc:	0800a715 	.word	0x0800a715
 800a6e0:	0800a715 	.word	0x0800a715
 800a6e4:	0800a71d 	.word	0x0800a71d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f001 fe95 	bl	800c420 <RCCEx_PLL2_Config>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a6fc:	e00f      	b.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a702:	3328      	adds	r3, #40	@ 0x28
 800a704:	2101      	movs	r1, #1
 800a706:	4618      	mov	r0, r3
 800a708:	f001 ff3c 	bl	800c584 <RCCEx_PLL3_Config>
 800a70c:	4603      	mov	r3, r0
 800a70e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a712:	e004      	b.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a71a:	e000      	b.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a71c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a71e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10a      	bne.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a726:	4bbf      	ldr	r3, [pc, #764]	@ (800aa24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a72a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a734:	4abb      	ldr	r2, [pc, #748]	@ (800aa24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a736:	430b      	orrs	r3, r1
 800a738:	6553      	str	r3, [r2, #84]	@ 0x54
 800a73a:	e003      	b.n	800a744 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a73c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74c:	f002 0302 	and.w	r3, r2, #2
 800a750:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a754:	2300      	movs	r3, #0
 800a756:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a75a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a75e:	460b      	mov	r3, r1
 800a760:	4313      	orrs	r3, r2
 800a762:	d041      	beq.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a76a:	2b05      	cmp	r3, #5
 800a76c:	d824      	bhi.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a76e:	a201      	add	r2, pc, #4	@ (adr r2, 800a774 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a774:	0800a7c1 	.word	0x0800a7c1
 800a778:	0800a78d 	.word	0x0800a78d
 800a77c:	0800a7a3 	.word	0x0800a7a3
 800a780:	0800a7c1 	.word	0x0800a7c1
 800a784:	0800a7c1 	.word	0x0800a7c1
 800a788:	0800a7c1 	.word	0x0800a7c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a78c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a790:	3308      	adds	r3, #8
 800a792:	2101      	movs	r1, #1
 800a794:	4618      	mov	r0, r3
 800a796:	f001 fe43 	bl	800c420 <RCCEx_PLL2_Config>
 800a79a:	4603      	mov	r3, r0
 800a79c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a7a0:	e00f      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7a6:	3328      	adds	r3, #40	@ 0x28
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f001 feea 	bl	800c584 <RCCEx_PLL3_Config>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a7b6:	e004      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7be:	e000      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a7c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10a      	bne.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a7ca:	4b96      	ldr	r3, [pc, #600]	@ (800aa24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ce:	f023 0107 	bic.w	r1, r3, #7
 800a7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7d8:	4a92      	ldr	r2, [pc, #584]	@ (800aa24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7da:	430b      	orrs	r3, r1
 800a7dc:	6553      	str	r3, [r2, #84]	@ 0x54
 800a7de:	e003      	b.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f002 0304 	and.w	r3, r2, #4
 800a7f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a802:	460b      	mov	r3, r1
 800a804:	4313      	orrs	r3, r2
 800a806:	d044      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a80c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a810:	2b05      	cmp	r3, #5
 800a812:	d825      	bhi.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a814:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81a:	bf00      	nop
 800a81c:	0800a869 	.word	0x0800a869
 800a820:	0800a835 	.word	0x0800a835
 800a824:	0800a84b 	.word	0x0800a84b
 800a828:	0800a869 	.word	0x0800a869
 800a82c:	0800a869 	.word	0x0800a869
 800a830:	0800a869 	.word	0x0800a869
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a838:	3308      	adds	r3, #8
 800a83a:	2101      	movs	r1, #1
 800a83c:	4618      	mov	r0, r3
 800a83e:	f001 fdef 	bl	800c420 <RCCEx_PLL2_Config>
 800a842:	4603      	mov	r3, r0
 800a844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a848:	e00f      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a84e:	3328      	adds	r3, #40	@ 0x28
 800a850:	2101      	movs	r1, #1
 800a852:	4618      	mov	r0, r3
 800a854:	f001 fe96 	bl	800c584 <RCCEx_PLL3_Config>
 800a858:	4603      	mov	r3, r0
 800a85a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a85e:	e004      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a866:	e000      	b.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a86a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10b      	bne.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a872:	4b6c      	ldr	r3, [pc, #432]	@ (800aa24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a876:	f023 0107 	bic.w	r1, r3, #7
 800a87a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a87e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a882:	4a68      	ldr	r2, [pc, #416]	@ (800aa24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a884:	430b      	orrs	r3, r1
 800a886:	6593      	str	r3, [r2, #88]	@ 0x58
 800a888:	e003      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a88a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a88e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f002 0320 	and.w	r3, r2, #32
 800a89e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a8a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	d055      	beq.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a8be:	d033      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a8c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a8c4:	d82c      	bhi.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ca:	d02f      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a8cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8d0:	d826      	bhi.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a8d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a8d6:	d02b      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a8d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a8dc:	d820      	bhi.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a8de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8e2:	d012      	beq.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a8e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8e8:	d81a      	bhi.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d022      	beq.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a8ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8f2:	d115      	bne.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8f8:	3308      	adds	r3, #8
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f001 fd8f 	bl	800c420 <RCCEx_PLL2_Config>
 800a902:	4603      	mov	r3, r0
 800a904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a908:	e015      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a90e:	3328      	adds	r3, #40	@ 0x28
 800a910:	2102      	movs	r1, #2
 800a912:	4618      	mov	r0, r3
 800a914:	f001 fe36 	bl	800c584 <RCCEx_PLL3_Config>
 800a918:	4603      	mov	r3, r0
 800a91a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a91e:	e00a      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a926:	e006      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a928:	bf00      	nop
 800a92a:	e004      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a92c:	bf00      	nop
 800a92e:	e002      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a930:	bf00      	nop
 800a932:	e000      	b.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a934:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10b      	bne.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a93e:	4b39      	ldr	r3, [pc, #228]	@ (800aa24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a942:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a94a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a94e:	4a35      	ldr	r2, [pc, #212]	@ (800aa24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a950:	430b      	orrs	r3, r1
 800a952:	6553      	str	r3, [r2, #84]	@ 0x54
 800a954:	e003      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a95a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a96a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a96e:	2300      	movs	r3, #0
 800a970:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a974:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a978:	460b      	mov	r3, r1
 800a97a:	4313      	orrs	r3, r2
 800a97c:	d058      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a982:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a986:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a98a:	d033      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a98c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a990:	d82c      	bhi.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a996:	d02f      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a99c:	d826      	bhi.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a99e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a9a2:	d02b      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a9a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a9a8:	d820      	bhi.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a9aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9ae:	d012      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a9b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9b4:	d81a      	bhi.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d022      	beq.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a9ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9be:	d115      	bne.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f001 fd29 	bl	800c420 <RCCEx_PLL2_Config>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a9d4:	e015      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9da:	3328      	adds	r3, #40	@ 0x28
 800a9dc:	2102      	movs	r1, #2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f001 fdd0 	bl	800c584 <RCCEx_PLL3_Config>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a9ea:	e00a      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9f2:	e006      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a9f4:	bf00      	nop
 800a9f6:	e004      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a9f8:	bf00      	nop
 800a9fa:	e002      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a9fc:	bf00      	nop
 800a9fe:	e000      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10e      	bne.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa0a:	4b06      	ldr	r3, [pc, #24]	@ (800aa24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa0e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aa12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa1a:	4a02      	ldr	r2, [pc, #8]	@ (800aa24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa1c:	430b      	orrs	r3, r1
 800aa1e:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa20:	e006      	b.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800aa22:	bf00      	nop
 800aa24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aa30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aa3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aa40:	2300      	movs	r3, #0
 800aa42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aa46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	d055      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aa50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aa58:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aa5c:	d033      	beq.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800aa5e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aa62:	d82c      	bhi.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aa64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa68:	d02f      	beq.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800aa6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa6e:	d826      	bhi.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aa70:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aa74:	d02b      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800aa76:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aa7a:	d820      	bhi.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aa7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa80:	d012      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800aa82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa86:	d81a      	bhi.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d022      	beq.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800aa8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa90:	d115      	bne.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa96:	3308      	adds	r3, #8
 800aa98:	2100      	movs	r1, #0
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f001 fcc0 	bl	800c420 <RCCEx_PLL2_Config>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aaa6:	e015      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaac:	3328      	adds	r3, #40	@ 0x28
 800aaae:	2102      	movs	r1, #2
 800aab0:	4618      	mov	r0, r3
 800aab2:	f001 fd67 	bl	800c584 <RCCEx_PLL3_Config>
 800aab6:	4603      	mov	r3, r0
 800aab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aabc:	e00a      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aac4:	e006      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aac6:	bf00      	nop
 800aac8:	e004      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aaca:	bf00      	nop
 800aacc:	e002      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aace:	bf00      	nop
 800aad0:	e000      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10b      	bne.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aadc:	4ba1      	ldr	r3, [pc, #644]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aae0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800aae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aae8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aaec:	4a9d      	ldr	r2, [pc, #628]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aaee:	430b      	orrs	r3, r1
 800aaf0:	6593      	str	r3, [r2, #88]	@ 0x58
 800aaf2:	e003      	b.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f002 0308 	and.w	r3, r2, #8
 800ab08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ab16:	460b      	mov	r3, r1
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	d01e      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ab1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab28:	d10c      	bne.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab2e:	3328      	adds	r3, #40	@ 0x28
 800ab30:	2102      	movs	r1, #2
 800ab32:	4618      	mov	r0, r3
 800ab34:	f001 fd26 	bl	800c584 <RCCEx_PLL3_Config>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d002      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ab44:	4b87      	ldr	r3, [pc, #540]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab48:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab54:	4a83      	ldr	r2, [pc, #524]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab56:	430b      	orrs	r3, r1
 800ab58:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	f002 0310 	and.w	r3, r2, #16
 800ab66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ab70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ab74:	460b      	mov	r3, r1
 800ab76:	4313      	orrs	r3, r2
 800ab78:	d01e      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ab7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab86:	d10c      	bne.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab8c:	3328      	adds	r3, #40	@ 0x28
 800ab8e:	2102      	movs	r1, #2
 800ab90:	4618      	mov	r0, r3
 800ab92:	f001 fcf7 	bl	800c584 <RCCEx_PLL3_Config>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aba2:	4b70      	ldr	r3, [pc, #448]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aba6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800abaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800abb2:	4a6c      	ldr	r2, [pc, #432]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abb4:	430b      	orrs	r3, r1
 800abb6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800abb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800abc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800abc8:	2300      	movs	r3, #0
 800abca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800abce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800abd2:	460b      	mov	r3, r1
 800abd4:	4313      	orrs	r3, r2
 800abd6:	d03e      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800abd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800abe0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abe4:	d022      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800abe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abea:	d81b      	bhi.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800abf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abf4:	d00b      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800abf6:	e015      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abfc:	3308      	adds	r3, #8
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f001 fc0d 	bl	800c420 <RCCEx_PLL2_Config>
 800ac06:	4603      	mov	r3, r0
 800ac08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ac0c:	e00f      	b.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac12:	3328      	adds	r3, #40	@ 0x28
 800ac14:	2102      	movs	r1, #2
 800ac16:	4618      	mov	r0, r3
 800ac18:	f001 fcb4 	bl	800c584 <RCCEx_PLL3_Config>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ac22:	e004      	b.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac2a:	e000      	b.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ac2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10b      	bne.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ac36:	4b4b      	ldr	r3, [pc, #300]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ac3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac46:	4a47      	ldr	r2, [pc, #284]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac48:	430b      	orrs	r3, r1
 800ac4a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac4c:	e003      	b.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ac56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ac62:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac64:	2300      	movs	r3, #0
 800ac66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	d03b      	beq.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ac72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac7e:	d01f      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ac80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac84:	d818      	bhi.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ac86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac8a:	d003      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ac8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac90:	d007      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ac92:	e011      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac94:	4b33      	ldr	r3, [pc, #204]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac98:	4a32      	ldr	r2, [pc, #200]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800aca0:	e00f      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aca6:	3328      	adds	r3, #40	@ 0x28
 800aca8:	2101      	movs	r1, #1
 800acaa:	4618      	mov	r0, r3
 800acac:	f001 fc6a 	bl	800c584 <RCCEx_PLL3_Config>
 800acb0:	4603      	mov	r3, r0
 800acb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800acb6:	e004      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800acbe:	e000      	b.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800acc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10b      	bne.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800acca:	4b26      	ldr	r3, [pc, #152]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800accc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800acd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acda:	4a22      	ldr	r2, [pc, #136]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acdc:	430b      	orrs	r3, r1
 800acde:	6553      	str	r3, [r2, #84]	@ 0x54
 800ace0:	e003      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ace2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ace6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800acea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800acf6:	673b      	str	r3, [r7, #112]	@ 0x70
 800acf8:	2300      	movs	r3, #0
 800acfa:	677b      	str	r3, [r7, #116]	@ 0x74
 800acfc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ad00:	460b      	mov	r3, r1
 800ad02:	4313      	orrs	r3, r2
 800ad04:	d034      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ad06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ad10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad14:	d007      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ad16:	e011      	b.n	800ad3c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad18:	4b12      	ldr	r3, [pc, #72]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad1c:	4a11      	ldr	r2, [pc, #68]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ad24:	e00e      	b.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	2102      	movs	r1, #2
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f001 fb76 	bl	800c420 <RCCEx_PLL2_Config>
 800ad34:	4603      	mov	r3, r0
 800ad36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ad3a:	e003      	b.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10d      	bne.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ad4c:	4b05      	ldr	r3, [pc, #20]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad5a:	4a02      	ldr	r2, [pc, #8]	@ (800ad64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad5c:	430b      	orrs	r3, r1
 800ad5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad60:	e006      	b.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ad62:	bf00      	nop
 800ad64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ad70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ad7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad7e:	2300      	movs	r3, #0
 800ad80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ad86:	460b      	mov	r3, r1
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	d00c      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad90:	3328      	adds	r3, #40	@ 0x28
 800ad92:	2102      	movs	r1, #2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f001 fbf5 	bl	800c584 <RCCEx_PLL3_Config>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ada6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800adb2:	663b      	str	r3, [r7, #96]	@ 0x60
 800adb4:	2300      	movs	r3, #0
 800adb6:	667b      	str	r3, [r7, #100]	@ 0x64
 800adb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800adbc:	460b      	mov	r3, r1
 800adbe:	4313      	orrs	r3, r2
 800adc0:	d038      	beq.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800adc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adce:	d018      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800add0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800add4:	d811      	bhi.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800add6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adda:	d014      	beq.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800addc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ade0:	d80b      	bhi.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d011      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ade6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adea:	d106      	bne.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adec:	4bc3      	ldr	r3, [pc, #780]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adf0:	4ac2      	ldr	r2, [pc, #776]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800adf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800adf8:	e008      	b.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae00:	e004      	b.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae02:	bf00      	nop
 800ae04:	e002      	b.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae06:	bf00      	nop
 800ae08:	e000      	b.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10b      	bne.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ae14:	4bb9      	ldr	r3, [pc, #740]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ae1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae24:	4ab5      	ldr	r2, [pc, #724]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae26:	430b      	orrs	r3, r1
 800ae28:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae2a:	e003      	b.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ae34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ae40:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae42:	2300      	movs	r3, #0
 800ae44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	d009      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae50:	4baa      	ldr	r3, [pc, #680]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae54:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ae58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae5e:	4aa7      	ldr	r2, [pc, #668]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae60:	430b      	orrs	r3, r1
 800ae62:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ae64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800ae70:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae72:	2300      	movs	r3, #0
 800ae74:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	d00a      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ae80:	4b9e      	ldr	r3, [pc, #632]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800ae88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ae90:	4a9a      	ldr	r2, [pc, #616]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae92:	430b      	orrs	r3, r1
 800ae94:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800aea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aea4:	2300      	movs	r3, #0
 800aea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aea8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800aeac:	460b      	mov	r3, r1
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	d009      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aeb2:	4b92      	ldr	r3, [pc, #584]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aeb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeb6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800aeba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aec0:	4a8e      	ldr	r2, [pc, #568]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aec2:	430b      	orrs	r3, r1
 800aec4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800aed2:	643b      	str	r3, [r7, #64]	@ 0x40
 800aed4:	2300      	movs	r3, #0
 800aed6:	647b      	str	r3, [r7, #68]	@ 0x44
 800aed8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800aedc:	460b      	mov	r3, r1
 800aede:	4313      	orrs	r3, r2
 800aee0:	d00e      	beq.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aee2:	4b86      	ldr	r3, [pc, #536]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	4a85      	ldr	r2, [pc, #532]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aee8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aeec:	6113      	str	r3, [r2, #16]
 800aeee:	4b83      	ldr	r3, [pc, #524]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aef0:	6919      	ldr	r1, [r3, #16]
 800aef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aef6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800aefa:	4a80      	ldr	r2, [pc, #512]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aefc:	430b      	orrs	r3, r1
 800aefe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800af0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af0e:	2300      	movs	r3, #0
 800af10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af12:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800af16:	460b      	mov	r3, r1
 800af18:	4313      	orrs	r3, r2
 800af1a:	d009      	beq.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800af1c:	4b77      	ldr	r3, [pc, #476]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af20:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800af24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af2a:	4a74      	ldr	r2, [pc, #464]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af2c:	430b      	orrs	r3, r1
 800af2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800af30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800af3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800af3e:	2300      	movs	r3, #0
 800af40:	637b      	str	r3, [r7, #52]	@ 0x34
 800af42:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800af46:	460b      	mov	r3, r1
 800af48:	4313      	orrs	r3, r2
 800af4a:	d00a      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800af4c:	4b6b      	ldr	r3, [pc, #428]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af50:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800af54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af5c:	4a67      	ldr	r2, [pc, #412]	@ (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af5e:	430b      	orrs	r3, r1
 800af60:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800af62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6a:	2100      	movs	r1, #0
 800af6c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800af6e:	f003 0301 	and.w	r3, r3, #1
 800af72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af74:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800af78:	460b      	mov	r3, r1
 800af7a:	4313      	orrs	r3, r2
 800af7c:	d011      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af82:	3308      	adds	r3, #8
 800af84:	2100      	movs	r1, #0
 800af86:	4618      	mov	r0, r3
 800af88:	f001 fa4a 	bl	800c420 <RCCEx_PLL2_Config>
 800af8c:	4603      	mov	r3, r0
 800af8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800af92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800afa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	2100      	movs	r1, #0
 800afac:	6239      	str	r1, [r7, #32]
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800afb4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800afb8:	460b      	mov	r3, r1
 800afba:	4313      	orrs	r3, r2
 800afbc:	d011      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afc2:	3308      	adds	r3, #8
 800afc4:	2101      	movs	r1, #1
 800afc6:	4618      	mov	r0, r3
 800afc8:	f001 fa2a 	bl	800c420 <RCCEx_PLL2_Config>
 800afcc:	4603      	mov	r3, r0
 800afce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800afd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d003      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800afe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	2100      	movs	r1, #0
 800afec:	61b9      	str	r1, [r7, #24]
 800afee:	f003 0304 	and.w	r3, r3, #4
 800aff2:	61fb      	str	r3, [r7, #28]
 800aff4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aff8:	460b      	mov	r3, r1
 800affa:	4313      	orrs	r3, r2
 800affc:	d011      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800affe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b002:	3308      	adds	r3, #8
 800b004:	2102      	movs	r1, #2
 800b006:	4618      	mov	r0, r3
 800b008:	f001 fa0a 	bl	800c420 <RCCEx_PLL2_Config>
 800b00c:	4603      	mov	r3, r0
 800b00e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b016:	2b00      	cmp	r3, #0
 800b018:	d003      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b01a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b01e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02a:	2100      	movs	r1, #0
 800b02c:	6139      	str	r1, [r7, #16]
 800b02e:	f003 0308 	and.w	r3, r3, #8
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b038:	460b      	mov	r3, r1
 800b03a:	4313      	orrs	r3, r2
 800b03c:	d011      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b042:	3328      	adds	r3, #40	@ 0x28
 800b044:	2100      	movs	r1, #0
 800b046:	4618      	mov	r0, r3
 800b048:	f001 fa9c 	bl	800c584 <RCCEx_PLL3_Config>
 800b04c:	4603      	mov	r3, r0
 800b04e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b05a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b05e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	2100      	movs	r1, #0
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	f003 0310 	and.w	r3, r3, #16
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b078:	460b      	mov	r3, r1
 800b07a:	4313      	orrs	r3, r2
 800b07c:	d011      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b082:	3328      	adds	r3, #40	@ 0x28
 800b084:	2101      	movs	r1, #1
 800b086:	4618      	mov	r0, r3
 800b088:	f001 fa7c 	bl	800c584 <RCCEx_PLL3_Config>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b096:	2b00      	cmp	r3, #0
 800b098:	d003      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b09e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	6039      	str	r1, [r7, #0]
 800b0ae:	f003 0320 	and.w	r3, r3, #32
 800b0b2:	607b      	str	r3, [r7, #4]
 800b0b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	d011      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0c2:	3328      	adds	r3, #40	@ 0x28
 800b0c4:	2102      	movs	r1, #2
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f001 fa5c 	bl	800c584 <RCCEx_PLL3_Config>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b0e2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d101      	bne.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e000      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0fc:	58024400 	.word	0x58024400

0800b100 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b090      	sub	sp, #64	@ 0x40
 800b104:	af00      	add	r7, sp, #0
 800b106:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b10a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b10e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b112:	430b      	orrs	r3, r1
 800b114:	f040 8094 	bne.w	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b118:	4b9e      	ldr	r3, [pc, #632]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b11a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b11c:	f003 0307 	and.w	r3, r3, #7
 800b120:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b124:	2b04      	cmp	r3, #4
 800b126:	f200 8087 	bhi.w	800b238 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b12a:	a201      	add	r2, pc, #4	@ (adr r2, 800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b130:	0800b145 	.word	0x0800b145
 800b134:	0800b16d 	.word	0x0800b16d
 800b138:	0800b195 	.word	0x0800b195
 800b13c:	0800b231 	.word	0x0800b231
 800b140:	0800b1bd 	.word	0x0800b1bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b144:	4b93      	ldr	r3, [pc, #588]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b14c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b150:	d108      	bne.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b156:	4618      	mov	r0, r3
 800b158:	f001 f810 	bl	800c17c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b160:	f000 bd45 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b168:	f000 bd41 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b16c:	4b89      	ldr	r3, [pc, #548]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b178:	d108      	bne.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b17a:	f107 0318 	add.w	r3, r7, #24
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 fd54 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b188:	f000 bd31 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b190:	f000 bd2d 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b194:	4b7f      	ldr	r3, [pc, #508]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b19c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1a0:	d108      	bne.n	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1a2:	f107 030c 	add.w	r3, r7, #12
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f000 fe94 	bl	800bed4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1b0:	f000 bd1d 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b8:	f000 bd19 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1bc:	4b75      	ldr	r3, [pc, #468]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b1c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1c6:	4b73      	ldr	r3, [pc, #460]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0304 	and.w	r3, r3, #4
 800b1ce:	2b04      	cmp	r3, #4
 800b1d0:	d10c      	bne.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d109      	bne.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1d8:	4b6e      	ldr	r3, [pc, #440]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	08db      	lsrs	r3, r3, #3
 800b1de:	f003 0303 	and.w	r3, r3, #3
 800b1e2:	4a6d      	ldr	r2, [pc, #436]	@ (800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1ea:	e01f      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1ec:	4b69      	ldr	r3, [pc, #420]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1f8:	d106      	bne.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b1fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b200:	d102      	bne.n	800b208 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b202:	4b66      	ldr	r3, [pc, #408]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b206:	e011      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b208:	4b62      	ldr	r3, [pc, #392]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b214:	d106      	bne.n	800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b21c:	d102      	bne.n	800b224 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b21e:	4b60      	ldr	r3, [pc, #384]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b222:	e003      	b.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b224:	2300      	movs	r3, #0
 800b226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b228:	f000 bce1 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b22c:	f000 bcdf 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b230:	4b5c      	ldr	r3, [pc, #368]	@ (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b234:	f000 bcdb 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b238:	2300      	movs	r3, #0
 800b23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b23c:	f000 bcd7 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b244:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b248:	430b      	orrs	r3, r1
 800b24a:	f040 80ad 	bne.w	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b24e:	4b51      	ldr	r3, [pc, #324]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b252:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b256:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b25e:	d056      	beq.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b266:	f200 8090 	bhi.w	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26c:	2bc0      	cmp	r3, #192	@ 0xc0
 800b26e:	f000 8088 	beq.w	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b274:	2bc0      	cmp	r3, #192	@ 0xc0
 800b276:	f200 8088 	bhi.w	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27c:	2b80      	cmp	r3, #128	@ 0x80
 800b27e:	d032      	beq.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b282:	2b80      	cmp	r3, #128	@ 0x80
 800b284:	f200 8081 	bhi.w	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d003      	beq.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b290:	2b40      	cmp	r3, #64	@ 0x40
 800b292:	d014      	beq.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b294:	e079      	b.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b296:	4b3f      	ldr	r3, [pc, #252]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b29e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2a2:	d108      	bne.n	800b2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f000 ff67 	bl	800c17c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2b2:	f000 bc9c 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ba:	f000 bc98 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2be:	4b35      	ldr	r3, [pc, #212]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2ca:	d108      	bne.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2cc:	f107 0318 	add.w	r3, r7, #24
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 fcab 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2da:	f000 bc88 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2e2:	f000 bc84 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2e6:	4b2b      	ldr	r3, [pc, #172]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2f2:	d108      	bne.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2f4:	f107 030c 	add.w	r3, r7, #12
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 fdeb 	bl	800bed4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b302:	f000 bc74 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b30a:	f000 bc70 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b30e:	4b21      	ldr	r3, [pc, #132]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b312:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b316:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b318:	4b1e      	ldr	r3, [pc, #120]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 0304 	and.w	r3, r3, #4
 800b320:	2b04      	cmp	r3, #4
 800b322:	d10c      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b326:	2b00      	cmp	r3, #0
 800b328:	d109      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b32a:	4b1a      	ldr	r3, [pc, #104]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	08db      	lsrs	r3, r3, #3
 800b330:	f003 0303 	and.w	r3, r3, #3
 800b334:	4a18      	ldr	r2, [pc, #96]	@ (800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b336:	fa22 f303 	lsr.w	r3, r2, r3
 800b33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b33c:	e01f      	b.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b33e:	4b15      	ldr	r3, [pc, #84]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b34a:	d106      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b34c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b34e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b352:	d102      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b354:	4b11      	ldr	r3, [pc, #68]	@ (800b39c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b358:	e011      	b.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b35a:	4b0e      	ldr	r3, [pc, #56]	@ (800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b362:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b366:	d106      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b36a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b36e:	d102      	bne.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b370:	4b0b      	ldr	r3, [pc, #44]	@ (800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b374:	e003      	b.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b37a:	f000 bc38 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b37e:	f000 bc36 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b382:	4b08      	ldr	r3, [pc, #32]	@ (800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b386:	f000 bc32 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b38e:	f000 bc2e 	b.w	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b392:	bf00      	nop
 800b394:	58024400 	.word	0x58024400
 800b398:	03d09000 	.word	0x03d09000
 800b39c:	003d0900 	.word	0x003d0900
 800b3a0:	017d7840 	.word	0x017d7840
 800b3a4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b3a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3ac:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b3b0:	430b      	orrs	r3, r1
 800b3b2:	f040 809c 	bne.w	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b3b6:	4b9e      	ldr	r3, [pc, #632]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3ba:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b3be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b3c6:	d054      	beq.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b3ce:	f200 808b 	bhi.w	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b3d8:	f000 8083 	beq.w	800b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b3e2:	f200 8081 	bhi.w	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3ec:	d02f      	beq.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3f4:	d878      	bhi.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d004      	beq.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b402:	d012      	beq.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b404:	e070      	b.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b406:	4b8a      	ldr	r3, [pc, #552]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b40e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b412:	d107      	bne.n	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 feaf 	bl	800c17c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b422:	e3e4      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b424:	2300      	movs	r3, #0
 800b426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b428:	e3e1      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b42a:	4b81      	ldr	r3, [pc, #516]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b432:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b436:	d107      	bne.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b438:	f107 0318 	add.w	r3, r7, #24
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 fbf5 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b446:	e3d2      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b448:	2300      	movs	r3, #0
 800b44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b44c:	e3cf      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b44e:	4b78      	ldr	r3, [pc, #480]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b45a:	d107      	bne.n	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b45c:	f107 030c 	add.w	r3, r7, #12
 800b460:	4618      	mov	r0, r3
 800b462:	f000 fd37 	bl	800bed4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b46a:	e3c0      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b46c:	2300      	movs	r3, #0
 800b46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b470:	e3bd      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b472:	4b6f      	ldr	r3, [pc, #444]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b476:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b47a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b47c:	4b6c      	ldr	r3, [pc, #432]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0304 	and.w	r3, r3, #4
 800b484:	2b04      	cmp	r3, #4
 800b486:	d10c      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d109      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b48e:	4b68      	ldr	r3, [pc, #416]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	08db      	lsrs	r3, r3, #3
 800b494:	f003 0303 	and.w	r3, r3, #3
 800b498:	4a66      	ldr	r2, [pc, #408]	@ (800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b49a:	fa22 f303 	lsr.w	r3, r2, r3
 800b49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4a0:	e01e      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4a2:	4b63      	ldr	r3, [pc, #396]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4ae:	d106      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4b6:	d102      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4b8:	4b5f      	ldr	r3, [pc, #380]	@ (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4bc:	e010      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4be:	4b5c      	ldr	r3, [pc, #368]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4ca:	d106      	bne.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b4cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4d2:	d102      	bne.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4d4:	4b59      	ldr	r3, [pc, #356]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4d8:	e002      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b4de:	e386      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4e0:	e385      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4e2:	4b57      	ldr	r3, [pc, #348]	@ (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4e6:	e382      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ec:	e37f      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b4ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4f2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b4f6:	430b      	orrs	r3, r1
 800b4f8:	f040 80a7 	bne.w	800b64a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b4fc:	4b4c      	ldr	r3, [pc, #304]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b500:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b504:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b50c:	d055      	beq.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b510:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b514:	f200 8096 	bhi.w	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b51e:	f000 8084 	beq.w	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b524:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b528:	f200 808c 	bhi.w	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b532:	d030      	beq.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b536:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b53a:	f200 8083 	bhi.w	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b540:	2b00      	cmp	r3, #0
 800b542:	d004      	beq.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b546:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b54a:	d012      	beq.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b54c:	e07a      	b.n	800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b54e:	4b38      	ldr	r3, [pc, #224]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b55a:	d107      	bne.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b55c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b560:	4618      	mov	r0, r3
 800b562:	f000 fe0b 	bl	800c17c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b56a:	e340      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b570:	e33d      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b572:	4b2f      	ldr	r3, [pc, #188]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b57a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b57e:	d107      	bne.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b580:	f107 0318 	add.w	r3, r7, #24
 800b584:	4618      	mov	r0, r3
 800b586:	f000 fb51 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b58e:	e32e      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b594:	e32b      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b596:	4b26      	ldr	r3, [pc, #152]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b59e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5a2:	d107      	bne.n	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5a4:	f107 030c 	add.w	r3, r7, #12
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 fc93 	bl	800bed4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5b2:	e31c      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5b8:	e319      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b5c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b04      	cmp	r3, #4
 800b5ce:	d10c      	bne.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d109      	bne.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5d6:	4b16      	ldr	r3, [pc, #88]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	08db      	lsrs	r3, r3, #3
 800b5dc:	f003 0303 	and.w	r3, r3, #3
 800b5e0:	4a14      	ldr	r2, [pc, #80]	@ (800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5e8:	e01e      	b.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5ea:	4b11      	ldr	r3, [pc, #68]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5f6:	d106      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b5f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5fe:	d102      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b600:	4b0d      	ldr	r3, [pc, #52]	@ (800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b602:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b604:	e010      	b.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b606:	4b0a      	ldr	r3, [pc, #40]	@ (800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b60e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b612:	d106      	bne.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b61a:	d102      	bne.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b61c:	4b07      	ldr	r3, [pc, #28]	@ (800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b620:	e002      	b.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b626:	e2e2      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b628:	e2e1      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b62a:	4b05      	ldr	r3, [pc, #20]	@ (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b62e:	e2de      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b630:	58024400 	.word	0x58024400
 800b634:	03d09000 	.word	0x03d09000
 800b638:	003d0900 	.word	0x003d0900
 800b63c:	017d7840 	.word	0x017d7840
 800b640:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b648:	e2d1      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b64a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b64e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b652:	430b      	orrs	r3, r1
 800b654:	f040 809c 	bne.w	800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b658:	4b93      	ldr	r3, [pc, #588]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b65a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b65c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b660:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b668:	d054      	beq.n	800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b66c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b670:	f200 808b 	bhi.w	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b676:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b67a:	f000 8083 	beq.w	800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b680:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b684:	f200 8081 	bhi.w	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b68a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b68e:	d02f      	beq.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b696:	d878      	bhi.n	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d004      	beq.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6a4:	d012      	beq.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b6a6:	e070      	b.n	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6a8:	4b7f      	ldr	r3, [pc, #508]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6b4:	d107      	bne.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f000 fd5e 	bl	800c17c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6c4:	e293      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ca:	e290      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6cc:	4b76      	ldr	r3, [pc, #472]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6d8:	d107      	bne.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6da:	f107 0318 	add.w	r3, r7, #24
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 faa4 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6e8:	e281      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ee:	e27e      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6f0:	4b6d      	ldr	r3, [pc, #436]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6fc:	d107      	bne.n	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6fe:	f107 030c 	add.w	r3, r7, #12
 800b702:	4618      	mov	r0, r3
 800b704:	f000 fbe6 	bl	800bed4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b70c:	e26f      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b70e:	2300      	movs	r3, #0
 800b710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b712:	e26c      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b714:	4b64      	ldr	r3, [pc, #400]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b718:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b71c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b71e:	4b62      	ldr	r3, [pc, #392]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0304 	and.w	r3, r3, #4
 800b726:	2b04      	cmp	r3, #4
 800b728:	d10c      	bne.n	800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d109      	bne.n	800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b730:	4b5d      	ldr	r3, [pc, #372]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	08db      	lsrs	r3, r3, #3
 800b736:	f003 0303 	and.w	r3, r3, #3
 800b73a:	4a5c      	ldr	r2, [pc, #368]	@ (800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b73c:	fa22 f303 	lsr.w	r3, r2, r3
 800b740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b742:	e01e      	b.n	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b744:	4b58      	ldr	r3, [pc, #352]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b74c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b750:	d106      	bne.n	800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b758:	d102      	bne.n	800b760 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b75a:	4b55      	ldr	r3, [pc, #340]	@ (800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b75e:	e010      	b.n	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b760:	4b51      	ldr	r3, [pc, #324]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b76c:	d106      	bne.n	800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b76e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b774:	d102      	bne.n	800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b776:	4b4f      	ldr	r3, [pc, #316]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b77a:	e002      	b.n	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b77c:	2300      	movs	r3, #0
 800b77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b780:	e235      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b782:	e234      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b784:	4b4c      	ldr	r3, [pc, #304]	@ (800b8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b788:	e231      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b78a:	2300      	movs	r3, #0
 800b78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b78e:	e22e      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b794:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b798:	430b      	orrs	r3, r1
 800b79a:	f040 808f 	bne.w	800b8bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b79e:	4b42      	ldr	r3, [pc, #264]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7a2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b7ae:	d06b      	beq.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b7b6:	d874      	bhi.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b7be:	d056      	beq.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b7c6:	d86c      	bhi.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b7ce:	d03b      	beq.n	800b848 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b7d6:	d864      	bhi.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7de:	d021      	beq.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7e6:	d85c      	bhi.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d004      	beq.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7f4:	d004      	beq.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b7f6:	e054      	b.n	800b8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b7f8:	f7fe fa4c 	bl	8009c94 <HAL_RCC_GetPCLK1Freq>
 800b7fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b7fe:	e1f6      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b800:	4b29      	ldr	r3, [pc, #164]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b80c:	d107      	bne.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b80e:	f107 0318 	add.w	r3, r7, #24
 800b812:	4618      	mov	r0, r3
 800b814:	f000 fa0a 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b81c:	e1e7      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b81e:	2300      	movs	r3, #0
 800b820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b822:	e1e4      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b824:	4b20      	ldr	r3, [pc, #128]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b82c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b830:	d107      	bne.n	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b832:	f107 030c 	add.w	r3, r7, #12
 800b836:	4618      	mov	r0, r3
 800b838:	f000 fb4c 	bl	800bed4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b840:	e1d5      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b842:	2300      	movs	r3, #0
 800b844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b846:	e1d2      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b848:	4b17      	ldr	r3, [pc, #92]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 0304 	and.w	r3, r3, #4
 800b850:	2b04      	cmp	r3, #4
 800b852:	d109      	bne.n	800b868 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b854:	4b14      	ldr	r3, [pc, #80]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	08db      	lsrs	r3, r3, #3
 800b85a:	f003 0303 	and.w	r3, r3, #3
 800b85e:	4a13      	ldr	r2, [pc, #76]	@ (800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b860:	fa22 f303 	lsr.w	r3, r2, r3
 800b864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b866:	e1c2      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b868:	2300      	movs	r3, #0
 800b86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b86c:	e1bf      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b86e:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b87a:	d102      	bne.n	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b87c:	4b0c      	ldr	r3, [pc, #48]	@ (800b8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b880:	e1b5      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b882:	2300      	movs	r3, #0
 800b884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b886:	e1b2      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b888:	4b07      	ldr	r3, [pc, #28]	@ (800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b890:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b894:	d102      	bne.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b896:	4b07      	ldr	r3, [pc, #28]	@ (800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b89a:	e1a8      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a0:	e1a5      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a6:	e1a2      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b8a8:	58024400 	.word	0x58024400
 800b8ac:	03d09000 	.word	0x03d09000
 800b8b0:	003d0900 	.word	0x003d0900
 800b8b4:	017d7840 	.word	0x017d7840
 800b8b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b8bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8c0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b8c4:	430b      	orrs	r3, r1
 800b8c6:	d173      	bne.n	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b8c8:	4b9c      	ldr	r3, [pc, #624]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b8d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8d8:	d02f      	beq.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8e0:	d863      	bhi.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d004      	beq.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8ee:	d012      	beq.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b8f0:	e05b      	b.n	800b9aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8f2:	4b92      	ldr	r3, [pc, #584]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8fe:	d107      	bne.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b900:	f107 0318 	add.w	r3, r7, #24
 800b904:	4618      	mov	r0, r3
 800b906:	f000 f991 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b90e:	e16e      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b910:	2300      	movs	r3, #0
 800b912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b914:	e16b      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b916:	4b89      	ldr	r3, [pc, #548]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b91e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b922:	d107      	bne.n	800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b924:	f107 030c 	add.w	r3, r7, #12
 800b928:	4618      	mov	r0, r3
 800b92a:	f000 fad3 	bl	800bed4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b932:	e15c      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b934:	2300      	movs	r3, #0
 800b936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b938:	e159      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b93a:	4b80      	ldr	r3, [pc, #512]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b93c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b93e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b942:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b944:	4b7d      	ldr	r3, [pc, #500]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 0304 	and.w	r3, r3, #4
 800b94c:	2b04      	cmp	r3, #4
 800b94e:	d10c      	bne.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b952:	2b00      	cmp	r3, #0
 800b954:	d109      	bne.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b956:	4b79      	ldr	r3, [pc, #484]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	08db      	lsrs	r3, r3, #3
 800b95c:	f003 0303 	and.w	r3, r3, #3
 800b960:	4a77      	ldr	r2, [pc, #476]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b962:	fa22 f303 	lsr.w	r3, r2, r3
 800b966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b968:	e01e      	b.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b96a:	4b74      	ldr	r3, [pc, #464]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b976:	d106      	bne.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b97a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b97e:	d102      	bne.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b980:	4b70      	ldr	r3, [pc, #448]	@ (800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b984:	e010      	b.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b986:	4b6d      	ldr	r3, [pc, #436]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b98e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b992:	d106      	bne.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b99a:	d102      	bne.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b99c:	4b6a      	ldr	r3, [pc, #424]	@ (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9a0:	e002      	b.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b9a6:	e122      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b9a8:	e121      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9ae:	e11e      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b9b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9b4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b9b8:	430b      	orrs	r3, r1
 800b9ba:	d133      	bne.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b9bc:	4b5f      	ldr	r3, [pc, #380]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9c4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d004      	beq.n	800b9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9d2:	d012      	beq.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b9d4:	e023      	b.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b9d6:	4b59      	ldr	r3, [pc, #356]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9e2:	d107      	bne.n	800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f000 fbc7 	bl	800c17c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9f2:	e0fc      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9f8:	e0f9      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9fa:	4b50      	ldr	r3, [pc, #320]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba06:	d107      	bne.n	800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba08:	f107 0318 	add.w	r3, r7, #24
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 f90d 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ba12:	6a3b      	ldr	r3, [r7, #32]
 800ba14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba16:	e0ea      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba1c:	e0e7      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba22:	e0e4      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ba24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba28:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ba2c:	430b      	orrs	r3, r1
 800ba2e:	f040 808d 	bne.w	800bb4c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ba32:	4b42      	ldr	r3, [pc, #264]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba36:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ba3a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ba3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ba42:	d06b      	beq.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ba44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ba4a:	d874      	bhi.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba52:	d056      	beq.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ba54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba5a:	d86c      	bhi.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ba5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ba62:	d03b      	beq.n	800badc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ba64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ba6a:	d864      	bhi.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ba6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba72:	d021      	beq.n	800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ba74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba7a:	d85c      	bhi.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d004      	beq.n	800ba8c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ba82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba88:	d004      	beq.n	800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ba8a:	e054      	b.n	800bb36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ba8c:	f000 f8b8 	bl	800bc00 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba90:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba92:	e0ac      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba94:	4b29      	ldr	r3, [pc, #164]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800baa0:	d107      	bne.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baa2:	f107 0318 	add.w	r3, r7, #24
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 f8c0 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bab0:	e09d      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bab6:	e09a      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bab8:	4b20      	ldr	r3, [pc, #128]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bac4:	d107      	bne.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bac6:	f107 030c 	add.w	r3, r7, #12
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 fa02 	bl	800bed4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bad4:	e08b      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bada:	e088      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800badc:	4b17      	ldr	r3, [pc, #92]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	d109      	bne.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bae8:	4b14      	ldr	r3, [pc, #80]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	08db      	lsrs	r3, r3, #3
 800baee:	f003 0303 	and.w	r3, r3, #3
 800baf2:	4a13      	ldr	r2, [pc, #76]	@ (800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800baf4:	fa22 f303 	lsr.w	r3, r2, r3
 800baf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bafa:	e078      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb00:	e075      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bb02:	4b0e      	ldr	r3, [pc, #56]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb0e:	d102      	bne.n	800bb16 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bb10:	4b0c      	ldr	r3, [pc, #48]	@ (800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bb12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb14:	e06b      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb1a:	e068      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bb1c:	4b07      	ldr	r3, [pc, #28]	@ (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb28:	d102      	bne.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bb2a:	4b07      	ldr	r3, [pc, #28]	@ (800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb2e:	e05e      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb34:	e05b      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bb36:	2300      	movs	r3, #0
 800bb38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb3a:	e058      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bb3c:	58024400 	.word	0x58024400
 800bb40:	03d09000 	.word	0x03d09000
 800bb44:	003d0900 	.word	0x003d0900
 800bb48:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bb4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb50:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800bb54:	430b      	orrs	r3, r1
 800bb56:	d148      	bne.n	800bbea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bb58:	4b27      	ldr	r3, [pc, #156]	@ (800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bb5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bb60:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb68:	d02a      	beq.n	800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb70:	d838      	bhi.n	800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d004      	beq.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb7e:	d00d      	beq.n	800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bb80:	e030      	b.n	800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bb82:	4b1d      	ldr	r3, [pc, #116]	@ (800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb8e:	d102      	bne.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bb90:	4b1a      	ldr	r3, [pc, #104]	@ (800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb94:	e02b      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb96:	2300      	movs	r3, #0
 800bb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb9a:	e028      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb9c:	4b16      	ldr	r3, [pc, #88]	@ (800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bba8:	d107      	bne.n	800bbba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 fae4 	bl	800c17c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbb8:	e019      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbbe:	e016      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbc0:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbcc:	d107      	bne.n	800bbde <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbce:	f107 0318 	add.w	r3, r7, #24
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 f82a 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbdc:	e007      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbe2:	e004      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbe8:	e001      	b.n	800bbee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bbea:	2300      	movs	r3, #0
 800bbec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bbee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3740      	adds	r7, #64	@ 0x40
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	58024400 	.word	0x58024400
 800bbfc:	017d7840 	.word	0x017d7840

0800bc00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bc04:	f7fe f816 	bl	8009c34 <HAL_RCC_GetHCLKFreq>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	4b06      	ldr	r3, [pc, #24]	@ (800bc24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bc0c:	6a1b      	ldr	r3, [r3, #32]
 800bc0e:	091b      	lsrs	r3, r3, #4
 800bc10:	f003 0307 	and.w	r3, r3, #7
 800bc14:	4904      	ldr	r1, [pc, #16]	@ (800bc28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bc16:	5ccb      	ldrb	r3, [r1, r3]
 800bc18:	f003 031f 	and.w	r3, r3, #31
 800bc1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	58024400 	.word	0x58024400
 800bc28:	08014a20 	.word	0x08014a20

0800bc2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b089      	sub	sp, #36	@ 0x24
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc34:	4ba1      	ldr	r3, [pc, #644]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc38:	f003 0303 	and.w	r3, r3, #3
 800bc3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bc3e:	4b9f      	ldr	r3, [pc, #636]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc42:	0b1b      	lsrs	r3, r3, #12
 800bc44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bc4a:	4b9c      	ldr	r3, [pc, #624]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4e:	091b      	lsrs	r3, r3, #4
 800bc50:	f003 0301 	and.w	r3, r3, #1
 800bc54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bc56:	4b99      	ldr	r3, [pc, #612]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc5a:	08db      	lsrs	r3, r3, #3
 800bc5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	fb02 f303 	mul.w	r3, r2, r3
 800bc66:	ee07 3a90 	vmov	s15, r3
 800bc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 8111 	beq.w	800be9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	f000 8083 	beq.w	800bd88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	f200 80a1 	bhi.w	800bdcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d003      	beq.n	800bc98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d056      	beq.n	800bd44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bc96:	e099      	b.n	800bdcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc98:	4b88      	ldr	r3, [pc, #544]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f003 0320 	and.w	r3, r3, #32
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d02d      	beq.n	800bd00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bca4:	4b85      	ldr	r3, [pc, #532]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	08db      	lsrs	r3, r3, #3
 800bcaa:	f003 0303 	and.w	r3, r3, #3
 800bcae:	4a84      	ldr	r2, [pc, #528]	@ (800bec0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bcb0:	fa22 f303 	lsr.w	r3, r2, r3
 800bcb4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	ee07 3a90 	vmov	s15, r3
 800bcbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	ee07 3a90 	vmov	s15, r3
 800bcc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcce:	4b7b      	ldr	r3, [pc, #492]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcde:	ed97 6a03 	vldr	s12, [r7, #12]
 800bce2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bcfe:	e087      	b.n	800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	ee07 3a90 	vmov	s15, r3
 800bd06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bec8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bd0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd12:	4b6a      	ldr	r3, [pc, #424]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd1a:	ee07 3a90 	vmov	s15, r3
 800bd1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd22:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd42:	e065      	b.n	800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800becc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd56:	4b59      	ldr	r3, [pc, #356]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd5e:	ee07 3a90 	vmov	s15, r3
 800bd62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd66:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd86:	e043      	b.n	800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	ee07 3a90 	vmov	s15, r3
 800bd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bed0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bd96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd9a:	4b48      	ldr	r3, [pc, #288]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda2:	ee07 3a90 	vmov	s15, r3
 800bda6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdca:	e021      	b.n	800be10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	ee07 3a90 	vmov	s15, r3
 800bdd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800becc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bdda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdde:	4b37      	ldr	r3, [pc, #220]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bde0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bde6:	ee07 3a90 	vmov	s15, r3
 800bdea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdee:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdf2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bec4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800be10:	4b2a      	ldr	r3, [pc, #168]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be14:	0a5b      	lsrs	r3, r3, #9
 800be16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be36:	ee17 2a90 	vmov	r2, s15
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800be3e:	4b1f      	ldr	r3, [pc, #124]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be42:	0c1b      	lsrs	r3, r3, #16
 800be44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be48:	ee07 3a90 	vmov	s15, r3
 800be4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be58:	edd7 6a07 	vldr	s13, [r7, #28]
 800be5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be64:	ee17 2a90 	vmov	r2, s15
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800be6c:	4b13      	ldr	r3, [pc, #76]	@ (800bebc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be70:	0e1b      	lsrs	r3, r3, #24
 800be72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be76:	ee07 3a90 	vmov	s15, r3
 800be7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be86:	edd7 6a07 	vldr	s13, [r7, #28]
 800be8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be92:	ee17 2a90 	vmov	r2, s15
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800be9a:	e008      	b.n	800beae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2200      	movs	r2, #0
 800bea6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	609a      	str	r2, [r3, #8]
}
 800beae:	bf00      	nop
 800beb0:	3724      	adds	r7, #36	@ 0x24
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	58024400 	.word	0x58024400
 800bec0:	03d09000 	.word	0x03d09000
 800bec4:	46000000 	.word	0x46000000
 800bec8:	4c742400 	.word	0x4c742400
 800becc:	4a742400 	.word	0x4a742400
 800bed0:	4bbebc20 	.word	0x4bbebc20

0800bed4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b089      	sub	sp, #36	@ 0x24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bedc:	4ba1      	ldr	r3, [pc, #644]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee0:	f003 0303 	and.w	r3, r3, #3
 800bee4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bee6:	4b9f      	ldr	r3, [pc, #636]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beea:	0d1b      	lsrs	r3, r3, #20
 800beec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bef0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bef2:	4b9c      	ldr	r3, [pc, #624]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef6:	0a1b      	lsrs	r3, r3, #8
 800bef8:	f003 0301 	and.w	r3, r3, #1
 800befc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800befe:	4b99      	ldr	r3, [pc, #612]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf02:	08db      	lsrs	r3, r3, #3
 800bf04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	fb02 f303 	mul.w	r3, r2, r3
 800bf0e:	ee07 3a90 	vmov	s15, r3
 800bf12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f000 8111 	beq.w	800c144 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	f000 8083 	beq.w	800c030 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	f200 80a1 	bhi.w	800c074 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d003      	beq.n	800bf40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d056      	beq.n	800bfec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bf3e:	e099      	b.n	800c074 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf40:	4b88      	ldr	r3, [pc, #544]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 0320 	and.w	r3, r3, #32
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d02d      	beq.n	800bfa8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf4c:	4b85      	ldr	r3, [pc, #532]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	08db      	lsrs	r3, r3, #3
 800bf52:	f003 0303 	and.w	r3, r3, #3
 800bf56:	4a84      	ldr	r2, [pc, #528]	@ (800c168 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bf58:	fa22 f303 	lsr.w	r3, r2, r3
 800bf5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	ee07 3a90 	vmov	s15, r3
 800bf64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	ee07 3a90 	vmov	s15, r3
 800bf6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf76:	4b7b      	ldr	r3, [pc, #492]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf86:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c16c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bfa6:	e087      	b.n	800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c170 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bfb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfba:	4b6a      	ldr	r3, [pc, #424]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc2:	ee07 3a90 	vmov	s15, r3
 800bfc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfca:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c16c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfea:	e065      	b.n	800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bffe:	4b59      	ldr	r3, [pc, #356]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c006:	ee07 3a90 	vmov	s15, r3
 800c00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c00e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c012:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c16c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c01e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c02a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c02e:	e043      	b.n	800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c03a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c178 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c042:	4b48      	ldr	r3, [pc, #288]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c04a:	ee07 3a90 	vmov	s15, r3
 800c04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c052:	ed97 6a03 	vldr	s12, [r7, #12]
 800c056:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c16c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c06a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c06e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c072:	e021      	b.n	800c0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	ee07 3a90 	vmov	s15, r3
 800c07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c07e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c174 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c086:	4b37      	ldr	r3, [pc, #220]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c08e:	ee07 3a90 	vmov	s15, r3
 800c092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c096:	ed97 6a03 	vldr	s12, [r7, #12]
 800c09a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c16c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c0b8:	4b2a      	ldr	r3, [pc, #168]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0bc:	0a5b      	lsrs	r3, r3, #9
 800c0be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0c2:	ee07 3a90 	vmov	s15, r3
 800c0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0de:	ee17 2a90 	vmov	r2, s15
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c0e6:	4b1f      	ldr	r3, [pc, #124]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0ea:	0c1b      	lsrs	r3, r3, #16
 800c0ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0f0:	ee07 3a90 	vmov	s15, r3
 800c0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c100:	edd7 6a07 	vldr	s13, [r7, #28]
 800c104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c10c:	ee17 2a90 	vmov	r2, s15
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c114:	4b13      	ldr	r3, [pc, #76]	@ (800c164 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c118:	0e1b      	lsrs	r3, r3, #24
 800c11a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c11e:	ee07 3a90 	vmov	s15, r3
 800c122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c12a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c12e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c13a:	ee17 2a90 	vmov	r2, s15
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c142:	e008      	b.n	800c156 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	609a      	str	r2, [r3, #8]
}
 800c156:	bf00      	nop
 800c158:	3724      	adds	r7, #36	@ 0x24
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	58024400 	.word	0x58024400
 800c168:	03d09000 	.word	0x03d09000
 800c16c:	46000000 	.word	0x46000000
 800c170:	4c742400 	.word	0x4c742400
 800c174:	4a742400 	.word	0x4a742400
 800c178:	4bbebc20 	.word	0x4bbebc20

0800c17c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b089      	sub	sp, #36	@ 0x24
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c184:	4ba0      	ldr	r3, [pc, #640]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c188:	f003 0303 	and.w	r3, r3, #3
 800c18c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c18e:	4b9e      	ldr	r3, [pc, #632]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c192:	091b      	lsrs	r3, r3, #4
 800c194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c198:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c19a:	4b9b      	ldr	r3, [pc, #620]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c19e:	f003 0301 	and.w	r3, r3, #1
 800c1a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c1a4:	4b98      	ldr	r3, [pc, #608]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1a8:	08db      	lsrs	r3, r3, #3
 800c1aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1ae:	693a      	ldr	r2, [r7, #16]
 800c1b0:	fb02 f303 	mul.w	r3, r2, r3
 800c1b4:	ee07 3a90 	vmov	s15, r3
 800c1b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 8111 	beq.w	800c3ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	f000 8083 	beq.w	800c2d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	f200 80a1 	bhi.w	800c31a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d003      	beq.n	800c1e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d056      	beq.n	800c292 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c1e4:	e099      	b.n	800c31a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1e6:	4b88      	ldr	r3, [pc, #544]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f003 0320 	and.w	r3, r3, #32
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d02d      	beq.n	800c24e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1f2:	4b85      	ldr	r3, [pc, #532]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	08db      	lsrs	r3, r3, #3
 800c1f8:	f003 0303 	and.w	r3, r3, #3
 800c1fc:	4a83      	ldr	r2, [pc, #524]	@ (800c40c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c1fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c202:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	ee07 3a90 	vmov	s15, r3
 800c20a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	ee07 3a90 	vmov	s15, r3
 800c214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c21c:	4b7a      	ldr	r3, [pc, #488]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c21e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c224:	ee07 3a90 	vmov	s15, r3
 800c228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c22c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c230:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c410 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c23c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c248:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c24c:	e087      	b.n	800c35e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	ee07 3a90 	vmov	s15, r3
 800c254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c258:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c414 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c25c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c260:	4b69      	ldr	r3, [pc, #420]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c268:	ee07 3a90 	vmov	s15, r3
 800c26c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c270:	ed97 6a03 	vldr	s12, [r7, #12]
 800c274:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c410 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c27c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c280:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c28c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c290:	e065      	b.n	800c35e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	ee07 3a90 	vmov	s15, r3
 800c298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c418 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c2a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2a4:	4b58      	ldr	r3, [pc, #352]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ac:	ee07 3a90 	vmov	s15, r3
 800c2b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2b8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c410 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2d4:	e043      	b.n	800c35e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	ee07 3a90 	vmov	s15, r3
 800c2dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2e0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c41c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c2e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2e8:	4b47      	ldr	r3, [pc, #284]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f0:	ee07 3a90 	vmov	s15, r3
 800c2f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2fc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c410 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c300:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c308:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c30c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c310:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c314:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c318:	e021      	b.n	800c35e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	ee07 3a90 	vmov	s15, r3
 800c320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c324:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c414 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c328:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c32c:	4b36      	ldr	r3, [pc, #216]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c32e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c334:	ee07 3a90 	vmov	s15, r3
 800c338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c33c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c340:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c410 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c344:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c348:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c34c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c350:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c354:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c358:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c35c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c35e:	4b2a      	ldr	r3, [pc, #168]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c362:	0a5b      	lsrs	r3, r3, #9
 800c364:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c368:	ee07 3a90 	vmov	s15, r3
 800c36c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c370:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c374:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c378:	edd7 6a07 	vldr	s13, [r7, #28]
 800c37c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c384:	ee17 2a90 	vmov	r2, s15
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c38c:	4b1e      	ldr	r3, [pc, #120]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c390:	0c1b      	lsrs	r3, r3, #16
 800c392:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c396:	ee07 3a90 	vmov	s15, r3
 800c39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c39e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3b2:	ee17 2a90 	vmov	r2, s15
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c3ba:	4b13      	ldr	r3, [pc, #76]	@ (800c408 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3be:	0e1b      	lsrs	r3, r3, #24
 800c3c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3c4:	ee07 3a90 	vmov	s15, r3
 800c3c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3e0:	ee17 2a90 	vmov	r2, s15
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c3e8:	e008      	b.n	800c3fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	609a      	str	r2, [r3, #8]
}
 800c3fc:	bf00      	nop
 800c3fe:	3724      	adds	r7, #36	@ 0x24
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	58024400 	.word	0x58024400
 800c40c:	03d09000 	.word	0x03d09000
 800c410:	46000000 	.word	0x46000000
 800c414:	4c742400 	.word	0x4c742400
 800c418:	4a742400 	.word	0x4a742400
 800c41c:	4bbebc20 	.word	0x4bbebc20

0800c420 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c42e:	4b53      	ldr	r3, [pc, #332]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c432:	f003 0303 	and.w	r3, r3, #3
 800c436:	2b03      	cmp	r3, #3
 800c438:	d101      	bne.n	800c43e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e099      	b.n	800c572 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c43e:	4b4f      	ldr	r3, [pc, #316]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a4e      	ldr	r2, [pc, #312]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c444:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c44a:	f7f6 fd3f 	bl	8002ecc <HAL_GetTick>
 800c44e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c450:	e008      	b.n	800c464 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c452:	f7f6 fd3b 	bl	8002ecc <HAL_GetTick>
 800c456:	4602      	mov	r2, r0
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d901      	bls.n	800c464 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c460:	2303      	movs	r3, #3
 800c462:	e086      	b.n	800c572 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c464:	4b45      	ldr	r3, [pc, #276]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1f0      	bne.n	800c452 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c470:	4b42      	ldr	r3, [pc, #264]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c474:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	031b      	lsls	r3, r3, #12
 800c47e:	493f      	ldr	r1, [pc, #252]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c480:	4313      	orrs	r3, r2
 800c482:	628b      	str	r3, [r1, #40]	@ 0x28
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	3b01      	subs	r3, #1
 800c48a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	3b01      	subs	r3, #1
 800c494:	025b      	lsls	r3, r3, #9
 800c496:	b29b      	uxth	r3, r3
 800c498:	431a      	orrs	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	041b      	lsls	r3, r3, #16
 800c4a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c4a6:	431a      	orrs	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	061b      	lsls	r3, r3, #24
 800c4b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c4b4:	4931      	ldr	r1, [pc, #196]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c4ba:	4b30      	ldr	r3, [pc, #192]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	492d      	ldr	r1, [pc, #180]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c4cc:	4b2b      	ldr	r3, [pc, #172]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c4ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d0:	f023 0220 	bic.w	r2, r3, #32
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	4928      	ldr	r1, [pc, #160]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c4de:	4b27      	ldr	r3, [pc, #156]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4e2:	4a26      	ldr	r2, [pc, #152]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c4e4:	f023 0310 	bic.w	r3, r3, #16
 800c4e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c4ea:	4b24      	ldr	r3, [pc, #144]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c4ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4ee:	4b24      	ldr	r3, [pc, #144]	@ (800c580 <RCCEx_PLL2_Config+0x160>)
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	69d2      	ldr	r2, [r2, #28]
 800c4f6:	00d2      	lsls	r2, r2, #3
 800c4f8:	4920      	ldr	r1, [pc, #128]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c4fe:	4b1f      	ldr	r3, [pc, #124]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c502:	4a1e      	ldr	r2, [pc, #120]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c504:	f043 0310 	orr.w	r3, r3, #16
 800c508:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d106      	bne.n	800c51e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c510:	4b1a      	ldr	r3, [pc, #104]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c514:	4a19      	ldr	r2, [pc, #100]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c516:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c51a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c51c:	e00f      	b.n	800c53e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d106      	bne.n	800c532 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c524:	4b15      	ldr	r3, [pc, #84]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c528:	4a14      	ldr	r2, [pc, #80]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c52a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c52e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c530:	e005      	b.n	800c53e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c532:	4b12      	ldr	r3, [pc, #72]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c536:	4a11      	ldr	r2, [pc, #68]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c538:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c53c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c53e:	4b0f      	ldr	r3, [pc, #60]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a0e      	ldr	r2, [pc, #56]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c544:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c54a:	f7f6 fcbf 	bl	8002ecc <HAL_GetTick>
 800c54e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c550:	e008      	b.n	800c564 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c552:	f7f6 fcbb 	bl	8002ecc <HAL_GetTick>
 800c556:	4602      	mov	r2, r0
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	1ad3      	subs	r3, r2, r3
 800c55c:	2b02      	cmp	r3, #2
 800c55e:	d901      	bls.n	800c564 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c560:	2303      	movs	r3, #3
 800c562:	e006      	b.n	800c572 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c564:	4b05      	ldr	r3, [pc, #20]	@ (800c57c <RCCEx_PLL2_Config+0x15c>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d0f0      	beq.n	800c552 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c570:	7bfb      	ldrb	r3, [r7, #15]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	58024400 	.word	0x58024400
 800c580:	ffff0007 	.word	0xffff0007

0800c584 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c58e:	2300      	movs	r3, #0
 800c590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c592:	4b53      	ldr	r3, [pc, #332]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c596:	f003 0303 	and.w	r3, r3, #3
 800c59a:	2b03      	cmp	r3, #3
 800c59c:	d101      	bne.n	800c5a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e099      	b.n	800c6d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c5a2:	4b4f      	ldr	r3, [pc, #316]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a4e      	ldr	r2, [pc, #312]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c5a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c5ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5ae:	f7f6 fc8d 	bl	8002ecc <HAL_GetTick>
 800c5b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c5b4:	e008      	b.n	800c5c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c5b6:	f7f6 fc89 	bl	8002ecc <HAL_GetTick>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	1ad3      	subs	r3, r2, r3
 800c5c0:	2b02      	cmp	r3, #2
 800c5c2:	d901      	bls.n	800c5c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5c4:	2303      	movs	r3, #3
 800c5c6:	e086      	b.n	800c6d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c5c8:	4b45      	ldr	r3, [pc, #276]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1f0      	bne.n	800c5b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c5d4:	4b42      	ldr	r3, [pc, #264]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	051b      	lsls	r3, r3, #20
 800c5e2:	493f      	ldr	r1, [pc, #252]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	628b      	str	r3, [r1, #40]	@ 0x28
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	025b      	lsls	r3, r3, #9
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	431a      	orrs	r2, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	3b01      	subs	r3, #1
 800c604:	041b      	lsls	r3, r3, #16
 800c606:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c60a:	431a      	orrs	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	3b01      	subs	r3, #1
 800c612:	061b      	lsls	r3, r3, #24
 800c614:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c618:	4931      	ldr	r1, [pc, #196]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c61a:	4313      	orrs	r3, r2
 800c61c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c61e:	4b30      	ldr	r3, [pc, #192]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c622:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	492d      	ldr	r1, [pc, #180]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c62c:	4313      	orrs	r3, r2
 800c62e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c630:	4b2b      	ldr	r3, [pc, #172]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c634:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	699b      	ldr	r3, [r3, #24]
 800c63c:	4928      	ldr	r1, [pc, #160]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c63e:	4313      	orrs	r3, r2
 800c640:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c642:	4b27      	ldr	r3, [pc, #156]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c646:	4a26      	ldr	r2, [pc, #152]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c64c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c64e:	4b24      	ldr	r3, [pc, #144]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c652:	4b24      	ldr	r3, [pc, #144]	@ (800c6e4 <RCCEx_PLL3_Config+0x160>)
 800c654:	4013      	ands	r3, r2
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	69d2      	ldr	r2, [r2, #28]
 800c65a:	00d2      	lsls	r2, r2, #3
 800c65c:	4920      	ldr	r1, [pc, #128]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c65e:	4313      	orrs	r3, r2
 800c660:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c662:	4b1f      	ldr	r3, [pc, #124]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c666:	4a1e      	ldr	r2, [pc, #120]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c66c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d106      	bne.n	800c682 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c674:	4b1a      	ldr	r3, [pc, #104]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c678:	4a19      	ldr	r2, [pc, #100]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c67a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c67e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c680:	e00f      	b.n	800c6a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d106      	bne.n	800c696 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c688:	4b15      	ldr	r3, [pc, #84]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c68c:	4a14      	ldr	r2, [pc, #80]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c68e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c692:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c694:	e005      	b.n	800c6a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c696:	4b12      	ldr	r3, [pc, #72]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c69a:	4a11      	ldr	r2, [pc, #68]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c69c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c6a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c6a2:	4b0f      	ldr	r3, [pc, #60]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a0e      	ldr	r2, [pc, #56]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c6a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c6ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6ae:	f7f6 fc0d 	bl	8002ecc <HAL_GetTick>
 800c6b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c6b4:	e008      	b.n	800c6c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c6b6:	f7f6 fc09 	bl	8002ecc <HAL_GetTick>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d901      	bls.n	800c6c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e006      	b.n	800c6d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c6c8:	4b05      	ldr	r3, [pc, #20]	@ (800c6e0 <RCCEx_PLL3_Config+0x15c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d0f0      	beq.n	800c6b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	58024400 	.word	0x58024400
 800c6e4:	ffff0007 	.word	0xffff0007

0800c6e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d101      	bne.n	800c6fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e049      	b.n	800c78e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c700:	b2db      	uxtb	r3, r3
 800c702:	2b00      	cmp	r3, #0
 800c704:	d106      	bne.n	800c714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7f6 fa1e 	bl	8002b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2202      	movs	r2, #2
 800c718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	3304      	adds	r3, #4
 800c724:	4619      	mov	r1, r3
 800c726:	4610      	mov	r0, r2
 800c728:	f000 f9c6 	bl	800cab8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2201      	movs	r2, #1
 800c738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2201      	movs	r2, #1
 800c748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2201      	movs	r2, #1
 800c758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2201      	movs	r2, #1
 800c780:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3708      	adds	r7, #8
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
	...

0800c798 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d001      	beq.n	800c7b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e04c      	b.n	800c84a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2202      	movs	r2, #2
 800c7b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a26      	ldr	r2, [pc, #152]	@ (800c858 <HAL_TIM_Base_Start+0xc0>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d022      	beq.n	800c808 <HAL_TIM_Base_Start+0x70>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7ca:	d01d      	beq.n	800c808 <HAL_TIM_Base_Start+0x70>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a22      	ldr	r2, [pc, #136]	@ (800c85c <HAL_TIM_Base_Start+0xc4>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d018      	beq.n	800c808 <HAL_TIM_Base_Start+0x70>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a21      	ldr	r2, [pc, #132]	@ (800c860 <HAL_TIM_Base_Start+0xc8>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d013      	beq.n	800c808 <HAL_TIM_Base_Start+0x70>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a1f      	ldr	r2, [pc, #124]	@ (800c864 <HAL_TIM_Base_Start+0xcc>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d00e      	beq.n	800c808 <HAL_TIM_Base_Start+0x70>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a1e      	ldr	r2, [pc, #120]	@ (800c868 <HAL_TIM_Base_Start+0xd0>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d009      	beq.n	800c808 <HAL_TIM_Base_Start+0x70>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a1c      	ldr	r2, [pc, #112]	@ (800c86c <HAL_TIM_Base_Start+0xd4>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d004      	beq.n	800c808 <HAL_TIM_Base_Start+0x70>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a1b      	ldr	r2, [pc, #108]	@ (800c870 <HAL_TIM_Base_Start+0xd8>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d115      	bne.n	800c834 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	689a      	ldr	r2, [r3, #8]
 800c80e:	4b19      	ldr	r3, [pc, #100]	@ (800c874 <HAL_TIM_Base_Start+0xdc>)
 800c810:	4013      	ands	r3, r2
 800c812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2b06      	cmp	r3, #6
 800c818:	d015      	beq.n	800c846 <HAL_TIM_Base_Start+0xae>
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c820:	d011      	beq.n	800c846 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f042 0201 	orr.w	r2, r2, #1
 800c830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c832:	e008      	b.n	800c846 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f042 0201 	orr.w	r2, r2, #1
 800c842:	601a      	str	r2, [r3, #0]
 800c844:	e000      	b.n	800c848 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c846:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3714      	adds	r7, #20
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop
 800c858:	40010000 	.word	0x40010000
 800c85c:	40000400 	.word	0x40000400
 800c860:	40000800 	.word	0x40000800
 800c864:	40000c00 	.word	0x40000c00
 800c868:	40010400 	.word	0x40010400
 800c86c:	40001800 	.word	0x40001800
 800c870:	40014000 	.word	0x40014000
 800c874:	00010007 	.word	0x00010007

0800c878 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	6a1a      	ldr	r2, [r3, #32]
 800c886:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c88a:	4013      	ands	r3, r2
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10f      	bne.n	800c8b0 <HAL_TIM_Base_Stop+0x38>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6a1a      	ldr	r2, [r3, #32]
 800c896:	f240 4344 	movw	r3, #1092	@ 0x444
 800c89a:	4013      	ands	r3, r2
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d107      	bne.n	800c8b0 <HAL_TIM_Base_Stop+0x38>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f022 0201 	bic.w	r2, r2, #1
 800c8ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	370c      	adds	r7, #12
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
	...

0800c8c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d101      	bne.n	800c8e4 <HAL_TIM_ConfigClockSource+0x1c>
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	e0dc      	b.n	800ca9e <HAL_TIM_ConfigClockSource+0x1d6>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2202      	movs	r2, #2
 800c8f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c8fc:	68ba      	ldr	r2, [r7, #8]
 800c8fe:	4b6a      	ldr	r3, [pc, #424]	@ (800caa8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c900:	4013      	ands	r3, r2
 800c902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c90a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a64      	ldr	r2, [pc, #400]	@ (800caac <HAL_TIM_ConfigClockSource+0x1e4>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	f000 80a9 	beq.w	800ca72 <HAL_TIM_ConfigClockSource+0x1aa>
 800c920:	4a62      	ldr	r2, [pc, #392]	@ (800caac <HAL_TIM_ConfigClockSource+0x1e4>)
 800c922:	4293      	cmp	r3, r2
 800c924:	f200 80ae 	bhi.w	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c928:	4a61      	ldr	r2, [pc, #388]	@ (800cab0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	f000 80a1 	beq.w	800ca72 <HAL_TIM_ConfigClockSource+0x1aa>
 800c930:	4a5f      	ldr	r2, [pc, #380]	@ (800cab0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c932:	4293      	cmp	r3, r2
 800c934:	f200 80a6 	bhi.w	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c938:	4a5e      	ldr	r2, [pc, #376]	@ (800cab4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	f000 8099 	beq.w	800ca72 <HAL_TIM_ConfigClockSource+0x1aa>
 800c940:	4a5c      	ldr	r2, [pc, #368]	@ (800cab4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c942:	4293      	cmp	r3, r2
 800c944:	f200 809e 	bhi.w	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c948:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c94c:	f000 8091 	beq.w	800ca72 <HAL_TIM_ConfigClockSource+0x1aa>
 800c950:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c954:	f200 8096 	bhi.w	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c958:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c95c:	f000 8089 	beq.w	800ca72 <HAL_TIM_ConfigClockSource+0x1aa>
 800c960:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c964:	f200 808e 	bhi.w	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c96c:	d03e      	beq.n	800c9ec <HAL_TIM_ConfigClockSource+0x124>
 800c96e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c972:	f200 8087 	bhi.w	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c97a:	f000 8086 	beq.w	800ca8a <HAL_TIM_ConfigClockSource+0x1c2>
 800c97e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c982:	d87f      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c984:	2b70      	cmp	r3, #112	@ 0x70
 800c986:	d01a      	beq.n	800c9be <HAL_TIM_ConfigClockSource+0xf6>
 800c988:	2b70      	cmp	r3, #112	@ 0x70
 800c98a:	d87b      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c98c:	2b60      	cmp	r3, #96	@ 0x60
 800c98e:	d050      	beq.n	800ca32 <HAL_TIM_ConfigClockSource+0x16a>
 800c990:	2b60      	cmp	r3, #96	@ 0x60
 800c992:	d877      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c994:	2b50      	cmp	r3, #80	@ 0x50
 800c996:	d03c      	beq.n	800ca12 <HAL_TIM_ConfigClockSource+0x14a>
 800c998:	2b50      	cmp	r3, #80	@ 0x50
 800c99a:	d873      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c99c:	2b40      	cmp	r3, #64	@ 0x40
 800c99e:	d058      	beq.n	800ca52 <HAL_TIM_ConfigClockSource+0x18a>
 800c9a0:	2b40      	cmp	r3, #64	@ 0x40
 800c9a2:	d86f      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9a4:	2b30      	cmp	r3, #48	@ 0x30
 800c9a6:	d064      	beq.n	800ca72 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9a8:	2b30      	cmp	r3, #48	@ 0x30
 800c9aa:	d86b      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9ac:	2b20      	cmp	r3, #32
 800c9ae:	d060      	beq.n	800ca72 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9b0:	2b20      	cmp	r3, #32
 800c9b2:	d867      	bhi.n	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d05c      	beq.n	800ca72 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9b8:	2b10      	cmp	r3, #16
 800c9ba:	d05a      	beq.n	800ca72 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9bc:	e062      	b.n	800ca84 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9ce:	f000 f98b 	bl	800cce8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c9e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	609a      	str	r2, [r3, #8]
      break;
 800c9ea:	e04f      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9fc:	f000 f974 	bl	800cce8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	689a      	ldr	r2, [r3, #8]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ca0e:	609a      	str	r2, [r3, #8]
      break;
 800ca10:	e03c      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca1e:	461a      	mov	r2, r3
 800ca20:	f000 f8e4 	bl	800cbec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2150      	movs	r1, #80	@ 0x50
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f000 f93e 	bl	800ccac <TIM_ITRx_SetConfig>
      break;
 800ca30:	e02c      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca3e:	461a      	mov	r2, r3
 800ca40:	f000 f903 	bl	800cc4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2160      	movs	r1, #96	@ 0x60
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 f92e 	bl	800ccac <TIM_ITRx_SetConfig>
      break;
 800ca50:	e01c      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca5e:	461a      	mov	r2, r3
 800ca60:	f000 f8c4 	bl	800cbec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2140      	movs	r1, #64	@ 0x40
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 f91e 	bl	800ccac <TIM_ITRx_SetConfig>
      break;
 800ca70:	e00c      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	f000 f915 	bl	800ccac <TIM_ITRx_SetConfig>
      break;
 800ca82:	e003      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ca84:	2301      	movs	r3, #1
 800ca86:	73fb      	strb	r3, [r7, #15]
      break;
 800ca88:	e000      	b.n	800ca8c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ca8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ca9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	ffceff88 	.word	0xffceff88
 800caac:	00100040 	.word	0x00100040
 800cab0:	00100030 	.word	0x00100030
 800cab4:	00100020 	.word	0x00100020

0800cab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a40      	ldr	r2, [pc, #256]	@ (800cbcc <TIM_Base_SetConfig+0x114>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d013      	beq.n	800caf8 <TIM_Base_SetConfig+0x40>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cad6:	d00f      	beq.n	800caf8 <TIM_Base_SetConfig+0x40>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a3d      	ldr	r2, [pc, #244]	@ (800cbd0 <TIM_Base_SetConfig+0x118>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d00b      	beq.n	800caf8 <TIM_Base_SetConfig+0x40>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4a3c      	ldr	r2, [pc, #240]	@ (800cbd4 <TIM_Base_SetConfig+0x11c>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d007      	beq.n	800caf8 <TIM_Base_SetConfig+0x40>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4a3b      	ldr	r2, [pc, #236]	@ (800cbd8 <TIM_Base_SetConfig+0x120>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d003      	beq.n	800caf8 <TIM_Base_SetConfig+0x40>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4a3a      	ldr	r2, [pc, #232]	@ (800cbdc <TIM_Base_SetConfig+0x124>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d108      	bne.n	800cb0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cafe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	4313      	orrs	r3, r2
 800cb08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a2f      	ldr	r2, [pc, #188]	@ (800cbcc <TIM_Base_SetConfig+0x114>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d01f      	beq.n	800cb52 <TIM_Base_SetConfig+0x9a>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb18:	d01b      	beq.n	800cb52 <TIM_Base_SetConfig+0x9a>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4a2c      	ldr	r2, [pc, #176]	@ (800cbd0 <TIM_Base_SetConfig+0x118>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d017      	beq.n	800cb52 <TIM_Base_SetConfig+0x9a>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a2b      	ldr	r2, [pc, #172]	@ (800cbd4 <TIM_Base_SetConfig+0x11c>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d013      	beq.n	800cb52 <TIM_Base_SetConfig+0x9a>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4a2a      	ldr	r2, [pc, #168]	@ (800cbd8 <TIM_Base_SetConfig+0x120>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d00f      	beq.n	800cb52 <TIM_Base_SetConfig+0x9a>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a29      	ldr	r2, [pc, #164]	@ (800cbdc <TIM_Base_SetConfig+0x124>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d00b      	beq.n	800cb52 <TIM_Base_SetConfig+0x9a>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a28      	ldr	r2, [pc, #160]	@ (800cbe0 <TIM_Base_SetConfig+0x128>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d007      	beq.n	800cb52 <TIM_Base_SetConfig+0x9a>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a27      	ldr	r2, [pc, #156]	@ (800cbe4 <TIM_Base_SetConfig+0x12c>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d003      	beq.n	800cb52 <TIM_Base_SetConfig+0x9a>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4a26      	ldr	r2, [pc, #152]	@ (800cbe8 <TIM_Base_SetConfig+0x130>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d108      	bne.n	800cb64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	695b      	ldr	r3, [r3, #20]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	689a      	ldr	r2, [r3, #8]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a10      	ldr	r2, [pc, #64]	@ (800cbcc <TIM_Base_SetConfig+0x114>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d00f      	beq.n	800cbb0 <TIM_Base_SetConfig+0xf8>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a12      	ldr	r2, [pc, #72]	@ (800cbdc <TIM_Base_SetConfig+0x124>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d00b      	beq.n	800cbb0 <TIM_Base_SetConfig+0xf8>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a11      	ldr	r2, [pc, #68]	@ (800cbe0 <TIM_Base_SetConfig+0x128>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d007      	beq.n	800cbb0 <TIM_Base_SetConfig+0xf8>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a10      	ldr	r2, [pc, #64]	@ (800cbe4 <TIM_Base_SetConfig+0x12c>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d003      	beq.n	800cbb0 <TIM_Base_SetConfig+0xf8>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4a0f      	ldr	r2, [pc, #60]	@ (800cbe8 <TIM_Base_SetConfig+0x130>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d103      	bne.n	800cbb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	691a      	ldr	r2, [r3, #16]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	615a      	str	r2, [r3, #20]
}
 800cbbe:	bf00      	nop
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	40010000 	.word	0x40010000
 800cbd0:	40000400 	.word	0x40000400
 800cbd4:	40000800 	.word	0x40000800
 800cbd8:	40000c00 	.word	0x40000c00
 800cbdc:	40010400 	.word	0x40010400
 800cbe0:	40014000 	.word	0x40014000
 800cbe4:	40014400 	.word	0x40014400
 800cbe8:	40014800 	.word	0x40014800

0800cbec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6a1b      	ldr	r3, [r3, #32]
 800cbfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6a1b      	ldr	r3, [r3, #32]
 800cc02:	f023 0201 	bic.w	r2, r3, #1
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	699b      	ldr	r3, [r3, #24]
 800cc0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cc16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	011b      	lsls	r3, r3, #4
 800cc1c:	693a      	ldr	r2, [r7, #16]
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	f023 030a 	bic.w	r3, r3, #10
 800cc28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	693a      	ldr	r2, [r7, #16]
 800cc36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	697a      	ldr	r2, [r7, #20]
 800cc3c:	621a      	str	r2, [r3, #32]
}
 800cc3e:	bf00      	nop
 800cc40:	371c      	adds	r7, #28
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b087      	sub	sp, #28
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	60f8      	str	r0, [r7, #12]
 800cc52:	60b9      	str	r1, [r7, #8]
 800cc54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	f023 0210 	bic.w	r2, r3, #16
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6a1b      	ldr	r3, [r3, #32]
 800cc6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	031b      	lsls	r3, r3, #12
 800cc7a:	697a      	ldr	r2, [r7, #20]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cc86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	011b      	lsls	r3, r3, #4
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	621a      	str	r2, [r3, #32]
}
 800cc9e:	bf00      	nop
 800cca0:	371c      	adds	r7, #28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
	...

0800ccac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	4b09      	ldr	r3, [pc, #36]	@ (800cce4 <TIM_ITRx_SetConfig+0x38>)
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccc4:	683a      	ldr	r2, [r7, #0]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	f043 0307 	orr.w	r3, r3, #7
 800ccce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	609a      	str	r2, [r3, #8]
}
 800ccd6:	bf00      	nop
 800ccd8:	3714      	adds	r7, #20
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr
 800cce2:	bf00      	nop
 800cce4:	ffcfff8f 	.word	0xffcfff8f

0800cce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b087      	sub	sp, #28
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cd02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	021a      	lsls	r2, r3, #8
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	431a      	orrs	r2, r3
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	697a      	ldr	r2, [r7, #20]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	697a      	ldr	r2, [r7, #20]
 800cd1a:	609a      	str	r2, [r3, #8]
}
 800cd1c:	bf00      	nop
 800cd1e:	371c      	adds	r7, #28
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d101      	bne.n	800cd40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd3c:	2302      	movs	r3, #2
 800cd3e:	e06d      	b.n	800ce1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2202      	movs	r2, #2
 800cd4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	689b      	ldr	r3, [r3, #8]
 800cd5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a30      	ldr	r2, [pc, #192]	@ (800ce28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d004      	beq.n	800cd74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a2f      	ldr	r2, [pc, #188]	@ (800ce2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d108      	bne.n	800cd86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cd7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	4313      	orrs	r3, r2
 800cd96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	4a20      	ldr	r2, [pc, #128]	@ (800ce28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d022      	beq.n	800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdb2:	d01d      	beq.n	800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ce30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d018      	beq.n	800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a1c      	ldr	r2, [pc, #112]	@ (800ce34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d013      	beq.n	800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a1a      	ldr	r2, [pc, #104]	@ (800ce38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d00e      	beq.n	800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a15      	ldr	r2, [pc, #84]	@ (800ce2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d009      	beq.n	800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a16      	ldr	r2, [pc, #88]	@ (800ce3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d004      	beq.n	800cdf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a15      	ldr	r2, [pc, #84]	@ (800ce40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d10c      	bne.n	800ce0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3714      	adds	r7, #20
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr
 800ce28:	40010000 	.word	0x40010000
 800ce2c:	40010400 	.word	0x40010400
 800ce30:	40000400 	.word	0x40000400
 800ce34:	40000800 	.word	0x40000800
 800ce38:	40000c00 	.word	0x40000c00
 800ce3c:	40001800 	.word	0x40001800
 800ce40:	40014000 	.word	0x40014000

0800ce44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce52:	2301      	movs	r3, #1
 800ce54:	e042      	b.n	800cedc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d106      	bne.n	800ce6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f7f5 ff0d 	bl	8002c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2224      	movs	r2, #36	@ 0x24
 800ce72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f022 0201 	bic.w	r2, r2, #1
 800ce84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 fc94 	bl	800d7b4 <UART_SetConfig>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d101      	bne.n	800ce96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	e022      	b.n	800cedc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d002      	beq.n	800cea4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f001 f9f0 	bl	800e284 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	685a      	ldr	r2, [r3, #4]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ceb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	689a      	ldr	r2, [r3, #8]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f042 0201 	orr.w	r2, r2, #1
 800ced2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f001 fa77 	bl	800e3c8 <UART_CheckIdleState>
 800ceda:	4603      	mov	r3, r0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08a      	sub	sp, #40	@ 0x28
 800cee8:	af02      	add	r7, sp, #8
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	603b      	str	r3, [r7, #0]
 800cef0:	4613      	mov	r3, r2
 800cef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cefa:	2b20      	cmp	r3, #32
 800cefc:	d17b      	bne.n	800cff6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d002      	beq.n	800cf0a <HAL_UART_Transmit+0x26>
 800cf04:	88fb      	ldrh	r3, [r7, #6]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d101      	bne.n	800cf0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	e074      	b.n	800cff8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2221      	movs	r2, #33	@ 0x21
 800cf1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf1e:	f7f5 ffd5 	bl	8002ecc <HAL_GetTick>
 800cf22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	88fa      	ldrh	r2, [r7, #6]
 800cf28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	88fa      	ldrh	r2, [r7, #6]
 800cf30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf3c:	d108      	bne.n	800cf50 <HAL_UART_Transmit+0x6c>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	691b      	ldr	r3, [r3, #16]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d104      	bne.n	800cf50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cf46:	2300      	movs	r3, #0
 800cf48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	61bb      	str	r3, [r7, #24]
 800cf4e:	e003      	b.n	800cf58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf54:	2300      	movs	r3, #0
 800cf56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf58:	e030      	b.n	800cfbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	2200      	movs	r2, #0
 800cf62:	2180      	movs	r1, #128	@ 0x80
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f001 fad9 	bl	800e51c <UART_WaitOnFlagUntilTimeout>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d005      	beq.n	800cf7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2220      	movs	r2, #32
 800cf74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cf78:	2303      	movs	r3, #3
 800cf7a:	e03d      	b.n	800cff8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d10b      	bne.n	800cf9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	881b      	ldrh	r3, [r3, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	3302      	adds	r3, #2
 800cf96:	61bb      	str	r3, [r7, #24]
 800cf98:	e007      	b.n	800cfaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	781a      	ldrb	r2, [r3, #0]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1c8      	bne.n	800cf5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	9300      	str	r3, [sp, #0]
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	2140      	movs	r1, #64	@ 0x40
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f001 faa2 	bl	800e51c <UART_WaitOnFlagUntilTimeout>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d005      	beq.n	800cfea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2220      	movs	r2, #32
 800cfe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	e006      	b.n	800cff8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2220      	movs	r2, #32
 800cfee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	e000      	b.n	800cff8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cff6:	2302      	movs	r3, #2
  }
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3720      	adds	r7, #32
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b0ba      	sub	sp, #232	@ 0xe8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	69db      	ldr	r3, [r3, #28]
 800d00e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	689b      	ldr	r3, [r3, #8]
 800d022:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d026:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d02a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d02e:	4013      	ands	r3, r2
 800d030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d11b      	bne.n	800d074 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d03c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d040:	f003 0320 	and.w	r3, r3, #32
 800d044:	2b00      	cmp	r3, #0
 800d046:	d015      	beq.n	800d074 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d04c:	f003 0320 	and.w	r3, r3, #32
 800d050:	2b00      	cmp	r3, #0
 800d052:	d105      	bne.n	800d060 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d009      	beq.n	800d074 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d064:	2b00      	cmp	r3, #0
 800d066:	f000 8377 	beq.w	800d758 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	4798      	blx	r3
      }
      return;
 800d072:	e371      	b.n	800d758 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d078:	2b00      	cmp	r3, #0
 800d07a:	f000 8123 	beq.w	800d2c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d07e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d082:	4b8d      	ldr	r3, [pc, #564]	@ (800d2b8 <HAL_UART_IRQHandler+0x2b8>)
 800d084:	4013      	ands	r3, r2
 800d086:	2b00      	cmp	r3, #0
 800d088:	d106      	bne.n	800d098 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d08a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d08e:	4b8b      	ldr	r3, [pc, #556]	@ (800d2bc <HAL_UART_IRQHandler+0x2bc>)
 800d090:	4013      	ands	r3, r2
 800d092:	2b00      	cmp	r3, #0
 800d094:	f000 8116 	beq.w	800d2c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d09c:	f003 0301 	and.w	r3, r3, #1
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d011      	beq.n	800d0c8 <HAL_UART_IRQHandler+0xc8>
 800d0a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00b      	beq.n	800d0c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0be:	f043 0201 	orr.w	r2, r3, #1
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0cc:	f003 0302 	and.w	r3, r3, #2
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d011      	beq.n	800d0f8 <HAL_UART_IRQHandler+0xf8>
 800d0d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0d8:	f003 0301 	and.w	r3, r3, #1
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00b      	beq.n	800d0f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0ee:	f043 0204 	orr.w	r2, r3, #4
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0fc:	f003 0304 	and.w	r3, r3, #4
 800d100:	2b00      	cmp	r3, #0
 800d102:	d011      	beq.n	800d128 <HAL_UART_IRQHandler+0x128>
 800d104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d108:	f003 0301 	and.w	r3, r3, #1
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00b      	beq.n	800d128 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2204      	movs	r2, #4
 800d116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d11e:	f043 0202 	orr.w	r2, r3, #2
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d12c:	f003 0308 	and.w	r3, r3, #8
 800d130:	2b00      	cmp	r3, #0
 800d132:	d017      	beq.n	800d164 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d138:	f003 0320 	and.w	r3, r3, #32
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d105      	bne.n	800d14c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d140:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d144:	4b5c      	ldr	r3, [pc, #368]	@ (800d2b8 <HAL_UART_IRQHandler+0x2b8>)
 800d146:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00b      	beq.n	800d164 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2208      	movs	r2, #8
 800d152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d15a:	f043 0208 	orr.w	r2, r3, #8
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d012      	beq.n	800d196 <HAL_UART_IRQHandler+0x196>
 800d170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d174:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00c      	beq.n	800d196 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d18c:	f043 0220 	orr.w	r2, r3, #32
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f000 82dd 	beq.w	800d75c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1a6:	f003 0320 	and.w	r3, r3, #32
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d013      	beq.n	800d1d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1b2:	f003 0320 	and.w	r3, r3, #32
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d105      	bne.n	800d1c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d1ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d1be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d007      	beq.n	800d1d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d003      	beq.n	800d1d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1ea:	2b40      	cmp	r3, #64	@ 0x40
 800d1ec:	d005      	beq.n	800d1fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d1ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d1f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d054      	beq.n	800d2a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f001 f9f6 	bl	800e5ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d20a:	2b40      	cmp	r3, #64	@ 0x40
 800d20c:	d146      	bne.n	800d29c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	3308      	adds	r3, #8
 800d214:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d218:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d21c:	e853 3f00 	ldrex	r3, [r3]
 800d220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d224:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d22c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3308      	adds	r3, #8
 800d236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d23a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d23e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d24a:	e841 2300 	strex	r3, r2, [r1]
 800d24e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1d9      	bne.n	800d20e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d260:	2b00      	cmp	r3, #0
 800d262:	d017      	beq.n	800d294 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d26a:	4a15      	ldr	r2, [pc, #84]	@ (800d2c0 <HAL_UART_IRQHandler+0x2c0>)
 800d26c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d274:	4618      	mov	r0, r3
 800d276:	f7f9 fbc3 	bl	8006a00 <HAL_DMA_Abort_IT>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d019      	beq.n	800d2b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d28e:	4610      	mov	r0, r2
 800d290:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d292:	e00f      	b.n	800d2b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fa77 	bl	800d788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d29a:	e00b      	b.n	800d2b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 fa73 	bl	800d788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2a2:	e007      	b.n	800d2b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 fa6f 	bl	800d788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d2b2:	e253      	b.n	800d75c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2b4:	bf00      	nop
    return;
 800d2b6:	e251      	b.n	800d75c <HAL_UART_IRQHandler+0x75c>
 800d2b8:	10000001 	.word	0x10000001
 800d2bc:	04000120 	.word	0x04000120
 800d2c0:	0800e6b9 	.word	0x0800e6b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	f040 81e7 	bne.w	800d69c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2d2:	f003 0310 	and.w	r3, r3, #16
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	f000 81e0 	beq.w	800d69c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2e0:	f003 0310 	and.w	r3, r3, #16
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	f000 81d9 	beq.w	800d69c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2210      	movs	r2, #16
 800d2f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2fc:	2b40      	cmp	r3, #64	@ 0x40
 800d2fe:	f040 8151 	bne.w	800d5a4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a96      	ldr	r2, [pc, #600]	@ (800d564 <HAL_UART_IRQHandler+0x564>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d068      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a93      	ldr	r2, [pc, #588]	@ (800d568 <HAL_UART_IRQHandler+0x568>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d061      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a91      	ldr	r2, [pc, #580]	@ (800d56c <HAL_UART_IRQHandler+0x56c>)
 800d328:	4293      	cmp	r3, r2
 800d32a:	d05a      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a8e      	ldr	r2, [pc, #568]	@ (800d570 <HAL_UART_IRQHandler+0x570>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d053      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a8c      	ldr	r2, [pc, #560]	@ (800d574 <HAL_UART_IRQHandler+0x574>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d04c      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a89      	ldr	r2, [pc, #548]	@ (800d578 <HAL_UART_IRQHandler+0x578>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d045      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4a87      	ldr	r2, [pc, #540]	@ (800d57c <HAL_UART_IRQHandler+0x57c>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d03e      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a84      	ldr	r2, [pc, #528]	@ (800d580 <HAL_UART_IRQHandler+0x580>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d037      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a82      	ldr	r2, [pc, #520]	@ (800d584 <HAL_UART_IRQHandler+0x584>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d030      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a7f      	ldr	r2, [pc, #508]	@ (800d588 <HAL_UART_IRQHandler+0x588>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d029      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4a7d      	ldr	r2, [pc, #500]	@ (800d58c <HAL_UART_IRQHandler+0x58c>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d022      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4a7a      	ldr	r2, [pc, #488]	@ (800d590 <HAL_UART_IRQHandler+0x590>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d01b      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a78      	ldr	r2, [pc, #480]	@ (800d594 <HAL_UART_IRQHandler+0x594>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d014      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a75      	ldr	r2, [pc, #468]	@ (800d598 <HAL_UART_IRQHandler+0x598>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d00d      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4a73      	ldr	r2, [pc, #460]	@ (800d59c <HAL_UART_IRQHandler+0x59c>)
 800d3d0:	4293      	cmp	r3, r2
 800d3d2:	d006      	beq.n	800d3e2 <HAL_UART_IRQHandler+0x3e2>
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a70      	ldr	r2, [pc, #448]	@ (800d5a0 <HAL_UART_IRQHandler+0x5a0>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d106      	bne.n	800d3f0 <HAL_UART_IRQHandler+0x3f0>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	e005      	b.n	800d3fc <HAL_UART_IRQHandler+0x3fc>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d404:	2b00      	cmp	r3, #0
 800d406:	f000 81ab 	beq.w	800d760 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d410:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d414:	429a      	cmp	r2, r3
 800d416:	f080 81a3 	bcs.w	800d760 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d420:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d42a:	69db      	ldr	r3, [r3, #28]
 800d42c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d430:	f000 8087 	beq.w	800d542 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d440:	e853 3f00 	ldrex	r3, [r3]
 800d444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d448:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d44c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	461a      	mov	r2, r3
 800d45a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d45e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d462:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d466:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d46a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d46e:	e841 2300 	strex	r3, r2, [r1]
 800d472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1da      	bne.n	800d434 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3308      	adds	r3, #8
 800d484:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d488:	e853 3f00 	ldrex	r3, [r3]
 800d48c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d48e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d490:	f023 0301 	bic.w	r3, r3, #1
 800d494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3308      	adds	r3, #8
 800d49e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d4a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d4a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d4aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d4ae:	e841 2300 	strex	r3, r2, [r1]
 800d4b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d4b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d1e1      	bne.n	800d47e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	3308      	adds	r3, #8
 800d4c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d4c4:	e853 3f00 	ldrex	r3, [r3]
 800d4c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d4ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	3308      	adds	r3, #8
 800d4da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d4de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d4e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d4e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d4e6:	e841 2300 	strex	r3, r2, [r1]
 800d4ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d4ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1e3      	bne.n	800d4ba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2220      	movs	r2, #32
 800d4f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d508:	e853 3f00 	ldrex	r3, [r3]
 800d50c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d50e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d510:	f023 0310 	bic.w	r3, r3, #16
 800d514:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	461a      	mov	r2, r3
 800d51e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d522:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d524:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d526:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d528:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d52a:	e841 2300 	strex	r3, r2, [r1]
 800d52e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1e4      	bne.n	800d500 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7f8 ff41 	bl	80063c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2202      	movs	r2, #2
 800d546:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d554:	b29b      	uxth	r3, r3
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	b29b      	uxth	r3, r3
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 f91d 	bl	800d79c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d562:	e0fd      	b.n	800d760 <HAL_UART_IRQHandler+0x760>
 800d564:	40020010 	.word	0x40020010
 800d568:	40020028 	.word	0x40020028
 800d56c:	40020040 	.word	0x40020040
 800d570:	40020058 	.word	0x40020058
 800d574:	40020070 	.word	0x40020070
 800d578:	40020088 	.word	0x40020088
 800d57c:	400200a0 	.word	0x400200a0
 800d580:	400200b8 	.word	0x400200b8
 800d584:	40020410 	.word	0x40020410
 800d588:	40020428 	.word	0x40020428
 800d58c:	40020440 	.word	0x40020440
 800d590:	40020458 	.word	0x40020458
 800d594:	40020470 	.word	0x40020470
 800d598:	40020488 	.word	0x40020488
 800d59c:	400204a0 	.word	0x400204a0
 800d5a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f000 80cf 	beq.w	800d764 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d5c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f000 80ca 	beq.w	800d764 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d8:	e853 3f00 	ldrex	r3, [r3]
 800d5dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d5de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d5e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d5f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d5f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d5f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d5fa:	e841 2300 	strex	r3, r2, [r1]
 800d5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d602:	2b00      	cmp	r3, #0
 800d604:	d1e4      	bne.n	800d5d0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	3308      	adds	r3, #8
 800d60c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d610:	e853 3f00 	ldrex	r3, [r3]
 800d614:	623b      	str	r3, [r7, #32]
   return(result);
 800d616:	6a3a      	ldr	r2, [r7, #32]
 800d618:	4b55      	ldr	r3, [pc, #340]	@ (800d770 <HAL_UART_IRQHandler+0x770>)
 800d61a:	4013      	ands	r3, r2
 800d61c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3308      	adds	r3, #8
 800d626:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d62a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d62c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d62e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d632:	e841 2300 	strex	r3, r2, [r1]
 800d636:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1e3      	bne.n	800d606 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2220      	movs	r2, #32
 800d642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	e853 3f00 	ldrex	r3, [r3]
 800d65e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f023 0310 	bic.w	r3, r3, #16
 800d666:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	461a      	mov	r2, r3
 800d670:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d674:	61fb      	str	r3, [r7, #28]
 800d676:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d678:	69b9      	ldr	r1, [r7, #24]
 800d67a:	69fa      	ldr	r2, [r7, #28]
 800d67c:	e841 2300 	strex	r3, r2, [r1]
 800d680:	617b      	str	r3, [r7, #20]
   return(result);
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1e4      	bne.n	800d652 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2202      	movs	r2, #2
 800d68c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d68e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 f881 	bl	800d79c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d69a:	e063      	b.n	800d764 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d00e      	beq.n	800d6c6 <HAL_UART_IRQHandler+0x6c6>
 800d6a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d008      	beq.n	800d6c6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d6bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f001 f83b 	bl	800e73a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d6c4:	e051      	b.n	800d76a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d014      	beq.n	800d6fc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d6d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d105      	bne.n	800d6ea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d6de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d008      	beq.n	800d6fc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d03a      	beq.n	800d768 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	4798      	blx	r3
    }
    return;
 800d6fa:	e035      	b.n	800d768 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d704:	2b00      	cmp	r3, #0
 800d706:	d009      	beq.n	800d71c <HAL_UART_IRQHandler+0x71c>
 800d708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d70c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d710:	2b00      	cmp	r3, #0
 800d712:	d003      	beq.n	800d71c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 ffe5 	bl	800e6e4 <UART_EndTransmit_IT>
    return;
 800d71a:	e026      	b.n	800d76a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d720:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d724:	2b00      	cmp	r3, #0
 800d726:	d009      	beq.n	800d73c <HAL_UART_IRQHandler+0x73c>
 800d728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d72c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d730:	2b00      	cmp	r3, #0
 800d732:	d003      	beq.n	800d73c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f001 f814 	bl	800e762 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d73a:	e016      	b.n	800d76a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d744:	2b00      	cmp	r3, #0
 800d746:	d010      	beq.n	800d76a <HAL_UART_IRQHandler+0x76a>
 800d748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	da0c      	bge.n	800d76a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fffc 	bl	800e74e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d756:	e008      	b.n	800d76a <HAL_UART_IRQHandler+0x76a>
      return;
 800d758:	bf00      	nop
 800d75a:	e006      	b.n	800d76a <HAL_UART_IRQHandler+0x76a>
    return;
 800d75c:	bf00      	nop
 800d75e:	e004      	b.n	800d76a <HAL_UART_IRQHandler+0x76a>
      return;
 800d760:	bf00      	nop
 800d762:	e002      	b.n	800d76a <HAL_UART_IRQHandler+0x76a>
      return;
 800d764:	bf00      	nop
 800d766:	e000      	b.n	800d76a <HAL_UART_IRQHandler+0x76a>
    return;
 800d768:	bf00      	nop
  }
}
 800d76a:	37e8      	adds	r7, #232	@ 0xe8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	effffffe 	.word	0xeffffffe

0800d774 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d77c:	bf00      	nop
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d790:	bf00      	nop
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d7a8:	bf00      	nop
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr

0800d7b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7b8:	b092      	sub	sp, #72	@ 0x48
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	689a      	ldr	r2, [r3, #8]
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	431a      	orrs	r2, r3
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	695b      	ldr	r3, [r3, #20]
 800d7d2:	431a      	orrs	r2, r3
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	69db      	ldr	r3, [r3, #28]
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	4bbe      	ldr	r3, [pc, #760]	@ (800dadc <UART_SetConfig+0x328>)
 800d7e4:	4013      	ands	r3, r2
 800d7e6:	697a      	ldr	r2, [r7, #20]
 800d7e8:	6812      	ldr	r2, [r2, #0]
 800d7ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d7ec:	430b      	orrs	r3, r1
 800d7ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	68da      	ldr	r2, [r3, #12]
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	430a      	orrs	r2, r1
 800d804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	699b      	ldr	r3, [r3, #24]
 800d80a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4ab3      	ldr	r2, [pc, #716]	@ (800dae0 <UART_SetConfig+0x32c>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d004      	beq.n	800d820 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	6a1b      	ldr	r3, [r3, #32]
 800d81a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d81c:	4313      	orrs	r3, r2
 800d81e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	689a      	ldr	r2, [r3, #8]
 800d826:	4baf      	ldr	r3, [pc, #700]	@ (800dae4 <UART_SetConfig+0x330>)
 800d828:	4013      	ands	r3, r2
 800d82a:	697a      	ldr	r2, [r7, #20]
 800d82c:	6812      	ldr	r2, [r2, #0]
 800d82e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d830:	430b      	orrs	r3, r1
 800d832:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d83a:	f023 010f 	bic.w	r1, r3, #15
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	430a      	orrs	r2, r1
 800d848:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4aa6      	ldr	r2, [pc, #664]	@ (800dae8 <UART_SetConfig+0x334>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d177      	bne.n	800d944 <UART_SetConfig+0x190>
 800d854:	4ba5      	ldr	r3, [pc, #660]	@ (800daec <UART_SetConfig+0x338>)
 800d856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d858:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d85c:	2b28      	cmp	r3, #40	@ 0x28
 800d85e:	d86d      	bhi.n	800d93c <UART_SetConfig+0x188>
 800d860:	a201      	add	r2, pc, #4	@ (adr r2, 800d868 <UART_SetConfig+0xb4>)
 800d862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d866:	bf00      	nop
 800d868:	0800d90d 	.word	0x0800d90d
 800d86c:	0800d93d 	.word	0x0800d93d
 800d870:	0800d93d 	.word	0x0800d93d
 800d874:	0800d93d 	.word	0x0800d93d
 800d878:	0800d93d 	.word	0x0800d93d
 800d87c:	0800d93d 	.word	0x0800d93d
 800d880:	0800d93d 	.word	0x0800d93d
 800d884:	0800d93d 	.word	0x0800d93d
 800d888:	0800d915 	.word	0x0800d915
 800d88c:	0800d93d 	.word	0x0800d93d
 800d890:	0800d93d 	.word	0x0800d93d
 800d894:	0800d93d 	.word	0x0800d93d
 800d898:	0800d93d 	.word	0x0800d93d
 800d89c:	0800d93d 	.word	0x0800d93d
 800d8a0:	0800d93d 	.word	0x0800d93d
 800d8a4:	0800d93d 	.word	0x0800d93d
 800d8a8:	0800d91d 	.word	0x0800d91d
 800d8ac:	0800d93d 	.word	0x0800d93d
 800d8b0:	0800d93d 	.word	0x0800d93d
 800d8b4:	0800d93d 	.word	0x0800d93d
 800d8b8:	0800d93d 	.word	0x0800d93d
 800d8bc:	0800d93d 	.word	0x0800d93d
 800d8c0:	0800d93d 	.word	0x0800d93d
 800d8c4:	0800d93d 	.word	0x0800d93d
 800d8c8:	0800d925 	.word	0x0800d925
 800d8cc:	0800d93d 	.word	0x0800d93d
 800d8d0:	0800d93d 	.word	0x0800d93d
 800d8d4:	0800d93d 	.word	0x0800d93d
 800d8d8:	0800d93d 	.word	0x0800d93d
 800d8dc:	0800d93d 	.word	0x0800d93d
 800d8e0:	0800d93d 	.word	0x0800d93d
 800d8e4:	0800d93d 	.word	0x0800d93d
 800d8e8:	0800d92d 	.word	0x0800d92d
 800d8ec:	0800d93d 	.word	0x0800d93d
 800d8f0:	0800d93d 	.word	0x0800d93d
 800d8f4:	0800d93d 	.word	0x0800d93d
 800d8f8:	0800d93d 	.word	0x0800d93d
 800d8fc:	0800d93d 	.word	0x0800d93d
 800d900:	0800d93d 	.word	0x0800d93d
 800d904:	0800d93d 	.word	0x0800d93d
 800d908:	0800d935 	.word	0x0800d935
 800d90c:	2301      	movs	r3, #1
 800d90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d912:	e222      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d914:	2304      	movs	r3, #4
 800d916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d91a:	e21e      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d91c:	2308      	movs	r3, #8
 800d91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d922:	e21a      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d924:	2310      	movs	r3, #16
 800d926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d92a:	e216      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d92c:	2320      	movs	r3, #32
 800d92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d932:	e212      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d934:	2340      	movs	r3, #64	@ 0x40
 800d936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d93a:	e20e      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d93c:	2380      	movs	r3, #128	@ 0x80
 800d93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d942:	e20a      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4a69      	ldr	r2, [pc, #420]	@ (800daf0 <UART_SetConfig+0x33c>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d130      	bne.n	800d9b0 <UART_SetConfig+0x1fc>
 800d94e:	4b67      	ldr	r3, [pc, #412]	@ (800daec <UART_SetConfig+0x338>)
 800d950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d952:	f003 0307 	and.w	r3, r3, #7
 800d956:	2b05      	cmp	r3, #5
 800d958:	d826      	bhi.n	800d9a8 <UART_SetConfig+0x1f4>
 800d95a:	a201      	add	r2, pc, #4	@ (adr r2, 800d960 <UART_SetConfig+0x1ac>)
 800d95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d960:	0800d979 	.word	0x0800d979
 800d964:	0800d981 	.word	0x0800d981
 800d968:	0800d989 	.word	0x0800d989
 800d96c:	0800d991 	.word	0x0800d991
 800d970:	0800d999 	.word	0x0800d999
 800d974:	0800d9a1 	.word	0x0800d9a1
 800d978:	2300      	movs	r3, #0
 800d97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d97e:	e1ec      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d980:	2304      	movs	r3, #4
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d986:	e1e8      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d988:	2308      	movs	r3, #8
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98e:	e1e4      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d990:	2310      	movs	r3, #16
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d996:	e1e0      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d998:	2320      	movs	r3, #32
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d99e:	e1dc      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d9a0:	2340      	movs	r3, #64	@ 0x40
 800d9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a6:	e1d8      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d9a8:	2380      	movs	r3, #128	@ 0x80
 800d9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ae:	e1d4      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4a4f      	ldr	r2, [pc, #316]	@ (800daf4 <UART_SetConfig+0x340>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d130      	bne.n	800da1c <UART_SetConfig+0x268>
 800d9ba:	4b4c      	ldr	r3, [pc, #304]	@ (800daec <UART_SetConfig+0x338>)
 800d9bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9be:	f003 0307 	and.w	r3, r3, #7
 800d9c2:	2b05      	cmp	r3, #5
 800d9c4:	d826      	bhi.n	800da14 <UART_SetConfig+0x260>
 800d9c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9cc <UART_SetConfig+0x218>)
 800d9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9cc:	0800d9e5 	.word	0x0800d9e5
 800d9d0:	0800d9ed 	.word	0x0800d9ed
 800d9d4:	0800d9f5 	.word	0x0800d9f5
 800d9d8:	0800d9fd 	.word	0x0800d9fd
 800d9dc:	0800da05 	.word	0x0800da05
 800d9e0:	0800da0d 	.word	0x0800da0d
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ea:	e1b6      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d9ec:	2304      	movs	r3, #4
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9f2:	e1b2      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d9f4:	2308      	movs	r3, #8
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9fa:	e1ae      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800d9fc:	2310      	movs	r3, #16
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da02:	e1aa      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800da04:	2320      	movs	r3, #32
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0a:	e1a6      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800da0c:	2340      	movs	r3, #64	@ 0x40
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da12:	e1a2      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800da14:	2380      	movs	r3, #128	@ 0x80
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1a:	e19e      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a35      	ldr	r2, [pc, #212]	@ (800daf8 <UART_SetConfig+0x344>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d130      	bne.n	800da88 <UART_SetConfig+0x2d4>
 800da26:	4b31      	ldr	r3, [pc, #196]	@ (800daec <UART_SetConfig+0x338>)
 800da28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da2a:	f003 0307 	and.w	r3, r3, #7
 800da2e:	2b05      	cmp	r3, #5
 800da30:	d826      	bhi.n	800da80 <UART_SetConfig+0x2cc>
 800da32:	a201      	add	r2, pc, #4	@ (adr r2, 800da38 <UART_SetConfig+0x284>)
 800da34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da38:	0800da51 	.word	0x0800da51
 800da3c:	0800da59 	.word	0x0800da59
 800da40:	0800da61 	.word	0x0800da61
 800da44:	0800da69 	.word	0x0800da69
 800da48:	0800da71 	.word	0x0800da71
 800da4c:	0800da79 	.word	0x0800da79
 800da50:	2300      	movs	r3, #0
 800da52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da56:	e180      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800da58:	2304      	movs	r3, #4
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da5e:	e17c      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800da60:	2308      	movs	r3, #8
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da66:	e178      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800da68:	2310      	movs	r3, #16
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6e:	e174      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800da70:	2320      	movs	r3, #32
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da76:	e170      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800da78:	2340      	movs	r3, #64	@ 0x40
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7e:	e16c      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800da80:	2380      	movs	r3, #128	@ 0x80
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da86:	e168      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a1b      	ldr	r2, [pc, #108]	@ (800dafc <UART_SetConfig+0x348>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d142      	bne.n	800db18 <UART_SetConfig+0x364>
 800da92:	4b16      	ldr	r3, [pc, #88]	@ (800daec <UART_SetConfig+0x338>)
 800da94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da96:	f003 0307 	and.w	r3, r3, #7
 800da9a:	2b05      	cmp	r3, #5
 800da9c:	d838      	bhi.n	800db10 <UART_SetConfig+0x35c>
 800da9e:	a201      	add	r2, pc, #4	@ (adr r2, 800daa4 <UART_SetConfig+0x2f0>)
 800daa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa4:	0800dabd 	.word	0x0800dabd
 800daa8:	0800dac5 	.word	0x0800dac5
 800daac:	0800dacd 	.word	0x0800dacd
 800dab0:	0800dad5 	.word	0x0800dad5
 800dab4:	0800db01 	.word	0x0800db01
 800dab8:	0800db09 	.word	0x0800db09
 800dabc:	2300      	movs	r3, #0
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dac2:	e14a      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dac4:	2304      	movs	r3, #4
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daca:	e146      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dacc:	2308      	movs	r3, #8
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dad2:	e142      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dad4:	2310      	movs	r3, #16
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dada:	e13e      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dadc:	cfff69f3 	.word	0xcfff69f3
 800dae0:	58000c00 	.word	0x58000c00
 800dae4:	11fff4ff 	.word	0x11fff4ff
 800dae8:	40011000 	.word	0x40011000
 800daec:	58024400 	.word	0x58024400
 800daf0:	40004400 	.word	0x40004400
 800daf4:	40004800 	.word	0x40004800
 800daf8:	40004c00 	.word	0x40004c00
 800dafc:	40005000 	.word	0x40005000
 800db00:	2320      	movs	r3, #32
 800db02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db06:	e128      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800db08:	2340      	movs	r3, #64	@ 0x40
 800db0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db0e:	e124      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800db10:	2380      	movs	r3, #128	@ 0x80
 800db12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db16:	e120      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4acb      	ldr	r2, [pc, #812]	@ (800de4c <UART_SetConfig+0x698>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d176      	bne.n	800dc10 <UART_SetConfig+0x45c>
 800db22:	4bcb      	ldr	r3, [pc, #812]	@ (800de50 <UART_SetConfig+0x69c>)
 800db24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db2a:	2b28      	cmp	r3, #40	@ 0x28
 800db2c:	d86c      	bhi.n	800dc08 <UART_SetConfig+0x454>
 800db2e:	a201      	add	r2, pc, #4	@ (adr r2, 800db34 <UART_SetConfig+0x380>)
 800db30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db34:	0800dbd9 	.word	0x0800dbd9
 800db38:	0800dc09 	.word	0x0800dc09
 800db3c:	0800dc09 	.word	0x0800dc09
 800db40:	0800dc09 	.word	0x0800dc09
 800db44:	0800dc09 	.word	0x0800dc09
 800db48:	0800dc09 	.word	0x0800dc09
 800db4c:	0800dc09 	.word	0x0800dc09
 800db50:	0800dc09 	.word	0x0800dc09
 800db54:	0800dbe1 	.word	0x0800dbe1
 800db58:	0800dc09 	.word	0x0800dc09
 800db5c:	0800dc09 	.word	0x0800dc09
 800db60:	0800dc09 	.word	0x0800dc09
 800db64:	0800dc09 	.word	0x0800dc09
 800db68:	0800dc09 	.word	0x0800dc09
 800db6c:	0800dc09 	.word	0x0800dc09
 800db70:	0800dc09 	.word	0x0800dc09
 800db74:	0800dbe9 	.word	0x0800dbe9
 800db78:	0800dc09 	.word	0x0800dc09
 800db7c:	0800dc09 	.word	0x0800dc09
 800db80:	0800dc09 	.word	0x0800dc09
 800db84:	0800dc09 	.word	0x0800dc09
 800db88:	0800dc09 	.word	0x0800dc09
 800db8c:	0800dc09 	.word	0x0800dc09
 800db90:	0800dc09 	.word	0x0800dc09
 800db94:	0800dbf1 	.word	0x0800dbf1
 800db98:	0800dc09 	.word	0x0800dc09
 800db9c:	0800dc09 	.word	0x0800dc09
 800dba0:	0800dc09 	.word	0x0800dc09
 800dba4:	0800dc09 	.word	0x0800dc09
 800dba8:	0800dc09 	.word	0x0800dc09
 800dbac:	0800dc09 	.word	0x0800dc09
 800dbb0:	0800dc09 	.word	0x0800dc09
 800dbb4:	0800dbf9 	.word	0x0800dbf9
 800dbb8:	0800dc09 	.word	0x0800dc09
 800dbbc:	0800dc09 	.word	0x0800dc09
 800dbc0:	0800dc09 	.word	0x0800dc09
 800dbc4:	0800dc09 	.word	0x0800dc09
 800dbc8:	0800dc09 	.word	0x0800dc09
 800dbcc:	0800dc09 	.word	0x0800dc09
 800dbd0:	0800dc09 	.word	0x0800dc09
 800dbd4:	0800dc01 	.word	0x0800dc01
 800dbd8:	2301      	movs	r3, #1
 800dbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbde:	e0bc      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dbe0:	2304      	movs	r3, #4
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbe6:	e0b8      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dbe8:	2308      	movs	r3, #8
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbee:	e0b4      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dbf0:	2310      	movs	r3, #16
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbf6:	e0b0      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dbf8:	2320      	movs	r3, #32
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbfe:	e0ac      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dc00:	2340      	movs	r3, #64	@ 0x40
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc06:	e0a8      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dc08:	2380      	movs	r3, #128	@ 0x80
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc0e:	e0a4      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a8f      	ldr	r2, [pc, #572]	@ (800de54 <UART_SetConfig+0x6a0>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d130      	bne.n	800dc7c <UART_SetConfig+0x4c8>
 800dc1a:	4b8d      	ldr	r3, [pc, #564]	@ (800de50 <UART_SetConfig+0x69c>)
 800dc1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc1e:	f003 0307 	and.w	r3, r3, #7
 800dc22:	2b05      	cmp	r3, #5
 800dc24:	d826      	bhi.n	800dc74 <UART_SetConfig+0x4c0>
 800dc26:	a201      	add	r2, pc, #4	@ (adr r2, 800dc2c <UART_SetConfig+0x478>)
 800dc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc2c:	0800dc45 	.word	0x0800dc45
 800dc30:	0800dc4d 	.word	0x0800dc4d
 800dc34:	0800dc55 	.word	0x0800dc55
 800dc38:	0800dc5d 	.word	0x0800dc5d
 800dc3c:	0800dc65 	.word	0x0800dc65
 800dc40:	0800dc6d 	.word	0x0800dc6d
 800dc44:	2300      	movs	r3, #0
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc4a:	e086      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dc4c:	2304      	movs	r3, #4
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc52:	e082      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dc54:	2308      	movs	r3, #8
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc5a:	e07e      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dc5c:	2310      	movs	r3, #16
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc62:	e07a      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dc64:	2320      	movs	r3, #32
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc6a:	e076      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dc6c:	2340      	movs	r3, #64	@ 0x40
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc72:	e072      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dc74:	2380      	movs	r3, #128	@ 0x80
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc7a:	e06e      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a75      	ldr	r2, [pc, #468]	@ (800de58 <UART_SetConfig+0x6a4>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d130      	bne.n	800dce8 <UART_SetConfig+0x534>
 800dc86:	4b72      	ldr	r3, [pc, #456]	@ (800de50 <UART_SetConfig+0x69c>)
 800dc88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc8a:	f003 0307 	and.w	r3, r3, #7
 800dc8e:	2b05      	cmp	r3, #5
 800dc90:	d826      	bhi.n	800dce0 <UART_SetConfig+0x52c>
 800dc92:	a201      	add	r2, pc, #4	@ (adr r2, 800dc98 <UART_SetConfig+0x4e4>)
 800dc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc98:	0800dcb1 	.word	0x0800dcb1
 800dc9c:	0800dcb9 	.word	0x0800dcb9
 800dca0:	0800dcc1 	.word	0x0800dcc1
 800dca4:	0800dcc9 	.word	0x0800dcc9
 800dca8:	0800dcd1 	.word	0x0800dcd1
 800dcac:	0800dcd9 	.word	0x0800dcd9
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcb6:	e050      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dcb8:	2304      	movs	r3, #4
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcbe:	e04c      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dcc0:	2308      	movs	r3, #8
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc6:	e048      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dcc8:	2310      	movs	r3, #16
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcce:	e044      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dcd0:	2320      	movs	r3, #32
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd6:	e040      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dcd8:	2340      	movs	r3, #64	@ 0x40
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcde:	e03c      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dce0:	2380      	movs	r3, #128	@ 0x80
 800dce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dce6:	e038      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a5b      	ldr	r2, [pc, #364]	@ (800de5c <UART_SetConfig+0x6a8>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d130      	bne.n	800dd54 <UART_SetConfig+0x5a0>
 800dcf2:	4b57      	ldr	r3, [pc, #348]	@ (800de50 <UART_SetConfig+0x69c>)
 800dcf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcf6:	f003 0307 	and.w	r3, r3, #7
 800dcfa:	2b05      	cmp	r3, #5
 800dcfc:	d826      	bhi.n	800dd4c <UART_SetConfig+0x598>
 800dcfe:	a201      	add	r2, pc, #4	@ (adr r2, 800dd04 <UART_SetConfig+0x550>)
 800dd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd04:	0800dd1d 	.word	0x0800dd1d
 800dd08:	0800dd25 	.word	0x0800dd25
 800dd0c:	0800dd2d 	.word	0x0800dd2d
 800dd10:	0800dd35 	.word	0x0800dd35
 800dd14:	0800dd3d 	.word	0x0800dd3d
 800dd18:	0800dd45 	.word	0x0800dd45
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd22:	e01a      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dd24:	2304      	movs	r3, #4
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd2a:	e016      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dd2c:	2308      	movs	r3, #8
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd32:	e012      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dd34:	2310      	movs	r3, #16
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd3a:	e00e      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dd3c:	2320      	movs	r3, #32
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd42:	e00a      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dd44:	2340      	movs	r3, #64	@ 0x40
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd4a:	e006      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dd4c:	2380      	movs	r3, #128	@ 0x80
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd52:	e002      	b.n	800dd5a <UART_SetConfig+0x5a6>
 800dd54:	2380      	movs	r3, #128	@ 0x80
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a3f      	ldr	r2, [pc, #252]	@ (800de5c <UART_SetConfig+0x6a8>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	f040 80f8 	bne.w	800df56 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dd6a:	2b20      	cmp	r3, #32
 800dd6c:	dc46      	bgt.n	800ddfc <UART_SetConfig+0x648>
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	f2c0 8082 	blt.w	800de78 <UART_SetConfig+0x6c4>
 800dd74:	3b02      	subs	r3, #2
 800dd76:	2b1e      	cmp	r3, #30
 800dd78:	d87e      	bhi.n	800de78 <UART_SetConfig+0x6c4>
 800dd7a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd80 <UART_SetConfig+0x5cc>)
 800dd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd80:	0800de03 	.word	0x0800de03
 800dd84:	0800de79 	.word	0x0800de79
 800dd88:	0800de0b 	.word	0x0800de0b
 800dd8c:	0800de79 	.word	0x0800de79
 800dd90:	0800de79 	.word	0x0800de79
 800dd94:	0800de79 	.word	0x0800de79
 800dd98:	0800de1b 	.word	0x0800de1b
 800dd9c:	0800de79 	.word	0x0800de79
 800dda0:	0800de79 	.word	0x0800de79
 800dda4:	0800de79 	.word	0x0800de79
 800dda8:	0800de79 	.word	0x0800de79
 800ddac:	0800de79 	.word	0x0800de79
 800ddb0:	0800de79 	.word	0x0800de79
 800ddb4:	0800de79 	.word	0x0800de79
 800ddb8:	0800de2b 	.word	0x0800de2b
 800ddbc:	0800de79 	.word	0x0800de79
 800ddc0:	0800de79 	.word	0x0800de79
 800ddc4:	0800de79 	.word	0x0800de79
 800ddc8:	0800de79 	.word	0x0800de79
 800ddcc:	0800de79 	.word	0x0800de79
 800ddd0:	0800de79 	.word	0x0800de79
 800ddd4:	0800de79 	.word	0x0800de79
 800ddd8:	0800de79 	.word	0x0800de79
 800dddc:	0800de79 	.word	0x0800de79
 800dde0:	0800de79 	.word	0x0800de79
 800dde4:	0800de79 	.word	0x0800de79
 800dde8:	0800de79 	.word	0x0800de79
 800ddec:	0800de79 	.word	0x0800de79
 800ddf0:	0800de79 	.word	0x0800de79
 800ddf4:	0800de79 	.word	0x0800de79
 800ddf8:	0800de6b 	.word	0x0800de6b
 800ddfc:	2b40      	cmp	r3, #64	@ 0x40
 800ddfe:	d037      	beq.n	800de70 <UART_SetConfig+0x6bc>
 800de00:	e03a      	b.n	800de78 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de02:	f7fd fefd 	bl	800bc00 <HAL_RCCEx_GetD3PCLK1Freq>
 800de06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de08:	e03c      	b.n	800de84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fd ff0c 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de18:	e034      	b.n	800de84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de1a:	f107 0318 	add.w	r3, r7, #24
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fe f858 	bl	800bed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de28:	e02c      	b.n	800de84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de2a:	4b09      	ldr	r3, [pc, #36]	@ (800de50 <UART_SetConfig+0x69c>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f003 0320 	and.w	r3, r3, #32
 800de32:	2b00      	cmp	r3, #0
 800de34:	d016      	beq.n	800de64 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de36:	4b06      	ldr	r3, [pc, #24]	@ (800de50 <UART_SetConfig+0x69c>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	08db      	lsrs	r3, r3, #3
 800de3c:	f003 0303 	and.w	r3, r3, #3
 800de40:	4a07      	ldr	r2, [pc, #28]	@ (800de60 <UART_SetConfig+0x6ac>)
 800de42:	fa22 f303 	lsr.w	r3, r2, r3
 800de46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de48:	e01c      	b.n	800de84 <UART_SetConfig+0x6d0>
 800de4a:	bf00      	nop
 800de4c:	40011400 	.word	0x40011400
 800de50:	58024400 	.word	0x58024400
 800de54:	40007800 	.word	0x40007800
 800de58:	40007c00 	.word	0x40007c00
 800de5c:	58000c00 	.word	0x58000c00
 800de60:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800de64:	4b9d      	ldr	r3, [pc, #628]	@ (800e0dc <UART_SetConfig+0x928>)
 800de66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de68:	e00c      	b.n	800de84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de6a:	4b9d      	ldr	r3, [pc, #628]	@ (800e0e0 <UART_SetConfig+0x92c>)
 800de6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de6e:	e009      	b.n	800de84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de76:	e005      	b.n	800de84 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800de78:	2300      	movs	r3, #0
 800de7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800de7c:	2301      	movs	r3, #1
 800de7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800de82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de86:	2b00      	cmp	r3, #0
 800de88:	f000 81de 	beq.w	800e248 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de90:	4a94      	ldr	r2, [pc, #592]	@ (800e0e4 <UART_SetConfig+0x930>)
 800de92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de96:	461a      	mov	r2, r3
 800de98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800de9e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	685a      	ldr	r2, [r3, #4]
 800dea4:	4613      	mov	r3, r2
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	4413      	add	r3, r2
 800deaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deac:	429a      	cmp	r2, r3
 800deae:	d305      	bcc.n	800debc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800deb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800deb8:	429a      	cmp	r2, r3
 800deba:	d903      	bls.n	800dec4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800debc:	2301      	movs	r3, #1
 800debe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dec2:	e1c1      	b.n	800e248 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dec6:	2200      	movs	r2, #0
 800dec8:	60bb      	str	r3, [r7, #8]
 800deca:	60fa      	str	r2, [r7, #12]
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded0:	4a84      	ldr	r2, [pc, #528]	@ (800e0e4 <UART_SetConfig+0x930>)
 800ded2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ded6:	b29b      	uxth	r3, r3
 800ded8:	2200      	movs	r2, #0
 800deda:	603b      	str	r3, [r7, #0]
 800dedc:	607a      	str	r2, [r7, #4]
 800dede:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dee6:	f7f2 fa53 	bl	8000390 <__aeabi_uldivmod>
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4610      	mov	r0, r2
 800def0:	4619      	mov	r1, r3
 800def2:	f04f 0200 	mov.w	r2, #0
 800def6:	f04f 0300 	mov.w	r3, #0
 800defa:	020b      	lsls	r3, r1, #8
 800defc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df00:	0202      	lsls	r2, r0, #8
 800df02:	6979      	ldr	r1, [r7, #20]
 800df04:	6849      	ldr	r1, [r1, #4]
 800df06:	0849      	lsrs	r1, r1, #1
 800df08:	2000      	movs	r0, #0
 800df0a:	460c      	mov	r4, r1
 800df0c:	4605      	mov	r5, r0
 800df0e:	eb12 0804 	adds.w	r8, r2, r4
 800df12:	eb43 0905 	adc.w	r9, r3, r5
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	685b      	ldr	r3, [r3, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	469a      	mov	sl, r3
 800df1e:	4693      	mov	fp, r2
 800df20:	4652      	mov	r2, sl
 800df22:	465b      	mov	r3, fp
 800df24:	4640      	mov	r0, r8
 800df26:	4649      	mov	r1, r9
 800df28:	f7f2 fa32 	bl	8000390 <__aeabi_uldivmod>
 800df2c:	4602      	mov	r2, r0
 800df2e:	460b      	mov	r3, r1
 800df30:	4613      	mov	r3, r2
 800df32:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800df3a:	d308      	bcc.n	800df4e <UART_SetConfig+0x79a>
 800df3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df42:	d204      	bcs.n	800df4e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df4a:	60da      	str	r2, [r3, #12]
 800df4c:	e17c      	b.n	800e248 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800df54:	e178      	b.n	800e248 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	69db      	ldr	r3, [r3, #28]
 800df5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df5e:	f040 80c5 	bne.w	800e0ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800df62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800df66:	2b20      	cmp	r3, #32
 800df68:	dc48      	bgt.n	800dffc <UART_SetConfig+0x848>
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	db7b      	blt.n	800e066 <UART_SetConfig+0x8b2>
 800df6e:	2b20      	cmp	r3, #32
 800df70:	d879      	bhi.n	800e066 <UART_SetConfig+0x8b2>
 800df72:	a201      	add	r2, pc, #4	@ (adr r2, 800df78 <UART_SetConfig+0x7c4>)
 800df74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df78:	0800e003 	.word	0x0800e003
 800df7c:	0800e00b 	.word	0x0800e00b
 800df80:	0800e067 	.word	0x0800e067
 800df84:	0800e067 	.word	0x0800e067
 800df88:	0800e013 	.word	0x0800e013
 800df8c:	0800e067 	.word	0x0800e067
 800df90:	0800e067 	.word	0x0800e067
 800df94:	0800e067 	.word	0x0800e067
 800df98:	0800e023 	.word	0x0800e023
 800df9c:	0800e067 	.word	0x0800e067
 800dfa0:	0800e067 	.word	0x0800e067
 800dfa4:	0800e067 	.word	0x0800e067
 800dfa8:	0800e067 	.word	0x0800e067
 800dfac:	0800e067 	.word	0x0800e067
 800dfb0:	0800e067 	.word	0x0800e067
 800dfb4:	0800e067 	.word	0x0800e067
 800dfb8:	0800e033 	.word	0x0800e033
 800dfbc:	0800e067 	.word	0x0800e067
 800dfc0:	0800e067 	.word	0x0800e067
 800dfc4:	0800e067 	.word	0x0800e067
 800dfc8:	0800e067 	.word	0x0800e067
 800dfcc:	0800e067 	.word	0x0800e067
 800dfd0:	0800e067 	.word	0x0800e067
 800dfd4:	0800e067 	.word	0x0800e067
 800dfd8:	0800e067 	.word	0x0800e067
 800dfdc:	0800e067 	.word	0x0800e067
 800dfe0:	0800e067 	.word	0x0800e067
 800dfe4:	0800e067 	.word	0x0800e067
 800dfe8:	0800e067 	.word	0x0800e067
 800dfec:	0800e067 	.word	0x0800e067
 800dff0:	0800e067 	.word	0x0800e067
 800dff4:	0800e067 	.word	0x0800e067
 800dff8:	0800e059 	.word	0x0800e059
 800dffc:	2b40      	cmp	r3, #64	@ 0x40
 800dffe:	d02e      	beq.n	800e05e <UART_SetConfig+0x8aa>
 800e000:	e031      	b.n	800e066 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e002:	f7fb fe47 	bl	8009c94 <HAL_RCC_GetPCLK1Freq>
 800e006:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e008:	e033      	b.n	800e072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e00a:	f7fb fe59 	bl	8009cc0 <HAL_RCC_GetPCLK2Freq>
 800e00e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e010:	e02f      	b.n	800e072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e016:	4618      	mov	r0, r3
 800e018:	f7fd fe08 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e020:	e027      	b.n	800e072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e022:	f107 0318 	add.w	r3, r7, #24
 800e026:	4618      	mov	r0, r3
 800e028:	f7fd ff54 	bl	800bed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e030:	e01f      	b.n	800e072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e032:	4b2d      	ldr	r3, [pc, #180]	@ (800e0e8 <UART_SetConfig+0x934>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f003 0320 	and.w	r3, r3, #32
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d009      	beq.n	800e052 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e03e:	4b2a      	ldr	r3, [pc, #168]	@ (800e0e8 <UART_SetConfig+0x934>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	08db      	lsrs	r3, r3, #3
 800e044:	f003 0303 	and.w	r3, r3, #3
 800e048:	4a24      	ldr	r2, [pc, #144]	@ (800e0dc <UART_SetConfig+0x928>)
 800e04a:	fa22 f303 	lsr.w	r3, r2, r3
 800e04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e050:	e00f      	b.n	800e072 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e052:	4b22      	ldr	r3, [pc, #136]	@ (800e0dc <UART_SetConfig+0x928>)
 800e054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e056:	e00c      	b.n	800e072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e058:	4b21      	ldr	r3, [pc, #132]	@ (800e0e0 <UART_SetConfig+0x92c>)
 800e05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e05c:	e009      	b.n	800e072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e05e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e064:	e005      	b.n	800e072 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e066:	2300      	movs	r3, #0
 800e068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e06a:	2301      	movs	r3, #1
 800e06c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e074:	2b00      	cmp	r3, #0
 800e076:	f000 80e7 	beq.w	800e248 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e07e:	4a19      	ldr	r2, [pc, #100]	@ (800e0e4 <UART_SetConfig+0x930>)
 800e080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e084:	461a      	mov	r2, r3
 800e086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e088:	fbb3 f3f2 	udiv	r3, r3, r2
 800e08c:	005a      	lsls	r2, r3, #1
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	085b      	lsrs	r3, r3, #1
 800e094:	441a      	add	r2, r3
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e09e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a2:	2b0f      	cmp	r3, #15
 800e0a4:	d916      	bls.n	800e0d4 <UART_SetConfig+0x920>
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0ac:	d212      	bcs.n	800e0d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	f023 030f 	bic.w	r3, r3, #15
 800e0b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ba:	085b      	lsrs	r3, r3, #1
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	f003 0307 	and.w	r3, r3, #7
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e0d0:	60da      	str	r2, [r3, #12]
 800e0d2:	e0b9      	b.n	800e248 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e0da:	e0b5      	b.n	800e248 <UART_SetConfig+0xa94>
 800e0dc:	03d09000 	.word	0x03d09000
 800e0e0:	003d0900 	.word	0x003d0900
 800e0e4:	08014a38 	.word	0x08014a38
 800e0e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e0ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e0f0:	2b20      	cmp	r3, #32
 800e0f2:	dc49      	bgt.n	800e188 <UART_SetConfig+0x9d4>
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	db7c      	blt.n	800e1f2 <UART_SetConfig+0xa3e>
 800e0f8:	2b20      	cmp	r3, #32
 800e0fa:	d87a      	bhi.n	800e1f2 <UART_SetConfig+0xa3e>
 800e0fc:	a201      	add	r2, pc, #4	@ (adr r2, 800e104 <UART_SetConfig+0x950>)
 800e0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e102:	bf00      	nop
 800e104:	0800e18f 	.word	0x0800e18f
 800e108:	0800e197 	.word	0x0800e197
 800e10c:	0800e1f3 	.word	0x0800e1f3
 800e110:	0800e1f3 	.word	0x0800e1f3
 800e114:	0800e19f 	.word	0x0800e19f
 800e118:	0800e1f3 	.word	0x0800e1f3
 800e11c:	0800e1f3 	.word	0x0800e1f3
 800e120:	0800e1f3 	.word	0x0800e1f3
 800e124:	0800e1af 	.word	0x0800e1af
 800e128:	0800e1f3 	.word	0x0800e1f3
 800e12c:	0800e1f3 	.word	0x0800e1f3
 800e130:	0800e1f3 	.word	0x0800e1f3
 800e134:	0800e1f3 	.word	0x0800e1f3
 800e138:	0800e1f3 	.word	0x0800e1f3
 800e13c:	0800e1f3 	.word	0x0800e1f3
 800e140:	0800e1f3 	.word	0x0800e1f3
 800e144:	0800e1bf 	.word	0x0800e1bf
 800e148:	0800e1f3 	.word	0x0800e1f3
 800e14c:	0800e1f3 	.word	0x0800e1f3
 800e150:	0800e1f3 	.word	0x0800e1f3
 800e154:	0800e1f3 	.word	0x0800e1f3
 800e158:	0800e1f3 	.word	0x0800e1f3
 800e15c:	0800e1f3 	.word	0x0800e1f3
 800e160:	0800e1f3 	.word	0x0800e1f3
 800e164:	0800e1f3 	.word	0x0800e1f3
 800e168:	0800e1f3 	.word	0x0800e1f3
 800e16c:	0800e1f3 	.word	0x0800e1f3
 800e170:	0800e1f3 	.word	0x0800e1f3
 800e174:	0800e1f3 	.word	0x0800e1f3
 800e178:	0800e1f3 	.word	0x0800e1f3
 800e17c:	0800e1f3 	.word	0x0800e1f3
 800e180:	0800e1f3 	.word	0x0800e1f3
 800e184:	0800e1e5 	.word	0x0800e1e5
 800e188:	2b40      	cmp	r3, #64	@ 0x40
 800e18a:	d02e      	beq.n	800e1ea <UART_SetConfig+0xa36>
 800e18c:	e031      	b.n	800e1f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e18e:	f7fb fd81 	bl	8009c94 <HAL_RCC_GetPCLK1Freq>
 800e192:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e194:	e033      	b.n	800e1fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e196:	f7fb fd93 	bl	8009cc0 <HAL_RCC_GetPCLK2Freq>
 800e19a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e19c:	e02f      	b.n	800e1fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e19e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fd fd42 	bl	800bc2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1ac:	e027      	b.n	800e1fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1ae:	f107 0318 	add.w	r3, r7, #24
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fd fe8e 	bl	800bed4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1bc:	e01f      	b.n	800e1fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1be:	4b2d      	ldr	r3, [pc, #180]	@ (800e274 <UART_SetConfig+0xac0>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f003 0320 	and.w	r3, r3, #32
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d009      	beq.n	800e1de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1ca:	4b2a      	ldr	r3, [pc, #168]	@ (800e274 <UART_SetConfig+0xac0>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	08db      	lsrs	r3, r3, #3
 800e1d0:	f003 0303 	and.w	r3, r3, #3
 800e1d4:	4a28      	ldr	r2, [pc, #160]	@ (800e278 <UART_SetConfig+0xac4>)
 800e1d6:	fa22 f303 	lsr.w	r3, r2, r3
 800e1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1dc:	e00f      	b.n	800e1fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e1de:	4b26      	ldr	r3, [pc, #152]	@ (800e278 <UART_SetConfig+0xac4>)
 800e1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1e2:	e00c      	b.n	800e1fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1e4:	4b25      	ldr	r3, [pc, #148]	@ (800e27c <UART_SetConfig+0xac8>)
 800e1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1e8:	e009      	b.n	800e1fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1f0:	e005      	b.n	800e1fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e1fc:	bf00      	nop
    }

    if (pclk != 0U)
 800e1fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e200:	2b00      	cmp	r3, #0
 800e202:	d021      	beq.n	800e248 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e208:	4a1d      	ldr	r2, [pc, #116]	@ (800e280 <UART_SetConfig+0xacc>)
 800e20a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e20e:	461a      	mov	r2, r3
 800e210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e212:	fbb3 f2f2 	udiv	r2, r3, r2
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	085b      	lsrs	r3, r3, #1
 800e21c:	441a      	add	r2, r3
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	fbb2 f3f3 	udiv	r3, r2, r3
 800e226:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e22a:	2b0f      	cmp	r3, #15
 800e22c:	d909      	bls.n	800e242 <UART_SetConfig+0xa8e>
 800e22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e234:	d205      	bcs.n	800e242 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e238:	b29a      	uxth	r2, r3
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	60da      	str	r2, [r3, #12]
 800e240:	e002      	b.n	800e248 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e242:	2301      	movs	r3, #1
 800e244:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	2201      	movs	r2, #1
 800e24c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	2201      	movs	r2, #1
 800e254:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	2200      	movs	r2, #0
 800e25c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	2200      	movs	r2, #0
 800e262:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e264:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3748      	adds	r7, #72	@ 0x48
 800e26c:	46bd      	mov	sp, r7
 800e26e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e272:	bf00      	nop
 800e274:	58024400 	.word	0x58024400
 800e278:	03d09000 	.word	0x03d09000
 800e27c:	003d0900 	.word	0x003d0900
 800e280:	08014a38 	.word	0x08014a38

0800e284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e284:	b480      	push	{r7}
 800e286:	b083      	sub	sp, #12
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e290:	f003 0301 	and.w	r3, r3, #1
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00a      	beq.n	800e2ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	430a      	orrs	r2, r1
 800e2ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2b2:	f003 0302 	and.w	r3, r3, #2
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00a      	beq.n	800e2d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	430a      	orrs	r2, r1
 800e2ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2d4:	f003 0304 	and.w	r3, r3, #4
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00a      	beq.n	800e2f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	430a      	orrs	r2, r1
 800e2f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2f6:	f003 0308 	and.w	r3, r3, #8
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00a      	beq.n	800e314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	430a      	orrs	r2, r1
 800e312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e318:	f003 0310 	and.w	r3, r3, #16
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00a      	beq.n	800e336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689b      	ldr	r3, [r3, #8]
 800e326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	430a      	orrs	r2, r1
 800e334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e33a:	f003 0320 	and.w	r3, r3, #32
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00a      	beq.n	800e358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	689b      	ldr	r3, [r3, #8]
 800e348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	430a      	orrs	r2, r1
 800e356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e35c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e360:	2b00      	cmp	r3, #0
 800e362:	d01a      	beq.n	800e39a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	430a      	orrs	r2, r1
 800e378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e37e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e382:	d10a      	bne.n	800e39a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	430a      	orrs	r2, r1
 800e398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e39e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00a      	beq.n	800e3bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	430a      	orrs	r2, r1
 800e3ba:	605a      	str	r2, [r3, #4]
  }
}
 800e3bc:	bf00      	nop
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b098      	sub	sp, #96	@ 0x60
 800e3cc:	af02      	add	r7, sp, #8
 800e3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e3d8:	f7f4 fd78 	bl	8002ecc <HAL_GetTick>
 800e3dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f003 0308 	and.w	r3, r3, #8
 800e3e8:	2b08      	cmp	r3, #8
 800e3ea:	d12f      	bne.n	800e44c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f88e 	bl	800e51c <UART_WaitOnFlagUntilTimeout>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d022      	beq.n	800e44c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e40e:	e853 3f00 	ldrex	r3, [r3]
 800e412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e41a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	461a      	mov	r2, r3
 800e422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e424:	647b      	str	r3, [r7, #68]	@ 0x44
 800e426:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e42a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e42c:	e841 2300 	strex	r3, r2, [r1]
 800e430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1e6      	bne.n	800e406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2220      	movs	r2, #32
 800e43c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e448:	2303      	movs	r3, #3
 800e44a:	e063      	b.n	800e514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f003 0304 	and.w	r3, r3, #4
 800e456:	2b04      	cmp	r3, #4
 800e458:	d149      	bne.n	800e4ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e45a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e462:	2200      	movs	r2, #0
 800e464:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 f857 	bl	800e51c <UART_WaitOnFlagUntilTimeout>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d03c      	beq.n	800e4ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47c:	e853 3f00 	ldrex	r3, [r3]
 800e480:	623b      	str	r3, [r7, #32]
   return(result);
 800e482:	6a3b      	ldr	r3, [r7, #32]
 800e484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	461a      	mov	r2, r3
 800e490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e492:	633b      	str	r3, [r7, #48]	@ 0x30
 800e494:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e49a:	e841 2300 	strex	r3, r2, [r1]
 800e49e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d1e6      	bne.n	800e474 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	3308      	adds	r3, #8
 800e4ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	e853 3f00 	ldrex	r3, [r3]
 800e4b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f023 0301 	bic.w	r3, r3, #1
 800e4bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	3308      	adds	r3, #8
 800e4c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e4c6:	61fa      	str	r2, [r7, #28]
 800e4c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ca:	69b9      	ldr	r1, [r7, #24]
 800e4cc:	69fa      	ldr	r2, [r7, #28]
 800e4ce:	e841 2300 	strex	r3, r2, [r1]
 800e4d2:	617b      	str	r3, [r7, #20]
   return(result);
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1e5      	bne.n	800e4a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2220      	movs	r2, #32
 800e4de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	e012      	b.n	800e514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2220      	movs	r2, #32
 800e4f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2220      	movs	r2, #32
 800e4fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2200      	movs	r2, #0
 800e50e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e512:	2300      	movs	r3, #0
}
 800e514:	4618      	mov	r0, r3
 800e516:	3758      	adds	r7, #88	@ 0x58
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	603b      	str	r3, [r7, #0]
 800e528:	4613      	mov	r3, r2
 800e52a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e52c:	e049      	b.n	800e5c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e534:	d045      	beq.n	800e5c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e536:	f7f4 fcc9 	bl	8002ecc <HAL_GetTick>
 800e53a:	4602      	mov	r2, r0
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	1ad3      	subs	r3, r2, r3
 800e540:	69ba      	ldr	r2, [r7, #24]
 800e542:	429a      	cmp	r2, r3
 800e544:	d302      	bcc.n	800e54c <UART_WaitOnFlagUntilTimeout+0x30>
 800e546:	69bb      	ldr	r3, [r7, #24]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d101      	bne.n	800e550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e54c:	2303      	movs	r3, #3
 800e54e:	e048      	b.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f003 0304 	and.w	r3, r3, #4
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d031      	beq.n	800e5c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	69db      	ldr	r3, [r3, #28]
 800e564:	f003 0308 	and.w	r3, r3, #8
 800e568:	2b08      	cmp	r3, #8
 800e56a:	d110      	bne.n	800e58e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2208      	movs	r2, #8
 800e572:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e574:	68f8      	ldr	r0, [r7, #12]
 800e576:	f000 f839 	bl	800e5ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2208      	movs	r2, #8
 800e57e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2200      	movs	r2, #0
 800e586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	e029      	b.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	69db      	ldr	r3, [r3, #28]
 800e594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e598:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e59c:	d111      	bne.n	800e5c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e5a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f000 f81f 	bl	800e5ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2220      	movs	r2, #32
 800e5b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e5be:	2303      	movs	r3, #3
 800e5c0:	e00f      	b.n	800e5e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	69da      	ldr	r2, [r3, #28]
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	bf0c      	ite	eq
 800e5d2:	2301      	moveq	r3, #1
 800e5d4:	2300      	movne	r3, #0
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	461a      	mov	r2, r3
 800e5da:	79fb      	ldrb	r3, [r7, #7]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d0a6      	beq.n	800e52e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e5e0:	2300      	movs	r3, #0
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
	...

0800e5ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b095      	sub	sp, #84	@ 0x54
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5fc:	e853 3f00 	ldrex	r3, [r3]
 800e600:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	461a      	mov	r2, r3
 800e610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e612:	643b      	str	r3, [r7, #64]	@ 0x40
 800e614:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e61a:	e841 2300 	strex	r3, r2, [r1]
 800e61e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e622:	2b00      	cmp	r3, #0
 800e624:	d1e6      	bne.n	800e5f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	3308      	adds	r3, #8
 800e62c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62e:	6a3b      	ldr	r3, [r7, #32]
 800e630:	e853 3f00 	ldrex	r3, [r3]
 800e634:	61fb      	str	r3, [r7, #28]
   return(result);
 800e636:	69fa      	ldr	r2, [r7, #28]
 800e638:	4b1e      	ldr	r3, [pc, #120]	@ (800e6b4 <UART_EndRxTransfer+0xc8>)
 800e63a:	4013      	ands	r3, r2
 800e63c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3308      	adds	r3, #8
 800e644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e648:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e64c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e64e:	e841 2300 	strex	r3, r2, [r1]
 800e652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1e5      	bne.n	800e626 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d118      	bne.n	800e694 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	e853 3f00 	ldrex	r3, [r3]
 800e66e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	f023 0310 	bic.w	r3, r3, #16
 800e676:	647b      	str	r3, [r7, #68]	@ 0x44
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	461a      	mov	r2, r3
 800e67e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e680:	61bb      	str	r3, [r7, #24]
 800e682:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e684:	6979      	ldr	r1, [r7, #20]
 800e686:	69ba      	ldr	r2, [r7, #24]
 800e688:	e841 2300 	strex	r3, r2, [r1]
 800e68c:	613b      	str	r3, [r7, #16]
   return(result);
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1e6      	bne.n	800e662 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2220      	movs	r2, #32
 800e698:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e6a8:	bf00      	nop
 800e6aa:	3754      	adds	r7, #84	@ 0x54
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr
 800e6b4:	effffffe 	.word	0xeffffffe

0800e6b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6d6:	68f8      	ldr	r0, [r7, #12]
 800e6d8:	f7ff f856 	bl	800d788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6dc:	bf00      	nop
 800e6de:	3710      	adds	r7, #16
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b088      	sub	sp, #32
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	e853 3f00 	ldrex	r3, [r3]
 800e6f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e700:	61fb      	str	r3, [r7, #28]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	461a      	mov	r2, r3
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	61bb      	str	r3, [r7, #24]
 800e70c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e70e:	6979      	ldr	r1, [r7, #20]
 800e710:	69ba      	ldr	r2, [r7, #24]
 800e712:	e841 2300 	strex	r3, r2, [r1]
 800e716:	613b      	str	r3, [r7, #16]
   return(result);
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d1e6      	bne.n	800e6ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2220      	movs	r2, #32
 800e722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2200      	movs	r2, #0
 800e72a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f7ff f821 	bl	800d774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e732:	bf00      	nop
 800e734:	3720      	adds	r7, #32
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}

0800e73a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e73a:	b480      	push	{r7}
 800e73c:	b083      	sub	sp, #12
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e742:	bf00      	nop
 800e744:	370c      	adds	r7, #12
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr

0800e74e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e74e:	b480      	push	{r7}
 800e750:	b083      	sub	sp, #12
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e756:	bf00      	nop
 800e758:	370c      	adds	r7, #12
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr

0800e762 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e762:	b480      	push	{r7}
 800e764:	b083      	sub	sp, #12
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e76a:	bf00      	nop
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e776:	b480      	push	{r7}
 800e778:	b085      	sub	sp, #20
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e784:	2b01      	cmp	r3, #1
 800e786:	d101      	bne.n	800e78c <HAL_UARTEx_DisableFifoMode+0x16>
 800e788:	2302      	movs	r3, #2
 800e78a:	e027      	b.n	800e7dc <HAL_UARTEx_DisableFifoMode+0x66>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2201      	movs	r2, #1
 800e790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2224      	movs	r2, #36	@ 0x24
 800e798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f022 0201 	bic.w	r2, r2, #1
 800e7b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e7ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	68fa      	ldr	r2, [r7, #12]
 800e7c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2220      	movs	r2, #32
 800e7ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e7da:	2300      	movs	r3, #0
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3714      	adds	r7, #20
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d101      	bne.n	800e800 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e7fc:	2302      	movs	r3, #2
 800e7fe:	e02d      	b.n	800e85c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2224      	movs	r2, #36	@ 0x24
 800e80c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f022 0201 	bic.w	r2, r2, #1
 800e826:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	683a      	ldr	r2, [r7, #0]
 800e838:	430a      	orrs	r2, r1
 800e83a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 f84f 	bl	800e8e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	68fa      	ldr	r2, [r7, #12]
 800e848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2220      	movs	r2, #32
 800e84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e85a:	2300      	movs	r3, #0
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e874:	2b01      	cmp	r3, #1
 800e876:	d101      	bne.n	800e87c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e878:	2302      	movs	r3, #2
 800e87a:	e02d      	b.n	800e8d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2201      	movs	r2, #1
 800e880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2224      	movs	r2, #36	@ 0x24
 800e888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f022 0201 	bic.w	r2, r2, #1
 800e8a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	683a      	ldr	r2, [r7, #0]
 800e8b4:	430a      	orrs	r2, r1
 800e8b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f000 f811 	bl	800e8e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2220      	movs	r2, #32
 800e8ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8d6:	2300      	movs	r3, #0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d108      	bne.n	800e902 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e900:	e031      	b.n	800e966 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e902:	2310      	movs	r3, #16
 800e904:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e906:	2310      	movs	r3, #16
 800e908:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	0e5b      	lsrs	r3, r3, #25
 800e912:	b2db      	uxtb	r3, r3
 800e914:	f003 0307 	and.w	r3, r3, #7
 800e918:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	0f5b      	lsrs	r3, r3, #29
 800e922:	b2db      	uxtb	r3, r3
 800e924:	f003 0307 	and.w	r3, r3, #7
 800e928:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e92a:	7bbb      	ldrb	r3, [r7, #14]
 800e92c:	7b3a      	ldrb	r2, [r7, #12]
 800e92e:	4911      	ldr	r1, [pc, #68]	@ (800e974 <UARTEx_SetNbDataToProcess+0x94>)
 800e930:	5c8a      	ldrb	r2, [r1, r2]
 800e932:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e936:	7b3a      	ldrb	r2, [r7, #12]
 800e938:	490f      	ldr	r1, [pc, #60]	@ (800e978 <UARTEx_SetNbDataToProcess+0x98>)
 800e93a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e93c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e940:	b29a      	uxth	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e948:	7bfb      	ldrb	r3, [r7, #15]
 800e94a:	7b7a      	ldrb	r2, [r7, #13]
 800e94c:	4909      	ldr	r1, [pc, #36]	@ (800e974 <UARTEx_SetNbDataToProcess+0x94>)
 800e94e:	5c8a      	ldrb	r2, [r1, r2]
 800e950:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e954:	7b7a      	ldrb	r2, [r7, #13]
 800e956:	4908      	ldr	r1, [pc, #32]	@ (800e978 <UARTEx_SetNbDataToProcess+0x98>)
 800e958:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e95a:	fb93 f3f2 	sdiv	r3, r3, r2
 800e95e:	b29a      	uxth	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e966:	bf00      	nop
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	08014a50 	.word	0x08014a50
 800e978:	08014a58 	.word	0x08014a58

0800e97c <__sprint_r>:
 800e97c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e980:	6893      	ldr	r3, [r2, #8]
 800e982:	4680      	mov	r8, r0
 800e984:	460e      	mov	r6, r1
 800e986:	4614      	mov	r4, r2
 800e988:	b343      	cbz	r3, 800e9dc <__sprint_r+0x60>
 800e98a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800e98c:	049d      	lsls	r5, r3, #18
 800e98e:	d522      	bpl.n	800e9d6 <__sprint_r+0x5a>
 800e990:	6815      	ldr	r5, [r2, #0]
 800e992:	68a0      	ldr	r0, [r4, #8]
 800e994:	3508      	adds	r5, #8
 800e996:	b928      	cbnz	r0, 800e9a4 <__sprint_r+0x28>
 800e998:	2300      	movs	r3, #0
 800e99a:	60a3      	str	r3, [r4, #8]
 800e99c:	2300      	movs	r3, #0
 800e99e:	6063      	str	r3, [r4, #4]
 800e9a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a4:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800e9a8:	f04f 0900 	mov.w	r9, #0
 800e9ac:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800e9b0:	45ca      	cmp	sl, r9
 800e9b2:	dc05      	bgt.n	800e9c0 <__sprint_r+0x44>
 800e9b4:	68a3      	ldr	r3, [r4, #8]
 800e9b6:	f027 0703 	bic.w	r7, r7, #3
 800e9ba:	1bdb      	subs	r3, r3, r7
 800e9bc:	60a3      	str	r3, [r4, #8]
 800e9be:	e7e8      	b.n	800e992 <__sprint_r+0x16>
 800e9c0:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800e9c4:	4632      	mov	r2, r6
 800e9c6:	4640      	mov	r0, r8
 800e9c8:	f001 f845 	bl	800fa56 <_fputwc_r>
 800e9cc:	1c43      	adds	r3, r0, #1
 800e9ce:	d0e3      	beq.n	800e998 <__sprint_r+0x1c>
 800e9d0:	f109 0901 	add.w	r9, r9, #1
 800e9d4:	e7ec      	b.n	800e9b0 <__sprint_r+0x34>
 800e9d6:	f000 fe3d 	bl	800f654 <__sfvwrite_r>
 800e9da:	e7dd      	b.n	800e998 <__sprint_r+0x1c>
 800e9dc:	4618      	mov	r0, r3
 800e9de:	e7dd      	b.n	800e99c <__sprint_r+0x20>

0800e9e0 <_vfiprintf_r>:
 800e9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e4:	b0bb      	sub	sp, #236	@ 0xec
 800e9e6:	460f      	mov	r7, r1
 800e9e8:	4693      	mov	fp, r2
 800e9ea:	461c      	mov	r4, r3
 800e9ec:	461d      	mov	r5, r3
 800e9ee:	9000      	str	r0, [sp, #0]
 800e9f0:	b118      	cbz	r0, 800e9fa <_vfiprintf_r+0x1a>
 800e9f2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e9f4:	b90b      	cbnz	r3, 800e9fa <_vfiprintf_r+0x1a>
 800e9f6:	f000 fe15 	bl	800f624 <__sinit>
 800e9fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9fc:	07db      	lsls	r3, r3, #31
 800e9fe:	d405      	bmi.n	800ea0c <_vfiprintf_r+0x2c>
 800ea00:	89bb      	ldrh	r3, [r7, #12]
 800ea02:	059e      	lsls	r6, r3, #22
 800ea04:	d402      	bmi.n	800ea0c <_vfiprintf_r+0x2c>
 800ea06:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ea08:	f001 f8ba 	bl	800fb80 <__retarget_lock_acquire_recursive>
 800ea0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ea10:	0498      	lsls	r0, r3, #18
 800ea12:	d406      	bmi.n	800ea22 <_vfiprintf_r+0x42>
 800ea14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ea18:	81bb      	strh	r3, [r7, #12]
 800ea1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ea20:	667b      	str	r3, [r7, #100]	@ 0x64
 800ea22:	89bb      	ldrh	r3, [r7, #12]
 800ea24:	0719      	lsls	r1, r3, #28
 800ea26:	d501      	bpl.n	800ea2c <_vfiprintf_r+0x4c>
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	b9ab      	cbnz	r3, 800ea58 <_vfiprintf_r+0x78>
 800ea2c:	9800      	ldr	r0, [sp, #0]
 800ea2e:	4639      	mov	r1, r7
 800ea30:	f000 ff7a 	bl	800f928 <__swsetup_r>
 800ea34:	b180      	cbz	r0, 800ea58 <_vfiprintf_r+0x78>
 800ea36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea38:	07da      	lsls	r2, r3, #31
 800ea3a:	d506      	bpl.n	800ea4a <_vfiprintf_r+0x6a>
 800ea3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ea40:	9303      	str	r3, [sp, #12]
 800ea42:	9803      	ldr	r0, [sp, #12]
 800ea44:	b03b      	add	sp, #236	@ 0xec
 800ea46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea4a:	89bb      	ldrh	r3, [r7, #12]
 800ea4c:	059b      	lsls	r3, r3, #22
 800ea4e:	d4f5      	bmi.n	800ea3c <_vfiprintf_r+0x5c>
 800ea50:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ea52:	f001 f896 	bl	800fb82 <__retarget_lock_release_recursive>
 800ea56:	e7f1      	b.n	800ea3c <_vfiprintf_r+0x5c>
 800ea58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ea5c:	f003 021a 	and.w	r2, r3, #26
 800ea60:	2a0a      	cmp	r2, #10
 800ea62:	d114      	bne.n	800ea8e <_vfiprintf_r+0xae>
 800ea64:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ea68:	2a00      	cmp	r2, #0
 800ea6a:	db10      	blt.n	800ea8e <_vfiprintf_r+0xae>
 800ea6c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ea6e:	07d6      	lsls	r6, r2, #31
 800ea70:	d404      	bmi.n	800ea7c <_vfiprintf_r+0x9c>
 800ea72:	059d      	lsls	r5, r3, #22
 800ea74:	d402      	bmi.n	800ea7c <_vfiprintf_r+0x9c>
 800ea76:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ea78:	f001 f883 	bl	800fb82 <__retarget_lock_release_recursive>
 800ea7c:	9800      	ldr	r0, [sp, #0]
 800ea7e:	4623      	mov	r3, r4
 800ea80:	465a      	mov	r2, fp
 800ea82:	4639      	mov	r1, r7
 800ea84:	b03b      	add	sp, #236	@ 0xec
 800ea86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8a:	f000 bc31 	b.w	800f2f0 <__sbprintf>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800ea94:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ea98:	ae11      	add	r6, sp, #68	@ 0x44
 800ea9a:	960e      	str	r6, [sp, #56]	@ 0x38
 800ea9c:	9307      	str	r3, [sp, #28]
 800ea9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaa0:	9303      	str	r3, [sp, #12]
 800eaa2:	465b      	mov	r3, fp
 800eaa4:	461c      	mov	r4, r3
 800eaa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaaa:	b10a      	cbz	r2, 800eab0 <_vfiprintf_r+0xd0>
 800eaac:	2a25      	cmp	r2, #37	@ 0x25
 800eaae:	d1f9      	bne.n	800eaa4 <_vfiprintf_r+0xc4>
 800eab0:	ebb4 080b 	subs.w	r8, r4, fp
 800eab4:	d00d      	beq.n	800ead2 <_vfiprintf_r+0xf2>
 800eab6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eab8:	4443      	add	r3, r8
 800eaba:	9310      	str	r3, [sp, #64]	@ 0x40
 800eabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eabe:	3301      	adds	r3, #1
 800eac0:	2b07      	cmp	r3, #7
 800eac2:	e9c6 b800 	strd	fp, r8, [r6]
 800eac6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eac8:	dc75      	bgt.n	800ebb6 <_vfiprintf_r+0x1d6>
 800eaca:	3608      	adds	r6, #8
 800eacc:	9b03      	ldr	r3, [sp, #12]
 800eace:	4443      	add	r3, r8
 800ead0:	9303      	str	r3, [sp, #12]
 800ead2:	7823      	ldrb	r3, [r4, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f000 83cd 	beq.w	800f274 <_vfiprintf_r+0x894>
 800eada:	2300      	movs	r3, #0
 800eadc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eae0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800eae4:	3401      	adds	r4, #1
 800eae6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800eaea:	469a      	mov	sl, r3
 800eaec:	46a3      	mov	fp, r4
 800eaee:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800eaf2:	f1a3 0220 	sub.w	r2, r3, #32
 800eaf6:	2a5a      	cmp	r2, #90	@ 0x5a
 800eaf8:	f200 8316 	bhi.w	800f128 <_vfiprintf_r+0x748>
 800eafc:	e8df f012 	tbh	[pc, r2, lsl #1]
 800eb00:	0314009a 	.word	0x0314009a
 800eb04:	00a20314 	.word	0x00a20314
 800eb08:	03140314 	.word	0x03140314
 800eb0c:	00820314 	.word	0x00820314
 800eb10:	03140314 	.word	0x03140314
 800eb14:	00af00a5 	.word	0x00af00a5
 800eb18:	00ac0314 	.word	0x00ac0314
 800eb1c:	031400b1 	.word	0x031400b1
 800eb20:	00d000cd 	.word	0x00d000cd
 800eb24:	00d000d0 	.word	0x00d000d0
 800eb28:	00d000d0 	.word	0x00d000d0
 800eb2c:	00d000d0 	.word	0x00d000d0
 800eb30:	00d000d0 	.word	0x00d000d0
 800eb34:	03140314 	.word	0x03140314
 800eb38:	03140314 	.word	0x03140314
 800eb3c:	03140314 	.word	0x03140314
 800eb40:	03140314 	.word	0x03140314
 800eb44:	00f70314 	.word	0x00f70314
 800eb48:	03140104 	.word	0x03140104
 800eb4c:	03140314 	.word	0x03140314
 800eb50:	03140314 	.word	0x03140314
 800eb54:	03140314 	.word	0x03140314
 800eb58:	03140314 	.word	0x03140314
 800eb5c:	01520314 	.word	0x01520314
 800eb60:	03140314 	.word	0x03140314
 800eb64:	019a0314 	.word	0x019a0314
 800eb68:	027a0314 	.word	0x027a0314
 800eb6c:	03140314 	.word	0x03140314
 800eb70:	0314029a 	.word	0x0314029a
 800eb74:	03140314 	.word	0x03140314
 800eb78:	03140314 	.word	0x03140314
 800eb7c:	03140314 	.word	0x03140314
 800eb80:	03140314 	.word	0x03140314
 800eb84:	00f70314 	.word	0x00f70314
 800eb88:	03140106 	.word	0x03140106
 800eb8c:	03140314 	.word	0x03140314
 800eb90:	010600e0 	.word	0x010600e0
 800eb94:	031400f1 	.word	0x031400f1
 800eb98:	031400eb 	.word	0x031400eb
 800eb9c:	01540132 	.word	0x01540132
 800eba0:	00f10189 	.word	0x00f10189
 800eba4:	019a0314 	.word	0x019a0314
 800eba8:	027c0098 	.word	0x027c0098
 800ebac:	03140314 	.word	0x03140314
 800ebb0:	03140065 	.word	0x03140065
 800ebb4:	0098      	.short	0x0098
 800ebb6:	9800      	ldr	r0, [sp, #0]
 800ebb8:	aa0e      	add	r2, sp, #56	@ 0x38
 800ebba:	4639      	mov	r1, r7
 800ebbc:	f7ff fede 	bl	800e97c <__sprint_r>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	f040 8336 	bne.w	800f232 <_vfiprintf_r+0x852>
 800ebc6:	ae11      	add	r6, sp, #68	@ 0x44
 800ebc8:	e780      	b.n	800eacc <_vfiprintf_r+0xec>
 800ebca:	4a99      	ldr	r2, [pc, #612]	@ (800ee30 <_vfiprintf_r+0x450>)
 800ebcc:	9205      	str	r2, [sp, #20]
 800ebce:	f01a 0220 	ands.w	r2, sl, #32
 800ebd2:	f000 8231 	beq.w	800f038 <_vfiprintf_r+0x658>
 800ebd6:	3507      	adds	r5, #7
 800ebd8:	f025 0507 	bic.w	r5, r5, #7
 800ebdc:	46a8      	mov	r8, r5
 800ebde:	686d      	ldr	r5, [r5, #4]
 800ebe0:	f858 4b08 	ldr.w	r4, [r8], #8
 800ebe4:	f01a 0f01 	tst.w	sl, #1
 800ebe8:	d009      	beq.n	800ebfe <_vfiprintf_r+0x21e>
 800ebea:	ea54 0205 	orrs.w	r2, r4, r5
 800ebee:	bf1f      	itttt	ne
 800ebf0:	2230      	movne	r2, #48	@ 0x30
 800ebf2:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800ebf6:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800ebfa:	f04a 0a02 	orrne.w	sl, sl, #2
 800ebfe:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800ec02:	e112      	b.n	800ee2a <_vfiprintf_r+0x44a>
 800ec04:	9800      	ldr	r0, [sp, #0]
 800ec06:	f000 ff8b 	bl	800fb20 <_localeconv_r>
 800ec0a:	6843      	ldr	r3, [r0, #4]
 800ec0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7f1 fbb6 	bl	8000380 <strlen>
 800ec14:	9007      	str	r0, [sp, #28]
 800ec16:	9800      	ldr	r0, [sp, #0]
 800ec18:	f000 ff82 	bl	800fb20 <_localeconv_r>
 800ec1c:	6883      	ldr	r3, [r0, #8]
 800ec1e:	9306      	str	r3, [sp, #24]
 800ec20:	9b07      	ldr	r3, [sp, #28]
 800ec22:	b12b      	cbz	r3, 800ec30 <_vfiprintf_r+0x250>
 800ec24:	9b06      	ldr	r3, [sp, #24]
 800ec26:	b11b      	cbz	r3, 800ec30 <_vfiprintf_r+0x250>
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	b10b      	cbz	r3, 800ec30 <_vfiprintf_r+0x250>
 800ec2c:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800ec30:	465c      	mov	r4, fp
 800ec32:	e75b      	b.n	800eaec <_vfiprintf_r+0x10c>
 800ec34:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d1f9      	bne.n	800ec30 <_vfiprintf_r+0x250>
 800ec3c:	2320      	movs	r3, #32
 800ec3e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ec42:	e7f5      	b.n	800ec30 <_vfiprintf_r+0x250>
 800ec44:	f04a 0a01 	orr.w	sl, sl, #1
 800ec48:	e7f2      	b.n	800ec30 <_vfiprintf_r+0x250>
 800ec4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec4e:	9302      	str	r3, [sp, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	daed      	bge.n	800ec30 <_vfiprintf_r+0x250>
 800ec54:	425b      	negs	r3, r3
 800ec56:	9302      	str	r3, [sp, #8]
 800ec58:	f04a 0a04 	orr.w	sl, sl, #4
 800ec5c:	e7e8      	b.n	800ec30 <_vfiprintf_r+0x250>
 800ec5e:	232b      	movs	r3, #43	@ 0x2b
 800ec60:	e7ed      	b.n	800ec3e <_vfiprintf_r+0x25e>
 800ec62:	465a      	mov	r2, fp
 800ec64:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ec68:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec6a:	d112      	bne.n	800ec92 <_vfiprintf_r+0x2b2>
 800ec6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ec74:	9301      	str	r3, [sp, #4]
 800ec76:	4693      	mov	fp, r2
 800ec78:	e7da      	b.n	800ec30 <_vfiprintf_r+0x250>
 800ec7a:	9b01      	ldr	r3, [sp, #4]
 800ec7c:	fb00 1303 	mla	r3, r0, r3, r1
 800ec80:	9301      	str	r3, [sp, #4]
 800ec82:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ec86:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ec8a:	2909      	cmp	r1, #9
 800ec8c:	d9f5      	bls.n	800ec7a <_vfiprintf_r+0x29a>
 800ec8e:	4693      	mov	fp, r2
 800ec90:	e72f      	b.n	800eaf2 <_vfiprintf_r+0x112>
 800ec92:	2100      	movs	r1, #0
 800ec94:	9101      	str	r1, [sp, #4]
 800ec96:	200a      	movs	r0, #10
 800ec98:	e7f5      	b.n	800ec86 <_vfiprintf_r+0x2a6>
 800ec9a:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800ec9e:	e7c7      	b.n	800ec30 <_vfiprintf_r+0x250>
 800eca0:	2100      	movs	r1, #0
 800eca2:	465a      	mov	r2, fp
 800eca4:	9102      	str	r1, [sp, #8]
 800eca6:	200a      	movs	r0, #10
 800eca8:	9902      	ldr	r1, [sp, #8]
 800ecaa:	3b30      	subs	r3, #48	@ 0x30
 800ecac:	fb00 3301 	mla	r3, r0, r1, r3
 800ecb0:	9302      	str	r3, [sp, #8]
 800ecb2:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ecb6:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ecba:	2909      	cmp	r1, #9
 800ecbc:	d9f4      	bls.n	800eca8 <_vfiprintf_r+0x2c8>
 800ecbe:	e7e6      	b.n	800ec8e <_vfiprintf_r+0x2ae>
 800ecc0:	f89b 3000 	ldrb.w	r3, [fp]
 800ecc4:	2b68      	cmp	r3, #104	@ 0x68
 800ecc6:	bf06      	itte	eq
 800ecc8:	f10b 0b01 	addeq.w	fp, fp, #1
 800eccc:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800ecd0:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800ecd4:	e7ac      	b.n	800ec30 <_vfiprintf_r+0x250>
 800ecd6:	f89b 3000 	ldrb.w	r3, [fp]
 800ecda:	2b6c      	cmp	r3, #108	@ 0x6c
 800ecdc:	d104      	bne.n	800ece8 <_vfiprintf_r+0x308>
 800ecde:	f10b 0b01 	add.w	fp, fp, #1
 800ece2:	f04a 0a20 	orr.w	sl, sl, #32
 800ece6:	e7a3      	b.n	800ec30 <_vfiprintf_r+0x250>
 800ece8:	f04a 0a10 	orr.w	sl, sl, #16
 800ecec:	e7a0      	b.n	800ec30 <_vfiprintf_r+0x250>
 800ecee:	46a8      	mov	r8, r5
 800ecf0:	2400      	movs	r4, #0
 800ecf2:	f858 3b04 	ldr.w	r3, [r8], #4
 800ecf6:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800ecfa:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800ecfe:	2301      	movs	r3, #1
 800ed00:	9301      	str	r3, [sp, #4]
 800ed02:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800ed06:	e0ab      	b.n	800ee60 <_vfiprintf_r+0x480>
 800ed08:	f04a 0a10 	orr.w	sl, sl, #16
 800ed0c:	f01a 0f20 	tst.w	sl, #32
 800ed10:	d011      	beq.n	800ed36 <_vfiprintf_r+0x356>
 800ed12:	3507      	adds	r5, #7
 800ed14:	f025 0507 	bic.w	r5, r5, #7
 800ed18:	46a8      	mov	r8, r5
 800ed1a:	686d      	ldr	r5, [r5, #4]
 800ed1c:	f858 4b08 	ldr.w	r4, [r8], #8
 800ed20:	2d00      	cmp	r5, #0
 800ed22:	da06      	bge.n	800ed32 <_vfiprintf_r+0x352>
 800ed24:	4264      	negs	r4, r4
 800ed26:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800ed2a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800ed2e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ed32:	2301      	movs	r3, #1
 800ed34:	e048      	b.n	800edc8 <_vfiprintf_r+0x3e8>
 800ed36:	46a8      	mov	r8, r5
 800ed38:	f01a 0f10 	tst.w	sl, #16
 800ed3c:	f858 5b04 	ldr.w	r5, [r8], #4
 800ed40:	d002      	beq.n	800ed48 <_vfiprintf_r+0x368>
 800ed42:	462c      	mov	r4, r5
 800ed44:	17ed      	asrs	r5, r5, #31
 800ed46:	e7eb      	b.n	800ed20 <_vfiprintf_r+0x340>
 800ed48:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ed4c:	d003      	beq.n	800ed56 <_vfiprintf_r+0x376>
 800ed4e:	b22c      	sxth	r4, r5
 800ed50:	f345 35c0 	sbfx	r5, r5, #15, #1
 800ed54:	e7e4      	b.n	800ed20 <_vfiprintf_r+0x340>
 800ed56:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ed5a:	d0f2      	beq.n	800ed42 <_vfiprintf_r+0x362>
 800ed5c:	b26c      	sxtb	r4, r5
 800ed5e:	f345 15c0 	sbfx	r5, r5, #7, #1
 800ed62:	e7dd      	b.n	800ed20 <_vfiprintf_r+0x340>
 800ed64:	f01a 0f20 	tst.w	sl, #32
 800ed68:	d007      	beq.n	800ed7a <_vfiprintf_r+0x39a>
 800ed6a:	9a03      	ldr	r2, [sp, #12]
 800ed6c:	682b      	ldr	r3, [r5, #0]
 800ed6e:	9903      	ldr	r1, [sp, #12]
 800ed70:	17d2      	asrs	r2, r2, #31
 800ed72:	e9c3 1200 	strd	r1, r2, [r3]
 800ed76:	3504      	adds	r5, #4
 800ed78:	e693      	b.n	800eaa2 <_vfiprintf_r+0xc2>
 800ed7a:	f01a 0f10 	tst.w	sl, #16
 800ed7e:	d003      	beq.n	800ed88 <_vfiprintf_r+0x3a8>
 800ed80:	682b      	ldr	r3, [r5, #0]
 800ed82:	9a03      	ldr	r2, [sp, #12]
 800ed84:	601a      	str	r2, [r3, #0]
 800ed86:	e7f6      	b.n	800ed76 <_vfiprintf_r+0x396>
 800ed88:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800ed8c:	d003      	beq.n	800ed96 <_vfiprintf_r+0x3b6>
 800ed8e:	682b      	ldr	r3, [r5, #0]
 800ed90:	9a03      	ldr	r2, [sp, #12]
 800ed92:	801a      	strh	r2, [r3, #0]
 800ed94:	e7ef      	b.n	800ed76 <_vfiprintf_r+0x396>
 800ed96:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800ed9a:	d0f1      	beq.n	800ed80 <_vfiprintf_r+0x3a0>
 800ed9c:	682b      	ldr	r3, [r5, #0]
 800ed9e:	9a03      	ldr	r2, [sp, #12]
 800eda0:	701a      	strb	r2, [r3, #0]
 800eda2:	e7e8      	b.n	800ed76 <_vfiprintf_r+0x396>
 800eda4:	f04a 0a10 	orr.w	sl, sl, #16
 800eda8:	f01a 0320 	ands.w	r3, sl, #32
 800edac:	d01f      	beq.n	800edee <_vfiprintf_r+0x40e>
 800edae:	3507      	adds	r5, #7
 800edb0:	f025 0507 	bic.w	r5, r5, #7
 800edb4:	46a8      	mov	r8, r5
 800edb6:	686d      	ldr	r5, [r5, #4]
 800edb8:	f858 4b08 	ldr.w	r4, [r8], #8
 800edbc:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800edc0:	2300      	movs	r3, #0
 800edc2:	2200      	movs	r2, #0
 800edc4:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800edc8:	9a01      	ldr	r2, [sp, #4]
 800edca:	3201      	adds	r2, #1
 800edcc:	f000 825f 	beq.w	800f28e <_vfiprintf_r+0x8ae>
 800edd0:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800edd4:	9204      	str	r2, [sp, #16]
 800edd6:	ea54 0205 	orrs.w	r2, r4, r5
 800edda:	f040 825e 	bne.w	800f29a <_vfiprintf_r+0x8ba>
 800edde:	9a01      	ldr	r2, [sp, #4]
 800ede0:	2a00      	cmp	r2, #0
 800ede2:	f000 8198 	beq.w	800f116 <_vfiprintf_r+0x736>
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	f040 825a 	bne.w	800f2a0 <_vfiprintf_r+0x8c0>
 800edec:	e13b      	b.n	800f066 <_vfiprintf_r+0x686>
 800edee:	46a8      	mov	r8, r5
 800edf0:	f01a 0510 	ands.w	r5, sl, #16
 800edf4:	f858 4b04 	ldr.w	r4, [r8], #4
 800edf8:	d001      	beq.n	800edfe <_vfiprintf_r+0x41e>
 800edfa:	461d      	mov	r5, r3
 800edfc:	e7de      	b.n	800edbc <_vfiprintf_r+0x3dc>
 800edfe:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800ee02:	d001      	beq.n	800ee08 <_vfiprintf_r+0x428>
 800ee04:	b2a4      	uxth	r4, r4
 800ee06:	e7d9      	b.n	800edbc <_vfiprintf_r+0x3dc>
 800ee08:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800ee0c:	d0d6      	beq.n	800edbc <_vfiprintf_r+0x3dc>
 800ee0e:	b2e4      	uxtb	r4, r4
 800ee10:	e7f3      	b.n	800edfa <_vfiprintf_r+0x41a>
 800ee12:	46a8      	mov	r8, r5
 800ee14:	f647 0330 	movw	r3, #30768	@ 0x7830
 800ee18:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800ee1c:	f858 4b04 	ldr.w	r4, [r8], #4
 800ee20:	4b03      	ldr	r3, [pc, #12]	@ (800ee30 <_vfiprintf_r+0x450>)
 800ee22:	9305      	str	r3, [sp, #20]
 800ee24:	2500      	movs	r5, #0
 800ee26:	f04a 0a02 	orr.w	sl, sl, #2
 800ee2a:	2302      	movs	r3, #2
 800ee2c:	e7c9      	b.n	800edc2 <_vfiprintf_r+0x3e2>
 800ee2e:	bf00      	nop
 800ee30:	08014a71 	.word	0x08014a71
 800ee34:	9b01      	ldr	r3, [sp, #4]
 800ee36:	46a8      	mov	r8, r5
 800ee38:	1c5c      	adds	r4, r3, #1
 800ee3a:	f04f 0500 	mov.w	r5, #0
 800ee3e:	f858 9b04 	ldr.w	r9, [r8], #4
 800ee42:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800ee46:	f000 80d0 	beq.w	800efea <_vfiprintf_r+0x60a>
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	4648      	mov	r0, r9
 800ee50:	f7f1 fa46 	bl	80002e0 <memchr>
 800ee54:	4604      	mov	r4, r0
 800ee56:	b118      	cbz	r0, 800ee60 <_vfiprintf_r+0x480>
 800ee58:	eba0 0309 	sub.w	r3, r0, r9
 800ee5c:	9301      	str	r3, [sp, #4]
 800ee5e:	462c      	mov	r4, r5
 800ee60:	9b01      	ldr	r3, [sp, #4]
 800ee62:	42a3      	cmp	r3, r4
 800ee64:	bfb8      	it	lt
 800ee66:	4623      	movlt	r3, r4
 800ee68:	9304      	str	r3, [sp, #16]
 800ee6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ee6e:	b113      	cbz	r3, 800ee76 <_vfiprintf_r+0x496>
 800ee70:	9b04      	ldr	r3, [sp, #16]
 800ee72:	3301      	adds	r3, #1
 800ee74:	9304      	str	r3, [sp, #16]
 800ee76:	f01a 0302 	ands.w	r3, sl, #2
 800ee7a:	9308      	str	r3, [sp, #32]
 800ee7c:	bf1e      	ittt	ne
 800ee7e:	9b04      	ldrne	r3, [sp, #16]
 800ee80:	3302      	addne	r3, #2
 800ee82:	9304      	strne	r3, [sp, #16]
 800ee84:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800ee88:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee8a:	d11f      	bne.n	800eecc <_vfiprintf_r+0x4ec>
 800ee8c:	9b02      	ldr	r3, [sp, #8]
 800ee8e:	9a04      	ldr	r2, [sp, #16]
 800ee90:	1a9d      	subs	r5, r3, r2
 800ee92:	2d00      	cmp	r5, #0
 800ee94:	dd1a      	ble.n	800eecc <_vfiprintf_r+0x4ec>
 800ee96:	4ba9      	ldr	r3, [pc, #676]	@ (800f13c <_vfiprintf_r+0x75c>)
 800ee98:	6033      	str	r3, [r6, #0]
 800ee9a:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800ee9e:	2d10      	cmp	r5, #16
 800eea0:	f102 0201 	add.w	r2, r2, #1
 800eea4:	f106 0008 	add.w	r0, r6, #8
 800eea8:	f300 814e 	bgt.w	800f148 <_vfiprintf_r+0x768>
 800eeac:	6075      	str	r5, [r6, #4]
 800eeae:	2a07      	cmp	r2, #7
 800eeb0:	4465      	add	r5, ip
 800eeb2:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800eeb6:	f340 815a 	ble.w	800f16e <_vfiprintf_r+0x78e>
 800eeba:	9800      	ldr	r0, [sp, #0]
 800eebc:	aa0e      	add	r2, sp, #56	@ 0x38
 800eebe:	4639      	mov	r1, r7
 800eec0:	f7ff fd5c 	bl	800e97c <__sprint_r>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	f040 81b4 	bne.w	800f232 <_vfiprintf_r+0x852>
 800eeca:	ae11      	add	r6, sp, #68	@ 0x44
 800eecc:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800eed0:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800eed4:	b161      	cbz	r1, 800eef0 <_vfiprintf_r+0x510>
 800eed6:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800eeda:	3301      	adds	r3, #1
 800eedc:	6031      	str	r1, [r6, #0]
 800eede:	2101      	movs	r1, #1
 800eee0:	440a      	add	r2, r1
 800eee2:	2b07      	cmp	r3, #7
 800eee4:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800eee8:	6071      	str	r1, [r6, #4]
 800eeea:	f300 8142 	bgt.w	800f172 <_vfiprintf_r+0x792>
 800eeee:	3608      	adds	r6, #8
 800eef0:	9908      	ldr	r1, [sp, #32]
 800eef2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800eef6:	b159      	cbz	r1, 800ef10 <_vfiprintf_r+0x530>
 800eef8:	a90d      	add	r1, sp, #52	@ 0x34
 800eefa:	3301      	adds	r3, #1
 800eefc:	6031      	str	r1, [r6, #0]
 800eefe:	2102      	movs	r1, #2
 800ef00:	440a      	add	r2, r1
 800ef02:	2b07      	cmp	r3, #7
 800ef04:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800ef08:	6071      	str	r1, [r6, #4]
 800ef0a:	f300 813b 	bgt.w	800f184 <_vfiprintf_r+0x7a4>
 800ef0e:	3608      	adds	r6, #8
 800ef10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef12:	2b80      	cmp	r3, #128	@ 0x80
 800ef14:	d11f      	bne.n	800ef56 <_vfiprintf_r+0x576>
 800ef16:	9b02      	ldr	r3, [sp, #8]
 800ef18:	9a04      	ldr	r2, [sp, #16]
 800ef1a:	1a9d      	subs	r5, r3, r2
 800ef1c:	2d00      	cmp	r5, #0
 800ef1e:	dd1a      	ble.n	800ef56 <_vfiprintf_r+0x576>
 800ef20:	4b87      	ldr	r3, [pc, #540]	@ (800f140 <_vfiprintf_r+0x760>)
 800ef22:	6033      	str	r3, [r6, #0]
 800ef24:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800ef28:	2d10      	cmp	r5, #16
 800ef2a:	f102 0201 	add.w	r2, r2, #1
 800ef2e:	f106 0008 	add.w	r0, r6, #8
 800ef32:	f300 8130 	bgt.w	800f196 <_vfiprintf_r+0x7b6>
 800ef36:	6075      	str	r5, [r6, #4]
 800ef38:	2a07      	cmp	r2, #7
 800ef3a:	4465      	add	r5, ip
 800ef3c:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800ef40:	f340 813c 	ble.w	800f1bc <_vfiprintf_r+0x7dc>
 800ef44:	9800      	ldr	r0, [sp, #0]
 800ef46:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef48:	4639      	mov	r1, r7
 800ef4a:	f7ff fd17 	bl	800e97c <__sprint_r>
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	f040 816f 	bne.w	800f232 <_vfiprintf_r+0x852>
 800ef54:	ae11      	add	r6, sp, #68	@ 0x44
 800ef56:	9b01      	ldr	r3, [sp, #4]
 800ef58:	1ae4      	subs	r4, r4, r3
 800ef5a:	2c00      	cmp	r4, #0
 800ef5c:	dd1a      	ble.n	800ef94 <_vfiprintf_r+0x5b4>
 800ef5e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800ef62:	4877      	ldr	r0, [pc, #476]	@ (800f140 <_vfiprintf_r+0x760>)
 800ef64:	6030      	str	r0, [r6, #0]
 800ef66:	2c10      	cmp	r4, #16
 800ef68:	f103 0301 	add.w	r3, r3, #1
 800ef6c:	f106 0108 	add.w	r1, r6, #8
 800ef70:	f300 8126 	bgt.w	800f1c0 <_vfiprintf_r+0x7e0>
 800ef74:	6074      	str	r4, [r6, #4]
 800ef76:	2b07      	cmp	r3, #7
 800ef78:	4414      	add	r4, r2
 800ef7a:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800ef7e:	f340 8130 	ble.w	800f1e2 <_vfiprintf_r+0x802>
 800ef82:	9800      	ldr	r0, [sp, #0]
 800ef84:	aa0e      	add	r2, sp, #56	@ 0x38
 800ef86:	4639      	mov	r1, r7
 800ef88:	f7ff fcf8 	bl	800e97c <__sprint_r>
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	f040 8150 	bne.w	800f232 <_vfiprintf_r+0x852>
 800ef92:	ae11      	add	r6, sp, #68	@ 0x44
 800ef94:	9b01      	ldr	r3, [sp, #4]
 800ef96:	9a01      	ldr	r2, [sp, #4]
 800ef98:	6073      	str	r3, [r6, #4]
 800ef9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef9c:	f8c6 9000 	str.w	r9, [r6]
 800efa0:	4413      	add	r3, r2
 800efa2:	9310      	str	r3, [sp, #64]	@ 0x40
 800efa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efa6:	3301      	adds	r3, #1
 800efa8:	2b07      	cmp	r3, #7
 800efaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800efac:	f300 811b 	bgt.w	800f1e6 <_vfiprintf_r+0x806>
 800efb0:	f106 0308 	add.w	r3, r6, #8
 800efb4:	f01a 0f04 	tst.w	sl, #4
 800efb8:	f040 811d 	bne.w	800f1f6 <_vfiprintf_r+0x816>
 800efbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efc0:	9904      	ldr	r1, [sp, #16]
 800efc2:	428a      	cmp	r2, r1
 800efc4:	bfac      	ite	ge
 800efc6:	189b      	addge	r3, r3, r2
 800efc8:	185b      	addlt	r3, r3, r1
 800efca:	9303      	str	r3, [sp, #12]
 800efcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800efce:	b13b      	cbz	r3, 800efe0 <_vfiprintf_r+0x600>
 800efd0:	9800      	ldr	r0, [sp, #0]
 800efd2:	aa0e      	add	r2, sp, #56	@ 0x38
 800efd4:	4639      	mov	r1, r7
 800efd6:	f7ff fcd1 	bl	800e97c <__sprint_r>
 800efda:	2800      	cmp	r0, #0
 800efdc:	f040 8129 	bne.w	800f232 <_vfiprintf_r+0x852>
 800efe0:	2300      	movs	r3, #0
 800efe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800efe4:	4645      	mov	r5, r8
 800efe6:	ae11      	add	r6, sp, #68	@ 0x44
 800efe8:	e55b      	b.n	800eaa2 <_vfiprintf_r+0xc2>
 800efea:	4648      	mov	r0, r9
 800efec:	f7f1 f9c8 	bl	8000380 <strlen>
 800eff0:	9001      	str	r0, [sp, #4]
 800eff2:	e734      	b.n	800ee5e <_vfiprintf_r+0x47e>
 800eff4:	f04a 0a10 	orr.w	sl, sl, #16
 800eff8:	f01a 0320 	ands.w	r3, sl, #32
 800effc:	d008      	beq.n	800f010 <_vfiprintf_r+0x630>
 800effe:	3507      	adds	r5, #7
 800f000:	f025 0507 	bic.w	r5, r5, #7
 800f004:	46a8      	mov	r8, r5
 800f006:	686d      	ldr	r5, [r5, #4]
 800f008:	f858 4b08 	ldr.w	r4, [r8], #8
 800f00c:	2301      	movs	r3, #1
 800f00e:	e6d8      	b.n	800edc2 <_vfiprintf_r+0x3e2>
 800f010:	46a8      	mov	r8, r5
 800f012:	f01a 0510 	ands.w	r5, sl, #16
 800f016:	f858 4b04 	ldr.w	r4, [r8], #4
 800f01a:	d001      	beq.n	800f020 <_vfiprintf_r+0x640>
 800f01c:	461d      	mov	r5, r3
 800f01e:	e7f5      	b.n	800f00c <_vfiprintf_r+0x62c>
 800f020:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800f024:	d001      	beq.n	800f02a <_vfiprintf_r+0x64a>
 800f026:	b2a4      	uxth	r4, r4
 800f028:	e7f0      	b.n	800f00c <_vfiprintf_r+0x62c>
 800f02a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800f02e:	d0ed      	beq.n	800f00c <_vfiprintf_r+0x62c>
 800f030:	b2e4      	uxtb	r4, r4
 800f032:	e7f3      	b.n	800f01c <_vfiprintf_r+0x63c>
 800f034:	4a43      	ldr	r2, [pc, #268]	@ (800f144 <_vfiprintf_r+0x764>)
 800f036:	e5c9      	b.n	800ebcc <_vfiprintf_r+0x1ec>
 800f038:	46a8      	mov	r8, r5
 800f03a:	f01a 0510 	ands.w	r5, sl, #16
 800f03e:	f858 4b04 	ldr.w	r4, [r8], #4
 800f042:	d001      	beq.n	800f048 <_vfiprintf_r+0x668>
 800f044:	4615      	mov	r5, r2
 800f046:	e5cd      	b.n	800ebe4 <_vfiprintf_r+0x204>
 800f048:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800f04c:	d001      	beq.n	800f052 <_vfiprintf_r+0x672>
 800f04e:	b2a4      	uxth	r4, r4
 800f050:	e5c8      	b.n	800ebe4 <_vfiprintf_r+0x204>
 800f052:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800f056:	f43f adc5 	beq.w	800ebe4 <_vfiprintf_r+0x204>
 800f05a:	b2e4      	uxtb	r4, r4
 800f05c:	e7f2      	b.n	800f044 <_vfiprintf_r+0x664>
 800f05e:	2c0a      	cmp	r4, #10
 800f060:	f175 0300 	sbcs.w	r3, r5, #0
 800f064:	d206      	bcs.n	800f074 <_vfiprintf_r+0x694>
 800f066:	3430      	adds	r4, #48	@ 0x30
 800f068:	b2e4      	uxtb	r4, r4
 800f06a:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800f06e:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800f072:	e131      	b.n	800f2d8 <_vfiprintf_r+0x8f8>
 800f074:	ab3a      	add	r3, sp, #232	@ 0xe8
 800f076:	9308      	str	r3, [sp, #32]
 800f078:	9b04      	ldr	r3, [sp, #16]
 800f07a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f07e:	f04f 0a00 	mov.w	sl, #0
 800f082:	930a      	str	r3, [sp, #40]	@ 0x28
 800f084:	220a      	movs	r2, #10
 800f086:	2300      	movs	r3, #0
 800f088:	4620      	mov	r0, r4
 800f08a:	4629      	mov	r1, r5
 800f08c:	f7f1 f980 	bl	8000390 <__aeabi_uldivmod>
 800f090:	460b      	mov	r3, r1
 800f092:	9908      	ldr	r1, [sp, #32]
 800f094:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f096:	3230      	adds	r2, #48	@ 0x30
 800f098:	f801 2c01 	strb.w	r2, [r1, #-1]
 800f09c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f09e:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 800f0a2:	f10a 0a01 	add.w	sl, sl, #1
 800f0a6:	b1e2      	cbz	r2, 800f0e2 <_vfiprintf_r+0x702>
 800f0a8:	9a06      	ldr	r2, [sp, #24]
 800f0aa:	7812      	ldrb	r2, [r2, #0]
 800f0ac:	4552      	cmp	r2, sl
 800f0ae:	d118      	bne.n	800f0e2 <_vfiprintf_r+0x702>
 800f0b0:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800f0b4:	d015      	beq.n	800f0e2 <_vfiprintf_r+0x702>
 800f0b6:	2c0a      	cmp	r4, #10
 800f0b8:	f175 0200 	sbcs.w	r2, r5, #0
 800f0bc:	d311      	bcc.n	800f0e2 <_vfiprintf_r+0x702>
 800f0be:	9308      	str	r3, [sp, #32]
 800f0c0:	9b07      	ldr	r3, [sp, #28]
 800f0c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f0c4:	eba9 0903 	sub.w	r9, r9, r3
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	4648      	mov	r0, r9
 800f0cc:	f000 fd0e 	bl	800faec <strncpy>
 800f0d0:	9b06      	ldr	r3, [sp, #24]
 800f0d2:	785a      	ldrb	r2, [r3, #1]
 800f0d4:	9b08      	ldr	r3, [sp, #32]
 800f0d6:	b172      	cbz	r2, 800f0f6 <_vfiprintf_r+0x716>
 800f0d8:	9a06      	ldr	r2, [sp, #24]
 800f0da:	3201      	adds	r2, #1
 800f0dc:	9206      	str	r2, [sp, #24]
 800f0de:	f04f 0a00 	mov.w	sl, #0
 800f0e2:	2c0a      	cmp	r4, #10
 800f0e4:	f175 0500 	sbcs.w	r5, r5, #0
 800f0e8:	f0c0 80f6 	bcc.w	800f2d8 <_vfiprintf_r+0x8f8>
 800f0ec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f0ee:	f8cd 9020 	str.w	r9, [sp, #32]
 800f0f2:	461d      	mov	r5, r3
 800f0f4:	e7c6      	b.n	800f084 <_vfiprintf_r+0x6a4>
 800f0f6:	4692      	mov	sl, r2
 800f0f8:	e7f3      	b.n	800f0e2 <_vfiprintf_r+0x702>
 800f0fa:	f004 030f 	and.w	r3, r4, #15
 800f0fe:	9a05      	ldr	r2, [sp, #20]
 800f100:	0924      	lsrs	r4, r4, #4
 800f102:	5cd3      	ldrb	r3, [r2, r3]
 800f104:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f108:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800f10c:	092d      	lsrs	r5, r5, #4
 800f10e:	ea54 0305 	orrs.w	r3, r4, r5
 800f112:	d1f2      	bne.n	800f0fa <_vfiprintf_r+0x71a>
 800f114:	e0e0      	b.n	800f2d8 <_vfiprintf_r+0x8f8>
 800f116:	b923      	cbnz	r3, 800f122 <_vfiprintf_r+0x742>
 800f118:	f01a 0f01 	tst.w	sl, #1
 800f11c:	d001      	beq.n	800f122 <_vfiprintf_r+0x742>
 800f11e:	2430      	movs	r4, #48	@ 0x30
 800f120:	e7a3      	b.n	800f06a <_vfiprintf_r+0x68a>
 800f122:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800f126:	e0d7      	b.n	800f2d8 <_vfiprintf_r+0x8f8>
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f000 80a3 	beq.w	800f274 <_vfiprintf_r+0x894>
 800f12e:	2400      	movs	r4, #0
 800f130:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800f134:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800f138:	46a8      	mov	r8, r5
 800f13a:	e5e0      	b.n	800ecfe <_vfiprintf_r+0x31e>
 800f13c:	08014a92 	.word	0x08014a92
 800f140:	08014a82 	.word	0x08014a82
 800f144:	08014a60 	.word	0x08014a60
 800f148:	2110      	movs	r1, #16
 800f14a:	6071      	str	r1, [r6, #4]
 800f14c:	2a07      	cmp	r2, #7
 800f14e:	4461      	add	r1, ip
 800f150:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f154:	dd08      	ble.n	800f168 <_vfiprintf_r+0x788>
 800f156:	9800      	ldr	r0, [sp, #0]
 800f158:	aa0e      	add	r2, sp, #56	@ 0x38
 800f15a:	4639      	mov	r1, r7
 800f15c:	f7ff fc0e 	bl	800e97c <__sprint_r>
 800f160:	2800      	cmp	r0, #0
 800f162:	d166      	bne.n	800f232 <_vfiprintf_r+0x852>
 800f164:	4b60      	ldr	r3, [pc, #384]	@ (800f2e8 <_vfiprintf_r+0x908>)
 800f166:	a811      	add	r0, sp, #68	@ 0x44
 800f168:	3d10      	subs	r5, #16
 800f16a:	4606      	mov	r6, r0
 800f16c:	e694      	b.n	800ee98 <_vfiprintf_r+0x4b8>
 800f16e:	4606      	mov	r6, r0
 800f170:	e6ac      	b.n	800eecc <_vfiprintf_r+0x4ec>
 800f172:	9800      	ldr	r0, [sp, #0]
 800f174:	aa0e      	add	r2, sp, #56	@ 0x38
 800f176:	4639      	mov	r1, r7
 800f178:	f7ff fc00 	bl	800e97c <__sprint_r>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d158      	bne.n	800f232 <_vfiprintf_r+0x852>
 800f180:	ae11      	add	r6, sp, #68	@ 0x44
 800f182:	e6b5      	b.n	800eef0 <_vfiprintf_r+0x510>
 800f184:	9800      	ldr	r0, [sp, #0]
 800f186:	aa0e      	add	r2, sp, #56	@ 0x38
 800f188:	4639      	mov	r1, r7
 800f18a:	f7ff fbf7 	bl	800e97c <__sprint_r>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d14f      	bne.n	800f232 <_vfiprintf_r+0x852>
 800f192:	ae11      	add	r6, sp, #68	@ 0x44
 800f194:	e6bc      	b.n	800ef10 <_vfiprintf_r+0x530>
 800f196:	2110      	movs	r1, #16
 800f198:	6071      	str	r1, [r6, #4]
 800f19a:	2a07      	cmp	r2, #7
 800f19c:	4461      	add	r1, ip
 800f19e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f1a2:	dd08      	ble.n	800f1b6 <_vfiprintf_r+0x7d6>
 800f1a4:	9800      	ldr	r0, [sp, #0]
 800f1a6:	aa0e      	add	r2, sp, #56	@ 0x38
 800f1a8:	4639      	mov	r1, r7
 800f1aa:	f7ff fbe7 	bl	800e97c <__sprint_r>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d13f      	bne.n	800f232 <_vfiprintf_r+0x852>
 800f1b2:	4b4e      	ldr	r3, [pc, #312]	@ (800f2ec <_vfiprintf_r+0x90c>)
 800f1b4:	a811      	add	r0, sp, #68	@ 0x44
 800f1b6:	3d10      	subs	r5, #16
 800f1b8:	4606      	mov	r6, r0
 800f1ba:	e6b2      	b.n	800ef22 <_vfiprintf_r+0x542>
 800f1bc:	4606      	mov	r6, r0
 800f1be:	e6ca      	b.n	800ef56 <_vfiprintf_r+0x576>
 800f1c0:	2010      	movs	r0, #16
 800f1c2:	4402      	add	r2, r0
 800f1c4:	2b07      	cmp	r3, #7
 800f1c6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800f1ca:	6070      	str	r0, [r6, #4]
 800f1cc:	dd06      	ble.n	800f1dc <_vfiprintf_r+0x7fc>
 800f1ce:	9800      	ldr	r0, [sp, #0]
 800f1d0:	aa0e      	add	r2, sp, #56	@ 0x38
 800f1d2:	4639      	mov	r1, r7
 800f1d4:	f7ff fbd2 	bl	800e97c <__sprint_r>
 800f1d8:	bb58      	cbnz	r0, 800f232 <_vfiprintf_r+0x852>
 800f1da:	a911      	add	r1, sp, #68	@ 0x44
 800f1dc:	3c10      	subs	r4, #16
 800f1de:	460e      	mov	r6, r1
 800f1e0:	e6bd      	b.n	800ef5e <_vfiprintf_r+0x57e>
 800f1e2:	460e      	mov	r6, r1
 800f1e4:	e6d6      	b.n	800ef94 <_vfiprintf_r+0x5b4>
 800f1e6:	9800      	ldr	r0, [sp, #0]
 800f1e8:	aa0e      	add	r2, sp, #56	@ 0x38
 800f1ea:	4639      	mov	r1, r7
 800f1ec:	f7ff fbc6 	bl	800e97c <__sprint_r>
 800f1f0:	b9f8      	cbnz	r0, 800f232 <_vfiprintf_r+0x852>
 800f1f2:	ab11      	add	r3, sp, #68	@ 0x44
 800f1f4:	e6de      	b.n	800efb4 <_vfiprintf_r+0x5d4>
 800f1f6:	9a02      	ldr	r2, [sp, #8]
 800f1f8:	9904      	ldr	r1, [sp, #16]
 800f1fa:	1a54      	subs	r4, r2, r1
 800f1fc:	2c00      	cmp	r4, #0
 800f1fe:	f77f aedd 	ble.w	800efbc <_vfiprintf_r+0x5dc>
 800f202:	4d39      	ldr	r5, [pc, #228]	@ (800f2e8 <_vfiprintf_r+0x908>)
 800f204:	2610      	movs	r6, #16
 800f206:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800f20a:	2c10      	cmp	r4, #16
 800f20c:	f102 0201 	add.w	r2, r2, #1
 800f210:	601d      	str	r5, [r3, #0]
 800f212:	dc1d      	bgt.n	800f250 <_vfiprintf_r+0x870>
 800f214:	605c      	str	r4, [r3, #4]
 800f216:	2a07      	cmp	r2, #7
 800f218:	440c      	add	r4, r1
 800f21a:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800f21e:	f77f aecd 	ble.w	800efbc <_vfiprintf_r+0x5dc>
 800f222:	9800      	ldr	r0, [sp, #0]
 800f224:	aa0e      	add	r2, sp, #56	@ 0x38
 800f226:	4639      	mov	r1, r7
 800f228:	f7ff fba8 	bl	800e97c <__sprint_r>
 800f22c:	2800      	cmp	r0, #0
 800f22e:	f43f aec5 	beq.w	800efbc <_vfiprintf_r+0x5dc>
 800f232:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f234:	07d9      	lsls	r1, r3, #31
 800f236:	d405      	bmi.n	800f244 <_vfiprintf_r+0x864>
 800f238:	89bb      	ldrh	r3, [r7, #12]
 800f23a:	059a      	lsls	r2, r3, #22
 800f23c:	d402      	bmi.n	800f244 <_vfiprintf_r+0x864>
 800f23e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f240:	f000 fc9f 	bl	800fb82 <__retarget_lock_release_recursive>
 800f244:	89bb      	ldrh	r3, [r7, #12]
 800f246:	065b      	lsls	r3, r3, #25
 800f248:	f57f abfb 	bpl.w	800ea42 <_vfiprintf_r+0x62>
 800f24c:	f7ff bbf6 	b.w	800ea3c <_vfiprintf_r+0x5c>
 800f250:	3110      	adds	r1, #16
 800f252:	2a07      	cmp	r2, #7
 800f254:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800f258:	605e      	str	r6, [r3, #4]
 800f25a:	dc02      	bgt.n	800f262 <_vfiprintf_r+0x882>
 800f25c:	3308      	adds	r3, #8
 800f25e:	3c10      	subs	r4, #16
 800f260:	e7d1      	b.n	800f206 <_vfiprintf_r+0x826>
 800f262:	9800      	ldr	r0, [sp, #0]
 800f264:	aa0e      	add	r2, sp, #56	@ 0x38
 800f266:	4639      	mov	r1, r7
 800f268:	f7ff fb88 	bl	800e97c <__sprint_r>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d1e0      	bne.n	800f232 <_vfiprintf_r+0x852>
 800f270:	ab11      	add	r3, sp, #68	@ 0x44
 800f272:	e7f4      	b.n	800f25e <_vfiprintf_r+0x87e>
 800f274:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f276:	b913      	cbnz	r3, 800f27e <_vfiprintf_r+0x89e>
 800f278:	2300      	movs	r3, #0
 800f27a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f27c:	e7d9      	b.n	800f232 <_vfiprintf_r+0x852>
 800f27e:	9800      	ldr	r0, [sp, #0]
 800f280:	aa0e      	add	r2, sp, #56	@ 0x38
 800f282:	4639      	mov	r1, r7
 800f284:	f7ff fb7a 	bl	800e97c <__sprint_r>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d0f5      	beq.n	800f278 <_vfiprintf_r+0x898>
 800f28c:	e7d1      	b.n	800f232 <_vfiprintf_r+0x852>
 800f28e:	ea54 0205 	orrs.w	r2, r4, r5
 800f292:	f8cd a010 	str.w	sl, [sp, #16]
 800f296:	f43f ada6 	beq.w	800ede6 <_vfiprintf_r+0x406>
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	f43f aedf 	beq.w	800f05e <_vfiprintf_r+0x67e>
 800f2a0:	2b02      	cmp	r3, #2
 800f2a2:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800f2a6:	f43f af28 	beq.w	800f0fa <_vfiprintf_r+0x71a>
 800f2aa:	f004 0307 	and.w	r3, r4, #7
 800f2ae:	08e4      	lsrs	r4, r4, #3
 800f2b0:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800f2b4:	08ed      	lsrs	r5, r5, #3
 800f2b6:	3330      	adds	r3, #48	@ 0x30
 800f2b8:	ea54 0105 	orrs.w	r1, r4, r5
 800f2bc:	464a      	mov	r2, r9
 800f2be:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800f2c2:	d1f2      	bne.n	800f2aa <_vfiprintf_r+0x8ca>
 800f2c4:	9904      	ldr	r1, [sp, #16]
 800f2c6:	07c8      	lsls	r0, r1, #31
 800f2c8:	d506      	bpl.n	800f2d8 <_vfiprintf_r+0x8f8>
 800f2ca:	2b30      	cmp	r3, #48	@ 0x30
 800f2cc:	d004      	beq.n	800f2d8 <_vfiprintf_r+0x8f8>
 800f2ce:	2330      	movs	r3, #48	@ 0x30
 800f2d0:	f809 3c01 	strb.w	r3, [r9, #-1]
 800f2d4:	f1a2 0902 	sub.w	r9, r2, #2
 800f2d8:	ab3a      	add	r3, sp, #232	@ 0xe8
 800f2da:	eba3 0309 	sub.w	r3, r3, r9
 800f2de:	9c01      	ldr	r4, [sp, #4]
 800f2e0:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	e5bb      	b.n	800ee60 <_vfiprintf_r+0x480>
 800f2e8:	08014a92 	.word	0x08014a92
 800f2ec:	08014a82 	.word	0x08014a82

0800f2f0 <__sbprintf>:
 800f2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2f2:	461f      	mov	r7, r3
 800f2f4:	898b      	ldrh	r3, [r1, #12]
 800f2f6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800f2fa:	f023 0302 	bic.w	r3, r3, #2
 800f2fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f302:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800f304:	9319      	str	r3, [sp, #100]	@ 0x64
 800f306:	89cb      	ldrh	r3, [r1, #14]
 800f308:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f30c:	69cb      	ldr	r3, [r1, #28]
 800f30e:	9307      	str	r3, [sp, #28]
 800f310:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800f312:	9309      	str	r3, [sp, #36]	@ 0x24
 800f314:	ab1a      	add	r3, sp, #104	@ 0x68
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	9304      	str	r3, [sp, #16]
 800f31a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f31e:	4615      	mov	r5, r2
 800f320:	4606      	mov	r6, r0
 800f322:	9302      	str	r3, [sp, #8]
 800f324:	9305      	str	r3, [sp, #20]
 800f326:	a816      	add	r0, sp, #88	@ 0x58
 800f328:	2300      	movs	r3, #0
 800f32a:	460c      	mov	r4, r1
 800f32c:	9306      	str	r3, [sp, #24]
 800f32e:	f000 fc25 	bl	800fb7c <__retarget_lock_init_recursive>
 800f332:	462a      	mov	r2, r5
 800f334:	463b      	mov	r3, r7
 800f336:	4669      	mov	r1, sp
 800f338:	4630      	mov	r0, r6
 800f33a:	f7ff fb51 	bl	800e9e0 <_vfiprintf_r>
 800f33e:	1e05      	subs	r5, r0, #0
 800f340:	db07      	blt.n	800f352 <__sbprintf+0x62>
 800f342:	4669      	mov	r1, sp
 800f344:	4630      	mov	r0, r6
 800f346:	f000 f89b 	bl	800f480 <_fflush_r>
 800f34a:	2800      	cmp	r0, #0
 800f34c:	bf18      	it	ne
 800f34e:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 800f352:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f356:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800f358:	065b      	lsls	r3, r3, #25
 800f35a:	bf42      	ittt	mi
 800f35c:	89a3      	ldrhmi	r3, [r4, #12]
 800f35e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800f362:	81a3      	strhmi	r3, [r4, #12]
 800f364:	f000 fc0b 	bl	800fb7e <__retarget_lock_close_recursive>
 800f368:	4628      	mov	r0, r5
 800f36a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800f36e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f370 <__sflush_r>:
 800f370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f374:	4605      	mov	r5, r0
 800f376:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800f37a:	0706      	lsls	r6, r0, #28
 800f37c:	460c      	mov	r4, r1
 800f37e:	d457      	bmi.n	800f430 <__sflush_r+0xc0>
 800f380:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800f384:	818b      	strh	r3, [r1, #12]
 800f386:	684b      	ldr	r3, [r1, #4]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	dc02      	bgt.n	800f392 <__sflush_r+0x22>
 800f38c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800f38e:	2b00      	cmp	r3, #0
 800f390:	dd4c      	ble.n	800f42c <__sflush_r+0xbc>
 800f392:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f394:	2e00      	cmp	r6, #0
 800f396:	d049      	beq.n	800f42c <__sflush_r+0xbc>
 800f398:	2300      	movs	r3, #0
 800f39a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800f39e:	682f      	ldr	r7, [r5, #0]
 800f3a0:	69e1      	ldr	r1, [r4, #28]
 800f3a2:	602b      	str	r3, [r5, #0]
 800f3a4:	d034      	beq.n	800f410 <__sflush_r+0xa0>
 800f3a6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800f3a8:	89a3      	ldrh	r3, [r4, #12]
 800f3aa:	0759      	lsls	r1, r3, #29
 800f3ac:	d505      	bpl.n	800f3ba <__sflush_r+0x4a>
 800f3ae:	6863      	ldr	r3, [r4, #4]
 800f3b0:	1ad2      	subs	r2, r2, r3
 800f3b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f3b4:	b10b      	cbz	r3, 800f3ba <__sflush_r+0x4a>
 800f3b6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f3b8:	1ad2      	subs	r2, r2, r3
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f3be:	69e1      	ldr	r1, [r4, #28]
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	47b0      	blx	r6
 800f3c4:	1c43      	adds	r3, r0, #1
 800f3c6:	d106      	bne.n	800f3d6 <__sflush_r+0x66>
 800f3c8:	682a      	ldr	r2, [r5, #0]
 800f3ca:	2a1d      	cmp	r2, #29
 800f3cc:	d848      	bhi.n	800f460 <__sflush_r+0xf0>
 800f3ce:	4b2b      	ldr	r3, [pc, #172]	@ (800f47c <__sflush_r+0x10c>)
 800f3d0:	4113      	asrs	r3, r2
 800f3d2:	07de      	lsls	r6, r3, #31
 800f3d4:	d444      	bmi.n	800f460 <__sflush_r+0xf0>
 800f3d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3da:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f3de:	81a2      	strh	r2, [r4, #12]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	6062      	str	r2, [r4, #4]
 800f3e4:	04d9      	lsls	r1, r3, #19
 800f3e6:	6922      	ldr	r2, [r4, #16]
 800f3e8:	6022      	str	r2, [r4, #0]
 800f3ea:	d504      	bpl.n	800f3f6 <__sflush_r+0x86>
 800f3ec:	1c42      	adds	r2, r0, #1
 800f3ee:	d101      	bne.n	800f3f4 <__sflush_r+0x84>
 800f3f0:	682b      	ldr	r3, [r5, #0]
 800f3f2:	b903      	cbnz	r3, 800f3f6 <__sflush_r+0x86>
 800f3f4:	6520      	str	r0, [r4, #80]	@ 0x50
 800f3f6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f3f8:	602f      	str	r7, [r5, #0]
 800f3fa:	b1b9      	cbz	r1, 800f42c <__sflush_r+0xbc>
 800f3fc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800f400:	4299      	cmp	r1, r3
 800f402:	d002      	beq.n	800f40a <__sflush_r+0x9a>
 800f404:	4628      	mov	r0, r5
 800f406:	f001 fa47 	bl	8010898 <_free_r>
 800f40a:	2300      	movs	r3, #0
 800f40c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f40e:	e00d      	b.n	800f42c <__sflush_r+0xbc>
 800f410:	2301      	movs	r3, #1
 800f412:	4628      	mov	r0, r5
 800f414:	47b0      	blx	r6
 800f416:	4602      	mov	r2, r0
 800f418:	1c50      	adds	r0, r2, #1
 800f41a:	d1c5      	bne.n	800f3a8 <__sflush_r+0x38>
 800f41c:	682b      	ldr	r3, [r5, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d0c2      	beq.n	800f3a8 <__sflush_r+0x38>
 800f422:	2b1d      	cmp	r3, #29
 800f424:	d001      	beq.n	800f42a <__sflush_r+0xba>
 800f426:	2b16      	cmp	r3, #22
 800f428:	d11a      	bne.n	800f460 <__sflush_r+0xf0>
 800f42a:	602f      	str	r7, [r5, #0]
 800f42c:	2000      	movs	r0, #0
 800f42e:	e01e      	b.n	800f46e <__sflush_r+0xfe>
 800f430:	690f      	ldr	r7, [r1, #16]
 800f432:	2f00      	cmp	r7, #0
 800f434:	d0fa      	beq.n	800f42c <__sflush_r+0xbc>
 800f436:	0783      	lsls	r3, r0, #30
 800f438:	680e      	ldr	r6, [r1, #0]
 800f43a:	bf08      	it	eq
 800f43c:	694b      	ldreq	r3, [r1, #20]
 800f43e:	600f      	str	r7, [r1, #0]
 800f440:	bf18      	it	ne
 800f442:	2300      	movne	r3, #0
 800f444:	eba6 0807 	sub.w	r8, r6, r7
 800f448:	608b      	str	r3, [r1, #8]
 800f44a:	f1b8 0f00 	cmp.w	r8, #0
 800f44e:	dded      	ble.n	800f42c <__sflush_r+0xbc>
 800f450:	69e1      	ldr	r1, [r4, #28]
 800f452:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800f454:	4643      	mov	r3, r8
 800f456:	463a      	mov	r2, r7
 800f458:	4628      	mov	r0, r5
 800f45a:	47b0      	blx	r6
 800f45c:	2800      	cmp	r0, #0
 800f45e:	dc08      	bgt.n	800f472 <__sflush_r+0x102>
 800f460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f468:	81a3      	strh	r3, [r4, #12]
 800f46a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f472:	4407      	add	r7, r0
 800f474:	eba8 0800 	sub.w	r8, r8, r0
 800f478:	e7e7      	b.n	800f44a <__sflush_r+0xda>
 800f47a:	bf00      	nop
 800f47c:	dfbffffe 	.word	0xdfbffffe

0800f480 <_fflush_r>:
 800f480:	b538      	push	{r3, r4, r5, lr}
 800f482:	460c      	mov	r4, r1
 800f484:	4605      	mov	r5, r0
 800f486:	b118      	cbz	r0, 800f490 <_fflush_r+0x10>
 800f488:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f48a:	b90b      	cbnz	r3, 800f490 <_fflush_r+0x10>
 800f48c:	f000 f8ca 	bl	800f624 <__sinit>
 800f490:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800f494:	b1b8      	cbz	r0, 800f4c6 <_fflush_r+0x46>
 800f496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f498:	07db      	lsls	r3, r3, #31
 800f49a:	d404      	bmi.n	800f4a6 <_fflush_r+0x26>
 800f49c:	0581      	lsls	r1, r0, #22
 800f49e:	d402      	bmi.n	800f4a6 <_fflush_r+0x26>
 800f4a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4a2:	f000 fb6d 	bl	800fb80 <__retarget_lock_acquire_recursive>
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	4621      	mov	r1, r4
 800f4aa:	f7ff ff61 	bl	800f370 <__sflush_r>
 800f4ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4b0:	07da      	lsls	r2, r3, #31
 800f4b2:	4605      	mov	r5, r0
 800f4b4:	d405      	bmi.n	800f4c2 <_fflush_r+0x42>
 800f4b6:	89a3      	ldrh	r3, [r4, #12]
 800f4b8:	059b      	lsls	r3, r3, #22
 800f4ba:	d402      	bmi.n	800f4c2 <_fflush_r+0x42>
 800f4bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4be:	f000 fb60 	bl	800fb82 <__retarget_lock_release_recursive>
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	bd38      	pop	{r3, r4, r5, pc}
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	e7fb      	b.n	800f4c2 <_fflush_r+0x42>
	...

0800f4cc <sprintf>:
 800f4cc:	b40e      	push	{r1, r2, r3}
 800f4ce:	b500      	push	{lr}
 800f4d0:	b09c      	sub	sp, #112	@ 0x70
 800f4d2:	ab1d      	add	r3, sp, #116	@ 0x74
 800f4d4:	9002      	str	r0, [sp, #8]
 800f4d6:	9006      	str	r0, [sp, #24]
 800f4d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f4dc:	4809      	ldr	r0, [pc, #36]	@ (800f504 <sprintf+0x38>)
 800f4de:	9107      	str	r1, [sp, #28]
 800f4e0:	9104      	str	r1, [sp, #16]
 800f4e2:	4909      	ldr	r1, [pc, #36]	@ (800f508 <sprintf+0x3c>)
 800f4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4e8:	9105      	str	r1, [sp, #20]
 800f4ea:	6800      	ldr	r0, [r0, #0]
 800f4ec:	9301      	str	r3, [sp, #4]
 800f4ee:	a902      	add	r1, sp, #8
 800f4f0:	f001 fcde 	bl	8010eb0 <_svfprintf_r>
 800f4f4:	9b02      	ldr	r3, [sp, #8]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	701a      	strb	r2, [r3, #0]
 800f4fa:	b01c      	add	sp, #112	@ 0x70
 800f4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f500:	b003      	add	sp, #12
 800f502:	4770      	bx	lr
 800f504:	24000188 	.word	0x24000188
 800f508:	ffff0208 	.word	0xffff0208

0800f50c <std>:
 800f50c:	2300      	movs	r3, #0
 800f50e:	b510      	push	{r4, lr}
 800f510:	4604      	mov	r4, r0
 800f512:	e9c0 3300 	strd	r3, r3, [r0]
 800f516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f51a:	6083      	str	r3, [r0, #8]
 800f51c:	8181      	strh	r1, [r0, #12]
 800f51e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f520:	81c2      	strh	r2, [r0, #14]
 800f522:	6183      	str	r3, [r0, #24]
 800f524:	4619      	mov	r1, r3
 800f526:	2208      	movs	r2, #8
 800f528:	305c      	adds	r0, #92	@ 0x5c
 800f52a:	f000 fad7 	bl	800fadc <memset>
 800f52e:	4b0d      	ldr	r3, [pc, #52]	@ (800f564 <std+0x58>)
 800f530:	6223      	str	r3, [r4, #32]
 800f532:	4b0d      	ldr	r3, [pc, #52]	@ (800f568 <std+0x5c>)
 800f534:	6263      	str	r3, [r4, #36]	@ 0x24
 800f536:	4b0d      	ldr	r3, [pc, #52]	@ (800f56c <std+0x60>)
 800f538:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f53a:	4b0d      	ldr	r3, [pc, #52]	@ (800f570 <std+0x64>)
 800f53c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f53e:	4b0d      	ldr	r3, [pc, #52]	@ (800f574 <std+0x68>)
 800f540:	61e4      	str	r4, [r4, #28]
 800f542:	429c      	cmp	r4, r3
 800f544:	d006      	beq.n	800f554 <std+0x48>
 800f546:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f54a:	4294      	cmp	r4, r2
 800f54c:	d002      	beq.n	800f554 <std+0x48>
 800f54e:	33d0      	adds	r3, #208	@ 0xd0
 800f550:	429c      	cmp	r4, r3
 800f552:	d105      	bne.n	800f560 <std+0x54>
 800f554:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f55c:	f000 bb0e 	b.w	800fb7c <__retarget_lock_init_recursive>
 800f560:	bd10      	pop	{r4, pc}
 800f562:	bf00      	nop
 800f564:	08012cfd 	.word	0x08012cfd
 800f568:	08012d1f 	.word	0x08012d1f
 800f56c:	08012d57 	.word	0x08012d57
 800f570:	08012d7b 	.word	0x08012d7b
 800f574:	24015210 	.word	0x24015210

0800f578 <stdio_exit_handler>:
 800f578:	4a02      	ldr	r2, [pc, #8]	@ (800f584 <stdio_exit_handler+0xc>)
 800f57a:	4903      	ldr	r1, [pc, #12]	@ (800f588 <stdio_exit_handler+0x10>)
 800f57c:	4803      	ldr	r0, [pc, #12]	@ (800f58c <stdio_exit_handler+0x14>)
 800f57e:	f000 b9b5 	b.w	800f8ec <_fwalk_sglue>
 800f582:	bf00      	nop
 800f584:	24000010 	.word	0x24000010
 800f588:	08012901 	.word	0x08012901
 800f58c:	24000190 	.word	0x24000190

0800f590 <cleanup_stdio>:
 800f590:	6841      	ldr	r1, [r0, #4]
 800f592:	4b0c      	ldr	r3, [pc, #48]	@ (800f5c4 <cleanup_stdio+0x34>)
 800f594:	4299      	cmp	r1, r3
 800f596:	b510      	push	{r4, lr}
 800f598:	4604      	mov	r4, r0
 800f59a:	d001      	beq.n	800f5a0 <cleanup_stdio+0x10>
 800f59c:	f003 f9b0 	bl	8012900 <_fclose_r>
 800f5a0:	68a1      	ldr	r1, [r4, #8]
 800f5a2:	4b09      	ldr	r3, [pc, #36]	@ (800f5c8 <cleanup_stdio+0x38>)
 800f5a4:	4299      	cmp	r1, r3
 800f5a6:	d002      	beq.n	800f5ae <cleanup_stdio+0x1e>
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f003 f9a9 	bl	8012900 <_fclose_r>
 800f5ae:	68e1      	ldr	r1, [r4, #12]
 800f5b0:	4b06      	ldr	r3, [pc, #24]	@ (800f5cc <cleanup_stdio+0x3c>)
 800f5b2:	4299      	cmp	r1, r3
 800f5b4:	d004      	beq.n	800f5c0 <cleanup_stdio+0x30>
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5bc:	f003 b9a0 	b.w	8012900 <_fclose_r>
 800f5c0:	bd10      	pop	{r4, pc}
 800f5c2:	bf00      	nop
 800f5c4:	24015210 	.word	0x24015210
 800f5c8:	24015278 	.word	0x24015278
 800f5cc:	240152e0 	.word	0x240152e0

0800f5d0 <global_stdio_init.part.0>:
 800f5d0:	b510      	push	{r4, lr}
 800f5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800f600 <global_stdio_init.part.0+0x30>)
 800f5d4:	4c0b      	ldr	r4, [pc, #44]	@ (800f604 <global_stdio_init.part.0+0x34>)
 800f5d6:	4a0c      	ldr	r2, [pc, #48]	@ (800f608 <global_stdio_init.part.0+0x38>)
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	4620      	mov	r0, r4
 800f5dc:	2200      	movs	r2, #0
 800f5de:	2104      	movs	r1, #4
 800f5e0:	f7ff ff94 	bl	800f50c <std>
 800f5e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	2109      	movs	r1, #9
 800f5ec:	f7ff ff8e 	bl	800f50c <std>
 800f5f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f5f4:	2202      	movs	r2, #2
 800f5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5fa:	2112      	movs	r1, #18
 800f5fc:	f7ff bf86 	b.w	800f50c <std>
 800f600:	24015348 	.word	0x24015348
 800f604:	24015210 	.word	0x24015210
 800f608:	0800f579 	.word	0x0800f579

0800f60c <__sfp_lock_acquire>:
 800f60c:	4801      	ldr	r0, [pc, #4]	@ (800f614 <__sfp_lock_acquire+0x8>)
 800f60e:	f000 bab7 	b.w	800fb80 <__retarget_lock_acquire_recursive>
 800f612:	bf00      	nop
 800f614:	2401534e 	.word	0x2401534e

0800f618 <__sfp_lock_release>:
 800f618:	4801      	ldr	r0, [pc, #4]	@ (800f620 <__sfp_lock_release+0x8>)
 800f61a:	f000 bab2 	b.w	800fb82 <__retarget_lock_release_recursive>
 800f61e:	bf00      	nop
 800f620:	2401534e 	.word	0x2401534e

0800f624 <__sinit>:
 800f624:	b510      	push	{r4, lr}
 800f626:	4604      	mov	r4, r0
 800f628:	f7ff fff0 	bl	800f60c <__sfp_lock_acquire>
 800f62c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f62e:	b11b      	cbz	r3, 800f638 <__sinit+0x14>
 800f630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f634:	f7ff bff0 	b.w	800f618 <__sfp_lock_release>
 800f638:	4b04      	ldr	r3, [pc, #16]	@ (800f64c <__sinit+0x28>)
 800f63a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f63c:	4b04      	ldr	r3, [pc, #16]	@ (800f650 <__sinit+0x2c>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1f5      	bne.n	800f630 <__sinit+0xc>
 800f644:	f7ff ffc4 	bl	800f5d0 <global_stdio_init.part.0>
 800f648:	e7f2      	b.n	800f630 <__sinit+0xc>
 800f64a:	bf00      	nop
 800f64c:	0800f591 	.word	0x0800f591
 800f650:	24015348 	.word	0x24015348

0800f654 <__sfvwrite_r>:
 800f654:	6893      	ldr	r3, [r2, #8]
 800f656:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65a:	4606      	mov	r6, r0
 800f65c:	460c      	mov	r4, r1
 800f65e:	4691      	mov	r9, r2
 800f660:	b91b      	cbnz	r3, 800f66a <__sfvwrite_r+0x16>
 800f662:	2000      	movs	r0, #0
 800f664:	b003      	add	sp, #12
 800f666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66a:	898b      	ldrh	r3, [r1, #12]
 800f66c:	0718      	lsls	r0, r3, #28
 800f66e:	d550      	bpl.n	800f712 <__sfvwrite_r+0xbe>
 800f670:	690b      	ldr	r3, [r1, #16]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d04d      	beq.n	800f712 <__sfvwrite_r+0xbe>
 800f676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f67a:	f8d9 8000 	ldr.w	r8, [r9]
 800f67e:	f013 0702 	ands.w	r7, r3, #2
 800f682:	d16b      	bne.n	800f75c <__sfvwrite_r+0x108>
 800f684:	f013 0301 	ands.w	r3, r3, #1
 800f688:	f000 809c 	beq.w	800f7c4 <__sfvwrite_r+0x170>
 800f68c:	4638      	mov	r0, r7
 800f68e:	46ba      	mov	sl, r7
 800f690:	46bb      	mov	fp, r7
 800f692:	f1bb 0f00 	cmp.w	fp, #0
 800f696:	f000 8103 	beq.w	800f8a0 <__sfvwrite_r+0x24c>
 800f69a:	b950      	cbnz	r0, 800f6b2 <__sfvwrite_r+0x5e>
 800f69c:	465a      	mov	r2, fp
 800f69e:	210a      	movs	r1, #10
 800f6a0:	4650      	mov	r0, sl
 800f6a2:	f7f0 fe1d 	bl	80002e0 <memchr>
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	f000 8100 	beq.w	800f8ac <__sfvwrite_r+0x258>
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	eba0 070a 	sub.w	r7, r0, sl
 800f6b2:	6820      	ldr	r0, [r4, #0]
 800f6b4:	6921      	ldr	r1, [r4, #16]
 800f6b6:	68a5      	ldr	r5, [r4, #8]
 800f6b8:	6963      	ldr	r3, [r4, #20]
 800f6ba:	455f      	cmp	r7, fp
 800f6bc:	463a      	mov	r2, r7
 800f6be:	bf28      	it	cs
 800f6c0:	465a      	movcs	r2, fp
 800f6c2:	4288      	cmp	r0, r1
 800f6c4:	f240 80f5 	bls.w	800f8b2 <__sfvwrite_r+0x25e>
 800f6c8:	441d      	add	r5, r3
 800f6ca:	42aa      	cmp	r2, r5
 800f6cc:	f340 80f1 	ble.w	800f8b2 <__sfvwrite_r+0x25e>
 800f6d0:	4651      	mov	r1, sl
 800f6d2:	462a      	mov	r2, r5
 800f6d4:	f000 f9e8 	bl	800faa8 <memmove>
 800f6d8:	6823      	ldr	r3, [r4, #0]
 800f6da:	442b      	add	r3, r5
 800f6dc:	6023      	str	r3, [r4, #0]
 800f6de:	4621      	mov	r1, r4
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	f7ff fecd 	bl	800f480 <_fflush_r>
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d167      	bne.n	800f7ba <__sfvwrite_r+0x166>
 800f6ea:	1b7f      	subs	r7, r7, r5
 800f6ec:	f040 80f9 	bne.w	800f8e2 <__sfvwrite_r+0x28e>
 800f6f0:	4621      	mov	r1, r4
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	f7ff fec4 	bl	800f480 <_fflush_r>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d15e      	bne.n	800f7ba <__sfvwrite_r+0x166>
 800f6fc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f700:	1b5b      	subs	r3, r3, r5
 800f702:	44aa      	add	sl, r5
 800f704:	ebab 0b05 	sub.w	fp, fp, r5
 800f708:	f8c9 3008 	str.w	r3, [r9, #8]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d1c0      	bne.n	800f692 <__sfvwrite_r+0x3e>
 800f710:	e7a7      	b.n	800f662 <__sfvwrite_r+0xe>
 800f712:	4621      	mov	r1, r4
 800f714:	4630      	mov	r0, r6
 800f716:	f000 f907 	bl	800f928 <__swsetup_r>
 800f71a:	2800      	cmp	r0, #0
 800f71c:	d0ab      	beq.n	800f676 <__sfvwrite_r+0x22>
 800f71e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f722:	e79f      	b.n	800f664 <__sfvwrite_r+0x10>
 800f724:	e9d8 a500 	ldrd	sl, r5, [r8]
 800f728:	f108 0808 	add.w	r8, r8, #8
 800f72c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f730:	69e1      	ldr	r1, [r4, #28]
 800f732:	2d00      	cmp	r5, #0
 800f734:	d0f6      	beq.n	800f724 <__sfvwrite_r+0xd0>
 800f736:	42bd      	cmp	r5, r7
 800f738:	462b      	mov	r3, r5
 800f73a:	4652      	mov	r2, sl
 800f73c:	bf28      	it	cs
 800f73e:	463b      	movcs	r3, r7
 800f740:	4630      	mov	r0, r6
 800f742:	47d8      	blx	fp
 800f744:	2800      	cmp	r0, #0
 800f746:	dd38      	ble.n	800f7ba <__sfvwrite_r+0x166>
 800f748:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f74c:	1a1b      	subs	r3, r3, r0
 800f74e:	4482      	add	sl, r0
 800f750:	1a2d      	subs	r5, r5, r0
 800f752:	f8c9 3008 	str.w	r3, [r9, #8]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d1e8      	bne.n	800f72c <__sfvwrite_r+0xd8>
 800f75a:	e782      	b.n	800f662 <__sfvwrite_r+0xe>
 800f75c:	f04f 0a00 	mov.w	sl, #0
 800f760:	4f61      	ldr	r7, [pc, #388]	@ (800f8e8 <__sfvwrite_r+0x294>)
 800f762:	4655      	mov	r5, sl
 800f764:	e7e2      	b.n	800f72c <__sfvwrite_r+0xd8>
 800f766:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800f76a:	f108 0808 	add.w	r8, r8, #8
 800f76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f772:	6820      	ldr	r0, [r4, #0]
 800f774:	68a2      	ldr	r2, [r4, #8]
 800f776:	f1ba 0f00 	cmp.w	sl, #0
 800f77a:	d0f4      	beq.n	800f766 <__sfvwrite_r+0x112>
 800f77c:	0599      	lsls	r1, r3, #22
 800f77e:	d563      	bpl.n	800f848 <__sfvwrite_r+0x1f4>
 800f780:	4552      	cmp	r2, sl
 800f782:	d836      	bhi.n	800f7f2 <__sfvwrite_r+0x19e>
 800f784:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800f788:	d033      	beq.n	800f7f2 <__sfvwrite_r+0x19e>
 800f78a:	6921      	ldr	r1, [r4, #16]
 800f78c:	6965      	ldr	r5, [r4, #20]
 800f78e:	eba0 0b01 	sub.w	fp, r0, r1
 800f792:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f79a:	f10b 0201 	add.w	r2, fp, #1
 800f79e:	106d      	asrs	r5, r5, #1
 800f7a0:	4452      	add	r2, sl
 800f7a2:	4295      	cmp	r5, r2
 800f7a4:	bf38      	it	cc
 800f7a6:	4615      	movcc	r5, r2
 800f7a8:	055b      	lsls	r3, r3, #21
 800f7aa:	d53d      	bpl.n	800f828 <__sfvwrite_r+0x1d4>
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	f001 f932 	bl	8010a18 <_malloc_r>
 800f7b4:	b948      	cbnz	r0, 800f7ca <__sfvwrite_r+0x176>
 800f7b6:	230c      	movs	r3, #12
 800f7b8:	6033      	str	r3, [r6, #0]
 800f7ba:	89a3      	ldrh	r3, [r4, #12]
 800f7bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7c0:	81a3      	strh	r3, [r4, #12]
 800f7c2:	e7ac      	b.n	800f71e <__sfvwrite_r+0xca>
 800f7c4:	461f      	mov	r7, r3
 800f7c6:	469a      	mov	sl, r3
 800f7c8:	e7d1      	b.n	800f76e <__sfvwrite_r+0x11a>
 800f7ca:	465a      	mov	r2, fp
 800f7cc:	6921      	ldr	r1, [r4, #16]
 800f7ce:	9001      	str	r0, [sp, #4]
 800f7d0:	f000 f9d8 	bl	800fb84 <memcpy>
 800f7d4:	89a2      	ldrh	r2, [r4, #12]
 800f7d6:	9b01      	ldr	r3, [sp, #4]
 800f7d8:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800f7dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800f7e0:	81a2      	strh	r2, [r4, #12]
 800f7e2:	6123      	str	r3, [r4, #16]
 800f7e4:	6165      	str	r5, [r4, #20]
 800f7e6:	445b      	add	r3, fp
 800f7e8:	eba5 050b 	sub.w	r5, r5, fp
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	4652      	mov	r2, sl
 800f7f0:	60a5      	str	r5, [r4, #8]
 800f7f2:	4552      	cmp	r2, sl
 800f7f4:	bf28      	it	cs
 800f7f6:	4652      	movcs	r2, sl
 800f7f8:	6820      	ldr	r0, [r4, #0]
 800f7fa:	9201      	str	r2, [sp, #4]
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	f000 f953 	bl	800faa8 <memmove>
 800f802:	68a3      	ldr	r3, [r4, #8]
 800f804:	9a01      	ldr	r2, [sp, #4]
 800f806:	1a9b      	subs	r3, r3, r2
 800f808:	60a3      	str	r3, [r4, #8]
 800f80a:	6823      	ldr	r3, [r4, #0]
 800f80c:	4413      	add	r3, r2
 800f80e:	4655      	mov	r5, sl
 800f810:	6023      	str	r3, [r4, #0]
 800f812:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f816:	1b5b      	subs	r3, r3, r5
 800f818:	442f      	add	r7, r5
 800f81a:	ebaa 0a05 	sub.w	sl, sl, r5
 800f81e:	f8c9 3008 	str.w	r3, [r9, #8]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1a3      	bne.n	800f76e <__sfvwrite_r+0x11a>
 800f826:	e71c      	b.n	800f662 <__sfvwrite_r+0xe>
 800f828:	462a      	mov	r2, r5
 800f82a:	4630      	mov	r0, r6
 800f82c:	f003 f8be 	bl	80129ac <_realloc_r>
 800f830:	4603      	mov	r3, r0
 800f832:	2800      	cmp	r0, #0
 800f834:	d1d5      	bne.n	800f7e2 <__sfvwrite_r+0x18e>
 800f836:	6921      	ldr	r1, [r4, #16]
 800f838:	4630      	mov	r0, r6
 800f83a:	f001 f82d 	bl	8010898 <_free_r>
 800f83e:	89a3      	ldrh	r3, [r4, #12]
 800f840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f844:	81a3      	strh	r3, [r4, #12]
 800f846:	e7b6      	b.n	800f7b6 <__sfvwrite_r+0x162>
 800f848:	6923      	ldr	r3, [r4, #16]
 800f84a:	4283      	cmp	r3, r0
 800f84c:	d302      	bcc.n	800f854 <__sfvwrite_r+0x200>
 800f84e:	6961      	ldr	r1, [r4, #20]
 800f850:	4551      	cmp	r1, sl
 800f852:	d915      	bls.n	800f880 <__sfvwrite_r+0x22c>
 800f854:	4552      	cmp	r2, sl
 800f856:	bf28      	it	cs
 800f858:	4652      	movcs	r2, sl
 800f85a:	4639      	mov	r1, r7
 800f85c:	4615      	mov	r5, r2
 800f85e:	f000 f923 	bl	800faa8 <memmove>
 800f862:	68a3      	ldr	r3, [r4, #8]
 800f864:	6822      	ldr	r2, [r4, #0]
 800f866:	1b5b      	subs	r3, r3, r5
 800f868:	442a      	add	r2, r5
 800f86a:	60a3      	str	r3, [r4, #8]
 800f86c:	6022      	str	r2, [r4, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d1cf      	bne.n	800f812 <__sfvwrite_r+0x1be>
 800f872:	4621      	mov	r1, r4
 800f874:	4630      	mov	r0, r6
 800f876:	f7ff fe03 	bl	800f480 <_fflush_r>
 800f87a:	2800      	cmp	r0, #0
 800f87c:	d0c9      	beq.n	800f812 <__sfvwrite_r+0x1be>
 800f87e:	e79c      	b.n	800f7ba <__sfvwrite_r+0x166>
 800f880:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f884:	4553      	cmp	r3, sl
 800f886:	bf28      	it	cs
 800f888:	4653      	movcs	r3, sl
 800f88a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f88c:	fb93 f3f1 	sdiv	r3, r3, r1
 800f890:	463a      	mov	r2, r7
 800f892:	434b      	muls	r3, r1
 800f894:	4630      	mov	r0, r6
 800f896:	69e1      	ldr	r1, [r4, #28]
 800f898:	47a8      	blx	r5
 800f89a:	1e05      	subs	r5, r0, #0
 800f89c:	dcb9      	bgt.n	800f812 <__sfvwrite_r+0x1be>
 800f89e:	e78c      	b.n	800f7ba <__sfvwrite_r+0x166>
 800f8a0:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800f8a4:	2000      	movs	r0, #0
 800f8a6:	f108 0808 	add.w	r8, r8, #8
 800f8aa:	e6f2      	b.n	800f692 <__sfvwrite_r+0x3e>
 800f8ac:	f10b 0701 	add.w	r7, fp, #1
 800f8b0:	e6ff      	b.n	800f6b2 <__sfvwrite_r+0x5e>
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	dc08      	bgt.n	800f8c8 <__sfvwrite_r+0x274>
 800f8b6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800f8b8:	69e1      	ldr	r1, [r4, #28]
 800f8ba:	4652      	mov	r2, sl
 800f8bc:	4630      	mov	r0, r6
 800f8be:	47a8      	blx	r5
 800f8c0:	1e05      	subs	r5, r0, #0
 800f8c2:	f73f af12 	bgt.w	800f6ea <__sfvwrite_r+0x96>
 800f8c6:	e778      	b.n	800f7ba <__sfvwrite_r+0x166>
 800f8c8:	4651      	mov	r1, sl
 800f8ca:	9201      	str	r2, [sp, #4]
 800f8cc:	f000 f8ec 	bl	800faa8 <memmove>
 800f8d0:	9a01      	ldr	r2, [sp, #4]
 800f8d2:	68a3      	ldr	r3, [r4, #8]
 800f8d4:	1a9b      	subs	r3, r3, r2
 800f8d6:	60a3      	str	r3, [r4, #8]
 800f8d8:	6823      	ldr	r3, [r4, #0]
 800f8da:	4413      	add	r3, r2
 800f8dc:	6023      	str	r3, [r4, #0]
 800f8de:	4615      	mov	r5, r2
 800f8e0:	e703      	b.n	800f6ea <__sfvwrite_r+0x96>
 800f8e2:	2001      	movs	r0, #1
 800f8e4:	e70a      	b.n	800f6fc <__sfvwrite_r+0xa8>
 800f8e6:	bf00      	nop
 800f8e8:	7ffffc00 	.word	0x7ffffc00

0800f8ec <_fwalk_sglue>:
 800f8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8f0:	4607      	mov	r7, r0
 800f8f2:	4688      	mov	r8, r1
 800f8f4:	4614      	mov	r4, r2
 800f8f6:	2600      	movs	r6, #0
 800f8f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8fc:	f1b9 0901 	subs.w	r9, r9, #1
 800f900:	d505      	bpl.n	800f90e <_fwalk_sglue+0x22>
 800f902:	6824      	ldr	r4, [r4, #0]
 800f904:	2c00      	cmp	r4, #0
 800f906:	d1f7      	bne.n	800f8f8 <_fwalk_sglue+0xc>
 800f908:	4630      	mov	r0, r6
 800f90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f90e:	89ab      	ldrh	r3, [r5, #12]
 800f910:	2b01      	cmp	r3, #1
 800f912:	d907      	bls.n	800f924 <_fwalk_sglue+0x38>
 800f914:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f918:	3301      	adds	r3, #1
 800f91a:	d003      	beq.n	800f924 <_fwalk_sglue+0x38>
 800f91c:	4629      	mov	r1, r5
 800f91e:	4638      	mov	r0, r7
 800f920:	47c0      	blx	r8
 800f922:	4306      	orrs	r6, r0
 800f924:	3568      	adds	r5, #104	@ 0x68
 800f926:	e7e9      	b.n	800f8fc <_fwalk_sglue+0x10>

0800f928 <__swsetup_r>:
 800f928:	b538      	push	{r3, r4, r5, lr}
 800f92a:	4b29      	ldr	r3, [pc, #164]	@ (800f9d0 <__swsetup_r+0xa8>)
 800f92c:	4605      	mov	r5, r0
 800f92e:	6818      	ldr	r0, [r3, #0]
 800f930:	460c      	mov	r4, r1
 800f932:	b118      	cbz	r0, 800f93c <__swsetup_r+0x14>
 800f934:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f936:	b90b      	cbnz	r3, 800f93c <__swsetup_r+0x14>
 800f938:	f7ff fe74 	bl	800f624 <__sinit>
 800f93c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f940:	0719      	lsls	r1, r3, #28
 800f942:	d422      	bmi.n	800f98a <__swsetup_r+0x62>
 800f944:	06da      	lsls	r2, r3, #27
 800f946:	d407      	bmi.n	800f958 <__swsetup_r+0x30>
 800f948:	2209      	movs	r2, #9
 800f94a:	602a      	str	r2, [r5, #0]
 800f94c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f950:	81a3      	strh	r3, [r4, #12]
 800f952:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f956:	e033      	b.n	800f9c0 <__swsetup_r+0x98>
 800f958:	0758      	lsls	r0, r3, #29
 800f95a:	d512      	bpl.n	800f982 <__swsetup_r+0x5a>
 800f95c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f95e:	b141      	cbz	r1, 800f972 <__swsetup_r+0x4a>
 800f960:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800f964:	4299      	cmp	r1, r3
 800f966:	d002      	beq.n	800f96e <__swsetup_r+0x46>
 800f968:	4628      	mov	r0, r5
 800f96a:	f000 ff95 	bl	8010898 <_free_r>
 800f96e:	2300      	movs	r3, #0
 800f970:	6323      	str	r3, [r4, #48]	@ 0x30
 800f972:	89a3      	ldrh	r3, [r4, #12]
 800f974:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f978:	81a3      	strh	r3, [r4, #12]
 800f97a:	2300      	movs	r3, #0
 800f97c:	6063      	str	r3, [r4, #4]
 800f97e:	6923      	ldr	r3, [r4, #16]
 800f980:	6023      	str	r3, [r4, #0]
 800f982:	89a3      	ldrh	r3, [r4, #12]
 800f984:	f043 0308 	orr.w	r3, r3, #8
 800f988:	81a3      	strh	r3, [r4, #12]
 800f98a:	6923      	ldr	r3, [r4, #16]
 800f98c:	b94b      	cbnz	r3, 800f9a2 <__swsetup_r+0x7a>
 800f98e:	89a3      	ldrh	r3, [r4, #12]
 800f990:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f998:	d003      	beq.n	800f9a2 <__swsetup_r+0x7a>
 800f99a:	4621      	mov	r1, r4
 800f99c:	4628      	mov	r0, r5
 800f99e:	f002 fc33 	bl	8012208 <__smakebuf_r>
 800f9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9a6:	f013 0201 	ands.w	r2, r3, #1
 800f9aa:	d00a      	beq.n	800f9c2 <__swsetup_r+0x9a>
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	60a2      	str	r2, [r4, #8]
 800f9b0:	6962      	ldr	r2, [r4, #20]
 800f9b2:	4252      	negs	r2, r2
 800f9b4:	61a2      	str	r2, [r4, #24]
 800f9b6:	6922      	ldr	r2, [r4, #16]
 800f9b8:	b942      	cbnz	r2, 800f9cc <__swsetup_r+0xa4>
 800f9ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f9be:	d1c5      	bne.n	800f94c <__swsetup_r+0x24>
 800f9c0:	bd38      	pop	{r3, r4, r5, pc}
 800f9c2:	0799      	lsls	r1, r3, #30
 800f9c4:	bf58      	it	pl
 800f9c6:	6962      	ldrpl	r2, [r4, #20]
 800f9c8:	60a2      	str	r2, [r4, #8]
 800f9ca:	e7f4      	b.n	800f9b6 <__swsetup_r+0x8e>
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	e7f7      	b.n	800f9c0 <__swsetup_r+0x98>
 800f9d0:	24000188 	.word	0x24000188

0800f9d4 <__fputwc>:
 800f9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f9d8:	4680      	mov	r8, r0
 800f9da:	460f      	mov	r7, r1
 800f9dc:	4614      	mov	r4, r2
 800f9de:	f000 f899 	bl	800fb14 <__locale_mb_cur_max>
 800f9e2:	2801      	cmp	r0, #1
 800f9e4:	4605      	mov	r5, r0
 800f9e6:	d11b      	bne.n	800fa20 <__fputwc+0x4c>
 800f9e8:	1e7b      	subs	r3, r7, #1
 800f9ea:	2bfe      	cmp	r3, #254	@ 0xfe
 800f9ec:	d818      	bhi.n	800fa20 <__fputwc+0x4c>
 800f9ee:	f88d 7004 	strb.w	r7, [sp, #4]
 800f9f2:	2600      	movs	r6, #0
 800f9f4:	f10d 0904 	add.w	r9, sp, #4
 800f9f8:	42ae      	cmp	r6, r5
 800f9fa:	d021      	beq.n	800fa40 <__fputwc+0x6c>
 800f9fc:	68a3      	ldr	r3, [r4, #8]
 800f9fe:	f816 1009 	ldrb.w	r1, [r6, r9]
 800fa02:	3b01      	subs	r3, #1
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	60a3      	str	r3, [r4, #8]
 800fa08:	da04      	bge.n	800fa14 <__fputwc+0x40>
 800fa0a:	69a2      	ldr	r2, [r4, #24]
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	db1b      	blt.n	800fa48 <__fputwc+0x74>
 800fa10:	290a      	cmp	r1, #10
 800fa12:	d019      	beq.n	800fa48 <__fputwc+0x74>
 800fa14:	6823      	ldr	r3, [r4, #0]
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	6022      	str	r2, [r4, #0]
 800fa1a:	7019      	strb	r1, [r3, #0]
 800fa1c:	3601      	adds	r6, #1
 800fa1e:	e7eb      	b.n	800f9f8 <__fputwc+0x24>
 800fa20:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800fa24:	463a      	mov	r2, r7
 800fa26:	a901      	add	r1, sp, #4
 800fa28:	4640      	mov	r0, r8
 800fa2a:	f000 f8b9 	bl	800fba0 <_wcrtomb_r>
 800fa2e:	1c43      	adds	r3, r0, #1
 800fa30:	4605      	mov	r5, r0
 800fa32:	d1de      	bne.n	800f9f2 <__fputwc+0x1e>
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa3a:	81a3      	strh	r3, [r4, #12]
 800fa3c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fa40:	4638      	mov	r0, r7
 800fa42:	b003      	add	sp, #12
 800fa44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa48:	4622      	mov	r2, r4
 800fa4a:	4640      	mov	r0, r8
 800fa4c:	f003 f9a6 	bl	8012d9c <__swbuf_r>
 800fa50:	3001      	adds	r0, #1
 800fa52:	d1e3      	bne.n	800fa1c <__fputwc+0x48>
 800fa54:	e7f2      	b.n	800fa3c <__fputwc+0x68>

0800fa56 <_fputwc_r>:
 800fa56:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800fa58:	07db      	lsls	r3, r3, #31
 800fa5a:	b570      	push	{r4, r5, r6, lr}
 800fa5c:	4605      	mov	r5, r0
 800fa5e:	460e      	mov	r6, r1
 800fa60:	4614      	mov	r4, r2
 800fa62:	d405      	bmi.n	800fa70 <_fputwc_r+0x1a>
 800fa64:	8993      	ldrh	r3, [r2, #12]
 800fa66:	0598      	lsls	r0, r3, #22
 800fa68:	d402      	bmi.n	800fa70 <_fputwc_r+0x1a>
 800fa6a:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800fa6c:	f000 f888 	bl	800fb80 <__retarget_lock_acquire_recursive>
 800fa70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa74:	0499      	lsls	r1, r3, #18
 800fa76:	d406      	bmi.n	800fa86 <_fputwc_r+0x30>
 800fa78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fa7c:	81a3      	strh	r3, [r4, #12]
 800fa7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fa84:	6663      	str	r3, [r4, #100]	@ 0x64
 800fa86:	4622      	mov	r2, r4
 800fa88:	4628      	mov	r0, r5
 800fa8a:	4631      	mov	r1, r6
 800fa8c:	f7ff ffa2 	bl	800f9d4 <__fputwc>
 800fa90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa92:	07da      	lsls	r2, r3, #31
 800fa94:	4605      	mov	r5, r0
 800fa96:	d405      	bmi.n	800faa4 <_fputwc_r+0x4e>
 800fa98:	89a3      	ldrh	r3, [r4, #12]
 800fa9a:	059b      	lsls	r3, r3, #22
 800fa9c:	d402      	bmi.n	800faa4 <_fputwc_r+0x4e>
 800fa9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800faa0:	f000 f86f 	bl	800fb82 <__retarget_lock_release_recursive>
 800faa4:	4628      	mov	r0, r5
 800faa6:	bd70      	pop	{r4, r5, r6, pc}

0800faa8 <memmove>:
 800faa8:	4288      	cmp	r0, r1
 800faaa:	b510      	push	{r4, lr}
 800faac:	eb01 0402 	add.w	r4, r1, r2
 800fab0:	d902      	bls.n	800fab8 <memmove+0x10>
 800fab2:	4284      	cmp	r4, r0
 800fab4:	4623      	mov	r3, r4
 800fab6:	d807      	bhi.n	800fac8 <memmove+0x20>
 800fab8:	1e43      	subs	r3, r0, #1
 800faba:	42a1      	cmp	r1, r4
 800fabc:	d008      	beq.n	800fad0 <memmove+0x28>
 800fabe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fac6:	e7f8      	b.n	800faba <memmove+0x12>
 800fac8:	4402      	add	r2, r0
 800faca:	4601      	mov	r1, r0
 800facc:	428a      	cmp	r2, r1
 800face:	d100      	bne.n	800fad2 <memmove+0x2a>
 800fad0:	bd10      	pop	{r4, pc}
 800fad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fada:	e7f7      	b.n	800facc <memmove+0x24>

0800fadc <memset>:
 800fadc:	4402      	add	r2, r0
 800fade:	4603      	mov	r3, r0
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d100      	bne.n	800fae6 <memset+0xa>
 800fae4:	4770      	bx	lr
 800fae6:	f803 1b01 	strb.w	r1, [r3], #1
 800faea:	e7f9      	b.n	800fae0 <memset+0x4>

0800faec <strncpy>:
 800faec:	b510      	push	{r4, lr}
 800faee:	3901      	subs	r1, #1
 800faf0:	4603      	mov	r3, r0
 800faf2:	b132      	cbz	r2, 800fb02 <strncpy+0x16>
 800faf4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800faf8:	f803 4b01 	strb.w	r4, [r3], #1
 800fafc:	3a01      	subs	r2, #1
 800fafe:	2c00      	cmp	r4, #0
 800fb00:	d1f7      	bne.n	800faf2 <strncpy+0x6>
 800fb02:	441a      	add	r2, r3
 800fb04:	2100      	movs	r1, #0
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d100      	bne.n	800fb0c <strncpy+0x20>
 800fb0a:	bd10      	pop	{r4, pc}
 800fb0c:	f803 1b01 	strb.w	r1, [r3], #1
 800fb10:	e7f9      	b.n	800fb06 <strncpy+0x1a>
	...

0800fb14 <__locale_mb_cur_max>:
 800fb14:	4b01      	ldr	r3, [pc, #4]	@ (800fb1c <__locale_mb_cur_max+0x8>)
 800fb16:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800fb1a:	4770      	bx	lr
 800fb1c:	2400001c 	.word	0x2400001c

0800fb20 <_localeconv_r>:
 800fb20:	4800      	ldr	r0, [pc, #0]	@ (800fb24 <_localeconv_r+0x4>)
 800fb22:	4770      	bx	lr
 800fb24:	2400010c 	.word	0x2400010c

0800fb28 <__errno>:
 800fb28:	4b01      	ldr	r3, [pc, #4]	@ (800fb30 <__errno+0x8>)
 800fb2a:	6818      	ldr	r0, [r3, #0]
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	24000188 	.word	0x24000188

0800fb34 <__libc_init_array>:
 800fb34:	b570      	push	{r4, r5, r6, lr}
 800fb36:	4d0d      	ldr	r5, [pc, #52]	@ (800fb6c <__libc_init_array+0x38>)
 800fb38:	4c0d      	ldr	r4, [pc, #52]	@ (800fb70 <__libc_init_array+0x3c>)
 800fb3a:	1b64      	subs	r4, r4, r5
 800fb3c:	10a4      	asrs	r4, r4, #2
 800fb3e:	2600      	movs	r6, #0
 800fb40:	42a6      	cmp	r6, r4
 800fb42:	d109      	bne.n	800fb58 <__libc_init_array+0x24>
 800fb44:	4d0b      	ldr	r5, [pc, #44]	@ (800fb74 <__libc_init_array+0x40>)
 800fb46:	4c0c      	ldr	r4, [pc, #48]	@ (800fb78 <__libc_init_array+0x44>)
 800fb48:	f004 fe88 	bl	801485c <_init>
 800fb4c:	1b64      	subs	r4, r4, r5
 800fb4e:	10a4      	asrs	r4, r4, #2
 800fb50:	2600      	movs	r6, #0
 800fb52:	42a6      	cmp	r6, r4
 800fb54:	d105      	bne.n	800fb62 <__libc_init_array+0x2e>
 800fb56:	bd70      	pop	{r4, r5, r6, pc}
 800fb58:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb5c:	4798      	blx	r3
 800fb5e:	3601      	adds	r6, #1
 800fb60:	e7ee      	b.n	800fb40 <__libc_init_array+0xc>
 800fb62:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb66:	4798      	blx	r3
 800fb68:	3601      	adds	r6, #1
 800fb6a:	e7f2      	b.n	800fb52 <__libc_init_array+0x1e>
 800fb6c:	08017118 	.word	0x08017118
 800fb70:	08017118 	.word	0x08017118
 800fb74:	08017118 	.word	0x08017118
 800fb78:	08017120 	.word	0x08017120

0800fb7c <__retarget_lock_init_recursive>:
 800fb7c:	4770      	bx	lr

0800fb7e <__retarget_lock_close_recursive>:
 800fb7e:	4770      	bx	lr

0800fb80 <__retarget_lock_acquire_recursive>:
 800fb80:	4770      	bx	lr

0800fb82 <__retarget_lock_release_recursive>:
 800fb82:	4770      	bx	lr

0800fb84 <memcpy>:
 800fb84:	440a      	add	r2, r1
 800fb86:	4291      	cmp	r1, r2
 800fb88:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800fb8c:	d100      	bne.n	800fb90 <memcpy+0xc>
 800fb8e:	4770      	bx	lr
 800fb90:	b510      	push	{r4, lr}
 800fb92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb9a:	4291      	cmp	r1, r2
 800fb9c:	d1f9      	bne.n	800fb92 <memcpy+0xe>
 800fb9e:	bd10      	pop	{r4, pc}

0800fba0 <_wcrtomb_r>:
 800fba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fba2:	4c09      	ldr	r4, [pc, #36]	@ (800fbc8 <_wcrtomb_r+0x28>)
 800fba4:	b085      	sub	sp, #20
 800fba6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800fbaa:	4605      	mov	r5, r0
 800fbac:	461e      	mov	r6, r3
 800fbae:	b909      	cbnz	r1, 800fbb4 <_wcrtomb_r+0x14>
 800fbb0:	460a      	mov	r2, r1
 800fbb2:	a901      	add	r1, sp, #4
 800fbb4:	47b8      	blx	r7
 800fbb6:	1c43      	adds	r3, r0, #1
 800fbb8:	bf01      	itttt	eq
 800fbba:	2300      	moveq	r3, #0
 800fbbc:	6033      	streq	r3, [r6, #0]
 800fbbe:	238a      	moveq	r3, #138	@ 0x8a
 800fbc0:	602b      	streq	r3, [r5, #0]
 800fbc2:	b005      	add	sp, #20
 800fbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	2400001c 	.word	0x2400001c
 800fbcc:	00000000 	.word	0x00000000

0800fbd0 <frexp>:
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	ee10 1a90 	vmov	r1, s1
 800fbd6:	6002      	str	r2, [r0, #0]
 800fbd8:	4a17      	ldr	r2, [pc, #92]	@ (800fc38 <frexp+0x68>)
 800fbda:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d823      	bhi.n	800fc2a <frexp+0x5a>
 800fbe2:	ee10 2a10 	vmov	r2, s0
 800fbe6:	431a      	orrs	r2, r3
 800fbe8:	d01f      	beq.n	800fc2a <frexp+0x5a>
 800fbea:	4a14      	ldr	r2, [pc, #80]	@ (800fc3c <frexp+0x6c>)
 800fbec:	400a      	ands	r2, r1
 800fbee:	b952      	cbnz	r2, 800fc06 <frexp+0x36>
 800fbf0:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 800fc30 <frexp+0x60>
 800fbf4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fbf8:	ee10 1a90 	vmov	r1, s1
 800fbfc:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800fc00:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fc04:	6002      	str	r2, [r0, #0]
 800fc06:	6802      	ldr	r2, [r0, #0]
 800fc08:	151b      	asrs	r3, r3, #20
 800fc0a:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800fc0e:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800fc12:	441a      	add	r2, r3
 800fc14:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800fc18:	6002      	str	r2, [r0, #0]
 800fc1a:	ec53 2b10 	vmov	r2, r3, d0
 800fc1e:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
 800fc22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fc26:	ec43 2b10 	vmov	d0, r2, r3
 800fc2a:	4770      	bx	lr
 800fc2c:	f3af 8000 	nop.w
 800fc30:	00000000 	.word	0x00000000
 800fc34:	43500000 	.word	0x43500000
 800fc38:	7fefffff 	.word	0x7fefffff
 800fc3c:	7ff00000 	.word	0x7ff00000

0800fc40 <register_fini>:
 800fc40:	4b02      	ldr	r3, [pc, #8]	@ (800fc4c <register_fini+0xc>)
 800fc42:	b113      	cbz	r3, 800fc4a <register_fini+0xa>
 800fc44:	4802      	ldr	r0, [pc, #8]	@ (800fc50 <register_fini+0x10>)
 800fc46:	f000 b805 	b.w	800fc54 <atexit>
 800fc4a:	4770      	bx	lr
 800fc4c:	00000000 	.word	0x00000000
 800fc50:	08012f39 	.word	0x08012f39

0800fc54 <atexit>:
 800fc54:	2300      	movs	r3, #0
 800fc56:	4601      	mov	r1, r0
 800fc58:	461a      	mov	r2, r3
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f003 b980 	b.w	8012f60 <__register_exitproc>

0800fc60 <quorem>:
 800fc60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc64:	6903      	ldr	r3, [r0, #16]
 800fc66:	690c      	ldr	r4, [r1, #16]
 800fc68:	42a3      	cmp	r3, r4
 800fc6a:	4607      	mov	r7, r0
 800fc6c:	db7e      	blt.n	800fd6c <quorem+0x10c>
 800fc6e:	3c01      	subs	r4, #1
 800fc70:	f101 0814 	add.w	r8, r1, #20
 800fc74:	00a3      	lsls	r3, r4, #2
 800fc76:	f100 0514 	add.w	r5, r0, #20
 800fc7a:	9300      	str	r3, [sp, #0]
 800fc7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc80:	9301      	str	r3, [sp, #4]
 800fc82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc92:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc96:	d32e      	bcc.n	800fcf6 <quorem+0x96>
 800fc98:	f04f 0a00 	mov.w	sl, #0
 800fc9c:	46c4      	mov	ip, r8
 800fc9e:	46ae      	mov	lr, r5
 800fca0:	46d3      	mov	fp, sl
 800fca2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fca6:	b298      	uxth	r0, r3
 800fca8:	fb06 a000 	mla	r0, r6, r0, sl
 800fcac:	0c02      	lsrs	r2, r0, #16
 800fcae:	0c1b      	lsrs	r3, r3, #16
 800fcb0:	fb06 2303 	mla	r3, r6, r3, r2
 800fcb4:	f8de 2000 	ldr.w	r2, [lr]
 800fcb8:	b280      	uxth	r0, r0
 800fcba:	b292      	uxth	r2, r2
 800fcbc:	1a12      	subs	r2, r2, r0
 800fcbe:	445a      	add	r2, fp
 800fcc0:	f8de 0000 	ldr.w	r0, [lr]
 800fcc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fcce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fcd2:	b292      	uxth	r2, r2
 800fcd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fcd8:	45e1      	cmp	r9, ip
 800fcda:	f84e 2b04 	str.w	r2, [lr], #4
 800fcde:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fce2:	d2de      	bcs.n	800fca2 <quorem+0x42>
 800fce4:	9b00      	ldr	r3, [sp, #0]
 800fce6:	58eb      	ldr	r3, [r5, r3]
 800fce8:	b92b      	cbnz	r3, 800fcf6 <quorem+0x96>
 800fcea:	9b01      	ldr	r3, [sp, #4]
 800fcec:	3b04      	subs	r3, #4
 800fcee:	429d      	cmp	r5, r3
 800fcf0:	461a      	mov	r2, r3
 800fcf2:	d32f      	bcc.n	800fd54 <quorem+0xf4>
 800fcf4:	613c      	str	r4, [r7, #16]
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	f002 fcfa 	bl	80126f0 <__mcmp>
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	db25      	blt.n	800fd4c <quorem+0xec>
 800fd00:	4629      	mov	r1, r5
 800fd02:	2000      	movs	r0, #0
 800fd04:	f858 2b04 	ldr.w	r2, [r8], #4
 800fd08:	f8d1 c000 	ldr.w	ip, [r1]
 800fd0c:	fa1f fe82 	uxth.w	lr, r2
 800fd10:	fa1f f38c 	uxth.w	r3, ip
 800fd14:	eba3 030e 	sub.w	r3, r3, lr
 800fd18:	4403      	add	r3, r0
 800fd1a:	0c12      	lsrs	r2, r2, #16
 800fd1c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fd20:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd2a:	45c1      	cmp	r9, r8
 800fd2c:	f841 3b04 	str.w	r3, [r1], #4
 800fd30:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fd34:	d2e6      	bcs.n	800fd04 <quorem+0xa4>
 800fd36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd3e:	b922      	cbnz	r2, 800fd4a <quorem+0xea>
 800fd40:	3b04      	subs	r3, #4
 800fd42:	429d      	cmp	r5, r3
 800fd44:	461a      	mov	r2, r3
 800fd46:	d30b      	bcc.n	800fd60 <quorem+0x100>
 800fd48:	613c      	str	r4, [r7, #16]
 800fd4a:	3601      	adds	r6, #1
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	b003      	add	sp, #12
 800fd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd54:	6812      	ldr	r2, [r2, #0]
 800fd56:	3b04      	subs	r3, #4
 800fd58:	2a00      	cmp	r2, #0
 800fd5a:	d1cb      	bne.n	800fcf4 <quorem+0x94>
 800fd5c:	3c01      	subs	r4, #1
 800fd5e:	e7c6      	b.n	800fcee <quorem+0x8e>
 800fd60:	6812      	ldr	r2, [r2, #0]
 800fd62:	3b04      	subs	r3, #4
 800fd64:	2a00      	cmp	r2, #0
 800fd66:	d1ef      	bne.n	800fd48 <quorem+0xe8>
 800fd68:	3c01      	subs	r4, #1
 800fd6a:	e7ea      	b.n	800fd42 <quorem+0xe2>
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	e7ee      	b.n	800fd4e <quorem+0xee>

0800fd70 <_dtoa_r>:
 800fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	ed2d 8b02 	vpush	{d8}
 800fd78:	b091      	sub	sp, #68	@ 0x44
 800fd7a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fd7e:	9107      	str	r1, [sp, #28]
 800fd80:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800fd82:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fd84:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd86:	ec55 4b10 	vmov	r4, r5, d0
 800fd8a:	4681      	mov	r9, r0
 800fd8c:	930d      	str	r3, [sp, #52]	@ 0x34
 800fd8e:	b149      	cbz	r1, 800fda4 <_dtoa_r+0x34>
 800fd90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fd92:	604a      	str	r2, [r1, #4]
 800fd94:	2301      	movs	r3, #1
 800fd96:	4093      	lsls	r3, r2
 800fd98:	608b      	str	r3, [r1, #8]
 800fd9a:	f002 faa2 	bl	80122e2 <_Bfree>
 800fd9e:	2300      	movs	r3, #0
 800fda0:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 800fda4:	1e2b      	subs	r3, r5, #0
 800fda6:	bfbb      	ittet	lt
 800fda8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fdac:	9303      	strlt	r3, [sp, #12]
 800fdae:	2300      	movge	r3, #0
 800fdb0:	2201      	movlt	r2, #1
 800fdb2:	bfac      	ite	ge
 800fdb4:	6033      	strge	r3, [r6, #0]
 800fdb6:	6032      	strlt	r2, [r6, #0]
 800fdb8:	4b91      	ldr	r3, [pc, #580]	@ (8010000 <_dtoa_r+0x290>)
 800fdba:	9e03      	ldr	r6, [sp, #12]
 800fdbc:	43b3      	bics	r3, r6
 800fdbe:	d114      	bne.n	800fdea <_dtoa_r+0x7a>
 800fdc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fdc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fdc6:	6013      	str	r3, [r2, #0]
 800fdc8:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fdcc:	4323      	orrs	r3, r4
 800fdce:	f000 84df 	beq.w	8010790 <_dtoa_r+0xa20>
 800fdd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fdd4:	4f8b      	ldr	r7, [pc, #556]	@ (8010004 <_dtoa_r+0x294>)
 800fdd6:	b113      	cbz	r3, 800fdde <_dtoa_r+0x6e>
 800fdd8:	1cfb      	adds	r3, r7, #3
 800fdda:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fddc:	6013      	str	r3, [r2, #0]
 800fdde:	4638      	mov	r0, r7
 800fde0:	b011      	add	sp, #68	@ 0x44
 800fde2:	ecbd 8b02 	vpop	{d8}
 800fde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdea:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fdee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf6:	d109      	bne.n	800fe0c <_dtoa_r+0x9c>
 800fdf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	6013      	str	r3, [r2, #0]
 800fdfe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fe00:	b113      	cbz	r3, 800fe08 <_dtoa_r+0x98>
 800fe02:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fe04:	4b80      	ldr	r3, [pc, #512]	@ (8010008 <_dtoa_r+0x298>)
 800fe06:	6013      	str	r3, [r2, #0]
 800fe08:	4f80      	ldr	r7, [pc, #512]	@ (801000c <_dtoa_r+0x29c>)
 800fe0a:	e7e8      	b.n	800fdde <_dtoa_r+0x6e>
 800fe0c:	aa0e      	add	r2, sp, #56	@ 0x38
 800fe0e:	a90f      	add	r1, sp, #60	@ 0x3c
 800fe10:	4648      	mov	r0, r9
 800fe12:	eeb0 0b48 	vmov.f64	d0, d8
 800fe16:	f002 fd1b 	bl	8012850 <__d2b>
 800fe1a:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fe1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe20:	9001      	str	r0, [sp, #4]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d045      	beq.n	800feb2 <_dtoa_r+0x142>
 800fe26:	eeb0 7b48 	vmov.f64	d7, d8
 800fe2a:	ee18 1a90 	vmov	r1, s17
 800fe2e:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fe32:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fe36:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fe3a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fe3e:	2500      	movs	r5, #0
 800fe40:	ee07 1a90 	vmov	s15, r1
 800fe44:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fe48:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 800ffe8 <_dtoa_r+0x278>
 800fe4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fe50:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 800fff0 <_dtoa_r+0x280>
 800fe54:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fe58:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 800fff8 <_dtoa_r+0x288>
 800fe5c:	ee07 3a90 	vmov	s15, r3
 800fe60:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fe64:	eeb0 7b46 	vmov.f64	d7, d6
 800fe68:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fe6c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fe70:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fe74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe78:	ee16 8a90 	vmov	r8, s13
 800fe7c:	d508      	bpl.n	800fe90 <_dtoa_r+0x120>
 800fe7e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fe82:	eeb4 6b47 	vcmp.f64	d6, d7
 800fe86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe8a:	bf18      	it	ne
 800fe8c:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800fe90:	f1b8 0f16 	cmp.w	r8, #22
 800fe94:	d82b      	bhi.n	800feee <_dtoa_r+0x17e>
 800fe96:	495e      	ldr	r1, [pc, #376]	@ (8010010 <_dtoa_r+0x2a0>)
 800fe98:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fe9c:	ed91 7b00 	vldr	d7, [r1]
 800fea0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea8:	d501      	bpl.n	800feae <_dtoa_r+0x13e>
 800feaa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800feae:	2100      	movs	r1, #0
 800feb0:	e01e      	b.n	800fef0 <_dtoa_r+0x180>
 800feb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feb4:	4413      	add	r3, r2
 800feb6:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800feba:	2920      	cmp	r1, #32
 800febc:	bfc1      	itttt	gt
 800febe:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fec2:	408e      	lslgt	r6, r1
 800fec4:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fec8:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fecc:	bfd6      	itet	le
 800fece:	f1c1 0120 	rsble	r1, r1, #32
 800fed2:	4331      	orrgt	r1, r6
 800fed4:	fa04 f101 	lslle.w	r1, r4, r1
 800fed8:	ee07 1a90 	vmov	s15, r1
 800fedc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fee0:	3b01      	subs	r3, #1
 800fee2:	ee17 1a90 	vmov	r1, s15
 800fee6:	2501      	movs	r5, #1
 800fee8:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800feec:	e7a8      	b.n	800fe40 <_dtoa_r+0xd0>
 800feee:	2101      	movs	r1, #1
 800fef0:	1ad2      	subs	r2, r2, r3
 800fef2:	1e53      	subs	r3, r2, #1
 800fef4:	9306      	str	r3, [sp, #24]
 800fef6:	bf45      	ittet	mi
 800fef8:	f1c2 0301 	rsbmi	r3, r2, #1
 800fefc:	9305      	strmi	r3, [sp, #20]
 800fefe:	2300      	movpl	r3, #0
 800ff00:	2300      	movmi	r3, #0
 800ff02:	bf4c      	ite	mi
 800ff04:	9306      	strmi	r3, [sp, #24]
 800ff06:	9305      	strpl	r3, [sp, #20]
 800ff08:	f1b8 0f00 	cmp.w	r8, #0
 800ff0c:	910c      	str	r1, [sp, #48]	@ 0x30
 800ff0e:	db18      	blt.n	800ff42 <_dtoa_r+0x1d2>
 800ff10:	9b06      	ldr	r3, [sp, #24]
 800ff12:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ff16:	4443      	add	r3, r8
 800ff18:	9306      	str	r3, [sp, #24]
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	9a07      	ldr	r2, [sp, #28]
 800ff1e:	2a09      	cmp	r2, #9
 800ff20:	d84a      	bhi.n	800ffb8 <_dtoa_r+0x248>
 800ff22:	2a05      	cmp	r2, #5
 800ff24:	bfc4      	itt	gt
 800ff26:	3a04      	subgt	r2, #4
 800ff28:	9207      	strgt	r2, [sp, #28]
 800ff2a:	9a07      	ldr	r2, [sp, #28]
 800ff2c:	f1a2 0202 	sub.w	r2, r2, #2
 800ff30:	bfcc      	ite	gt
 800ff32:	2400      	movgt	r4, #0
 800ff34:	2401      	movle	r4, #1
 800ff36:	2a03      	cmp	r2, #3
 800ff38:	d849      	bhi.n	800ffce <_dtoa_r+0x25e>
 800ff3a:	e8df f002 	tbb	[pc, r2]
 800ff3e:	2f0b      	.short	0x2f0b
 800ff40:	3b2d      	.short	0x3b2d
 800ff42:	9b05      	ldr	r3, [sp, #20]
 800ff44:	2200      	movs	r2, #0
 800ff46:	eba3 0308 	sub.w	r3, r3, r8
 800ff4a:	9305      	str	r3, [sp, #20]
 800ff4c:	920a      	str	r2, [sp, #40]	@ 0x28
 800ff4e:	f1c8 0300 	rsb	r3, r8, #0
 800ff52:	e7e3      	b.n	800ff1c <_dtoa_r+0x1ac>
 800ff54:	2200      	movs	r2, #0
 800ff56:	9208      	str	r2, [sp, #32]
 800ff58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff5a:	2a00      	cmp	r2, #0
 800ff5c:	dc3a      	bgt.n	800ffd4 <_dtoa_r+0x264>
 800ff5e:	f04f 0b01 	mov.w	fp, #1
 800ff62:	46da      	mov	sl, fp
 800ff64:	465a      	mov	r2, fp
 800ff66:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800ff6a:	2100      	movs	r1, #0
 800ff6c:	2004      	movs	r0, #4
 800ff6e:	f100 0614 	add.w	r6, r0, #20
 800ff72:	4296      	cmp	r6, r2
 800ff74:	d933      	bls.n	800ffde <_dtoa_r+0x26e>
 800ff76:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 800ff7a:	4648      	mov	r0, r9
 800ff7c:	9304      	str	r3, [sp, #16]
 800ff7e:	f002 f98b 	bl	8012298 <_Balloc>
 800ff82:	9b04      	ldr	r3, [sp, #16]
 800ff84:	4607      	mov	r7, r0
 800ff86:	2800      	cmp	r0, #0
 800ff88:	d148      	bne.n	801001c <_dtoa_r+0x2ac>
 800ff8a:	4b22      	ldr	r3, [pc, #136]	@ (8010014 <_dtoa_r+0x2a4>)
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ff92:	4821      	ldr	r0, [pc, #132]	@ (8010018 <_dtoa_r+0x2a8>)
 800ff94:	f003 f824 	bl	8012fe0 <__assert_func>
 800ff98:	2201      	movs	r2, #1
 800ff9a:	e7dc      	b.n	800ff56 <_dtoa_r+0x1e6>
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	9208      	str	r2, [sp, #32]
 800ffa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffa2:	eb08 0b02 	add.w	fp, r8, r2
 800ffa6:	f10b 0a01 	add.w	sl, fp, #1
 800ffaa:	4652      	mov	r2, sl
 800ffac:	2a01      	cmp	r2, #1
 800ffae:	bfb8      	it	lt
 800ffb0:	2201      	movlt	r2, #1
 800ffb2:	e7da      	b.n	800ff6a <_dtoa_r+0x1fa>
 800ffb4:	2201      	movs	r2, #1
 800ffb6:	e7f2      	b.n	800ff9e <_dtoa_r+0x22e>
 800ffb8:	2401      	movs	r4, #1
 800ffba:	2200      	movs	r2, #0
 800ffbc:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ffc0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ffc4:	2100      	movs	r1, #0
 800ffc6:	46da      	mov	sl, fp
 800ffc8:	2212      	movs	r2, #18
 800ffca:	9109      	str	r1, [sp, #36]	@ 0x24
 800ffcc:	e7cd      	b.n	800ff6a <_dtoa_r+0x1fa>
 800ffce:	2201      	movs	r2, #1
 800ffd0:	9208      	str	r2, [sp, #32]
 800ffd2:	e7f5      	b.n	800ffc0 <_dtoa_r+0x250>
 800ffd4:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800ffd8:	46da      	mov	sl, fp
 800ffda:	465a      	mov	r2, fp
 800ffdc:	e7c5      	b.n	800ff6a <_dtoa_r+0x1fa>
 800ffde:	3101      	adds	r1, #1
 800ffe0:	0040      	lsls	r0, r0, #1
 800ffe2:	e7c4      	b.n	800ff6e <_dtoa_r+0x1fe>
 800ffe4:	f3af 8000 	nop.w
 800ffe8:	636f4361 	.word	0x636f4361
 800ffec:	3fd287a7 	.word	0x3fd287a7
 800fff0:	8b60c8b3 	.word	0x8b60c8b3
 800fff4:	3fc68a28 	.word	0x3fc68a28
 800fff8:	509f79fb 	.word	0x509f79fb
 800fffc:	3fd34413 	.word	0x3fd34413
 8010000:	7ff00000 	.word	0x7ff00000
 8010004:	08014bb6 	.word	0x08014bb6
 8010008:	08014bbb 	.word	0x08014bbb
 801000c:	08014bba 	.word	0x08014bba
 8010010:	08014ce8 	.word	0x08014ce8
 8010014:	08014bbc 	.word	0x08014bbc
 8010018:	08014bcd 	.word	0x08014bcd
 801001c:	f1ba 0f0e 	cmp.w	sl, #14
 8010020:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 8010024:	d86f      	bhi.n	8010106 <_dtoa_r+0x396>
 8010026:	2c00      	cmp	r4, #0
 8010028:	d06d      	beq.n	8010106 <_dtoa_r+0x396>
 801002a:	f1b8 0f00 	cmp.w	r8, #0
 801002e:	f340 80c2 	ble.w	80101b6 <_dtoa_r+0x446>
 8010032:	4aca      	ldr	r2, [pc, #808]	@ (801035c <_dtoa_r+0x5ec>)
 8010034:	f008 010f 	and.w	r1, r8, #15
 8010038:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801003c:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010040:	ed92 7b00 	vldr	d7, [r2]
 8010044:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010048:	f000 80a9 	beq.w	801019e <_dtoa_r+0x42e>
 801004c:	4ac4      	ldr	r2, [pc, #784]	@ (8010360 <_dtoa_r+0x5f0>)
 801004e:	ed92 6b08 	vldr	d6, [r2, #32]
 8010052:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010056:	ed8d 6b02 	vstr	d6, [sp, #8]
 801005a:	f001 010f 	and.w	r1, r1, #15
 801005e:	2203      	movs	r2, #3
 8010060:	48bf      	ldr	r0, [pc, #764]	@ (8010360 <_dtoa_r+0x5f0>)
 8010062:	2900      	cmp	r1, #0
 8010064:	f040 809d 	bne.w	80101a2 <_dtoa_r+0x432>
 8010068:	ed9d 6b02 	vldr	d6, [sp, #8]
 801006c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010070:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010074:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010076:	ed9d 7b02 	vldr	d7, [sp, #8]
 801007a:	2900      	cmp	r1, #0
 801007c:	f000 80c1 	beq.w	8010202 <_dtoa_r+0x492>
 8010080:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010084:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801008c:	f140 80b9 	bpl.w	8010202 <_dtoa_r+0x492>
 8010090:	f1ba 0f00 	cmp.w	sl, #0
 8010094:	f000 80b5 	beq.w	8010202 <_dtoa_r+0x492>
 8010098:	f1bb 0f00 	cmp.w	fp, #0
 801009c:	dd31      	ble.n	8010102 <_dtoa_r+0x392>
 801009e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80100a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80100a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80100aa:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80100ae:	9104      	str	r1, [sp, #16]
 80100b0:	3201      	adds	r2, #1
 80100b2:	465c      	mov	r4, fp
 80100b4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80100b8:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80100bc:	ee07 2a90 	vmov	s15, r2
 80100c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80100c4:	eea7 5b06 	vfma.f64	d5, d7, d6
 80100c8:	ee15 2a90 	vmov	r2, s11
 80100cc:	ec51 0b15 	vmov	r0, r1, d5
 80100d0:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80100d4:	2c00      	cmp	r4, #0
 80100d6:	f040 8098 	bne.w	801020a <_dtoa_r+0x49a>
 80100da:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80100de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80100e2:	ec41 0b17 	vmov	d7, r0, r1
 80100e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80100ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ee:	f300 8260 	bgt.w	80105b2 <_dtoa_r+0x842>
 80100f2:	eeb1 7b47 	vneg.f64	d7, d7
 80100f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80100fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100fe:	f100 80f5 	bmi.w	80102ec <_dtoa_r+0x57c>
 8010102:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010106:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010108:	2a00      	cmp	r2, #0
 801010a:	f2c0 812b 	blt.w	8010364 <_dtoa_r+0x5f4>
 801010e:	f1b8 0f0e 	cmp.w	r8, #14
 8010112:	f300 8127 	bgt.w	8010364 <_dtoa_r+0x5f4>
 8010116:	4b91      	ldr	r3, [pc, #580]	@ (801035c <_dtoa_r+0x5ec>)
 8010118:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801011c:	ed93 6b00 	vldr	d6, [r3]
 8010120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010122:	2b00      	cmp	r3, #0
 8010124:	da03      	bge.n	801012e <_dtoa_r+0x3be>
 8010126:	f1ba 0f00 	cmp.w	sl, #0
 801012a:	f340 80d2 	ble.w	80102d2 <_dtoa_r+0x562>
 801012e:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010132:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010136:	463e      	mov	r6, r7
 8010138:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801013c:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010140:	ee15 3a10 	vmov	r3, s10
 8010144:	3330      	adds	r3, #48	@ 0x30
 8010146:	f806 3b01 	strb.w	r3, [r6], #1
 801014a:	1bf3      	subs	r3, r6, r7
 801014c:	459a      	cmp	sl, r3
 801014e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010152:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010156:	f040 80f8 	bne.w	801034a <_dtoa_r+0x5da>
 801015a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801015e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010166:	f300 80dd 	bgt.w	8010324 <_dtoa_r+0x5b4>
 801016a:	eeb4 7b46 	vcmp.f64	d7, d6
 801016e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010172:	d104      	bne.n	801017e <_dtoa_r+0x40e>
 8010174:	ee15 3a10 	vmov	r3, s10
 8010178:	07db      	lsls	r3, r3, #31
 801017a:	f100 80d3 	bmi.w	8010324 <_dtoa_r+0x5b4>
 801017e:	9901      	ldr	r1, [sp, #4]
 8010180:	4648      	mov	r0, r9
 8010182:	f002 f8ae 	bl	80122e2 <_Bfree>
 8010186:	2300      	movs	r3, #0
 8010188:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801018a:	7033      	strb	r3, [r6, #0]
 801018c:	f108 0301 	add.w	r3, r8, #1
 8010190:	6013      	str	r3, [r2, #0]
 8010192:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010194:	2b00      	cmp	r3, #0
 8010196:	f43f ae22 	beq.w	800fdde <_dtoa_r+0x6e>
 801019a:	601e      	str	r6, [r3, #0]
 801019c:	e61f      	b.n	800fdde <_dtoa_r+0x6e>
 801019e:	2202      	movs	r2, #2
 80101a0:	e75e      	b.n	8010060 <_dtoa_r+0x2f0>
 80101a2:	07cc      	lsls	r4, r1, #31
 80101a4:	d504      	bpl.n	80101b0 <_dtoa_r+0x440>
 80101a6:	ed90 6b00 	vldr	d6, [r0]
 80101aa:	3201      	adds	r2, #1
 80101ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80101b0:	1049      	asrs	r1, r1, #1
 80101b2:	3008      	adds	r0, #8
 80101b4:	e755      	b.n	8010062 <_dtoa_r+0x2f2>
 80101b6:	d022      	beq.n	80101fe <_dtoa_r+0x48e>
 80101b8:	f1c8 0100 	rsb	r1, r8, #0
 80101bc:	4a67      	ldr	r2, [pc, #412]	@ (801035c <_dtoa_r+0x5ec>)
 80101be:	f001 000f 	and.w	r0, r1, #15
 80101c2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80101c6:	ed92 7b00 	vldr	d7, [r2]
 80101ca:	ee28 7b07 	vmul.f64	d7, d8, d7
 80101ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80101d2:	4863      	ldr	r0, [pc, #396]	@ (8010360 <_dtoa_r+0x5f0>)
 80101d4:	1109      	asrs	r1, r1, #4
 80101d6:	2400      	movs	r4, #0
 80101d8:	2202      	movs	r2, #2
 80101da:	b929      	cbnz	r1, 80101e8 <_dtoa_r+0x478>
 80101dc:	2c00      	cmp	r4, #0
 80101de:	f43f af49 	beq.w	8010074 <_dtoa_r+0x304>
 80101e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80101e6:	e745      	b.n	8010074 <_dtoa_r+0x304>
 80101e8:	07ce      	lsls	r6, r1, #31
 80101ea:	d505      	bpl.n	80101f8 <_dtoa_r+0x488>
 80101ec:	ed90 6b00 	vldr	d6, [r0]
 80101f0:	3201      	adds	r2, #1
 80101f2:	2401      	movs	r4, #1
 80101f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80101f8:	1049      	asrs	r1, r1, #1
 80101fa:	3008      	adds	r0, #8
 80101fc:	e7ed      	b.n	80101da <_dtoa_r+0x46a>
 80101fe:	2202      	movs	r2, #2
 8010200:	e738      	b.n	8010074 <_dtoa_r+0x304>
 8010202:	f8cd 8010 	str.w	r8, [sp, #16]
 8010206:	4654      	mov	r4, sl
 8010208:	e754      	b.n	80100b4 <_dtoa_r+0x344>
 801020a:	4a54      	ldr	r2, [pc, #336]	@ (801035c <_dtoa_r+0x5ec>)
 801020c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010210:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010214:	9a08      	ldr	r2, [sp, #32]
 8010216:	ec41 0b17 	vmov	d7, r0, r1
 801021a:	443c      	add	r4, r7
 801021c:	b34a      	cbz	r2, 8010272 <_dtoa_r+0x502>
 801021e:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010222:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010226:	463e      	mov	r6, r7
 8010228:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801022c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010230:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010234:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010238:	ee14 2a90 	vmov	r2, s9
 801023c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010240:	3230      	adds	r2, #48	@ 0x30
 8010242:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010246:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801024a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801024e:	f806 2b01 	strb.w	r2, [r6], #1
 8010252:	d438      	bmi.n	80102c6 <_dtoa_r+0x556>
 8010254:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010258:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801025c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010260:	d462      	bmi.n	8010328 <_dtoa_r+0x5b8>
 8010262:	42a6      	cmp	r6, r4
 8010264:	f43f af4d 	beq.w	8010102 <_dtoa_r+0x392>
 8010268:	ee27 7b03 	vmul.f64	d7, d7, d3
 801026c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010270:	e7e0      	b.n	8010234 <_dtoa_r+0x4c4>
 8010272:	4621      	mov	r1, r4
 8010274:	463e      	mov	r6, r7
 8010276:	ee27 7b04 	vmul.f64	d7, d7, d4
 801027a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801027e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010282:	ee14 2a90 	vmov	r2, s9
 8010286:	3230      	adds	r2, #48	@ 0x30
 8010288:	f806 2b01 	strb.w	r2, [r6], #1
 801028c:	42a6      	cmp	r6, r4
 801028e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010292:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010296:	d119      	bne.n	80102cc <_dtoa_r+0x55c>
 8010298:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801029c:	ee37 4b05 	vadd.f64	d4, d7, d5
 80102a0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80102a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a8:	dc3e      	bgt.n	8010328 <_dtoa_r+0x5b8>
 80102aa:	ee35 5b47 	vsub.f64	d5, d5, d7
 80102ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80102b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102b6:	f57f af24 	bpl.w	8010102 <_dtoa_r+0x392>
 80102ba:	460e      	mov	r6, r1
 80102bc:	3901      	subs	r1, #1
 80102be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80102c2:	2b30      	cmp	r3, #48	@ 0x30
 80102c4:	d0f9      	beq.n	80102ba <_dtoa_r+0x54a>
 80102c6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80102ca:	e758      	b.n	801017e <_dtoa_r+0x40e>
 80102cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80102d0:	e7d5      	b.n	801027e <_dtoa_r+0x50e>
 80102d2:	d10b      	bne.n	80102ec <_dtoa_r+0x57c>
 80102d4:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80102d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80102dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80102e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e8:	f2c0 8160 	blt.w	80105ac <_dtoa_r+0x83c>
 80102ec:	2400      	movs	r4, #0
 80102ee:	4625      	mov	r5, r4
 80102f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102f2:	43db      	mvns	r3, r3
 80102f4:	9304      	str	r3, [sp, #16]
 80102f6:	463e      	mov	r6, r7
 80102f8:	f04f 0800 	mov.w	r8, #0
 80102fc:	4621      	mov	r1, r4
 80102fe:	4648      	mov	r0, r9
 8010300:	f001 ffef 	bl	80122e2 <_Bfree>
 8010304:	2d00      	cmp	r5, #0
 8010306:	d0de      	beq.n	80102c6 <_dtoa_r+0x556>
 8010308:	f1b8 0f00 	cmp.w	r8, #0
 801030c:	d005      	beq.n	801031a <_dtoa_r+0x5aa>
 801030e:	45a8      	cmp	r8, r5
 8010310:	d003      	beq.n	801031a <_dtoa_r+0x5aa>
 8010312:	4641      	mov	r1, r8
 8010314:	4648      	mov	r0, r9
 8010316:	f001 ffe4 	bl	80122e2 <_Bfree>
 801031a:	4629      	mov	r1, r5
 801031c:	4648      	mov	r0, r9
 801031e:	f001 ffe0 	bl	80122e2 <_Bfree>
 8010322:	e7d0      	b.n	80102c6 <_dtoa_r+0x556>
 8010324:	f8cd 8010 	str.w	r8, [sp, #16]
 8010328:	4633      	mov	r3, r6
 801032a:	461e      	mov	r6, r3
 801032c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010330:	2a39      	cmp	r2, #57	@ 0x39
 8010332:	d106      	bne.n	8010342 <_dtoa_r+0x5d2>
 8010334:	429f      	cmp	r7, r3
 8010336:	d1f8      	bne.n	801032a <_dtoa_r+0x5ba>
 8010338:	9a04      	ldr	r2, [sp, #16]
 801033a:	3201      	adds	r2, #1
 801033c:	9204      	str	r2, [sp, #16]
 801033e:	2230      	movs	r2, #48	@ 0x30
 8010340:	703a      	strb	r2, [r7, #0]
 8010342:	781a      	ldrb	r2, [r3, #0]
 8010344:	3201      	adds	r2, #1
 8010346:	701a      	strb	r2, [r3, #0]
 8010348:	e7bd      	b.n	80102c6 <_dtoa_r+0x556>
 801034a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801034e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010356:	f47f aeef 	bne.w	8010138 <_dtoa_r+0x3c8>
 801035a:	e710      	b.n	801017e <_dtoa_r+0x40e>
 801035c:	08014ce8 	.word	0x08014ce8
 8010360:	08014cc0 	.word	0x08014cc0
 8010364:	9908      	ldr	r1, [sp, #32]
 8010366:	2900      	cmp	r1, #0
 8010368:	f000 80e3 	beq.w	8010532 <_dtoa_r+0x7c2>
 801036c:	9907      	ldr	r1, [sp, #28]
 801036e:	2901      	cmp	r1, #1
 8010370:	f300 80c8 	bgt.w	8010504 <_dtoa_r+0x794>
 8010374:	2d00      	cmp	r5, #0
 8010376:	f000 80c1 	beq.w	80104fc <_dtoa_r+0x78c>
 801037a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801037e:	9e05      	ldr	r6, [sp, #20]
 8010380:	461c      	mov	r4, r3
 8010382:	9304      	str	r3, [sp, #16]
 8010384:	9b05      	ldr	r3, [sp, #20]
 8010386:	4413      	add	r3, r2
 8010388:	9305      	str	r3, [sp, #20]
 801038a:	9b06      	ldr	r3, [sp, #24]
 801038c:	2101      	movs	r1, #1
 801038e:	4413      	add	r3, r2
 8010390:	4648      	mov	r0, r9
 8010392:	9306      	str	r3, [sp, #24]
 8010394:	f002 f840 	bl	8012418 <__i2b>
 8010398:	9b04      	ldr	r3, [sp, #16]
 801039a:	4605      	mov	r5, r0
 801039c:	b166      	cbz	r6, 80103b8 <_dtoa_r+0x648>
 801039e:	9a06      	ldr	r2, [sp, #24]
 80103a0:	2a00      	cmp	r2, #0
 80103a2:	dd09      	ble.n	80103b8 <_dtoa_r+0x648>
 80103a4:	42b2      	cmp	r2, r6
 80103a6:	9905      	ldr	r1, [sp, #20]
 80103a8:	bfa8      	it	ge
 80103aa:	4632      	movge	r2, r6
 80103ac:	1a89      	subs	r1, r1, r2
 80103ae:	9105      	str	r1, [sp, #20]
 80103b0:	9906      	ldr	r1, [sp, #24]
 80103b2:	1ab6      	subs	r6, r6, r2
 80103b4:	1a8a      	subs	r2, r1, r2
 80103b6:	9206      	str	r2, [sp, #24]
 80103b8:	b1fb      	cbz	r3, 80103fa <_dtoa_r+0x68a>
 80103ba:	9a08      	ldr	r2, [sp, #32]
 80103bc:	2a00      	cmp	r2, #0
 80103be:	f000 80bc 	beq.w	801053a <_dtoa_r+0x7ca>
 80103c2:	b19c      	cbz	r4, 80103ec <_dtoa_r+0x67c>
 80103c4:	4629      	mov	r1, r5
 80103c6:	4622      	mov	r2, r4
 80103c8:	4648      	mov	r0, r9
 80103ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103cc:	f002 f8e4 	bl	8012598 <__pow5mult>
 80103d0:	9a01      	ldr	r2, [sp, #4]
 80103d2:	4601      	mov	r1, r0
 80103d4:	4605      	mov	r5, r0
 80103d6:	4648      	mov	r0, r9
 80103d8:	f002 f834 	bl	8012444 <__multiply>
 80103dc:	9901      	ldr	r1, [sp, #4]
 80103de:	9004      	str	r0, [sp, #16]
 80103e0:	4648      	mov	r0, r9
 80103e2:	f001 ff7e 	bl	80122e2 <_Bfree>
 80103e6:	9a04      	ldr	r2, [sp, #16]
 80103e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103ea:	9201      	str	r2, [sp, #4]
 80103ec:	1b1a      	subs	r2, r3, r4
 80103ee:	d004      	beq.n	80103fa <_dtoa_r+0x68a>
 80103f0:	9901      	ldr	r1, [sp, #4]
 80103f2:	4648      	mov	r0, r9
 80103f4:	f002 f8d0 	bl	8012598 <__pow5mult>
 80103f8:	9001      	str	r0, [sp, #4]
 80103fa:	2101      	movs	r1, #1
 80103fc:	4648      	mov	r0, r9
 80103fe:	f002 f80b 	bl	8012418 <__i2b>
 8010402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010404:	4604      	mov	r4, r0
 8010406:	2b00      	cmp	r3, #0
 8010408:	f000 81cb 	beq.w	80107a2 <_dtoa_r+0xa32>
 801040c:	461a      	mov	r2, r3
 801040e:	4601      	mov	r1, r0
 8010410:	4648      	mov	r0, r9
 8010412:	f002 f8c1 	bl	8012598 <__pow5mult>
 8010416:	9b07      	ldr	r3, [sp, #28]
 8010418:	2b01      	cmp	r3, #1
 801041a:	4604      	mov	r4, r0
 801041c:	f300 8095 	bgt.w	801054a <_dtoa_r+0x7da>
 8010420:	9b02      	ldr	r3, [sp, #8]
 8010422:	2b00      	cmp	r3, #0
 8010424:	f040 808b 	bne.w	801053e <_dtoa_r+0x7ce>
 8010428:	9b03      	ldr	r3, [sp, #12]
 801042a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801042e:	2a00      	cmp	r2, #0
 8010430:	f040 8087 	bne.w	8010542 <_dtoa_r+0x7d2>
 8010434:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010438:	0d12      	lsrs	r2, r2, #20
 801043a:	0512      	lsls	r2, r2, #20
 801043c:	2a00      	cmp	r2, #0
 801043e:	f000 8082 	beq.w	8010546 <_dtoa_r+0x7d6>
 8010442:	9b05      	ldr	r3, [sp, #20]
 8010444:	3301      	adds	r3, #1
 8010446:	9305      	str	r3, [sp, #20]
 8010448:	9b06      	ldr	r3, [sp, #24]
 801044a:	3301      	adds	r3, #1
 801044c:	9306      	str	r3, [sp, #24]
 801044e:	2301      	movs	r3, #1
 8010450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 81aa 	beq.w	80107ae <_dtoa_r+0xa3e>
 801045a:	6922      	ldr	r2, [r4, #16]
 801045c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010460:	6910      	ldr	r0, [r2, #16]
 8010462:	f001 ff8d 	bl	8012380 <__hi0bits>
 8010466:	f1c0 0020 	rsb	r0, r0, #32
 801046a:	9b06      	ldr	r3, [sp, #24]
 801046c:	4418      	add	r0, r3
 801046e:	f010 001f 	ands.w	r0, r0, #31
 8010472:	d076      	beq.n	8010562 <_dtoa_r+0x7f2>
 8010474:	f1c0 0220 	rsb	r2, r0, #32
 8010478:	2a04      	cmp	r2, #4
 801047a:	dd69      	ble.n	8010550 <_dtoa_r+0x7e0>
 801047c:	9b05      	ldr	r3, [sp, #20]
 801047e:	f1c0 001c 	rsb	r0, r0, #28
 8010482:	4403      	add	r3, r0
 8010484:	9305      	str	r3, [sp, #20]
 8010486:	9b06      	ldr	r3, [sp, #24]
 8010488:	4406      	add	r6, r0
 801048a:	4403      	add	r3, r0
 801048c:	9306      	str	r3, [sp, #24]
 801048e:	9b05      	ldr	r3, [sp, #20]
 8010490:	2b00      	cmp	r3, #0
 8010492:	dd05      	ble.n	80104a0 <_dtoa_r+0x730>
 8010494:	9901      	ldr	r1, [sp, #4]
 8010496:	461a      	mov	r2, r3
 8010498:	4648      	mov	r0, r9
 801049a:	f002 f8bd 	bl	8012618 <__lshift>
 801049e:	9001      	str	r0, [sp, #4]
 80104a0:	9b06      	ldr	r3, [sp, #24]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	dd05      	ble.n	80104b2 <_dtoa_r+0x742>
 80104a6:	4621      	mov	r1, r4
 80104a8:	461a      	mov	r2, r3
 80104aa:	4648      	mov	r0, r9
 80104ac:	f002 f8b4 	bl	8012618 <__lshift>
 80104b0:	4604      	mov	r4, r0
 80104b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d056      	beq.n	8010566 <_dtoa_r+0x7f6>
 80104b8:	9801      	ldr	r0, [sp, #4]
 80104ba:	4621      	mov	r1, r4
 80104bc:	f002 f918 	bl	80126f0 <__mcmp>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	da50      	bge.n	8010566 <_dtoa_r+0x7f6>
 80104c4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80104c8:	9304      	str	r3, [sp, #16]
 80104ca:	9901      	ldr	r1, [sp, #4]
 80104cc:	2300      	movs	r3, #0
 80104ce:	220a      	movs	r2, #10
 80104d0:	4648      	mov	r0, r9
 80104d2:	f001 ff0f 	bl	80122f4 <__multadd>
 80104d6:	9b08      	ldr	r3, [sp, #32]
 80104d8:	9001      	str	r0, [sp, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	f000 8169 	beq.w	80107b2 <_dtoa_r+0xa42>
 80104e0:	4629      	mov	r1, r5
 80104e2:	2300      	movs	r3, #0
 80104e4:	220a      	movs	r2, #10
 80104e6:	4648      	mov	r0, r9
 80104e8:	f001 ff04 	bl	80122f4 <__multadd>
 80104ec:	f1bb 0f00 	cmp.w	fp, #0
 80104f0:	4605      	mov	r5, r0
 80104f2:	dc64      	bgt.n	80105be <_dtoa_r+0x84e>
 80104f4:	9b07      	ldr	r3, [sp, #28]
 80104f6:	2b02      	cmp	r3, #2
 80104f8:	dc3e      	bgt.n	8010578 <_dtoa_r+0x808>
 80104fa:	e060      	b.n	80105be <_dtoa_r+0x84e>
 80104fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80104fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010502:	e73c      	b.n	801037e <_dtoa_r+0x60e>
 8010504:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8010508:	42a3      	cmp	r3, r4
 801050a:	bfbf      	itttt	lt
 801050c:	1ae2      	sublt	r2, r4, r3
 801050e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010510:	189b      	addlt	r3, r3, r2
 8010512:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8010514:	bfae      	itee	ge
 8010516:	1b1c      	subge	r4, r3, r4
 8010518:	4623      	movlt	r3, r4
 801051a:	2400      	movlt	r4, #0
 801051c:	f1ba 0f00 	cmp.w	sl, #0
 8010520:	bfb5      	itete	lt
 8010522:	9a05      	ldrlt	r2, [sp, #20]
 8010524:	9e05      	ldrge	r6, [sp, #20]
 8010526:	eba2 060a 	sublt.w	r6, r2, sl
 801052a:	4652      	movge	r2, sl
 801052c:	bfb8      	it	lt
 801052e:	2200      	movlt	r2, #0
 8010530:	e727      	b.n	8010382 <_dtoa_r+0x612>
 8010532:	9e05      	ldr	r6, [sp, #20]
 8010534:	9d08      	ldr	r5, [sp, #32]
 8010536:	461c      	mov	r4, r3
 8010538:	e730      	b.n	801039c <_dtoa_r+0x62c>
 801053a:	461a      	mov	r2, r3
 801053c:	e758      	b.n	80103f0 <_dtoa_r+0x680>
 801053e:	2300      	movs	r3, #0
 8010540:	e786      	b.n	8010450 <_dtoa_r+0x6e0>
 8010542:	9b02      	ldr	r3, [sp, #8]
 8010544:	e784      	b.n	8010450 <_dtoa_r+0x6e0>
 8010546:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010548:	e783      	b.n	8010452 <_dtoa_r+0x6e2>
 801054a:	2300      	movs	r3, #0
 801054c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801054e:	e784      	b.n	801045a <_dtoa_r+0x6ea>
 8010550:	d09d      	beq.n	801048e <_dtoa_r+0x71e>
 8010552:	9b05      	ldr	r3, [sp, #20]
 8010554:	321c      	adds	r2, #28
 8010556:	4413      	add	r3, r2
 8010558:	9305      	str	r3, [sp, #20]
 801055a:	9b06      	ldr	r3, [sp, #24]
 801055c:	4416      	add	r6, r2
 801055e:	4413      	add	r3, r2
 8010560:	e794      	b.n	801048c <_dtoa_r+0x71c>
 8010562:	4602      	mov	r2, r0
 8010564:	e7f5      	b.n	8010552 <_dtoa_r+0x7e2>
 8010566:	f1ba 0f00 	cmp.w	sl, #0
 801056a:	f8cd 8010 	str.w	r8, [sp, #16]
 801056e:	46d3      	mov	fp, sl
 8010570:	dc21      	bgt.n	80105b6 <_dtoa_r+0x846>
 8010572:	9b07      	ldr	r3, [sp, #28]
 8010574:	2b02      	cmp	r3, #2
 8010576:	dd1e      	ble.n	80105b6 <_dtoa_r+0x846>
 8010578:	f1bb 0f00 	cmp.w	fp, #0
 801057c:	f47f aeb8 	bne.w	80102f0 <_dtoa_r+0x580>
 8010580:	4621      	mov	r1, r4
 8010582:	465b      	mov	r3, fp
 8010584:	2205      	movs	r2, #5
 8010586:	4648      	mov	r0, r9
 8010588:	f001 feb4 	bl	80122f4 <__multadd>
 801058c:	4601      	mov	r1, r0
 801058e:	4604      	mov	r4, r0
 8010590:	9801      	ldr	r0, [sp, #4]
 8010592:	f002 f8ad 	bl	80126f0 <__mcmp>
 8010596:	2800      	cmp	r0, #0
 8010598:	f77f aeaa 	ble.w	80102f0 <_dtoa_r+0x580>
 801059c:	463e      	mov	r6, r7
 801059e:	2331      	movs	r3, #49	@ 0x31
 80105a0:	f806 3b01 	strb.w	r3, [r6], #1
 80105a4:	9b04      	ldr	r3, [sp, #16]
 80105a6:	3301      	adds	r3, #1
 80105a8:	9304      	str	r3, [sp, #16]
 80105aa:	e6a5      	b.n	80102f8 <_dtoa_r+0x588>
 80105ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80105b0:	4654      	mov	r4, sl
 80105b2:	4625      	mov	r5, r4
 80105b4:	e7f2      	b.n	801059c <_dtoa_r+0x82c>
 80105b6:	9b08      	ldr	r3, [sp, #32]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	f000 80fe 	beq.w	80107ba <_dtoa_r+0xa4a>
 80105be:	2e00      	cmp	r6, #0
 80105c0:	dd05      	ble.n	80105ce <_dtoa_r+0x85e>
 80105c2:	4629      	mov	r1, r5
 80105c4:	4632      	mov	r2, r6
 80105c6:	4648      	mov	r0, r9
 80105c8:	f002 f826 	bl	8012618 <__lshift>
 80105cc:	4605      	mov	r5, r0
 80105ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d057      	beq.n	8010684 <_dtoa_r+0x914>
 80105d4:	6869      	ldr	r1, [r5, #4]
 80105d6:	4648      	mov	r0, r9
 80105d8:	f001 fe5e 	bl	8012298 <_Balloc>
 80105dc:	4606      	mov	r6, r0
 80105de:	b920      	cbnz	r0, 80105ea <_dtoa_r+0x87a>
 80105e0:	4b80      	ldr	r3, [pc, #512]	@ (80107e4 <_dtoa_r+0xa74>)
 80105e2:	4602      	mov	r2, r0
 80105e4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80105e8:	e4d3      	b.n	800ff92 <_dtoa_r+0x222>
 80105ea:	692a      	ldr	r2, [r5, #16]
 80105ec:	3202      	adds	r2, #2
 80105ee:	0092      	lsls	r2, r2, #2
 80105f0:	f105 010c 	add.w	r1, r5, #12
 80105f4:	300c      	adds	r0, #12
 80105f6:	f7ff fac5 	bl	800fb84 <memcpy>
 80105fa:	2201      	movs	r2, #1
 80105fc:	4631      	mov	r1, r6
 80105fe:	4648      	mov	r0, r9
 8010600:	f002 f80a 	bl	8012618 <__lshift>
 8010604:	1c7b      	adds	r3, r7, #1
 8010606:	9305      	str	r3, [sp, #20]
 8010608:	eb07 030b 	add.w	r3, r7, fp
 801060c:	9309      	str	r3, [sp, #36]	@ 0x24
 801060e:	9b02      	ldr	r3, [sp, #8]
 8010610:	f003 0301 	and.w	r3, r3, #1
 8010614:	46a8      	mov	r8, r5
 8010616:	9308      	str	r3, [sp, #32]
 8010618:	4605      	mov	r5, r0
 801061a:	9b05      	ldr	r3, [sp, #20]
 801061c:	9801      	ldr	r0, [sp, #4]
 801061e:	4621      	mov	r1, r4
 8010620:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8010624:	f7ff fb1c 	bl	800fc60 <quorem>
 8010628:	4641      	mov	r1, r8
 801062a:	9002      	str	r0, [sp, #8]
 801062c:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010630:	9801      	ldr	r0, [sp, #4]
 8010632:	f002 f85d 	bl	80126f0 <__mcmp>
 8010636:	462a      	mov	r2, r5
 8010638:	9006      	str	r0, [sp, #24]
 801063a:	4621      	mov	r1, r4
 801063c:	4648      	mov	r0, r9
 801063e:	f002 f873 	bl	8012728 <__mdiff>
 8010642:	68c2      	ldr	r2, [r0, #12]
 8010644:	4606      	mov	r6, r0
 8010646:	b9fa      	cbnz	r2, 8010688 <_dtoa_r+0x918>
 8010648:	4601      	mov	r1, r0
 801064a:	9801      	ldr	r0, [sp, #4]
 801064c:	f002 f850 	bl	80126f0 <__mcmp>
 8010650:	4602      	mov	r2, r0
 8010652:	4631      	mov	r1, r6
 8010654:	4648      	mov	r0, r9
 8010656:	920a      	str	r2, [sp, #40]	@ 0x28
 8010658:	f001 fe43 	bl	80122e2 <_Bfree>
 801065c:	9b07      	ldr	r3, [sp, #28]
 801065e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010660:	9e05      	ldr	r6, [sp, #20]
 8010662:	ea43 0102 	orr.w	r1, r3, r2
 8010666:	9b08      	ldr	r3, [sp, #32]
 8010668:	4319      	orrs	r1, r3
 801066a:	d10f      	bne.n	801068c <_dtoa_r+0x91c>
 801066c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010670:	d028      	beq.n	80106c4 <_dtoa_r+0x954>
 8010672:	9b06      	ldr	r3, [sp, #24]
 8010674:	2b00      	cmp	r3, #0
 8010676:	dd02      	ble.n	801067e <_dtoa_r+0x90e>
 8010678:	9b02      	ldr	r3, [sp, #8]
 801067a:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801067e:	f88b a000 	strb.w	sl, [fp]
 8010682:	e63b      	b.n	80102fc <_dtoa_r+0x58c>
 8010684:	4628      	mov	r0, r5
 8010686:	e7bd      	b.n	8010604 <_dtoa_r+0x894>
 8010688:	2201      	movs	r2, #1
 801068a:	e7e2      	b.n	8010652 <_dtoa_r+0x8e2>
 801068c:	9b06      	ldr	r3, [sp, #24]
 801068e:	2b00      	cmp	r3, #0
 8010690:	db04      	blt.n	801069c <_dtoa_r+0x92c>
 8010692:	9907      	ldr	r1, [sp, #28]
 8010694:	430b      	orrs	r3, r1
 8010696:	9908      	ldr	r1, [sp, #32]
 8010698:	430b      	orrs	r3, r1
 801069a:	d120      	bne.n	80106de <_dtoa_r+0x96e>
 801069c:	2a00      	cmp	r2, #0
 801069e:	ddee      	ble.n	801067e <_dtoa_r+0x90e>
 80106a0:	9901      	ldr	r1, [sp, #4]
 80106a2:	2201      	movs	r2, #1
 80106a4:	4648      	mov	r0, r9
 80106a6:	f001 ffb7 	bl	8012618 <__lshift>
 80106aa:	4621      	mov	r1, r4
 80106ac:	9001      	str	r0, [sp, #4]
 80106ae:	f002 f81f 	bl	80126f0 <__mcmp>
 80106b2:	2800      	cmp	r0, #0
 80106b4:	dc03      	bgt.n	80106be <_dtoa_r+0x94e>
 80106b6:	d1e2      	bne.n	801067e <_dtoa_r+0x90e>
 80106b8:	f01a 0f01 	tst.w	sl, #1
 80106bc:	d0df      	beq.n	801067e <_dtoa_r+0x90e>
 80106be:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80106c2:	d1d9      	bne.n	8010678 <_dtoa_r+0x908>
 80106c4:	2339      	movs	r3, #57	@ 0x39
 80106c6:	f88b 3000 	strb.w	r3, [fp]
 80106ca:	4633      	mov	r3, r6
 80106cc:	461e      	mov	r6, r3
 80106ce:	3b01      	subs	r3, #1
 80106d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80106d4:	2a39      	cmp	r2, #57	@ 0x39
 80106d6:	d053      	beq.n	8010780 <_dtoa_r+0xa10>
 80106d8:	3201      	adds	r2, #1
 80106da:	701a      	strb	r2, [r3, #0]
 80106dc:	e60e      	b.n	80102fc <_dtoa_r+0x58c>
 80106de:	2a00      	cmp	r2, #0
 80106e0:	dd07      	ble.n	80106f2 <_dtoa_r+0x982>
 80106e2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80106e6:	d0ed      	beq.n	80106c4 <_dtoa_r+0x954>
 80106e8:	f10a 0301 	add.w	r3, sl, #1
 80106ec:	f88b 3000 	strb.w	r3, [fp]
 80106f0:	e604      	b.n	80102fc <_dtoa_r+0x58c>
 80106f2:	9b05      	ldr	r3, [sp, #20]
 80106f4:	9a05      	ldr	r2, [sp, #20]
 80106f6:	f803 ac01 	strb.w	sl, [r3, #-1]
 80106fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d029      	beq.n	8010754 <_dtoa_r+0x9e4>
 8010700:	9901      	ldr	r1, [sp, #4]
 8010702:	2300      	movs	r3, #0
 8010704:	220a      	movs	r2, #10
 8010706:	4648      	mov	r0, r9
 8010708:	f001 fdf4 	bl	80122f4 <__multadd>
 801070c:	45a8      	cmp	r8, r5
 801070e:	9001      	str	r0, [sp, #4]
 8010710:	f04f 0300 	mov.w	r3, #0
 8010714:	f04f 020a 	mov.w	r2, #10
 8010718:	4641      	mov	r1, r8
 801071a:	4648      	mov	r0, r9
 801071c:	d107      	bne.n	801072e <_dtoa_r+0x9be>
 801071e:	f001 fde9 	bl	80122f4 <__multadd>
 8010722:	4680      	mov	r8, r0
 8010724:	4605      	mov	r5, r0
 8010726:	9b05      	ldr	r3, [sp, #20]
 8010728:	3301      	adds	r3, #1
 801072a:	9305      	str	r3, [sp, #20]
 801072c:	e775      	b.n	801061a <_dtoa_r+0x8aa>
 801072e:	f001 fde1 	bl	80122f4 <__multadd>
 8010732:	4629      	mov	r1, r5
 8010734:	4680      	mov	r8, r0
 8010736:	2300      	movs	r3, #0
 8010738:	220a      	movs	r2, #10
 801073a:	4648      	mov	r0, r9
 801073c:	f001 fdda 	bl	80122f4 <__multadd>
 8010740:	4605      	mov	r5, r0
 8010742:	e7f0      	b.n	8010726 <_dtoa_r+0x9b6>
 8010744:	f1bb 0f00 	cmp.w	fp, #0
 8010748:	bfcc      	ite	gt
 801074a:	465e      	movgt	r6, fp
 801074c:	2601      	movle	r6, #1
 801074e:	443e      	add	r6, r7
 8010750:	f04f 0800 	mov.w	r8, #0
 8010754:	9901      	ldr	r1, [sp, #4]
 8010756:	2201      	movs	r2, #1
 8010758:	4648      	mov	r0, r9
 801075a:	f001 ff5d 	bl	8012618 <__lshift>
 801075e:	4621      	mov	r1, r4
 8010760:	9001      	str	r0, [sp, #4]
 8010762:	f001 ffc5 	bl	80126f0 <__mcmp>
 8010766:	2800      	cmp	r0, #0
 8010768:	dcaf      	bgt.n	80106ca <_dtoa_r+0x95a>
 801076a:	d102      	bne.n	8010772 <_dtoa_r+0xa02>
 801076c:	f01a 0f01 	tst.w	sl, #1
 8010770:	d1ab      	bne.n	80106ca <_dtoa_r+0x95a>
 8010772:	4633      	mov	r3, r6
 8010774:	461e      	mov	r6, r3
 8010776:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801077a:	2a30      	cmp	r2, #48	@ 0x30
 801077c:	d0fa      	beq.n	8010774 <_dtoa_r+0xa04>
 801077e:	e5bd      	b.n	80102fc <_dtoa_r+0x58c>
 8010780:	429f      	cmp	r7, r3
 8010782:	d1a3      	bne.n	80106cc <_dtoa_r+0x95c>
 8010784:	9b04      	ldr	r3, [sp, #16]
 8010786:	3301      	adds	r3, #1
 8010788:	9304      	str	r3, [sp, #16]
 801078a:	2331      	movs	r3, #49	@ 0x31
 801078c:	703b      	strb	r3, [r7, #0]
 801078e:	e5b5      	b.n	80102fc <_dtoa_r+0x58c>
 8010790:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010792:	4f15      	ldr	r7, [pc, #84]	@ (80107e8 <_dtoa_r+0xa78>)
 8010794:	2b00      	cmp	r3, #0
 8010796:	f43f ab22 	beq.w	800fdde <_dtoa_r+0x6e>
 801079a:	f107 0308 	add.w	r3, r7, #8
 801079e:	f7ff bb1c 	b.w	800fdda <_dtoa_r+0x6a>
 80107a2:	9b07      	ldr	r3, [sp, #28]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	f77f ae3b 	ble.w	8010420 <_dtoa_r+0x6b0>
 80107aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107ae:	2001      	movs	r0, #1
 80107b0:	e65b      	b.n	801046a <_dtoa_r+0x6fa>
 80107b2:	f1bb 0f00 	cmp.w	fp, #0
 80107b6:	f77f aedc 	ble.w	8010572 <_dtoa_r+0x802>
 80107ba:	463e      	mov	r6, r7
 80107bc:	9801      	ldr	r0, [sp, #4]
 80107be:	4621      	mov	r1, r4
 80107c0:	f7ff fa4e 	bl	800fc60 <quorem>
 80107c4:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80107c8:	f806 ab01 	strb.w	sl, [r6], #1
 80107cc:	1bf2      	subs	r2, r6, r7
 80107ce:	4593      	cmp	fp, r2
 80107d0:	ddb8      	ble.n	8010744 <_dtoa_r+0x9d4>
 80107d2:	9901      	ldr	r1, [sp, #4]
 80107d4:	2300      	movs	r3, #0
 80107d6:	220a      	movs	r2, #10
 80107d8:	4648      	mov	r0, r9
 80107da:	f001 fd8b 	bl	80122f4 <__multadd>
 80107de:	9001      	str	r0, [sp, #4]
 80107e0:	e7ec      	b.n	80107bc <_dtoa_r+0xa4c>
 80107e2:	bf00      	nop
 80107e4:	08014bbc 	.word	0x08014bbc
 80107e8:	08014bad 	.word	0x08014bad

080107ec <_malloc_trim_r>:
 80107ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107f0:	4606      	mov	r6, r0
 80107f2:	2008      	movs	r0, #8
 80107f4:	4689      	mov	r9, r1
 80107f6:	f002 fb93 	bl	8012f20 <sysconf>
 80107fa:	4f24      	ldr	r7, [pc, #144]	@ (801088c <_malloc_trim_r+0xa0>)
 80107fc:	4680      	mov	r8, r0
 80107fe:	4630      	mov	r0, r6
 8010800:	f001 fd3e 	bl	8012280 <__malloc_lock>
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	685d      	ldr	r5, [r3, #4]
 8010808:	f025 0503 	bic.w	r5, r5, #3
 801080c:	f1a5 0411 	sub.w	r4, r5, #17
 8010810:	eba4 0409 	sub.w	r4, r4, r9
 8010814:	4444      	add	r4, r8
 8010816:	fbb4 f4f8 	udiv	r4, r4, r8
 801081a:	3c01      	subs	r4, #1
 801081c:	fb08 f404 	mul.w	r4, r8, r4
 8010820:	45a0      	cmp	r8, r4
 8010822:	dd05      	ble.n	8010830 <_malloc_trim_r+0x44>
 8010824:	4630      	mov	r0, r6
 8010826:	f001 fd31 	bl	801228c <__malloc_unlock>
 801082a:	2000      	movs	r0, #0
 801082c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010830:	2100      	movs	r1, #0
 8010832:	4630      	mov	r0, r6
 8010834:	f002 fb52 	bl	8012edc <_sbrk_r>
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	442b      	add	r3, r5
 801083c:	4298      	cmp	r0, r3
 801083e:	d1f1      	bne.n	8010824 <_malloc_trim_r+0x38>
 8010840:	4261      	negs	r1, r4
 8010842:	4630      	mov	r0, r6
 8010844:	f002 fb4a 	bl	8012edc <_sbrk_r>
 8010848:	3001      	adds	r0, #1
 801084a:	d110      	bne.n	801086e <_malloc_trim_r+0x82>
 801084c:	2100      	movs	r1, #0
 801084e:	4630      	mov	r0, r6
 8010850:	f002 fb44 	bl	8012edc <_sbrk_r>
 8010854:	68ba      	ldr	r2, [r7, #8]
 8010856:	1a83      	subs	r3, r0, r2
 8010858:	2b0f      	cmp	r3, #15
 801085a:	dde3      	ble.n	8010824 <_malloc_trim_r+0x38>
 801085c:	490c      	ldr	r1, [pc, #48]	@ (8010890 <_malloc_trim_r+0xa4>)
 801085e:	6809      	ldr	r1, [r1, #0]
 8010860:	1a40      	subs	r0, r0, r1
 8010862:	490c      	ldr	r1, [pc, #48]	@ (8010894 <_malloc_trim_r+0xa8>)
 8010864:	f043 0301 	orr.w	r3, r3, #1
 8010868:	6008      	str	r0, [r1, #0]
 801086a:	6053      	str	r3, [r2, #4]
 801086c:	e7da      	b.n	8010824 <_malloc_trim_r+0x38>
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	4a08      	ldr	r2, [pc, #32]	@ (8010894 <_malloc_trim_r+0xa8>)
 8010872:	1b2d      	subs	r5, r5, r4
 8010874:	f045 0501 	orr.w	r5, r5, #1
 8010878:	605d      	str	r5, [r3, #4]
 801087a:	6813      	ldr	r3, [r2, #0]
 801087c:	4630      	mov	r0, r6
 801087e:	1b1b      	subs	r3, r3, r4
 8010880:	6013      	str	r3, [r2, #0]
 8010882:	f001 fd03 	bl	801228c <__malloc_unlock>
 8010886:	2001      	movs	r0, #1
 8010888:	e7d0      	b.n	801082c <_malloc_trim_r+0x40>
 801088a:	bf00      	nop
 801088c:	240002bc 	.word	0x240002bc
 8010890:	240002b4 	.word	0x240002b4
 8010894:	24015354 	.word	0x24015354

08010898 <_free_r>:
 8010898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801089a:	4604      	mov	r4, r0
 801089c:	460f      	mov	r7, r1
 801089e:	2900      	cmp	r1, #0
 80108a0:	f000 80b1 	beq.w	8010a06 <_free_r+0x16e>
 80108a4:	f001 fcec 	bl	8012280 <__malloc_lock>
 80108a8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80108ac:	4d56      	ldr	r5, [pc, #344]	@ (8010a08 <_free_r+0x170>)
 80108ae:	f022 0001 	bic.w	r0, r2, #1
 80108b2:	f1a7 0308 	sub.w	r3, r7, #8
 80108b6:	eb03 0c00 	add.w	ip, r3, r0
 80108ba:	68a9      	ldr	r1, [r5, #8]
 80108bc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80108c0:	4561      	cmp	r1, ip
 80108c2:	f026 0603 	bic.w	r6, r6, #3
 80108c6:	f002 0201 	and.w	r2, r2, #1
 80108ca:	d11b      	bne.n	8010904 <_free_r+0x6c>
 80108cc:	4406      	add	r6, r0
 80108ce:	b93a      	cbnz	r2, 80108e0 <_free_r+0x48>
 80108d0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80108d4:	1a9b      	subs	r3, r3, r2
 80108d6:	4416      	add	r6, r2
 80108d8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80108dc:	60ca      	str	r2, [r1, #12]
 80108de:	6091      	str	r1, [r2, #8]
 80108e0:	f046 0201 	orr.w	r2, r6, #1
 80108e4:	605a      	str	r2, [r3, #4]
 80108e6:	60ab      	str	r3, [r5, #8]
 80108e8:	4b48      	ldr	r3, [pc, #288]	@ (8010a0c <_free_r+0x174>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	42b3      	cmp	r3, r6
 80108ee:	d804      	bhi.n	80108fa <_free_r+0x62>
 80108f0:	4b47      	ldr	r3, [pc, #284]	@ (8010a10 <_free_r+0x178>)
 80108f2:	4620      	mov	r0, r4
 80108f4:	6819      	ldr	r1, [r3, #0]
 80108f6:	f7ff ff79 	bl	80107ec <_malloc_trim_r>
 80108fa:	4620      	mov	r0, r4
 80108fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010900:	f001 bcc4 	b.w	801228c <__malloc_unlock>
 8010904:	f8cc 6004 	str.w	r6, [ip, #4]
 8010908:	2a00      	cmp	r2, #0
 801090a:	d138      	bne.n	801097e <_free_r+0xe6>
 801090c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8010910:	1a5b      	subs	r3, r3, r1
 8010912:	4408      	add	r0, r1
 8010914:	6899      	ldr	r1, [r3, #8]
 8010916:	f105 0708 	add.w	r7, r5, #8
 801091a:	42b9      	cmp	r1, r7
 801091c:	d031      	beq.n	8010982 <_free_r+0xea>
 801091e:	68df      	ldr	r7, [r3, #12]
 8010920:	60cf      	str	r7, [r1, #12]
 8010922:	60b9      	str	r1, [r7, #8]
 8010924:	eb0c 0106 	add.w	r1, ip, r6
 8010928:	6849      	ldr	r1, [r1, #4]
 801092a:	07c9      	lsls	r1, r1, #31
 801092c:	d40b      	bmi.n	8010946 <_free_r+0xae>
 801092e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8010932:	4430      	add	r0, r6
 8010934:	bb3a      	cbnz	r2, 8010986 <_free_r+0xee>
 8010936:	4e37      	ldr	r6, [pc, #220]	@ (8010a14 <_free_r+0x17c>)
 8010938:	42b1      	cmp	r1, r6
 801093a:	d124      	bne.n	8010986 <_free_r+0xee>
 801093c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8010940:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8010944:	2201      	movs	r2, #1
 8010946:	f040 0101 	orr.w	r1, r0, #1
 801094a:	6059      	str	r1, [r3, #4]
 801094c:	5018      	str	r0, [r3, r0]
 801094e:	2a00      	cmp	r2, #0
 8010950:	d1d3      	bne.n	80108fa <_free_r+0x62>
 8010952:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8010956:	d21b      	bcs.n	8010990 <_free_r+0xf8>
 8010958:	08c2      	lsrs	r2, r0, #3
 801095a:	2101      	movs	r1, #1
 801095c:	0940      	lsrs	r0, r0, #5
 801095e:	4081      	lsls	r1, r0
 8010960:	6868      	ldr	r0, [r5, #4]
 8010962:	3201      	adds	r2, #1
 8010964:	4301      	orrs	r1, r0
 8010966:	6069      	str	r1, [r5, #4]
 8010968:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 801096c:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8010970:	3908      	subs	r1, #8
 8010972:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010976:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 801097a:	60c3      	str	r3, [r0, #12]
 801097c:	e7bd      	b.n	80108fa <_free_r+0x62>
 801097e:	2200      	movs	r2, #0
 8010980:	e7d0      	b.n	8010924 <_free_r+0x8c>
 8010982:	2201      	movs	r2, #1
 8010984:	e7ce      	b.n	8010924 <_free_r+0x8c>
 8010986:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801098a:	60ce      	str	r6, [r1, #12]
 801098c:	60b1      	str	r1, [r6, #8]
 801098e:	e7da      	b.n	8010946 <_free_r+0xae>
 8010990:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8010994:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8010998:	d214      	bcs.n	80109c4 <_free_r+0x12c>
 801099a:	0982      	lsrs	r2, r0, #6
 801099c:	3238      	adds	r2, #56	@ 0x38
 801099e:	1c51      	adds	r1, r2, #1
 80109a0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80109a4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80109a8:	428e      	cmp	r6, r1
 80109aa:	d125      	bne.n	80109f8 <_free_r+0x160>
 80109ac:	2001      	movs	r0, #1
 80109ae:	1092      	asrs	r2, r2, #2
 80109b0:	fa00 f202 	lsl.w	r2, r0, r2
 80109b4:	6868      	ldr	r0, [r5, #4]
 80109b6:	4302      	orrs	r2, r0
 80109b8:	606a      	str	r2, [r5, #4]
 80109ba:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80109be:	60b3      	str	r3, [r6, #8]
 80109c0:	60cb      	str	r3, [r1, #12]
 80109c2:	e79a      	b.n	80108fa <_free_r+0x62>
 80109c4:	2a14      	cmp	r2, #20
 80109c6:	d801      	bhi.n	80109cc <_free_r+0x134>
 80109c8:	325b      	adds	r2, #91	@ 0x5b
 80109ca:	e7e8      	b.n	801099e <_free_r+0x106>
 80109cc:	2a54      	cmp	r2, #84	@ 0x54
 80109ce:	d802      	bhi.n	80109d6 <_free_r+0x13e>
 80109d0:	0b02      	lsrs	r2, r0, #12
 80109d2:	326e      	adds	r2, #110	@ 0x6e
 80109d4:	e7e3      	b.n	801099e <_free_r+0x106>
 80109d6:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80109da:	d802      	bhi.n	80109e2 <_free_r+0x14a>
 80109dc:	0bc2      	lsrs	r2, r0, #15
 80109de:	3277      	adds	r2, #119	@ 0x77
 80109e0:	e7dd      	b.n	801099e <_free_r+0x106>
 80109e2:	f240 5154 	movw	r1, #1364	@ 0x554
 80109e6:	428a      	cmp	r2, r1
 80109e8:	bf9a      	itte	ls
 80109ea:	0c82      	lsrls	r2, r0, #18
 80109ec:	327c      	addls	r2, #124	@ 0x7c
 80109ee:	227e      	movhi	r2, #126	@ 0x7e
 80109f0:	e7d5      	b.n	801099e <_free_r+0x106>
 80109f2:	6889      	ldr	r1, [r1, #8]
 80109f4:	428e      	cmp	r6, r1
 80109f6:	d004      	beq.n	8010a02 <_free_r+0x16a>
 80109f8:	684a      	ldr	r2, [r1, #4]
 80109fa:	f022 0203 	bic.w	r2, r2, #3
 80109fe:	4282      	cmp	r2, r0
 8010a00:	d8f7      	bhi.n	80109f2 <_free_r+0x15a>
 8010a02:	68ce      	ldr	r6, [r1, #12]
 8010a04:	e7d9      	b.n	80109ba <_free_r+0x122>
 8010a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a08:	240002bc 	.word	0x240002bc
 8010a0c:	240002b8 	.word	0x240002b8
 8010a10:	24015384 	.word	0x24015384
 8010a14:	240002c4 	.word	0x240002c4

08010a18 <_malloc_r>:
 8010a18:	f101 030b 	add.w	r3, r1, #11
 8010a1c:	2b16      	cmp	r3, #22
 8010a1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a22:	4605      	mov	r5, r0
 8010a24:	d906      	bls.n	8010a34 <_malloc_r+0x1c>
 8010a26:	f033 0707 	bics.w	r7, r3, #7
 8010a2a:	d504      	bpl.n	8010a36 <_malloc_r+0x1e>
 8010a2c:	230c      	movs	r3, #12
 8010a2e:	602b      	str	r3, [r5, #0]
 8010a30:	2400      	movs	r4, #0
 8010a32:	e1a3      	b.n	8010d7c <_malloc_r+0x364>
 8010a34:	2710      	movs	r7, #16
 8010a36:	42b9      	cmp	r1, r7
 8010a38:	d8f8      	bhi.n	8010a2c <_malloc_r+0x14>
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	f001 fc20 	bl	8012280 <__malloc_lock>
 8010a40:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8010a44:	4eaf      	ldr	r6, [pc, #700]	@ (8010d04 <_malloc_r+0x2ec>)
 8010a46:	d237      	bcs.n	8010ab8 <_malloc_r+0xa0>
 8010a48:	f107 0208 	add.w	r2, r7, #8
 8010a4c:	4432      	add	r2, r6
 8010a4e:	f1a2 0108 	sub.w	r1, r2, #8
 8010a52:	6854      	ldr	r4, [r2, #4]
 8010a54:	428c      	cmp	r4, r1
 8010a56:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8010a5a:	d102      	bne.n	8010a62 <_malloc_r+0x4a>
 8010a5c:	68d4      	ldr	r4, [r2, #12]
 8010a5e:	42a2      	cmp	r2, r4
 8010a60:	d010      	beq.n	8010a84 <_malloc_r+0x6c>
 8010a62:	6863      	ldr	r3, [r4, #4]
 8010a64:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8010a68:	f023 0303 	bic.w	r3, r3, #3
 8010a6c:	60ca      	str	r2, [r1, #12]
 8010a6e:	4423      	add	r3, r4
 8010a70:	6091      	str	r1, [r2, #8]
 8010a72:	685a      	ldr	r2, [r3, #4]
 8010a74:	f042 0201 	orr.w	r2, r2, #1
 8010a78:	605a      	str	r2, [r3, #4]
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	f001 fc06 	bl	801228c <__malloc_unlock>
 8010a80:	3408      	adds	r4, #8
 8010a82:	e17b      	b.n	8010d7c <_malloc_r+0x364>
 8010a84:	3302      	adds	r3, #2
 8010a86:	6934      	ldr	r4, [r6, #16]
 8010a88:	499f      	ldr	r1, [pc, #636]	@ (8010d08 <_malloc_r+0x2f0>)
 8010a8a:	428c      	cmp	r4, r1
 8010a8c:	d077      	beq.n	8010b7e <_malloc_r+0x166>
 8010a8e:	6862      	ldr	r2, [r4, #4]
 8010a90:	f022 0c03 	bic.w	ip, r2, #3
 8010a94:	ebac 0007 	sub.w	r0, ip, r7
 8010a98:	280f      	cmp	r0, #15
 8010a9a:	dd48      	ble.n	8010b2e <_malloc_r+0x116>
 8010a9c:	19e2      	adds	r2, r4, r7
 8010a9e:	f040 0301 	orr.w	r3, r0, #1
 8010aa2:	f047 0701 	orr.w	r7, r7, #1
 8010aa6:	6067      	str	r7, [r4, #4]
 8010aa8:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8010aac:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8010ab0:	6053      	str	r3, [r2, #4]
 8010ab2:	f844 000c 	str.w	r0, [r4, ip]
 8010ab6:	e7e0      	b.n	8010a7a <_malloc_r+0x62>
 8010ab8:	0a7b      	lsrs	r3, r7, #9
 8010aba:	d02a      	beq.n	8010b12 <_malloc_r+0xfa>
 8010abc:	2b04      	cmp	r3, #4
 8010abe:	d812      	bhi.n	8010ae6 <_malloc_r+0xce>
 8010ac0:	09bb      	lsrs	r3, r7, #6
 8010ac2:	3338      	adds	r3, #56	@ 0x38
 8010ac4:	1c5a      	adds	r2, r3, #1
 8010ac6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8010aca:	f1a2 0c08 	sub.w	ip, r2, #8
 8010ace:	6854      	ldr	r4, [r2, #4]
 8010ad0:	4564      	cmp	r4, ip
 8010ad2:	d006      	beq.n	8010ae2 <_malloc_r+0xca>
 8010ad4:	6862      	ldr	r2, [r4, #4]
 8010ad6:	f022 0203 	bic.w	r2, r2, #3
 8010ada:	1bd0      	subs	r0, r2, r7
 8010adc:	280f      	cmp	r0, #15
 8010ade:	dd1c      	ble.n	8010b1a <_malloc_r+0x102>
 8010ae0:	3b01      	subs	r3, #1
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	e7cf      	b.n	8010a86 <_malloc_r+0x6e>
 8010ae6:	2b14      	cmp	r3, #20
 8010ae8:	d801      	bhi.n	8010aee <_malloc_r+0xd6>
 8010aea:	335b      	adds	r3, #91	@ 0x5b
 8010aec:	e7ea      	b.n	8010ac4 <_malloc_r+0xac>
 8010aee:	2b54      	cmp	r3, #84	@ 0x54
 8010af0:	d802      	bhi.n	8010af8 <_malloc_r+0xe0>
 8010af2:	0b3b      	lsrs	r3, r7, #12
 8010af4:	336e      	adds	r3, #110	@ 0x6e
 8010af6:	e7e5      	b.n	8010ac4 <_malloc_r+0xac>
 8010af8:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8010afc:	d802      	bhi.n	8010b04 <_malloc_r+0xec>
 8010afe:	0bfb      	lsrs	r3, r7, #15
 8010b00:	3377      	adds	r3, #119	@ 0x77
 8010b02:	e7df      	b.n	8010ac4 <_malloc_r+0xac>
 8010b04:	f240 5254 	movw	r2, #1364	@ 0x554
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d804      	bhi.n	8010b16 <_malloc_r+0xfe>
 8010b0c:	0cbb      	lsrs	r3, r7, #18
 8010b0e:	337c      	adds	r3, #124	@ 0x7c
 8010b10:	e7d8      	b.n	8010ac4 <_malloc_r+0xac>
 8010b12:	233f      	movs	r3, #63	@ 0x3f
 8010b14:	e7d6      	b.n	8010ac4 <_malloc_r+0xac>
 8010b16:	237e      	movs	r3, #126	@ 0x7e
 8010b18:	e7d4      	b.n	8010ac4 <_malloc_r+0xac>
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	68e1      	ldr	r1, [r4, #12]
 8010b1e:	db04      	blt.n	8010b2a <_malloc_r+0x112>
 8010b20:	68a3      	ldr	r3, [r4, #8]
 8010b22:	60d9      	str	r1, [r3, #12]
 8010b24:	608b      	str	r3, [r1, #8]
 8010b26:	18a3      	adds	r3, r4, r2
 8010b28:	e7a3      	b.n	8010a72 <_malloc_r+0x5a>
 8010b2a:	460c      	mov	r4, r1
 8010b2c:	e7d0      	b.n	8010ad0 <_malloc_r+0xb8>
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8010b34:	db07      	blt.n	8010b46 <_malloc_r+0x12e>
 8010b36:	44a4      	add	ip, r4
 8010b38:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8010b3c:	f043 0301 	orr.w	r3, r3, #1
 8010b40:	f8cc 3004 	str.w	r3, [ip, #4]
 8010b44:	e799      	b.n	8010a7a <_malloc_r+0x62>
 8010b46:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8010b4a:	6870      	ldr	r0, [r6, #4]
 8010b4c:	f080 8095 	bcs.w	8010c7a <_malloc_r+0x262>
 8010b50:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8010b54:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8010b58:	f04f 0c01 	mov.w	ip, #1
 8010b5c:	3201      	adds	r2, #1
 8010b5e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8010b62:	ea4c 0000 	orr.w	r0, ip, r0
 8010b66:	6070      	str	r0, [r6, #4]
 8010b68:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8010b6c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8010b70:	3808      	subs	r0, #8
 8010b72:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8010b76:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8010b7a:	f8cc 400c 	str.w	r4, [ip, #12]
 8010b7e:	1098      	asrs	r0, r3, #2
 8010b80:	2201      	movs	r2, #1
 8010b82:	4082      	lsls	r2, r0
 8010b84:	6870      	ldr	r0, [r6, #4]
 8010b86:	4290      	cmp	r0, r2
 8010b88:	d326      	bcc.n	8010bd8 <_malloc_r+0x1c0>
 8010b8a:	4210      	tst	r0, r2
 8010b8c:	d106      	bne.n	8010b9c <_malloc_r+0x184>
 8010b8e:	f023 0303 	bic.w	r3, r3, #3
 8010b92:	0052      	lsls	r2, r2, #1
 8010b94:	4210      	tst	r0, r2
 8010b96:	f103 0304 	add.w	r3, r3, #4
 8010b9a:	d0fa      	beq.n	8010b92 <_malloc_r+0x17a>
 8010b9c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8010ba0:	46c1      	mov	r9, r8
 8010ba2:	469e      	mov	lr, r3
 8010ba4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8010ba8:	454c      	cmp	r4, r9
 8010baa:	f040 80b9 	bne.w	8010d20 <_malloc_r+0x308>
 8010bae:	f10e 0e01 	add.w	lr, lr, #1
 8010bb2:	f01e 0f03 	tst.w	lr, #3
 8010bb6:	f109 0908 	add.w	r9, r9, #8
 8010bba:	d1f3      	bne.n	8010ba4 <_malloc_r+0x18c>
 8010bbc:	0798      	lsls	r0, r3, #30
 8010bbe:	f040 80e3 	bne.w	8010d88 <_malloc_r+0x370>
 8010bc2:	6873      	ldr	r3, [r6, #4]
 8010bc4:	ea23 0302 	bic.w	r3, r3, r2
 8010bc8:	6073      	str	r3, [r6, #4]
 8010bca:	6870      	ldr	r0, [r6, #4]
 8010bcc:	0052      	lsls	r2, r2, #1
 8010bce:	4290      	cmp	r0, r2
 8010bd0:	d302      	bcc.n	8010bd8 <_malloc_r+0x1c0>
 8010bd2:	2a00      	cmp	r2, #0
 8010bd4:	f040 80e5 	bne.w	8010da2 <_malloc_r+0x38a>
 8010bd8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8010bdc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010be0:	f023 0903 	bic.w	r9, r3, #3
 8010be4:	45b9      	cmp	r9, r7
 8010be6:	d304      	bcc.n	8010bf2 <_malloc_r+0x1da>
 8010be8:	eba9 0207 	sub.w	r2, r9, r7
 8010bec:	2a0f      	cmp	r2, #15
 8010bee:	f300 8141 	bgt.w	8010e74 <_malloc_r+0x45c>
 8010bf2:	4b46      	ldr	r3, [pc, #280]	@ (8010d0c <_malloc_r+0x2f4>)
 8010bf4:	6819      	ldr	r1, [r3, #0]
 8010bf6:	3110      	adds	r1, #16
 8010bf8:	4439      	add	r1, r7
 8010bfa:	2008      	movs	r0, #8
 8010bfc:	9101      	str	r1, [sp, #4]
 8010bfe:	f002 f98f 	bl	8012f20 <sysconf>
 8010c02:	4a43      	ldr	r2, [pc, #268]	@ (8010d10 <_malloc_r+0x2f8>)
 8010c04:	9901      	ldr	r1, [sp, #4]
 8010c06:	6813      	ldr	r3, [r2, #0]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	bf1f      	itttt	ne
 8010c0c:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 8010c10:	1809      	addne	r1, r1, r0
 8010c12:	4243      	negne	r3, r0
 8010c14:	4019      	andne	r1, r3
 8010c16:	4680      	mov	r8, r0
 8010c18:	4628      	mov	r0, r5
 8010c1a:	9101      	str	r1, [sp, #4]
 8010c1c:	f002 f95e 	bl	8012edc <_sbrk_r>
 8010c20:	1c42      	adds	r2, r0, #1
 8010c22:	eb0a 0b09 	add.w	fp, sl, r9
 8010c26:	4604      	mov	r4, r0
 8010c28:	f000 80f7 	beq.w	8010e1a <_malloc_r+0x402>
 8010c2c:	4583      	cmp	fp, r0
 8010c2e:	9901      	ldr	r1, [sp, #4]
 8010c30:	4a37      	ldr	r2, [pc, #220]	@ (8010d10 <_malloc_r+0x2f8>)
 8010c32:	d902      	bls.n	8010c3a <_malloc_r+0x222>
 8010c34:	45b2      	cmp	sl, r6
 8010c36:	f040 80f0 	bne.w	8010e1a <_malloc_r+0x402>
 8010c3a:	4b36      	ldr	r3, [pc, #216]	@ (8010d14 <_malloc_r+0x2fc>)
 8010c3c:	6818      	ldr	r0, [r3, #0]
 8010c3e:	45a3      	cmp	fp, r4
 8010c40:	eb00 0e01 	add.w	lr, r0, r1
 8010c44:	f8c3 e000 	str.w	lr, [r3]
 8010c48:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8010c4c:	f040 80ab 	bne.w	8010da6 <_malloc_r+0x38e>
 8010c50:	ea1b 0f0c 	tst.w	fp, ip
 8010c54:	f040 80a7 	bne.w	8010da6 <_malloc_r+0x38e>
 8010c58:	68b2      	ldr	r2, [r6, #8]
 8010c5a:	4449      	add	r1, r9
 8010c5c:	f041 0101 	orr.w	r1, r1, #1
 8010c60:	6051      	str	r1, [r2, #4]
 8010c62:	4a2d      	ldr	r2, [pc, #180]	@ (8010d18 <_malloc_r+0x300>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	6811      	ldr	r1, [r2, #0]
 8010c68:	428b      	cmp	r3, r1
 8010c6a:	bf88      	it	hi
 8010c6c:	6013      	strhi	r3, [r2, #0]
 8010c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8010d1c <_malloc_r+0x304>)
 8010c70:	6811      	ldr	r1, [r2, #0]
 8010c72:	428b      	cmp	r3, r1
 8010c74:	bf88      	it	hi
 8010c76:	6013      	strhi	r3, [r2, #0]
 8010c78:	e0cf      	b.n	8010e1a <_malloc_r+0x402>
 8010c7a:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8010c7e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8010c82:	d218      	bcs.n	8010cb6 <_malloc_r+0x29e>
 8010c84:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8010c88:	3238      	adds	r2, #56	@ 0x38
 8010c8a:	f102 0e01 	add.w	lr, r2, #1
 8010c8e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8010c92:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8010c96:	45f0      	cmp	r8, lr
 8010c98:	d12b      	bne.n	8010cf2 <_malloc_r+0x2da>
 8010c9a:	1092      	asrs	r2, r2, #2
 8010c9c:	f04f 0c01 	mov.w	ip, #1
 8010ca0:	fa0c f202 	lsl.w	r2, ip, r2
 8010ca4:	4302      	orrs	r2, r0
 8010ca6:	6072      	str	r2, [r6, #4]
 8010ca8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8010cac:	f8c8 4008 	str.w	r4, [r8, #8]
 8010cb0:	f8ce 400c 	str.w	r4, [lr, #12]
 8010cb4:	e763      	b.n	8010b7e <_malloc_r+0x166>
 8010cb6:	2a14      	cmp	r2, #20
 8010cb8:	d801      	bhi.n	8010cbe <_malloc_r+0x2a6>
 8010cba:	325b      	adds	r2, #91	@ 0x5b
 8010cbc:	e7e5      	b.n	8010c8a <_malloc_r+0x272>
 8010cbe:	2a54      	cmp	r2, #84	@ 0x54
 8010cc0:	d803      	bhi.n	8010cca <_malloc_r+0x2b2>
 8010cc2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8010cc6:	326e      	adds	r2, #110	@ 0x6e
 8010cc8:	e7df      	b.n	8010c8a <_malloc_r+0x272>
 8010cca:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8010cce:	d803      	bhi.n	8010cd8 <_malloc_r+0x2c0>
 8010cd0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8010cd4:	3277      	adds	r2, #119	@ 0x77
 8010cd6:	e7d8      	b.n	8010c8a <_malloc_r+0x272>
 8010cd8:	f240 5e54 	movw	lr, #1364	@ 0x554
 8010cdc:	4572      	cmp	r2, lr
 8010cde:	bf9a      	itte	ls
 8010ce0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8010ce4:	327c      	addls	r2, #124	@ 0x7c
 8010ce6:	227e      	movhi	r2, #126	@ 0x7e
 8010ce8:	e7cf      	b.n	8010c8a <_malloc_r+0x272>
 8010cea:	f8de e008 	ldr.w	lr, [lr, #8]
 8010cee:	45f0      	cmp	r8, lr
 8010cf0:	d005      	beq.n	8010cfe <_malloc_r+0x2e6>
 8010cf2:	f8de 2004 	ldr.w	r2, [lr, #4]
 8010cf6:	f022 0203 	bic.w	r2, r2, #3
 8010cfa:	4562      	cmp	r2, ip
 8010cfc:	d8f5      	bhi.n	8010cea <_malloc_r+0x2d2>
 8010cfe:	f8de 800c 	ldr.w	r8, [lr, #12]
 8010d02:	e7d1      	b.n	8010ca8 <_malloc_r+0x290>
 8010d04:	240002bc 	.word	0x240002bc
 8010d08:	240002c4 	.word	0x240002c4
 8010d0c:	24015384 	.word	0x24015384
 8010d10:	240002b4 	.word	0x240002b4
 8010d14:	24015354 	.word	0x24015354
 8010d18:	24015380 	.word	0x24015380
 8010d1c:	2401537c 	.word	0x2401537c
 8010d20:	6860      	ldr	r0, [r4, #4]
 8010d22:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8010d26:	f020 0003 	bic.w	r0, r0, #3
 8010d2a:	eba0 0a07 	sub.w	sl, r0, r7
 8010d2e:	f1ba 0f0f 	cmp.w	sl, #15
 8010d32:	dd12      	ble.n	8010d5a <_malloc_r+0x342>
 8010d34:	68a3      	ldr	r3, [r4, #8]
 8010d36:	19e2      	adds	r2, r4, r7
 8010d38:	f047 0701 	orr.w	r7, r7, #1
 8010d3c:	6067      	str	r7, [r4, #4]
 8010d3e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8010d42:	f8cc 3008 	str.w	r3, [ip, #8]
 8010d46:	f04a 0301 	orr.w	r3, sl, #1
 8010d4a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8010d4e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8010d52:	6053      	str	r3, [r2, #4]
 8010d54:	f844 a000 	str.w	sl, [r4, r0]
 8010d58:	e68f      	b.n	8010a7a <_malloc_r+0x62>
 8010d5a:	f1ba 0f00 	cmp.w	sl, #0
 8010d5e:	db11      	blt.n	8010d84 <_malloc_r+0x36c>
 8010d60:	4420      	add	r0, r4
 8010d62:	6843      	ldr	r3, [r0, #4]
 8010d64:	f043 0301 	orr.w	r3, r3, #1
 8010d68:	6043      	str	r3, [r0, #4]
 8010d6a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8010d6e:	4628      	mov	r0, r5
 8010d70:	f8c3 c00c 	str.w	ip, [r3, #12]
 8010d74:	f8cc 3008 	str.w	r3, [ip, #8]
 8010d78:	f001 fa88 	bl	801228c <__malloc_unlock>
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	b003      	add	sp, #12
 8010d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d84:	4664      	mov	r4, ip
 8010d86:	e70f      	b.n	8010ba8 <_malloc_r+0x190>
 8010d88:	f858 0908 	ldr.w	r0, [r8], #-8
 8010d8c:	4540      	cmp	r0, r8
 8010d8e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010d92:	f43f af13 	beq.w	8010bbc <_malloc_r+0x1a4>
 8010d96:	e718      	b.n	8010bca <_malloc_r+0x1b2>
 8010d98:	3304      	adds	r3, #4
 8010d9a:	0052      	lsls	r2, r2, #1
 8010d9c:	4210      	tst	r0, r2
 8010d9e:	d0fb      	beq.n	8010d98 <_malloc_r+0x380>
 8010da0:	e6fc      	b.n	8010b9c <_malloc_r+0x184>
 8010da2:	4673      	mov	r3, lr
 8010da4:	e7fa      	b.n	8010d9c <_malloc_r+0x384>
 8010da6:	6810      	ldr	r0, [r2, #0]
 8010da8:	3001      	adds	r0, #1
 8010daa:	bf1b      	ittet	ne
 8010dac:	eba4 0b0b 	subne.w	fp, r4, fp
 8010db0:	eb0b 020e 	addne.w	r2, fp, lr
 8010db4:	6014      	streq	r4, [r2, #0]
 8010db6:	601a      	strne	r2, [r3, #0]
 8010db8:	f014 0b07 	ands.w	fp, r4, #7
 8010dbc:	bf1a      	itte	ne
 8010dbe:	f1cb 0008 	rsbne	r0, fp, #8
 8010dc2:	1824      	addne	r4, r4, r0
 8010dc4:	4658      	moveq	r0, fp
 8010dc6:	1862      	adds	r2, r4, r1
 8010dc8:	ea02 010c 	and.w	r1, r2, ip
 8010dcc:	4480      	add	r8, r0
 8010dce:	eba8 0801 	sub.w	r8, r8, r1
 8010dd2:	ea08 080c 	and.w	r8, r8, ip
 8010dd6:	4641      	mov	r1, r8
 8010dd8:	4628      	mov	r0, r5
 8010dda:	9201      	str	r2, [sp, #4]
 8010ddc:	f002 f87e 	bl	8012edc <_sbrk_r>
 8010de0:	1c43      	adds	r3, r0, #1
 8010de2:	9a01      	ldr	r2, [sp, #4]
 8010de4:	4b28      	ldr	r3, [pc, #160]	@ (8010e88 <_malloc_r+0x470>)
 8010de6:	d107      	bne.n	8010df8 <_malloc_r+0x3e0>
 8010de8:	f1bb 0f00 	cmp.w	fp, #0
 8010dec:	d023      	beq.n	8010e36 <_malloc_r+0x41e>
 8010dee:	f1ab 0008 	sub.w	r0, fp, #8
 8010df2:	4410      	add	r0, r2
 8010df4:	f04f 0800 	mov.w	r8, #0
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	60b4      	str	r4, [r6, #8]
 8010dfc:	1b00      	subs	r0, r0, r4
 8010dfe:	4440      	add	r0, r8
 8010e00:	4442      	add	r2, r8
 8010e02:	f040 0001 	orr.w	r0, r0, #1
 8010e06:	45b2      	cmp	sl, r6
 8010e08:	601a      	str	r2, [r3, #0]
 8010e0a:	6060      	str	r0, [r4, #4]
 8010e0c:	f43f af29 	beq.w	8010c62 <_malloc_r+0x24a>
 8010e10:	f1b9 0f0f 	cmp.w	r9, #15
 8010e14:	d812      	bhi.n	8010e3c <_malloc_r+0x424>
 8010e16:	2301      	movs	r3, #1
 8010e18:	6063      	str	r3, [r4, #4]
 8010e1a:	68b3      	ldr	r3, [r6, #8]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	f023 0303 	bic.w	r3, r3, #3
 8010e22:	42bb      	cmp	r3, r7
 8010e24:	eba3 0207 	sub.w	r2, r3, r7
 8010e28:	d301      	bcc.n	8010e2e <_malloc_r+0x416>
 8010e2a:	2a0f      	cmp	r2, #15
 8010e2c:	dc22      	bgt.n	8010e74 <_malloc_r+0x45c>
 8010e2e:	4628      	mov	r0, r5
 8010e30:	f001 fa2c 	bl	801228c <__malloc_unlock>
 8010e34:	e5fc      	b.n	8010a30 <_malloc_r+0x18>
 8010e36:	4610      	mov	r0, r2
 8010e38:	46d8      	mov	r8, fp
 8010e3a:	e7dd      	b.n	8010df8 <_malloc_r+0x3e0>
 8010e3c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010e40:	f1a9 090c 	sub.w	r9, r9, #12
 8010e44:	f029 0907 	bic.w	r9, r9, #7
 8010e48:	f002 0201 	and.w	r2, r2, #1
 8010e4c:	ea42 0209 	orr.w	r2, r2, r9
 8010e50:	f8ca 2004 	str.w	r2, [sl, #4]
 8010e54:	2105      	movs	r1, #5
 8010e56:	eb0a 0209 	add.w	r2, sl, r9
 8010e5a:	f1b9 0f0f 	cmp.w	r9, #15
 8010e5e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8010e62:	f67f aefe 	bls.w	8010c62 <_malloc_r+0x24a>
 8010e66:	f10a 0108 	add.w	r1, sl, #8
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	f7ff fd14 	bl	8010898 <_free_r>
 8010e70:	4b05      	ldr	r3, [pc, #20]	@ (8010e88 <_malloc_r+0x470>)
 8010e72:	e6f6      	b.n	8010c62 <_malloc_r+0x24a>
 8010e74:	68b4      	ldr	r4, [r6, #8]
 8010e76:	f047 0301 	orr.w	r3, r7, #1
 8010e7a:	4427      	add	r7, r4
 8010e7c:	f042 0201 	orr.w	r2, r2, #1
 8010e80:	6063      	str	r3, [r4, #4]
 8010e82:	60b7      	str	r7, [r6, #8]
 8010e84:	607a      	str	r2, [r7, #4]
 8010e86:	e5f8      	b.n	8010a7a <_malloc_r+0x62>
 8010e88:	24015354 	.word	0x24015354

08010e8c <__ascii_mbtowc>:
 8010e8c:	b082      	sub	sp, #8
 8010e8e:	b901      	cbnz	r1, 8010e92 <__ascii_mbtowc+0x6>
 8010e90:	a901      	add	r1, sp, #4
 8010e92:	b142      	cbz	r2, 8010ea6 <__ascii_mbtowc+0x1a>
 8010e94:	b14b      	cbz	r3, 8010eaa <__ascii_mbtowc+0x1e>
 8010e96:	7813      	ldrb	r3, [r2, #0]
 8010e98:	600b      	str	r3, [r1, #0]
 8010e9a:	7812      	ldrb	r2, [r2, #0]
 8010e9c:	1e10      	subs	r0, r2, #0
 8010e9e:	bf18      	it	ne
 8010ea0:	2001      	movne	r0, #1
 8010ea2:	b002      	add	sp, #8
 8010ea4:	4770      	bx	lr
 8010ea6:	4610      	mov	r0, r2
 8010ea8:	e7fb      	b.n	8010ea2 <__ascii_mbtowc+0x16>
 8010eaa:	f06f 0001 	mvn.w	r0, #1
 8010eae:	e7f8      	b.n	8010ea2 <__ascii_mbtowc+0x16>

08010eb0 <_svfprintf_r>:
 8010eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb4:	ed2d 8b04 	vpush	{d8-d9}
 8010eb8:	b0cb      	sub	sp, #300	@ 0x12c
 8010eba:	468a      	mov	sl, r1
 8010ebc:	4691      	mov	r9, r2
 8010ebe:	461e      	mov	r6, r3
 8010ec0:	9002      	str	r0, [sp, #8]
 8010ec2:	f7fe fe2d 	bl	800fb20 <_localeconv_r>
 8010ec6:	6803      	ldr	r3, [r0, #0]
 8010ec8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7ef fa58 	bl	8000380 <strlen>
 8010ed0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8010ed4:	9009      	str	r0, [sp, #36]	@ 0x24
 8010ed6:	061c      	lsls	r4, r3, #24
 8010ed8:	d515      	bpl.n	8010f06 <_svfprintf_r+0x56>
 8010eda:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010ede:	b993      	cbnz	r3, 8010f06 <_svfprintf_r+0x56>
 8010ee0:	9802      	ldr	r0, [sp, #8]
 8010ee2:	2140      	movs	r1, #64	@ 0x40
 8010ee4:	f7ff fd98 	bl	8010a18 <_malloc_r>
 8010ee8:	f8ca 0000 	str.w	r0, [sl]
 8010eec:	f8ca 0010 	str.w	r0, [sl, #16]
 8010ef0:	b930      	cbnz	r0, 8010f00 <_svfprintf_r+0x50>
 8010ef2:	9a02      	ldr	r2, [sp, #8]
 8010ef4:	230c      	movs	r3, #12
 8010ef6:	6013      	str	r3, [r2, #0]
 8010ef8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010efc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010efe:	e1e1      	b.n	80112c4 <_svfprintf_r+0x414>
 8010f00:	2340      	movs	r3, #64	@ 0x40
 8010f02:	f8ca 3014 	str.w	r3, [sl, #20]
 8010f06:	2300      	movs	r3, #0
 8010f08:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 8010f0c:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 8011168 <_svfprintf_r+0x2b8>
 8010f10:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 8010f14:	ac21      	add	r4, sp, #132	@ 0x84
 8010f16:	941e      	str	r4, [sp, #120]	@ 0x78
 8010f18:	9303      	str	r3, [sp, #12]
 8010f1a:	9307      	str	r3, [sp, #28]
 8010f1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8010f1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f22:	464b      	mov	r3, r9
 8010f24:	461d      	mov	r5, r3
 8010f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f2a:	b10a      	cbz	r2, 8010f30 <_svfprintf_r+0x80>
 8010f2c:	2a25      	cmp	r2, #37	@ 0x25
 8010f2e:	d1f9      	bne.n	8010f24 <_svfprintf_r+0x74>
 8010f30:	ebb5 0709 	subs.w	r7, r5, r9
 8010f34:	d00d      	beq.n	8010f52 <_svfprintf_r+0xa2>
 8010f36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010f38:	443b      	add	r3, r7
 8010f3a:	9320      	str	r3, [sp, #128]	@ 0x80
 8010f3c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010f3e:	3301      	adds	r3, #1
 8010f40:	2b07      	cmp	r3, #7
 8010f42:	e9c4 9700 	strd	r9, r7, [r4]
 8010f46:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010f48:	dc75      	bgt.n	8011036 <_svfprintf_r+0x186>
 8010f4a:	3408      	adds	r4, #8
 8010f4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f4e:	443b      	add	r3, r7
 8010f50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f52:	782b      	ldrb	r3, [r5, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	f001 80ee 	beq.w	8012136 <_svfprintf_r+0x1286>
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	1c6b      	adds	r3, r5, #1
 8010f5e:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 8010f62:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010f66:	920a      	str	r2, [sp, #40]	@ 0x28
 8010f68:	4615      	mov	r5, r2
 8010f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f6e:	9204      	str	r2, [sp, #16]
 8010f70:	9308      	str	r3, [sp, #32]
 8010f72:	9b04      	ldr	r3, [sp, #16]
 8010f74:	3b20      	subs	r3, #32
 8010f76:	2b5a      	cmp	r3, #90	@ 0x5a
 8010f78:	f200 8564 	bhi.w	8011a44 <_svfprintf_r+0xb94>
 8010f7c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010f80:	0562009c 	.word	0x0562009c
 8010f84:	00a40562 	.word	0x00a40562
 8010f88:	05620562 	.word	0x05620562
 8010f8c:	00840562 	.word	0x00840562
 8010f90:	05620562 	.word	0x05620562
 8010f94:	00b100a7 	.word	0x00b100a7
 8010f98:	00ae0562 	.word	0x00ae0562
 8010f9c:	056200b3 	.word	0x056200b3
 8010fa0:	00d000cd 	.word	0x00d000cd
 8010fa4:	00d000d0 	.word	0x00d000d0
 8010fa8:	00d000d0 	.word	0x00d000d0
 8010fac:	00d000d0 	.word	0x00d000d0
 8010fb0:	00d000d0 	.word	0x00d000d0
 8010fb4:	05620562 	.word	0x05620562
 8010fb8:	05620562 	.word	0x05620562
 8010fbc:	05620562 	.word	0x05620562
 8010fc0:	01460562 	.word	0x01460562
 8010fc4:	01070562 	.word	0x01070562
 8010fc8:	0146011a 	.word	0x0146011a
 8010fcc:	01460146 	.word	0x01460146
 8010fd0:	05620562 	.word	0x05620562
 8010fd4:	05620562 	.word	0x05620562
 8010fd8:	056200e1 	.word	0x056200e1
 8010fdc:	045c0562 	.word	0x045c0562
 8010fe0:	05620562 	.word	0x05620562
 8010fe4:	04a60562 	.word	0x04a60562
 8010fe8:	04c70562 	.word	0x04c70562
 8010fec:	05620562 	.word	0x05620562
 8010ff0:	056204e9 	.word	0x056204e9
 8010ff4:	05620562 	.word	0x05620562
 8010ff8:	05620562 	.word	0x05620562
 8010ffc:	05620562 	.word	0x05620562
 8011000:	01460562 	.word	0x01460562
 8011004:	01070562 	.word	0x01070562
 8011008:	0146011c 	.word	0x0146011c
 801100c:	01460146 	.word	0x01460146
 8011010:	011c00e4 	.word	0x011c00e4
 8011014:	05620101 	.word	0x05620101
 8011018:	056200fa 	.word	0x056200fa
 801101c:	045e043d 	.word	0x045e043d
 8011020:	01010495 	.word	0x01010495
 8011024:	04a60562 	.word	0x04a60562
 8011028:	04c9009a 	.word	0x04c9009a
 801102c:	05620562 	.word	0x05620562
 8011030:	05620065 	.word	0x05620065
 8011034:	009a      	.short	0x009a
 8011036:	9802      	ldr	r0, [sp, #8]
 8011038:	aa1e      	add	r2, sp, #120	@ 0x78
 801103a:	4651      	mov	r1, sl
 801103c:	f002 f836 	bl	80130ac <__ssprint_r>
 8011040:	2800      	cmp	r0, #0
 8011042:	f040 813a 	bne.w	80112ba <_svfprintf_r+0x40a>
 8011046:	ac21      	add	r4, sp, #132	@ 0x84
 8011048:	e780      	b.n	8010f4c <_svfprintf_r+0x9c>
 801104a:	4b49      	ldr	r3, [pc, #292]	@ (8011170 <_svfprintf_r+0x2c0>)
 801104c:	9312      	str	r3, [sp, #72]	@ 0x48
 801104e:	f015 0320 	ands.w	r3, r5, #32
 8011052:	f000 8481 	beq.w	8011958 <_svfprintf_r+0xaa8>
 8011056:	3607      	adds	r6, #7
 8011058:	f026 0307 	bic.w	r3, r6, #7
 801105c:	461a      	mov	r2, r3
 801105e:	685f      	ldr	r7, [r3, #4]
 8011060:	f852 6b08 	ldr.w	r6, [r2], #8
 8011064:	9205      	str	r2, [sp, #20]
 8011066:	07eb      	lsls	r3, r5, #31
 8011068:	d50a      	bpl.n	8011080 <_svfprintf_r+0x1d0>
 801106a:	ea56 0307 	orrs.w	r3, r6, r7
 801106e:	d007      	beq.n	8011080 <_svfprintf_r+0x1d0>
 8011070:	2330      	movs	r3, #48	@ 0x30
 8011072:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8011076:	9b04      	ldr	r3, [sp, #16]
 8011078:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 801107c:	f045 0502 	orr.w	r5, r5, #2
 8011080:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8011084:	2302      	movs	r3, #2
 8011086:	e3e7      	b.n	8011858 <_svfprintf_r+0x9a8>
 8011088:	9802      	ldr	r0, [sp, #8]
 801108a:	f7fe fd49 	bl	800fb20 <_localeconv_r>
 801108e:	6843      	ldr	r3, [r0, #4]
 8011090:	9310      	str	r3, [sp, #64]	@ 0x40
 8011092:	4618      	mov	r0, r3
 8011094:	f7ef f974 	bl	8000380 <strlen>
 8011098:	900e      	str	r0, [sp, #56]	@ 0x38
 801109a:	9802      	ldr	r0, [sp, #8]
 801109c:	f7fe fd40 	bl	800fb20 <_localeconv_r>
 80110a0:	6883      	ldr	r3, [r0, #8]
 80110a2:	9307      	str	r3, [sp, #28]
 80110a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110a6:	b12b      	cbz	r3, 80110b4 <_svfprintf_r+0x204>
 80110a8:	9b07      	ldr	r3, [sp, #28]
 80110aa:	b11b      	cbz	r3, 80110b4 <_svfprintf_r+0x204>
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	b10b      	cbz	r3, 80110b4 <_svfprintf_r+0x204>
 80110b0:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 80110b4:	9b08      	ldr	r3, [sp, #32]
 80110b6:	e758      	b.n	8010f6a <_svfprintf_r+0xba>
 80110b8:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d1f9      	bne.n	80110b4 <_svfprintf_r+0x204>
 80110c0:	2320      	movs	r3, #32
 80110c2:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80110c6:	e7f5      	b.n	80110b4 <_svfprintf_r+0x204>
 80110c8:	f045 0501 	orr.w	r5, r5, #1
 80110cc:	e7f2      	b.n	80110b4 <_svfprintf_r+0x204>
 80110ce:	f856 3b04 	ldr.w	r3, [r6], #4
 80110d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	daed      	bge.n	80110b4 <_svfprintf_r+0x204>
 80110d8:	425b      	negs	r3, r3
 80110da:	930a      	str	r3, [sp, #40]	@ 0x28
 80110dc:	f045 0504 	orr.w	r5, r5, #4
 80110e0:	e7e8      	b.n	80110b4 <_svfprintf_r+0x204>
 80110e2:	232b      	movs	r3, #43	@ 0x2b
 80110e4:	e7ed      	b.n	80110c2 <_svfprintf_r+0x212>
 80110e6:	9b08      	ldr	r3, [sp, #32]
 80110e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110ec:	9204      	str	r2, [sp, #16]
 80110ee:	2a2a      	cmp	r2, #42	@ 0x2a
 80110f0:	d10f      	bne.n	8011112 <_svfprintf_r+0x262>
 80110f2:	f856 2b04 	ldr.w	r2, [r6], #4
 80110f6:	9308      	str	r3, [sp, #32]
 80110f8:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 80110fc:	e7da      	b.n	80110b4 <_svfprintf_r+0x204>
 80110fe:	fb01 2808 	mla	r8, r1, r8, r2
 8011102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011106:	9204      	str	r2, [sp, #16]
 8011108:	9a04      	ldr	r2, [sp, #16]
 801110a:	3a30      	subs	r2, #48	@ 0x30
 801110c:	2a09      	cmp	r2, #9
 801110e:	d9f6      	bls.n	80110fe <_svfprintf_r+0x24e>
 8011110:	e72e      	b.n	8010f70 <_svfprintf_r+0xc0>
 8011112:	f04f 0800 	mov.w	r8, #0
 8011116:	210a      	movs	r1, #10
 8011118:	e7f6      	b.n	8011108 <_svfprintf_r+0x258>
 801111a:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 801111e:	e7c9      	b.n	80110b4 <_svfprintf_r+0x204>
 8011120:	2200      	movs	r2, #0
 8011122:	9b08      	ldr	r3, [sp, #32]
 8011124:	920a      	str	r2, [sp, #40]	@ 0x28
 8011126:	210a      	movs	r1, #10
 8011128:	9a04      	ldr	r2, [sp, #16]
 801112a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801112c:	3a30      	subs	r2, #48	@ 0x30
 801112e:	fb01 2200 	mla	r2, r1, r0, r2
 8011132:	920a      	str	r2, [sp, #40]	@ 0x28
 8011134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011138:	9204      	str	r2, [sp, #16]
 801113a:	3a30      	subs	r2, #48	@ 0x30
 801113c:	2a09      	cmp	r2, #9
 801113e:	d9f3      	bls.n	8011128 <_svfprintf_r+0x278>
 8011140:	e716      	b.n	8010f70 <_svfprintf_r+0xc0>
 8011142:	f045 0508 	orr.w	r5, r5, #8
 8011146:	e7b5      	b.n	80110b4 <_svfprintf_r+0x204>
 8011148:	9b08      	ldr	r3, [sp, #32]
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	2b68      	cmp	r3, #104	@ 0x68
 801114e:	bf01      	itttt	eq
 8011150:	9b08      	ldreq	r3, [sp, #32]
 8011152:	3301      	addeq	r3, #1
 8011154:	9308      	streq	r3, [sp, #32]
 8011156:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801115a:	bf18      	it	ne
 801115c:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8011160:	e7a8      	b.n	80110b4 <_svfprintf_r+0x204>
 8011162:	bf00      	nop
 8011164:	f3af 8000 	nop.w
	...
 8011170:	08014a71 	.word	0x08014a71
 8011174:	9b08      	ldr	r3, [sp, #32]
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	2b6c      	cmp	r3, #108	@ 0x6c
 801117a:	d105      	bne.n	8011188 <_svfprintf_r+0x2d8>
 801117c:	9b08      	ldr	r3, [sp, #32]
 801117e:	3301      	adds	r3, #1
 8011180:	9308      	str	r3, [sp, #32]
 8011182:	f045 0520 	orr.w	r5, r5, #32
 8011186:	e795      	b.n	80110b4 <_svfprintf_r+0x204>
 8011188:	f045 0510 	orr.w	r5, r5, #16
 801118c:	e792      	b.n	80110b4 <_svfprintf_r+0x204>
 801118e:	4632      	mov	r2, r6
 8011190:	f852 3b04 	ldr.w	r3, [r2], #4
 8011194:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8011198:	2300      	movs	r3, #0
 801119a:	9205      	str	r2, [sp, #20]
 801119c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80111a0:	469b      	mov	fp, r3
 80111a2:	f04f 0801 	mov.w	r8, #1
 80111a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80111a8:	461f      	mov	r7, r3
 80111aa:	9306      	str	r3, [sp, #24]
 80111ac:	461e      	mov	r6, r3
 80111ae:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 80111b2:	e1a1      	b.n	80114f8 <_svfprintf_r+0x648>
 80111b4:	f045 0510 	orr.w	r5, r5, #16
 80111b8:	06a8      	lsls	r0, r5, #26
 80111ba:	d512      	bpl.n	80111e2 <_svfprintf_r+0x332>
 80111bc:	3607      	adds	r6, #7
 80111be:	f026 0307 	bic.w	r3, r6, #7
 80111c2:	461a      	mov	r2, r3
 80111c4:	685f      	ldr	r7, [r3, #4]
 80111c6:	f852 6b08 	ldr.w	r6, [r2], #8
 80111ca:	9205      	str	r2, [sp, #20]
 80111cc:	2f00      	cmp	r7, #0
 80111ce:	da06      	bge.n	80111de <_svfprintf_r+0x32e>
 80111d0:	4276      	negs	r6, r6
 80111d2:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80111d6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80111da:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80111de:	2301      	movs	r3, #1
 80111e0:	e33d      	b.n	801185e <_svfprintf_r+0x9ae>
 80111e2:	4633      	mov	r3, r6
 80111e4:	06e9      	lsls	r1, r5, #27
 80111e6:	f853 7b04 	ldr.w	r7, [r3], #4
 80111ea:	9305      	str	r3, [sp, #20]
 80111ec:	d502      	bpl.n	80111f4 <_svfprintf_r+0x344>
 80111ee:	463e      	mov	r6, r7
 80111f0:	17ff      	asrs	r7, r7, #31
 80111f2:	e7eb      	b.n	80111cc <_svfprintf_r+0x31c>
 80111f4:	066a      	lsls	r2, r5, #25
 80111f6:	d503      	bpl.n	8011200 <_svfprintf_r+0x350>
 80111f8:	b23e      	sxth	r6, r7
 80111fa:	f347 37c0 	sbfx	r7, r7, #15, #1
 80111fe:	e7e5      	b.n	80111cc <_svfprintf_r+0x31c>
 8011200:	05ab      	lsls	r3, r5, #22
 8011202:	d5f4      	bpl.n	80111ee <_svfprintf_r+0x33e>
 8011204:	b27e      	sxtb	r6, r7
 8011206:	f347 17c0 	sbfx	r7, r7, #7, #1
 801120a:	e7df      	b.n	80111cc <_svfprintf_r+0x31c>
 801120c:	3607      	adds	r6, #7
 801120e:	f026 0307 	bic.w	r3, r6, #7
 8011212:	ecb3 8b02 	vldmia	r3!, {d8}
 8011216:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 80113d8 <_svfprintf_r+0x528>
 801121a:	eeb0 6bc8 	vabs.f64	d6, d8
 801121e:	eeb4 6b47 	vcmp.f64	d6, d7
 8011222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011226:	9305      	str	r3, [sp, #20]
 8011228:	dd18      	ble.n	801125c <_svfprintf_r+0x3ac>
 801122a:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011232:	d502      	bpl.n	801123a <_svfprintf_r+0x38a>
 8011234:	232d      	movs	r3, #45	@ 0x2d
 8011236:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 801123a:	4a69      	ldr	r2, [pc, #420]	@ (80113e0 <_svfprintf_r+0x530>)
 801123c:	4b69      	ldr	r3, [pc, #420]	@ (80113e4 <_svfprintf_r+0x534>)
 801123e:	9904      	ldr	r1, [sp, #16]
 8011240:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8011244:	2947      	cmp	r1, #71	@ 0x47
 8011246:	bfd4      	ite	le
 8011248:	4691      	movle	r9, r2
 801124a:	4699      	movgt	r9, r3
 801124c:	f04f 0b00 	mov.w	fp, #0
 8011250:	f04f 0803 	mov.w	r8, #3
 8011254:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8011258:	f000 bfa4 	b.w	80121a4 <_svfprintf_r+0x12f4>
 801125c:	eeb4 8b48 	vcmp.f64	d8, d8
 8011260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011264:	d709      	bvc.n	801127a <_svfprintf_r+0x3ca>
 8011266:	ee18 3a90 	vmov	r3, s17
 801126a:	2b00      	cmp	r3, #0
 801126c:	bfbc      	itt	lt
 801126e:	232d      	movlt	r3, #45	@ 0x2d
 8011270:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 8011274:	4a5c      	ldr	r2, [pc, #368]	@ (80113e8 <_svfprintf_r+0x538>)
 8011276:	4b5d      	ldr	r3, [pc, #372]	@ (80113ec <_svfprintf_r+0x53c>)
 8011278:	e7e1      	b.n	801123e <_svfprintf_r+0x38e>
 801127a:	9b04      	ldr	r3, [sp, #16]
 801127c:	2b61      	cmp	r3, #97	@ 0x61
 801127e:	d027      	beq.n	80112d0 <_svfprintf_r+0x420>
 8011280:	2b41      	cmp	r3, #65	@ 0x41
 8011282:	d127      	bne.n	80112d4 <_svfprintf_r+0x424>
 8011284:	2358      	movs	r3, #88	@ 0x58
 8011286:	2230      	movs	r2, #48	@ 0x30
 8011288:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 801128c:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 8011290:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8011294:	f045 0502 	orr.w	r5, r5, #2
 8011298:	f340 8089 	ble.w	80113ae <_svfprintf_r+0x4fe>
 801129c:	9802      	ldr	r0, [sp, #8]
 801129e:	f108 0101 	add.w	r1, r8, #1
 80112a2:	f7ff fbb9 	bl	8010a18 <_malloc_r>
 80112a6:	4681      	mov	r9, r0
 80112a8:	2800      	cmp	r0, #0
 80112aa:	f040 8085 	bne.w	80113b8 <_svfprintf_r+0x508>
 80112ae:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80112b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112b6:	f8aa 300c 	strh.w	r3, [sl, #12]
 80112ba:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80112be:	065b      	lsls	r3, r3, #25
 80112c0:	f53f ae1a 	bmi.w	8010ef8 <_svfprintf_r+0x48>
 80112c4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80112c6:	b04b      	add	sp, #300	@ 0x12c
 80112c8:	ecbd 8b04 	vpop	{d8-d9}
 80112cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d0:	2378      	movs	r3, #120	@ 0x78
 80112d2:	e7d8      	b.n	8011286 <_svfprintf_r+0x3d6>
 80112d4:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80112d8:	d070      	beq.n	80113bc <_svfprintf_r+0x50c>
 80112da:	9b04      	ldr	r3, [sp, #16]
 80112dc:	f023 0320 	bic.w	r3, r3, #32
 80112e0:	2b47      	cmp	r3, #71	@ 0x47
 80112e2:	d170      	bne.n	80113c6 <_svfprintf_r+0x516>
 80112e4:	f1b8 0f00 	cmp.w	r8, #0
 80112e8:	d16d      	bne.n	80113c6 <_svfprintf_r+0x516>
 80112ea:	46c3      	mov	fp, r8
 80112ec:	f04f 0801 	mov.w	r8, #1
 80112f0:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80112f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80112f6:	ee18 3a90 	vmov	r3, s17
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	da66      	bge.n	80113cc <_svfprintf_r+0x51c>
 80112fe:	eeb1 9b48 	vneg.f64	d9, d8
 8011302:	232d      	movs	r3, #45	@ 0x2d
 8011304:	930d      	str	r3, [sp, #52]	@ 0x34
 8011306:	9b04      	ldr	r3, [sp, #16]
 8011308:	f023 0720 	bic.w	r7, r3, #32
 801130c:	2f41      	cmp	r7, #65	@ 0x41
 801130e:	f040 81c6 	bne.w	801169e <_svfprintf_r+0x7ee>
 8011312:	eeb0 0b49 	vmov.f64	d0, d9
 8011316:	a818      	add	r0, sp, #96	@ 0x60
 8011318:	f7fe fc5a 	bl	800fbd0 <frexp>
 801131c:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 8011320:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011324:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801132c:	bf08      	it	eq
 801132e:	2301      	moveq	r3, #1
 8011330:	9a04      	ldr	r2, [sp, #16]
 8011332:	bf08      	it	eq
 8011334:	9318      	streq	r3, [sp, #96]	@ 0x60
 8011336:	492e      	ldr	r1, [pc, #184]	@ (80113f0 <_svfprintf_r+0x540>)
 8011338:	4b2e      	ldr	r3, [pc, #184]	@ (80113f4 <_svfprintf_r+0x544>)
 801133a:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 801133e:	2a61      	cmp	r2, #97	@ 0x61
 8011340:	bf18      	it	ne
 8011342:	4619      	movne	r1, r3
 8011344:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011348:	464b      	mov	r3, r9
 801134a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801134e:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8011352:	ee16 0a90 	vmov	r0, s13
 8011356:	5c0e      	ldrb	r6, [r1, r0]
 8011358:	f803 6b01 	strb.w	r6, [r3], #1
 801135c:	1c56      	adds	r6, r2, #1
 801135e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011362:	ee30 0b46 	vsub.f64	d0, d0, d6
 8011366:	d006      	beq.n	8011376 <_svfprintf_r+0x4c6>
 8011368:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011370:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
 8011374:	d12e      	bne.n	80113d4 <_svfprintf_r+0x524>
 8011376:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801137a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011382:	dc39      	bgt.n	80113f8 <_svfprintf_r+0x548>
 8011384:	eeb4 0b47 	vcmp.f64	d0, d7
 8011388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801138c:	d101      	bne.n	8011392 <_svfprintf_r+0x4e2>
 801138e:	07c6      	lsls	r6, r0, #31
 8011390:	d432      	bmi.n	80113f8 <_svfprintf_r+0x548>
 8011392:	4619      	mov	r1, r3
 8011394:	189e      	adds	r6, r3, r2
 8011396:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 801139a:	1a70      	subs	r0, r6, r1
 801139c:	2800      	cmp	r0, #0
 801139e:	f280 817b 	bge.w	8011698 <_svfprintf_r+0x7e8>
 80113a2:	1c51      	adds	r1, r2, #1
 80113a4:	3201      	adds	r2, #1
 80113a6:	bfb8      	it	lt
 80113a8:	2100      	movlt	r1, #0
 80113aa:	440b      	add	r3, r1
 80113ac:	e037      	b.n	801141e <_svfprintf_r+0x56e>
 80113ae:	f04f 0b00 	mov.w	fp, #0
 80113b2:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 80113b6:	e79b      	b.n	80112f0 <_svfprintf_r+0x440>
 80113b8:	4683      	mov	fp, r0
 80113ba:	e799      	b.n	80112f0 <_svfprintf_r+0x440>
 80113bc:	f04f 0b00 	mov.w	fp, #0
 80113c0:	f04f 0806 	mov.w	r8, #6
 80113c4:	e794      	b.n	80112f0 <_svfprintf_r+0x440>
 80113c6:	f04f 0b00 	mov.w	fp, #0
 80113ca:	e791      	b.n	80112f0 <_svfprintf_r+0x440>
 80113cc:	2300      	movs	r3, #0
 80113ce:	eeb0 9b48 	vmov.f64	d9, d8
 80113d2:	e797      	b.n	8011304 <_svfprintf_r+0x454>
 80113d4:	4632      	mov	r2, r6
 80113d6:	e7b8      	b.n	801134a <_svfprintf_r+0x49a>
 80113d8:	ffffffff 	.word	0xffffffff
 80113dc:	7fefffff 	.word	0x7fefffff
 80113e0:	08014c25 	.word	0x08014c25
 80113e4:	08014c29 	.word	0x08014c29
 80113e8:	08014c2d 	.word	0x08014c2d
 80113ec:	08014c31 	.word	0x08014c31
 80113f0:	08014a71 	.word	0x08014a71
 80113f4:	08014a60 	.word	0x08014a60
 80113f8:	7bce      	ldrb	r6, [r1, #15]
 80113fa:	931c      	str	r3, [sp, #112]	@ 0x70
 80113fc:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8011400:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8011402:	1e42      	subs	r2, r0, #1
 8011404:	921c      	str	r2, [sp, #112]	@ 0x70
 8011406:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 801140a:	42b2      	cmp	r2, r6
 801140c:	f000 8141 	beq.w	8011692 <_svfprintf_r+0x7e2>
 8011410:	2a39      	cmp	r2, #57	@ 0x39
 8011412:	bf16      	itet	ne
 8011414:	3201      	addne	r2, #1
 8011416:	7a8a      	ldrbeq	r2, [r1, #10]
 8011418:	b2d2      	uxtbne	r2, r2
 801141a:	f800 2c01 	strb.w	r2, [r0, #-1]
 801141e:	eba3 0309 	sub.w	r3, r3, r9
 8011422:	2f47      	cmp	r7, #71	@ 0x47
 8011424:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8011426:	9303      	str	r3, [sp, #12]
 8011428:	f040 8179 	bne.w	801171e <_svfprintf_r+0x86e>
 801142c:	1cf1      	adds	r1, r6, #3
 801142e:	db02      	blt.n	8011436 <_svfprintf_r+0x586>
 8011430:	4546      	cmp	r6, r8
 8011432:	f340 8196 	ble.w	8011762 <_svfprintf_r+0x8b2>
 8011436:	9b04      	ldr	r3, [sp, #16]
 8011438:	3b02      	subs	r3, #2
 801143a:	9304      	str	r3, [sp, #16]
 801143c:	9904      	ldr	r1, [sp, #16]
 801143e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8011442:	f021 0120 	bic.w	r1, r1, #32
 8011446:	2941      	cmp	r1, #65	@ 0x41
 8011448:	bf08      	it	eq
 801144a:	320f      	addeq	r2, #15
 801144c:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8011450:	bf06      	itte	eq
 8011452:	b2d2      	uxtbeq	r2, r2
 8011454:	2101      	moveq	r1, #1
 8011456:	2100      	movne	r1, #0
 8011458:	2b00      	cmp	r3, #0
 801145a:	9318      	str	r3, [sp, #96]	@ 0x60
 801145c:	bfb8      	it	lt
 801145e:	f1c6 0301 	rsblt	r3, r6, #1
 8011462:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 8011466:	bfb4      	ite	lt
 8011468:	222d      	movlt	r2, #45	@ 0x2d
 801146a:	222b      	movge	r2, #43	@ 0x2b
 801146c:	2b09      	cmp	r3, #9
 801146e:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 8011472:	f340 8169 	ble.w	8011748 <_svfprintf_r+0x898>
 8011476:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 801147a:	270a      	movs	r7, #10
 801147c:	4602      	mov	r2, r0
 801147e:	fbb3 f6f7 	udiv	r6, r3, r7
 8011482:	fb07 3116 	mls	r1, r7, r6, r3
 8011486:	3130      	adds	r1, #48	@ 0x30
 8011488:	f802 1c01 	strb.w	r1, [r2, #-1]
 801148c:	4619      	mov	r1, r3
 801148e:	2963      	cmp	r1, #99	@ 0x63
 8011490:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8011494:	4633      	mov	r3, r6
 8011496:	dcf1      	bgt.n	801147c <_svfprintf_r+0x5cc>
 8011498:	3330      	adds	r3, #48	@ 0x30
 801149a:	1e91      	subs	r1, r2, #2
 801149c:	f800 3c01 	strb.w	r3, [r0, #-1]
 80114a0:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 80114a4:	460b      	mov	r3, r1
 80114a6:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 80114aa:	4283      	cmp	r3, r0
 80114ac:	f0c0 8147 	bcc.w	801173e <_svfprintf_r+0x88e>
 80114b0:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 80114b4:	1a9b      	subs	r3, r3, r2
 80114b6:	4281      	cmp	r1, r0
 80114b8:	bf88      	it	hi
 80114ba:	2300      	movhi	r3, #0
 80114bc:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 80114c0:	441a      	add	r2, r3
 80114c2:	ab1a      	add	r3, sp, #104	@ 0x68
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	9a03      	ldr	r2, [sp, #12]
 80114c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80114ca:	2a01      	cmp	r2, #1
 80114cc:	eb03 0802 	add.w	r8, r3, r2
 80114d0:	dc01      	bgt.n	80114d6 <_svfprintf_r+0x626>
 80114d2:	07ea      	lsls	r2, r5, #31
 80114d4:	d501      	bpl.n	80114da <_svfprintf_r+0x62a>
 80114d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114d8:	4498      	add	r8, r3
 80114da:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80114de:	2700      	movs	r7, #0
 80114e0:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80114e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80114e6:	9706      	str	r7, [sp, #24]
 80114e8:	463e      	mov	r6, r7
 80114ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	f040 8180 	bne.w	80117f2 <_svfprintf_r+0x942>
 80114f2:	2300      	movs	r3, #0
 80114f4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80114f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80114f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114fa:	4543      	cmp	r3, r8
 80114fc:	bfb8      	it	lt
 80114fe:	4643      	movlt	r3, r8
 8011500:	930d      	str	r3, [sp, #52]	@ 0x34
 8011502:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 8011506:	b113      	cbz	r3, 801150e <_svfprintf_r+0x65e>
 8011508:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801150a:	3301      	adds	r3, #1
 801150c:	930d      	str	r3, [sp, #52]	@ 0x34
 801150e:	f015 0302 	ands.w	r3, r5, #2
 8011512:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011514:	bf1e      	ittt	ne
 8011516:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 8011518:	3302      	addne	r3, #2
 801151a:	930d      	strne	r3, [sp, #52]	@ 0x34
 801151c:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8011520:	9314      	str	r3, [sp, #80]	@ 0x50
 8011522:	d120      	bne.n	8011566 <_svfprintf_r+0x6b6>
 8011524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011526:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011528:	1a9b      	subs	r3, r3, r2
 801152a:	2b00      	cmp	r3, #0
 801152c:	dd1b      	ble.n	8011566 <_svfprintf_r+0x6b6>
 801152e:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 8011532:	49a5      	ldr	r1, [pc, #660]	@ (80117c8 <_svfprintf_r+0x918>)
 8011534:	6021      	str	r1, [r4, #0]
 8011536:	2b10      	cmp	r3, #16
 8011538:	f102 0201 	add.w	r2, r2, #1
 801153c:	f104 0008 	add.w	r0, r4, #8
 8011540:	f300 828c 	bgt.w	8011a5c <_svfprintf_r+0xbac>
 8011544:	eb0c 0103 	add.w	r1, ip, r3
 8011548:	2a07      	cmp	r2, #7
 801154a:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 801154e:	6063      	str	r3, [r4, #4]
 8011550:	f340 8299 	ble.w	8011a86 <_svfprintf_r+0xbd6>
 8011554:	9802      	ldr	r0, [sp, #8]
 8011556:	aa1e      	add	r2, sp, #120	@ 0x78
 8011558:	4651      	mov	r1, sl
 801155a:	f001 fda7 	bl	80130ac <__ssprint_r>
 801155e:	2800      	cmp	r0, #0
 8011560:	f040 85c7 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011564:	ac21      	add	r4, sp, #132	@ 0x84
 8011566:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 801156a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801156c:	b16a      	cbz	r2, 801158a <_svfprintf_r+0x6da>
 801156e:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 8011572:	6022      	str	r2, [r4, #0]
 8011574:	2201      	movs	r2, #1
 8011576:	4413      	add	r3, r2
 8011578:	9320      	str	r3, [sp, #128]	@ 0x80
 801157a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801157c:	6062      	str	r2, [r4, #4]
 801157e:	4413      	add	r3, r2
 8011580:	2b07      	cmp	r3, #7
 8011582:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011584:	f300 8281 	bgt.w	8011a8a <_svfprintf_r+0xbda>
 8011588:	3408      	adds	r4, #8
 801158a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801158c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801158e:	b162      	cbz	r2, 80115aa <_svfprintf_r+0x6fa>
 8011590:	aa17      	add	r2, sp, #92	@ 0x5c
 8011592:	6022      	str	r2, [r4, #0]
 8011594:	2202      	movs	r2, #2
 8011596:	4413      	add	r3, r2
 8011598:	9320      	str	r3, [sp, #128]	@ 0x80
 801159a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801159c:	6062      	str	r2, [r4, #4]
 801159e:	3301      	adds	r3, #1
 80115a0:	2b07      	cmp	r3, #7
 80115a2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80115a4:	f300 827b 	bgt.w	8011a9e <_svfprintf_r+0xbee>
 80115a8:	3408      	adds	r4, #8
 80115aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80115ac:	2b80      	cmp	r3, #128	@ 0x80
 80115ae:	d120      	bne.n	80115f2 <_svfprintf_r+0x742>
 80115b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80115b4:	1a9b      	subs	r3, r3, r2
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	dd1b      	ble.n	80115f2 <_svfprintf_r+0x742>
 80115ba:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 80115be:	4983      	ldr	r1, [pc, #524]	@ (80117cc <_svfprintf_r+0x91c>)
 80115c0:	6021      	str	r1, [r4, #0]
 80115c2:	2b10      	cmp	r3, #16
 80115c4:	f102 0201 	add.w	r2, r2, #1
 80115c8:	f104 0008 	add.w	r0, r4, #8
 80115cc:	f300 8271 	bgt.w	8011ab2 <_svfprintf_r+0xc02>
 80115d0:	eb0c 0103 	add.w	r1, ip, r3
 80115d4:	2a07      	cmp	r2, #7
 80115d6:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 80115da:	6063      	str	r3, [r4, #4]
 80115dc:	f340 827e 	ble.w	8011adc <_svfprintf_r+0xc2c>
 80115e0:	9802      	ldr	r0, [sp, #8]
 80115e2:	aa1e      	add	r2, sp, #120	@ 0x78
 80115e4:	4651      	mov	r1, sl
 80115e6:	f001 fd61 	bl	80130ac <__ssprint_r>
 80115ea:	2800      	cmp	r0, #0
 80115ec:	f040 8581 	bne.w	80120f2 <_svfprintf_r+0x1242>
 80115f0:	ac21      	add	r4, sp, #132	@ 0x84
 80115f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115f4:	eba3 0308 	sub.w	r3, r3, r8
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80115fc:	dd1c      	ble.n	8011638 <_svfprintf_r+0x788>
 80115fe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8011600:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 8011604:	2810      	cmp	r0, #16
 8011606:	4871      	ldr	r0, [pc, #452]	@ (80117cc <_svfprintf_r+0x91c>)
 8011608:	6020      	str	r0, [r4, #0]
 801160a:	f102 0201 	add.w	r2, r2, #1
 801160e:	f104 0108 	add.w	r1, r4, #8
 8011612:	f300 8265 	bgt.w	8011ae0 <_svfprintf_r+0xc30>
 8011616:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8011618:	6060      	str	r0, [r4, #4]
 801161a:	4403      	add	r3, r0
 801161c:	2a07      	cmp	r2, #7
 801161e:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8011622:	f340 8272 	ble.w	8011b0a <_svfprintf_r+0xc5a>
 8011626:	9802      	ldr	r0, [sp, #8]
 8011628:	aa1e      	add	r2, sp, #120	@ 0x78
 801162a:	4651      	mov	r1, sl
 801162c:	f001 fd3e 	bl	80130ac <__ssprint_r>
 8011630:	2800      	cmp	r0, #0
 8011632:	f040 855e 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011636:	ac21      	add	r4, sp, #132	@ 0x84
 8011638:	05e9      	lsls	r1, r5, #23
 801163a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801163c:	f100 826c 	bmi.w	8011b18 <_svfprintf_r+0xc68>
 8011640:	4443      	add	r3, r8
 8011642:	9320      	str	r3, [sp, #128]	@ 0x80
 8011644:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011646:	3301      	adds	r3, #1
 8011648:	2b07      	cmp	r3, #7
 801164a:	e9c4 9800 	strd	r9, r8, [r4]
 801164e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011650:	f300 82a4 	bgt.w	8011b9c <_svfprintf_r+0xcec>
 8011654:	3408      	adds	r4, #8
 8011656:	076a      	lsls	r2, r5, #29
 8011658:	f100 852d 	bmi.w	80120b6 <_svfprintf_r+0x1206>
 801165c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011660:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011662:	428a      	cmp	r2, r1
 8011664:	bfac      	ite	ge
 8011666:	189b      	addge	r3, r3, r2
 8011668:	185b      	addlt	r3, r3, r1
 801166a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801166c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801166e:	b13b      	cbz	r3, 8011680 <_svfprintf_r+0x7d0>
 8011670:	9802      	ldr	r0, [sp, #8]
 8011672:	aa1e      	add	r2, sp, #120	@ 0x78
 8011674:	4651      	mov	r1, sl
 8011676:	f001 fd19 	bl	80130ac <__ssprint_r>
 801167a:	2800      	cmp	r0, #0
 801167c:	f040 8539 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011680:	2300      	movs	r3, #0
 8011682:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011684:	f1bb 0f00 	cmp.w	fp, #0
 8011688:	f040 854f 	bne.w	801212a <_svfprintf_r+0x127a>
 801168c:	9e05      	ldr	r6, [sp, #20]
 801168e:	ac21      	add	r4, sp, #132	@ 0x84
 8011690:	e0bc      	b.n	801180c <_svfprintf_r+0x95c>
 8011692:	f800 cc01 	strb.w	ip, [r0, #-1]
 8011696:	e6b3      	b.n	8011400 <_svfprintf_r+0x550>
 8011698:	f801 cb01 	strb.w	ip, [r1], #1
 801169c:	e67d      	b.n	801139a <_svfprintf_r+0x4ea>
 801169e:	2f46      	cmp	r7, #70	@ 0x46
 80116a0:	d005      	beq.n	80116ae <_svfprintf_r+0x7fe>
 80116a2:	2f45      	cmp	r7, #69	@ 0x45
 80116a4:	d117      	bne.n	80116d6 <_svfprintf_r+0x826>
 80116a6:	f108 0601 	add.w	r6, r8, #1
 80116aa:	2102      	movs	r1, #2
 80116ac:	e001      	b.n	80116b2 <_svfprintf_r+0x802>
 80116ae:	4646      	mov	r6, r8
 80116b0:	2103      	movs	r1, #3
 80116b2:	ab1c      	add	r3, sp, #112	@ 0x70
 80116b4:	9301      	str	r3, [sp, #4]
 80116b6:	ab19      	add	r3, sp, #100	@ 0x64
 80116b8:	9300      	str	r3, [sp, #0]
 80116ba:	9802      	ldr	r0, [sp, #8]
 80116bc:	eeb0 0b49 	vmov.f64	d0, d9
 80116c0:	ab18      	add	r3, sp, #96	@ 0x60
 80116c2:	4632      	mov	r2, r6
 80116c4:	f7fe fb54 	bl	800fd70 <_dtoa_r>
 80116c8:	2f47      	cmp	r7, #71	@ 0x47
 80116ca:	4681      	mov	r9, r0
 80116cc:	d115      	bne.n	80116fa <_svfprintf_r+0x84a>
 80116ce:	07e8      	lsls	r0, r5, #31
 80116d0:	d403      	bmi.n	80116da <_svfprintf_r+0x82a>
 80116d2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80116d4:	e6a3      	b.n	801141e <_svfprintf_r+0x56e>
 80116d6:	4646      	mov	r6, r8
 80116d8:	e7e7      	b.n	80116aa <_svfprintf_r+0x7fa>
 80116da:	eb09 0306 	add.w	r3, r9, r6
 80116de:	eeb5 9b40 	vcmp.f64	d9, #0.0
 80116e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e6:	bf08      	it	eq
 80116e8:	931c      	streq	r3, [sp, #112]	@ 0x70
 80116ea:	2130      	movs	r1, #48	@ 0x30
 80116ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80116ee:	4293      	cmp	r3, r2
 80116f0:	d9ef      	bls.n	80116d2 <_svfprintf_r+0x822>
 80116f2:	1c50      	adds	r0, r2, #1
 80116f4:	901c      	str	r0, [sp, #112]	@ 0x70
 80116f6:	7011      	strb	r1, [r2, #0]
 80116f8:	e7f8      	b.n	80116ec <_svfprintf_r+0x83c>
 80116fa:	2f46      	cmp	r7, #70	@ 0x46
 80116fc:	eb00 0306 	add.w	r3, r0, r6
 8011700:	d1ed      	bne.n	80116de <_svfprintf_r+0x82e>
 8011702:	7802      	ldrb	r2, [r0, #0]
 8011704:	2a30      	cmp	r2, #48	@ 0x30
 8011706:	d107      	bne.n	8011718 <_svfprintf_r+0x868>
 8011708:	eeb5 9b40 	vcmp.f64	d9, #0.0
 801170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011710:	bf1c      	itt	ne
 8011712:	f1c6 0601 	rsbne	r6, r6, #1
 8011716:	9618      	strne	r6, [sp, #96]	@ 0x60
 8011718:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801171a:	4413      	add	r3, r2
 801171c:	e7df      	b.n	80116de <_svfprintf_r+0x82e>
 801171e:	2f46      	cmp	r7, #70	@ 0x46
 8011720:	f47f ae8c 	bne.w	801143c <_svfprintf_r+0x58c>
 8011724:	f005 0301 	and.w	r3, r5, #1
 8011728:	2e00      	cmp	r6, #0
 801172a:	ea43 0308 	orr.w	r3, r3, r8
 801172e:	dd25      	ble.n	801177c <_svfprintf_r+0x8cc>
 8011730:	b37b      	cbz	r3, 8011792 <_svfprintf_r+0x8e2>
 8011732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011734:	18f3      	adds	r3, r6, r3
 8011736:	4498      	add	r8, r3
 8011738:	2366      	movs	r3, #102	@ 0x66
 801173a:	9304      	str	r3, [sp, #16]
 801173c:	e02f      	b.n	801179e <_svfprintf_r+0x8ee>
 801173e:	f813 7b01 	ldrb.w	r7, [r3], #1
 8011742:	f806 7f01 	strb.w	r7, [r6, #1]!
 8011746:	e6b0      	b.n	80114aa <_svfprintf_r+0x5fa>
 8011748:	b941      	cbnz	r1, 801175c <_svfprintf_r+0x8ac>
 801174a:	2230      	movs	r2, #48	@ 0x30
 801174c:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 8011750:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 8011754:	3330      	adds	r3, #48	@ 0x30
 8011756:	f802 3b01 	strb.w	r3, [r2], #1
 801175a:	e6b2      	b.n	80114c2 <_svfprintf_r+0x612>
 801175c:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 8011760:	e7f8      	b.n	8011754 <_svfprintf_r+0x8a4>
 8011762:	9b03      	ldr	r3, [sp, #12]
 8011764:	429e      	cmp	r6, r3
 8011766:	da0d      	bge.n	8011784 <_svfprintf_r+0x8d4>
 8011768:	9b03      	ldr	r3, [sp, #12]
 801176a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801176c:	2e00      	cmp	r6, #0
 801176e:	eb03 0802 	add.w	r8, r3, r2
 8011772:	dc0c      	bgt.n	801178e <_svfprintf_r+0x8de>
 8011774:	f1c6 0301 	rsb	r3, r6, #1
 8011778:	4498      	add	r8, r3
 801177a:	e008      	b.n	801178e <_svfprintf_r+0x8de>
 801177c:	b15b      	cbz	r3, 8011796 <_svfprintf_r+0x8e6>
 801177e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011780:	3301      	adds	r3, #1
 8011782:	e7d8      	b.n	8011736 <_svfprintf_r+0x886>
 8011784:	07eb      	lsls	r3, r5, #31
 8011786:	d51d      	bpl.n	80117c4 <_svfprintf_r+0x914>
 8011788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801178a:	eb06 0803 	add.w	r8, r6, r3
 801178e:	2367      	movs	r3, #103	@ 0x67
 8011790:	e7d3      	b.n	801173a <_svfprintf_r+0x88a>
 8011792:	46b0      	mov	r8, r6
 8011794:	e7d0      	b.n	8011738 <_svfprintf_r+0x888>
 8011796:	2366      	movs	r3, #102	@ 0x66
 8011798:	9304      	str	r3, [sp, #16]
 801179a:	f04f 0801 	mov.w	r8, #1
 801179e:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 80117a2:	9306      	str	r3, [sp, #24]
 80117a4:	d023      	beq.n	80117ee <_svfprintf_r+0x93e>
 80117a6:	2700      	movs	r7, #0
 80117a8:	2e00      	cmp	r6, #0
 80117aa:	9706      	str	r7, [sp, #24]
 80117ac:	f77f ae9d 	ble.w	80114ea <_svfprintf_r+0x63a>
 80117b0:	9b07      	ldr	r3, [sp, #28]
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	2bff      	cmp	r3, #255	@ 0xff
 80117b6:	d10b      	bne.n	80117d0 <_svfprintf_r+0x920>
 80117b8:	9b06      	ldr	r3, [sp, #24]
 80117ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117bc:	443b      	add	r3, r7
 80117be:	fb02 8803 	mla	r8, r2, r3, r8
 80117c2:	e692      	b.n	80114ea <_svfprintf_r+0x63a>
 80117c4:	46b0      	mov	r8, r6
 80117c6:	e7e2      	b.n	801178e <_svfprintf_r+0x8de>
 80117c8:	08014c45 	.word	0x08014c45
 80117cc:	08014c35 	.word	0x08014c35
 80117d0:	42b3      	cmp	r3, r6
 80117d2:	daf1      	bge.n	80117b8 <_svfprintf_r+0x908>
 80117d4:	1af6      	subs	r6, r6, r3
 80117d6:	9b07      	ldr	r3, [sp, #28]
 80117d8:	785b      	ldrb	r3, [r3, #1]
 80117da:	b133      	cbz	r3, 80117ea <_svfprintf_r+0x93a>
 80117dc:	9b06      	ldr	r3, [sp, #24]
 80117de:	3301      	adds	r3, #1
 80117e0:	9306      	str	r3, [sp, #24]
 80117e2:	9b07      	ldr	r3, [sp, #28]
 80117e4:	3301      	adds	r3, #1
 80117e6:	9307      	str	r3, [sp, #28]
 80117e8:	e7e2      	b.n	80117b0 <_svfprintf_r+0x900>
 80117ea:	3701      	adds	r7, #1
 80117ec:	e7e0      	b.n	80117b0 <_svfprintf_r+0x900>
 80117ee:	9f06      	ldr	r7, [sp, #24]
 80117f0:	e67b      	b.n	80114ea <_svfprintf_r+0x63a>
 80117f2:	232d      	movs	r3, #45	@ 0x2d
 80117f4:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80117f8:	e67b      	b.n	80114f2 <_svfprintf_r+0x642>
 80117fa:	06af      	lsls	r7, r5, #26
 80117fc:	d50a      	bpl.n	8011814 <_svfprintf_r+0x964>
 80117fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011800:	6833      	ldr	r3, [r6, #0]
 8011802:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011804:	17d2      	asrs	r2, r2, #31
 8011806:	e9c3 1200 	strd	r1, r2, [r3]
 801180a:	3604      	adds	r6, #4
 801180c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011810:	f7ff bb87 	b.w	8010f22 <_svfprintf_r+0x72>
 8011814:	06e8      	lsls	r0, r5, #27
 8011816:	d503      	bpl.n	8011820 <_svfprintf_r+0x970>
 8011818:	6833      	ldr	r3, [r6, #0]
 801181a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801181c:	601a      	str	r2, [r3, #0]
 801181e:	e7f4      	b.n	801180a <_svfprintf_r+0x95a>
 8011820:	0669      	lsls	r1, r5, #25
 8011822:	d503      	bpl.n	801182c <_svfprintf_r+0x97c>
 8011824:	6833      	ldr	r3, [r6, #0]
 8011826:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011828:	801a      	strh	r2, [r3, #0]
 801182a:	e7ee      	b.n	801180a <_svfprintf_r+0x95a>
 801182c:	05aa      	lsls	r2, r5, #22
 801182e:	d5f3      	bpl.n	8011818 <_svfprintf_r+0x968>
 8011830:	6833      	ldr	r3, [r6, #0]
 8011832:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011834:	701a      	strb	r2, [r3, #0]
 8011836:	e7e8      	b.n	801180a <_svfprintf_r+0x95a>
 8011838:	f045 0510 	orr.w	r5, r5, #16
 801183c:	f015 0320 	ands.w	r3, r5, #32
 8011840:	d020      	beq.n	8011884 <_svfprintf_r+0x9d4>
 8011842:	3607      	adds	r6, #7
 8011844:	f026 0307 	bic.w	r3, r6, #7
 8011848:	461a      	mov	r2, r3
 801184a:	685f      	ldr	r7, [r3, #4]
 801184c:	f852 6b08 	ldr.w	r6, [r2], #8
 8011850:	9205      	str	r2, [sp, #20]
 8011852:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8011856:	2300      	movs	r3, #0
 8011858:	2200      	movs	r2, #0
 801185a:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 801185e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8011862:	f000 8473 	beq.w	801214c <_svfprintf_r+0x129c>
 8011866:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 801186a:	9206      	str	r2, [sp, #24]
 801186c:	ea56 0207 	orrs.w	r2, r6, r7
 8011870:	f040 8471 	bne.w	8012156 <_svfprintf_r+0x12a6>
 8011874:	f1b8 0f00 	cmp.w	r8, #0
 8011878:	f000 80dc 	beq.w	8011a34 <_svfprintf_r+0xb84>
 801187c:	2b01      	cmp	r3, #1
 801187e:	f040 846d 	bne.w	801215c <_svfprintf_r+0x12ac>
 8011882:	e083      	b.n	801198c <_svfprintf_r+0xadc>
 8011884:	4632      	mov	r2, r6
 8011886:	f015 0710 	ands.w	r7, r5, #16
 801188a:	f852 6b04 	ldr.w	r6, [r2], #4
 801188e:	9205      	str	r2, [sp, #20]
 8011890:	d001      	beq.n	8011896 <_svfprintf_r+0x9e6>
 8011892:	461f      	mov	r7, r3
 8011894:	e7dd      	b.n	8011852 <_svfprintf_r+0x9a2>
 8011896:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801189a:	d001      	beq.n	80118a0 <_svfprintf_r+0x9f0>
 801189c:	b2b6      	uxth	r6, r6
 801189e:	e7d8      	b.n	8011852 <_svfprintf_r+0x9a2>
 80118a0:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80118a4:	d0d5      	beq.n	8011852 <_svfprintf_r+0x9a2>
 80118a6:	b2f6      	uxtb	r6, r6
 80118a8:	e7f3      	b.n	8011892 <_svfprintf_r+0x9e2>
 80118aa:	4633      	mov	r3, r6
 80118ac:	2278      	movs	r2, #120	@ 0x78
 80118ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80118b2:	9305      	str	r3, [sp, #20]
 80118b4:	f647 0330 	movw	r3, #30768	@ 0x7830
 80118b8:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 80118bc:	4b94      	ldr	r3, [pc, #592]	@ (8011b10 <_svfprintf_r+0xc60>)
 80118be:	9312      	str	r3, [sp, #72]	@ 0x48
 80118c0:	2700      	movs	r7, #0
 80118c2:	f045 0502 	orr.w	r5, r5, #2
 80118c6:	2302      	movs	r3, #2
 80118c8:	9204      	str	r2, [sp, #16]
 80118ca:	e7c5      	b.n	8011858 <_svfprintf_r+0x9a8>
 80118cc:	4633      	mov	r3, r6
 80118ce:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80118d2:	f853 9b04 	ldr.w	r9, [r3], #4
 80118d6:	9305      	str	r3, [sp, #20]
 80118d8:	f04f 0600 	mov.w	r6, #0
 80118dc:	f88d 605b 	strb.w	r6, [sp, #91]	@ 0x5b
 80118e0:	d00f      	beq.n	8011902 <_svfprintf_r+0xa52>
 80118e2:	4642      	mov	r2, r8
 80118e4:	4631      	mov	r1, r6
 80118e6:	4648      	mov	r0, r9
 80118e8:	f7ee fcfa 	bl	80002e0 <memchr>
 80118ec:	4683      	mov	fp, r0
 80118ee:	2800      	cmp	r0, #0
 80118f0:	f43f acb0 	beq.w	8011254 <_svfprintf_r+0x3a4>
 80118f4:	eba0 0809 	sub.w	r8, r0, r9
 80118f8:	46b3      	mov	fp, r6
 80118fa:	960c      	str	r6, [sp, #48]	@ 0x30
 80118fc:	4637      	mov	r7, r6
 80118fe:	9606      	str	r6, [sp, #24]
 8011900:	e5fa      	b.n	80114f8 <_svfprintf_r+0x648>
 8011902:	4648      	mov	r0, r9
 8011904:	f7ee fd3c 	bl	8000380 <strlen>
 8011908:	46b3      	mov	fp, r6
 801190a:	4680      	mov	r8, r0
 801190c:	e4a2      	b.n	8011254 <_svfprintf_r+0x3a4>
 801190e:	f045 0510 	orr.w	r5, r5, #16
 8011912:	f015 0320 	ands.w	r3, r5, #32
 8011916:	d009      	beq.n	801192c <_svfprintf_r+0xa7c>
 8011918:	3607      	adds	r6, #7
 801191a:	f026 0307 	bic.w	r3, r6, #7
 801191e:	461a      	mov	r2, r3
 8011920:	685f      	ldr	r7, [r3, #4]
 8011922:	f852 6b08 	ldr.w	r6, [r2], #8
 8011926:	9205      	str	r2, [sp, #20]
 8011928:	2301      	movs	r3, #1
 801192a:	e795      	b.n	8011858 <_svfprintf_r+0x9a8>
 801192c:	4632      	mov	r2, r6
 801192e:	f015 0710 	ands.w	r7, r5, #16
 8011932:	f852 6b04 	ldr.w	r6, [r2], #4
 8011936:	9205      	str	r2, [sp, #20]
 8011938:	d001      	beq.n	801193e <_svfprintf_r+0xa8e>
 801193a:	461f      	mov	r7, r3
 801193c:	e7f4      	b.n	8011928 <_svfprintf_r+0xa78>
 801193e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8011942:	d001      	beq.n	8011948 <_svfprintf_r+0xa98>
 8011944:	b2b6      	uxth	r6, r6
 8011946:	e7ef      	b.n	8011928 <_svfprintf_r+0xa78>
 8011948:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801194c:	d0ec      	beq.n	8011928 <_svfprintf_r+0xa78>
 801194e:	b2f6      	uxtb	r6, r6
 8011950:	e7f3      	b.n	801193a <_svfprintf_r+0xa8a>
 8011952:	4b70      	ldr	r3, [pc, #448]	@ (8011b14 <_svfprintf_r+0xc64>)
 8011954:	f7ff bb7a 	b.w	801104c <_svfprintf_r+0x19c>
 8011958:	4632      	mov	r2, r6
 801195a:	f015 0710 	ands.w	r7, r5, #16
 801195e:	f852 6b04 	ldr.w	r6, [r2], #4
 8011962:	9205      	str	r2, [sp, #20]
 8011964:	d002      	beq.n	801196c <_svfprintf_r+0xabc>
 8011966:	461f      	mov	r7, r3
 8011968:	f7ff bb7d 	b.w	8011066 <_svfprintf_r+0x1b6>
 801196c:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8011970:	d002      	beq.n	8011978 <_svfprintf_r+0xac8>
 8011972:	b2b6      	uxth	r6, r6
 8011974:	f7ff bb77 	b.w	8011066 <_svfprintf_r+0x1b6>
 8011978:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801197c:	f43f ab73 	beq.w	8011066 <_svfprintf_r+0x1b6>
 8011980:	b2f6      	uxtb	r6, r6
 8011982:	e7f0      	b.n	8011966 <_svfprintf_r+0xab6>
 8011984:	2e0a      	cmp	r6, #10
 8011986:	f177 0300 	sbcs.w	r3, r7, #0
 801198a:	d206      	bcs.n	801199a <_svfprintf_r+0xaea>
 801198c:	3630      	adds	r6, #48	@ 0x30
 801198e:	b2f6      	uxtb	r6, r6
 8011990:	f88d 6127 	strb.w	r6, [sp, #295]	@ 0x127
 8011994:	f20d 1927 	addw	r9, sp, #295	@ 0x127
 8011998:	e3fc      	b.n	8012194 <_svfprintf_r+0x12e4>
 801199a:	2300      	movs	r3, #0
 801199c:	9303      	str	r3, [sp, #12]
 801199e:	9b06      	ldr	r3, [sp, #24]
 80119a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80119a4:	ad4a      	add	r5, sp, #296	@ 0x128
 80119a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80119a8:	220a      	movs	r2, #10
 80119aa:	2300      	movs	r3, #0
 80119ac:	4630      	mov	r0, r6
 80119ae:	4639      	mov	r1, r7
 80119b0:	f7ee fcee 	bl	8000390 <__aeabi_uldivmod>
 80119b4:	3230      	adds	r2, #48	@ 0x30
 80119b6:	f805 2c01 	strb.w	r2, [r5, #-1]
 80119ba:	9a03      	ldr	r2, [sp, #12]
 80119bc:	3201      	adds	r2, #1
 80119be:	9203      	str	r2, [sp, #12]
 80119c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80119c2:	4603      	mov	r3, r0
 80119c4:	468b      	mov	fp, r1
 80119c6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80119ca:	b1e2      	cbz	r2, 8011a06 <_svfprintf_r+0xb56>
 80119cc:	9a07      	ldr	r2, [sp, #28]
 80119ce:	9903      	ldr	r1, [sp, #12]
 80119d0:	7812      	ldrb	r2, [r2, #0]
 80119d2:	4291      	cmp	r1, r2
 80119d4:	d117      	bne.n	8011a06 <_svfprintf_r+0xb56>
 80119d6:	29ff      	cmp	r1, #255	@ 0xff
 80119d8:	d015      	beq.n	8011a06 <_svfprintf_r+0xb56>
 80119da:	2e0a      	cmp	r6, #10
 80119dc:	f177 0200 	sbcs.w	r2, r7, #0
 80119e0:	d311      	bcc.n	8011a06 <_svfprintf_r+0xb56>
 80119e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119e4:	9003      	str	r0, [sp, #12]
 80119e6:	eba9 0903 	sub.w	r9, r9, r3
 80119ea:	461a      	mov	r2, r3
 80119ec:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80119ee:	4648      	mov	r0, r9
 80119f0:	f7fe f87c 	bl	800faec <strncpy>
 80119f4:	9b07      	ldr	r3, [sp, #28]
 80119f6:	785a      	ldrb	r2, [r3, #1]
 80119f8:	9b03      	ldr	r3, [sp, #12]
 80119fa:	b11a      	cbz	r2, 8011a04 <_svfprintf_r+0xb54>
 80119fc:	9a07      	ldr	r2, [sp, #28]
 80119fe:	3201      	adds	r2, #1
 8011a00:	9207      	str	r2, [sp, #28]
 8011a02:	2200      	movs	r2, #0
 8011a04:	9203      	str	r2, [sp, #12]
 8011a06:	2e0a      	cmp	r6, #10
 8011a08:	f177 0700 	sbcs.w	r7, r7, #0
 8011a0c:	f0c0 83c2 	bcc.w	8012194 <_svfprintf_r+0x12e4>
 8011a10:	461e      	mov	r6, r3
 8011a12:	465f      	mov	r7, fp
 8011a14:	464d      	mov	r5, r9
 8011a16:	e7c7      	b.n	80119a8 <_svfprintf_r+0xaf8>
 8011a18:	f006 030f 	and.w	r3, r6, #15
 8011a1c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011a1e:	0936      	lsrs	r6, r6, #4
 8011a20:	5cd3      	ldrb	r3, [r2, r3]
 8011a22:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8011a26:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8011a2a:	093f      	lsrs	r7, r7, #4
 8011a2c:	ea56 0307 	orrs.w	r3, r6, r7
 8011a30:	d1f2      	bne.n	8011a18 <_svfprintf_r+0xb68>
 8011a32:	e3af      	b.n	8012194 <_svfprintf_r+0x12e4>
 8011a34:	b91b      	cbnz	r3, 8011a3e <_svfprintf_r+0xb8e>
 8011a36:	07e8      	lsls	r0, r5, #31
 8011a38:	d501      	bpl.n	8011a3e <_svfprintf_r+0xb8e>
 8011a3a:	2630      	movs	r6, #48	@ 0x30
 8011a3c:	e7a8      	b.n	8011990 <_svfprintf_r+0xae0>
 8011a3e:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 8011a42:	e3a7      	b.n	8012194 <_svfprintf_r+0x12e4>
 8011a44:	9b04      	ldr	r3, [sp, #16]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	f000 8375 	beq.w	8012136 <_svfprintf_r+0x1286>
 8011a4c:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8011a50:	2300      	movs	r3, #0
 8011a52:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8011a56:	9605      	str	r6, [sp, #20]
 8011a58:	f7ff bba2 	b.w	80111a0 <_svfprintf_r+0x2f0>
 8011a5c:	2110      	movs	r1, #16
 8011a5e:	6061      	str	r1, [r4, #4]
 8011a60:	2a07      	cmp	r2, #7
 8011a62:	4461      	add	r1, ip
 8011a64:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8011a68:	dd0a      	ble.n	8011a80 <_svfprintf_r+0xbd0>
 8011a6a:	9802      	ldr	r0, [sp, #8]
 8011a6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8011a6e:	aa1e      	add	r2, sp, #120	@ 0x78
 8011a70:	4651      	mov	r1, sl
 8011a72:	f001 fb1b 	bl	80130ac <__ssprint_r>
 8011a76:	2800      	cmp	r0, #0
 8011a78:	f040 833b 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011a7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011a7e:	a821      	add	r0, sp, #132	@ 0x84
 8011a80:	3b10      	subs	r3, #16
 8011a82:	4604      	mov	r4, r0
 8011a84:	e553      	b.n	801152e <_svfprintf_r+0x67e>
 8011a86:	4604      	mov	r4, r0
 8011a88:	e56d      	b.n	8011566 <_svfprintf_r+0x6b6>
 8011a8a:	9802      	ldr	r0, [sp, #8]
 8011a8c:	aa1e      	add	r2, sp, #120	@ 0x78
 8011a8e:	4651      	mov	r1, sl
 8011a90:	f001 fb0c 	bl	80130ac <__ssprint_r>
 8011a94:	2800      	cmp	r0, #0
 8011a96:	f040 832c 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011a9a:	ac21      	add	r4, sp, #132	@ 0x84
 8011a9c:	e575      	b.n	801158a <_svfprintf_r+0x6da>
 8011a9e:	9802      	ldr	r0, [sp, #8]
 8011aa0:	aa1e      	add	r2, sp, #120	@ 0x78
 8011aa2:	4651      	mov	r1, sl
 8011aa4:	f001 fb02 	bl	80130ac <__ssprint_r>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	f040 8322 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011aae:	ac21      	add	r4, sp, #132	@ 0x84
 8011ab0:	e57b      	b.n	80115aa <_svfprintf_r+0x6fa>
 8011ab2:	2110      	movs	r1, #16
 8011ab4:	6061      	str	r1, [r4, #4]
 8011ab6:	2a07      	cmp	r2, #7
 8011ab8:	4461      	add	r1, ip
 8011aba:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8011abe:	dd0a      	ble.n	8011ad6 <_svfprintf_r+0xc26>
 8011ac0:	9802      	ldr	r0, [sp, #8]
 8011ac2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011ac4:	aa1e      	add	r2, sp, #120	@ 0x78
 8011ac6:	4651      	mov	r1, sl
 8011ac8:	f001 faf0 	bl	80130ac <__ssprint_r>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	f040 8310 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011ad2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011ad4:	a821      	add	r0, sp, #132	@ 0x84
 8011ad6:	3b10      	subs	r3, #16
 8011ad8:	4604      	mov	r4, r0
 8011ada:	e56e      	b.n	80115ba <_svfprintf_r+0x70a>
 8011adc:	4604      	mov	r4, r0
 8011ade:	e588      	b.n	80115f2 <_svfprintf_r+0x742>
 8011ae0:	2010      	movs	r0, #16
 8011ae2:	4403      	add	r3, r0
 8011ae4:	2a07      	cmp	r2, #7
 8011ae6:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8011aea:	6060      	str	r0, [r4, #4]
 8011aec:	dd08      	ble.n	8011b00 <_svfprintf_r+0xc50>
 8011aee:	9802      	ldr	r0, [sp, #8]
 8011af0:	aa1e      	add	r2, sp, #120	@ 0x78
 8011af2:	4651      	mov	r1, sl
 8011af4:	f001 fada 	bl	80130ac <__ssprint_r>
 8011af8:	2800      	cmp	r0, #0
 8011afa:	f040 82fa 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011afe:	a921      	add	r1, sp, #132	@ 0x84
 8011b00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b02:	3b10      	subs	r3, #16
 8011b04:	930c      	str	r3, [sp, #48]	@ 0x30
 8011b06:	460c      	mov	r4, r1
 8011b08:	e579      	b.n	80115fe <_svfprintf_r+0x74e>
 8011b0a:	460c      	mov	r4, r1
 8011b0c:	e594      	b.n	8011638 <_svfprintf_r+0x788>
 8011b0e:	bf00      	nop
 8011b10:	08014a71 	.word	0x08014a71
 8011b14:	08014a60 	.word	0x08014a60
 8011b18:	9a04      	ldr	r2, [sp, #16]
 8011b1a:	2a65      	cmp	r2, #101	@ 0x65
 8011b1c:	f340 823e 	ble.w	8011f9c <_svfprintf_r+0x10ec>
 8011b20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b28:	d169      	bne.n	8011bfe <_svfprintf_r+0xd4e>
 8011b2a:	4a72      	ldr	r2, [pc, #456]	@ (8011cf4 <_svfprintf_r+0xe44>)
 8011b2c:	6022      	str	r2, [r4, #0]
 8011b2e:	2201      	movs	r2, #1
 8011b30:	4413      	add	r3, r2
 8011b32:	9320      	str	r3, [sp, #128]	@ 0x80
 8011b34:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011b36:	6062      	str	r2, [r4, #4]
 8011b38:	4413      	add	r3, r2
 8011b3a:	2b07      	cmp	r3, #7
 8011b3c:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011b3e:	dc37      	bgt.n	8011bb0 <_svfprintf_r+0xd00>
 8011b40:	3408      	adds	r4, #8
 8011b42:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011b44:	9a03      	ldr	r2, [sp, #12]
 8011b46:	4293      	cmp	r3, r2
 8011b48:	db02      	blt.n	8011b50 <_svfprintf_r+0xca0>
 8011b4a:	07ea      	lsls	r2, r5, #31
 8011b4c:	f57f ad83 	bpl.w	8011656 <_svfprintf_r+0x7a6>
 8011b50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b52:	6023      	str	r3, [r4, #0]
 8011b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b58:	6063      	str	r3, [r4, #4]
 8011b5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011b5c:	4413      	add	r3, r2
 8011b5e:	9320      	str	r3, [sp, #128]	@ 0x80
 8011b60:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011b62:	3301      	adds	r3, #1
 8011b64:	2b07      	cmp	r3, #7
 8011b66:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011b68:	dc2c      	bgt.n	8011bc4 <_svfprintf_r+0xd14>
 8011b6a:	3408      	adds	r4, #8
 8011b6c:	9b03      	ldr	r3, [sp, #12]
 8011b6e:	1e5e      	subs	r6, r3, #1
 8011b70:	2e00      	cmp	r6, #0
 8011b72:	f77f ad70 	ble.w	8011656 <_svfprintf_r+0x7a6>
 8011b76:	4f60      	ldr	r7, [pc, #384]	@ (8011cf8 <_svfprintf_r+0xe48>)
 8011b78:	f04f 0810 	mov.w	r8, #16
 8011b7c:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8011b80:	2e10      	cmp	r6, #16
 8011b82:	f103 0301 	add.w	r3, r3, #1
 8011b86:	f104 0108 	add.w	r1, r4, #8
 8011b8a:	6027      	str	r7, [r4, #0]
 8011b8c:	dc24      	bgt.n	8011bd8 <_svfprintf_r+0xd28>
 8011b8e:	6066      	str	r6, [r4, #4]
 8011b90:	2b07      	cmp	r3, #7
 8011b92:	4416      	add	r6, r2
 8011b94:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 8011b98:	f340 828a 	ble.w	80120b0 <_svfprintf_r+0x1200>
 8011b9c:	9802      	ldr	r0, [sp, #8]
 8011b9e:	aa1e      	add	r2, sp, #120	@ 0x78
 8011ba0:	4651      	mov	r1, sl
 8011ba2:	f001 fa83 	bl	80130ac <__ssprint_r>
 8011ba6:	2800      	cmp	r0, #0
 8011ba8:	f040 82a3 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011bac:	ac21      	add	r4, sp, #132	@ 0x84
 8011bae:	e552      	b.n	8011656 <_svfprintf_r+0x7a6>
 8011bb0:	9802      	ldr	r0, [sp, #8]
 8011bb2:	aa1e      	add	r2, sp, #120	@ 0x78
 8011bb4:	4651      	mov	r1, sl
 8011bb6:	f001 fa79 	bl	80130ac <__ssprint_r>
 8011bba:	2800      	cmp	r0, #0
 8011bbc:	f040 8299 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011bc0:	ac21      	add	r4, sp, #132	@ 0x84
 8011bc2:	e7be      	b.n	8011b42 <_svfprintf_r+0xc92>
 8011bc4:	9802      	ldr	r0, [sp, #8]
 8011bc6:	aa1e      	add	r2, sp, #120	@ 0x78
 8011bc8:	4651      	mov	r1, sl
 8011bca:	f001 fa6f 	bl	80130ac <__ssprint_r>
 8011bce:	2800      	cmp	r0, #0
 8011bd0:	f040 828f 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011bd4:	ac21      	add	r4, sp, #132	@ 0x84
 8011bd6:	e7c9      	b.n	8011b6c <_svfprintf_r+0xcbc>
 8011bd8:	3210      	adds	r2, #16
 8011bda:	2b07      	cmp	r3, #7
 8011bdc:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8011be0:	f8c4 8004 	str.w	r8, [r4, #4]
 8011be4:	dd08      	ble.n	8011bf8 <_svfprintf_r+0xd48>
 8011be6:	9802      	ldr	r0, [sp, #8]
 8011be8:	aa1e      	add	r2, sp, #120	@ 0x78
 8011bea:	4651      	mov	r1, sl
 8011bec:	f001 fa5e 	bl	80130ac <__ssprint_r>
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	f040 827e 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011bf6:	a921      	add	r1, sp, #132	@ 0x84
 8011bf8:	3e10      	subs	r6, #16
 8011bfa:	460c      	mov	r4, r1
 8011bfc:	e7be      	b.n	8011b7c <_svfprintf_r+0xccc>
 8011bfe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8011c00:	2a00      	cmp	r2, #0
 8011c02:	dc7b      	bgt.n	8011cfc <_svfprintf_r+0xe4c>
 8011c04:	4a3b      	ldr	r2, [pc, #236]	@ (8011cf4 <_svfprintf_r+0xe44>)
 8011c06:	6022      	str	r2, [r4, #0]
 8011c08:	2201      	movs	r2, #1
 8011c0a:	4413      	add	r3, r2
 8011c0c:	9320      	str	r3, [sp, #128]	@ 0x80
 8011c0e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011c10:	6062      	str	r2, [r4, #4]
 8011c12:	4413      	add	r3, r2
 8011c14:	2b07      	cmp	r3, #7
 8011c16:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011c18:	dc46      	bgt.n	8011ca8 <_svfprintf_r+0xdf8>
 8011c1a:	3408      	adds	r4, #8
 8011c1c:	9903      	ldr	r1, [sp, #12]
 8011c1e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011c20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011c22:	430b      	orrs	r3, r1
 8011c24:	f005 0101 	and.w	r1, r5, #1
 8011c28:	430b      	orrs	r3, r1
 8011c2a:	f43f ad14 	beq.w	8011656 <_svfprintf_r+0x7a6>
 8011c2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c30:	6023      	str	r3, [r4, #0]
 8011c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c34:	6063      	str	r3, [r4, #4]
 8011c36:	441a      	add	r2, r3
 8011c38:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011c3a:	9220      	str	r2, [sp, #128]	@ 0x80
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	2b07      	cmp	r3, #7
 8011c40:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011c42:	dc3b      	bgt.n	8011cbc <_svfprintf_r+0xe0c>
 8011c44:	f104 0308 	add.w	r3, r4, #8
 8011c48:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8011c4a:	2e00      	cmp	r6, #0
 8011c4c:	da1b      	bge.n	8011c86 <_svfprintf_r+0xdd6>
 8011c4e:	4f2a      	ldr	r7, [pc, #168]	@ (8011cf8 <_svfprintf_r+0xe48>)
 8011c50:	4276      	negs	r6, r6
 8011c52:	461a      	mov	r2, r3
 8011c54:	2410      	movs	r4, #16
 8011c56:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 8011c5a:	2e10      	cmp	r6, #16
 8011c5c:	f101 0101 	add.w	r1, r1, #1
 8011c60:	f103 0308 	add.w	r3, r3, #8
 8011c64:	6017      	str	r7, [r2, #0]
 8011c66:	dc33      	bgt.n	8011cd0 <_svfprintf_r+0xe20>
 8011c68:	6056      	str	r6, [r2, #4]
 8011c6a:	2907      	cmp	r1, #7
 8011c6c:	4406      	add	r6, r0
 8011c6e:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 8011c72:	dd08      	ble.n	8011c86 <_svfprintf_r+0xdd6>
 8011c74:	9802      	ldr	r0, [sp, #8]
 8011c76:	aa1e      	add	r2, sp, #120	@ 0x78
 8011c78:	4651      	mov	r1, sl
 8011c7a:	f001 fa17 	bl	80130ac <__ssprint_r>
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	f040 8237 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011c84:	ab21      	add	r3, sp, #132	@ 0x84
 8011c86:	9a03      	ldr	r2, [sp, #12]
 8011c88:	605a      	str	r2, [r3, #4]
 8011c8a:	9903      	ldr	r1, [sp, #12]
 8011c8c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011c8e:	f8c3 9000 	str.w	r9, [r3]
 8011c92:	440a      	add	r2, r1
 8011c94:	9220      	str	r2, [sp, #128]	@ 0x80
 8011c96:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8011c98:	3201      	adds	r2, #1
 8011c9a:	2a07      	cmp	r2, #7
 8011c9c:	921f      	str	r2, [sp, #124]	@ 0x7c
 8011c9e:	f73f af7d 	bgt.w	8011b9c <_svfprintf_r+0xcec>
 8011ca2:	f103 0408 	add.w	r4, r3, #8
 8011ca6:	e4d6      	b.n	8011656 <_svfprintf_r+0x7a6>
 8011ca8:	9802      	ldr	r0, [sp, #8]
 8011caa:	aa1e      	add	r2, sp, #120	@ 0x78
 8011cac:	4651      	mov	r1, sl
 8011cae:	f001 f9fd 	bl	80130ac <__ssprint_r>
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	f040 821d 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011cb8:	ac21      	add	r4, sp, #132	@ 0x84
 8011cba:	e7af      	b.n	8011c1c <_svfprintf_r+0xd6c>
 8011cbc:	9802      	ldr	r0, [sp, #8]
 8011cbe:	aa1e      	add	r2, sp, #120	@ 0x78
 8011cc0:	4651      	mov	r1, sl
 8011cc2:	f001 f9f3 	bl	80130ac <__ssprint_r>
 8011cc6:	2800      	cmp	r0, #0
 8011cc8:	f040 8213 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011ccc:	ab21      	add	r3, sp, #132	@ 0x84
 8011cce:	e7bb      	b.n	8011c48 <_svfprintf_r+0xd98>
 8011cd0:	3010      	adds	r0, #16
 8011cd2:	2907      	cmp	r1, #7
 8011cd4:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 8011cd8:	6054      	str	r4, [r2, #4]
 8011cda:	dd08      	ble.n	8011cee <_svfprintf_r+0xe3e>
 8011cdc:	9802      	ldr	r0, [sp, #8]
 8011cde:	aa1e      	add	r2, sp, #120	@ 0x78
 8011ce0:	4651      	mov	r1, sl
 8011ce2:	f001 f9e3 	bl	80130ac <__ssprint_r>
 8011ce6:	2800      	cmp	r0, #0
 8011ce8:	f040 8203 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011cec:	ab21      	add	r3, sp, #132	@ 0x84
 8011cee:	3e10      	subs	r6, #16
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	e7b0      	b.n	8011c56 <_svfprintf_r+0xda6>
 8011cf4:	08014bba 	.word	0x08014bba
 8011cf8:	08014c35 	.word	0x08014c35
 8011cfc:	9a03      	ldr	r2, [sp, #12]
 8011cfe:	444a      	add	r2, r9
 8011d00:	9204      	str	r2, [sp, #16]
 8011d02:	9a03      	ldr	r2, [sp, #12]
 8011d04:	42b2      	cmp	r2, r6
 8011d06:	bfa8      	it	ge
 8011d08:	4632      	movge	r2, r6
 8011d0a:	2a00      	cmp	r2, #0
 8011d0c:	4690      	mov	r8, r2
 8011d0e:	dd0a      	ble.n	8011d26 <_svfprintf_r+0xe76>
 8011d10:	4413      	add	r3, r2
 8011d12:	9320      	str	r3, [sp, #128]	@ 0x80
 8011d14:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011d16:	3301      	adds	r3, #1
 8011d18:	2b07      	cmp	r3, #7
 8011d1a:	e9c4 9200 	strd	r9, r2, [r4]
 8011d1e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011d20:	f300 8089 	bgt.w	8011e36 <_svfprintf_r+0xf86>
 8011d24:	3408      	adds	r4, #8
 8011d26:	4643      	mov	r3, r8
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	bfac      	ite	ge
 8011d2c:	eba6 0808 	subge.w	r8, r6, r8
 8011d30:	46b0      	movlt	r8, r6
 8011d32:	f1b8 0f00 	cmp.w	r8, #0
 8011d36:	dd1b      	ble.n	8011d70 <_svfprintf_r+0xec0>
 8011d38:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 8011d3c:	4896      	ldr	r0, [pc, #600]	@ (8011f98 <_svfprintf_r+0x10e8>)
 8011d3e:	6020      	str	r0, [r4, #0]
 8011d40:	f1b8 0f10 	cmp.w	r8, #16
 8011d44:	f102 0201 	add.w	r2, r2, #1
 8011d48:	f104 0108 	add.w	r1, r4, #8
 8011d4c:	dc7d      	bgt.n	8011e4a <_svfprintf_r+0xf9a>
 8011d4e:	4443      	add	r3, r8
 8011d50:	2a07      	cmp	r2, #7
 8011d52:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8011d56:	f8c4 8004 	str.w	r8, [r4, #4]
 8011d5a:	f340 808a 	ble.w	8011e72 <_svfprintf_r+0xfc2>
 8011d5e:	9802      	ldr	r0, [sp, #8]
 8011d60:	aa1e      	add	r2, sp, #120	@ 0x78
 8011d62:	4651      	mov	r1, sl
 8011d64:	f001 f9a2 	bl	80130ac <__ssprint_r>
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	f040 81c2 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011d6e:	ac21      	add	r4, sp, #132	@ 0x84
 8011d70:	056b      	lsls	r3, r5, #21
 8011d72:	eb09 0806 	add.w	r8, r9, r6
 8011d76:	d508      	bpl.n	8011d8a <_svfprintf_r+0xeda>
 8011d78:	9b06      	ldr	r3, [sp, #24]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d17b      	bne.n	8011e76 <_svfprintf_r+0xfc6>
 8011d7e:	2f00      	cmp	r7, #0
 8011d80:	d17b      	bne.n	8011e7a <_svfprintf_r+0xfca>
 8011d82:	9b04      	ldr	r3, [sp, #16]
 8011d84:	4598      	cmp	r8, r3
 8011d86:	bf28      	it	cs
 8011d88:	4698      	movcs	r8, r3
 8011d8a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011d8c:	9a03      	ldr	r2, [sp, #12]
 8011d8e:	4293      	cmp	r3, r2
 8011d90:	db01      	blt.n	8011d96 <_svfprintf_r+0xee6>
 8011d92:	07ee      	lsls	r6, r5, #31
 8011d94:	d50e      	bpl.n	8011db4 <_svfprintf_r+0xf04>
 8011d96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d98:	6023      	str	r3, [r4, #0]
 8011d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d9e:	6063      	str	r3, [r4, #4]
 8011da0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011da2:	4413      	add	r3, r2
 8011da4:	9320      	str	r3, [sp, #128]	@ 0x80
 8011da6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011da8:	3301      	adds	r3, #1
 8011daa:	2b07      	cmp	r3, #7
 8011dac:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011dae:	f300 80df 	bgt.w	8011f70 <_svfprintf_r+0x10c0>
 8011db2:	3408      	adds	r4, #8
 8011db4:	9b03      	ldr	r3, [sp, #12]
 8011db6:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8011db8:	1bdf      	subs	r7, r3, r7
 8011dba:	9b04      	ldr	r3, [sp, #16]
 8011dbc:	eba3 0308 	sub.w	r3, r3, r8
 8011dc0:	429f      	cmp	r7, r3
 8011dc2:	bfa8      	it	ge
 8011dc4:	461f      	movge	r7, r3
 8011dc6:	2f00      	cmp	r7, #0
 8011dc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011dca:	dd0a      	ble.n	8011de2 <_svfprintf_r+0xf32>
 8011dcc:	443b      	add	r3, r7
 8011dce:	9320      	str	r3, [sp, #128]	@ 0x80
 8011dd0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	2b07      	cmp	r3, #7
 8011dd6:	e9c4 8700 	strd	r8, r7, [r4]
 8011dda:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011ddc:	f300 80d2 	bgt.w	8011f84 <_svfprintf_r+0x10d4>
 8011de0:	3408      	adds	r4, #8
 8011de2:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8011de4:	9b03      	ldr	r3, [sp, #12]
 8011de6:	2f00      	cmp	r7, #0
 8011de8:	eba3 0606 	sub.w	r6, r3, r6
 8011dec:	bfa8      	it	ge
 8011dee:	1bf6      	subge	r6, r6, r7
 8011df0:	2e00      	cmp	r6, #0
 8011df2:	f77f ac30 	ble.w	8011656 <_svfprintf_r+0x7a6>
 8011df6:	4f68      	ldr	r7, [pc, #416]	@ (8011f98 <_svfprintf_r+0x10e8>)
 8011df8:	f04f 0810 	mov.w	r8, #16
 8011dfc:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8011e00:	2e10      	cmp	r6, #16
 8011e02:	f103 0301 	add.w	r3, r3, #1
 8011e06:	f104 0108 	add.w	r1, r4, #8
 8011e0a:	6027      	str	r7, [r4, #0]
 8011e0c:	f77f aebf 	ble.w	8011b8e <_svfprintf_r+0xcde>
 8011e10:	3210      	adds	r2, #16
 8011e12:	2b07      	cmp	r3, #7
 8011e14:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8011e18:	f8c4 8004 	str.w	r8, [r4, #4]
 8011e1c:	dd08      	ble.n	8011e30 <_svfprintf_r+0xf80>
 8011e1e:	9802      	ldr	r0, [sp, #8]
 8011e20:	aa1e      	add	r2, sp, #120	@ 0x78
 8011e22:	4651      	mov	r1, sl
 8011e24:	f001 f942 	bl	80130ac <__ssprint_r>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	f040 8162 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011e2e:	a921      	add	r1, sp, #132	@ 0x84
 8011e30:	3e10      	subs	r6, #16
 8011e32:	460c      	mov	r4, r1
 8011e34:	e7e2      	b.n	8011dfc <_svfprintf_r+0xf4c>
 8011e36:	9802      	ldr	r0, [sp, #8]
 8011e38:	aa1e      	add	r2, sp, #120	@ 0x78
 8011e3a:	4651      	mov	r1, sl
 8011e3c:	f001 f936 	bl	80130ac <__ssprint_r>
 8011e40:	2800      	cmp	r0, #0
 8011e42:	f040 8156 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011e46:	ac21      	add	r4, sp, #132	@ 0x84
 8011e48:	e76d      	b.n	8011d26 <_svfprintf_r+0xe76>
 8011e4a:	2010      	movs	r0, #16
 8011e4c:	4403      	add	r3, r0
 8011e4e:	2a07      	cmp	r2, #7
 8011e50:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8011e54:	6060      	str	r0, [r4, #4]
 8011e56:	dd08      	ble.n	8011e6a <_svfprintf_r+0xfba>
 8011e58:	9802      	ldr	r0, [sp, #8]
 8011e5a:	aa1e      	add	r2, sp, #120	@ 0x78
 8011e5c:	4651      	mov	r1, sl
 8011e5e:	f001 f925 	bl	80130ac <__ssprint_r>
 8011e62:	2800      	cmp	r0, #0
 8011e64:	f040 8145 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011e68:	a921      	add	r1, sp, #132	@ 0x84
 8011e6a:	f1a8 0810 	sub.w	r8, r8, #16
 8011e6e:	460c      	mov	r4, r1
 8011e70:	e762      	b.n	8011d38 <_svfprintf_r+0xe88>
 8011e72:	460c      	mov	r4, r1
 8011e74:	e77c      	b.n	8011d70 <_svfprintf_r+0xec0>
 8011e76:	2f00      	cmp	r7, #0
 8011e78:	d04a      	beq.n	8011f10 <_svfprintf_r+0x1060>
 8011e7a:	3f01      	subs	r7, #1
 8011e7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011e7e:	6023      	str	r3, [r4, #0]
 8011e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e84:	6063      	str	r3, [r4, #4]
 8011e86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011e88:	4413      	add	r3, r2
 8011e8a:	9320      	str	r3, [sp, #128]	@ 0x80
 8011e8c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011e8e:	3301      	adds	r3, #1
 8011e90:	2b07      	cmp	r3, #7
 8011e92:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011e94:	dc43      	bgt.n	8011f1e <_svfprintf_r+0x106e>
 8011e96:	3408      	adds	r4, #8
 8011e98:	9b07      	ldr	r3, [sp, #28]
 8011e9a:	781a      	ldrb	r2, [r3, #0]
 8011e9c:	9b04      	ldr	r3, [sp, #16]
 8011e9e:	eba3 0308 	sub.w	r3, r3, r8
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	bfa8      	it	ge
 8011ea6:	461a      	movge	r2, r3
 8011ea8:	2a00      	cmp	r2, #0
 8011eaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011eac:	4691      	mov	r9, r2
 8011eae:	dd09      	ble.n	8011ec4 <_svfprintf_r+0x1014>
 8011eb0:	4413      	add	r3, r2
 8011eb2:	9320      	str	r3, [sp, #128]	@ 0x80
 8011eb4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	2b07      	cmp	r3, #7
 8011eba:	e9c4 8200 	strd	r8, r2, [r4]
 8011ebe:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011ec0:	dc37      	bgt.n	8011f32 <_svfprintf_r+0x1082>
 8011ec2:	3408      	adds	r4, #8
 8011ec4:	9b07      	ldr	r3, [sp, #28]
 8011ec6:	781e      	ldrb	r6, [r3, #0]
 8011ec8:	f1b9 0f00 	cmp.w	r9, #0
 8011ecc:	bfa8      	it	ge
 8011ece:	eba6 0609 	subge.w	r6, r6, r9
 8011ed2:	2e00      	cmp	r6, #0
 8011ed4:	dd18      	ble.n	8011f08 <_svfprintf_r+0x1058>
 8011ed6:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8011eda:	482f      	ldr	r0, [pc, #188]	@ (8011f98 <_svfprintf_r+0x10e8>)
 8011edc:	6020      	str	r0, [r4, #0]
 8011ede:	2e10      	cmp	r6, #16
 8011ee0:	f103 0301 	add.w	r3, r3, #1
 8011ee4:	f104 0108 	add.w	r1, r4, #8
 8011ee8:	dc2d      	bgt.n	8011f46 <_svfprintf_r+0x1096>
 8011eea:	6066      	str	r6, [r4, #4]
 8011eec:	2b07      	cmp	r3, #7
 8011eee:	4416      	add	r6, r2
 8011ef0:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 8011ef4:	dd3a      	ble.n	8011f6c <_svfprintf_r+0x10bc>
 8011ef6:	9802      	ldr	r0, [sp, #8]
 8011ef8:	aa1e      	add	r2, sp, #120	@ 0x78
 8011efa:	4651      	mov	r1, sl
 8011efc:	f001 f8d6 	bl	80130ac <__ssprint_r>
 8011f00:	2800      	cmp	r0, #0
 8011f02:	f040 80f6 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011f06:	ac21      	add	r4, sp, #132	@ 0x84
 8011f08:	9b07      	ldr	r3, [sp, #28]
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	4498      	add	r8, r3
 8011f0e:	e733      	b.n	8011d78 <_svfprintf_r+0xec8>
 8011f10:	9b07      	ldr	r3, [sp, #28]
 8011f12:	3b01      	subs	r3, #1
 8011f14:	9307      	str	r3, [sp, #28]
 8011f16:	9b06      	ldr	r3, [sp, #24]
 8011f18:	3b01      	subs	r3, #1
 8011f1a:	9306      	str	r3, [sp, #24]
 8011f1c:	e7ae      	b.n	8011e7c <_svfprintf_r+0xfcc>
 8011f1e:	9802      	ldr	r0, [sp, #8]
 8011f20:	aa1e      	add	r2, sp, #120	@ 0x78
 8011f22:	4651      	mov	r1, sl
 8011f24:	f001 f8c2 	bl	80130ac <__ssprint_r>
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	f040 80e2 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011f2e:	ac21      	add	r4, sp, #132	@ 0x84
 8011f30:	e7b2      	b.n	8011e98 <_svfprintf_r+0xfe8>
 8011f32:	9802      	ldr	r0, [sp, #8]
 8011f34:	aa1e      	add	r2, sp, #120	@ 0x78
 8011f36:	4651      	mov	r1, sl
 8011f38:	f001 f8b8 	bl	80130ac <__ssprint_r>
 8011f3c:	2800      	cmp	r0, #0
 8011f3e:	f040 80d8 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011f42:	ac21      	add	r4, sp, #132	@ 0x84
 8011f44:	e7be      	b.n	8011ec4 <_svfprintf_r+0x1014>
 8011f46:	2010      	movs	r0, #16
 8011f48:	4402      	add	r2, r0
 8011f4a:	2b07      	cmp	r3, #7
 8011f4c:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8011f50:	6060      	str	r0, [r4, #4]
 8011f52:	dd08      	ble.n	8011f66 <_svfprintf_r+0x10b6>
 8011f54:	9802      	ldr	r0, [sp, #8]
 8011f56:	aa1e      	add	r2, sp, #120	@ 0x78
 8011f58:	4651      	mov	r1, sl
 8011f5a:	f001 f8a7 	bl	80130ac <__ssprint_r>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	f040 80c7 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011f64:	a921      	add	r1, sp, #132	@ 0x84
 8011f66:	3e10      	subs	r6, #16
 8011f68:	460c      	mov	r4, r1
 8011f6a:	e7b4      	b.n	8011ed6 <_svfprintf_r+0x1026>
 8011f6c:	460c      	mov	r4, r1
 8011f6e:	e7cb      	b.n	8011f08 <_svfprintf_r+0x1058>
 8011f70:	9802      	ldr	r0, [sp, #8]
 8011f72:	aa1e      	add	r2, sp, #120	@ 0x78
 8011f74:	4651      	mov	r1, sl
 8011f76:	f001 f899 	bl	80130ac <__ssprint_r>
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	f040 80b9 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011f80:	ac21      	add	r4, sp, #132	@ 0x84
 8011f82:	e717      	b.n	8011db4 <_svfprintf_r+0xf04>
 8011f84:	9802      	ldr	r0, [sp, #8]
 8011f86:	aa1e      	add	r2, sp, #120	@ 0x78
 8011f88:	4651      	mov	r1, sl
 8011f8a:	f001 f88f 	bl	80130ac <__ssprint_r>
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	f040 80af 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011f94:	ac21      	add	r4, sp, #132	@ 0x84
 8011f96:	e724      	b.n	8011de2 <_svfprintf_r+0xf32>
 8011f98:	08014c35 	.word	0x08014c35
 8011f9c:	9803      	ldr	r0, [sp, #12]
 8011f9e:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8011fa0:	2801      	cmp	r0, #1
 8011fa2:	f103 0201 	add.w	r2, r3, #1
 8011fa6:	f101 0101 	add.w	r1, r1, #1
 8011faa:	f104 0308 	add.w	r3, r4, #8
 8011fae:	dc01      	bgt.n	8011fb4 <_svfprintf_r+0x1104>
 8011fb0:	07e8      	lsls	r0, r5, #31
 8011fb2:	d572      	bpl.n	801209a <_svfprintf_r+0x11ea>
 8011fb4:	2001      	movs	r0, #1
 8011fb6:	2907      	cmp	r1, #7
 8011fb8:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8011fbc:	f8c4 9000 	str.w	r9, [r4]
 8011fc0:	6060      	str	r0, [r4, #4]
 8011fc2:	dd08      	ble.n	8011fd6 <_svfprintf_r+0x1126>
 8011fc4:	9802      	ldr	r0, [sp, #8]
 8011fc6:	aa1e      	add	r2, sp, #120	@ 0x78
 8011fc8:	4651      	mov	r1, sl
 8011fca:	f001 f86f 	bl	80130ac <__ssprint_r>
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	f040 808f 	bne.w	80120f2 <_svfprintf_r+0x1242>
 8011fd4:	ab21      	add	r3, sp, #132	@ 0x84
 8011fd6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011fd8:	601a      	str	r2, [r3, #0]
 8011fda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011fdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011fde:	605a      	str	r2, [r3, #4]
 8011fe0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011fe2:	440a      	add	r2, r1
 8011fe4:	9220      	str	r2, [sp, #128]	@ 0x80
 8011fe6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8011fe8:	3201      	adds	r2, #1
 8011fea:	2a07      	cmp	r2, #7
 8011fec:	921f      	str	r2, [sp, #124]	@ 0x7c
 8011fee:	dc25      	bgt.n	801203c <_svfprintf_r+0x118c>
 8011ff0:	3308      	adds	r3, #8
 8011ff2:	9803      	ldr	r0, [sp, #12]
 8011ff4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ffc:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 8012000:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8012004:	d023      	beq.n	801204e <_svfprintf_r+0x119e>
 8012006:	f109 0001 	add.w	r0, r9, #1
 801200a:	e9c3 0400 	strd	r0, r4, [r3]
 801200e:	9803      	ldr	r0, [sp, #12]
 8012010:	3101      	adds	r1, #1
 8012012:	3a01      	subs	r2, #1
 8012014:	4402      	add	r2, r0
 8012016:	2907      	cmp	r1, #7
 8012018:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 801201c:	dd46      	ble.n	80120ac <_svfprintf_r+0x11fc>
 801201e:	9802      	ldr	r0, [sp, #8]
 8012020:	aa1e      	add	r2, sp, #120	@ 0x78
 8012022:	4651      	mov	r1, sl
 8012024:	f001 f842 	bl	80130ac <__ssprint_r>
 8012028:	2800      	cmp	r0, #0
 801202a:	d162      	bne.n	80120f2 <_svfprintf_r+0x1242>
 801202c:	ab21      	add	r3, sp, #132	@ 0x84
 801202e:	aa1a      	add	r2, sp, #104	@ 0x68
 8012030:	601a      	str	r2, [r3, #0]
 8012032:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012034:	605a      	str	r2, [r3, #4]
 8012036:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8012038:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801203a:	e62a      	b.n	8011c92 <_svfprintf_r+0xde2>
 801203c:	9802      	ldr	r0, [sp, #8]
 801203e:	aa1e      	add	r2, sp, #120	@ 0x78
 8012040:	4651      	mov	r1, sl
 8012042:	f001 f833 	bl	80130ac <__ssprint_r>
 8012046:	2800      	cmp	r0, #0
 8012048:	d153      	bne.n	80120f2 <_svfprintf_r+0x1242>
 801204a:	ab21      	add	r3, sp, #132	@ 0x84
 801204c:	e7d1      	b.n	8011ff2 <_svfprintf_r+0x1142>
 801204e:	9a03      	ldr	r2, [sp, #12]
 8012050:	2a01      	cmp	r2, #1
 8012052:	ddec      	ble.n	801202e <_svfprintf_r+0x117e>
 8012054:	4e56      	ldr	r6, [pc, #344]	@ (80121b0 <_svfprintf_r+0x1300>)
 8012056:	2710      	movs	r7, #16
 8012058:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 801205c:	2c10      	cmp	r4, #16
 801205e:	f102 0201 	add.w	r2, r2, #1
 8012062:	f103 0008 	add.w	r0, r3, #8
 8012066:	601e      	str	r6, [r3, #0]
 8012068:	dc07      	bgt.n	801207a <_svfprintf_r+0x11ca>
 801206a:	605c      	str	r4, [r3, #4]
 801206c:	2a07      	cmp	r2, #7
 801206e:	440c      	add	r4, r1
 8012070:	e9cd 241f 	strd	r2, r4, [sp, #124]	@ 0x7c
 8012074:	dcd3      	bgt.n	801201e <_svfprintf_r+0x116e>
 8012076:	4603      	mov	r3, r0
 8012078:	e7d9      	b.n	801202e <_svfprintf_r+0x117e>
 801207a:	3110      	adds	r1, #16
 801207c:	2a07      	cmp	r2, #7
 801207e:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8012082:	605f      	str	r7, [r3, #4]
 8012084:	dd06      	ble.n	8012094 <_svfprintf_r+0x11e4>
 8012086:	9802      	ldr	r0, [sp, #8]
 8012088:	aa1e      	add	r2, sp, #120	@ 0x78
 801208a:	4651      	mov	r1, sl
 801208c:	f001 f80e 	bl	80130ac <__ssprint_r>
 8012090:	bb78      	cbnz	r0, 80120f2 <_svfprintf_r+0x1242>
 8012092:	a821      	add	r0, sp, #132	@ 0x84
 8012094:	3c10      	subs	r4, #16
 8012096:	4603      	mov	r3, r0
 8012098:	e7de      	b.n	8012058 <_svfprintf_r+0x11a8>
 801209a:	2001      	movs	r0, #1
 801209c:	2907      	cmp	r1, #7
 801209e:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 80120a2:	f8c4 9000 	str.w	r9, [r4]
 80120a6:	6060      	str	r0, [r4, #4]
 80120a8:	ddc1      	ble.n	801202e <_svfprintf_r+0x117e>
 80120aa:	e7b8      	b.n	801201e <_svfprintf_r+0x116e>
 80120ac:	3308      	adds	r3, #8
 80120ae:	e7be      	b.n	801202e <_svfprintf_r+0x117e>
 80120b0:	460c      	mov	r4, r1
 80120b2:	f7ff bad0 	b.w	8011656 <_svfprintf_r+0x7a6>
 80120b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80120ba:	1a9d      	subs	r5, r3, r2
 80120bc:	2d00      	cmp	r5, #0
 80120be:	f77f aacd 	ble.w	801165c <_svfprintf_r+0x7ac>
 80120c2:	4e3c      	ldr	r6, [pc, #240]	@ (80121b4 <_svfprintf_r+0x1304>)
 80120c4:	2710      	movs	r7, #16
 80120c6:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 80120ca:	2d10      	cmp	r5, #16
 80120cc:	f103 0301 	add.w	r3, r3, #1
 80120d0:	6026      	str	r6, [r4, #0]
 80120d2:	dc18      	bgt.n	8012106 <_svfprintf_r+0x1256>
 80120d4:	442a      	add	r2, r5
 80120d6:	2b07      	cmp	r3, #7
 80120d8:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80120dc:	6065      	str	r5, [r4, #4]
 80120de:	f77f aabd 	ble.w	801165c <_svfprintf_r+0x7ac>
 80120e2:	9802      	ldr	r0, [sp, #8]
 80120e4:	aa1e      	add	r2, sp, #120	@ 0x78
 80120e6:	4651      	mov	r1, sl
 80120e8:	f000 ffe0 	bl	80130ac <__ssprint_r>
 80120ec:	2800      	cmp	r0, #0
 80120ee:	f43f aab5 	beq.w	801165c <_svfprintf_r+0x7ac>
 80120f2:	f1bb 0f00 	cmp.w	fp, #0
 80120f6:	f43f a8e0 	beq.w	80112ba <_svfprintf_r+0x40a>
 80120fa:	9802      	ldr	r0, [sp, #8]
 80120fc:	4659      	mov	r1, fp
 80120fe:	f7fe fbcb 	bl	8010898 <_free_r>
 8012102:	f7ff b8da 	b.w	80112ba <_svfprintf_r+0x40a>
 8012106:	3210      	adds	r2, #16
 8012108:	2b07      	cmp	r3, #7
 801210a:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 801210e:	6067      	str	r7, [r4, #4]
 8012110:	dc02      	bgt.n	8012118 <_svfprintf_r+0x1268>
 8012112:	3408      	adds	r4, #8
 8012114:	3d10      	subs	r5, #16
 8012116:	e7d6      	b.n	80120c6 <_svfprintf_r+0x1216>
 8012118:	9802      	ldr	r0, [sp, #8]
 801211a:	aa1e      	add	r2, sp, #120	@ 0x78
 801211c:	4651      	mov	r1, sl
 801211e:	f000 ffc5 	bl	80130ac <__ssprint_r>
 8012122:	2800      	cmp	r0, #0
 8012124:	d1e5      	bne.n	80120f2 <_svfprintf_r+0x1242>
 8012126:	ac21      	add	r4, sp, #132	@ 0x84
 8012128:	e7f4      	b.n	8012114 <_svfprintf_r+0x1264>
 801212a:	9802      	ldr	r0, [sp, #8]
 801212c:	4659      	mov	r1, fp
 801212e:	f7fe fbb3 	bl	8010898 <_free_r>
 8012132:	f7ff baab 	b.w	801168c <_svfprintf_r+0x7dc>
 8012136:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012138:	2b00      	cmp	r3, #0
 801213a:	f43f a8be 	beq.w	80112ba <_svfprintf_r+0x40a>
 801213e:	9802      	ldr	r0, [sp, #8]
 8012140:	aa1e      	add	r2, sp, #120	@ 0x78
 8012142:	4651      	mov	r1, sl
 8012144:	f000 ffb2 	bl	80130ac <__ssprint_r>
 8012148:	f7ff b8b7 	b.w	80112ba <_svfprintf_r+0x40a>
 801214c:	ea56 0207 	orrs.w	r2, r6, r7
 8012150:	9506      	str	r5, [sp, #24]
 8012152:	f43f ab93 	beq.w	801187c <_svfprintf_r+0x9cc>
 8012156:	2b01      	cmp	r3, #1
 8012158:	f43f ac14 	beq.w	8011984 <_svfprintf_r+0xad4>
 801215c:	2b02      	cmp	r3, #2
 801215e:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 8012162:	f43f ac59 	beq.w	8011a18 <_svfprintf_r+0xb68>
 8012166:	f006 0307 	and.w	r3, r6, #7
 801216a:	08f6      	lsrs	r6, r6, #3
 801216c:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8012170:	08ff      	lsrs	r7, r7, #3
 8012172:	3330      	adds	r3, #48	@ 0x30
 8012174:	ea56 0107 	orrs.w	r1, r6, r7
 8012178:	464a      	mov	r2, r9
 801217a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801217e:	d1f2      	bne.n	8012166 <_svfprintf_r+0x12b6>
 8012180:	9906      	ldr	r1, [sp, #24]
 8012182:	07cd      	lsls	r5, r1, #31
 8012184:	d506      	bpl.n	8012194 <_svfprintf_r+0x12e4>
 8012186:	2b30      	cmp	r3, #48	@ 0x30
 8012188:	d004      	beq.n	8012194 <_svfprintf_r+0x12e4>
 801218a:	2330      	movs	r3, #48	@ 0x30
 801218c:	f809 3c01 	strb.w	r3, [r9, #-1]
 8012190:	f1a2 0902 	sub.w	r9, r2, #2
 8012194:	ab4a      	add	r3, sp, #296	@ 0x128
 8012196:	9d06      	ldr	r5, [sp, #24]
 8012198:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 801219c:	f04f 0b00 	mov.w	fp, #0
 80121a0:	eba3 0809 	sub.w	r8, r3, r9
 80121a4:	465f      	mov	r7, fp
 80121a6:	f8cd b018 	str.w	fp, [sp, #24]
 80121aa:	465e      	mov	r6, fp
 80121ac:	f7ff b9a4 	b.w	80114f8 <_svfprintf_r+0x648>
 80121b0:	08014c35 	.word	0x08014c35
 80121b4:	08014c45 	.word	0x08014c45

080121b8 <__swhatbuf_r>:
 80121b8:	b570      	push	{r4, r5, r6, lr}
 80121ba:	460c      	mov	r4, r1
 80121bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121c0:	2900      	cmp	r1, #0
 80121c2:	b096      	sub	sp, #88	@ 0x58
 80121c4:	4615      	mov	r5, r2
 80121c6:	461e      	mov	r6, r3
 80121c8:	da07      	bge.n	80121da <__swhatbuf_r+0x22>
 80121ca:	89a1      	ldrh	r1, [r4, #12]
 80121cc:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80121d0:	d117      	bne.n	8012202 <__swhatbuf_r+0x4a>
 80121d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80121d6:	4608      	mov	r0, r1
 80121d8:	e00f      	b.n	80121fa <__swhatbuf_r+0x42>
 80121da:	466a      	mov	r2, sp
 80121dc:	f000 fe38 	bl	8012e50 <_fstat_r>
 80121e0:	2800      	cmp	r0, #0
 80121e2:	dbf2      	blt.n	80121ca <__swhatbuf_r+0x12>
 80121e4:	9901      	ldr	r1, [sp, #4]
 80121e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80121ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80121ee:	4259      	negs	r1, r3
 80121f0:	4159      	adcs	r1, r3
 80121f2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80121f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80121fa:	6031      	str	r1, [r6, #0]
 80121fc:	602b      	str	r3, [r5, #0]
 80121fe:	b016      	add	sp, #88	@ 0x58
 8012200:	bd70      	pop	{r4, r5, r6, pc}
 8012202:	2100      	movs	r1, #0
 8012204:	2340      	movs	r3, #64	@ 0x40
 8012206:	e7e6      	b.n	80121d6 <__swhatbuf_r+0x1e>

08012208 <__smakebuf_r>:
 8012208:	898b      	ldrh	r3, [r1, #12]
 801220a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801220c:	079d      	lsls	r5, r3, #30
 801220e:	4606      	mov	r6, r0
 8012210:	460c      	mov	r4, r1
 8012212:	d507      	bpl.n	8012224 <__smakebuf_r+0x1c>
 8012214:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	6123      	str	r3, [r4, #16]
 801221c:	2301      	movs	r3, #1
 801221e:	6163      	str	r3, [r4, #20]
 8012220:	b003      	add	sp, #12
 8012222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012224:	ab01      	add	r3, sp, #4
 8012226:	466a      	mov	r2, sp
 8012228:	f7ff ffc6 	bl	80121b8 <__swhatbuf_r>
 801222c:	9f00      	ldr	r7, [sp, #0]
 801222e:	4605      	mov	r5, r0
 8012230:	4639      	mov	r1, r7
 8012232:	4630      	mov	r0, r6
 8012234:	f7fe fbf0 	bl	8010a18 <_malloc_r>
 8012238:	b948      	cbnz	r0, 801224e <__smakebuf_r+0x46>
 801223a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801223e:	059a      	lsls	r2, r3, #22
 8012240:	d4ee      	bmi.n	8012220 <__smakebuf_r+0x18>
 8012242:	f023 0303 	bic.w	r3, r3, #3
 8012246:	f043 0302 	orr.w	r3, r3, #2
 801224a:	81a3      	strh	r3, [r4, #12]
 801224c:	e7e2      	b.n	8012214 <__smakebuf_r+0xc>
 801224e:	89a3      	ldrh	r3, [r4, #12]
 8012250:	6020      	str	r0, [r4, #0]
 8012252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012256:	81a3      	strh	r3, [r4, #12]
 8012258:	9b01      	ldr	r3, [sp, #4]
 801225a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801225e:	b15b      	cbz	r3, 8012278 <__smakebuf_r+0x70>
 8012260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012264:	4630      	mov	r0, r6
 8012266:	f000 fe05 	bl	8012e74 <_isatty_r>
 801226a:	b128      	cbz	r0, 8012278 <__smakebuf_r+0x70>
 801226c:	89a3      	ldrh	r3, [r4, #12]
 801226e:	f023 0303 	bic.w	r3, r3, #3
 8012272:	f043 0301 	orr.w	r3, r3, #1
 8012276:	81a3      	strh	r3, [r4, #12]
 8012278:	89a3      	ldrh	r3, [r4, #12]
 801227a:	431d      	orrs	r5, r3
 801227c:	81a5      	strh	r5, [r4, #12]
 801227e:	e7cf      	b.n	8012220 <__smakebuf_r+0x18>

08012280 <__malloc_lock>:
 8012280:	4801      	ldr	r0, [pc, #4]	@ (8012288 <__malloc_lock+0x8>)
 8012282:	f7fd bc7d 	b.w	800fb80 <__retarget_lock_acquire_recursive>
 8012286:	bf00      	nop
 8012288:	2401534c 	.word	0x2401534c

0801228c <__malloc_unlock>:
 801228c:	4801      	ldr	r0, [pc, #4]	@ (8012294 <__malloc_unlock+0x8>)
 801228e:	f7fd bc78 	b.w	800fb82 <__retarget_lock_release_recursive>
 8012292:	bf00      	nop
 8012294:	2401534c 	.word	0x2401534c

08012298 <_Balloc>:
 8012298:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801229a:	b570      	push	{r4, r5, r6, lr}
 801229c:	4605      	mov	r5, r0
 801229e:	460c      	mov	r4, r1
 80122a0:	b17b      	cbz	r3, 80122c2 <_Balloc+0x2a>
 80122a2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80122a4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80122a8:	b9a0      	cbnz	r0, 80122d4 <_Balloc+0x3c>
 80122aa:	2101      	movs	r1, #1
 80122ac:	fa01 f604 	lsl.w	r6, r1, r4
 80122b0:	1d72      	adds	r2, r6, #5
 80122b2:	0092      	lsls	r2, r2, #2
 80122b4:	4628      	mov	r0, r5
 80122b6:	f000 feb1 	bl	801301c <_calloc_r>
 80122ba:	b148      	cbz	r0, 80122d0 <_Balloc+0x38>
 80122bc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80122c0:	e00b      	b.n	80122da <_Balloc+0x42>
 80122c2:	2221      	movs	r2, #33	@ 0x21
 80122c4:	2104      	movs	r1, #4
 80122c6:	f000 fea9 	bl	801301c <_calloc_r>
 80122ca:	6468      	str	r0, [r5, #68]	@ 0x44
 80122cc:	2800      	cmp	r0, #0
 80122ce:	d1e8      	bne.n	80122a2 <_Balloc+0xa>
 80122d0:	2000      	movs	r0, #0
 80122d2:	bd70      	pop	{r4, r5, r6, pc}
 80122d4:	6802      	ldr	r2, [r0, #0]
 80122d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80122da:	2300      	movs	r3, #0
 80122dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80122e0:	e7f7      	b.n	80122d2 <_Balloc+0x3a>

080122e2 <_Bfree>:
 80122e2:	b131      	cbz	r1, 80122f2 <_Bfree+0x10>
 80122e4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80122e6:	684a      	ldr	r2, [r1, #4]
 80122e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80122ec:	6008      	str	r0, [r1, #0]
 80122ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80122f2:	4770      	bx	lr

080122f4 <__multadd>:
 80122f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f8:	690d      	ldr	r5, [r1, #16]
 80122fa:	4607      	mov	r7, r0
 80122fc:	460c      	mov	r4, r1
 80122fe:	461e      	mov	r6, r3
 8012300:	f101 0c14 	add.w	ip, r1, #20
 8012304:	2000      	movs	r0, #0
 8012306:	f8dc 3000 	ldr.w	r3, [ip]
 801230a:	b299      	uxth	r1, r3
 801230c:	fb02 6101 	mla	r1, r2, r1, r6
 8012310:	0c1e      	lsrs	r6, r3, #16
 8012312:	0c0b      	lsrs	r3, r1, #16
 8012314:	fb02 3306 	mla	r3, r2, r6, r3
 8012318:	b289      	uxth	r1, r1
 801231a:	3001      	adds	r0, #1
 801231c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012320:	4285      	cmp	r5, r0
 8012322:	f84c 1b04 	str.w	r1, [ip], #4
 8012326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801232a:	dcec      	bgt.n	8012306 <__multadd+0x12>
 801232c:	b30e      	cbz	r6, 8012372 <__multadd+0x7e>
 801232e:	68a3      	ldr	r3, [r4, #8]
 8012330:	42ab      	cmp	r3, r5
 8012332:	dc19      	bgt.n	8012368 <__multadd+0x74>
 8012334:	6861      	ldr	r1, [r4, #4]
 8012336:	4638      	mov	r0, r7
 8012338:	3101      	adds	r1, #1
 801233a:	f7ff ffad 	bl	8012298 <_Balloc>
 801233e:	4680      	mov	r8, r0
 8012340:	b928      	cbnz	r0, 801234e <__multadd+0x5a>
 8012342:	4602      	mov	r2, r0
 8012344:	4b0c      	ldr	r3, [pc, #48]	@ (8012378 <__multadd+0x84>)
 8012346:	480d      	ldr	r0, [pc, #52]	@ (801237c <__multadd+0x88>)
 8012348:	21ba      	movs	r1, #186	@ 0xba
 801234a:	f000 fe49 	bl	8012fe0 <__assert_func>
 801234e:	6922      	ldr	r2, [r4, #16]
 8012350:	3202      	adds	r2, #2
 8012352:	f104 010c 	add.w	r1, r4, #12
 8012356:	0092      	lsls	r2, r2, #2
 8012358:	300c      	adds	r0, #12
 801235a:	f7fd fc13 	bl	800fb84 <memcpy>
 801235e:	4621      	mov	r1, r4
 8012360:	4638      	mov	r0, r7
 8012362:	f7ff ffbe 	bl	80122e2 <_Bfree>
 8012366:	4644      	mov	r4, r8
 8012368:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801236c:	3501      	adds	r5, #1
 801236e:	615e      	str	r6, [r3, #20]
 8012370:	6125      	str	r5, [r4, #16]
 8012372:	4620      	mov	r0, r4
 8012374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012378:	08014bbc 	.word	0x08014bbc
 801237c:	08014c55 	.word	0x08014c55

08012380 <__hi0bits>:
 8012380:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012384:	4603      	mov	r3, r0
 8012386:	bf36      	itet	cc
 8012388:	0403      	lslcc	r3, r0, #16
 801238a:	2000      	movcs	r0, #0
 801238c:	2010      	movcc	r0, #16
 801238e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012392:	bf3c      	itt	cc
 8012394:	021b      	lslcc	r3, r3, #8
 8012396:	3008      	addcc	r0, #8
 8012398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801239c:	bf3c      	itt	cc
 801239e:	011b      	lslcc	r3, r3, #4
 80123a0:	3004      	addcc	r0, #4
 80123a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80123a6:	bf3c      	itt	cc
 80123a8:	009b      	lslcc	r3, r3, #2
 80123aa:	3002      	addcc	r0, #2
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	db05      	blt.n	80123bc <__hi0bits+0x3c>
 80123b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80123b4:	f100 0001 	add.w	r0, r0, #1
 80123b8:	bf08      	it	eq
 80123ba:	2020      	moveq	r0, #32
 80123bc:	4770      	bx	lr

080123be <__lo0bits>:
 80123be:	6803      	ldr	r3, [r0, #0]
 80123c0:	4602      	mov	r2, r0
 80123c2:	f013 0007 	ands.w	r0, r3, #7
 80123c6:	d00b      	beq.n	80123e0 <__lo0bits+0x22>
 80123c8:	07d9      	lsls	r1, r3, #31
 80123ca:	d421      	bmi.n	8012410 <__lo0bits+0x52>
 80123cc:	0798      	lsls	r0, r3, #30
 80123ce:	bf49      	itett	mi
 80123d0:	085b      	lsrmi	r3, r3, #1
 80123d2:	089b      	lsrpl	r3, r3, #2
 80123d4:	2001      	movmi	r0, #1
 80123d6:	6013      	strmi	r3, [r2, #0]
 80123d8:	bf5c      	itt	pl
 80123da:	6013      	strpl	r3, [r2, #0]
 80123dc:	2002      	movpl	r0, #2
 80123de:	4770      	bx	lr
 80123e0:	b299      	uxth	r1, r3
 80123e2:	b909      	cbnz	r1, 80123e8 <__lo0bits+0x2a>
 80123e4:	0c1b      	lsrs	r3, r3, #16
 80123e6:	2010      	movs	r0, #16
 80123e8:	b2d9      	uxtb	r1, r3
 80123ea:	b909      	cbnz	r1, 80123f0 <__lo0bits+0x32>
 80123ec:	3008      	adds	r0, #8
 80123ee:	0a1b      	lsrs	r3, r3, #8
 80123f0:	0719      	lsls	r1, r3, #28
 80123f2:	bf04      	itt	eq
 80123f4:	091b      	lsreq	r3, r3, #4
 80123f6:	3004      	addeq	r0, #4
 80123f8:	0799      	lsls	r1, r3, #30
 80123fa:	bf04      	itt	eq
 80123fc:	089b      	lsreq	r3, r3, #2
 80123fe:	3002      	addeq	r0, #2
 8012400:	07d9      	lsls	r1, r3, #31
 8012402:	d403      	bmi.n	801240c <__lo0bits+0x4e>
 8012404:	085b      	lsrs	r3, r3, #1
 8012406:	f100 0001 	add.w	r0, r0, #1
 801240a:	d003      	beq.n	8012414 <__lo0bits+0x56>
 801240c:	6013      	str	r3, [r2, #0]
 801240e:	4770      	bx	lr
 8012410:	2000      	movs	r0, #0
 8012412:	4770      	bx	lr
 8012414:	2020      	movs	r0, #32
 8012416:	4770      	bx	lr

08012418 <__i2b>:
 8012418:	b510      	push	{r4, lr}
 801241a:	460c      	mov	r4, r1
 801241c:	2101      	movs	r1, #1
 801241e:	f7ff ff3b 	bl	8012298 <_Balloc>
 8012422:	4602      	mov	r2, r0
 8012424:	b928      	cbnz	r0, 8012432 <__i2b+0x1a>
 8012426:	4b05      	ldr	r3, [pc, #20]	@ (801243c <__i2b+0x24>)
 8012428:	4805      	ldr	r0, [pc, #20]	@ (8012440 <__i2b+0x28>)
 801242a:	f240 1145 	movw	r1, #325	@ 0x145
 801242e:	f000 fdd7 	bl	8012fe0 <__assert_func>
 8012432:	2301      	movs	r3, #1
 8012434:	6144      	str	r4, [r0, #20]
 8012436:	6103      	str	r3, [r0, #16]
 8012438:	bd10      	pop	{r4, pc}
 801243a:	bf00      	nop
 801243c:	08014bbc 	.word	0x08014bbc
 8012440:	08014c55 	.word	0x08014c55

08012444 <__multiply>:
 8012444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012448:	4614      	mov	r4, r2
 801244a:	690a      	ldr	r2, [r1, #16]
 801244c:	6923      	ldr	r3, [r4, #16]
 801244e:	429a      	cmp	r2, r3
 8012450:	bfa8      	it	ge
 8012452:	4623      	movge	r3, r4
 8012454:	460f      	mov	r7, r1
 8012456:	bfa4      	itt	ge
 8012458:	460c      	movge	r4, r1
 801245a:	461f      	movge	r7, r3
 801245c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012460:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012464:	68a3      	ldr	r3, [r4, #8]
 8012466:	6861      	ldr	r1, [r4, #4]
 8012468:	eb0a 0609 	add.w	r6, sl, r9
 801246c:	42b3      	cmp	r3, r6
 801246e:	b085      	sub	sp, #20
 8012470:	bfb8      	it	lt
 8012472:	3101      	addlt	r1, #1
 8012474:	f7ff ff10 	bl	8012298 <_Balloc>
 8012478:	b930      	cbnz	r0, 8012488 <__multiply+0x44>
 801247a:	4602      	mov	r2, r0
 801247c:	4b44      	ldr	r3, [pc, #272]	@ (8012590 <__multiply+0x14c>)
 801247e:	4845      	ldr	r0, [pc, #276]	@ (8012594 <__multiply+0x150>)
 8012480:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012484:	f000 fdac 	bl	8012fe0 <__assert_func>
 8012488:	f100 0514 	add.w	r5, r0, #20
 801248c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012490:	462b      	mov	r3, r5
 8012492:	2200      	movs	r2, #0
 8012494:	4543      	cmp	r3, r8
 8012496:	d321      	bcc.n	80124dc <__multiply+0x98>
 8012498:	f107 0114 	add.w	r1, r7, #20
 801249c:	f104 0214 	add.w	r2, r4, #20
 80124a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80124a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80124a8:	9302      	str	r3, [sp, #8]
 80124aa:	1b13      	subs	r3, r2, r4
 80124ac:	3b15      	subs	r3, #21
 80124ae:	f023 0303 	bic.w	r3, r3, #3
 80124b2:	3304      	adds	r3, #4
 80124b4:	f104 0715 	add.w	r7, r4, #21
 80124b8:	42ba      	cmp	r2, r7
 80124ba:	bf38      	it	cc
 80124bc:	2304      	movcc	r3, #4
 80124be:	9301      	str	r3, [sp, #4]
 80124c0:	9b02      	ldr	r3, [sp, #8]
 80124c2:	9103      	str	r1, [sp, #12]
 80124c4:	428b      	cmp	r3, r1
 80124c6:	d80c      	bhi.n	80124e2 <__multiply+0x9e>
 80124c8:	2e00      	cmp	r6, #0
 80124ca:	dd03      	ble.n	80124d4 <__multiply+0x90>
 80124cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d05b      	beq.n	801258c <__multiply+0x148>
 80124d4:	6106      	str	r6, [r0, #16]
 80124d6:	b005      	add	sp, #20
 80124d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124dc:	f843 2b04 	str.w	r2, [r3], #4
 80124e0:	e7d8      	b.n	8012494 <__multiply+0x50>
 80124e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80124e6:	f1ba 0f00 	cmp.w	sl, #0
 80124ea:	d024      	beq.n	8012536 <__multiply+0xf2>
 80124ec:	f104 0e14 	add.w	lr, r4, #20
 80124f0:	46a9      	mov	r9, r5
 80124f2:	f04f 0c00 	mov.w	ip, #0
 80124f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80124fa:	f8d9 3000 	ldr.w	r3, [r9]
 80124fe:	fa1f fb87 	uxth.w	fp, r7
 8012502:	b29b      	uxth	r3, r3
 8012504:	fb0a 330b 	mla	r3, sl, fp, r3
 8012508:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801250c:	f8d9 7000 	ldr.w	r7, [r9]
 8012510:	4463      	add	r3, ip
 8012512:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012516:	fb0a c70b 	mla	r7, sl, fp, ip
 801251a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801251e:	b29b      	uxth	r3, r3
 8012520:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012524:	4572      	cmp	r2, lr
 8012526:	f849 3b04 	str.w	r3, [r9], #4
 801252a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801252e:	d8e2      	bhi.n	80124f6 <__multiply+0xb2>
 8012530:	9b01      	ldr	r3, [sp, #4]
 8012532:	f845 c003 	str.w	ip, [r5, r3]
 8012536:	9b03      	ldr	r3, [sp, #12]
 8012538:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801253c:	3104      	adds	r1, #4
 801253e:	f1b9 0f00 	cmp.w	r9, #0
 8012542:	d021      	beq.n	8012588 <__multiply+0x144>
 8012544:	682b      	ldr	r3, [r5, #0]
 8012546:	f104 0c14 	add.w	ip, r4, #20
 801254a:	46ae      	mov	lr, r5
 801254c:	f04f 0a00 	mov.w	sl, #0
 8012550:	f8bc b000 	ldrh.w	fp, [ip]
 8012554:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012558:	fb09 770b 	mla	r7, r9, fp, r7
 801255c:	4457      	add	r7, sl
 801255e:	b29b      	uxth	r3, r3
 8012560:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012564:	f84e 3b04 	str.w	r3, [lr], #4
 8012568:	f85c 3b04 	ldr.w	r3, [ip], #4
 801256c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012570:	f8be 3000 	ldrh.w	r3, [lr]
 8012574:	fb09 330a 	mla	r3, r9, sl, r3
 8012578:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801257c:	4562      	cmp	r2, ip
 801257e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012582:	d8e5      	bhi.n	8012550 <__multiply+0x10c>
 8012584:	9f01      	ldr	r7, [sp, #4]
 8012586:	51eb      	str	r3, [r5, r7]
 8012588:	3504      	adds	r5, #4
 801258a:	e799      	b.n	80124c0 <__multiply+0x7c>
 801258c:	3e01      	subs	r6, #1
 801258e:	e79b      	b.n	80124c8 <__multiply+0x84>
 8012590:	08014bbc 	.word	0x08014bbc
 8012594:	08014c55 	.word	0x08014c55

08012598 <__pow5mult>:
 8012598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801259c:	4615      	mov	r5, r2
 801259e:	f012 0203 	ands.w	r2, r2, #3
 80125a2:	4607      	mov	r7, r0
 80125a4:	460e      	mov	r6, r1
 80125a6:	d007      	beq.n	80125b8 <__pow5mult+0x20>
 80125a8:	4c1a      	ldr	r4, [pc, #104]	@ (8012614 <__pow5mult+0x7c>)
 80125aa:	3a01      	subs	r2, #1
 80125ac:	2300      	movs	r3, #0
 80125ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80125b2:	f7ff fe9f 	bl	80122f4 <__multadd>
 80125b6:	4606      	mov	r6, r0
 80125b8:	10ad      	asrs	r5, r5, #2
 80125ba:	d027      	beq.n	801260c <__pow5mult+0x74>
 80125bc:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80125be:	b944      	cbnz	r4, 80125d2 <__pow5mult+0x3a>
 80125c0:	f240 2171 	movw	r1, #625	@ 0x271
 80125c4:	4638      	mov	r0, r7
 80125c6:	f7ff ff27 	bl	8012418 <__i2b>
 80125ca:	2300      	movs	r3, #0
 80125cc:	6438      	str	r0, [r7, #64]	@ 0x40
 80125ce:	4604      	mov	r4, r0
 80125d0:	6003      	str	r3, [r0, #0]
 80125d2:	f04f 0900 	mov.w	r9, #0
 80125d6:	07eb      	lsls	r3, r5, #31
 80125d8:	d50a      	bpl.n	80125f0 <__pow5mult+0x58>
 80125da:	4631      	mov	r1, r6
 80125dc:	4622      	mov	r2, r4
 80125de:	4638      	mov	r0, r7
 80125e0:	f7ff ff30 	bl	8012444 <__multiply>
 80125e4:	4631      	mov	r1, r6
 80125e6:	4680      	mov	r8, r0
 80125e8:	4638      	mov	r0, r7
 80125ea:	f7ff fe7a 	bl	80122e2 <_Bfree>
 80125ee:	4646      	mov	r6, r8
 80125f0:	106d      	asrs	r5, r5, #1
 80125f2:	d00b      	beq.n	801260c <__pow5mult+0x74>
 80125f4:	6820      	ldr	r0, [r4, #0]
 80125f6:	b938      	cbnz	r0, 8012608 <__pow5mult+0x70>
 80125f8:	4622      	mov	r2, r4
 80125fa:	4621      	mov	r1, r4
 80125fc:	4638      	mov	r0, r7
 80125fe:	f7ff ff21 	bl	8012444 <__multiply>
 8012602:	6020      	str	r0, [r4, #0]
 8012604:	f8c0 9000 	str.w	r9, [r0]
 8012608:	4604      	mov	r4, r0
 801260a:	e7e4      	b.n	80125d6 <__pow5mult+0x3e>
 801260c:	4630      	mov	r0, r6
 801260e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012612:	bf00      	nop
 8012614:	08014cb0 	.word	0x08014cb0

08012618 <__lshift>:
 8012618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801261c:	460c      	mov	r4, r1
 801261e:	6849      	ldr	r1, [r1, #4]
 8012620:	6923      	ldr	r3, [r4, #16]
 8012622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012626:	68a3      	ldr	r3, [r4, #8]
 8012628:	4607      	mov	r7, r0
 801262a:	4691      	mov	r9, r2
 801262c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012630:	f108 0601 	add.w	r6, r8, #1
 8012634:	42b3      	cmp	r3, r6
 8012636:	db0b      	blt.n	8012650 <__lshift+0x38>
 8012638:	4638      	mov	r0, r7
 801263a:	f7ff fe2d 	bl	8012298 <_Balloc>
 801263e:	4605      	mov	r5, r0
 8012640:	b948      	cbnz	r0, 8012656 <__lshift+0x3e>
 8012642:	4602      	mov	r2, r0
 8012644:	4b28      	ldr	r3, [pc, #160]	@ (80126e8 <__lshift+0xd0>)
 8012646:	4829      	ldr	r0, [pc, #164]	@ (80126ec <__lshift+0xd4>)
 8012648:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801264c:	f000 fcc8 	bl	8012fe0 <__assert_func>
 8012650:	3101      	adds	r1, #1
 8012652:	005b      	lsls	r3, r3, #1
 8012654:	e7ee      	b.n	8012634 <__lshift+0x1c>
 8012656:	2300      	movs	r3, #0
 8012658:	f100 0114 	add.w	r1, r0, #20
 801265c:	f100 0210 	add.w	r2, r0, #16
 8012660:	4618      	mov	r0, r3
 8012662:	4553      	cmp	r3, sl
 8012664:	db33      	blt.n	80126ce <__lshift+0xb6>
 8012666:	6920      	ldr	r0, [r4, #16]
 8012668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801266c:	f104 0314 	add.w	r3, r4, #20
 8012670:	f019 091f 	ands.w	r9, r9, #31
 8012674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012678:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801267c:	d02b      	beq.n	80126d6 <__lshift+0xbe>
 801267e:	f1c9 0e20 	rsb	lr, r9, #32
 8012682:	468a      	mov	sl, r1
 8012684:	2200      	movs	r2, #0
 8012686:	6818      	ldr	r0, [r3, #0]
 8012688:	fa00 f009 	lsl.w	r0, r0, r9
 801268c:	4310      	orrs	r0, r2
 801268e:	f84a 0b04 	str.w	r0, [sl], #4
 8012692:	f853 2b04 	ldr.w	r2, [r3], #4
 8012696:	459c      	cmp	ip, r3
 8012698:	fa22 f20e 	lsr.w	r2, r2, lr
 801269c:	d8f3      	bhi.n	8012686 <__lshift+0x6e>
 801269e:	ebac 0304 	sub.w	r3, ip, r4
 80126a2:	3b15      	subs	r3, #21
 80126a4:	f023 0303 	bic.w	r3, r3, #3
 80126a8:	3304      	adds	r3, #4
 80126aa:	f104 0015 	add.w	r0, r4, #21
 80126ae:	4584      	cmp	ip, r0
 80126b0:	bf38      	it	cc
 80126b2:	2304      	movcc	r3, #4
 80126b4:	50ca      	str	r2, [r1, r3]
 80126b6:	b10a      	cbz	r2, 80126bc <__lshift+0xa4>
 80126b8:	f108 0602 	add.w	r6, r8, #2
 80126bc:	3e01      	subs	r6, #1
 80126be:	4638      	mov	r0, r7
 80126c0:	612e      	str	r6, [r5, #16]
 80126c2:	4621      	mov	r1, r4
 80126c4:	f7ff fe0d 	bl	80122e2 <_Bfree>
 80126c8:	4628      	mov	r0, r5
 80126ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80126d2:	3301      	adds	r3, #1
 80126d4:	e7c5      	b.n	8012662 <__lshift+0x4a>
 80126d6:	3904      	subs	r1, #4
 80126d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80126dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80126e0:	459c      	cmp	ip, r3
 80126e2:	d8f9      	bhi.n	80126d8 <__lshift+0xc0>
 80126e4:	e7ea      	b.n	80126bc <__lshift+0xa4>
 80126e6:	bf00      	nop
 80126e8:	08014bbc 	.word	0x08014bbc
 80126ec:	08014c55 	.word	0x08014c55

080126f0 <__mcmp>:
 80126f0:	690a      	ldr	r2, [r1, #16]
 80126f2:	4603      	mov	r3, r0
 80126f4:	6900      	ldr	r0, [r0, #16]
 80126f6:	1a80      	subs	r0, r0, r2
 80126f8:	b530      	push	{r4, r5, lr}
 80126fa:	d10e      	bne.n	801271a <__mcmp+0x2a>
 80126fc:	3314      	adds	r3, #20
 80126fe:	3114      	adds	r1, #20
 8012700:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012704:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012708:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801270c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012710:	4295      	cmp	r5, r2
 8012712:	d003      	beq.n	801271c <__mcmp+0x2c>
 8012714:	d205      	bcs.n	8012722 <__mcmp+0x32>
 8012716:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801271a:	bd30      	pop	{r4, r5, pc}
 801271c:	42a3      	cmp	r3, r4
 801271e:	d3f3      	bcc.n	8012708 <__mcmp+0x18>
 8012720:	e7fb      	b.n	801271a <__mcmp+0x2a>
 8012722:	2001      	movs	r0, #1
 8012724:	e7f9      	b.n	801271a <__mcmp+0x2a>
	...

08012728 <__mdiff>:
 8012728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801272c:	4689      	mov	r9, r1
 801272e:	4606      	mov	r6, r0
 8012730:	4611      	mov	r1, r2
 8012732:	4648      	mov	r0, r9
 8012734:	4614      	mov	r4, r2
 8012736:	f7ff ffdb 	bl	80126f0 <__mcmp>
 801273a:	1e05      	subs	r5, r0, #0
 801273c:	d112      	bne.n	8012764 <__mdiff+0x3c>
 801273e:	4629      	mov	r1, r5
 8012740:	4630      	mov	r0, r6
 8012742:	f7ff fda9 	bl	8012298 <_Balloc>
 8012746:	4602      	mov	r2, r0
 8012748:	b928      	cbnz	r0, 8012756 <__mdiff+0x2e>
 801274a:	4b3f      	ldr	r3, [pc, #252]	@ (8012848 <__mdiff+0x120>)
 801274c:	f240 2137 	movw	r1, #567	@ 0x237
 8012750:	483e      	ldr	r0, [pc, #248]	@ (801284c <__mdiff+0x124>)
 8012752:	f000 fc45 	bl	8012fe0 <__assert_func>
 8012756:	2301      	movs	r3, #1
 8012758:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801275c:	4610      	mov	r0, r2
 801275e:	b003      	add	sp, #12
 8012760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012764:	bfbc      	itt	lt
 8012766:	464b      	movlt	r3, r9
 8012768:	46a1      	movlt	r9, r4
 801276a:	4630      	mov	r0, r6
 801276c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012770:	bfba      	itte	lt
 8012772:	461c      	movlt	r4, r3
 8012774:	2501      	movlt	r5, #1
 8012776:	2500      	movge	r5, #0
 8012778:	f7ff fd8e 	bl	8012298 <_Balloc>
 801277c:	4602      	mov	r2, r0
 801277e:	b918      	cbnz	r0, 8012788 <__mdiff+0x60>
 8012780:	4b31      	ldr	r3, [pc, #196]	@ (8012848 <__mdiff+0x120>)
 8012782:	f240 2145 	movw	r1, #581	@ 0x245
 8012786:	e7e3      	b.n	8012750 <__mdiff+0x28>
 8012788:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801278c:	6926      	ldr	r6, [r4, #16]
 801278e:	60c5      	str	r5, [r0, #12]
 8012790:	f109 0310 	add.w	r3, r9, #16
 8012794:	f109 0514 	add.w	r5, r9, #20
 8012798:	f104 0e14 	add.w	lr, r4, #20
 801279c:	f100 0b14 	add.w	fp, r0, #20
 80127a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80127a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80127a8:	9301      	str	r3, [sp, #4]
 80127aa:	46d9      	mov	r9, fp
 80127ac:	f04f 0c00 	mov.w	ip, #0
 80127b0:	9b01      	ldr	r3, [sp, #4]
 80127b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80127b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80127ba:	9301      	str	r3, [sp, #4]
 80127bc:	fa1f f38a 	uxth.w	r3, sl
 80127c0:	4619      	mov	r1, r3
 80127c2:	b283      	uxth	r3, r0
 80127c4:	1acb      	subs	r3, r1, r3
 80127c6:	0c00      	lsrs	r0, r0, #16
 80127c8:	4463      	add	r3, ip
 80127ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80127ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80127d8:	4576      	cmp	r6, lr
 80127da:	f849 3b04 	str.w	r3, [r9], #4
 80127de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80127e2:	d8e5      	bhi.n	80127b0 <__mdiff+0x88>
 80127e4:	1b33      	subs	r3, r6, r4
 80127e6:	3b15      	subs	r3, #21
 80127e8:	f023 0303 	bic.w	r3, r3, #3
 80127ec:	3415      	adds	r4, #21
 80127ee:	3304      	adds	r3, #4
 80127f0:	42a6      	cmp	r6, r4
 80127f2:	bf38      	it	cc
 80127f4:	2304      	movcc	r3, #4
 80127f6:	441d      	add	r5, r3
 80127f8:	445b      	add	r3, fp
 80127fa:	461e      	mov	r6, r3
 80127fc:	462c      	mov	r4, r5
 80127fe:	4544      	cmp	r4, r8
 8012800:	d30e      	bcc.n	8012820 <__mdiff+0xf8>
 8012802:	f108 0103 	add.w	r1, r8, #3
 8012806:	1b49      	subs	r1, r1, r5
 8012808:	f021 0103 	bic.w	r1, r1, #3
 801280c:	3d03      	subs	r5, #3
 801280e:	45a8      	cmp	r8, r5
 8012810:	bf38      	it	cc
 8012812:	2100      	movcc	r1, #0
 8012814:	440b      	add	r3, r1
 8012816:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801281a:	b191      	cbz	r1, 8012842 <__mdiff+0x11a>
 801281c:	6117      	str	r7, [r2, #16]
 801281e:	e79d      	b.n	801275c <__mdiff+0x34>
 8012820:	f854 1b04 	ldr.w	r1, [r4], #4
 8012824:	46e6      	mov	lr, ip
 8012826:	0c08      	lsrs	r0, r1, #16
 8012828:	fa1c fc81 	uxtah	ip, ip, r1
 801282c:	4471      	add	r1, lr
 801282e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012832:	b289      	uxth	r1, r1
 8012834:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012838:	f846 1b04 	str.w	r1, [r6], #4
 801283c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012840:	e7dd      	b.n	80127fe <__mdiff+0xd6>
 8012842:	3f01      	subs	r7, #1
 8012844:	e7e7      	b.n	8012816 <__mdiff+0xee>
 8012846:	bf00      	nop
 8012848:	08014bbc 	.word	0x08014bbc
 801284c:	08014c55 	.word	0x08014c55

08012850 <__d2b>:
 8012850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012854:	460f      	mov	r7, r1
 8012856:	2101      	movs	r1, #1
 8012858:	ec59 8b10 	vmov	r8, r9, d0
 801285c:	4616      	mov	r6, r2
 801285e:	f7ff fd1b 	bl	8012298 <_Balloc>
 8012862:	4604      	mov	r4, r0
 8012864:	b930      	cbnz	r0, 8012874 <__d2b+0x24>
 8012866:	4602      	mov	r2, r0
 8012868:	4b23      	ldr	r3, [pc, #140]	@ (80128f8 <__d2b+0xa8>)
 801286a:	4824      	ldr	r0, [pc, #144]	@ (80128fc <__d2b+0xac>)
 801286c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012870:	f000 fbb6 	bl	8012fe0 <__assert_func>
 8012874:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012878:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801287c:	b10d      	cbz	r5, 8012882 <__d2b+0x32>
 801287e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012882:	9301      	str	r3, [sp, #4]
 8012884:	f1b8 0300 	subs.w	r3, r8, #0
 8012888:	d023      	beq.n	80128d2 <__d2b+0x82>
 801288a:	4668      	mov	r0, sp
 801288c:	9300      	str	r3, [sp, #0]
 801288e:	f7ff fd96 	bl	80123be <__lo0bits>
 8012892:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012896:	b1d0      	cbz	r0, 80128ce <__d2b+0x7e>
 8012898:	f1c0 0320 	rsb	r3, r0, #32
 801289c:	fa02 f303 	lsl.w	r3, r2, r3
 80128a0:	430b      	orrs	r3, r1
 80128a2:	40c2      	lsrs	r2, r0
 80128a4:	6163      	str	r3, [r4, #20]
 80128a6:	9201      	str	r2, [sp, #4]
 80128a8:	9b01      	ldr	r3, [sp, #4]
 80128aa:	61a3      	str	r3, [r4, #24]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	bf0c      	ite	eq
 80128b0:	2201      	moveq	r2, #1
 80128b2:	2202      	movne	r2, #2
 80128b4:	6122      	str	r2, [r4, #16]
 80128b6:	b1a5      	cbz	r5, 80128e2 <__d2b+0x92>
 80128b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80128bc:	4405      	add	r5, r0
 80128be:	603d      	str	r5, [r7, #0]
 80128c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80128c4:	6030      	str	r0, [r6, #0]
 80128c6:	4620      	mov	r0, r4
 80128c8:	b003      	add	sp, #12
 80128ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128ce:	6161      	str	r1, [r4, #20]
 80128d0:	e7ea      	b.n	80128a8 <__d2b+0x58>
 80128d2:	a801      	add	r0, sp, #4
 80128d4:	f7ff fd73 	bl	80123be <__lo0bits>
 80128d8:	9b01      	ldr	r3, [sp, #4]
 80128da:	6163      	str	r3, [r4, #20]
 80128dc:	3020      	adds	r0, #32
 80128de:	2201      	movs	r2, #1
 80128e0:	e7e8      	b.n	80128b4 <__d2b+0x64>
 80128e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80128ea:	6038      	str	r0, [r7, #0]
 80128ec:	6918      	ldr	r0, [r3, #16]
 80128ee:	f7ff fd47 	bl	8012380 <__hi0bits>
 80128f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80128f6:	e7e5      	b.n	80128c4 <__d2b+0x74>
 80128f8:	08014bbc 	.word	0x08014bbc
 80128fc:	08014c55 	.word	0x08014c55

08012900 <_fclose_r>:
 8012900:	b570      	push	{r4, r5, r6, lr}
 8012902:	4605      	mov	r5, r0
 8012904:	460c      	mov	r4, r1
 8012906:	b1b1      	cbz	r1, 8012936 <_fclose_r+0x36>
 8012908:	b118      	cbz	r0, 8012912 <_fclose_r+0x12>
 801290a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801290c:	b90b      	cbnz	r3, 8012912 <_fclose_r+0x12>
 801290e:	f7fc fe89 	bl	800f624 <__sinit>
 8012912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012914:	07de      	lsls	r6, r3, #31
 8012916:	d405      	bmi.n	8012924 <_fclose_r+0x24>
 8012918:	89a3      	ldrh	r3, [r4, #12]
 801291a:	0598      	lsls	r0, r3, #22
 801291c:	d402      	bmi.n	8012924 <_fclose_r+0x24>
 801291e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012920:	f7fd f92e 	bl	800fb80 <__retarget_lock_acquire_recursive>
 8012924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012928:	b943      	cbnz	r3, 801293c <_fclose_r+0x3c>
 801292a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801292c:	07d9      	lsls	r1, r3, #31
 801292e:	d402      	bmi.n	8012936 <_fclose_r+0x36>
 8012930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012932:	f7fd f926 	bl	800fb82 <__retarget_lock_release_recursive>
 8012936:	2600      	movs	r6, #0
 8012938:	4630      	mov	r0, r6
 801293a:	bd70      	pop	{r4, r5, r6, pc}
 801293c:	4621      	mov	r1, r4
 801293e:	4628      	mov	r0, r5
 8012940:	f7fc fd16 	bl	800f370 <__sflush_r>
 8012944:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012946:	4606      	mov	r6, r0
 8012948:	b133      	cbz	r3, 8012958 <_fclose_r+0x58>
 801294a:	69e1      	ldr	r1, [r4, #28]
 801294c:	4628      	mov	r0, r5
 801294e:	4798      	blx	r3
 8012950:	2800      	cmp	r0, #0
 8012952:	bfb8      	it	lt
 8012954:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8012958:	89a3      	ldrh	r3, [r4, #12]
 801295a:	061a      	lsls	r2, r3, #24
 801295c:	d503      	bpl.n	8012966 <_fclose_r+0x66>
 801295e:	6921      	ldr	r1, [r4, #16]
 8012960:	4628      	mov	r0, r5
 8012962:	f7fd ff99 	bl	8010898 <_free_r>
 8012966:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012968:	b141      	cbz	r1, 801297c <_fclose_r+0x7c>
 801296a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801296e:	4299      	cmp	r1, r3
 8012970:	d002      	beq.n	8012978 <_fclose_r+0x78>
 8012972:	4628      	mov	r0, r5
 8012974:	f7fd ff90 	bl	8010898 <_free_r>
 8012978:	2300      	movs	r3, #0
 801297a:	6323      	str	r3, [r4, #48]	@ 0x30
 801297c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801297e:	b121      	cbz	r1, 801298a <_fclose_r+0x8a>
 8012980:	4628      	mov	r0, r5
 8012982:	f7fd ff89 	bl	8010898 <_free_r>
 8012986:	2300      	movs	r3, #0
 8012988:	6463      	str	r3, [r4, #68]	@ 0x44
 801298a:	f7fc fe3f 	bl	800f60c <__sfp_lock_acquire>
 801298e:	2300      	movs	r3, #0
 8012990:	81a3      	strh	r3, [r4, #12]
 8012992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012994:	07db      	lsls	r3, r3, #31
 8012996:	d402      	bmi.n	801299e <_fclose_r+0x9e>
 8012998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801299a:	f7fd f8f2 	bl	800fb82 <__retarget_lock_release_recursive>
 801299e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80129a0:	f7fd f8ed 	bl	800fb7e <__retarget_lock_close_recursive>
 80129a4:	f7fc fe38 	bl	800f618 <__sfp_lock_release>
 80129a8:	e7c6      	b.n	8012938 <_fclose_r+0x38>
	...

080129ac <_realloc_r>:
 80129ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129b0:	4682      	mov	sl, r0
 80129b2:	4693      	mov	fp, r2
 80129b4:	460c      	mov	r4, r1
 80129b6:	b929      	cbnz	r1, 80129c4 <_realloc_r+0x18>
 80129b8:	4611      	mov	r1, r2
 80129ba:	b003      	add	sp, #12
 80129bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c0:	f7fe b82a 	b.w	8010a18 <_malloc_r>
 80129c4:	f7ff fc5c 	bl	8012280 <__malloc_lock>
 80129c8:	f10b 080b 	add.w	r8, fp, #11
 80129cc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80129d0:	f1b8 0f16 	cmp.w	r8, #22
 80129d4:	f1a4 0908 	sub.w	r9, r4, #8
 80129d8:	f025 0603 	bic.w	r6, r5, #3
 80129dc:	d908      	bls.n	80129f0 <_realloc_r+0x44>
 80129de:	f038 0807 	bics.w	r8, r8, #7
 80129e2:	d507      	bpl.n	80129f4 <_realloc_r+0x48>
 80129e4:	230c      	movs	r3, #12
 80129e6:	f8ca 3000 	str.w	r3, [sl]
 80129ea:	f04f 0b00 	mov.w	fp, #0
 80129ee:	e032      	b.n	8012a56 <_realloc_r+0xaa>
 80129f0:	f04f 0810 	mov.w	r8, #16
 80129f4:	45c3      	cmp	fp, r8
 80129f6:	d8f5      	bhi.n	80129e4 <_realloc_r+0x38>
 80129f8:	4546      	cmp	r6, r8
 80129fa:	f280 8174 	bge.w	8012ce6 <_realloc_r+0x33a>
 80129fe:	4b9e      	ldr	r3, [pc, #632]	@ (8012c78 <_realloc_r+0x2cc>)
 8012a00:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8012a04:	eb09 0106 	add.w	r1, r9, r6
 8012a08:	458c      	cmp	ip, r1
 8012a0a:	6848      	ldr	r0, [r1, #4]
 8012a0c:	d005      	beq.n	8012a1a <_realloc_r+0x6e>
 8012a0e:	f020 0201 	bic.w	r2, r0, #1
 8012a12:	440a      	add	r2, r1
 8012a14:	6852      	ldr	r2, [r2, #4]
 8012a16:	07d7      	lsls	r7, r2, #31
 8012a18:	d449      	bmi.n	8012aae <_realloc_r+0x102>
 8012a1a:	f020 0003 	bic.w	r0, r0, #3
 8012a1e:	458c      	cmp	ip, r1
 8012a20:	eb06 0700 	add.w	r7, r6, r0
 8012a24:	d11b      	bne.n	8012a5e <_realloc_r+0xb2>
 8012a26:	f108 0210 	add.w	r2, r8, #16
 8012a2a:	42ba      	cmp	r2, r7
 8012a2c:	dc41      	bgt.n	8012ab2 <_realloc_r+0x106>
 8012a2e:	eb09 0208 	add.w	r2, r9, r8
 8012a32:	eba7 0708 	sub.w	r7, r7, r8
 8012a36:	f047 0701 	orr.w	r7, r7, #1
 8012a3a:	609a      	str	r2, [r3, #8]
 8012a3c:	6057      	str	r7, [r2, #4]
 8012a3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012a42:	f003 0301 	and.w	r3, r3, #1
 8012a46:	ea43 0308 	orr.w	r3, r3, r8
 8012a4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8012a4e:	4650      	mov	r0, sl
 8012a50:	f7ff fc1c 	bl	801228c <__malloc_unlock>
 8012a54:	46a3      	mov	fp, r4
 8012a56:	4658      	mov	r0, fp
 8012a58:	b003      	add	sp, #12
 8012a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a5e:	45b8      	cmp	r8, r7
 8012a60:	dc27      	bgt.n	8012ab2 <_realloc_r+0x106>
 8012a62:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012a66:	60d3      	str	r3, [r2, #12]
 8012a68:	609a      	str	r2, [r3, #8]
 8012a6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012a6e:	eba7 0008 	sub.w	r0, r7, r8
 8012a72:	280f      	cmp	r0, #15
 8012a74:	f003 0301 	and.w	r3, r3, #1
 8012a78:	eb09 0207 	add.w	r2, r9, r7
 8012a7c:	f240 8135 	bls.w	8012cea <_realloc_r+0x33e>
 8012a80:	eb09 0108 	add.w	r1, r9, r8
 8012a84:	ea48 0303 	orr.w	r3, r8, r3
 8012a88:	f040 0001 	orr.w	r0, r0, #1
 8012a8c:	f8c9 3004 	str.w	r3, [r9, #4]
 8012a90:	6048      	str	r0, [r1, #4]
 8012a92:	6853      	ldr	r3, [r2, #4]
 8012a94:	f043 0301 	orr.w	r3, r3, #1
 8012a98:	6053      	str	r3, [r2, #4]
 8012a9a:	3108      	adds	r1, #8
 8012a9c:	4650      	mov	r0, sl
 8012a9e:	f7fd fefb 	bl	8010898 <_free_r>
 8012aa2:	4650      	mov	r0, sl
 8012aa4:	f7ff fbf2 	bl	801228c <__malloc_unlock>
 8012aa8:	f109 0b08 	add.w	fp, r9, #8
 8012aac:	e7d3      	b.n	8012a56 <_realloc_r+0xaa>
 8012aae:	2000      	movs	r0, #0
 8012ab0:	4601      	mov	r1, r0
 8012ab2:	07ea      	lsls	r2, r5, #31
 8012ab4:	f100 80c7 	bmi.w	8012c46 <_realloc_r+0x29a>
 8012ab8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8012abc:	eba9 0505 	sub.w	r5, r9, r5
 8012ac0:	686a      	ldr	r2, [r5, #4]
 8012ac2:	f022 0203 	bic.w	r2, r2, #3
 8012ac6:	4432      	add	r2, r6
 8012ac8:	9201      	str	r2, [sp, #4]
 8012aca:	2900      	cmp	r1, #0
 8012acc:	f000 8086 	beq.w	8012bdc <_realloc_r+0x230>
 8012ad0:	458c      	cmp	ip, r1
 8012ad2:	eb00 0702 	add.w	r7, r0, r2
 8012ad6:	d149      	bne.n	8012b6c <_realloc_r+0x1c0>
 8012ad8:	f108 0210 	add.w	r2, r8, #16
 8012adc:	42ba      	cmp	r2, r7
 8012ade:	dc7d      	bgt.n	8012bdc <_realloc_r+0x230>
 8012ae0:	46ab      	mov	fp, r5
 8012ae2:	68ea      	ldr	r2, [r5, #12]
 8012ae4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8012ae8:	60ca      	str	r2, [r1, #12]
 8012aea:	6091      	str	r1, [r2, #8]
 8012aec:	1f32      	subs	r2, r6, #4
 8012aee:	2a24      	cmp	r2, #36	@ 0x24
 8012af0:	d836      	bhi.n	8012b60 <_realloc_r+0x1b4>
 8012af2:	2a13      	cmp	r2, #19
 8012af4:	d932      	bls.n	8012b5c <_realloc_r+0x1b0>
 8012af6:	6821      	ldr	r1, [r4, #0]
 8012af8:	60a9      	str	r1, [r5, #8]
 8012afa:	6861      	ldr	r1, [r4, #4]
 8012afc:	60e9      	str	r1, [r5, #12]
 8012afe:	2a1b      	cmp	r2, #27
 8012b00:	d81a      	bhi.n	8012b38 <_realloc_r+0x18c>
 8012b02:	3408      	adds	r4, #8
 8012b04:	f105 0210 	add.w	r2, r5, #16
 8012b08:	6821      	ldr	r1, [r4, #0]
 8012b0a:	6011      	str	r1, [r2, #0]
 8012b0c:	6861      	ldr	r1, [r4, #4]
 8012b0e:	6051      	str	r1, [r2, #4]
 8012b10:	68a1      	ldr	r1, [r4, #8]
 8012b12:	6091      	str	r1, [r2, #8]
 8012b14:	eb05 0208 	add.w	r2, r5, r8
 8012b18:	eba7 0708 	sub.w	r7, r7, r8
 8012b1c:	f047 0701 	orr.w	r7, r7, #1
 8012b20:	609a      	str	r2, [r3, #8]
 8012b22:	6057      	str	r7, [r2, #4]
 8012b24:	686b      	ldr	r3, [r5, #4]
 8012b26:	f003 0301 	and.w	r3, r3, #1
 8012b2a:	ea43 0308 	orr.w	r3, r3, r8
 8012b2e:	606b      	str	r3, [r5, #4]
 8012b30:	4650      	mov	r0, sl
 8012b32:	f7ff fbab 	bl	801228c <__malloc_unlock>
 8012b36:	e78e      	b.n	8012a56 <_realloc_r+0xaa>
 8012b38:	68a1      	ldr	r1, [r4, #8]
 8012b3a:	6129      	str	r1, [r5, #16]
 8012b3c:	68e1      	ldr	r1, [r4, #12]
 8012b3e:	6169      	str	r1, [r5, #20]
 8012b40:	2a24      	cmp	r2, #36	@ 0x24
 8012b42:	bf01      	itttt	eq
 8012b44:	6922      	ldreq	r2, [r4, #16]
 8012b46:	61aa      	streq	r2, [r5, #24]
 8012b48:	6961      	ldreq	r1, [r4, #20]
 8012b4a:	61e9      	streq	r1, [r5, #28]
 8012b4c:	bf19      	ittee	ne
 8012b4e:	3410      	addne	r4, #16
 8012b50:	f105 0218 	addne.w	r2, r5, #24
 8012b54:	f105 0220 	addeq.w	r2, r5, #32
 8012b58:	3418      	addeq	r4, #24
 8012b5a:	e7d5      	b.n	8012b08 <_realloc_r+0x15c>
 8012b5c:	465a      	mov	r2, fp
 8012b5e:	e7d3      	b.n	8012b08 <_realloc_r+0x15c>
 8012b60:	4621      	mov	r1, r4
 8012b62:	4658      	mov	r0, fp
 8012b64:	f7fc ffa0 	bl	800faa8 <memmove>
 8012b68:	4b43      	ldr	r3, [pc, #268]	@ (8012c78 <_realloc_r+0x2cc>)
 8012b6a:	e7d3      	b.n	8012b14 <_realloc_r+0x168>
 8012b6c:	45b8      	cmp	r8, r7
 8012b6e:	dc35      	bgt.n	8012bdc <_realloc_r+0x230>
 8012b70:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8012b74:	4628      	mov	r0, r5
 8012b76:	60d3      	str	r3, [r2, #12]
 8012b78:	609a      	str	r2, [r3, #8]
 8012b7a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8012b7e:	68eb      	ldr	r3, [r5, #12]
 8012b80:	60d3      	str	r3, [r2, #12]
 8012b82:	609a      	str	r2, [r3, #8]
 8012b84:	1f32      	subs	r2, r6, #4
 8012b86:	2a24      	cmp	r2, #36	@ 0x24
 8012b88:	d824      	bhi.n	8012bd4 <_realloc_r+0x228>
 8012b8a:	2a13      	cmp	r2, #19
 8012b8c:	d908      	bls.n	8012ba0 <_realloc_r+0x1f4>
 8012b8e:	6823      	ldr	r3, [r4, #0]
 8012b90:	60ab      	str	r3, [r5, #8]
 8012b92:	6863      	ldr	r3, [r4, #4]
 8012b94:	60eb      	str	r3, [r5, #12]
 8012b96:	2a1b      	cmp	r2, #27
 8012b98:	d80a      	bhi.n	8012bb0 <_realloc_r+0x204>
 8012b9a:	3408      	adds	r4, #8
 8012b9c:	f105 0010 	add.w	r0, r5, #16
 8012ba0:	6823      	ldr	r3, [r4, #0]
 8012ba2:	6003      	str	r3, [r0, #0]
 8012ba4:	6863      	ldr	r3, [r4, #4]
 8012ba6:	6043      	str	r3, [r0, #4]
 8012ba8:	68a3      	ldr	r3, [r4, #8]
 8012baa:	6083      	str	r3, [r0, #8]
 8012bac:	46a9      	mov	r9, r5
 8012bae:	e75c      	b.n	8012a6a <_realloc_r+0xbe>
 8012bb0:	68a3      	ldr	r3, [r4, #8]
 8012bb2:	612b      	str	r3, [r5, #16]
 8012bb4:	68e3      	ldr	r3, [r4, #12]
 8012bb6:	616b      	str	r3, [r5, #20]
 8012bb8:	2a24      	cmp	r2, #36	@ 0x24
 8012bba:	bf01      	itttt	eq
 8012bbc:	6923      	ldreq	r3, [r4, #16]
 8012bbe:	61ab      	streq	r3, [r5, #24]
 8012bc0:	6963      	ldreq	r3, [r4, #20]
 8012bc2:	61eb      	streq	r3, [r5, #28]
 8012bc4:	bf19      	ittee	ne
 8012bc6:	3410      	addne	r4, #16
 8012bc8:	f105 0018 	addne.w	r0, r5, #24
 8012bcc:	f105 0020 	addeq.w	r0, r5, #32
 8012bd0:	3418      	addeq	r4, #24
 8012bd2:	e7e5      	b.n	8012ba0 <_realloc_r+0x1f4>
 8012bd4:	4621      	mov	r1, r4
 8012bd6:	f7fc ff67 	bl	800faa8 <memmove>
 8012bda:	e7e7      	b.n	8012bac <_realloc_r+0x200>
 8012bdc:	9b01      	ldr	r3, [sp, #4]
 8012bde:	4598      	cmp	r8, r3
 8012be0:	dc31      	bgt.n	8012c46 <_realloc_r+0x29a>
 8012be2:	4628      	mov	r0, r5
 8012be4:	68eb      	ldr	r3, [r5, #12]
 8012be6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8012bea:	60d3      	str	r3, [r2, #12]
 8012bec:	609a      	str	r2, [r3, #8]
 8012bee:	1f32      	subs	r2, r6, #4
 8012bf0:	2a24      	cmp	r2, #36	@ 0x24
 8012bf2:	d824      	bhi.n	8012c3e <_realloc_r+0x292>
 8012bf4:	2a13      	cmp	r2, #19
 8012bf6:	d908      	bls.n	8012c0a <_realloc_r+0x25e>
 8012bf8:	6823      	ldr	r3, [r4, #0]
 8012bfa:	60ab      	str	r3, [r5, #8]
 8012bfc:	6863      	ldr	r3, [r4, #4]
 8012bfe:	60eb      	str	r3, [r5, #12]
 8012c00:	2a1b      	cmp	r2, #27
 8012c02:	d80a      	bhi.n	8012c1a <_realloc_r+0x26e>
 8012c04:	3408      	adds	r4, #8
 8012c06:	f105 0010 	add.w	r0, r5, #16
 8012c0a:	6823      	ldr	r3, [r4, #0]
 8012c0c:	6003      	str	r3, [r0, #0]
 8012c0e:	6863      	ldr	r3, [r4, #4]
 8012c10:	6043      	str	r3, [r0, #4]
 8012c12:	68a3      	ldr	r3, [r4, #8]
 8012c14:	6083      	str	r3, [r0, #8]
 8012c16:	9f01      	ldr	r7, [sp, #4]
 8012c18:	e7c8      	b.n	8012bac <_realloc_r+0x200>
 8012c1a:	68a3      	ldr	r3, [r4, #8]
 8012c1c:	612b      	str	r3, [r5, #16]
 8012c1e:	68e3      	ldr	r3, [r4, #12]
 8012c20:	616b      	str	r3, [r5, #20]
 8012c22:	2a24      	cmp	r2, #36	@ 0x24
 8012c24:	bf01      	itttt	eq
 8012c26:	6923      	ldreq	r3, [r4, #16]
 8012c28:	61ab      	streq	r3, [r5, #24]
 8012c2a:	6963      	ldreq	r3, [r4, #20]
 8012c2c:	61eb      	streq	r3, [r5, #28]
 8012c2e:	bf19      	ittee	ne
 8012c30:	3410      	addne	r4, #16
 8012c32:	f105 0018 	addne.w	r0, r5, #24
 8012c36:	f105 0020 	addeq.w	r0, r5, #32
 8012c3a:	3418      	addeq	r4, #24
 8012c3c:	e7e5      	b.n	8012c0a <_realloc_r+0x25e>
 8012c3e:	4621      	mov	r1, r4
 8012c40:	f7fc ff32 	bl	800faa8 <memmove>
 8012c44:	e7e7      	b.n	8012c16 <_realloc_r+0x26a>
 8012c46:	4659      	mov	r1, fp
 8012c48:	4650      	mov	r0, sl
 8012c4a:	f7fd fee5 	bl	8010a18 <_malloc_r>
 8012c4e:	4683      	mov	fp, r0
 8012c50:	b918      	cbnz	r0, 8012c5a <_realloc_r+0x2ae>
 8012c52:	4650      	mov	r0, sl
 8012c54:	f7ff fb1a 	bl	801228c <__malloc_unlock>
 8012c58:	e6c7      	b.n	80129ea <_realloc_r+0x3e>
 8012c5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012c5e:	f023 0301 	bic.w	r3, r3, #1
 8012c62:	444b      	add	r3, r9
 8012c64:	f1a0 0208 	sub.w	r2, r0, #8
 8012c68:	4293      	cmp	r3, r2
 8012c6a:	d107      	bne.n	8012c7c <_realloc_r+0x2d0>
 8012c6c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8012c70:	f027 0703 	bic.w	r7, r7, #3
 8012c74:	4437      	add	r7, r6
 8012c76:	e6f8      	b.n	8012a6a <_realloc_r+0xbe>
 8012c78:	240002bc 	.word	0x240002bc
 8012c7c:	1f32      	subs	r2, r6, #4
 8012c7e:	2a24      	cmp	r2, #36	@ 0x24
 8012c80:	d82d      	bhi.n	8012cde <_realloc_r+0x332>
 8012c82:	2a13      	cmp	r2, #19
 8012c84:	d928      	bls.n	8012cd8 <_realloc_r+0x32c>
 8012c86:	6823      	ldr	r3, [r4, #0]
 8012c88:	6003      	str	r3, [r0, #0]
 8012c8a:	6863      	ldr	r3, [r4, #4]
 8012c8c:	6043      	str	r3, [r0, #4]
 8012c8e:	2a1b      	cmp	r2, #27
 8012c90:	d80e      	bhi.n	8012cb0 <_realloc_r+0x304>
 8012c92:	f104 0208 	add.w	r2, r4, #8
 8012c96:	f100 0308 	add.w	r3, r0, #8
 8012c9a:	6811      	ldr	r1, [r2, #0]
 8012c9c:	6019      	str	r1, [r3, #0]
 8012c9e:	6851      	ldr	r1, [r2, #4]
 8012ca0:	6059      	str	r1, [r3, #4]
 8012ca2:	6892      	ldr	r2, [r2, #8]
 8012ca4:	609a      	str	r2, [r3, #8]
 8012ca6:	4621      	mov	r1, r4
 8012ca8:	4650      	mov	r0, sl
 8012caa:	f7fd fdf5 	bl	8010898 <_free_r>
 8012cae:	e73f      	b.n	8012b30 <_realloc_r+0x184>
 8012cb0:	68a3      	ldr	r3, [r4, #8]
 8012cb2:	6083      	str	r3, [r0, #8]
 8012cb4:	68e3      	ldr	r3, [r4, #12]
 8012cb6:	60c3      	str	r3, [r0, #12]
 8012cb8:	2a24      	cmp	r2, #36	@ 0x24
 8012cba:	bf01      	itttt	eq
 8012cbc:	6923      	ldreq	r3, [r4, #16]
 8012cbe:	6103      	streq	r3, [r0, #16]
 8012cc0:	6961      	ldreq	r1, [r4, #20]
 8012cc2:	6141      	streq	r1, [r0, #20]
 8012cc4:	bf19      	ittee	ne
 8012cc6:	f104 0210 	addne.w	r2, r4, #16
 8012cca:	f100 0310 	addne.w	r3, r0, #16
 8012cce:	f104 0218 	addeq.w	r2, r4, #24
 8012cd2:	f100 0318 	addeq.w	r3, r0, #24
 8012cd6:	e7e0      	b.n	8012c9a <_realloc_r+0x2ee>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	4622      	mov	r2, r4
 8012cdc:	e7dd      	b.n	8012c9a <_realloc_r+0x2ee>
 8012cde:	4621      	mov	r1, r4
 8012ce0:	f7fc fee2 	bl	800faa8 <memmove>
 8012ce4:	e7df      	b.n	8012ca6 <_realloc_r+0x2fa>
 8012ce6:	4637      	mov	r7, r6
 8012ce8:	e6bf      	b.n	8012a6a <_realloc_r+0xbe>
 8012cea:	431f      	orrs	r7, r3
 8012cec:	f8c9 7004 	str.w	r7, [r9, #4]
 8012cf0:	6853      	ldr	r3, [r2, #4]
 8012cf2:	f043 0301 	orr.w	r3, r3, #1
 8012cf6:	6053      	str	r3, [r2, #4]
 8012cf8:	e6d3      	b.n	8012aa2 <_realloc_r+0xf6>
 8012cfa:	bf00      	nop

08012cfc <__sread>:
 8012cfc:	b510      	push	{r4, lr}
 8012cfe:	460c      	mov	r4, r1
 8012d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d04:	f000 f8d8 	bl	8012eb8 <_read_r>
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	bfab      	itete	ge
 8012d0c:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8012d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8012d10:	181b      	addge	r3, r3, r0
 8012d12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012d16:	bfac      	ite	ge
 8012d18:	6523      	strge	r3, [r4, #80]	@ 0x50
 8012d1a:	81a3      	strhlt	r3, [r4, #12]
 8012d1c:	bd10      	pop	{r4, pc}

08012d1e <__swrite>:
 8012d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d22:	461f      	mov	r7, r3
 8012d24:	898b      	ldrh	r3, [r1, #12]
 8012d26:	05db      	lsls	r3, r3, #23
 8012d28:	4605      	mov	r5, r0
 8012d2a:	460c      	mov	r4, r1
 8012d2c:	4616      	mov	r6, r2
 8012d2e:	d505      	bpl.n	8012d3c <__swrite+0x1e>
 8012d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d34:	2302      	movs	r3, #2
 8012d36:	2200      	movs	r2, #0
 8012d38:	f000 f8ac 	bl	8012e94 <_lseek_r>
 8012d3c:	89a3      	ldrh	r3, [r4, #12]
 8012d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012d46:	81a3      	strh	r3, [r4, #12]
 8012d48:	4632      	mov	r2, r6
 8012d4a:	463b      	mov	r3, r7
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d52:	f000 b8d3 	b.w	8012efc <_write_r>

08012d56 <__sseek>:
 8012d56:	b510      	push	{r4, lr}
 8012d58:	460c      	mov	r4, r1
 8012d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d5e:	f000 f899 	bl	8012e94 <_lseek_r>
 8012d62:	1c43      	adds	r3, r0, #1
 8012d64:	89a3      	ldrh	r3, [r4, #12]
 8012d66:	bf15      	itete	ne
 8012d68:	6520      	strne	r0, [r4, #80]	@ 0x50
 8012d6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012d6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012d72:	81a3      	strheq	r3, [r4, #12]
 8012d74:	bf18      	it	ne
 8012d76:	81a3      	strhne	r3, [r4, #12]
 8012d78:	bd10      	pop	{r4, pc}

08012d7a <__sclose>:
 8012d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d7e:	f000 b857 	b.w	8012e30 <_close_r>

08012d82 <__ascii_wctomb>:
 8012d82:	4603      	mov	r3, r0
 8012d84:	4608      	mov	r0, r1
 8012d86:	b141      	cbz	r1, 8012d9a <__ascii_wctomb+0x18>
 8012d88:	2aff      	cmp	r2, #255	@ 0xff
 8012d8a:	d904      	bls.n	8012d96 <__ascii_wctomb+0x14>
 8012d8c:	228a      	movs	r2, #138	@ 0x8a
 8012d8e:	601a      	str	r2, [r3, #0]
 8012d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d94:	4770      	bx	lr
 8012d96:	700a      	strb	r2, [r1, #0]
 8012d98:	2001      	movs	r0, #1
 8012d9a:	4770      	bx	lr

08012d9c <__swbuf_r>:
 8012d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d9e:	460e      	mov	r6, r1
 8012da0:	4614      	mov	r4, r2
 8012da2:	4605      	mov	r5, r0
 8012da4:	b118      	cbz	r0, 8012dae <__swbuf_r+0x12>
 8012da6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8012da8:	b90b      	cbnz	r3, 8012dae <__swbuf_r+0x12>
 8012daa:	f7fc fc3b 	bl	800f624 <__sinit>
 8012dae:	69a3      	ldr	r3, [r4, #24]
 8012db0:	60a3      	str	r3, [r4, #8]
 8012db2:	89a3      	ldrh	r3, [r4, #12]
 8012db4:	0719      	lsls	r1, r3, #28
 8012db6:	d501      	bpl.n	8012dbc <__swbuf_r+0x20>
 8012db8:	6923      	ldr	r3, [r4, #16]
 8012dba:	b943      	cbnz	r3, 8012dce <__swbuf_r+0x32>
 8012dbc:	4621      	mov	r1, r4
 8012dbe:	4628      	mov	r0, r5
 8012dc0:	f7fc fdb2 	bl	800f928 <__swsetup_r>
 8012dc4:	b118      	cbz	r0, 8012dce <__swbuf_r+0x32>
 8012dc6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012dca:	4638      	mov	r0, r7
 8012dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dd2:	b2f6      	uxtb	r6, r6
 8012dd4:	049a      	lsls	r2, r3, #18
 8012dd6:	4637      	mov	r7, r6
 8012dd8:	d406      	bmi.n	8012de8 <__swbuf_r+0x4c>
 8012dda:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012dde:	81a3      	strh	r3, [r4, #12]
 8012de0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012de2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8012de6:	6663      	str	r3, [r4, #100]	@ 0x64
 8012de8:	6823      	ldr	r3, [r4, #0]
 8012dea:	6922      	ldr	r2, [r4, #16]
 8012dec:	1a98      	subs	r0, r3, r2
 8012dee:	6963      	ldr	r3, [r4, #20]
 8012df0:	4283      	cmp	r3, r0
 8012df2:	dc05      	bgt.n	8012e00 <__swbuf_r+0x64>
 8012df4:	4621      	mov	r1, r4
 8012df6:	4628      	mov	r0, r5
 8012df8:	f7fc fb42 	bl	800f480 <_fflush_r>
 8012dfc:	2800      	cmp	r0, #0
 8012dfe:	d1e2      	bne.n	8012dc6 <__swbuf_r+0x2a>
 8012e00:	68a3      	ldr	r3, [r4, #8]
 8012e02:	3b01      	subs	r3, #1
 8012e04:	60a3      	str	r3, [r4, #8]
 8012e06:	6823      	ldr	r3, [r4, #0]
 8012e08:	1c5a      	adds	r2, r3, #1
 8012e0a:	6022      	str	r2, [r4, #0]
 8012e0c:	701e      	strb	r6, [r3, #0]
 8012e0e:	6962      	ldr	r2, [r4, #20]
 8012e10:	1c43      	adds	r3, r0, #1
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d004      	beq.n	8012e20 <__swbuf_r+0x84>
 8012e16:	89a3      	ldrh	r3, [r4, #12]
 8012e18:	07db      	lsls	r3, r3, #31
 8012e1a:	d5d6      	bpl.n	8012dca <__swbuf_r+0x2e>
 8012e1c:	2e0a      	cmp	r6, #10
 8012e1e:	d1d4      	bne.n	8012dca <__swbuf_r+0x2e>
 8012e20:	4621      	mov	r1, r4
 8012e22:	4628      	mov	r0, r5
 8012e24:	f7fc fb2c 	bl	800f480 <_fflush_r>
 8012e28:	2800      	cmp	r0, #0
 8012e2a:	d0ce      	beq.n	8012dca <__swbuf_r+0x2e>
 8012e2c:	e7cb      	b.n	8012dc6 <__swbuf_r+0x2a>
	...

08012e30 <_close_r>:
 8012e30:	b538      	push	{r3, r4, r5, lr}
 8012e32:	4d06      	ldr	r5, [pc, #24]	@ (8012e4c <_close_r+0x1c>)
 8012e34:	2300      	movs	r3, #0
 8012e36:	4604      	mov	r4, r0
 8012e38:	4608      	mov	r0, r1
 8012e3a:	602b      	str	r3, [r5, #0]
 8012e3c:	f7ef fcd8 	bl	80027f0 <_close>
 8012e40:	1c43      	adds	r3, r0, #1
 8012e42:	d102      	bne.n	8012e4a <_close_r+0x1a>
 8012e44:	682b      	ldr	r3, [r5, #0]
 8012e46:	b103      	cbz	r3, 8012e4a <_close_r+0x1a>
 8012e48:	6023      	str	r3, [r4, #0]
 8012e4a:	bd38      	pop	{r3, r4, r5, pc}
 8012e4c:	24015388 	.word	0x24015388

08012e50 <_fstat_r>:
 8012e50:	b538      	push	{r3, r4, r5, lr}
 8012e52:	4d07      	ldr	r5, [pc, #28]	@ (8012e70 <_fstat_r+0x20>)
 8012e54:	2300      	movs	r3, #0
 8012e56:	4604      	mov	r4, r0
 8012e58:	4608      	mov	r0, r1
 8012e5a:	4611      	mov	r1, r2
 8012e5c:	602b      	str	r3, [r5, #0]
 8012e5e:	f7ef fcd3 	bl	8002808 <_fstat>
 8012e62:	1c43      	adds	r3, r0, #1
 8012e64:	d102      	bne.n	8012e6c <_fstat_r+0x1c>
 8012e66:	682b      	ldr	r3, [r5, #0]
 8012e68:	b103      	cbz	r3, 8012e6c <_fstat_r+0x1c>
 8012e6a:	6023      	str	r3, [r4, #0]
 8012e6c:	bd38      	pop	{r3, r4, r5, pc}
 8012e6e:	bf00      	nop
 8012e70:	24015388 	.word	0x24015388

08012e74 <_isatty_r>:
 8012e74:	b538      	push	{r3, r4, r5, lr}
 8012e76:	4d06      	ldr	r5, [pc, #24]	@ (8012e90 <_isatty_r+0x1c>)
 8012e78:	2300      	movs	r3, #0
 8012e7a:	4604      	mov	r4, r0
 8012e7c:	4608      	mov	r0, r1
 8012e7e:	602b      	str	r3, [r5, #0]
 8012e80:	f7ef fcd2 	bl	8002828 <_isatty>
 8012e84:	1c43      	adds	r3, r0, #1
 8012e86:	d102      	bne.n	8012e8e <_isatty_r+0x1a>
 8012e88:	682b      	ldr	r3, [r5, #0]
 8012e8a:	b103      	cbz	r3, 8012e8e <_isatty_r+0x1a>
 8012e8c:	6023      	str	r3, [r4, #0]
 8012e8e:	bd38      	pop	{r3, r4, r5, pc}
 8012e90:	24015388 	.word	0x24015388

08012e94 <_lseek_r>:
 8012e94:	b538      	push	{r3, r4, r5, lr}
 8012e96:	4d07      	ldr	r5, [pc, #28]	@ (8012eb4 <_lseek_r+0x20>)
 8012e98:	4604      	mov	r4, r0
 8012e9a:	4608      	mov	r0, r1
 8012e9c:	4611      	mov	r1, r2
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	602a      	str	r2, [r5, #0]
 8012ea2:	461a      	mov	r2, r3
 8012ea4:	f7ef fccb 	bl	800283e <_lseek>
 8012ea8:	1c43      	adds	r3, r0, #1
 8012eaa:	d102      	bne.n	8012eb2 <_lseek_r+0x1e>
 8012eac:	682b      	ldr	r3, [r5, #0]
 8012eae:	b103      	cbz	r3, 8012eb2 <_lseek_r+0x1e>
 8012eb0:	6023      	str	r3, [r4, #0]
 8012eb2:	bd38      	pop	{r3, r4, r5, pc}
 8012eb4:	24015388 	.word	0x24015388

08012eb8 <_read_r>:
 8012eb8:	b538      	push	{r3, r4, r5, lr}
 8012eba:	4d07      	ldr	r5, [pc, #28]	@ (8012ed8 <_read_r+0x20>)
 8012ebc:	4604      	mov	r4, r0
 8012ebe:	4608      	mov	r0, r1
 8012ec0:	4611      	mov	r1, r2
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	602a      	str	r2, [r5, #0]
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	f7ef fc59 	bl	800277e <_read>
 8012ecc:	1c43      	adds	r3, r0, #1
 8012ece:	d102      	bne.n	8012ed6 <_read_r+0x1e>
 8012ed0:	682b      	ldr	r3, [r5, #0]
 8012ed2:	b103      	cbz	r3, 8012ed6 <_read_r+0x1e>
 8012ed4:	6023      	str	r3, [r4, #0]
 8012ed6:	bd38      	pop	{r3, r4, r5, pc}
 8012ed8:	24015388 	.word	0x24015388

08012edc <_sbrk_r>:
 8012edc:	b538      	push	{r3, r4, r5, lr}
 8012ede:	4d06      	ldr	r5, [pc, #24]	@ (8012ef8 <_sbrk_r+0x1c>)
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	4608      	mov	r0, r1
 8012ee6:	602b      	str	r3, [r5, #0]
 8012ee8:	f7ef fcb6 	bl	8002858 <_sbrk>
 8012eec:	1c43      	adds	r3, r0, #1
 8012eee:	d102      	bne.n	8012ef6 <_sbrk_r+0x1a>
 8012ef0:	682b      	ldr	r3, [r5, #0]
 8012ef2:	b103      	cbz	r3, 8012ef6 <_sbrk_r+0x1a>
 8012ef4:	6023      	str	r3, [r4, #0]
 8012ef6:	bd38      	pop	{r3, r4, r5, pc}
 8012ef8:	24015388 	.word	0x24015388

08012efc <_write_r>:
 8012efc:	b538      	push	{r3, r4, r5, lr}
 8012efe:	4d07      	ldr	r5, [pc, #28]	@ (8012f1c <_write_r+0x20>)
 8012f00:	4604      	mov	r4, r0
 8012f02:	4608      	mov	r0, r1
 8012f04:	4611      	mov	r1, r2
 8012f06:	2200      	movs	r2, #0
 8012f08:	602a      	str	r2, [r5, #0]
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	f7ef fc54 	bl	80027b8 <_write>
 8012f10:	1c43      	adds	r3, r0, #1
 8012f12:	d102      	bne.n	8012f1a <_write_r+0x1e>
 8012f14:	682b      	ldr	r3, [r5, #0]
 8012f16:	b103      	cbz	r3, 8012f1a <_write_r+0x1e>
 8012f18:	6023      	str	r3, [r4, #0]
 8012f1a:	bd38      	pop	{r3, r4, r5, pc}
 8012f1c:	24015388 	.word	0x24015388

08012f20 <sysconf>:
 8012f20:	2808      	cmp	r0, #8
 8012f22:	b508      	push	{r3, lr}
 8012f24:	d006      	beq.n	8012f34 <sysconf+0x14>
 8012f26:	f7fc fdff 	bl	800fb28 <__errno>
 8012f2a:	2316      	movs	r3, #22
 8012f2c:	6003      	str	r3, [r0, #0]
 8012f2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f32:	bd08      	pop	{r3, pc}
 8012f34:	2080      	movs	r0, #128	@ 0x80
 8012f36:	e7fc      	b.n	8012f32 <sysconf+0x12>

08012f38 <__libc_fini_array>:
 8012f38:	b538      	push	{r3, r4, r5, lr}
 8012f3a:	4d07      	ldr	r5, [pc, #28]	@ (8012f58 <__libc_fini_array+0x20>)
 8012f3c:	4c07      	ldr	r4, [pc, #28]	@ (8012f5c <__libc_fini_array+0x24>)
 8012f3e:	1b64      	subs	r4, r4, r5
 8012f40:	10a4      	asrs	r4, r4, #2
 8012f42:	b91c      	cbnz	r4, 8012f4c <__libc_fini_array+0x14>
 8012f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f48:	f001 bc8e 	b.w	8014868 <_fini>
 8012f4c:	3c01      	subs	r4, #1
 8012f4e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8012f52:	4798      	blx	r3
 8012f54:	e7f5      	b.n	8012f42 <__libc_fini_array+0xa>
 8012f56:	bf00      	nop
 8012f58:	08017120 	.word	0x08017120
 8012f5c:	08017124 	.word	0x08017124

08012f60 <__register_exitproc>:
 8012f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f64:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8012fdc <__register_exitproc+0x7c>
 8012f68:	4606      	mov	r6, r0
 8012f6a:	f8da 0000 	ldr.w	r0, [sl]
 8012f6e:	4698      	mov	r8, r3
 8012f70:	460f      	mov	r7, r1
 8012f72:	4691      	mov	r9, r2
 8012f74:	f7fc fe04 	bl	800fb80 <__retarget_lock_acquire_recursive>
 8012f78:	4b16      	ldr	r3, [pc, #88]	@ (8012fd4 <__register_exitproc+0x74>)
 8012f7a:	681c      	ldr	r4, [r3, #0]
 8012f7c:	b90c      	cbnz	r4, 8012f82 <__register_exitproc+0x22>
 8012f7e:	4c16      	ldr	r4, [pc, #88]	@ (8012fd8 <__register_exitproc+0x78>)
 8012f80:	601c      	str	r4, [r3, #0]
 8012f82:	6865      	ldr	r5, [r4, #4]
 8012f84:	f8da 0000 	ldr.w	r0, [sl]
 8012f88:	2d1f      	cmp	r5, #31
 8012f8a:	dd05      	ble.n	8012f98 <__register_exitproc+0x38>
 8012f8c:	f7fc fdf9 	bl	800fb82 <__retarget_lock_release_recursive>
 8012f90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f98:	b19e      	cbz	r6, 8012fc2 <__register_exitproc+0x62>
 8012f9a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8012f9e:	2201      	movs	r2, #1
 8012fa0:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8012fa4:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8012fa8:	40aa      	lsls	r2, r5
 8012faa:	4313      	orrs	r3, r2
 8012fac:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8012fb0:	2e02      	cmp	r6, #2
 8012fb2:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8012fb6:	bf02      	ittt	eq
 8012fb8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8012fbc:	4313      	orreq	r3, r2
 8012fbe:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8012fc2:	1c6b      	adds	r3, r5, #1
 8012fc4:	3502      	adds	r5, #2
 8012fc6:	6063      	str	r3, [r4, #4]
 8012fc8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8012fcc:	f7fc fdd9 	bl	800fb82 <__retarget_lock_release_recursive>
 8012fd0:	2000      	movs	r0, #0
 8012fd2:	e7df      	b.n	8012f94 <__register_exitproc+0x34>
 8012fd4:	24015350 	.word	0x24015350
 8012fd8:	2401538c 	.word	0x2401538c
 8012fdc:	240002b0 	.word	0x240002b0

08012fe0 <__assert_func>:
 8012fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fe2:	4614      	mov	r4, r2
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	4b09      	ldr	r3, [pc, #36]	@ (801300c <__assert_func+0x2c>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	4605      	mov	r5, r0
 8012fec:	68d8      	ldr	r0, [r3, #12]
 8012fee:	b954      	cbnz	r4, 8013006 <__assert_func+0x26>
 8012ff0:	4b07      	ldr	r3, [pc, #28]	@ (8013010 <__assert_func+0x30>)
 8012ff2:	461c      	mov	r4, r3
 8012ff4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ff8:	9100      	str	r1, [sp, #0]
 8012ffa:	462b      	mov	r3, r5
 8012ffc:	4905      	ldr	r1, [pc, #20]	@ (8013014 <__assert_func+0x34>)
 8012ffe:	f000 f843 	bl	8013088 <fiprintf>
 8013002:	f000 f8d0 	bl	80131a6 <abort>
 8013006:	4b04      	ldr	r3, [pc, #16]	@ (8013018 <__assert_func+0x38>)
 8013008:	e7f4      	b.n	8012ff4 <__assert_func+0x14>
 801300a:	bf00      	nop
 801300c:	24000188 	.word	0x24000188
 8013010:	08014deb 	.word	0x08014deb
 8013014:	08014dbd 	.word	0x08014dbd
 8013018:	08014db0 	.word	0x08014db0

0801301c <_calloc_r>:
 801301c:	b538      	push	{r3, r4, r5, lr}
 801301e:	fba1 1502 	umull	r1, r5, r1, r2
 8013022:	b935      	cbnz	r5, 8013032 <_calloc_r+0x16>
 8013024:	f7fd fcf8 	bl	8010a18 <_malloc_r>
 8013028:	4604      	mov	r4, r0
 801302a:	b938      	cbnz	r0, 801303c <_calloc_r+0x20>
 801302c:	2400      	movs	r4, #0
 801302e:	4620      	mov	r0, r4
 8013030:	bd38      	pop	{r3, r4, r5, pc}
 8013032:	f7fc fd79 	bl	800fb28 <__errno>
 8013036:	230c      	movs	r3, #12
 8013038:	6003      	str	r3, [r0, #0]
 801303a:	e7f7      	b.n	801302c <_calloc_r+0x10>
 801303c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013040:	f022 0203 	bic.w	r2, r2, #3
 8013044:	3a04      	subs	r2, #4
 8013046:	2a24      	cmp	r2, #36	@ 0x24
 8013048:	d819      	bhi.n	801307e <_calloc_r+0x62>
 801304a:	2a13      	cmp	r2, #19
 801304c:	d915      	bls.n	801307a <_calloc_r+0x5e>
 801304e:	2a1b      	cmp	r2, #27
 8013050:	e9c0 5500 	strd	r5, r5, [r0]
 8013054:	d806      	bhi.n	8013064 <_calloc_r+0x48>
 8013056:	f100 0308 	add.w	r3, r0, #8
 801305a:	2200      	movs	r2, #0
 801305c:	e9c3 2200 	strd	r2, r2, [r3]
 8013060:	609a      	str	r2, [r3, #8]
 8013062:	e7e4      	b.n	801302e <_calloc_r+0x12>
 8013064:	2a24      	cmp	r2, #36	@ 0x24
 8013066:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801306a:	bf11      	iteee	ne
 801306c:	f100 0310 	addne.w	r3, r0, #16
 8013070:	6105      	streq	r5, [r0, #16]
 8013072:	f100 0318 	addeq.w	r3, r0, #24
 8013076:	6145      	streq	r5, [r0, #20]
 8013078:	e7ef      	b.n	801305a <_calloc_r+0x3e>
 801307a:	4603      	mov	r3, r0
 801307c:	e7ed      	b.n	801305a <_calloc_r+0x3e>
 801307e:	4629      	mov	r1, r5
 8013080:	f7fc fd2c 	bl	800fadc <memset>
 8013084:	e7d3      	b.n	801302e <_calloc_r+0x12>
	...

08013088 <fiprintf>:
 8013088:	b40e      	push	{r1, r2, r3}
 801308a:	b503      	push	{r0, r1, lr}
 801308c:	4601      	mov	r1, r0
 801308e:	ab03      	add	r3, sp, #12
 8013090:	4805      	ldr	r0, [pc, #20]	@ (80130a8 <fiprintf+0x20>)
 8013092:	f853 2b04 	ldr.w	r2, [r3], #4
 8013096:	6800      	ldr	r0, [r0, #0]
 8013098:	9301      	str	r3, [sp, #4]
 801309a:	f7fb fca1 	bl	800e9e0 <_vfiprintf_r>
 801309e:	b002      	add	sp, #8
 80130a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80130a4:	b003      	add	sp, #12
 80130a6:	4770      	bx	lr
 80130a8:	24000188 	.word	0x24000188

080130ac <__ssprint_r>:
 80130ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130b0:	6893      	ldr	r3, [r2, #8]
 80130b2:	f8d2 b000 	ldr.w	fp, [r2]
 80130b6:	9001      	str	r0, [sp, #4]
 80130b8:	460c      	mov	r4, r1
 80130ba:	4617      	mov	r7, r2
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d157      	bne.n	8013170 <__ssprint_r+0xc4>
 80130c0:	2000      	movs	r0, #0
 80130c2:	2300      	movs	r3, #0
 80130c4:	607b      	str	r3, [r7, #4]
 80130c6:	b003      	add	sp, #12
 80130c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130cc:	e9db a800 	ldrd	sl, r8, [fp]
 80130d0:	f10b 0b08 	add.w	fp, fp, #8
 80130d4:	68a6      	ldr	r6, [r4, #8]
 80130d6:	6820      	ldr	r0, [r4, #0]
 80130d8:	f1b8 0f00 	cmp.w	r8, #0
 80130dc:	d0f6      	beq.n	80130cc <__ssprint_r+0x20>
 80130de:	45b0      	cmp	r8, r6
 80130e0:	d32e      	bcc.n	8013140 <__ssprint_r+0x94>
 80130e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80130e6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80130ea:	d029      	beq.n	8013140 <__ssprint_r+0x94>
 80130ec:	6921      	ldr	r1, [r4, #16]
 80130ee:	6965      	ldr	r5, [r4, #20]
 80130f0:	eba0 0901 	sub.w	r9, r0, r1
 80130f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80130f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80130fc:	f109 0001 	add.w	r0, r9, #1
 8013100:	106d      	asrs	r5, r5, #1
 8013102:	4440      	add	r0, r8
 8013104:	4285      	cmp	r5, r0
 8013106:	bf38      	it	cc
 8013108:	4605      	movcc	r5, r0
 801310a:	0553      	lsls	r3, r2, #21
 801310c:	d534      	bpl.n	8013178 <__ssprint_r+0xcc>
 801310e:	9801      	ldr	r0, [sp, #4]
 8013110:	4629      	mov	r1, r5
 8013112:	f7fd fc81 	bl	8010a18 <_malloc_r>
 8013116:	4606      	mov	r6, r0
 8013118:	2800      	cmp	r0, #0
 801311a:	d038      	beq.n	801318e <__ssprint_r+0xe2>
 801311c:	464a      	mov	r2, r9
 801311e:	6921      	ldr	r1, [r4, #16]
 8013120:	f7fc fd30 	bl	800fb84 <memcpy>
 8013124:	89a2      	ldrh	r2, [r4, #12]
 8013126:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 801312a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801312e:	81a2      	strh	r2, [r4, #12]
 8013130:	6126      	str	r6, [r4, #16]
 8013132:	6165      	str	r5, [r4, #20]
 8013134:	444e      	add	r6, r9
 8013136:	eba5 0509 	sub.w	r5, r5, r9
 801313a:	6026      	str	r6, [r4, #0]
 801313c:	60a5      	str	r5, [r4, #8]
 801313e:	4646      	mov	r6, r8
 8013140:	4546      	cmp	r6, r8
 8013142:	bf28      	it	cs
 8013144:	4646      	movcs	r6, r8
 8013146:	4632      	mov	r2, r6
 8013148:	4651      	mov	r1, sl
 801314a:	6820      	ldr	r0, [r4, #0]
 801314c:	f7fc fcac 	bl	800faa8 <memmove>
 8013150:	68a2      	ldr	r2, [r4, #8]
 8013152:	1b92      	subs	r2, r2, r6
 8013154:	60a2      	str	r2, [r4, #8]
 8013156:	6822      	ldr	r2, [r4, #0]
 8013158:	4432      	add	r2, r6
 801315a:	6022      	str	r2, [r4, #0]
 801315c:	68ba      	ldr	r2, [r7, #8]
 801315e:	eba2 0308 	sub.w	r3, r2, r8
 8013162:	44c2      	add	sl, r8
 8013164:	60bb      	str	r3, [r7, #8]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d0aa      	beq.n	80130c0 <__ssprint_r+0x14>
 801316a:	f04f 0800 	mov.w	r8, #0
 801316e:	e7b1      	b.n	80130d4 <__ssprint_r+0x28>
 8013170:	f04f 0a00 	mov.w	sl, #0
 8013174:	46d0      	mov	r8, sl
 8013176:	e7ad      	b.n	80130d4 <__ssprint_r+0x28>
 8013178:	9801      	ldr	r0, [sp, #4]
 801317a:	462a      	mov	r2, r5
 801317c:	f7ff fc16 	bl	80129ac <_realloc_r>
 8013180:	4606      	mov	r6, r0
 8013182:	2800      	cmp	r0, #0
 8013184:	d1d4      	bne.n	8013130 <__ssprint_r+0x84>
 8013186:	6921      	ldr	r1, [r4, #16]
 8013188:	9801      	ldr	r0, [sp, #4]
 801318a:	f7fd fb85 	bl	8010898 <_free_r>
 801318e:	9a01      	ldr	r2, [sp, #4]
 8013190:	230c      	movs	r3, #12
 8013192:	6013      	str	r3, [r2, #0]
 8013194:	89a3      	ldrh	r3, [r4, #12]
 8013196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801319a:	81a3      	strh	r3, [r4, #12]
 801319c:	2300      	movs	r3, #0
 801319e:	60bb      	str	r3, [r7, #8]
 80131a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80131a4:	e78d      	b.n	80130c2 <__ssprint_r+0x16>

080131a6 <abort>:
 80131a6:	b508      	push	{r3, lr}
 80131a8:	2006      	movs	r0, #6
 80131aa:	f000 f82d 	bl	8013208 <raise>
 80131ae:	2001      	movs	r0, #1
 80131b0:	f7ef fada 	bl	8002768 <_exit>

080131b4 <_raise_r>:
 80131b4:	291f      	cmp	r1, #31
 80131b6:	b538      	push	{r3, r4, r5, lr}
 80131b8:	4605      	mov	r5, r0
 80131ba:	460c      	mov	r4, r1
 80131bc:	d904      	bls.n	80131c8 <_raise_r+0x14>
 80131be:	2316      	movs	r3, #22
 80131c0:	6003      	str	r3, [r0, #0]
 80131c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80131c6:	bd38      	pop	{r3, r4, r5, pc}
 80131c8:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 80131cc:	b112      	cbz	r2, 80131d4 <_raise_r+0x20>
 80131ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80131d2:	b94b      	cbnz	r3, 80131e8 <_raise_r+0x34>
 80131d4:	4628      	mov	r0, r5
 80131d6:	f000 f831 	bl	801323c <_getpid_r>
 80131da:	4622      	mov	r2, r4
 80131dc:	4601      	mov	r1, r0
 80131de:	4628      	mov	r0, r5
 80131e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131e4:	f000 b818 	b.w	8013218 <_kill_r>
 80131e8:	2b01      	cmp	r3, #1
 80131ea:	d00a      	beq.n	8013202 <_raise_r+0x4e>
 80131ec:	1c59      	adds	r1, r3, #1
 80131ee:	d103      	bne.n	80131f8 <_raise_r+0x44>
 80131f0:	2316      	movs	r3, #22
 80131f2:	6003      	str	r3, [r0, #0]
 80131f4:	2001      	movs	r0, #1
 80131f6:	e7e6      	b.n	80131c6 <_raise_r+0x12>
 80131f8:	2100      	movs	r1, #0
 80131fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80131fe:	4620      	mov	r0, r4
 8013200:	4798      	blx	r3
 8013202:	2000      	movs	r0, #0
 8013204:	e7df      	b.n	80131c6 <_raise_r+0x12>
	...

08013208 <raise>:
 8013208:	4b02      	ldr	r3, [pc, #8]	@ (8013214 <raise+0xc>)
 801320a:	4601      	mov	r1, r0
 801320c:	6818      	ldr	r0, [r3, #0]
 801320e:	f7ff bfd1 	b.w	80131b4 <_raise_r>
 8013212:	bf00      	nop
 8013214:	24000188 	.word	0x24000188

08013218 <_kill_r>:
 8013218:	b538      	push	{r3, r4, r5, lr}
 801321a:	4d07      	ldr	r5, [pc, #28]	@ (8013238 <_kill_r+0x20>)
 801321c:	2300      	movs	r3, #0
 801321e:	4604      	mov	r4, r0
 8013220:	4608      	mov	r0, r1
 8013222:	4611      	mov	r1, r2
 8013224:	602b      	str	r3, [r5, #0]
 8013226:	f7ef fa8f 	bl	8002748 <_kill>
 801322a:	1c43      	adds	r3, r0, #1
 801322c:	d102      	bne.n	8013234 <_kill_r+0x1c>
 801322e:	682b      	ldr	r3, [r5, #0]
 8013230:	b103      	cbz	r3, 8013234 <_kill_r+0x1c>
 8013232:	6023      	str	r3, [r4, #0]
 8013234:	bd38      	pop	{r3, r4, r5, pc}
 8013236:	bf00      	nop
 8013238:	24015388 	.word	0x24015388

0801323c <_getpid_r>:
 801323c:	f7ef ba7c 	b.w	8002738 <_getpid>

08013240 <cabs>:
 8013240:	b508      	push	{r3, lr}
 8013242:	ed2d 8b06 	vpush	{d8-d10}
 8013246:	eeb0 ab40 	vmov.f64	d10, d0
 801324a:	eeb0 9b41 	vmov.f64	d9, d1
 801324e:	f000 fc26 	bl	8013a9e <creal>
 8013252:	eeb0 1b49 	vmov.f64	d1, d9
 8013256:	eeb0 8b40 	vmov.f64	d8, d0
 801325a:	eeb0 0b4a 	vmov.f64	d0, d10
 801325e:	f000 fc1b 	bl	8013a98 <cimag>
 8013262:	eeb0 1b40 	vmov.f64	d1, d0
 8013266:	eeb0 0b48 	vmov.f64	d0, d8
 801326a:	ecbd 8b06 	vpop	{d8-d10}
 801326e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013272:	f000 bdd1 	b.w	8013e18 <hypot>
	...

08013278 <log>:
 8013278:	b4f0      	push	{r4, r5, r6, r7}
 801327a:	ee10 0a90 	vmov	r0, s1
 801327e:	ee10 3a10 	vmov	r3, s0
 8013282:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013286:	429c      	cmp	r4, r3
 8013288:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 801328c:	4c70      	ldr	r4, [pc, #448]	@ (8013450 <log+0x1d8>)
 801328e:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8013292:	418c      	sbcs	r4, r1
 8013294:	ed2d 8b02 	vpush	{d8}
 8013298:	ea4f 4210 	mov.w	r2, r0, lsr #16
 801329c:	d35a      	bcc.n	8013354 <log+0xdc>
 801329e:	4a6d      	ldr	r2, [pc, #436]	@ (8013454 <log+0x1dc>)
 80132a0:	4290      	cmp	r0, r2
 80132a2:	bf08      	it	eq
 80132a4:	2b00      	cmpeq	r3, #0
 80132a6:	f000 80c4 	beq.w	8013432 <log+0x1ba>
 80132aa:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80132ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 80132b2:	4b69      	ldr	r3, [pc, #420]	@ (8013458 <log+0x1e0>)
 80132b4:	ee20 2b00 	vmul.f64	d2, d0, d0
 80132b8:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80132bc:	ee20 4b02 	vmul.f64	d4, d0, d2
 80132c0:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80132c4:	eea6 7b00 	vfma.f64	d7, d6, d0
 80132c8:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80132cc:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80132d0:	eea6 7b02 	vfma.f64	d7, d6, d2
 80132d4:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80132d8:	eea5 6b00 	vfma.f64	d6, d5, d0
 80132dc:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 80132e0:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 80132e4:	eea5 6b02 	vfma.f64	d6, d5, d2
 80132e8:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80132ec:	eea3 5b00 	vfma.f64	d5, d3, d0
 80132f0:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80132f4:	eea3 5b02 	vfma.f64	d5, d3, d2
 80132f8:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80132fc:	eea3 5b04 	vfma.f64	d5, d3, d4
 8013300:	eea5 6b04 	vfma.f64	d6, d5, d4
 8013304:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8013308:	eea6 7b04 	vfma.f64	d7, d6, d4
 801330c:	eeb0 2b47 	vmov.f64	d2, d7
 8013310:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8013438 <log+0x1c0>
 8013314:	eeb0 6b40 	vmov.f64	d6, d0
 8013318:	eeb0 3b40 	vmov.f64	d3, d0
 801331c:	eea0 6b07 	vfma.f64	d6, d0, d7
 8013320:	eea0 6b47 	vfms.f64	d6, d0, d7
 8013324:	ee30 8b46 	vsub.f64	d8, d0, d6
 8013328:	ee26 1b06 	vmul.f64	d1, d6, d6
 801332c:	eea1 3b05 	vfma.f64	d3, d1, d5
 8013330:	ee30 7b43 	vsub.f64	d7, d0, d3
 8013334:	ee30 0b06 	vadd.f64	d0, d0, d6
 8013338:	eea1 7b05 	vfma.f64	d7, d1, d5
 801333c:	ee25 5b08 	vmul.f64	d5, d5, d8
 8013340:	eea5 7b00 	vfma.f64	d7, d5, d0
 8013344:	eea2 7b04 	vfma.f64	d7, d2, d4
 8013348:	ee33 0b07 	vadd.f64	d0, d3, d7
 801334c:	ecbd 8b02 	vpop	{d8}
 8013350:	bcf0      	pop	{r4, r5, r6, r7}
 8013352:	4770      	bx	lr
 8013354:	f1a2 0410 	sub.w	r4, r2, #16
 8013358:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 801335c:	428c      	cmp	r4, r1
 801335e:	d923      	bls.n	80133a8 <log+0x130>
 8013360:	18d9      	adds	r1, r3, r3
 8013362:	eb40 0400 	adc.w	r4, r0, r0
 8013366:	4321      	orrs	r1, r4
 8013368:	d105      	bne.n	8013376 <log+0xfe>
 801336a:	ecbd 8b02 	vpop	{d8}
 801336e:	2001      	movs	r0, #1
 8013370:	bcf0      	pop	{r4, r5, r6, r7}
 8013372:	f000 bda9 	b.w	8013ec8 <__math_divzero>
 8013376:	4939      	ldr	r1, [pc, #228]	@ (801345c <log+0x1e4>)
 8013378:	4288      	cmp	r0, r1
 801337a:	bf08      	it	eq
 801337c:	2b00      	cmpeq	r3, #0
 801337e:	d0e5      	beq.n	801334c <log+0xd4>
 8013380:	0413      	lsls	r3, r2, #16
 8013382:	d403      	bmi.n	801338c <log+0x114>
 8013384:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8013388:	4393      	bics	r3, r2
 801338a:	d104      	bne.n	8013396 <log+0x11e>
 801338c:	ecbd 8b02 	vpop	{d8}
 8013390:	bcf0      	pop	{r4, r5, r6, r7}
 8013392:	f000 bdb1 	b.w	8013ef8 <__math_invalid>
 8013396:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8013440 <log+0x1c8>
 801339a:	ee20 7b07 	vmul.f64	d7, d0, d7
 801339e:	ec53 2b17 	vmov	r2, r3, d7
 80133a2:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 80133a6:	4613      	mov	r3, r2
 80133a8:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 80133ac:	492a      	ldr	r1, [pc, #168]	@ (8013458 <log+0x1e0>)
 80133ae:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 80133b2:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 80133b6:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80133ba:	0d15      	lsrs	r5, r2, #20
 80133bc:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 80133c0:	052d      	lsls	r5, r5, #20
 80133c2:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 80133c6:	1e1e      	subs	r6, r3, #0
 80133c8:	1b47      	subs	r7, r0, r5
 80133ca:	ec47 6b16 	vmov	d6, r6, r7
 80133ce:	1512      	asrs	r2, r2, #20
 80133d0:	eea7 5b06 	vfma.f64	d5, d7, d6
 80133d4:	ee07 2a90 	vmov	s15, r2
 80133d8:	ee25 2b05 	vmul.f64	d2, d5, d5
 80133dc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80133e0:	ed91 4b00 	vldr	d4, [r1]
 80133e4:	ee25 1b02 	vmul.f64	d1, d5, d2
 80133e8:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 80133ec:	eea4 7b06 	vfma.f64	d7, d4, d6
 80133f0:	ee35 4b07 	vadd.f64	d4, d5, d7
 80133f4:	ee37 0b44 	vsub.f64	d0, d7, d4
 80133f8:	ed91 7b02 	vldr	d7, [r1, #8]
 80133fc:	ee30 0b05 	vadd.f64	d0, d0, d5
 8013400:	eea7 0b06 	vfma.f64	d0, d7, d6
 8013404:	ed91 7b04 	vldr	d7, [r1, #16]
 8013408:	ed91 6b08 	vldr	d6, [r1, #32]
 801340c:	eea7 0b02 	vfma.f64	d0, d7, d2
 8013410:	ed91 7b06 	vldr	d7, [r1, #24]
 8013414:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8013418:	eea6 7b05 	vfma.f64	d7, d6, d5
 801341c:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8013420:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013424:	eea6 7b02 	vfma.f64	d7, d6, d2
 8013428:	eea1 0b07 	vfma.f64	d0, d1, d7
 801342c:	ee30 0b04 	vadd.f64	d0, d0, d4
 8013430:	e78c      	b.n	801334c <log+0xd4>
 8013432:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8013448 <log+0x1d0>
 8013436:	e789      	b.n	801334c <log+0xd4>
 8013438:	00000000 	.word	0x00000000
 801343c:	41a00000 	.word	0x41a00000
 8013440:	00000000 	.word	0x00000000
 8013444:	43300000 	.word	0x43300000
	...
 8013450:	000308ff 	.word	0x000308ff
 8013454:	3ff00000 	.word	0x3ff00000
 8013458:	08014df0 	.word	0x08014df0
 801345c:	7ff00000 	.word	0x7ff00000

08013460 <checkint>:
 8013460:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013464:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8013468:	429a      	cmp	r2, r3
 801346a:	b570      	push	{r4, r5, r6, lr}
 801346c:	dd2a      	ble.n	80134c4 <checkint+0x64>
 801346e:	f240 4333 	movw	r3, #1075	@ 0x433
 8013472:	429a      	cmp	r2, r3
 8013474:	dc24      	bgt.n	80134c0 <checkint+0x60>
 8013476:	1a9b      	subs	r3, r3, r2
 8013478:	f1a3 0620 	sub.w	r6, r3, #32
 801347c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013480:	fa02 f403 	lsl.w	r4, r2, r3
 8013484:	fa02 f606 	lsl.w	r6, r2, r6
 8013488:	f1c3 0520 	rsb	r5, r3, #32
 801348c:	fa22 f505 	lsr.w	r5, r2, r5
 8013490:	4334      	orrs	r4, r6
 8013492:	432c      	orrs	r4, r5
 8013494:	409a      	lsls	r2, r3
 8013496:	ea20 0202 	bic.w	r2, r0, r2
 801349a:	ea21 0404 	bic.w	r4, r1, r4
 801349e:	4322      	orrs	r2, r4
 80134a0:	f1a3 0420 	sub.w	r4, r3, #32
 80134a4:	f1c3 0220 	rsb	r2, r3, #32
 80134a8:	d10c      	bne.n	80134c4 <checkint+0x64>
 80134aa:	40d8      	lsrs	r0, r3
 80134ac:	fa01 f302 	lsl.w	r3, r1, r2
 80134b0:	4318      	orrs	r0, r3
 80134b2:	40e1      	lsrs	r1, r4
 80134b4:	4308      	orrs	r0, r1
 80134b6:	f000 0001 	and.w	r0, r0, #1
 80134ba:	f1d0 0002 	rsbs	r0, r0, #2
 80134be:	bd70      	pop	{r4, r5, r6, pc}
 80134c0:	2002      	movs	r0, #2
 80134c2:	e7fc      	b.n	80134be <checkint+0x5e>
 80134c4:	2000      	movs	r0, #0
 80134c6:	e7fa      	b.n	80134be <checkint+0x5e>

080134c8 <pow>:
 80134c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134cc:	ee10 4a90 	vmov	r4, s1
 80134d0:	ed2d 8b0a 	vpush	{d8-d12}
 80134d4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 80134d8:	ee11 aa90 	vmov	sl, s3
 80134dc:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80134e0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 80134e4:	429a      	cmp	r2, r3
 80134e6:	ee10 5a10 	vmov	r5, s0
 80134ea:	ee11 0a10 	vmov	r0, s2
 80134ee:	b087      	sub	sp, #28
 80134f0:	46c4      	mov	ip, r8
 80134f2:	ea4f 561a 	mov.w	r6, sl, lsr #20
 80134f6:	d806      	bhi.n	8013506 <pow+0x3e>
 80134f8:	f3c6 030a 	ubfx	r3, r6, #0, #11
 80134fc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8013500:	2b7f      	cmp	r3, #127	@ 0x7f
 8013502:	f240 8157 	bls.w	80137b4 <pow+0x2ec>
 8013506:	1802      	adds	r2, r0, r0
 8013508:	eb4a 010a 	adc.w	r1, sl, sl
 801350c:	f06f 0b01 	mvn.w	fp, #1
 8013510:	1e57      	subs	r7, r2, #1
 8013512:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 8013516:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 801351a:	45bb      	cmp	fp, r7
 801351c:	eb7e 0303 	sbcs.w	r3, lr, r3
 8013520:	d242      	bcs.n	80135a8 <pow+0xe0>
 8013522:	ea52 0301 	orrs.w	r3, r2, r1
 8013526:	f04f 0300 	mov.w	r3, #0
 801352a:	d10c      	bne.n	8013546 <pow+0x7e>
 801352c:	196d      	adds	r5, r5, r5
 801352e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8013532:	4164      	adcs	r4, r4
 8013534:	42ab      	cmp	r3, r5
 8013536:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801353a:	41a3      	sbcs	r3, r4
 801353c:	f0c0 808f 	bcc.w	801365e <pow+0x196>
 8013540:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013544:	e02b      	b.n	801359e <pow+0xd6>
 8013546:	4ed4      	ldr	r6, [pc, #848]	@ (8013898 <pow+0x3d0>)
 8013548:	42b4      	cmp	r4, r6
 801354a:	bf08      	it	eq
 801354c:	429d      	cmpeq	r5, r3
 801354e:	d109      	bne.n	8013564 <pow+0x9c>
 8013550:	1800      	adds	r0, r0, r0
 8013552:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8013556:	eb4a 0a0a 	adc.w	sl, sl, sl
 801355a:	4283      	cmp	r3, r0
 801355c:	4bcf      	ldr	r3, [pc, #828]	@ (801389c <pow+0x3d4>)
 801355e:	eb73 030a 	sbcs.w	r3, r3, sl
 8013562:	e7eb      	b.n	801353c <pow+0x74>
 8013564:	196d      	adds	r5, r5, r5
 8013566:	48ce      	ldr	r0, [pc, #824]	@ (80138a0 <pow+0x3d8>)
 8013568:	4164      	adcs	r4, r4
 801356a:	42ab      	cmp	r3, r5
 801356c:	eb70 0604 	sbcs.w	r6, r0, r4
 8013570:	d375      	bcc.n	801365e <pow+0x196>
 8013572:	4281      	cmp	r1, r0
 8013574:	bf08      	it	eq
 8013576:	429a      	cmpeq	r2, r3
 8013578:	d171      	bne.n	801365e <pow+0x196>
 801357a:	4aca      	ldr	r2, [pc, #808]	@ (80138a4 <pow+0x3dc>)
 801357c:	4294      	cmp	r4, r2
 801357e:	bf08      	it	eq
 8013580:	429d      	cmpeq	r5, r3
 8013582:	d0dd      	beq.n	8013540 <pow+0x78>
 8013584:	4294      	cmp	r4, r2
 8013586:	ea6f 0a0a 	mvn.w	sl, sl
 801358a:	bf34      	ite	cc
 801358c:	2400      	movcc	r4, #0
 801358e:	2401      	movcs	r4, #1
 8013590:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8013594:	4554      	cmp	r4, sl
 8013596:	f040 81dc 	bne.w	8013952 <pow+0x48a>
 801359a:	ee21 0b01 	vmul.f64	d0, d1, d1
 801359e:	b007      	add	sp, #28
 80135a0:	ecbd 8b0a 	vpop	{d8-d12}
 80135a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135a8:	196f      	adds	r7, r5, r5
 80135aa:	eb44 0904 	adc.w	r9, r4, r4
 80135ae:	1e7a      	subs	r2, r7, #1
 80135b0:	f169 0300 	sbc.w	r3, r9, #0
 80135b4:	4593      	cmp	fp, r2
 80135b6:	eb7e 0303 	sbcs.w	r3, lr, r3
 80135ba:	d225      	bcs.n	8013608 <pow+0x140>
 80135bc:	ee20 0b00 	vmul.f64	d0, d0, d0
 80135c0:	2c00      	cmp	r4, #0
 80135c2:	da13      	bge.n	80135ec <pow+0x124>
 80135c4:	4651      	mov	r1, sl
 80135c6:	f7ff ff4b 	bl	8013460 <checkint>
 80135ca:	2801      	cmp	r0, #1
 80135cc:	d10e      	bne.n	80135ec <pow+0x124>
 80135ce:	eeb1 0b40 	vneg.f64	d0, d0
 80135d2:	ea57 0909 	orrs.w	r9, r7, r9
 80135d6:	d10b      	bne.n	80135f0 <pow+0x128>
 80135d8:	f1ba 0f00 	cmp.w	sl, #0
 80135dc:	dadf      	bge.n	801359e <pow+0xd6>
 80135de:	b007      	add	sp, #28
 80135e0:	ecbd 8b0a 	vpop	{d8-d12}
 80135e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e8:	f000 bc6e 	b.w	8013ec8 <__math_divzero>
 80135ec:	2000      	movs	r0, #0
 80135ee:	e7f0      	b.n	80135d2 <pow+0x10a>
 80135f0:	f1ba 0f00 	cmp.w	sl, #0
 80135f4:	dad3      	bge.n	801359e <pow+0xd6>
 80135f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80135fa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80135fe:	ed8d 7b00 	vstr	d7, [sp]
 8013602:	ed9d 0b00 	vldr	d0, [sp]
 8013606:	e7ca      	b.n	801359e <pow+0xd6>
 8013608:	2c00      	cmp	r4, #0
 801360a:	da2b      	bge.n	8013664 <pow+0x19c>
 801360c:	4651      	mov	r1, sl
 801360e:	f7ff ff27 	bl	8013460 <checkint>
 8013612:	b930      	cbnz	r0, 8013622 <pow+0x15a>
 8013614:	b007      	add	sp, #28
 8013616:	ecbd 8b0a 	vpop	{d8-d12}
 801361a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801361e:	f000 bc6b 	b.w	8013ef8 <__math_invalid>
 8013622:	1e41      	subs	r1, r0, #1
 8013624:	4248      	negs	r0, r1
 8013626:	4148      	adcs	r0, r1
 8013628:	0480      	lsls	r0, r0, #18
 801362a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801362e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8013632:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8013636:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 801363a:	2b7f      	cmp	r3, #127	@ 0x7f
 801363c:	d92d      	bls.n	801369a <pow+0x1d2>
 801363e:	4b96      	ldr	r3, [pc, #600]	@ (8013898 <pow+0x3d0>)
 8013640:	2000      	movs	r0, #0
 8013642:	429c      	cmp	r4, r3
 8013644:	bf08      	it	eq
 8013646:	4285      	cmpeq	r5, r0
 8013648:	f43f af7a 	beq.w	8013540 <pow+0x78>
 801364c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8013650:	428a      	cmp	r2, r1
 8013652:	d80c      	bhi.n	801366e <pow+0x1a6>
 8013654:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8013658:	42a8      	cmp	r0, r5
 801365a:	41a3      	sbcs	r3, r4
 801365c:	d204      	bcs.n	8013668 <pow+0x1a0>
 801365e:	ee31 0b00 	vadd.f64	d0, d1, d0
 8013662:	e79c      	b.n	801359e <pow+0xd6>
 8013664:	2000      	movs	r0, #0
 8013666:	e7e4      	b.n	8013632 <pow+0x16a>
 8013668:	ee30 0b41 	vsub.f64	d0, d0, d1
 801366c:	e797      	b.n	801359e <pow+0xd6>
 801366e:	2d01      	cmp	r5, #1
 8013670:	eb74 0303 	sbcs.w	r3, r4, r3
 8013674:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013678:	bf34      	ite	cc
 801367a:	2301      	movcc	r3, #1
 801367c:	2300      	movcs	r3, #0
 801367e:	4296      	cmp	r6, r2
 8013680:	bf8c      	ite	hi
 8013682:	2600      	movhi	r6, #0
 8013684:	2601      	movls	r6, #1
 8013686:	42b3      	cmp	r3, r6
 8013688:	f000 809c 	beq.w	80137c4 <pow+0x2fc>
 801368c:	b007      	add	sp, #28
 801368e:	ecbd 8b0a 	vpop	{d8-d12}
 8013692:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013696:	f000 bc0f 	b.w	8013eb8 <__math_oflow>
 801369a:	f1bc 0f00 	cmp.w	ip, #0
 801369e:	d10a      	bne.n	80136b6 <pow+0x1ee>
 80136a0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8013888 <pow+0x3c0>
 80136a4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80136a8:	ec53 2b17 	vmov	r2, r3, d7
 80136ac:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 80136b0:	4615      	mov	r5, r2
 80136b2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 80136b6:	4a7c      	ldr	r2, [pc, #496]	@ (80138a8 <pow+0x3e0>)
 80136b8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 80136bc:	4422      	add	r2, r4
 80136be:	1513      	asrs	r3, r2, #20
 80136c0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 80136c4:	ee03 3a10 	vmov	s6, r3
 80136c8:	0d12      	lsrs	r2, r2, #20
 80136ca:	4b78      	ldr	r3, [pc, #480]	@ (80138ac <pow+0x3e4>)
 80136cc:	0512      	lsls	r2, r2, #20
 80136ce:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 80136d2:	1aa7      	subs	r7, r4, r2
 80136d4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 80136d8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 80136dc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 80136e0:	1e2e      	subs	r6, r5, #0
 80136e2:	ec47 6b14 	vmov	d4, r6, r7
 80136e6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 80136ea:	eea4 6b05 	vfma.f64	d6, d4, d5
 80136ee:	ed93 5b00 	vldr	d5, [r3]
 80136f2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 80136f6:	eea3 2b05 	vfma.f64	d2, d3, d5
 80136fa:	ed93 5b02 	vldr	d5, [r3, #8]
 80136fe:	ee36 4b02 	vadd.f64	d4, d6, d2
 8013702:	ee32 2b44 	vsub.f64	d2, d2, d4
 8013706:	eea3 7b05 	vfma.f64	d7, d3, d5
 801370a:	ed93 5b04 	vldr	d5, [r3, #16]
 801370e:	ee32 2b06 	vadd.f64	d2, d2, d6
 8013712:	ee37 7b02 	vadd.f64	d7, d7, d2
 8013716:	ee26 5b05 	vmul.f64	d5, d6, d5
 801371a:	ee26 0b05 	vmul.f64	d0, d6, d5
 801371e:	ee34 8b00 	vadd.f64	d8, d4, d0
 8013722:	eeb0 9b40 	vmov.f64	d9, d0
 8013726:	ee34 4b48 	vsub.f64	d4, d4, d8
 801372a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 801372e:	ee34 ab00 	vadd.f64	d10, d4, d0
 8013732:	ed93 5b06 	vldr	d5, [r3, #24]
 8013736:	ee26 bb00 	vmul.f64	d11, d6, d0
 801373a:	ee37 7b09 	vadd.f64	d7, d7, d9
 801373e:	ed93 4b08 	vldr	d4, [r3, #32]
 8013742:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8013746:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 801374a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801374e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8013752:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8013756:	eea6 4b03 	vfma.f64	d4, d6, d3
 801375a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 801375e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8013762:	eea0 4b03 	vfma.f64	d4, d0, d3
 8013766:	eea0 5b04 	vfma.f64	d5, d0, d4
 801376a:	eeab 7b05 	vfma.f64	d7, d11, d5
 801376e:	ee38 4b07 	vadd.f64	d4, d8, d7
 8013772:	ee21 6b04 	vmul.f64	d6, d1, d4
 8013776:	ee16 3a90 	vmov	r3, s13
 801377a:	eeb0 5b46 	vmov.f64	d5, d6
 801377e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8013782:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8013786:	18b2      	adds	r2, r6, r2
 8013788:	2a3e      	cmp	r2, #62	@ 0x3e
 801378a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 801378e:	ee38 8b44 	vsub.f64	d8, d8, d4
 8013792:	ee38 8b07 	vadd.f64	d8, d8, d7
 8013796:	eea1 5b08 	vfma.f64	d5, d1, d8
 801379a:	d91b      	bls.n	80137d4 <pow+0x30c>
 801379c:	2a00      	cmp	r2, #0
 801379e:	da0b      	bge.n	80137b8 <pow+0x2f0>
 80137a0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80137a4:	ee36 0b00 	vadd.f64	d0, d6, d0
 80137a8:	2800      	cmp	r0, #0
 80137aa:	f43f aef8 	beq.w	801359e <pow+0xd6>
 80137ae:	eeb1 0b40 	vneg.f64	d0, d0
 80137b2:	e6f4      	b.n	801359e <pow+0xd6>
 80137b4:	2000      	movs	r0, #0
 80137b6:	e77e      	b.n	80136b6 <pow+0x1ee>
 80137b8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 80137bc:	d909      	bls.n	80137d2 <pow+0x30a>
 80137be:	2b00      	cmp	r3, #0
 80137c0:	f6bf af64 	bge.w	801368c <pow+0x1c4>
 80137c4:	b007      	add	sp, #28
 80137c6:	ecbd 8b0a 	vpop	{d8-d12}
 80137ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ce:	f000 bb6b 	b.w	8013ea8 <__math_uflow>
 80137d2:	2600      	movs	r6, #0
 80137d4:	4936      	ldr	r1, [pc, #216]	@ (80138b0 <pow+0x3e8>)
 80137d6:	ed91 4b02 	vldr	d4, [r1, #8]
 80137da:	ed91 3b00 	vldr	d3, [r1]
 80137de:	eeb0 7b44 	vmov.f64	d7, d4
 80137e2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80137e6:	ee17 5a10 	vmov	r5, s14
 80137ea:	ee37 7b44 	vsub.f64	d7, d7, d4
 80137ee:	ed91 4b04 	vldr	d4, [r1, #16]
 80137f2:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 80137f6:	eea7 6b04 	vfma.f64	d6, d7, d4
 80137fa:	ed91 4b06 	vldr	d4, [r1, #24]
 80137fe:	18dc      	adds	r4, r3, r3
 8013800:	f104 030f 	add.w	r3, r4, #15
 8013804:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8013808:	eea7 6b04 	vfma.f64	d6, d7, d4
 801380c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8013810:	ee35 5b06 	vadd.f64	d5, d5, d6
 8013814:	ee25 6b05 	vmul.f64	d6, d5, d5
 8013818:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 801381c:	ed91 4b08 	vldr	d4, [r1, #32]
 8013820:	ee35 7b07 	vadd.f64	d7, d5, d7
 8013824:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8013828:	eea5 4b03 	vfma.f64	d4, d5, d3
 801382c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8013830:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013834:	ee26 6b06 	vmul.f64	d6, d6, d6
 8013838:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 801383c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8013840:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8013844:	eea5 4b03 	vfma.f64	d4, d5, d3
 8013848:	1940      	adds	r0, r0, r5
 801384a:	2700      	movs	r7, #0
 801384c:	eb17 020c 	adds.w	r2, r7, ip
 8013850:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8013854:	eea6 7b04 	vfma.f64	d7, d6, d4
 8013858:	2e00      	cmp	r6, #0
 801385a:	d175      	bne.n	8013948 <pow+0x480>
 801385c:	42bd      	cmp	r5, r7
 801385e:	db29      	blt.n	80138b4 <pow+0x3ec>
 8013860:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8013864:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8013868:	4610      	mov	r0, r2
 801386a:	ec41 0b10 	vmov	d0, r0, r1
 801386e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8013872:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8013890 <pow+0x3c8>
 8013876:	ee20 0b07 	vmul.f64	d0, d0, d7
 801387a:	b007      	add	sp, #28
 801387c:	ecbd 8b0a 	vpop	{d8-d12}
 8013880:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013884:	f000 bb50 	b.w	8013f28 <__math_check_oflow>
 8013888:	00000000 	.word	0x00000000
 801388c:	43300000 	.word	0x43300000
 8013890:	00000000 	.word	0x00000000
 8013894:	7f000000 	.word	0x7f000000
 8013898:	3ff00000 	.word	0x3ff00000
 801389c:	fff00000 	.word	0xfff00000
 80138a0:	ffe00000 	.word	0xffe00000
 80138a4:	7fe00000 	.word	0x7fe00000
 80138a8:	c0196aab 	.word	0xc0196aab
 80138ac:	08015680 	.word	0x08015680
 80138b0:	08016850 	.word	0x08016850
 80138b4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80138b8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 80138bc:	4610      	mov	r0, r2
 80138be:	ec41 0b15 	vmov	d5, r0, r1
 80138c2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 80138c6:	ee27 6b05 	vmul.f64	d6, d7, d5
 80138ca:	ee35 7b06 	vadd.f64	d7, d5, d6
 80138ce:	eeb0 4bc7 	vabs.f64	d4, d7
 80138d2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 80138d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138da:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8013958 <pow+0x490>
 80138de:	d52a      	bpl.n	8013936 <pow+0x46e>
 80138e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80138e4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80138e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ec:	ee35 5b06 	vadd.f64	d5, d5, d6
 80138f0:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 80138f4:	bf58      	it	pl
 80138f6:	eeb0 4b43 	vmovpl.f64	d4, d3
 80138fa:	ee37 3b04 	vadd.f64	d3, d7, d4
 80138fe:	ee34 6b43 	vsub.f64	d6, d4, d3
 8013902:	ee36 6b07 	vadd.f64	d6, d6, d7
 8013906:	ee36 6b05 	vadd.f64	d6, d6, d5
 801390a:	ee36 6b03 	vadd.f64	d6, d6, d3
 801390e:	ee36 7b44 	vsub.f64	d7, d6, d4
 8013912:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801391a:	d104      	bne.n	8013926 <pow+0x45e>
 801391c:	4632      	mov	r2, r6
 801391e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8013922:	ec43 2b17 	vmov	d7, r2, r3
 8013926:	ed8d 0b02 	vstr	d0, [sp, #8]
 801392a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801392e:	ee26 6b00 	vmul.f64	d6, d6, d0
 8013932:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013936:	ee27 0b00 	vmul.f64	d0, d7, d0
 801393a:	b007      	add	sp, #28
 801393c:	ecbd 8b0a 	vpop	{d8-d12}
 8013940:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013944:	f000 bae7 	b.w	8013f16 <__math_check_uflow>
 8013948:	ec43 2b10 	vmov	d0, r2, r3
 801394c:	eea7 0b00 	vfma.f64	d0, d7, d0
 8013950:	e625      	b.n	801359e <pow+0xd6>
 8013952:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8013960 <pow+0x498>
 8013956:	e622      	b.n	801359e <pow+0xd6>
 8013958:	00000000 	.word	0x00000000
 801395c:	00100000 	.word	0x00100000
	...

08013968 <cos>:
 8013968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801396a:	eeb0 7b40 	vmov.f64	d7, d0
 801396e:	ee17 3a90 	vmov	r3, s15
 8013972:	4a21      	ldr	r2, [pc, #132]	@ (80139f8 <cos+0x90>)
 8013974:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013978:	4293      	cmp	r3, r2
 801397a:	d806      	bhi.n	801398a <cos+0x22>
 801397c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80139f0 <cos+0x88>
 8013980:	b005      	add	sp, #20
 8013982:	f85d eb04 	ldr.w	lr, [sp], #4
 8013986:	f000 bd5f 	b.w	8014448 <__kernel_cos>
 801398a:	4a1c      	ldr	r2, [pc, #112]	@ (80139fc <cos+0x94>)
 801398c:	4293      	cmp	r3, r2
 801398e:	d904      	bls.n	801399a <cos+0x32>
 8013990:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013994:	b005      	add	sp, #20
 8013996:	f85d fb04 	ldr.w	pc, [sp], #4
 801399a:	4668      	mov	r0, sp
 801399c:	f000 f8f8 	bl	8013b90 <__ieee754_rem_pio2>
 80139a0:	f000 0003 	and.w	r0, r0, #3
 80139a4:	2801      	cmp	r0, #1
 80139a6:	d009      	beq.n	80139bc <cos+0x54>
 80139a8:	2802      	cmp	r0, #2
 80139aa:	d010      	beq.n	80139ce <cos+0x66>
 80139ac:	b9b0      	cbnz	r0, 80139dc <cos+0x74>
 80139ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80139b2:	ed9d 0b00 	vldr	d0, [sp]
 80139b6:	f000 fd47 	bl	8014448 <__kernel_cos>
 80139ba:	e7eb      	b.n	8013994 <cos+0x2c>
 80139bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80139c0:	ed9d 0b00 	vldr	d0, [sp]
 80139c4:	f000 fda8 	bl	8014518 <__kernel_sin>
 80139c8:	eeb1 0b40 	vneg.f64	d0, d0
 80139cc:	e7e2      	b.n	8013994 <cos+0x2c>
 80139ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80139d2:	ed9d 0b00 	vldr	d0, [sp]
 80139d6:	f000 fd37 	bl	8014448 <__kernel_cos>
 80139da:	e7f5      	b.n	80139c8 <cos+0x60>
 80139dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80139e0:	ed9d 0b00 	vldr	d0, [sp]
 80139e4:	2001      	movs	r0, #1
 80139e6:	f000 fd97 	bl	8014518 <__kernel_sin>
 80139ea:	e7d3      	b.n	8013994 <cos+0x2c>
 80139ec:	f3af 8000 	nop.w
	...
 80139f8:	3fe921fb 	.word	0x3fe921fb
 80139fc:	7fefffff 	.word	0x7fefffff

08013a00 <sin>:
 8013a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a02:	eeb0 7b40 	vmov.f64	d7, d0
 8013a06:	ee17 3a90 	vmov	r3, s15
 8013a0a:	4a21      	ldr	r2, [pc, #132]	@ (8013a90 <sin+0x90>)
 8013a0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013a10:	4293      	cmp	r3, r2
 8013a12:	d807      	bhi.n	8013a24 <sin+0x24>
 8013a14:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8013a88 <sin+0x88>
 8013a18:	2000      	movs	r0, #0
 8013a1a:	b005      	add	sp, #20
 8013a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a20:	f000 bd7a 	b.w	8014518 <__kernel_sin>
 8013a24:	4a1b      	ldr	r2, [pc, #108]	@ (8013a94 <sin+0x94>)
 8013a26:	4293      	cmp	r3, r2
 8013a28:	d904      	bls.n	8013a34 <sin+0x34>
 8013a2a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8013a2e:	b005      	add	sp, #20
 8013a30:	f85d fb04 	ldr.w	pc, [sp], #4
 8013a34:	4668      	mov	r0, sp
 8013a36:	f000 f8ab 	bl	8013b90 <__ieee754_rem_pio2>
 8013a3a:	f000 0003 	and.w	r0, r0, #3
 8013a3e:	2801      	cmp	r0, #1
 8013a40:	d00a      	beq.n	8013a58 <sin+0x58>
 8013a42:	2802      	cmp	r0, #2
 8013a44:	d00f      	beq.n	8013a66 <sin+0x66>
 8013a46:	b9c0      	cbnz	r0, 8013a7a <sin+0x7a>
 8013a48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013a4c:	ed9d 0b00 	vldr	d0, [sp]
 8013a50:	2001      	movs	r0, #1
 8013a52:	f000 fd61 	bl	8014518 <__kernel_sin>
 8013a56:	e7ea      	b.n	8013a2e <sin+0x2e>
 8013a58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013a5c:	ed9d 0b00 	vldr	d0, [sp]
 8013a60:	f000 fcf2 	bl	8014448 <__kernel_cos>
 8013a64:	e7e3      	b.n	8013a2e <sin+0x2e>
 8013a66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013a6a:	ed9d 0b00 	vldr	d0, [sp]
 8013a6e:	2001      	movs	r0, #1
 8013a70:	f000 fd52 	bl	8014518 <__kernel_sin>
 8013a74:	eeb1 0b40 	vneg.f64	d0, d0
 8013a78:	e7d9      	b.n	8013a2e <sin+0x2e>
 8013a7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013a7e:	ed9d 0b00 	vldr	d0, [sp]
 8013a82:	f000 fce1 	bl	8014448 <__kernel_cos>
 8013a86:	e7f5      	b.n	8013a74 <sin+0x74>
	...
 8013a90:	3fe921fb 	.word	0x3fe921fb
 8013a94:	7fefffff 	.word	0x7fefffff

08013a98 <cimag>:
 8013a98:	eeb0 0b41 	vmov.f64	d0, d1
 8013a9c:	4770      	bx	lr

08013a9e <creal>:
 8013a9e:	4770      	bx	lr

08013aa0 <floor>:
 8013aa0:	ee10 3a90 	vmov	r3, s1
 8013aa4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8013aa8:	ee10 2a10 	vmov	r2, s0
 8013aac:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8013ab0:	2913      	cmp	r1, #19
 8013ab2:	b530      	push	{r4, r5, lr}
 8013ab4:	4615      	mov	r5, r2
 8013ab6:	dc33      	bgt.n	8013b20 <floor+0x80>
 8013ab8:	2900      	cmp	r1, #0
 8013aba:	da18      	bge.n	8013aee <floor+0x4e>
 8013abc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8013b80 <floor+0xe0>
 8013ac0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013ac4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013acc:	dd0a      	ble.n	8013ae4 <floor+0x44>
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	da50      	bge.n	8013b74 <floor+0xd4>
 8013ad2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013ad6:	4313      	orrs	r3, r2
 8013ad8:	2200      	movs	r2, #0
 8013ada:	4293      	cmp	r3, r2
 8013adc:	4b2a      	ldr	r3, [pc, #168]	@ (8013b88 <floor+0xe8>)
 8013ade:	bf08      	it	eq
 8013ae0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	4610      	mov	r0, r2
 8013ae8:	ec41 0b10 	vmov	d0, r0, r1
 8013aec:	e01f      	b.n	8013b2e <floor+0x8e>
 8013aee:	4827      	ldr	r0, [pc, #156]	@ (8013b8c <floor+0xec>)
 8013af0:	4108      	asrs	r0, r1
 8013af2:	ea03 0400 	and.w	r4, r3, r0
 8013af6:	4314      	orrs	r4, r2
 8013af8:	d019      	beq.n	8013b2e <floor+0x8e>
 8013afa:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013b80 <floor+0xe0>
 8013afe:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013b02:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b0a:	ddeb      	ble.n	8013ae4 <floor+0x44>
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	bfbe      	ittt	lt
 8013b10:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8013b14:	410a      	asrlt	r2, r1
 8013b16:	189b      	addlt	r3, r3, r2
 8013b18:	ea23 0300 	bic.w	r3, r3, r0
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	e7e1      	b.n	8013ae4 <floor+0x44>
 8013b20:	2933      	cmp	r1, #51	@ 0x33
 8013b22:	dd05      	ble.n	8013b30 <floor+0x90>
 8013b24:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013b28:	d101      	bne.n	8013b2e <floor+0x8e>
 8013b2a:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013b2e:	bd30      	pop	{r4, r5, pc}
 8013b30:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8013b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013b38:	40e0      	lsrs	r0, r4
 8013b3a:	4210      	tst	r0, r2
 8013b3c:	d0f7      	beq.n	8013b2e <floor+0x8e>
 8013b3e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8013b80 <floor+0xe0>
 8013b42:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013b46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b4e:	ddc9      	ble.n	8013ae4 <floor+0x44>
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	da02      	bge.n	8013b5a <floor+0xba>
 8013b54:	2914      	cmp	r1, #20
 8013b56:	d103      	bne.n	8013b60 <floor+0xc0>
 8013b58:	3301      	adds	r3, #1
 8013b5a:	ea22 0200 	bic.w	r2, r2, r0
 8013b5e:	e7c1      	b.n	8013ae4 <floor+0x44>
 8013b60:	2401      	movs	r4, #1
 8013b62:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8013b66:	fa04 f101 	lsl.w	r1, r4, r1
 8013b6a:	440a      	add	r2, r1
 8013b6c:	42aa      	cmp	r2, r5
 8013b6e:	bf38      	it	cc
 8013b70:	191b      	addcc	r3, r3, r4
 8013b72:	e7f2      	b.n	8013b5a <floor+0xba>
 8013b74:	2200      	movs	r2, #0
 8013b76:	4613      	mov	r3, r2
 8013b78:	e7b4      	b.n	8013ae4 <floor+0x44>
 8013b7a:	bf00      	nop
 8013b7c:	f3af 8000 	nop.w
 8013b80:	8800759c 	.word	0x8800759c
 8013b84:	7e37e43c 	.word	0x7e37e43c
 8013b88:	bff00000 	.word	0xbff00000
 8013b8c:	000fffff 	.word	0x000fffff

08013b90 <__ieee754_rem_pio2>:
 8013b90:	b570      	push	{r4, r5, r6, lr}
 8013b92:	eeb0 7b40 	vmov.f64	d7, d0
 8013b96:	ee17 5a90 	vmov	r5, s15
 8013b9a:	4b99      	ldr	r3, [pc, #612]	@ (8013e00 <__ieee754_rem_pio2+0x270>)
 8013b9c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8013ba0:	429e      	cmp	r6, r3
 8013ba2:	b088      	sub	sp, #32
 8013ba4:	4604      	mov	r4, r0
 8013ba6:	d807      	bhi.n	8013bb8 <__ieee754_rem_pio2+0x28>
 8013ba8:	2200      	movs	r2, #0
 8013baa:	2300      	movs	r3, #0
 8013bac:	ed84 0b00 	vstr	d0, [r4]
 8013bb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013bb4:	2000      	movs	r0, #0
 8013bb6:	e01b      	b.n	8013bf0 <__ieee754_rem_pio2+0x60>
 8013bb8:	4b92      	ldr	r3, [pc, #584]	@ (8013e04 <__ieee754_rem_pio2+0x274>)
 8013bba:	429e      	cmp	r6, r3
 8013bbc:	d83b      	bhi.n	8013c36 <__ieee754_rem_pio2+0xa6>
 8013bbe:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8013bc2:	2d00      	cmp	r5, #0
 8013bc4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8013dc0 <__ieee754_rem_pio2+0x230>
 8013bc8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8013bcc:	dd19      	ble.n	8013c02 <__ieee754_rem_pio2+0x72>
 8013bce:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013bd2:	429e      	cmp	r6, r3
 8013bd4:	d00e      	beq.n	8013bf4 <__ieee754_rem_pio2+0x64>
 8013bd6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8013dc8 <__ieee754_rem_pio2+0x238>
 8013bda:	ee37 6b45 	vsub.f64	d6, d7, d5
 8013bde:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013be2:	ed84 6b00 	vstr	d6, [r4]
 8013be6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8013bea:	ed84 7b02 	vstr	d7, [r4, #8]
 8013bee:	2001      	movs	r0, #1
 8013bf0:	b008      	add	sp, #32
 8013bf2:	bd70      	pop	{r4, r5, r6, pc}
 8013bf4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8013dd0 <__ieee754_rem_pio2+0x240>
 8013bf8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8013dd8 <__ieee754_rem_pio2+0x248>
 8013bfc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013c00:	e7eb      	b.n	8013bda <__ieee754_rem_pio2+0x4a>
 8013c02:	429e      	cmp	r6, r3
 8013c04:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013c08:	d00e      	beq.n	8013c28 <__ieee754_rem_pio2+0x98>
 8013c0a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8013dc8 <__ieee754_rem_pio2+0x238>
 8013c0e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8013c12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013c16:	ed84 6b00 	vstr	d6, [r4]
 8013c1a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8013c1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013c22:	ed84 7b02 	vstr	d7, [r4, #8]
 8013c26:	e7e3      	b.n	8013bf0 <__ieee754_rem_pio2+0x60>
 8013c28:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8013dd0 <__ieee754_rem_pio2+0x240>
 8013c2c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8013dd8 <__ieee754_rem_pio2+0x248>
 8013c30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013c34:	e7eb      	b.n	8013c0e <__ieee754_rem_pio2+0x7e>
 8013c36:	4b74      	ldr	r3, [pc, #464]	@ (8013e08 <__ieee754_rem_pio2+0x278>)
 8013c38:	429e      	cmp	r6, r3
 8013c3a:	d870      	bhi.n	8013d1e <__ieee754_rem_pio2+0x18e>
 8013c3c:	f000 fcc4 	bl	80145c8 <fabs>
 8013c40:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8013c44:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013de0 <__ieee754_rem_pio2+0x250>
 8013c48:	eea0 7b06 	vfma.f64	d7, d0, d6
 8013c4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8013c50:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013c54:	ee17 0a90 	vmov	r0, s15
 8013c58:	eeb1 4b45 	vneg.f64	d4, d5
 8013c5c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8013dc0 <__ieee754_rem_pio2+0x230>
 8013c60:	eea5 0b47 	vfms.f64	d0, d5, d7
 8013c64:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8013dc8 <__ieee754_rem_pio2+0x238>
 8013c68:	281f      	cmp	r0, #31
 8013c6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8013c6e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013c72:	dc05      	bgt.n	8013c80 <__ieee754_rem_pio2+0xf0>
 8013c74:	4b65      	ldr	r3, [pc, #404]	@ (8013e0c <__ieee754_rem_pio2+0x27c>)
 8013c76:	1e42      	subs	r2, r0, #1
 8013c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c7c:	42b3      	cmp	r3, r6
 8013c7e:	d109      	bne.n	8013c94 <__ieee754_rem_pio2+0x104>
 8013c80:	ee16 3a90 	vmov	r3, s13
 8013c84:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013c88:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8013c8c:	2b10      	cmp	r3, #16
 8013c8e:	ea4f 5226 	mov.w	r2, r6, asr #20
 8013c92:	dc02      	bgt.n	8013c9a <__ieee754_rem_pio2+0x10a>
 8013c94:	ed84 6b00 	vstr	d6, [r4]
 8013c98:	e01a      	b.n	8013cd0 <__ieee754_rem_pio2+0x140>
 8013c9a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8013dd0 <__ieee754_rem_pio2+0x240>
 8013c9e:	eeb0 6b40 	vmov.f64	d6, d0
 8013ca2:	eea4 6b03 	vfma.f64	d6, d4, d3
 8013ca6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8013caa:	eea4 7b03 	vfma.f64	d7, d4, d3
 8013cae:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8013dd8 <__ieee754_rem_pio2+0x248>
 8013cb2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8013cb6:	ee36 3b47 	vsub.f64	d3, d6, d7
 8013cba:	ee13 3a90 	vmov	r3, s7
 8013cbe:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013cc2:	1ad3      	subs	r3, r2, r3
 8013cc4:	2b31      	cmp	r3, #49	@ 0x31
 8013cc6:	dc17      	bgt.n	8013cf8 <__ieee754_rem_pio2+0x168>
 8013cc8:	eeb0 0b46 	vmov.f64	d0, d6
 8013ccc:	ed84 3b00 	vstr	d3, [r4]
 8013cd0:	ed94 6b00 	vldr	d6, [r4]
 8013cd4:	2d00      	cmp	r5, #0
 8013cd6:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013cda:	ee30 0b47 	vsub.f64	d0, d0, d7
 8013cde:	ed84 0b02 	vstr	d0, [r4, #8]
 8013ce2:	da85      	bge.n	8013bf0 <__ieee754_rem_pio2+0x60>
 8013ce4:	eeb1 6b46 	vneg.f64	d6, d6
 8013ce8:	eeb1 0b40 	vneg.f64	d0, d0
 8013cec:	ed84 6b00 	vstr	d6, [r4]
 8013cf0:	ed84 0b02 	vstr	d0, [r4, #8]
 8013cf4:	4240      	negs	r0, r0
 8013cf6:	e77b      	b.n	8013bf0 <__ieee754_rem_pio2+0x60>
 8013cf8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8013de8 <__ieee754_rem_pio2+0x258>
 8013cfc:	eeb0 0b46 	vmov.f64	d0, d6
 8013d00:	eea4 0b07 	vfma.f64	d0, d4, d7
 8013d04:	ee36 6b40 	vsub.f64	d6, d6, d0
 8013d08:	eea4 6b07 	vfma.f64	d6, d4, d7
 8013d0c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8013df0 <__ieee754_rem_pio2+0x260>
 8013d10:	eeb0 7b46 	vmov.f64	d7, d6
 8013d14:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8013d18:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013d1c:	e7ba      	b.n	8013c94 <__ieee754_rem_pio2+0x104>
 8013d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8013e10 <__ieee754_rem_pio2+0x280>)
 8013d20:	429e      	cmp	r6, r3
 8013d22:	d906      	bls.n	8013d32 <__ieee754_rem_pio2+0x1a2>
 8013d24:	ee30 7b40 	vsub.f64	d7, d0, d0
 8013d28:	ed80 7b02 	vstr	d7, [r0, #8]
 8013d2c:	ed80 7b00 	vstr	d7, [r0]
 8013d30:	e740      	b.n	8013bb4 <__ieee754_rem_pio2+0x24>
 8013d32:	ee10 3a10 	vmov	r3, s0
 8013d36:	1532      	asrs	r2, r6, #20
 8013d38:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8013d42:	ec41 0b17 	vmov	d7, r0, r1
 8013d46:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013d4a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8013df8 <__ieee754_rem_pio2+0x268>
 8013d4e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013d52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013d56:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013d5a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013d5e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8013d62:	a808      	add	r0, sp, #32
 8013d64:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8013d68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013d6c:	ed8d 6b04 	vstr	d6, [sp, #16]
 8013d70:	ee27 7b05 	vmul.f64	d7, d7, d5
 8013d74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013d78:	2103      	movs	r1, #3
 8013d7a:	ed30 7b02 	vldmdb	r0!, {d7}
 8013d7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d86:	460b      	mov	r3, r1
 8013d88:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8013d8c:	d0f5      	beq.n	8013d7a <__ieee754_rem_pio2+0x1ea>
 8013d8e:	4921      	ldr	r1, [pc, #132]	@ (8013e14 <__ieee754_rem_pio2+0x284>)
 8013d90:	9101      	str	r1, [sp, #4]
 8013d92:	2102      	movs	r1, #2
 8013d94:	9100      	str	r1, [sp, #0]
 8013d96:	a802      	add	r0, sp, #8
 8013d98:	4621      	mov	r1, r4
 8013d9a:	f000 f8d9 	bl	8013f50 <__kernel_rem_pio2>
 8013d9e:	2d00      	cmp	r5, #0
 8013da0:	f6bf af26 	bge.w	8013bf0 <__ieee754_rem_pio2+0x60>
 8013da4:	ed94 7b00 	vldr	d7, [r4]
 8013da8:	eeb1 7b47 	vneg.f64	d7, d7
 8013dac:	ed84 7b00 	vstr	d7, [r4]
 8013db0:	ed94 7b02 	vldr	d7, [r4, #8]
 8013db4:	eeb1 7b47 	vneg.f64	d7, d7
 8013db8:	ed84 7b02 	vstr	d7, [r4, #8]
 8013dbc:	e79a      	b.n	8013cf4 <__ieee754_rem_pio2+0x164>
 8013dbe:	bf00      	nop
 8013dc0:	54400000 	.word	0x54400000
 8013dc4:	3ff921fb 	.word	0x3ff921fb
 8013dc8:	1a626331 	.word	0x1a626331
 8013dcc:	3dd0b461 	.word	0x3dd0b461
 8013dd0:	1a600000 	.word	0x1a600000
 8013dd4:	3dd0b461 	.word	0x3dd0b461
 8013dd8:	2e037073 	.word	0x2e037073
 8013ddc:	3ba3198a 	.word	0x3ba3198a
 8013de0:	6dc9c883 	.word	0x6dc9c883
 8013de4:	3fe45f30 	.word	0x3fe45f30
 8013de8:	2e000000 	.word	0x2e000000
 8013dec:	3ba3198a 	.word	0x3ba3198a
 8013df0:	252049c1 	.word	0x252049c1
 8013df4:	397b839a 	.word	0x397b839a
 8013df8:	00000000 	.word	0x00000000
 8013dfc:	41700000 	.word	0x41700000
 8013e00:	3fe921fb 	.word	0x3fe921fb
 8013e04:	4002d97b 	.word	0x4002d97b
 8013e08:	413921fb 	.word	0x413921fb
 8013e0c:	080166c8 	.word	0x080166c8
 8013e10:	7fefffff 	.word	0x7fefffff
 8013e14:	08016748 	.word	0x08016748

08013e18 <hypot>:
 8013e18:	b508      	push	{r3, lr}
 8013e1a:	ed2d 8b06 	vpush	{d8-d10}
 8013e1e:	eeb0 ab40 	vmov.f64	d10, d0
 8013e22:	eeb0 9b41 	vmov.f64	d9, d1
 8013e26:	f000 fc63 	bl	80146f0 <__ieee754_hypot>
 8013e2a:	eeb0 8b40 	vmov.f64	d8, d0
 8013e2e:	f000 fbd3 	bl	80145d8 <finite>
 8013e32:	b978      	cbnz	r0, 8013e54 <hypot+0x3c>
 8013e34:	eeb0 0b4a 	vmov.f64	d0, d10
 8013e38:	f000 fbce 	bl	80145d8 <finite>
 8013e3c:	b150      	cbz	r0, 8013e54 <hypot+0x3c>
 8013e3e:	eeb0 0b49 	vmov.f64	d0, d9
 8013e42:	f000 fbc9 	bl	80145d8 <finite>
 8013e46:	b128      	cbz	r0, 8013e54 <hypot+0x3c>
 8013e48:	f7fb fe6e 	bl	800fb28 <__errno>
 8013e4c:	ed9f 8b04 	vldr	d8, [pc, #16]	@ 8013e60 <hypot+0x48>
 8013e50:	2322      	movs	r3, #34	@ 0x22
 8013e52:	6003      	str	r3, [r0, #0]
 8013e54:	eeb0 0b48 	vmov.f64	d0, d8
 8013e58:	ecbd 8b06 	vpop	{d8-d10}
 8013e5c:	bd08      	pop	{r3, pc}
 8013e5e:	bf00      	nop
 8013e60:	00000000 	.word	0x00000000
 8013e64:	7ff00000 	.word	0x7ff00000

08013e68 <with_errno>:
 8013e68:	b510      	push	{r4, lr}
 8013e6a:	ed2d 8b02 	vpush	{d8}
 8013e6e:	eeb0 8b40 	vmov.f64	d8, d0
 8013e72:	4604      	mov	r4, r0
 8013e74:	f7fb fe58 	bl	800fb28 <__errno>
 8013e78:	eeb0 0b48 	vmov.f64	d0, d8
 8013e7c:	ecbd 8b02 	vpop	{d8}
 8013e80:	6004      	str	r4, [r0, #0]
 8013e82:	bd10      	pop	{r4, pc}

08013e84 <xflow>:
 8013e84:	b082      	sub	sp, #8
 8013e86:	b158      	cbz	r0, 8013ea0 <xflow+0x1c>
 8013e88:	eeb1 7b40 	vneg.f64	d7, d0
 8013e8c:	ed8d 7b00 	vstr	d7, [sp]
 8013e90:	ed9d 7b00 	vldr	d7, [sp]
 8013e94:	2022      	movs	r0, #34	@ 0x22
 8013e96:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013e9a:	b002      	add	sp, #8
 8013e9c:	f7ff bfe4 	b.w	8013e68 <with_errno>
 8013ea0:	eeb0 7b40 	vmov.f64	d7, d0
 8013ea4:	e7f2      	b.n	8013e8c <xflow+0x8>
	...

08013ea8 <__math_uflow>:
 8013ea8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013eb0 <__math_uflow+0x8>
 8013eac:	f7ff bfea 	b.w	8013e84 <xflow>
 8013eb0:	00000000 	.word	0x00000000
 8013eb4:	10000000 	.word	0x10000000

08013eb8 <__math_oflow>:
 8013eb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013ec0 <__math_oflow+0x8>
 8013ebc:	f7ff bfe2 	b.w	8013e84 <xflow>
 8013ec0:	00000000 	.word	0x00000000
 8013ec4:	70000000 	.word	0x70000000

08013ec8 <__math_divzero>:
 8013ec8:	b082      	sub	sp, #8
 8013eca:	2800      	cmp	r0, #0
 8013ecc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8013ed0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8013ed4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8013ed8:	ed8d 7b00 	vstr	d7, [sp]
 8013edc:	ed9d 0b00 	vldr	d0, [sp]
 8013ee0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8013ef0 <__math_divzero+0x28>
 8013ee4:	2022      	movs	r0, #34	@ 0x22
 8013ee6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8013eea:	b002      	add	sp, #8
 8013eec:	f7ff bfbc 	b.w	8013e68 <with_errno>
	...

08013ef8 <__math_invalid>:
 8013ef8:	eeb0 7b40 	vmov.f64	d7, d0
 8013efc:	eeb4 7b47 	vcmp.f64	d7, d7
 8013f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f04:	ee30 6b40 	vsub.f64	d6, d0, d0
 8013f08:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8013f0c:	d602      	bvs.n	8013f14 <__math_invalid+0x1c>
 8013f0e:	2021      	movs	r0, #33	@ 0x21
 8013f10:	f7ff bfaa 	b.w	8013e68 <with_errno>
 8013f14:	4770      	bx	lr

08013f16 <__math_check_uflow>:
 8013f16:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8013f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f1e:	d102      	bne.n	8013f26 <__math_check_uflow+0x10>
 8013f20:	2022      	movs	r0, #34	@ 0x22
 8013f22:	f7ff bfa1 	b.w	8013e68 <with_errno>
 8013f26:	4770      	bx	lr

08013f28 <__math_check_oflow>:
 8013f28:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8013f48 <__math_check_oflow+0x20>
 8013f2c:	eeb0 7bc0 	vabs.f64	d7, d0
 8013f30:	eeb4 7b46 	vcmp.f64	d7, d6
 8013f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f38:	dd02      	ble.n	8013f40 <__math_check_oflow+0x18>
 8013f3a:	2022      	movs	r0, #34	@ 0x22
 8013f3c:	f7ff bf94 	b.w	8013e68 <with_errno>
 8013f40:	4770      	bx	lr
 8013f42:	bf00      	nop
 8013f44:	f3af 8000 	nop.w
 8013f48:	ffffffff 	.word	0xffffffff
 8013f4c:	7fefffff 	.word	0x7fefffff

08013f50 <__kernel_rem_pio2>:
 8013f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f54:	ed2d 8b06 	vpush	{d8-d10}
 8013f58:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8013f5c:	469b      	mov	fp, r3
 8013f5e:	9001      	str	r0, [sp, #4]
 8013f60:	4bbb      	ldr	r3, [pc, #748]	@ (8014250 <__kernel_rem_pio2+0x300>)
 8013f62:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8013f64:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8013f68:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8013f6c:	f112 0f14 	cmn.w	r2, #20
 8013f70:	bfa8      	it	ge
 8013f72:	1ed3      	subge	r3, r2, #3
 8013f74:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8013f78:	bfb8      	it	lt
 8013f7a:	2300      	movlt	r3, #0
 8013f7c:	f06f 0517 	mvn.w	r5, #23
 8013f80:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 8014238 <__kernel_rem_pio2+0x2e8>
 8013f84:	bfa4      	itt	ge
 8013f86:	2018      	movge	r0, #24
 8013f88:	fb93 f3f0 	sdivge	r3, r3, r0
 8013f8c:	fb03 5505 	mla	r5, r3, r5, r5
 8013f90:	eba3 040a 	sub.w	r4, r3, sl
 8013f94:	4415      	add	r5, r2
 8013f96:	460f      	mov	r7, r1
 8013f98:	eb09 060a 	add.w	r6, r9, sl
 8013f9c:	a81a      	add	r0, sp, #104	@ 0x68
 8013f9e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	42b2      	cmp	r2, r6
 8013fa6:	dd0e      	ble.n	8013fc6 <__kernel_rem_pio2+0x76>
 8013fa8:	aa1a      	add	r2, sp, #104	@ 0x68
 8013faa:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8013fae:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8013fb2:	2600      	movs	r6, #0
 8013fb4:	454e      	cmp	r6, r9
 8013fb6:	dc25      	bgt.n	8014004 <__kernel_rem_pio2+0xb4>
 8013fb8:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 8014238 <__kernel_rem_pio2+0x2e8>
 8013fbc:	f8dd c004 	ldr.w	ip, [sp, #4]
 8013fc0:	4614      	mov	r4, r2
 8013fc2:	2000      	movs	r0, #0
 8013fc4:	e015      	b.n	8013ff2 <__kernel_rem_pio2+0xa2>
 8013fc6:	42d4      	cmn	r4, r2
 8013fc8:	d409      	bmi.n	8013fde <__kernel_rem_pio2+0x8e>
 8013fca:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8013fce:	ee07 1a90 	vmov	s15, r1
 8013fd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013fd6:	eca0 7b02 	vstmia	r0!, {d7}
 8013fda:	3201      	adds	r2, #1
 8013fdc:	e7e2      	b.n	8013fa4 <__kernel_rem_pio2+0x54>
 8013fde:	eeb0 7b46 	vmov.f64	d7, d6
 8013fe2:	e7f8      	b.n	8013fd6 <__kernel_rem_pio2+0x86>
 8013fe4:	ecbc 5b02 	vldmia	ip!, {d5}
 8013fe8:	ed94 6b00 	vldr	d6, [r4]
 8013fec:	3001      	adds	r0, #1
 8013fee:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013ff2:	4550      	cmp	r0, sl
 8013ff4:	f1a4 0408 	sub.w	r4, r4, #8
 8013ff8:	ddf4      	ble.n	8013fe4 <__kernel_rem_pio2+0x94>
 8013ffa:	ecae 7b02 	vstmia	lr!, {d7}
 8013ffe:	3601      	adds	r6, #1
 8014000:	3208      	adds	r2, #8
 8014002:	e7d7      	b.n	8013fb4 <__kernel_rem_pio2+0x64>
 8014004:	aa06      	add	r2, sp, #24
 8014006:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 8014240 <__kernel_rem_pio2+0x2f0>
 801400a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8014248 <__kernel_rem_pio2+0x2f8>
 801400e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8014012:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8014016:	9203      	str	r2, [sp, #12]
 8014018:	9302      	str	r3, [sp, #8]
 801401a:	464c      	mov	r4, r9
 801401c:	00e3      	lsls	r3, r4, #3
 801401e:	9304      	str	r3, [sp, #16]
 8014020:	ab92      	add	r3, sp, #584	@ 0x248
 8014022:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014026:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801402a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801402c:	ab06      	add	r3, sp, #24
 801402e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8014032:	461e      	mov	r6, r3
 8014034:	4620      	mov	r0, r4
 8014036:	2800      	cmp	r0, #0
 8014038:	f1a2 0208 	sub.w	r2, r2, #8
 801403c:	dc4a      	bgt.n	80140d4 <__kernel_rem_pio2+0x184>
 801403e:	4628      	mov	r0, r5
 8014040:	9305      	str	r3, [sp, #20]
 8014042:	f000 fad5 	bl	80145f0 <scalbn>
 8014046:	eeb0 8b40 	vmov.f64	d8, d0
 801404a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 801404e:	ee28 0b00 	vmul.f64	d0, d8, d0
 8014052:	f7ff fd25 	bl	8013aa0 <floor>
 8014056:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801405a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801405e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8014062:	2d00      	cmp	r5, #0
 8014064:	ee17 8a90 	vmov	r8, s15
 8014068:	9b05      	ldr	r3, [sp, #20]
 801406a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801406e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8014072:	dd41      	ble.n	80140f8 <__kernel_rem_pio2+0x1a8>
 8014074:	1e60      	subs	r0, r4, #1
 8014076:	aa06      	add	r2, sp, #24
 8014078:	f1c5 0c18 	rsb	ip, r5, #24
 801407c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8014080:	fa46 f20c 	asr.w	r2, r6, ip
 8014084:	4490      	add	r8, r2
 8014086:	fa02 f20c 	lsl.w	r2, r2, ip
 801408a:	1ab6      	subs	r6, r6, r2
 801408c:	aa06      	add	r2, sp, #24
 801408e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8014092:	f1c5 0217 	rsb	r2, r5, #23
 8014096:	4116      	asrs	r6, r2
 8014098:	2e00      	cmp	r6, #0
 801409a:	dd3c      	ble.n	8014116 <__kernel_rem_pio2+0x1c6>
 801409c:	f04f 0c00 	mov.w	ip, #0
 80140a0:	f108 0801 	add.w	r8, r8, #1
 80140a4:	4660      	mov	r0, ip
 80140a6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 80140aa:	4564      	cmp	r4, ip
 80140ac:	dc66      	bgt.n	801417c <__kernel_rem_pio2+0x22c>
 80140ae:	2d00      	cmp	r5, #0
 80140b0:	dd03      	ble.n	80140ba <__kernel_rem_pio2+0x16a>
 80140b2:	2d01      	cmp	r5, #1
 80140b4:	d072      	beq.n	801419c <__kernel_rem_pio2+0x24c>
 80140b6:	2d02      	cmp	r5, #2
 80140b8:	d07a      	beq.n	80141b0 <__kernel_rem_pio2+0x260>
 80140ba:	2e02      	cmp	r6, #2
 80140bc:	d12b      	bne.n	8014116 <__kernel_rem_pio2+0x1c6>
 80140be:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80140c2:	ee30 8b48 	vsub.f64	d8, d0, d8
 80140c6:	b330      	cbz	r0, 8014116 <__kernel_rem_pio2+0x1c6>
 80140c8:	4628      	mov	r0, r5
 80140ca:	f000 fa91 	bl	80145f0 <scalbn>
 80140ce:	ee38 8b40 	vsub.f64	d8, d8, d0
 80140d2:	e020      	b.n	8014116 <__kernel_rem_pio2+0x1c6>
 80140d4:	ee20 7b09 	vmul.f64	d7, d0, d9
 80140d8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80140dc:	3801      	subs	r0, #1
 80140de:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80140e2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80140e6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80140ea:	eca6 0a01 	vstmia	r6!, {s0}
 80140ee:	ed92 0b00 	vldr	d0, [r2]
 80140f2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80140f6:	e79e      	b.n	8014036 <__kernel_rem_pio2+0xe6>
 80140f8:	d105      	bne.n	8014106 <__kernel_rem_pio2+0x1b6>
 80140fa:	1e62      	subs	r2, r4, #1
 80140fc:	a906      	add	r1, sp, #24
 80140fe:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8014102:	15f6      	asrs	r6, r6, #23
 8014104:	e7c8      	b.n	8014098 <__kernel_rem_pio2+0x148>
 8014106:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801410a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801410e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014112:	da31      	bge.n	8014178 <__kernel_rem_pio2+0x228>
 8014114:	2600      	movs	r6, #0
 8014116:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411e:	f040 809b 	bne.w	8014258 <__kernel_rem_pio2+0x308>
 8014122:	1e62      	subs	r2, r4, #1
 8014124:	2000      	movs	r0, #0
 8014126:	454a      	cmp	r2, r9
 8014128:	da49      	bge.n	80141be <__kernel_rem_pio2+0x26e>
 801412a:	2800      	cmp	r0, #0
 801412c:	d062      	beq.n	80141f4 <__kernel_rem_pio2+0x2a4>
 801412e:	3c01      	subs	r4, #1
 8014130:	ab06      	add	r3, sp, #24
 8014132:	3d18      	subs	r5, #24
 8014134:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d0f8      	beq.n	801412e <__kernel_rem_pio2+0x1de>
 801413c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014140:	4628      	mov	r0, r5
 8014142:	f000 fa55 	bl	80145f0 <scalbn>
 8014146:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8014240 <__kernel_rem_pio2+0x2f0>
 801414a:	1c62      	adds	r2, r4, #1
 801414c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801414e:	00d3      	lsls	r3, r2, #3
 8014150:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014154:	4622      	mov	r2, r4
 8014156:	2a00      	cmp	r2, #0
 8014158:	f280 80a8 	bge.w	80142ac <__kernel_rem_pio2+0x35c>
 801415c:	4622      	mov	r2, r4
 801415e:	2a00      	cmp	r2, #0
 8014160:	f2c0 80c6 	blt.w	80142f0 <__kernel_rem_pio2+0x3a0>
 8014164:	a96a      	add	r1, sp, #424	@ 0x1a8
 8014166:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801416a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8014238 <__kernel_rem_pio2+0x2e8>
 801416e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8014254 <__kernel_rem_pio2+0x304>
 8014172:	2000      	movs	r0, #0
 8014174:	1aa1      	subs	r1, r4, r2
 8014176:	e0b0      	b.n	80142da <__kernel_rem_pio2+0x38a>
 8014178:	2602      	movs	r6, #2
 801417a:	e78f      	b.n	801409c <__kernel_rem_pio2+0x14c>
 801417c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014180:	b948      	cbnz	r0, 8014196 <__kernel_rem_pio2+0x246>
 8014182:	b122      	cbz	r2, 801418e <__kernel_rem_pio2+0x23e>
 8014184:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8014188:	f843 2c04 	str.w	r2, [r3, #-4]
 801418c:	2201      	movs	r2, #1
 801418e:	f10c 0c01 	add.w	ip, ip, #1
 8014192:	4610      	mov	r0, r2
 8014194:	e789      	b.n	80140aa <__kernel_rem_pio2+0x15a>
 8014196:	ebae 0202 	sub.w	r2, lr, r2
 801419a:	e7f5      	b.n	8014188 <__kernel_rem_pio2+0x238>
 801419c:	1e62      	subs	r2, r4, #1
 801419e:	ab06      	add	r3, sp, #24
 80141a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80141a8:	a906      	add	r1, sp, #24
 80141aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80141ae:	e784      	b.n	80140ba <__kernel_rem_pio2+0x16a>
 80141b0:	1e62      	subs	r2, r4, #1
 80141b2:	ab06      	add	r3, sp, #24
 80141b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80141bc:	e7f4      	b.n	80141a8 <__kernel_rem_pio2+0x258>
 80141be:	ab06      	add	r3, sp, #24
 80141c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141c4:	3a01      	subs	r2, #1
 80141c6:	4318      	orrs	r0, r3
 80141c8:	e7ad      	b.n	8014126 <__kernel_rem_pio2+0x1d6>
 80141ca:	3301      	adds	r3, #1
 80141cc:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d0fa      	beq.n	80141ca <__kernel_rem_pio2+0x27a>
 80141d4:	9a04      	ldr	r2, [sp, #16]
 80141d6:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 80141da:	446a      	add	r2, sp
 80141dc:	eb04 000b 	add.w	r0, r4, fp
 80141e0:	a91a      	add	r1, sp, #104	@ 0x68
 80141e2:	1c66      	adds	r6, r4, #1
 80141e4:	3a98      	subs	r2, #152	@ 0x98
 80141e6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80141ea:	4423      	add	r3, r4
 80141ec:	42b3      	cmp	r3, r6
 80141ee:	da04      	bge.n	80141fa <__kernel_rem_pio2+0x2aa>
 80141f0:	461c      	mov	r4, r3
 80141f2:	e713      	b.n	801401c <__kernel_rem_pio2+0xcc>
 80141f4:	9a03      	ldr	r2, [sp, #12]
 80141f6:	2301      	movs	r3, #1
 80141f8:	e7e8      	b.n	80141cc <__kernel_rem_pio2+0x27c>
 80141fa:	9902      	ldr	r1, [sp, #8]
 80141fc:	f8dd c004 	ldr.w	ip, [sp, #4]
 8014200:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8014204:	9104      	str	r1, [sp, #16]
 8014206:	ee07 1a90 	vmov	s15, r1
 801420a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801420e:	2400      	movs	r4, #0
 8014210:	eca0 7b02 	vstmia	r0!, {d7}
 8014214:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014238 <__kernel_rem_pio2+0x2e8>
 8014218:	4686      	mov	lr, r0
 801421a:	4554      	cmp	r4, sl
 801421c:	dd03      	ble.n	8014226 <__kernel_rem_pio2+0x2d6>
 801421e:	eca2 7b02 	vstmia	r2!, {d7}
 8014222:	3601      	adds	r6, #1
 8014224:	e7e2      	b.n	80141ec <__kernel_rem_pio2+0x29c>
 8014226:	ecbc 5b02 	vldmia	ip!, {d5}
 801422a:	ed3e 6b02 	vldmdb	lr!, {d6}
 801422e:	3401      	adds	r4, #1
 8014230:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014234:	e7f1      	b.n	801421a <__kernel_rem_pio2+0x2ca>
 8014236:	bf00      	nop
	...
 8014244:	3e700000 	.word	0x3e700000
 8014248:	00000000 	.word	0x00000000
 801424c:	41700000 	.word	0x41700000
 8014250:	08017100 	.word	0x08017100
 8014254:	080170c0 	.word	0x080170c0
 8014258:	4268      	negs	r0, r5
 801425a:	eeb0 0b48 	vmov.f64	d0, d8
 801425e:	f000 f9c7 	bl	80145f0 <scalbn>
 8014262:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8014430 <__kernel_rem_pio2+0x4e0>
 8014266:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801426a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801426e:	db17      	blt.n	80142a0 <__kernel_rem_pio2+0x350>
 8014270:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8014438 <__kernel_rem_pio2+0x4e8>
 8014274:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014278:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801427c:	aa06      	add	r2, sp, #24
 801427e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8014282:	eea5 0b46 	vfms.f64	d0, d5, d6
 8014286:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801428a:	3518      	adds	r5, #24
 801428c:	ee10 3a10 	vmov	r3, s0
 8014290:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014294:	ee17 3a10 	vmov	r3, s14
 8014298:	3401      	adds	r4, #1
 801429a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801429e:	e74d      	b.n	801413c <__kernel_rem_pio2+0x1ec>
 80142a0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80142a4:	aa06      	add	r2, sp, #24
 80142a6:	ee10 3a10 	vmov	r3, s0
 80142aa:	e7f6      	b.n	801429a <__kernel_rem_pio2+0x34a>
 80142ac:	a806      	add	r0, sp, #24
 80142ae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80142b2:	9001      	str	r0, [sp, #4]
 80142b4:	ee07 0a90 	vmov	s15, r0
 80142b8:	3a01      	subs	r2, #1
 80142ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80142be:	ee27 7b00 	vmul.f64	d7, d7, d0
 80142c2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80142c6:	ed21 7b02 	vstmdb	r1!, {d7}
 80142ca:	e744      	b.n	8014156 <__kernel_rem_pio2+0x206>
 80142cc:	ecbc 5b02 	vldmia	ip!, {d5}
 80142d0:	ecb5 6b02 	vldmia	r5!, {d6}
 80142d4:	3001      	adds	r0, #1
 80142d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80142da:	4548      	cmp	r0, r9
 80142dc:	dc01      	bgt.n	80142e2 <__kernel_rem_pio2+0x392>
 80142de:	4281      	cmp	r1, r0
 80142e0:	daf4      	bge.n	80142cc <__kernel_rem_pio2+0x37c>
 80142e2:	a842      	add	r0, sp, #264	@ 0x108
 80142e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80142e8:	ed81 7b00 	vstr	d7, [r1]
 80142ec:	3a01      	subs	r2, #1
 80142ee:	e736      	b.n	801415e <__kernel_rem_pio2+0x20e>
 80142f0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80142f2:	2a02      	cmp	r2, #2
 80142f4:	dc0a      	bgt.n	801430c <__kernel_rem_pio2+0x3bc>
 80142f6:	2a00      	cmp	r2, #0
 80142f8:	dc2d      	bgt.n	8014356 <__kernel_rem_pio2+0x406>
 80142fa:	d046      	beq.n	801438a <__kernel_rem_pio2+0x43a>
 80142fc:	f008 0007 	and.w	r0, r8, #7
 8014300:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8014304:	ecbd 8b06 	vpop	{d8-d10}
 8014308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801430c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801430e:	2a03      	cmp	r2, #3
 8014310:	d1f4      	bne.n	80142fc <__kernel_rem_pio2+0x3ac>
 8014312:	a942      	add	r1, sp, #264	@ 0x108
 8014314:	f1a3 0208 	sub.w	r2, r3, #8
 8014318:	440a      	add	r2, r1
 801431a:	4611      	mov	r1, r2
 801431c:	4620      	mov	r0, r4
 801431e:	2800      	cmp	r0, #0
 8014320:	f1a1 0108 	sub.w	r1, r1, #8
 8014324:	dc52      	bgt.n	80143cc <__kernel_rem_pio2+0x47c>
 8014326:	4621      	mov	r1, r4
 8014328:	2901      	cmp	r1, #1
 801432a:	f1a2 0208 	sub.w	r2, r2, #8
 801432e:	dc5d      	bgt.n	80143ec <__kernel_rem_pio2+0x49c>
 8014330:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8014440 <__kernel_rem_pio2+0x4f0>
 8014334:	aa42      	add	r2, sp, #264	@ 0x108
 8014336:	4413      	add	r3, r2
 8014338:	2c01      	cmp	r4, #1
 801433a:	dc67      	bgt.n	801440c <__kernel_rem_pio2+0x4bc>
 801433c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8014340:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8014344:	2e00      	cmp	r6, #0
 8014346:	d167      	bne.n	8014418 <__kernel_rem_pio2+0x4c8>
 8014348:	ed87 5b00 	vstr	d5, [r7]
 801434c:	ed87 6b02 	vstr	d6, [r7, #8]
 8014350:	ed87 7b04 	vstr	d7, [r7, #16]
 8014354:	e7d2      	b.n	80142fc <__kernel_rem_pio2+0x3ac>
 8014356:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8014440 <__kernel_rem_pio2+0x4f0>
 801435a:	aa42      	add	r2, sp, #264	@ 0x108
 801435c:	4413      	add	r3, r2
 801435e:	4622      	mov	r2, r4
 8014360:	2a00      	cmp	r2, #0
 8014362:	da24      	bge.n	80143ae <__kernel_rem_pio2+0x45e>
 8014364:	b34e      	cbz	r6, 80143ba <__kernel_rem_pio2+0x46a>
 8014366:	eeb1 7b46 	vneg.f64	d7, d6
 801436a:	ed87 7b00 	vstr	d7, [r7]
 801436e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8014372:	aa44      	add	r2, sp, #272	@ 0x110
 8014374:	2301      	movs	r3, #1
 8014376:	ee37 7b46 	vsub.f64	d7, d7, d6
 801437a:	429c      	cmp	r4, r3
 801437c:	da20      	bge.n	80143c0 <__kernel_rem_pio2+0x470>
 801437e:	b10e      	cbz	r6, 8014384 <__kernel_rem_pio2+0x434>
 8014380:	eeb1 7b47 	vneg.f64	d7, d7
 8014384:	ed87 7b02 	vstr	d7, [r7, #8]
 8014388:	e7b8      	b.n	80142fc <__kernel_rem_pio2+0x3ac>
 801438a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8014440 <__kernel_rem_pio2+0x4f0>
 801438e:	aa42      	add	r2, sp, #264	@ 0x108
 8014390:	4413      	add	r3, r2
 8014392:	2c00      	cmp	r4, #0
 8014394:	da05      	bge.n	80143a2 <__kernel_rem_pio2+0x452>
 8014396:	b10e      	cbz	r6, 801439c <__kernel_rem_pio2+0x44c>
 8014398:	eeb1 7b47 	vneg.f64	d7, d7
 801439c:	ed87 7b00 	vstr	d7, [r7]
 80143a0:	e7ac      	b.n	80142fc <__kernel_rem_pio2+0x3ac>
 80143a2:	ed33 6b02 	vldmdb	r3!, {d6}
 80143a6:	3c01      	subs	r4, #1
 80143a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80143ac:	e7f1      	b.n	8014392 <__kernel_rem_pio2+0x442>
 80143ae:	ed33 7b02 	vldmdb	r3!, {d7}
 80143b2:	3a01      	subs	r2, #1
 80143b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80143b8:	e7d2      	b.n	8014360 <__kernel_rem_pio2+0x410>
 80143ba:	eeb0 7b46 	vmov.f64	d7, d6
 80143be:	e7d4      	b.n	801436a <__kernel_rem_pio2+0x41a>
 80143c0:	ecb2 6b02 	vldmia	r2!, {d6}
 80143c4:	3301      	adds	r3, #1
 80143c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80143ca:	e7d6      	b.n	801437a <__kernel_rem_pio2+0x42a>
 80143cc:	ed91 7b00 	vldr	d7, [r1]
 80143d0:	ed91 5b02 	vldr	d5, [r1, #8]
 80143d4:	3801      	subs	r0, #1
 80143d6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80143da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80143de:	ed81 6b00 	vstr	d6, [r1]
 80143e2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80143e6:	ed81 7b02 	vstr	d7, [r1, #8]
 80143ea:	e798      	b.n	801431e <__kernel_rem_pio2+0x3ce>
 80143ec:	ed92 7b00 	vldr	d7, [r2]
 80143f0:	ed92 5b02 	vldr	d5, [r2, #8]
 80143f4:	3901      	subs	r1, #1
 80143f6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80143fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80143fe:	ed82 6b00 	vstr	d6, [r2]
 8014402:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014406:	ed82 7b02 	vstr	d7, [r2, #8]
 801440a:	e78d      	b.n	8014328 <__kernel_rem_pio2+0x3d8>
 801440c:	ed33 6b02 	vldmdb	r3!, {d6}
 8014410:	3c01      	subs	r4, #1
 8014412:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014416:	e78f      	b.n	8014338 <__kernel_rem_pio2+0x3e8>
 8014418:	eeb1 5b45 	vneg.f64	d5, d5
 801441c:	eeb1 6b46 	vneg.f64	d6, d6
 8014420:	ed87 5b00 	vstr	d5, [r7]
 8014424:	eeb1 7b47 	vneg.f64	d7, d7
 8014428:	ed87 6b02 	vstr	d6, [r7, #8]
 801442c:	e790      	b.n	8014350 <__kernel_rem_pio2+0x400>
 801442e:	bf00      	nop
 8014430:	00000000 	.word	0x00000000
 8014434:	41700000 	.word	0x41700000
 8014438:	00000000 	.word	0x00000000
 801443c:	3e700000 	.word	0x3e700000
	...

08014448 <__kernel_cos>:
 8014448:	eeb0 5b40 	vmov.f64	d5, d0
 801444c:	ee15 1a90 	vmov	r1, s11
 8014450:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8014458:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 801445c:	d204      	bcs.n	8014468 <__kernel_cos+0x20>
 801445e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8014462:	ee17 3a90 	vmov	r3, s15
 8014466:	b343      	cbz	r3, 80144ba <__kernel_cos+0x72>
 8014468:	ee25 6b05 	vmul.f64	d6, d5, d5
 801446c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8014470:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 80144e0 <__kernel_cos+0x98>
 8014474:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80144e8 <__kernel_cos+0xa0>
 8014478:	eea6 4b07 	vfma.f64	d4, d6, d7
 801447c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80144f0 <__kernel_cos+0xa8>
 8014480:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014484:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80144f8 <__kernel_cos+0xb0>
 8014488:	eea7 4b06 	vfma.f64	d4, d7, d6
 801448c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8014500 <__kernel_cos+0xb8>
 8014490:	4b1f      	ldr	r3, [pc, #124]	@ (8014510 <__kernel_cos+0xc8>)
 8014492:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014496:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8014508 <__kernel_cos+0xc0>
 801449a:	4299      	cmp	r1, r3
 801449c:	eea7 4b06 	vfma.f64	d4, d7, d6
 80144a0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80144a4:	ee24 4b06 	vmul.f64	d4, d4, d6
 80144a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80144ac:	eea6 1b04 	vfma.f64	d1, d6, d4
 80144b0:	d804      	bhi.n	80144bc <__kernel_cos+0x74>
 80144b2:	ee37 7b41 	vsub.f64	d7, d7, d1
 80144b6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80144ba:	4770      	bx	lr
 80144bc:	4b15      	ldr	r3, [pc, #84]	@ (8014514 <__kernel_cos+0xcc>)
 80144be:	4299      	cmp	r1, r3
 80144c0:	d809      	bhi.n	80144d6 <__kernel_cos+0x8e>
 80144c2:	2200      	movs	r2, #0
 80144c4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 80144c8:	ec43 2b16 	vmov	d6, r2, r3
 80144cc:	ee30 0b46 	vsub.f64	d0, d0, d6
 80144d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80144d4:	e7ed      	b.n	80144b2 <__kernel_cos+0x6a>
 80144d6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 80144da:	e7f7      	b.n	80144cc <__kernel_cos+0x84>
 80144dc:	f3af 8000 	nop.w
 80144e0:	be8838d4 	.word	0xbe8838d4
 80144e4:	bda8fae9 	.word	0xbda8fae9
 80144e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80144ec:	3e21ee9e 	.word	0x3e21ee9e
 80144f0:	809c52ad 	.word	0x809c52ad
 80144f4:	be927e4f 	.word	0xbe927e4f
 80144f8:	19cb1590 	.word	0x19cb1590
 80144fc:	3efa01a0 	.word	0x3efa01a0
 8014500:	16c15177 	.word	0x16c15177
 8014504:	bf56c16c 	.word	0xbf56c16c
 8014508:	5555554c 	.word	0x5555554c
 801450c:	3fa55555 	.word	0x3fa55555
 8014510:	3fd33332 	.word	0x3fd33332
 8014514:	3fe90000 	.word	0x3fe90000

08014518 <__kernel_sin>:
 8014518:	ee10 3a90 	vmov	r3, s1
 801451c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014520:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8014524:	d204      	bcs.n	8014530 <__kernel_sin+0x18>
 8014526:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801452a:	ee17 3a90 	vmov	r3, s15
 801452e:	b35b      	cbz	r3, 8014588 <__kernel_sin+0x70>
 8014530:	ee20 6b00 	vmul.f64	d6, d0, d0
 8014534:	ee20 5b06 	vmul.f64	d5, d0, d6
 8014538:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8014590 <__kernel_sin+0x78>
 801453c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8014598 <__kernel_sin+0x80>
 8014540:	eea6 4b07 	vfma.f64	d4, d6, d7
 8014544:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80145a0 <__kernel_sin+0x88>
 8014548:	eea4 7b06 	vfma.f64	d7, d4, d6
 801454c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80145a8 <__kernel_sin+0x90>
 8014550:	eea7 4b06 	vfma.f64	d4, d7, d6
 8014554:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80145b0 <__kernel_sin+0x98>
 8014558:	eea4 7b06 	vfma.f64	d7, d4, d6
 801455c:	b930      	cbnz	r0, 801456c <__kernel_sin+0x54>
 801455e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 80145b8 <__kernel_sin+0xa0>
 8014562:	eea6 4b07 	vfma.f64	d4, d6, d7
 8014566:	eea4 0b05 	vfma.f64	d0, d4, d5
 801456a:	4770      	bx	lr
 801456c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8014570:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8014574:	eea1 7b04 	vfma.f64	d7, d1, d4
 8014578:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801457c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80145c0 <__kernel_sin+0xa8>
 8014580:	eea5 1b07 	vfma.f64	d1, d5, d7
 8014584:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014588:	4770      	bx	lr
 801458a:	bf00      	nop
 801458c:	f3af 8000 	nop.w
 8014590:	5acfd57c 	.word	0x5acfd57c
 8014594:	3de5d93a 	.word	0x3de5d93a
 8014598:	8a2b9ceb 	.word	0x8a2b9ceb
 801459c:	be5ae5e6 	.word	0xbe5ae5e6
 80145a0:	57b1fe7d 	.word	0x57b1fe7d
 80145a4:	3ec71de3 	.word	0x3ec71de3
 80145a8:	19c161d5 	.word	0x19c161d5
 80145ac:	bf2a01a0 	.word	0xbf2a01a0
 80145b0:	1110f8a6 	.word	0x1110f8a6
 80145b4:	3f811111 	.word	0x3f811111
 80145b8:	55555549 	.word	0x55555549
 80145bc:	bfc55555 	.word	0xbfc55555
 80145c0:	55555549 	.word	0x55555549
 80145c4:	3fc55555 	.word	0x3fc55555

080145c8 <fabs>:
 80145c8:	ec51 0b10 	vmov	r0, r1, d0
 80145cc:	4602      	mov	r2, r0
 80145ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80145d2:	ec43 2b10 	vmov	d0, r2, r3
 80145d6:	4770      	bx	lr

080145d8 <finite>:
 80145d8:	b082      	sub	sp, #8
 80145da:	ed8d 0b00 	vstr	d0, [sp]
 80145de:	9801      	ldr	r0, [sp, #4]
 80145e0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80145e4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80145e8:	0fc0      	lsrs	r0, r0, #31
 80145ea:	b002      	add	sp, #8
 80145ec:	4770      	bx	lr
	...

080145f0 <scalbn>:
 80145f0:	ee10 1a90 	vmov	r1, s1
 80145f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80145f8:	b98b      	cbnz	r3, 801461e <scalbn+0x2e>
 80145fa:	ee10 3a10 	vmov	r3, s0
 80145fe:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8014602:	4319      	orrs	r1, r3
 8014604:	d00a      	beq.n	801461c <scalbn+0x2c>
 8014606:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80146b8 <scalbn+0xc8>
 801460a:	4b37      	ldr	r3, [pc, #220]	@ (80146e8 <scalbn+0xf8>)
 801460c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014610:	4298      	cmp	r0, r3
 8014612:	da0b      	bge.n	801462c <scalbn+0x3c>
 8014614:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80146c0 <scalbn+0xd0>
 8014618:	ee20 0b07 	vmul.f64	d0, d0, d7
 801461c:	4770      	bx	lr
 801461e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014622:	4293      	cmp	r3, r2
 8014624:	d107      	bne.n	8014636 <scalbn+0x46>
 8014626:	ee30 0b00 	vadd.f64	d0, d0, d0
 801462a:	4770      	bx	lr
 801462c:	ee10 1a90 	vmov	r1, s1
 8014630:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014634:	3b36      	subs	r3, #54	@ 0x36
 8014636:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801463a:	4290      	cmp	r0, r2
 801463c:	dd0d      	ble.n	801465a <scalbn+0x6a>
 801463e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80146c8 <scalbn+0xd8>
 8014642:	ee10 3a90 	vmov	r3, s1
 8014646:	eeb0 6b47 	vmov.f64	d6, d7
 801464a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80146d0 <scalbn+0xe0>
 801464e:	2b00      	cmp	r3, #0
 8014650:	fe27 7b05 	vselge.f64	d7, d7, d5
 8014654:	ee27 0b06 	vmul.f64	d0, d7, d6
 8014658:	4770      	bx	lr
 801465a:	4418      	add	r0, r3
 801465c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8014660:	4298      	cmp	r0, r3
 8014662:	dcec      	bgt.n	801463e <scalbn+0x4e>
 8014664:	2800      	cmp	r0, #0
 8014666:	dd0a      	ble.n	801467e <scalbn+0x8e>
 8014668:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801466c:	ec53 2b10 	vmov	r2, r3, d0
 8014670:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8014674:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8014678:	ec43 2b10 	vmov	d0, r2, r3
 801467c:	4770      	bx	lr
 801467e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8014682:	da09      	bge.n	8014698 <scalbn+0xa8>
 8014684:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80146c0 <scalbn+0xd0>
 8014688:	ee10 3a90 	vmov	r3, s1
 801468c:	eeb0 6b47 	vmov.f64	d6, d7
 8014690:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80146d8 <scalbn+0xe8>
 8014694:	2b00      	cmp	r3, #0
 8014696:	e7db      	b.n	8014650 <scalbn+0x60>
 8014698:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 801469c:	ec53 2b10 	vmov	r2, r3, d0
 80146a0:	3036      	adds	r0, #54	@ 0x36
 80146a2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80146a6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80146aa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80146e0 <scalbn+0xf0>
 80146ae:	ec43 2b10 	vmov	d0, r2, r3
 80146b2:	e7b1      	b.n	8014618 <scalbn+0x28>
 80146b4:	f3af 8000 	nop.w
 80146b8:	00000000 	.word	0x00000000
 80146bc:	43500000 	.word	0x43500000
 80146c0:	c2f8f359 	.word	0xc2f8f359
 80146c4:	01a56e1f 	.word	0x01a56e1f
 80146c8:	8800759c 	.word	0x8800759c
 80146cc:	7e37e43c 	.word	0x7e37e43c
 80146d0:	8800759c 	.word	0x8800759c
 80146d4:	fe37e43c 	.word	0xfe37e43c
 80146d8:	c2f8f359 	.word	0xc2f8f359
 80146dc:	81a56e1f 	.word	0x81a56e1f
 80146e0:	00000000 	.word	0x00000000
 80146e4:	3c900000 	.word	0x3c900000
 80146e8:	ffff3cb0 	.word	0xffff3cb0
 80146ec:	00000000 	.word	0x00000000

080146f0 <__ieee754_hypot>:
 80146f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146f2:	ec51 0b10 	vmov	r0, r1, d0
 80146f6:	ec53 2b11 	vmov	r2, r3, d1
 80146fa:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 80146fe:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8014702:	42a5      	cmp	r5, r4
 8014704:	da05      	bge.n	8014712 <__ieee754_hypot+0x22>
 8014706:	462e      	mov	r6, r5
 8014708:	4625      	mov	r5, r4
 801470a:	4634      	mov	r4, r6
 801470c:	4606      	mov	r6, r0
 801470e:	4610      	mov	r0, r2
 8014710:	4632      	mov	r2, r6
 8014712:	4623      	mov	r3, r4
 8014714:	ec43 2b14 	vmov	d4, r2, r3
 8014718:	1b2b      	subs	r3, r5, r4
 801471a:	4629      	mov	r1, r5
 801471c:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8014720:	ec41 0b10 	vmov	d0, r0, r1
 8014724:	dd02      	ble.n	801472c <__ieee754_hypot+0x3c>
 8014726:	ee30 0b04 	vadd.f64	d0, d0, d4
 801472a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801472c:	4b46      	ldr	r3, [pc, #280]	@ (8014848 <__ieee754_hypot+0x158>)
 801472e:	429d      	cmp	r5, r3
 8014730:	dd58      	ble.n	80147e4 <__ieee754_hypot+0xf4>
 8014732:	4b46      	ldr	r3, [pc, #280]	@ (801484c <__ieee754_hypot+0x15c>)
 8014734:	429d      	cmp	r5, r3
 8014736:	dd0f      	ble.n	8014758 <__ieee754_hypot+0x68>
 8014738:	ee14 3a10 	vmov	r3, s8
 801473c:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8014740:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8014744:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8014748:	4305      	orrs	r5, r0
 801474a:	bf18      	it	ne
 801474c:	ee30 0b04 	vaddne.f64	d0, d0, d4
 8014750:	431c      	orrs	r4, r3
 8014752:	fe04 0b00 	vseleq.f64	d0, d4, d0
 8014756:	e7e8      	b.n	801472a <__ieee754_hypot+0x3a>
 8014758:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 801475c:	4602      	mov	r2, r0
 801475e:	462b      	mov	r3, r5
 8014760:	ec43 2b10 	vmov	d0, r2, r3
 8014764:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 8014768:	ec53 2b14 	vmov	r2, r3, d4
 801476c:	4623      	mov	r3, r4
 801476e:	ec43 2b14 	vmov	d4, r2, r3
 8014772:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8014776:	4b36      	ldr	r3, [pc, #216]	@ (8014850 <__ieee754_hypot+0x160>)
 8014778:	429c      	cmp	r4, r3
 801477a:	dc0e      	bgt.n	801479a <__ieee754_hypot+0xaa>
 801477c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8014780:	da32      	bge.n	80147e8 <__ieee754_hypot+0xf8>
 8014782:	ee14 3a10 	vmov	r3, s8
 8014786:	4323      	orrs	r3, r4
 8014788:	d0cf      	beq.n	801472a <__ieee754_hypot+0x3a>
 801478a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8014840 <__ieee754_hypot+0x150>
 801478e:	f2a6 36fe 	subw	r6, r6, #1022	@ 0x3fe
 8014792:	ee24 4b07 	vmul.f64	d4, d4, d7
 8014796:	ee20 0b07 	vmul.f64	d0, d0, d7
 801479a:	ee30 5b44 	vsub.f64	d5, d0, d4
 801479e:	eeb4 4bc5 	vcmpe.f64	d4, d5
 80147a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a6:	f04f 0200 	mov.w	r2, #0
 80147aa:	d52e      	bpl.n	801480a <__ieee754_hypot+0x11a>
 80147ac:	462b      	mov	r3, r5
 80147ae:	ec43 2b17 	vmov	d7, r2, r3
 80147b2:	ee30 6b07 	vadd.f64	d6, d0, d7
 80147b6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80147ba:	ee26 0b00 	vmul.f64	d0, d6, d0
 80147be:	eea4 0b04 	vfma.f64	d0, d4, d4
 80147c2:	eea7 0b07 	vfma.f64	d0, d7, d7
 80147c6:	f000 f845 	bl	8014854 <__ieee754_sqrt>
 80147ca:	2e00      	cmp	r6, #0
 80147cc:	d0ad      	beq.n	801472a <__ieee754_hypot+0x3a>
 80147ce:	0533      	lsls	r3, r6, #20
 80147d0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 80147d4:	2000      	movs	r0, #0
 80147d6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 80147da:	ec41 0b17 	vmov	d7, r0, r1
 80147de:	ee20 0b07 	vmul.f64	d0, d0, d7
 80147e2:	e7a2      	b.n	801472a <__ieee754_hypot+0x3a>
 80147e4:	2600      	movs	r6, #0
 80147e6:	e7c6      	b.n	8014776 <__ieee754_hypot+0x86>
 80147e8:	ec53 2b10 	vmov	r2, r3, d0
 80147ec:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 80147f0:	462b      	mov	r3, r5
 80147f2:	ec43 2b10 	vmov	d0, r2, r3
 80147f6:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 80147fa:	ec53 2b14 	vmov	r2, r3, d4
 80147fe:	4623      	mov	r3, r4
 8014800:	ec43 2b14 	vmov	d4, r2, r3
 8014804:	f5a6 7616 	sub.w	r6, r6, #600	@ 0x258
 8014808:	e7c7      	b.n	801479a <__ieee754_hypot+0xaa>
 801480a:	4623      	mov	r3, r4
 801480c:	ec43 2b16 	vmov	d6, r2, r3
 8014810:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 8014814:	2200      	movs	r2, #0
 8014816:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 801481a:	ec43 2b17 	vmov	d7, r2, r3
 801481e:	ee34 3b46 	vsub.f64	d3, d4, d6
 8014822:	eeb0 2b47 	vmov.f64	d2, d7
 8014826:	ee90 2b01 	vfnms.f64	d2, d0, d1
 801482a:	ee24 0b02 	vmul.f64	d0, d4, d2
 801482e:	eea3 0b07 	vfma.f64	d0, d3, d7
 8014832:	eea5 0b05 	vfma.f64	d0, d5, d5
 8014836:	eea6 0b07 	vfma.f64	d0, d6, d7
 801483a:	e7c4      	b.n	80147c6 <__ieee754_hypot+0xd6>
 801483c:	f3af 8000 	nop.w
 8014840:	00000000 	.word	0x00000000
 8014844:	7fd00000 	.word	0x7fd00000
 8014848:	5f300000 	.word	0x5f300000
 801484c:	7fefffff 	.word	0x7fefffff
 8014850:	20afffff 	.word	0x20afffff

08014854 <__ieee754_sqrt>:
 8014854:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8014858:	4770      	bx	lr
	...

0801485c <_init>:
 801485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801485e:	bf00      	nop
 8014860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014862:	bc08      	pop	{r3}
 8014864:	469e      	mov	lr, r3
 8014866:	4770      	bx	lr

08014868 <_fini>:
 8014868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801486a:	bf00      	nop
 801486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801486e:	bc08      	pop	{r3}
 8014870:	469e      	mov	lr, r3
 8014872:	4770      	bx	lr
