
2023D.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c8c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002870  08015f30  08015f30  00016f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080187a0  080187a0  000197a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080187a8  080187a8  000197a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080187b0  080187b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000006d4  24000000  080187b4  0001a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ARM.__at_0x30000000 00004000  240006e0  08018e88  0001a6e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000206e0  240046e0  0801ce88  0001e6e0  2**3
                  ALLOC
  9 ._user_heap_stack 00004000  24024dc0  0801ce88  0001edc0  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001e6e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00024e9a  00000000  00000000  0001e70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000470c  00000000  00000000  000435a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ac8  00000000  00000000  00047cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000014d5  00000000  00000000  00049780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d49e  00000000  00000000  0004ac55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00026cb9  00000000  00000000  000880f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017bb7c  00000000  00000000  000aedac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000086  00000000  00000000  0022a928  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008994  00000000  00000000  0022a9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000056  00000000  00000000  00233344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240046e0 	.word	0x240046e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015f14 	.word	0x08015f14

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240046e4 	.word	0x240046e4
 80002dc:	08015f14 	.word	0x08015f14

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 bac6 	b.w	8000934 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f962 	bl	8000678 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__muldc3>:
 80003c0:	ee20 5b02 	vmul.f64	d5, d0, d2
 80003c4:	ee21 4b03 	vmul.f64	d4, d1, d3
 80003c8:	ee35 7b44 	vsub.f64	d7, d5, d4
 80003cc:	eeb4 7b47 	vcmp.f64	d7, d7
 80003d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d4:	ed2d 8b0a 	vpush	{d8-d12}
 80003d8:	ee20 9b03 	vmul.f64	d9, d0, d3
 80003dc:	ee22 8b01 	vmul.f64	d8, d2, d1
 80003e0:	ee39 6b08 	vadd.f64	d6, d9, d8
 80003e4:	d606      	bvs.n	80003f4 <__muldc3+0x34>
 80003e6:	eeb0 0b47 	vmov.f64	d0, d7
 80003ea:	eeb0 1b46 	vmov.f64	d1, d6
 80003ee:	ecbd 8b0a 	vpop	{d8-d12}
 80003f2:	4770      	bx	lr
 80003f4:	eeb4 6b46 	vcmp.f64	d6, d6
 80003f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003fc:	d7f3      	bvc.n	80003e6 <__muldc3+0x26>
 80003fe:	eeb0 bbc0 	vabs.f64	d11, d0
 8000402:	eeb0 cbc1 	vabs.f64	d12, d1
 8000406:	ed9f ab94 	vldr	d10, [pc, #592]	@ 8000658 <__muldc3+0x298>
 800040a:	eeb4 bb4a 	vcmp.f64	d11, d10
 800040e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000412:	f300 809d 	bgt.w	8000550 <__muldc3+0x190>
 8000416:	eeb4 cb4a 	vcmp.f64	d12, d10
 800041a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800041e:	f300 8097 	bgt.w	8000550 <__muldc3+0x190>
 8000422:	2300      	movs	r3, #0
 8000424:	ed9f ab8c 	vldr	d10, [pc, #560]	@ 8000658 <__muldc3+0x298>
 8000428:	eeb0 bbc2 	vabs.f64	d11, d2
 800042c:	eeb0 cbc3 	vabs.f64	d12, d3
 8000430:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000438:	dc48      	bgt.n	80004cc <__muldc3+0x10c>
 800043a:	eeb4 cb4a 	vcmp.f64	d12, d10
 800043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000442:	dc43      	bgt.n	80004cc <__muldc3+0x10c>
 8000444:	bb9b      	cbnz	r3, 80004ae <__muldc3+0xee>
 8000446:	eeb0 5bc5 	vabs.f64	d5, d5
 800044a:	eeb4 5b4a 	vcmp.f64	d5, d10
 800044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000452:	dc14      	bgt.n	800047e <__muldc3+0xbe>
 8000454:	eeb0 4bc4 	vabs.f64	d4, d4
 8000458:	eeb4 4b4a 	vcmp.f64	d4, d10
 800045c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000460:	dc0d      	bgt.n	800047e <__muldc3+0xbe>
 8000462:	eeb0 9bc9 	vabs.f64	d9, d9
 8000466:	eeb4 9b4a 	vcmp.f64	d9, d10
 800046a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046e:	dc06      	bgt.n	800047e <__muldc3+0xbe>
 8000470:	eeb0 8bc8 	vabs.f64	d8, d8
 8000474:	eeb4 8b4a 	vcmp.f64	d8, d10
 8000478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800047c:	ddb3      	ble.n	80003e6 <__muldc3+0x26>
 800047e:	eeb4 0b40 	vcmp.f64	d0, d0
 8000482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000486:	f180 80dc 	bvs.w	8000642 <__muldc3+0x282>
 800048a:	eeb4 1b41 	vcmp.f64	d1, d1
 800048e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000492:	f180 80cc 	bvs.w	800062e <__muldc3+0x26e>
 8000496:	eeb4 2b42 	vcmp.f64	d2, d2
 800049a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800049e:	f180 80bc 	bvs.w	800061a <__muldc3+0x25a>
 80004a2:	eeb4 3b43 	vcmp.f64	d3, d3
 80004a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004aa:	f180 80ac 	bvs.w	8000606 <__muldc3+0x246>
 80004ae:	ee23 7b41 	vnmul.f64	d7, d3, d1
 80004b2:	ee21 1b02 	vmul.f64	d1, d1, d2
 80004b6:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8000660 <__muldc3+0x2a0>
 80004ba:	eea0 7b02 	vfma.f64	d7, d0, d2
 80004be:	eea0 1b03 	vfma.f64	d1, d0, d3
 80004c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80004c6:	ee21 6b06 	vmul.f64	d6, d1, d6
 80004ca:	e78c      	b.n	80003e6 <__muldc3+0x26>
 80004cc:	ed9f 7b62 	vldr	d7, [pc, #392]	@ 8000658 <__muldc3+0x298>
 80004d0:	eeb4 bb47 	vcmp.f64	d11, d7
 80004d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004d8:	bfcc      	ite	gt
 80004da:	2301      	movgt	r3, #1
 80004dc:	2300      	movle	r3, #0
 80004de:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 8000658 <__muldc3+0x298>
 80004e2:	ee07 3a10 	vmov	s14, r3
 80004e6:	eeb4 cb46 	vcmp.f64	d12, d6
 80004ea:	ee12 3a90 	vmov	r3, s5
 80004ee:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80004f8:	bfb8      	it	lt
 80004fa:	eeb1 7b47 	vneglt.f64	d7, d7
 80004fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000502:	bfcc      	ite	gt
 8000504:	2301      	movgt	r3, #1
 8000506:	2300      	movle	r3, #0
 8000508:	eeb0 2b47 	vmov.f64	d2, d7
 800050c:	ee07 3a10 	vmov	s14, r3
 8000510:	eeb4 0b40 	vcmp.f64	d0, d0
 8000514:	ee13 3a90 	vmov	r3, s7
 8000518:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800051c:	2b00      	cmp	r3, #0
 800051e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000522:	bfb8      	it	lt
 8000524:	eeb1 7b47 	vneglt.f64	d7, d7
 8000528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052c:	eeb0 3b47 	vmov.f64	d3, d7
 8000530:	d655      	bvs.n	80005de <__muldc3+0x21e>
 8000532:	eeb4 1b41 	vcmp.f64	d1, d1
 8000536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800053a:	d7b8      	bvc.n	80004ae <__muldc3+0xee>
 800053c:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000668 <__muldc3+0x2a8>
 8000540:	ed9f 7b4b 	vldr	d7, [pc, #300]	@ 8000670 <__muldc3+0x2b0>
 8000544:	ee11 3a90 	vmov	r3, s3
 8000548:	2b00      	cmp	r3, #0
 800054a:	fe26 1b07 	vselge.f64	d1, d6, d7
 800054e:	e7ae      	b.n	80004ae <__muldc3+0xee>
 8000550:	ed9f ab41 	vldr	d10, [pc, #260]	@ 8000658 <__muldc3+0x298>
 8000554:	eeb4 bb4a 	vcmp.f64	d11, d10
 8000558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800055c:	bfcc      	ite	gt
 800055e:	2301      	movgt	r3, #1
 8000560:	2300      	movle	r3, #0
 8000562:	ee0a 3a10 	vmov	s20, r3
 8000566:	ee10 3a90 	vmov	r3, s1
 800056a:	eeb8 abca 	vcvt.f64.s32	d10, s20
 800056e:	2b00      	cmp	r3, #0
 8000570:	eeb0 abca 	vabs.f64	d10, d10
 8000574:	bfb8      	it	lt
 8000576:	eeb1 ab4a 	vneglt.f64	d10, d10
 800057a:	eeb0 0b4a 	vmov.f64	d0, d10
 800057e:	ed9f ab36 	vldr	d10, [pc, #216]	@ 8000658 <__muldc3+0x298>
 8000582:	eeb4 cb4a 	vcmp.f64	d12, d10
 8000586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058a:	bfcc      	ite	gt
 800058c:	2301      	movgt	r3, #1
 800058e:	2300      	movle	r3, #0
 8000590:	ee0a 3a10 	vmov	s20, r3
 8000594:	eeb4 2b42 	vcmp.f64	d2, d2
 8000598:	ee11 3a90 	vmov	r3, s3
 800059c:	eeb8 abca 	vcvt.f64.s32	d10, s20
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	eeb0 abca 	vabs.f64	d10, d10
 80005a6:	bfb8      	it	lt
 80005a8:	eeb1 ab4a 	vneglt.f64	d10, d10
 80005ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005b0:	eeb0 1b4a 	vmov.f64	d1, d10
 80005b4:	d61d      	bvs.n	80005f2 <__muldc3+0x232>
 80005b6:	eeb4 3b43 	vcmp.f64	d3, d3
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	bf78      	it	vc
 80005c0:	2301      	movvc	r3, #1
 80005c2:	f5ff af2f 	bvc.w	8000424 <__muldc3+0x64>
 80005c6:	ee13 3a90 	vmov	r3, s7
 80005ca:	ed9f ab29 	vldr	d10, [pc, #164]	@ 8000670 <__muldc3+0x2b0>
 80005ce:	ed9f 3b26 	vldr	d3, [pc, #152]	@ 8000668 <__muldc3+0x2a8>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f04f 0301 	mov.w	r3, #1
 80005d8:	fe23 3b0a 	vselge.f64	d3, d3, d10
 80005dc:	e722      	b.n	8000424 <__muldc3+0x64>
 80005de:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8000668 <__muldc3+0x2a8>
 80005e2:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8000670 <__muldc3+0x2b0>
 80005e6:	ee10 3a90 	vmov	r3, s1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	fe26 0b07 	vselge.f64	d0, d6, d7
 80005f0:	e79f      	b.n	8000532 <__muldc3+0x172>
 80005f2:	ee12 3a90 	vmov	r3, s5
 80005f6:	ed9f ab1e 	vldr	d10, [pc, #120]	@ 8000670 <__muldc3+0x2b0>
 80005fa:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 8000668 <__muldc3+0x2a8>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	fe22 2b0a 	vselge.f64	d2, d2, d10
 8000604:	e7d7      	b.n	80005b6 <__muldc3+0x1f6>
 8000606:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8000668 <__muldc3+0x2a8>
 800060a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8000670 <__muldc3+0x2b0>
 800060e:	ee13 3a90 	vmov	r3, s7
 8000612:	2b00      	cmp	r3, #0
 8000614:	fe26 3b07 	vselge.f64	d3, d6, d7
 8000618:	e749      	b.n	80004ae <__muldc3+0xee>
 800061a:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8000668 <__muldc3+0x2a8>
 800061e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000670 <__muldc3+0x2b0>
 8000622:	ee12 3a90 	vmov	r3, s5
 8000626:	2b00      	cmp	r3, #0
 8000628:	fe26 2b07 	vselge.f64	d2, d6, d7
 800062c:	e739      	b.n	80004a2 <__muldc3+0xe2>
 800062e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8000668 <__muldc3+0x2a8>
 8000632:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000670 <__muldc3+0x2b0>
 8000636:	ee11 3a90 	vmov	r3, s3
 800063a:	2b00      	cmp	r3, #0
 800063c:	fe26 1b07 	vselge.f64	d1, d6, d7
 8000640:	e729      	b.n	8000496 <__muldc3+0xd6>
 8000642:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8000668 <__muldc3+0x2a8>
 8000646:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8000670 <__muldc3+0x2b0>
 800064a:	ee10 3a90 	vmov	r3, s1
 800064e:	2b00      	cmp	r3, #0
 8000650:	fe26 0b07 	vselge.f64	d0, d6, d7
 8000654:	e719      	b.n	800048a <__muldc3+0xca>
 8000656:	bf00      	nop
 8000658:	ffffffff 	.word	0xffffffff
 800065c:	7fefffff 	.word	0x7fefffff
 8000660:	00000000 	.word	0x00000000
 8000664:	7ff00000 	.word	0x7ff00000
	...
 8000674:	80000000 	.word	0x80000000

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <rev>:
    }
    return A;
}

int rev(int size , int index)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	ed2d 8b02 	vpush	{d8}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
    int k = floor(log2(size)) , reg = 0;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000950:	eeb0 0b47 	vmov.f64	d0, d7
 8000954:	f013 ffec 	bl	8014930 <log>
 8000958:	eeb0 6b40 	vmov.f64	d6, d0
 800095c:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000a18 <rev+0xe0>
 8000960:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000964:	eeb0 0b47 	vmov.f64	d0, d7
 8000968:	f014 fbf6 	bl	8015158 <floor>
 800096c:	eeb0 7b40 	vmov.f64	d7, d0
 8000970:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000974:	ee17 3a90 	vmov	r3, s15
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
    int ans = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
    for (int i =size/2 ; i>0 ; i/=2)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	da00      	bge.n	800098a <rev+0x52>
 8000988:	3301      	adds	r3, #1
 800098a:	105b      	asrs	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e036      	b.n	80009fe <rev+0xc6>
    {
        reg = index%2;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	bfb8      	it	lt
 800099a:	425b      	neglt	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
        ans += reg * pow(2 , k - 1) ;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	ee07 3a90 	vmov	s15, r3
 80009a4:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009b4:	eeb0 1b47 	vmov.f64	d1, d7
 80009b8:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
 80009bc:	f014 f8e0 	bl	8014b80 <pow>
 80009c0:	eeb0 7b40 	vmov.f64	d7, d0
 80009c4:	ee28 6b07 	vmul.f64	d6, d8, d7
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009da:	ee17 3a90 	vmov	r3, s15
 80009de:	613b      	str	r3, [r7, #16]
        k--;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
        index/= 2;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	da00      	bge.n	80009ee <rev+0xb6>
 80009ec:	3301      	adds	r3, #1
 80009ee:	105b      	asrs	r3, r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
    for (int i =size/2 ; i>0 ; i/=2)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	da00      	bge.n	80009fa <rev+0xc2>
 80009f8:	3301      	adds	r3, #1
 80009fa:	105b      	asrs	r3, r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dcc5      	bgt.n	8000990 <rev+0x58>
    }
    return ans;
 8000a04:	693b      	ldr	r3, [r7, #16]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	ecbd 8b02 	vpop	{d8}
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	f3af 8000 	nop.w
 8000a18:	fefa39ef 	.word	0xfefa39ef
 8000a1c:	3fe62e42 	.word	0x3fe62e42

08000a20 <FFT>:
    }
    return X;
}

double complex* FFT(int size , double x[])
{
 8000a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	ed2d 8b02 	vpush	{d8}
 8000a28:	b0a9      	sub	sp, #164	@ 0xa4
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	466b      	mov	r3, sp
 8000a32:	461e      	mov	r6, r3
    double complex W[size/2];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	da00      	bge.n	8000a3c <FFT+0x1c>
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	105b      	asrs	r3, r3, #1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	1e4b      	subs	r3, r1, #1
 8000a42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a46:	460a      	mov	r2, r1
 8000a48:	2300      	movs	r3, #0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	f04f 0200 	mov.w	r2, #0
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	01c3      	lsls	r3, r0, #7
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	01c2      	lsls	r2, r0, #7
 8000a64:	460a      	mov	r2, r1
 8000a66:	2300      	movs	r3, #0
 8000a68:	4692      	mov	sl, r2
 8000a6a:	469b      	mov	fp, r3
 8000a6c:	f04f 0200 	mov.w	r2, #0
 8000a70:	f04f 0300 	mov.w	r3, #0
 8000a74:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8000a78:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8000a7c:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8000a80:	460b      	mov	r3, r1
 8000a82:	011b      	lsls	r3, r3, #4
 8000a84:	3307      	adds	r3, #7
 8000a86:	08db      	lsrs	r3, r3, #3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8e:	466b      	mov	r3, sp
 8000a90:	3307      	adds	r3, #7
 8000a92:	08db      	lsrs	r3, r3, #3
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    for (int i = 0 ; i < size/2 ; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000aa0:	e049      	b.n	8000b36 <FFT+0x116>
    {
        W[i] = cos(2*M_PI*i/size) + I*sin(2*M_PI*i/size);
 8000aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aae:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8000c50 <FFT+0x230>
 8000ab2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	ee07 3a90 	vmov	s15, r3
 8000abc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ac0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ac4:	eeb0 0b45 	vmov.f64	d0, d5
 8000ac8:	f014 faf6 	bl	80150b8 <sin>
 8000acc:	eeb0 8b40 	vmov.f64	d8, d0
 8000ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000adc:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 8000c50 <FFT+0x230>
 8000ae0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000aee:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000af2:	eeb0 0b45 	vmov.f64	d0, d5
 8000af6:	f014 fa93 	bl	8015020 <cos>
 8000afa:	eeb0 6b40 	vmov.f64	d6, d0
 8000afe:	ed9f 7b56 	vldr	d7, [pc, #344]	@ 8000c58 <FFT+0x238>
 8000b02:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	4413      	add	r3, r2
 8000b16:	ed83 7b00 	vstr	d7, [r3]
 8000b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b22:	011b      	lsls	r3, r3, #4
 8000b24:	4413      	add	r3, r2
 8000b26:	3308      	adds	r3, #8
 8000b28:	ed83 8b00 	vstr	d8, [r3]
    for (int i = 0 ; i < size/2 ; i++)
 8000b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b30:	3301      	adds	r3, #1
 8000b32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <FFT+0x11e>
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	105b      	asrs	r3, r3, #1
 8000b40:	461a      	mov	r2, r3
 8000b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000b46:	4293      	cmp	r3, r2
 8000b48:	dbab      	blt.n	8000aa2 <FFT+0x82>
    }

    double complex A[size];
 8000b4a:	68f9      	ldr	r1, [r7, #12]
 8000b4c:	1e4b      	subs	r3, r1, #1
 8000b4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b52:	460a      	mov	r2, r1
 8000b54:	2300      	movs	r3, #0
 8000b56:	4690      	mov	r8, r2
 8000b58:	4699      	mov	r9, r3
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000b66:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000b6a:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000b6e:	460a      	mov	r2, r1
 8000b70:	2300      	movs	r3, #0
 8000b72:	4614      	mov	r4, r2
 8000b74:	461d      	mov	r5, r3
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	01eb      	lsls	r3, r5, #7
 8000b80:	ea43 6354 	orr.w	r3, r3, r4, lsr #25
 8000b84:	01e2      	lsls	r2, r4, #7
 8000b86:	460b      	mov	r3, r1
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	3307      	adds	r3, #7
 8000b8c:	08db      	lsrs	r3, r3, #3
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	ebad 0d03 	sub.w	sp, sp, r3
 8000b94:	466b      	mov	r3, sp
 8000b96:	3307      	adds	r3, #7
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    double complex *X = A;
 8000b9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
    for (int i = 0;i < size ; i ++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ba8:	e027      	b.n	8000bfa <FFT+0x1da>
    {
    	A[i] = x[rev(size,i)] + 0*I;
 8000baa:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f7ff fec2 	bl	8000938 <rev>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	4413      	add	r3, r2
 8000bbc:	ed93 7b00 	vldr	d7, [r3]
 8000bc0:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8000c58 <FFT+0x238>
 8000bc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bc8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	ed83 7b00 	vstr	d7, [r3]
 8000bd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	4413      	add	r3, r2
 8000be0:	f103 0108 	add.w	r1, r3, #8
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0;i < size ; i ++)
 8000bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bfa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbd2      	blt.n	8000baa <FFT+0x18a>
    }
    
    int s ,m ,k ,j;
    double complex omega , t, u;

    for(s = 1 ; s <size ; s*=2)
 8000c04:	2301      	movs	r3, #1
 8000c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000c0a:	e0f6      	b.n	8000dfa <FFT+0x3da>
    {
        m = s * 2;
 8000c0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	677b      	str	r3, [r7, #116]	@ 0x74
        for ( k = 0 ; k< size ; k += m)
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000c1a:	e0e3      	b.n	8000de4 <FFT+0x3c4>
        {
            omega = 1;
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <FFT+0x240>)
 8000c22:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
            for (j = 0; j < m/2; j++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c44:	f04f 0200 	mov.w	r2, #0
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <FFT+0x240>)
 8000c4a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000c4e:	e0b8      	b.n	8000dc2 <FFT+0x3a2>
 8000c50:	54442d18 	.word	0x54442d18
 8000c54:	401921fb 	.word	0x401921fb
	...
 8000c60:	3ff00000 	.word	0x3ff00000
            {
                t = omega * A[k+j+m/2];
 8000c64:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c6c:	441a      	add	r2, r3
 8000c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da00      	bge.n	8000c76 <FFT+0x256>
 8000c74:	3301      	adds	r3, #1
 8000c76:	105b      	asrs	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000c7c:	011a      	lsls	r2, r3, #4
 8000c7e:	440a      	add	r2, r1
 8000c80:	ed92 7b00 	vldr	d7, [r2]
 8000c84:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	4413      	add	r3, r2
 8000c8a:	ed93 6b02 	vldr	d6, [r3, #8]
 8000c8e:	eeb0 3b46 	vmov.f64	d3, d6
 8000c92:	eeb0 2b47 	vmov.f64	d2, d7
 8000c96:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000c9a:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000c9e:	f7ff fb8f 	bl	80003c0 <__muldc3>
 8000ca2:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
 8000ca6:	ed87 1b16 	vstr	d1, [r7, #88]	@ 0x58
 8000caa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000cae:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8000cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000cb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
                u = A[k+j];
 8000cba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cc2:	18d1      	adds	r1, r2, r3
 8000cc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cc6:	010b      	lsls	r3, r1, #4
 8000cc8:	4413      	add	r3, r2
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000cd4:	010b      	lsls	r3, r1, #4
 8000cd6:	4413      	add	r3, r2
 8000cd8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ce4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ce8:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8000cec:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
                A[k+j] = u + t;
 8000cf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cf8:	4413      	add	r3, r2
 8000cfa:	ed97 6b06 	vldr	d6, [r7, #24]
 8000cfe:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d02:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d06:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d0a:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d0e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d14:	011a      	lsls	r2, r3, #4
 8000d16:	440a      	add	r2, r1
 8000d18:	ed82 6b00 	vstr	d6, [r2]
 8000d1c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4413      	add	r3, r2
 8000d22:	3308      	adds	r3, #8
 8000d24:	ed83 7b00 	vstr	d7, [r3]
                A[k+j+m/2] = u - t;
 8000d28:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d30:	441a      	add	r2, r3
 8000d32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da00      	bge.n	8000d3a <FFT+0x31a>
 8000d38:	3301      	adds	r3, #1
 8000d3a:	105b      	asrs	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	ed97 6b06 	vldr	d6, [r7, #24]
 8000d42:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000d46:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d4a:	ed97 5b04 	vldr	d5, [r7, #16]
 8000d4e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000d52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000d56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000d58:	011a      	lsls	r2, r3, #4
 8000d5a:	440a      	add	r2, r1
 8000d5c:	ed82 6b00 	vstr	d6, [r2]
 8000d60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4413      	add	r3, r2
 8000d66:	3308      	adds	r3, #8
 8000d68:	ed83 7b00 	vstr	d7, [r3]
                omega = omega * W[size/m];
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d74:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8000d78:	011a      	lsls	r2, r3, #4
 8000d7a:	440a      	add	r2, r1
 8000d7c:	ed92 7b00 	vldr	d7, [r2]
 8000d80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	4413      	add	r3, r2
 8000d88:	ed93 6b02 	vldr	d6, [r3, #8]
 8000d8c:	eeb0 3b46 	vmov.f64	d3, d6
 8000d90:	eeb0 2b47 	vmov.f64	d2, d7
 8000d94:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8000d98:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8000d9c:	f7ff fb10 	bl	80003c0 <__muldc3>
 8000da0:	ed87 0b18 	vstr	d0, [r7, #96]	@ 0x60
 8000da4:	ed87 1b1a 	vstr	d1, [r7, #104]	@ 0x68
 8000da8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000dac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000db0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000db4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            for (j = 0; j < m/2; j++)
 8000db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da00      	bge.n	8000dca <FFT+0x3aa>
 8000dc8:	3301      	adds	r3, #1
 8000dca:	105b      	asrs	r3, r3, #1
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f6ff af46 	blt.w	8000c64 <FFT+0x244>
        for ( k = 0 ; k< size ; k += m)
 8000dd8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000ddc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000dde:	4413      	add	r3, r2
 8000de0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000de4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	f6ff af16 	blt.w	8000c1c <FFT+0x1fc>
    for(s = 1 ; s <size ; s*=2)
 8000df0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f6ff af03 	blt.w	8000c0c <FFT+0x1ec>
            } 
        }
    }
    return X;
 8000e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000e08:	46b5      	mov	sp, r6

}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	37a4      	adds	r7, #164	@ 0xa4
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	ecbd 8b02 	vpop	{d8}
 8000e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e18 <FFT_Mag_sqrt>:
    }
}


void FFT_Mag_sqrt(int size , double x[])
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
    double complex* X = FFT(size , x);
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fdfb 	bl	8000a20 <FFT>
 8000e2a:	60b8      	str	r0, [r7, #8]
    for (int i = 0 ; i < size ; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	e01c      	b.n	8000e6c <FFT_Mag_sqrt+0x54>
    {
        x[i] = cabs(X[i]);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	4413      	add	r3, r2
 8000e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e42:	68fc      	ldr	r4, [r7, #12]
 8000e44:	00e4      	lsls	r4, r4, #3
 8000e46:	683d      	ldr	r5, [r7, #0]
 8000e48:	442c      	add	r4, r5
 8000e4a:	ec41 0b16 	vmov	d6, r0, r1
 8000e4e:	ec43 2b17 	vmov	d7, r2, r3
 8000e52:	eeb0 0b46 	vmov.f64	d0, d6
 8000e56:	eeb0 1b47 	vmov.f64	d1, d7
 8000e5a:	f013 fd4d 	bl	80148f8 <cabs>
 8000e5e:	eeb0 7b40 	vmov.f64	d7, d0
 8000e62:	ed84 7b00 	vstr	d7, [r4]
    for (int i = 0 ; i < size ; i++)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbde      	blt.n	8000e32 <FFT_Mag_sqrt+0x1a>
    }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e80 <Blackman>:




void Blackman(int size , int left , int right , double x[])
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	ed2d 8b04 	vpush	{d8-d9}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]

    for (int i = 0 ; i < size ; i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e06b      	b.n	8000f70 <Blackman+0xf0>
    {
    	if (i < right && i >=  left)
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	da5a      	bge.n	8000f56 <Blackman+0xd6>
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	db56      	blt.n	8000f56 <Blackman+0xd6>
    	{
    		x[i] = 10* x[i] * ( 0.42 + 0.08* cos(4*M_PI*(i - left )/(right - left - 1)) - 0.5*cos(2*M_PI*(i - left )/(right - left - 1)));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	ed93 7b00 	vldr	d7, [r3]
 8000eb4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000eb8:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000eca:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 8000f88 <Blackman+0x108>
 8000ece:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ee2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000ee6:	eeb0 0b45 	vmov.f64	d0, d5
 8000eea:	f014 f899 	bl	8015020 <cos>
 8000eee:	eeb0 7b40 	vmov.f64	d7, d0
 8000ef2:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8000f90 <Blackman+0x110>
 8000ef6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000efa:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 8000f98 <Blackman+0x118>
 8000efe:	ee37 9b06 	vadd.f64	d9, d7, d6
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	ee07 3a90 	vmov	s15, r3
 8000f0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f10:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8000fa0 <Blackman+0x120>
 8000f14:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f28:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000f2c:	eeb0 0b45 	vmov.f64	d0, d5
 8000f30:	f014 f876 	bl	8015020 <cos>
 8000f34:	eeb0 7b40 	vmov.f64	d7, d0
 8000f38:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000f3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f40:	ee39 7b47 	vsub.f64	d7, d9, d7
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000f50:	ed83 7b00 	vstr	d7, [r3]
 8000f54:	e009      	b.n	8000f6a <Blackman+0xea>
    	}
    	else
    	{
    		x[i] = 0;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	18d1      	adds	r1, r2, r3
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0 ; i < size ; i++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	db8f      	blt.n	8000e98 <Blackman+0x18>
    	}
    }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	ecbd 8b04 	vpop	{d8-d9}
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	54442d18 	.word	0x54442d18
 8000f8c:	402921fb 	.word	0x402921fb
 8000f90:	47ae147b 	.word	0x47ae147b
 8000f94:	3fb47ae1 	.word	0x3fb47ae1
 8000f98:	ae147ae1 	.word	0xae147ae1
 8000f9c:	3fdae147 	.word	0x3fdae147
 8000fa0:	54442d18 	.word	0x54442d18
 8000fa4:	401921fb 	.word	0x401921fb

08000fa8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fcc:	4b30      	ldr	r3, [pc, #192]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fce:	4a31      	ldr	r2, [pc, #196]	@ (8001094 <MX_ADC1_Init+0xec>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fde:	4b2c      	ldr	r3, [pc, #176]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fea:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ff0:	4b27      	ldr	r3, [pc, #156]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001002:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001004:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800100a:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800100c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001010:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001014:	2203      	movs	r2, #3
 8001016:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001018:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800101a:	2200      	movs	r2, #0
 800101c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001020:	2200      	movs	r2, #0
 8001022:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	4818      	ldr	r0, [pc, #96]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800102e:	f003 f9cf 	bl	80043d0 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001038:	f001 ff6a 	bl	8002f10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4812      	ldr	r0, [pc, #72]	@ (8001090 <MX_ADC1_Init+0xe8>)
 8001048:	f004 fd10 	bl	8005a6c <HAL_ADCEx_MultiModeConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001052:	f001 ff5d 	bl	8002f10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <MX_ADC1_Init+0xf0>)
 8001058:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105a:	2306      	movs	r3, #6
 800105c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 800105e:	2306      	movs	r3, #6
 8001060:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001062:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001066:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001068:	2304      	movs	r3, #4
 800106a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_ADC1_Init+0xe8>)
 800107a:	f003 fda3 	bl	8004bc4 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001084:	f001 ff44 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	@ 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	240046fc 	.word	0x240046fc
 8001094:	40022000 	.word	0x40022000
 8001098:	0c900008 	.word	0x0c900008

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0ba      	sub	sp, #232	@ 0xe8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	22c0      	movs	r2, #192	@ 0xc0
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f010 f869 	bl	8011194 <memset>
  if(adcHandle->Instance==ADC1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a43      	ldr	r2, [pc, #268]	@ (80011d4 <HAL_ADC_MspInit+0x138>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d17f      	bne.n	80011cc <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010cc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 10;
 80010d8:	230a      	movs	r3, #10
 80010da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 384;
 80010dc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80010e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 12;
 80010e2:	230c      	movs	r3, #12
 80010e4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80010ee:	2340      	movs	r3, #64	@ 0x40
 80010f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4618      	mov	r0, r3
 8001106:	f009 fc8b 	bl	800aa20 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001110:	f001 fefe 	bl	8002f10 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001114:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 8001116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800111a:	4a2f      	ldr	r2, [pc, #188]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 800111c:	f043 0320 	orr.w	r3, r3, #32
 8001120:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001124:	4b2c      	ldr	r3, [pc, #176]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 8001126:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800112a:	f003 0320 	and.w	r3, r3, #32
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001138:	4a27      	ldr	r2, [pc, #156]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001142:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <HAL_ADC_MspInit+0x13c>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001150:	2340      	movs	r3, #64	@ 0x40
 8001152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001156:	2303      	movs	r3, #3
 8001158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001166:	4619      	mov	r1, r3
 8001168:	481c      	ldr	r0, [pc, #112]	@ (80011dc <HAL_ADC_MspInit+0x140>)
 800116a:	f008 f83b 	bl	80091e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001170:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <HAL_ADC_MspInit+0x148>)
 8001172:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001176:	2209      	movs	r2, #9
 8001178:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001188:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001190:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001194:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 8001198:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800119c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011b0:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011b2:	f005 f825 	bl	8006200 <HAL_DMA_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 80011bc:	f001 fea8 	bl	8002f10 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011c4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80011c6:	4a06      	ldr	r2, [pc, #24]	@ (80011e0 <HAL_ADC_MspInit+0x144>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011cc:	bf00      	nop
 80011ce:	37e8      	adds	r7, #232	@ 0xe8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40022000 	.word	0x40022000
 80011d8:	58024400 	.word	0x58024400
 80011dc:	58020000 	.word	0x58020000
 80011e0:	24004760 	.word	0x24004760
 80011e4:	40020010 	.word	0x40020010

080011e8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <HAL_ADC_MspDeInit+0x3c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d110      	bne.n	800121c <HAL_ADC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC12_CLK_DISABLE();
 80011fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <HAL_ADC_MspDeInit+0x40>)
 80011fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001200:	4a09      	ldr	r2, [pc, #36]	@ (8001228 <HAL_ADC_MspDeInit+0x40>)
 8001202:	f023 0320 	bic.w	r3, r3, #32
 8001206:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 800120a:	2140      	movs	r1, #64	@ 0x40
 800120c:	4807      	ldr	r0, [pc, #28]	@ (800122c <HAL_ADC_MspDeInit+0x44>)
 800120e:	f008 f999 	bl	8009544 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001216:	4618      	mov	r0, r3
 8001218:	f005 fb4e 	bl	80068b8 <HAL_DMA_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40022000 	.word	0x40022000
 8001228:	58024400 	.word	0x58024400
 800122c:	58020000 	.word	0x58020000

08001230 <MX_ADC1Sampling_Handler>:

/* USER CODE BEGIN 1 */

void MX_ADC1Sampling_Handler(double sample_fre, int mode)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	@ 0x38
 8001234:	af00      	add	r7, sp, #0
 8001236:	ed87 0b02 	vstr	d0, [r7, #8]
 800123a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800123c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800125c:	4b3c      	ldr	r3, [pc, #240]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 800125e:	4a3d      	ldr	r2, [pc, #244]	@ (8001354 <MX_ADC1Sampling_Handler+0x124>)
 8001260:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001262:	4b3b      	ldr	r3, [pc, #236]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001268:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800126e:	4b38      	ldr	r3, [pc, #224]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001274:	4b36      	ldr	r3, [pc, #216]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 8001276:	2204      	movs	r2, #4
 8001278:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800127a:	4b35      	ldr	r3, [pc, #212]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 800127c:	2200      	movs	r2, #0
 800127e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001280:	4b33      	ldr	r3, [pc, #204]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 8001282:	2201      	movs	r2, #1
 8001284:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001286:	4b32      	ldr	r3, [pc, #200]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 8001288:	2201      	movs	r2, #1
 800128a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128c:	4b30      	ldr	r3, [pc, #192]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 800128e:	2200      	movs	r2, #0
 8001290:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8001292:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 8001294:	f44f 62b8 	mov.w	r2, #1472	@ 0x5c0
 8001298:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800129a:	4b2d      	ldr	r3, [pc, #180]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 800129c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 80012a4:	2203      	movs	r2, #3
 80012a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a8:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012ae:	4b28      	ldr	r3, [pc, #160]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012bc:	4824      	ldr	r0, [pc, #144]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 80012be:	f003 f887 	bl	80043d0 <HAL_ADC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1Sampling_Handler+0x9c>
  {
    Error_Handler();
 80012c8:	f001 fe22 	bl	8002f10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d4:	4619      	mov	r1, r3
 80012d6:	481e      	ldr	r0, [pc, #120]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 80012d8:	f004 fbc8 	bl	8005a6c <HAL_ADCEx_MultiModeConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_ADC1Sampling_Handler+0xb6>
  {
    Error_Handler();
 80012e2:	f001 fe15 	bl	8002f10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <MX_ADC1Sampling_Handler+0x128>)
 80012e8:	613b      	str	r3, [r7, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ea:	2306      	movs	r3, #6
 80012ec:	617b      	str	r3, [r7, #20]
  if (mode == 5)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	d102      	bne.n	80012fa <MX_ADC1Sampling_Handler+0xca>
  {
	  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80012f4:	2304      	movs	r3, #4
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	e00c      	b.n	8001314 <MX_ADC1Sampling_Handler+0xe4>
  }
  else if (mode == 2)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d107      	bne.n	8001310 <MX_ADC1Sampling_Handler+0xe0>
  {
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001300:	2301      	movs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
	  sample_fre = 80000000.0 / (12.5 + 2.5);
 8001304:	a310      	add	r3, pc, #64	@ (adr r3, 8001348 <MX_ADC1Sampling_Handler+0x118>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800130e:	e001      	b.n	8001314 <MX_ADC1Sampling_Handler+0xe4>
  }
  else
  {
	  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8001310:	2306      	movs	r3, #6
 8001312:	61bb      	str	r3, [r7, #24]
  }
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001314:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001318:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
  sConfig.Offset = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.OffsetSignedSaturation = DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4619      	mov	r1, r3
 800132e:	4808      	ldr	r0, [pc, #32]	@ (8001350 <MX_ADC1Sampling_Handler+0x120>)
 8001330:	f003 fc48 	bl	8004bc4 <HAL_ADC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1Sampling_Handler+0x10e>
  {
    Error_Handler();
 800133a:	f001 fde9 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3738      	adds	r7, #56	@ 0x38
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	55555555 	.word	0x55555555
 800134c:	41545855 	.word	0x41545855
 8001350:	240046fc 	.word	0x240046fc
 8001354:	40022000 	.word	0x40022000
 8001358:	0c900008 	.word	0x0c900008

0800135c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	@ 0x28
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2224      	movs	r2, #36	@ 0x24
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f00f ff13 	bl	8011194 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800136e:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_DAC1_Init+0x5c>)
 8001370:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <MX_DAC1_Init+0x60>)
 8001372:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001374:	4810      	ldr	r0, [pc, #64]	@ (80013b8 <MX_DAC1_Init+0x5c>)
 8001376:	f004 fde3 	bl	8005f40 <HAL_DAC_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001380:	f001 fdc6 	bl	8002f10 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001388:	2316      	movs	r3, #22
 800138a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800138c:	2302      	movs	r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001390:	2301      	movs	r3, #1
 8001392:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2210      	movs	r2, #16
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	@ (80013b8 <MX_DAC1_Init+0x5c>)
 80013a0:	f004 fdf0 	bl	8005f84 <HAL_DAC_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80013aa:	f001 fdb1 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	@ 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	240047d8 	.word	0x240047d8
 80013bc:	40007400 	.word	0x40007400

080013c0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a30      	ldr	r2, [pc, #192]	@ (80014a0 <HAL_DAC_MspInit+0xe0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d159      	bne.n	8001496 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80013e2:	4b30      	ldr	r3, [pc, #192]	@ (80014a4 <HAL_DAC_MspInit+0xe4>)
 80013e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013e8:	4a2e      	ldr	r2, [pc, #184]	@ (80014a4 <HAL_DAC_MspInit+0xe4>)
 80013ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013f2:	4b2c      	ldr	r3, [pc, #176]	@ (80014a4 <HAL_DAC_MspInit+0xe4>)
 80013f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <HAL_DAC_MspInit+0xe4>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001406:	4a27      	ldr	r2, [pc, #156]	@ (80014a4 <HAL_DAC_MspInit+0xe4>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001410:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <HAL_DAC_MspInit+0xe4>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800141e:	2320      	movs	r3, #32
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001422:	2303      	movs	r3, #3
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	481d      	ldr	r0, [pc, #116]	@ (80014a8 <HAL_DAC_MspInit+0xe8>)
 8001432:	f007 fed7 	bl	80091e4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 8001438:	4a1d      	ldr	r2, [pc, #116]	@ (80014b0 <HAL_DAC_MspInit+0xf0>)
 800143a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 800143e:	2244      	movs	r2, #68	@ 0x44
 8001440:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001442:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 8001444:	2240      	movs	r2, #64	@ 0x40
 8001446:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 8001450:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001454:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 8001458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800145c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800145e:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 8001460:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001464:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 8001468:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800146c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001474:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 8001476:	2200      	movs	r2, #0
 8001478:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 800147a:	480c      	ldr	r0, [pc, #48]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 800147c:	f004 fec0 	bl	8006200 <HAL_DMA_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001486:	f001 fd43 	bl	8002f10 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a07      	ldr	r2, [pc, #28]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	4a06      	ldr	r2, [pc, #24]	@ (80014ac <HAL_DAC_MspInit+0xec>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	@ 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40007400 	.word	0x40007400
 80014a4:	58024400 	.word	0x58024400
 80014a8:	58020000 	.word	0x58020000
 80014ac:	240047ec 	.word	0x240047ec
 80014b0:	40020028 	.word	0x40020028

080014b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_DMA_Init+0x4c>)
 80014bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001500 <MX_DMA_Init+0x4c>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <MX_DMA_Init+0x4c>)
 80014cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	200b      	movs	r0, #11
 80014de:	f004 fc7e 	bl	8005dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014e2:	200b      	movs	r0, #11
 80014e4:	f004 fc95 	bl	8005e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2100      	movs	r1, #0
 80014ec:	200c      	movs	r0, #12
 80014ee:	f004 fc76 	bl	8005dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014f2:	200c      	movs	r0, #12
 80014f4:	f004 fc8d 	bl	8005e12 <HAL_NVIC_EnableIRQ>

}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	58024400 	.word	0x58024400

08001504 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151a:	4b34      	ldr	r3, [pc, #208]	@ (80015ec <MX_GPIO_Init+0xe8>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001520:	4a32      	ldr	r2, [pc, #200]	@ (80015ec <MX_GPIO_Init+0xe8>)
 8001522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152a:	4b30      	ldr	r3, [pc, #192]	@ (80015ec <MX_GPIO_Init+0xe8>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <MX_GPIO_Init+0xe8>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153e:	4a2b      	ldr	r2, [pc, #172]	@ (80015ec <MX_GPIO_Init+0xe8>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001548:	4b28      	ldr	r3, [pc, #160]	@ (80015ec <MX_GPIO_Init+0xe8>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b25      	ldr	r3, [pc, #148]	@ (80015ec <MX_GPIO_Init+0xe8>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155c:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <MX_GPIO_Init+0xe8>)
 800155e:	f043 0302 	orr.w	r3, r3, #2
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001566:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <MX_GPIO_Init+0xe8>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001574:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <MX_GPIO_Init+0xe8>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <MX_GPIO_Init+0xe8>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <MX_GPIO_Init+0xe8>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2110      	movs	r1, #16
 8001596:	4816      	ldr	r0, [pc, #88]	@ (80015f0 <MX_GPIO_Init+0xec>)
 8001598:	f008 f8de 	bl	8009758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80015a2:	4814      	ldr	r0, [pc, #80]	@ (80015f4 <MX_GPIO_Init+0xf0>)
 80015a4:	f008 f8d8 	bl	8009758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015a8:	2310      	movs	r3, #16
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <MX_GPIO_Init+0xec>)
 80015c0:	f007 fe10 	bl	80091e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015c4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_GPIO_Init+0xf0>)
 80015de:	f007 fe01 	bl	80091e4 <HAL_GPIO_Init>

}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	@ 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	58024400 	.word	0x58024400
 80015f0:	58020000 	.word	0x58020000
 80015f4:	58020c00 	.word	0x58020c00

080015f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <MX_I2C1_Init+0x74>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001670 <MX_I2C1_Init+0x78>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <MX_I2C1_Init+0x74>)
 8001604:	4a1b      	ldr	r2, [pc, #108]	@ (8001674 <MX_I2C1_Init+0x7c>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001608:	4b18      	ldr	r3, [pc, #96]	@ (800166c <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160e:	4b17      	ldr	r3, [pc, #92]	@ (800166c <MX_I2C1_Init+0x74>)
 8001610:	2201      	movs	r2, #1
 8001612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <MX_I2C1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800161a:	4b14      	ldr	r3, [pc, #80]	@ (800166c <MX_I2C1_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <MX_I2C1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_I2C1_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_I2C1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001632:	480e      	ldr	r0, [pc, #56]	@ (800166c <MX_I2C1_Init+0x74>)
 8001634:	f008 f8aa 	bl	800978c <HAL_I2C_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800163e:	f001 fc67 	bl	8002f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001642:	2100      	movs	r1, #0
 8001644:	4809      	ldr	r0, [pc, #36]	@ (800166c <MX_I2C1_Init+0x74>)
 8001646:	f008 f931 	bl	80098ac <HAL_I2CEx_ConfigAnalogFilter>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001650:	f001 fc5e 	bl	8002f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	4805      	ldr	r0, [pc, #20]	@ (800166c <MX_I2C1_Init+0x74>)
 8001658:	f008 f973 	bl	8009942 <HAL_I2CEx_ConfigDigitalFilter>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001662:	f001 fc55 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	24004864 	.word	0x24004864
 8001670:	40005400 	.word	0x40005400
 8001674:	00b03fdb 	.word	0x00b03fdb

08001678 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0ba      	sub	sp, #232	@ 0xe8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	22c0      	movs	r2, #192	@ 0xc0
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f00f fd7b 	bl	8011194 <memset>
  if(i2cHandle->Instance==I2C1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a26      	ldr	r2, [pc, #152]	@ (800173c <HAL_I2C_MspInit+0xc4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d145      	bne.n	8001734 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016a8:	f04f 0208 	mov.w	r2, #8
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	4618      	mov	r0, r3
 80016c0:	f009 f9ae 	bl	800aa20 <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80016ca:	f001 fc21 	bl	8002f10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <HAL_I2C_MspInit+0xc8>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001740 <HAL_I2C_MspInit+0xc8>)
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <HAL_I2C_MspInit+0xc8>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ec:	23c0      	movs	r3, #192	@ 0xc0
 80016ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f2:	2312      	movs	r3, #18
 80016f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001704:	2304      	movs	r3, #4
 8001706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <HAL_I2C_MspInit+0xcc>)
 8001712:	f007 fd67 	bl	80091e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001716:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <HAL_I2C_MspInit+0xc8>)
 8001718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800171c:	4a08      	ldr	r2, [pc, #32]	@ (8001740 <HAL_I2C_MspInit+0xc8>)
 800171e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001722:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_I2C_MspInit+0xc8>)
 8001728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800172c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001734:	bf00      	nop
 8001736:	37e8      	adds	r7, #232	@ 0xe8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40005400 	.word	0x40005400
 8001740:	58024400 	.word	0x58024400
 8001744:	58020400 	.word	0x58020400

08001748 <Analog_Judge>:
#include "tim.h"
#include "usart.h"
#include "gpio.h"

int Analog_Judge(wave_arg arg, mod_arg mod_config, double x[], double v[])
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	f5ad 5dc5 	sub.w	sp, sp, #6304	@ 0x18a0
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	eeb0 5b42 	vmov.f64	d5, d2
 8001756:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 800175a:	f6a3 0398 	subw	r3, r3, #2200	@ 0x898
 800175e:	eeb0 6b43 	vmov.f64	d6, d3
 8001762:	eeb0 7b44 	vmov.f64	d7, d4
 8001766:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 800176a:	f6a2 02a8 	subw	r2, r2, #2216	@ 0x8a8
 800176e:	f507 640b 	add.w	r4, r7, #2224	@ 0x8b0
 8001772:	f6a4 04ac 	subw	r4, r4, #2220	@ 0x8ac
 8001776:	6020      	str	r0, [r4, #0]
 8001778:	f507 600b 	add.w	r0, r7, #2224	@ 0x8b0
 800177c:	f5a0 600b 	sub.w	r0, r0, #2224	@ 0x8b0
 8001780:	6001      	str	r1, [r0, #0]
 8001782:	ed83 0b00 	vstr	d0, [r3]
 8001786:	ed83 1b02 	vstr	d1, [r3, #8]
 800178a:	ed83 5b04 	vstr	d5, [r3, #16]
 800178e:	ed82 6b00 	vstr	d6, [r2]
 8001792:	ed82 7b02 	vstr	d7, [r2, #8]
    double bands[FO_LENGTH / 16];
    int bands_idx[FO_LENGTH / 16];
    double bands_sum = 0;
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	f641 01a8 	movw	r1, #6312	@ 0x18a8
 80017a2:	4439      	add	r1, r7
 80017a4:	e9c1 2300 	strd	r2, r3, [r1]
    int n_bands = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f641 02a4 	movw	r2, #6308	@ 0x18a4
 80017ae:	443a      	add	r2, r7
 80017b0:	6013      	str	r3, [r2, #0]
    int bands_gap = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f641 0274 	movw	r2, #6260	@ 0x1874
 80017b8:	443a      	add	r2, r7
 80017ba:	6013      	str	r3, [r2, #0]
    int is_symmetric = 1;
 80017bc:	2301      	movs	r3, #1
 80017be:	f507 52c5 	add.w	r2, r7, #6304	@ 0x18a0
 80017c2:	6013      	str	r3, [r2, #0]
    int center_idx = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f641 029c 	movw	r2, #6300	@ 0x189c
 80017ca:	443a      	add	r2, r7
 80017cc:	6013      	str	r3, [r2, #0]
    char str[50];


    // This can be optimized with specific threshold
    double main_band = 0;
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	f641 0190 	movw	r1, #6288	@ 0x1890
 80017da:	4439      	add	r1, r7
 80017dc:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 100; i < FO_LENGTH / 2 - 100; i++)
 80017e0:	2364      	movs	r3, #100	@ 0x64
 80017e2:	f641 028c 	movw	r2, #6284	@ 0x188c
 80017e6:	443a      	add	r2, r7
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e031      	b.n	8001850 <Analog_Judge+0x108>
    {
        if (x[i] > main_band)
 80017ec:	f641 038c 	movw	r3, #6284	@ 0x188c
 80017f0:	443b      	add	r3, r7
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 80017fa:	f6a2 02ac 	subw	r2, r2, #2220	@ 0x8ac
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	4413      	add	r3, r2
 8001802:	ed93 7b00 	vldr	d7, [r3]
 8001806:	f641 0390 	movw	r3, #6288	@ 0x1890
 800180a:	443b      	add	r3, r7
 800180c:	ed93 6b00 	vldr	d6, [r3]
 8001810:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	d511      	bpl.n	800183e <Analog_Judge+0xf6>
        {
            main_band = x[i];
 800181a:	f641 038c 	movw	r3, #6284	@ 0x188c
 800181e:	443b      	add	r3, r7
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 8001828:	f6a2 02ac 	subw	r2, r2, #2220	@ 0x8ac
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	4413      	add	r3, r2
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f641 0190 	movw	r1, #6288	@ 0x1890
 8001838:	4439      	add	r1, r7
 800183a:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 100; i < FO_LENGTH / 2 - 100; i++)
 800183e:	f641 038c 	movw	r3, #6284	@ 0x188c
 8001842:	443b      	add	r3, r7
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	f641 028c 	movw	r2, #6284	@ 0x188c
 800184c:	443a      	add	r2, r7
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	f641 038c 	movw	r3, #6284	@ 0x188c
 8001854:	443b      	add	r3, r7
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f640 729b 	movw	r2, #3995	@ 0xf9b
 800185c:	4293      	cmp	r3, r2
 800185e:	ddc5      	ble.n	80017ec <Analog_Judge+0xa4>
        }
    }
    double threshold = main_band * 0.1;
 8001860:	f641 0390 	movw	r3, #6288	@ 0x1890
 8001864:	443b      	add	r3, r7
 8001866:	ed93 7b00 	vldr	d7, [r3]
 800186a:	ed9f 6bb7 	vldr	d6, [pc, #732]	@ 8001b48 <Analog_Judge+0x400>
 800186e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001872:	f641 0368 	movw	r3, #6248	@ 0x1868
 8001876:	443b      	add	r3, r7
 8001878:	ed83 7b00 	vstr	d7, [r3]
    
    for(int i = 1640 - FO_LENGTH / 8; i < 1640 +  FO_LENGTH / 8 ; i++)
 800187c:	f44f 731a 	mov.w	r3, #616	@ 0x268
 8001880:	f641 0288 	movw	r2, #6280	@ 0x1888
 8001884:	443a      	add	r2, r7
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e0c6      	b.n	8001a18 <Analog_Judge+0x2d0>
    {
        if(x[i] > threshold && x[i] > 50)
 800188a:	f641 0388 	movw	r3, #6280	@ 0x1888
 800188e:	443b      	add	r3, r7
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 8001898:	f6a2 02ac 	subw	r2, r2, #2220	@ 0x8ac
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	ed93 7b00 	vldr	d7, [r3]
 80018a4:	f641 0368 	movw	r3, #6248	@ 0x1868
 80018a8:	443b      	add	r3, r7
 80018aa:	ed93 6b00 	vldr	d6, [r3]
 80018ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	f140 80a6 	bpl.w	8001a06 <Analog_Judge+0x2be>
 80018ba:	f641 0388 	movw	r3, #6280	@ 0x1888
 80018be:	443b      	add	r3, r7
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 80018c8:	f6a2 02ac 	subw	r2, r2, #2220	@ 0x8ac
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	ed93 7b00 	vldr	d7, [r3]
 80018d4:	ed9f 6b9e 	vldr	d6, [pc, #632]	@ 8001b50 <Analog_Judge+0x408>
 80018d8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	f340 8091 	ble.w	8001a06 <Analog_Judge+0x2be>
        {
        	int flag = 1 ;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f641 0284 	movw	r2, #6276	@ 0x1884
 80018ea:	443a      	add	r2, r7
 80018ec:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 80018ee:	f641 0388 	movw	r3, #6280	@ 0x1888
 80018f2:	443b      	add	r3, r7
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3b02      	subs	r3, #2
 80018f8:	f507 52c4 	add.w	r2, r7, #6272	@ 0x1880
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e029      	b.n	8001954 <Analog_Judge+0x20c>
        	{
        		if (x[j] > x[i])flag = 0;
 8001900:	f507 53c4 	add.w	r3, r7, #6272	@ 0x1880
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 800190c:	f6a2 02ac 	subw	r2, r2, #2220	@ 0x8ac
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	4413      	add	r3, r2
 8001914:	ed93 6b00 	vldr	d6, [r3]
 8001918:	f641 0388 	movw	r3, #6280	@ 0x1888
 800191c:	443b      	add	r3, r7
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 8001926:	f6a2 02ac 	subw	r2, r2, #2220	@ 0x8ac
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	4413      	add	r3, r2
 800192e:	ed93 7b00 	vldr	d7, [r3]
 8001932:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193a:	dd04      	ble.n	8001946 <Analog_Judge+0x1fe>
 800193c:	2300      	movs	r3, #0
 800193e:	f641 0284 	movw	r2, #6276	@ 0x1884
 8001942:	443a      	add	r2, r7
 8001944:	6013      	str	r3, [r2, #0]
        	for (int j = i - 2 ; j < i + 2 ; j++)
 8001946:	f507 53c4 	add.w	r3, r7, #6272	@ 0x1880
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	f507 52c4 	add.w	r2, r7, #6272	@ 0x1880
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001958:	443b      	add	r3, r7
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	f507 52c4 	add.w	r2, r7, #6272	@ 0x1880
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	ddcb      	ble.n	8001900 <Analog_Judge+0x1b8>
        	}
        	if (flag == 1)
 8001968:	f641 0384 	movw	r3, #6276	@ 0x1884
 800196c:	443b      	add	r3, r7
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d148      	bne.n	8001a06 <Analog_Judge+0x2be>
        	{
        		bands_sum += x[i];
 8001974:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001978:	443b      	add	r3, r7
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 8001982:	f6a2 02ac 	subw	r2, r2, #2220	@ 0x8ac
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	4413      	add	r3, r2
 800198a:	ed93 7b00 	vldr	d7, [r3]
 800198e:	f641 03a8 	movw	r3, #6312	@ 0x18a8
 8001992:	443b      	add	r3, r7
 8001994:	ed93 6b00 	vldr	d6, [r3]
 8001998:	ee36 7b07 	vadd.f64	d7, d6, d7
 800199c:	f641 03a8 	movw	r3, #6312	@ 0x18a8
 80019a0:	443b      	add	r3, r7
 80019a2:	ed83 7b00 	vstr	d7, [r3]
        		bands[n_bands] = x[i];
 80019a6:	f641 0388 	movw	r3, #6280	@ 0x1888
 80019aa:	443b      	add	r3, r7
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 80019b4:	f6a2 02ac 	subw	r2, r2, #2220	@ 0x8ac
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f507 610b 	add.w	r1, r7, #2224	@ 0x8b0
 80019c4:	4608      	mov	r0, r1
 80019c6:	f641 01a4 	movw	r1, #6308	@ 0x18a4
 80019ca:	4439      	add	r1, r7
 80019cc:	6809      	ldr	r1, [r1, #0]
 80019ce:	00c9      	lsls	r1, r1, #3
 80019d0:	4401      	add	r1, r0
 80019d2:	3948      	subs	r1, #72	@ 0x48
 80019d4:	e9c1 2300 	strd	r2, r3, [r1]
        		bands_idx[n_bands] = i;
 80019d8:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 80019dc:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 80019e0:	f641 02a4 	movw	r2, #6308	@ 0x18a4
 80019e4:	443a      	add	r2, r7
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	f641 0188 	movw	r1, #6280	@ 0x1888
 80019ec:	4439      	add	r1, r7
 80019ee:	6809      	ldr	r1, [r1, #0]
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        		n_bands++;
 80019f4:	f641 03a4 	movw	r3, #6308	@ 0x18a4
 80019f8:	443b      	add	r3, r7
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	f641 02a4 	movw	r2, #6308	@ 0x18a4
 8001a02:	443a      	add	r2, r7
 8001a04:	6013      	str	r3, [r2, #0]
    for(int i = 1640 - FO_LENGTH / 8; i < 1640 +  FO_LENGTH / 8 ; i++)
 8001a06:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001a0a:	443b      	add	r3, r7
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f641 0288 	movw	r2, #6280	@ 0x1888
 8001a14:	443a      	add	r2, r7
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	f641 0388 	movw	r3, #6280	@ 0x1888
 8001a1c:	443b      	add	r3, r7
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f640 2267 	movw	r2, #2663	@ 0xa67
 8001a24:	4293      	cmp	r3, r2
 8001a26:	f77f af30 	ble.w	800188a <Analog_Judge+0x142>
        	}
        }
    }


    bands_gap = bands_idx[n_bands / 2 + 1] - bands_idx[n_bands / 2];
 8001a2a:	f641 03a4 	movw	r3, #6308	@ 0x18a4
 8001a2e:	443b      	add	r3, r7
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da00      	bge.n	8001a38 <Analog_Judge+0x2f0>
 8001a36:	3301      	adds	r3, #1
 8001a38:	105b      	asrs	r3, r3, #1
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001a40:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 8001a44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a48:	f641 03a4 	movw	r3, #6308	@ 0x18a4
 8001a4c:	443b      	add	r3, r7
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da00      	bge.n	8001a56 <Analog_Judge+0x30e>
 8001a54:	3301      	adds	r3, #1
 8001a56:	105b      	asrs	r3, r3, #1
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001a5e:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 8001a62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f641 0274 	movw	r2, #6260	@ 0x1874
 8001a6c:	443a      	add	r2, r7
 8001a6e:	6013      	str	r3, [r2, #0]
	sprintf(str , "number of separated bands: %d." , n_bands);
 8001a70:	4b39      	ldr	r3, [pc, #228]	@ (8001b58 <Analog_Judge+0x410>)
 8001a72:	f503 53c5 	add.w	r3, r3, #6304	@ 0x18a0
 8001a76:	f103 0310 	add.w	r3, r3, #16
 8001a7a:	443b      	add	r3, r7
 8001a7c:	f641 02a4 	movw	r2, #6308	@ 0x18a4
 8001a80:	443a      	add	r2, r7
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	4935      	ldr	r1, [pc, #212]	@ (8001b5c <Analog_Judge+0x414>)
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00f f87c 	bl	8010b84 <sprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)str , 30   ,HAL_MAX_DELAY);
 8001a8c:	4932      	ldr	r1, [pc, #200]	@ (8001b58 <Analog_Judge+0x410>)
 8001a8e:	f641 03b0 	movw	r3, #6320	@ 0x18b0
 8001a92:	440b      	add	r3, r1
 8001a94:	19d9      	adds	r1, r3, r7
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a9a:	221e      	movs	r2, #30
 8001a9c:	4830      	ldr	r0, [pc, #192]	@ (8001b60 <Analog_Judge+0x418>)
 8001a9e:	f00c fd7d 	bl	800e59c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	492e      	ldr	r1, [pc, #184]	@ (8001b64 <Analog_Judge+0x41c>)
 8001aaa:	482d      	ldr	r0, [pc, #180]	@ (8001b60 <Analog_Judge+0x418>)
 8001aac:	f00c fd76 	bl	800e59c <HAL_UART_Transmit>

	for (int i = 0; i < n_bands; i++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f641 027c 	movw	r2, #6268	@ 0x187c
 8001ab6:	443a      	add	r2, r7
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e032      	b.n	8001b22 <Analog_Judge+0x3da>
	{
		center_idx = (abs(bands_idx[i] - 1640) < 20) ? i : center_idx;
 8001abc:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001ac0:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 8001ac4:	f641 027c 	movw	r2, #6268	@ 0x187c
 8001ac8:	443a      	add	r2, r7
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 8001ad4:	f113 0f13 	cmn.w	r3, #19
 8001ad8:	db12      	blt.n	8001b00 <Analog_Judge+0x3b8>
 8001ada:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001ade:	f6a3 0348 	subw	r3, r3, #2120	@ 0x848
 8001ae2:	f641 027c 	movw	r2, #6268	@ 0x187c
 8001ae6:	443a      	add	r2, r7
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aee:	f5a3 63cd 	sub.w	r3, r3, #1640	@ 0x668
 8001af2:	2b13      	cmp	r3, #19
 8001af4:	dc04      	bgt.n	8001b00 <Analog_Judge+0x3b8>
 8001af6:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001afa:	443b      	add	r3, r7
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	e003      	b.n	8001b08 <Analog_Judge+0x3c0>
 8001b00:	f641 039c 	movw	r3, #6300	@ 0x189c
 8001b04:	443b      	add	r3, r7
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f641 029c 	movw	r2, #6300	@ 0x189c
 8001b0c:	443a      	add	r2, r7
 8001b0e:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < n_bands; i++)
 8001b10:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001b14:	443b      	add	r3, r7
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f641 027c 	movw	r2, #6268	@ 0x187c
 8001b1e:	443a      	add	r2, r7
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	f641 037c 	movw	r3, #6268	@ 0x187c
 8001b26:	443b      	add	r3, r7
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	f641 03a4 	movw	r3, #6308	@ 0x18a4
 8001b2e:	443b      	add	r3, r7
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	dbc2      	blt.n	8001abc <Analog_Judge+0x374>
	}
	for (int i = 0 ; i < n_bands / 2; i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	f641 0278 	movw	r2, #6264	@ 0x1878
 8001b3c:	443a      	add	r2, r7
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e04a      	b.n	8001bd8 <Analog_Judge+0x490>
 8001b42:	bf00      	nop
 8001b44:	f3af 8000 	nop.w
 8001b48:	9999999a 	.word	0x9999999a
 8001b4c:	3fb99999 	.word	0x3fb99999
 8001b50:	00000000 	.word	0x00000000
 8001b54:	40490000 	.word	0x40490000
 8001b58:	ffffe784 	.word	0xffffe784
 8001b5c:	08015f30 	.word	0x08015f30
 8001b60:	24024a1c 	.word	0x24024a1c
 8001b64:	08015f50 	.word	0x08015f50
	{
		if (abs(bands[center_idx - i] - bands[center_idx + i]) > 100)
 8001b68:	f641 039c 	movw	r3, #6300	@ 0x189c
 8001b6c:	443b      	add	r3, r7
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001b74:	443b      	add	r3, r7
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	3b48      	subs	r3, #72	@ 0x48
 8001b84:	ed93 6b00 	vldr	d6, [r3]
 8001b88:	f641 039c 	movw	r3, #6300	@ 0x189c
 8001b8c:	443b      	add	r3, r7
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001b94:	443b      	add	r3, r7
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4413      	add	r3, r2
 8001b9a:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b48      	subs	r3, #72	@ 0x48
 8001ba4:	ed93 7b00 	vldr	d7, [r3]
 8001ba8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001bb0:	ee17 3a90 	vmov	r3, s15
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bfb8      	it	lt
 8001bb8:	425b      	neglt	r3, r3
 8001bba:	2b64      	cmp	r3, #100	@ 0x64
 8001bbc:	dd03      	ble.n	8001bc6 <Analog_Judge+0x47e>
		{
			is_symmetric = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f507 52c5 	add.w	r2, r7, #6304	@ 0x18a0
 8001bc4:	6013      	str	r3, [r2, #0]
	for (int i = 0 ; i < n_bands / 2; i++)
 8001bc6:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001bca:	443b      	add	r3, r7
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f641 0278 	movw	r2, #6264	@ 0x1878
 8001bd4:	443a      	add	r2, r7
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	f641 03a4 	movw	r3, #6308	@ 0x18a4
 8001bdc:	443b      	add	r3, r7
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	da00      	bge.n	8001be6 <Analog_Judge+0x49e>
 8001be4:	3301      	adds	r3, #1
 8001be6:	105b      	asrs	r3, r3, #1
 8001be8:	461a      	mov	r2, r3
 8001bea:	f641 0378 	movw	r3, #6264	@ 0x1878
 8001bee:	443b      	add	r3, r7
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	dbb8      	blt.n	8001b68 <Analog_Judge+0x420>
		}
	}

	arg.amp = 0.0;
 8001bf6:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001bfa:	f6a3 0198 	subw	r1, r3, #2200	@ 0x898
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9c1 2300 	strd	r2, r3, [r1]
	arg.fre = (double)bands_gap / 81.000;
 8001c0a:	f641 0374 	movw	r3, #6260	@ 0x1874
 8001c0e:	443b      	add	r3, r7
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001c1a:	ed9f 5bc1 	vldr	d5, [pc, #772]	@ 8001f20 <Analog_Judge+0x7d8>
 8001c1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c22:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001c26:	f6a3 0398 	subw	r3, r3, #2200	@ 0x898
 8001c2a:	ed83 7b02 	vstr	d7, [r3, #8]
	arg.phase = 0.0;
 8001c2e:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001c32:	f6a3 0198 	subw	r1, r3, #2200	@ 0x898
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9c1 2304 	strd	r2, r3, [r1, #16]


	if (n_bands == 0)
 8001c42:	f641 03a4 	movw	r3, #6308	@ 0x18a4
 8001c46:	443b      	add	r3, r7
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <Analog_Judge+0x50c>
	{
		return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c52:	e15d      	b.n	8001f10 <Analog_Judge+0x7c8>
	}
	else if (n_bands == 1)
 8001c54:	f641 03a4 	movw	r3, #6308	@ 0x18a4
 8001c58:	443b      	add	r3, r7
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <Analog_Judge+0x51c>
    {
        return 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e155      	b.n	8001f10 <Analog_Judge+0x7c8>
    }
    else if (n_bands <= 3 && is_symmetric)
 8001c64:	f641 03a4 	movw	r3, #6308	@ 0x18a4
 8001c68:	443b      	add	r3, r7
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	f300 8093 	bgt.w	8001d98 <Analog_Judge+0x650>
 8001c72:	f507 53c5 	add.w	r3, r7, #6304	@ 0x18a0
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 808d 	beq.w	8001d98 <Analog_Judge+0x650>
    {
    	sprintf(str , "bands' gap: %d." , bands_gap);
 8001c7e:	4bae      	ldr	r3, [pc, #696]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001c80:	f503 53c5 	add.w	r3, r3, #6304	@ 0x18a0
 8001c84:	f103 0310 	add.w	r3, r3, #16
 8001c88:	443b      	add	r3, r7
 8001c8a:	f641 0274 	movw	r2, #6260	@ 0x1874
 8001c8e:	443a      	add	r2, r7
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	49aa      	ldr	r1, [pc, #680]	@ (8001f3c <Analog_Judge+0x7f4>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f00e ff75 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 15   ,HAL_MAX_DELAY);
 8001c9a:	49a7      	ldr	r1, [pc, #668]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001c9c:	f641 03b0 	movw	r3, #6320	@ 0x18b0
 8001ca0:	440b      	add	r3, r1
 8001ca2:	19d9      	adds	r1, r3, r7
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ca8:	220f      	movs	r2, #15
 8001caa:	48a5      	ldr	r0, [pc, #660]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001cac:	f00c fc76 	bl	800e59c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	49a3      	ldr	r1, [pc, #652]	@ (8001f44 <Analog_Judge+0x7fc>)
 8001cb8:	48a1      	ldr	r0, [pc, #644]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001cba:	f00c fc6f 	bl	800e59c <HAL_UART_Transmit>

    	sprintf(str , "frequency: %.2lf kHz." , (double)bands_gap / 81.000);
 8001cbe:	f641 0374 	movw	r3, #6260	@ 0x1874
 8001cc2:	443b      	add	r3, r7
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001cce:	ed9f 6b94 	vldr	d6, [pc, #592]	@ 8001f20 <Analog_Judge+0x7d8>
 8001cd2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001cd6:	4898      	ldr	r0, [pc, #608]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001cd8:	f641 03b0 	movw	r3, #6320	@ 0x18b0
 8001cdc:	4403      	add	r3, r0
 8001cde:	19d8      	adds	r0, r3, r7
 8001ce0:	ec53 2b15 	vmov	r2, r3, d5
 8001ce4:	4998      	ldr	r1, [pc, #608]	@ (8001f48 <Analog_Judge+0x800>)
 8001ce6:	f00e ff4d 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 8001cea:	4993      	ldr	r1, [pc, #588]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001cec:	f641 03b0 	movw	r3, #6320	@ 0x18b0
 8001cf0:	440b      	add	r3, r1
 8001cf2:	19d9      	adds	r1, r3, r7
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cf8:	2214      	movs	r2, #20
 8001cfa:	4891      	ldr	r0, [pc, #580]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001cfc:	f00c fc4e 	bl	800e59c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d04:	2201      	movs	r2, #1
 8001d06:	498f      	ldr	r1, [pc, #572]	@ (8001f44 <Analog_Judge+0x7fc>)
 8001d08:	488d      	ldr	r0, [pc, #564]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001d0a:	f00c fc47 	bl	800e59c <HAL_UART_Transmit>

    	sprintf(str , "degree of moderation: %.2lf" ,(bands_sum - bands[n_bands / 2]) / bands[n_bands / 2]);
 8001d0e:	f641 03a4 	movw	r3, #6308	@ 0x18a4
 8001d12:	443b      	add	r3, r7
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	da00      	bge.n	8001d1c <Analog_Judge+0x5d4>
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	105b      	asrs	r3, r3, #1
 8001d1e:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	3b48      	subs	r3, #72	@ 0x48
 8001d28:	ed93 7b00 	vldr	d7, [r3]
 8001d2c:	f641 03a8 	movw	r3, #6312	@ 0x18a8
 8001d30:	443b      	add	r3, r7
 8001d32:	ed93 6b00 	vldr	d6, [r3]
 8001d36:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001d3a:	f641 03a4 	movw	r3, #6308	@ 0x18a4
 8001d3e:	443b      	add	r3, r7
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	da00      	bge.n	8001d48 <Analog_Judge+0x600>
 8001d46:	3301      	adds	r3, #1
 8001d48:	105b      	asrs	r3, r3, #1
 8001d4a:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	3b48      	subs	r3, #72	@ 0x48
 8001d54:	ed93 7b00 	vldr	d7, [r3]
 8001d58:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001d5c:	4876      	ldr	r0, [pc, #472]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001d5e:	f641 03b0 	movw	r3, #6320	@ 0x18b0
 8001d62:	4403      	add	r3, r0
 8001d64:	19d8      	adds	r0, r3, r7
 8001d66:	ec53 2b15 	vmov	r2, r3, d5
 8001d6a:	4978      	ldr	r1, [pc, #480]	@ (8001f4c <Analog_Judge+0x804>)
 8001d6c:	f00e ff0a 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 26   ,HAL_MAX_DELAY);
 8001d70:	4971      	ldr	r1, [pc, #452]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001d72:	f641 03b0 	movw	r3, #6320	@ 0x18b0
 8001d76:	440b      	add	r3, r1
 8001d78:	19d9      	adds	r1, r3, r7
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d7e:	221a      	movs	r2, #26
 8001d80:	486f      	ldr	r0, [pc, #444]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001d82:	f00c fc0b 	bl	800e59c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	496d      	ldr	r1, [pc, #436]	@ (8001f44 <Analog_Judge+0x7fc>)
 8001d8e:	486c      	ldr	r0, [pc, #432]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001d90:	f00c fc04 	bl	800e59c <HAL_UART_Transmit>
        return 1; 
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0bb      	b.n	8001f10 <Analog_Judge+0x7c8>
    } 
    else if (n_bands > 3 && is_symmetric)
 8001d98:	f641 03a4 	movw	r3, #6308	@ 0x18a4
 8001d9c:	443b      	add	r3, r7
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	f340 80a8 	ble.w	8001ef6 <Analog_Judge+0x7ae>
 8001da6:	f507 53c5 	add.w	r3, r7, #6304	@ 0x18a0
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80a2 	beq.w	8001ef6 <Analog_Judge+0x7ae>
    {
    	sprintf(str , "bands' gap: %d." , bands_gap);
 8001db2:	4b61      	ldr	r3, [pc, #388]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001db4:	f503 53c5 	add.w	r3, r3, #6304	@ 0x18a0
 8001db8:	f103 0310 	add.w	r3, r3, #16
 8001dbc:	443b      	add	r3, r7
 8001dbe:	f641 0274 	movw	r2, #6260	@ 0x1874
 8001dc2:	443a      	add	r2, r7
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	495d      	ldr	r1, [pc, #372]	@ (8001f3c <Analog_Judge+0x7f4>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00e fedb 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 15   ,HAL_MAX_DELAY);
 8001dce:	495a      	ldr	r1, [pc, #360]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001dd0:	f641 03b0 	movw	r3, #6320	@ 0x18b0
 8001dd4:	440b      	add	r3, r1
 8001dd6:	19d9      	adds	r1, r3, r7
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ddc:	220f      	movs	r2, #15
 8001dde:	4858      	ldr	r0, [pc, #352]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001de0:	f00c fbdc 	bl	800e59c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001de8:	2201      	movs	r2, #1
 8001dea:	4956      	ldr	r1, [pc, #344]	@ (8001f44 <Analog_Judge+0x7fc>)
 8001dec:	4854      	ldr	r0, [pc, #336]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001dee:	f00c fbd5 	bl	800e59c <HAL_UART_Transmit>

    	sprintf(str , "frequency: %.2lf kHz." , (double)bands_gap / 81.000);
 8001df2:	f641 0374 	movw	r3, #6260	@ 0x1874
 8001df6:	443b      	add	r3, r7
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e02:	ed9f 6b47 	vldr	d6, [pc, #284]	@ 8001f20 <Analog_Judge+0x7d8>
 8001e06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001e0a:	484b      	ldr	r0, [pc, #300]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001e0c:	f641 03b0 	movw	r3, #6320	@ 0x18b0
 8001e10:	4403      	add	r3, r0
 8001e12:	19d8      	adds	r0, r3, r7
 8001e14:	ec53 2b15 	vmov	r2, r3, d5
 8001e18:	494b      	ldr	r1, [pc, #300]	@ (8001f48 <Analog_Judge+0x800>)
 8001e1a:	f00e feb3 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 8001e1e:	4946      	ldr	r1, [pc, #280]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001e20:	f641 03b0 	movw	r3, #6320	@ 0x18b0
 8001e24:	440b      	add	r3, r1
 8001e26:	19d9      	adds	r1, r3, r7
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e2c:	2214      	movs	r2, #20
 8001e2e:	4844      	ldr	r0, [pc, #272]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001e30:	f00c fbb4 	bl	800e59c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4942      	ldr	r1, [pc, #264]	@ (8001f44 <Analog_Judge+0x7fc>)
 8001e3c:	4840      	ldr	r0, [pc, #256]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001e3e:	f00c fbad 	bl	800e59c <HAL_UART_Transmit>
    	// This params come from LR with maximum error about 0.1(often non-int modulation degree). So this should be optimized.
    	mod_config.m = (bands_sum / main_band - 1.119) / 1.479 * (double)bands_gap / 81.000;
 8001e42:	f641 03a8 	movw	r3, #6312	@ 0x18a8
 8001e46:	443b      	add	r3, r7
 8001e48:	ed93 5b00 	vldr	d5, [r3]
 8001e4c:	f641 0390 	movw	r3, #6288	@ 0x1890
 8001e50:	443b      	add	r3, r7
 8001e52:	ed93 6b00 	vldr	d6, [r3]
 8001e56:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e5a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8001f28 <Analog_Judge+0x7e0>
 8001e5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e62:	ed9f 5b33 	vldr	d5, [pc, #204]	@ 8001f30 <Analog_Judge+0x7e8>
 8001e66:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001e6a:	f641 0374 	movw	r3, #6260	@ 0x1874
 8001e6e:	443b      	add	r3, r7
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e7e:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001f20 <Analog_Judge+0x7d8>
 8001e82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e86:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001e8a:	f6a3 03a8 	subw	r3, r3, #2216	@ 0x8a8
 8001e8e:	ed83 7b02 	vstr	d7, [r3, #8]
    	sprintf(str , "degree of modulation: %.3lf." ,(bands_sum / main_band - 1.119) / 1.479);
 8001e92:	f641 03a8 	movw	r3, #6312	@ 0x18a8
 8001e96:	443b      	add	r3, r7
 8001e98:	ed93 5b00 	vldr	d5, [r3]
 8001e9c:	f641 0390 	movw	r3, #6288	@ 0x1890
 8001ea0:	443b      	add	r3, r7
 8001ea2:	ed93 6b00 	vldr	d6, [r3]
 8001ea6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001eaa:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001f28 <Analog_Judge+0x7e0>
 8001eae:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001eb2:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 8001f30 <Analog_Judge+0x7e8>
 8001eb6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001eba:	481f      	ldr	r0, [pc, #124]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001ebc:	f641 03b0 	movw	r3, #6320	@ 0x18b0
 8001ec0:	4403      	add	r3, r0
 8001ec2:	19d8      	adds	r0, r3, r7
 8001ec4:	ec53 2b15 	vmov	r2, r3, d5
 8001ec8:	4921      	ldr	r1, [pc, #132]	@ (8001f50 <Analog_Judge+0x808>)
 8001eca:	f00e fe5b 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 29   ,HAL_MAX_DELAY);
 8001ece:	491a      	ldr	r1, [pc, #104]	@ (8001f38 <Analog_Judge+0x7f0>)
 8001ed0:	f641 03b0 	movw	r3, #6320	@ 0x18b0
 8001ed4:	440b      	add	r3, r1
 8001ed6:	19d9      	adds	r1, r3, r7
 8001ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001edc:	221d      	movs	r2, #29
 8001ede:	4818      	ldr	r0, [pc, #96]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001ee0:	f00c fb5c 	bl	800e59c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4916      	ldr	r1, [pc, #88]	@ (8001f44 <Analog_Judge+0x7fc>)
 8001eec:	4814      	ldr	r0, [pc, #80]	@ (8001f40 <Analog_Judge+0x7f8>)
 8001eee:	f00c fb55 	bl	800e59c <HAL_UART_Transmit>
        return 2; 
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e00c      	b.n	8001f10 <Analog_Judge+0x7c8>
    }
    else
    {
        return Digital_Judge(x, v);
 8001ef6:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001efa:	f5a3 620b 	sub.w	r2, r3, #2224	@ 0x8b0
 8001efe:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8001f02:	f6a3 03ac 	subw	r3, r3, #2220	@ 0x8ac
 8001f06:	6811      	ldr	r1, [r2, #0]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	f000 f825 	bl	8001f58 <Digital_Judge>
 8001f0e:	4603      	mov	r3, r0
    }
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	f507 57c5 	add.w	r7, r7, #6304	@ 0x18a0
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd90      	pop	{r4, r7, pc}
 8001f1c:	f3af 8000 	nop.w
 8001f20:	00000000 	.word	0x00000000
 8001f24:	40544000 	.word	0x40544000
 8001f28:	8b439581 	.word	0x8b439581
 8001f2c:	3ff1e76c 	.word	0x3ff1e76c
 8001f30:	e76c8b44 	.word	0xe76c8b44
 8001f34:	3ff7a9fb 	.word	0x3ff7a9fb
 8001f38:	ffffe784 	.word	0xffffe784
 8001f3c:	08015f54 	.word	0x08015f54
 8001f40:	24024a1c 	.word	0x24024a1c
 8001f44:	08015f50 	.word	0x08015f50
 8001f48:	08015f64 	.word	0x08015f64
 8001f4c:	08015f7c 	.word	0x08015f7c
 8001f50:	08015f98 	.word	0x08015f98
 8001f54:	00000000 	.word	0x00000000

08001f58 <Digital_Judge>:
    

int Digital_Judge(double x[], double v[])
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	f5ad 5dbf 	sub.w	sp, sp, #6112	@ 0x17e0
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8001f66:	f2a3 73f4 	subw	r3, r3, #2036	@ 0x7f4
 8001f6a:	6018      	str	r0, [r3, #0]
 8001f6c:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8001f70:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8001f74:	6019      	str	r1, [r3, #0]
    double main_band = 0;
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	f241 71f0 	movw	r1, #6128	@ 0x17f0
 8001f82:	4439      	add	r1, r7
 8001f84:	e9c1 2300 	strd	r2, r3, [r1]
    int center_idx = 1640;
 8001f88:	f44f 63cd 	mov.w	r3, #1640	@ 0x668
 8001f8c:	f241 72ec 	movw	r2, #6124	@ 0x17ec
 8001f90:	443a      	add	r2, r7
 8001f92:	6013      	str	r3, [r2, #0]
    double bands[500];
    int bands_idx[500];
    int bands_gap = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f241 72b8 	movw	r2, #6072	@ 0x17b8
 8001f9a:	443a      	add	r2, r7
 8001f9c:	6013      	str	r3, [r2, #0]
    int is_centered = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f241 72e8 	movw	r2, #6120	@ 0x17e8
 8001fa4:	443a      	add	r2, r7
 8001fa6:	6013      	str	r3, [r2, #0]
    int is_adjoint = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f241 72e4 	movw	r2, #6116	@ 0x17e4
 8001fae:	443a      	add	r2, r7
 8001fb0:	6013      	str	r3, [r2, #0]
    int adjoint_count = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 8001fb8:	6013      	str	r3, [r2, #0]
    char str[50];

    for (int i = 100; i < FO_LENGTH / 2 - 50; i++)
 8001fba:	2364      	movs	r3, #100	@ 0x64
 8001fbc:	f241 72dc 	movw	r2, #6108	@ 0x17dc
 8001fc0:	443a      	add	r2, r7
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e031      	b.n	800202a <Digital_Judge+0xd2>
    {
        if (x[i] > main_band)
 8001fc6:	f241 73dc 	movw	r3, #6108	@ 0x17dc
 8001fca:	443b      	add	r3, r7
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8001fd4:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	ed93 7b00 	vldr	d7, [r3]
 8001fe0:	f241 73f0 	movw	r3, #6128	@ 0x17f0
 8001fe4:	443b      	add	r3, r7
 8001fe6:	ed93 6b00 	vldr	d6, [r3]
 8001fea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff2:	d511      	bpl.n	8002018 <Digital_Judge+0xc0>
        {
            main_band = x[i];
 8001ff4:	f241 73dc 	movw	r3, #6108	@ 0x17dc
 8001ff8:	443b      	add	r3, r7
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8002002:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4413      	add	r3, r2
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f241 71f0 	movw	r1, #6128	@ 0x17f0
 8002012:	4439      	add	r1, r7
 8002014:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 100; i < FO_LENGTH / 2 - 50; i++)
 8002018:	f241 73dc 	movw	r3, #6108	@ 0x17dc
 800201c:	443b      	add	r3, r7
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	f241 72dc 	movw	r2, #6108	@ 0x17dc
 8002026:	443a      	add	r2, r7
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	f241 73dc 	movw	r3, #6108	@ 0x17dc
 800202e:	443b      	add	r3, r7
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f640 72cd 	movw	r2, #4045	@ 0xfcd
 8002036:	4293      	cmp	r3, r2
 8002038:	ddc5      	ble.n	8001fc6 <Digital_Judge+0x6e>
        }
    }

    double threshold = main_band * 0.2;
 800203a:	f241 73f0 	movw	r3, #6128	@ 0x17f0
 800203e:	443b      	add	r3, r7
 8002040:	ed93 7b00 	vldr	d7, [r3]
 8002044:	ed9f 6b9a 	vldr	d6, [pc, #616]	@ 80022b0 <Digital_Judge+0x358>
 8002048:	ee27 7b06 	vmul.f64	d7, d7, d6
 800204c:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 8002050:	443b      	add	r3, r7
 8002052:	ed83 7b00 	vstr	d7, [r3]
    int significant_bands = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	f241 72d8 	movw	r2, #6104	@ 0x17d8
 800205c:	443a      	add	r2, r7
 800205e:	6013      	str	r3, [r2, #0]
    double band_sum = 0;
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	f241 71d0 	movw	r1, #6096	@ 0x17d0
 800206c:	4439      	add	r1, r7
 800206e:	e9c1 2300 	strd	r2, r3, [r1]

    for (int i = center_idx - FO_LENGTH / 8; i <= center_idx + FO_LENGTH / 8; i++)
 8002072:	f241 73ec 	movw	r3, #6124	@ 0x17ec
 8002076:	443b      	add	r3, r7
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800207e:	f241 72cc 	movw	r2, #6092	@ 0x17cc
 8002082:	443a      	add	r2, r7
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e0b7      	b.n	80021f8 <Digital_Judge+0x2a0>
    {
        if (x[i] > threshold)
 8002088:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 800208c:	443b      	add	r3, r7
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8002096:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	4413      	add	r3, r2
 800209e:	ed93 7b00 	vldr	d7, [r3]
 80020a2:	f241 73b0 	movw	r3, #6064	@ 0x17b0
 80020a6:	443b      	add	r3, r7
 80020a8:	ed93 6b00 	vldr	d6, [r3]
 80020ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80020b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b4:	f140 8097 	bpl.w	80021e6 <Digital_Judge+0x28e>
        {
            int flag = 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f241 72c8 	movw	r2, #6088	@ 0x17c8
 80020be:	443a      	add	r2, r7
 80020c0:	6013      	str	r3, [r2, #0]
            for (int j = i - 2; j < i + 2; j++)
 80020c2:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 80020c6:	443b      	add	r3, r7
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3b02      	subs	r3, #2
 80020cc:	f241 72c4 	movw	r2, #6084	@ 0x17c4
 80020d0:	443a      	add	r2, r7
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e02c      	b.n	8002130 <Digital_Judge+0x1d8>
            {
                if (x[j] > x[i])
 80020d6:	f241 73c4 	movw	r3, #6084	@ 0x17c4
 80020da:	443b      	add	r3, r7
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 80020e4:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	ed93 6b00 	vldr	d6, [r3]
 80020f0:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 80020f4:	443b      	add	r3, r7
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 80020fe:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	4413      	add	r3, r2
 8002106:	ed93 7b00 	vldr	d7, [r3]
 800210a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800210e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002112:	dd04      	ble.n	800211e <Digital_Judge+0x1c6>
                    flag = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	f241 72c8 	movw	r2, #6088	@ 0x17c8
 800211a:	443a      	add	r2, r7
 800211c:	6013      	str	r3, [r2, #0]
            for (int j = i - 2; j < i + 2; j++)
 800211e:	f241 73c4 	movw	r3, #6084	@ 0x17c4
 8002122:	443b      	add	r3, r7
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	f241 72c4 	movw	r2, #6084	@ 0x17c4
 800212c:	443a      	add	r2, r7
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 8002134:	443b      	add	r3, r7
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	f241 72c4 	movw	r2, #6084	@ 0x17c4
 800213e:	443a      	add	r2, r7
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	ddc7      	ble.n	80020d6 <Digital_Judge+0x17e>
            }
            if (flag == 1)
 8002146:	f241 73c8 	movw	r3, #6088	@ 0x17c8
 800214a:	443b      	add	r3, r7
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d149      	bne.n	80021e6 <Digital_Judge+0x28e>
            {
                bands[significant_bands] = x[i];
 8002152:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 8002156:	443b      	add	r3, r7
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 8002160:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	4413      	add	r3, r2
 8002168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216c:	f241 71f8 	movw	r1, #6136	@ 0x17f8
 8002170:	4439      	add	r1, r7
 8002172:	f6a1 70e8 	subw	r0, r1, #4072	@ 0xfe8
 8002176:	f241 71d8 	movw	r1, #6104	@ 0x17d8
 800217a:	4439      	add	r1, r7
 800217c:	6809      	ldr	r1, [r1, #0]
 800217e:	00c9      	lsls	r1, r1, #3
 8002180:	4401      	add	r1, r0
 8002182:	e9c1 2300 	strd	r2, r3, [r1]
                bands_idx[significant_bands] = i;
 8002186:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 800218a:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 800218e:	f241 72d8 	movw	r2, #6104	@ 0x17d8
 8002192:	443a      	add	r2, r7
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	f241 71cc 	movw	r1, #6092	@ 0x17cc
 800219a:	4439      	add	r1, r7
 800219c:	6809      	ldr	r1, [r1, #0]
 800219e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                significant_bands++;
 80021a2:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 80021a6:	443b      	add	r3, r7
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	f241 72d8 	movw	r2, #6104	@ 0x17d8
 80021b0:	443a      	add	r2, r7
 80021b2:	6013      	str	r3, [r2, #0]
                band_sum += x[i];
 80021b4:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 80021b8:	443b      	add	r3, r7
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	f507 62ff 	add.w	r2, r7, #2040	@ 0x7f8
 80021c2:	f2a2 72f4 	subw	r2, r2, #2036	@ 0x7f4
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	ed93 7b00 	vldr	d7, [r3]
 80021ce:	f241 73d0 	movw	r3, #6096	@ 0x17d0
 80021d2:	443b      	add	r3, r7
 80021d4:	ed93 6b00 	vldr	d6, [r3]
 80021d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021dc:	f241 73d0 	movw	r3, #6096	@ 0x17d0
 80021e0:	443b      	add	r3, r7
 80021e2:	ed83 7b00 	vstr	d7, [r3]
    for (int i = center_idx - FO_LENGTH / 8; i <= center_idx + FO_LENGTH / 8; i++)
 80021e6:	f241 73cc 	movw	r3, #6092	@ 0x17cc
 80021ea:	443b      	add	r3, r7
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	f241 72cc 	movw	r2, #6092	@ 0x17cc
 80021f4:	443a      	add	r2, r7
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	f241 73ec 	movw	r3, #6124	@ 0x17ec
 80021fc:	443b      	add	r3, r7
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002204:	f241 72cc 	movw	r2, #6092	@ 0x17cc
 8002208:	443a      	add	r2, r7
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	f77f af3b 	ble.w	8002088 <Digital_Judge+0x130>

            }
        }
    }

	for (int i = 0; i < significant_bands; i++)
 8002212:	2300      	movs	r3, #0
 8002214:	f507 52be 	add.w	r2, r7, #6080	@ 0x17c0
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e039      	b.n	8002290 <Digital_Judge+0x338>
	{
		if(abs(center_idx - bands_idx[i]) < 10)
 800221c:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8002220:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 8002224:	f507 52be 	add.w	r2, r7, #6080	@ 0x17c0
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222e:	f241 72ec 	movw	r2, #6124	@ 0x17ec
 8002232:	443a      	add	r2, r7
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f113 0f09 	cmn.w	r3, #9
 800223c:	db21      	blt.n	8002282 <Digital_Judge+0x32a>
 800223e:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8002242:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 8002246:	f507 52be 	add.w	r2, r7, #6080	@ 0x17c0
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	f241 72ec 	movw	r2, #6124	@ 0x17ec
 8002254:	443a      	add	r2, r7
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b09      	cmp	r3, #9
 800225c:	dc11      	bgt.n	8002282 <Digital_Judge+0x32a>
			{
				center_idx = bands_idx[i];
 800225e:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8002262:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 8002266:	f507 52be 	add.w	r2, r7, #6080	@ 0x17c0
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002270:	f241 72ec 	movw	r2, #6124	@ 0x17ec
 8002274:	443a      	add	r2, r7
 8002276:	6013      	str	r3, [r2, #0]
				is_centered = 1;
 8002278:	2301      	movs	r3, #1
 800227a:	f241 72e8 	movw	r2, #6120	@ 0x17e8
 800227e:	443a      	add	r2, r7
 8002280:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < significant_bands; i++)
 8002282:	f507 53be 	add.w	r3, r7, #6080	@ 0x17c0
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	f507 52be 	add.w	r2, r7, #6080	@ 0x17c0
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	f507 53be 	add.w	r3, r7, #6080	@ 0x17c0
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 800229a:	443b      	add	r3, r7
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	dbbc      	blt.n	800221c <Digital_Judge+0x2c4>
			}
	}
	for (int i = 1; i < significant_bands - 1; i++)
 80022a2:	2301      	movs	r3, #1
 80022a4:	f241 72bc 	movw	r2, #6076	@ 0x17bc
 80022a8:	443a      	add	r2, r7
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	e0b2      	b.n	8002414 <Digital_Judge+0x4bc>
 80022ae:	bf00      	nop
 80022b0:	9999999a 	.word	0x9999999a
 80022b4:	3fc99999 	.word	0x3fc99999
 80022b8:	00000000 	.word	0x00000000
 80022bc:	40444000 	.word	0x40444000
	{
		if ((abs(bands[i] - bands[i - 1]) < 50) || (abs(bands[i] - bands[i + 1]) < 50))
 80022c0:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 80022c4:	443b      	add	r3, r7
 80022c6:	f6a3 72e8 	subw	r2, r3, #4072	@ 0xfe8
 80022ca:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 80022ce:	443b      	add	r3, r7
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	ed93 6b00 	vldr	d6, [r3]
 80022da:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 80022de:	443b      	add	r3, r7
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f241 72f8 	movw	r2, #6136	@ 0x17f8
 80022e8:	443a      	add	r2, r7
 80022ea:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	ed93 7b00 	vldr	d7, [r3]
 80022f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022fa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80022fe:	ee17 3a90 	vmov	r3, s15
 8002302:	f113 0f31 	cmn.w	r3, #49	@ 0x31
 8002306:	db22      	blt.n	800234e <Digital_Judge+0x3f6>
 8002308:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 800230c:	443b      	add	r3, r7
 800230e:	f6a3 72e8 	subw	r2, r3, #4072	@ 0xfe8
 8002312:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 8002316:	443b      	add	r3, r7
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	ed93 6b00 	vldr	d6, [r3]
 8002322:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 8002326:	443b      	add	r3, r7
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3b01      	subs	r3, #1
 800232c:	f241 72f8 	movw	r2, #6136	@ 0x17f8
 8002330:	443a      	add	r2, r7
 8002332:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	ed93 7b00 	vldr	d7, [r3]
 800233e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002342:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002346:	ee17 3a90 	vmov	r3, s15
 800234a:	2b31      	cmp	r3, #49	@ 0x31
 800234c:	dd46      	ble.n	80023dc <Digital_Judge+0x484>
 800234e:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 8002352:	443b      	add	r3, r7
 8002354:	f6a3 72e8 	subw	r2, r3, #4072	@ 0xfe8
 8002358:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 800235c:	443b      	add	r3, r7
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	ed93 6b00 	vldr	d6, [r3]
 8002368:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 800236c:	443b      	add	r3, r7
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	f241 72f8 	movw	r2, #6136	@ 0x17f8
 8002376:	443a      	add	r2, r7
 8002378:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	ed93 7b00 	vldr	d7, [r3]
 8002384:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002388:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800238c:	ee17 3a90 	vmov	r3, s15
 8002390:	f113 0f31 	cmn.w	r3, #49	@ 0x31
 8002394:	db29      	blt.n	80023ea <Digital_Judge+0x492>
 8002396:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 800239a:	443b      	add	r3, r7
 800239c:	f6a3 72e8 	subw	r2, r3, #4072	@ 0xfe8
 80023a0:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 80023a4:	443b      	add	r3, r7
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	ed93 6b00 	vldr	d6, [r3]
 80023b0:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 80023b4:	443b      	add	r3, r7
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	f241 72f8 	movw	r2, #6136	@ 0x17f8
 80023be:	443a      	add	r2, r7
 80023c0:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	ed93 7b00 	vldr	d7, [r3]
 80023cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80023d4:	ee17 3a90 	vmov	r3, s15
 80023d8:	2b31      	cmp	r3, #49	@ 0x31
 80023da:	dc06      	bgt.n	80023ea <Digital_Judge+0x492>
		{
			adjoint_count ++;
 80023dc:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	f507 52bf 	add.w	r2, r7, #6112	@ 0x17e0
 80023e8:	6013      	str	r3, [r2, #0]
		}
		is_adjoint = (adjoint_count < 3) ? 0 : 1;
 80023ea:	f507 53bf 	add.w	r3, r7, #6112	@ 0x17e0
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	bfcc      	ite	gt
 80023f4:	2301      	movgt	r3, #1
 80023f6:	2300      	movle	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f241 72e4 	movw	r2, #6116	@ 0x17e4
 80023fe:	443a      	add	r2, r7
 8002400:	6013      	str	r3, [r2, #0]
	for (int i = 1; i < significant_bands - 1; i++)
 8002402:	f241 73bc 	movw	r3, #6076	@ 0x17bc
 8002406:	443b      	add	r3, r7
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	f241 72bc 	movw	r2, #6076	@ 0x17bc
 8002410:	443a      	add	r2, r7
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 8002418:	443b      	add	r3, r7
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3b01      	subs	r3, #1
 800241e:	f241 72bc 	movw	r2, #6076	@ 0x17bc
 8002422:	443a      	add	r2, r7
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	f6ff af4a 	blt.w	80022c0 <Digital_Judge+0x368>

//	sprintf(str , "number of significant bands: %d." , significant_bands);
//	HAL_UART_Transmit(&huart1,(uint8_t *)str , 31   ,HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);

    if (is_adjoint)
 800242c:	f241 73e4 	movw	r3, #6116	@ 0x17e4
 8002430:	443b      	add	r3, r7
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d050      	beq.n	80024da <Digital_Judge+0x582>
    {
    	bands_gap = bands_idx[significant_bands / 2 + 1] - bands_idx[significant_bands / 2 - 1];
 8002438:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 800243c:	443b      	add	r3, r7
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	da00      	bge.n	8002446 <Digital_Judge+0x4ee>
 8002444:	3301      	adds	r3, #1
 8002446:	105b      	asrs	r3, r3, #1
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 800244e:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 8002452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002456:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 800245a:	443b      	add	r3, r7
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	da00      	bge.n	8002464 <Digital_Judge+0x50c>
 8002462:	3301      	adds	r3, #1
 8002464:	105b      	asrs	r3, r3, #1
 8002466:	1e59      	subs	r1, r3, #1
 8002468:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 800246c:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 8002470:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 72b8 	movw	r2, #6072	@ 0x17b8
 800247a:	443a      	add	r2, r7
 800247c:	6013      	str	r3, [r2, #0]
    	sprintf(str , "bit rate: %.2lf kbps." , (double)bands_gap / 40.500 / 2);
 800247e:	f241 73b8 	movw	r3, #6072	@ 0x17b8
 8002482:	443b      	add	r3, r7
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800248e:	ed1f 5b76 	vldr	d5, [pc, #-472]	@ 80022b8 <Digital_Judge+0x360>
 8002492:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002496:	eeb0 6b00 	vmov.f64	d6, #0	@ 0x40000000  2.0
 800249a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800249e:	4870      	ldr	r0, [pc, #448]	@ (8002660 <Digital_Judge+0x708>)
 80024a0:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 80024a4:	4403      	add	r3, r0
 80024a6:	19d8      	adds	r0, r3, r7
 80024a8:	ec53 2b15 	vmov	r2, r3, d5
 80024ac:	496d      	ldr	r1, [pc, #436]	@ (8002664 <Digital_Judge+0x70c>)
 80024ae:	f00e fb69 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 80024b2:	496b      	ldr	r1, [pc, #428]	@ (8002660 <Digital_Judge+0x708>)
 80024b4:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 80024b8:	440b      	add	r3, r1
 80024ba:	19d9      	adds	r1, r3, r7
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024c0:	2214      	movs	r2, #20
 80024c2:	4869      	ldr	r0, [pc, #420]	@ (8002668 <Digital_Judge+0x710>)
 80024c4:	f00c f86a 	bl	800e59c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024cc:	2201      	movs	r2, #1
 80024ce:	4967      	ldr	r1, [pc, #412]	@ (800266c <Digital_Judge+0x714>)
 80024d0:	4865      	ldr	r0, [pc, #404]	@ (8002668 <Digital_Judge+0x710>)
 80024d2:	f00c f863 	bl	800e59c <HAL_UART_Transmit>
        return 4;
 80024d6:	2304      	movs	r3, #4
 80024d8:	e0b6      	b.n	8002648 <Digital_Judge+0x6f0>
    }
    else if (!is_adjoint && is_centered)
 80024da:	f241 73e4 	movw	r3, #6116	@ 0x17e4
 80024de:	443b      	add	r3, r7
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d152      	bne.n	800258c <Digital_Judge+0x634>
 80024e6:	f241 73e8 	movw	r3, #6120	@ 0x17e8
 80024ea:	443b      	add	r3, r7
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d04c      	beq.n	800258c <Digital_Judge+0x634>
    {
    	bands_gap = bands_idx[significant_bands / 2 + 1] - bands_idx[significant_bands / 2];
 80024f2:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 80024f6:	443b      	add	r3, r7
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	da00      	bge.n	8002500 <Digital_Judge+0x5a8>
 80024fe:	3301      	adds	r3, #1
 8002500:	105b      	asrs	r3, r3, #1
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8002508:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 800250c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002510:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 8002514:	443b      	add	r3, r7
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	da00      	bge.n	800251e <Digital_Judge+0x5c6>
 800251c:	3301      	adds	r3, #1
 800251e:	105b      	asrs	r3, r3, #1
 8002520:	4619      	mov	r1, r3
 8002522:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 8002526:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 800252a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 72b8 	movw	r2, #6072	@ 0x17b8
 8002534:	443a      	add	r2, r7
 8002536:	6013      	str	r3, [r2, #0]
    	sprintf(str , "bit rate: %.2lf kbps." , (double)bands_gap / 40.500 );
 8002538:	f241 73b8 	movw	r3, #6072	@ 0x17b8
 800253c:	443b      	add	r3, r7
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002548:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8002658 <Digital_Judge+0x700>
 800254c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002550:	4843      	ldr	r0, [pc, #268]	@ (8002660 <Digital_Judge+0x708>)
 8002552:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 8002556:	4403      	add	r3, r0
 8002558:	19d8      	adds	r0, r3, r7
 800255a:	ec53 2b15 	vmov	r2, r3, d5
 800255e:	4941      	ldr	r1, [pc, #260]	@ (8002664 <Digital_Judge+0x70c>)
 8002560:	f00e fb10 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 8002564:	493e      	ldr	r1, [pc, #248]	@ (8002660 <Digital_Judge+0x708>)
 8002566:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 800256a:	440b      	add	r3, r1
 800256c:	19d9      	adds	r1, r3, r7
 800256e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002572:	2214      	movs	r2, #20
 8002574:	483c      	ldr	r0, [pc, #240]	@ (8002668 <Digital_Judge+0x710>)
 8002576:	f00c f811 	bl	800e59c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 800257a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800257e:	2201      	movs	r2, #1
 8002580:	493a      	ldr	r1, [pc, #232]	@ (800266c <Digital_Judge+0x714>)
 8002582:	4839      	ldr	r0, [pc, #228]	@ (8002668 <Digital_Judge+0x710>)
 8002584:	f00c f80a 	bl	800e59c <HAL_UART_Transmit>
        return 3;
 8002588:	2303      	movs	r3, #3
 800258a:	e05d      	b.n	8002648 <Digital_Judge+0x6f0>
    }
    else if (!is_adjoint && !is_centered)
 800258c:	f241 73e4 	movw	r3, #6116	@ 0x17e4
 8002590:	443b      	add	r3, r7
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d156      	bne.n	8002646 <Digital_Judge+0x6ee>
 8002598:	f241 73e8 	movw	r3, #6120	@ 0x17e8
 800259c:	443b      	add	r3, r7
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d150      	bne.n	8002646 <Digital_Judge+0x6ee>
    {
    	bands_gap = bands_idx[significant_bands / 2 + 1] - bands_idx[significant_bands / 2];
 80025a4:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 80025a8:	443b      	add	r3, r7
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da00      	bge.n	80025b2 <Digital_Judge+0x65a>
 80025b0:	3301      	adds	r3, #1
 80025b2:	105b      	asrs	r3, r3, #1
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 80025ba:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 80025be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025c2:	f241 73d8 	movw	r3, #6104	@ 0x17d8
 80025c6:	443b      	add	r3, r7
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	da00      	bge.n	80025d0 <Digital_Judge+0x678>
 80025ce:	3301      	adds	r3, #1
 80025d0:	105b      	asrs	r3, r3, #1
 80025d2:	4619      	mov	r1, r3
 80025d4:	f507 63ff 	add.w	r3, r7, #2040	@ 0x7f8
 80025d8:	f5a3 63f7 	sub.w	r3, r3, #1976	@ 0x7b8
 80025dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 72b8 	movw	r2, #6072	@ 0x17b8
 80025e6:	443a      	add	r2, r7
 80025e8:	6013      	str	r3, [r2, #0]
    	sprintf(str , "bit rate: %.2lf kbps." , (double)bands_gap / 40.500 / 4);
 80025ea:	f241 73b8 	movw	r3, #6072	@ 0x17b8
 80025ee:	443b      	add	r3, r7
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80025fa:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8002658 <Digital_Judge+0x700>
 80025fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002602:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 8002606:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800260a:	4815      	ldr	r0, [pc, #84]	@ (8002660 <Digital_Judge+0x708>)
 800260c:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 8002610:	4403      	add	r3, r0
 8002612:	19d8      	adds	r0, r3, r7
 8002614:	ec53 2b15 	vmov	r2, r3, d5
 8002618:	4912      	ldr	r1, [pc, #72]	@ (8002664 <Digital_Judge+0x70c>)
 800261a:	f00e fab3 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 20   ,HAL_MAX_DELAY);
 800261e:	4910      	ldr	r1, [pc, #64]	@ (8002660 <Digital_Judge+0x708>)
 8002620:	f241 73f8 	movw	r3, #6136	@ 0x17f8
 8002624:	440b      	add	r3, r1
 8002626:	19d9      	adds	r1, r3, r7
 8002628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800262c:	2214      	movs	r2, #20
 800262e:	480e      	ldr	r0, [pc, #56]	@ (8002668 <Digital_Judge+0x710>)
 8002630:	f00b ffb4 	bl	800e59c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8002634:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002638:	2201      	movs	r2, #1
 800263a:	490c      	ldr	r1, [pc, #48]	@ (800266c <Digital_Judge+0x714>)
 800263c:	480a      	ldr	r0, [pc, #40]	@ (8002668 <Digital_Judge+0x710>)
 800263e:	f00b ffad 	bl	800e59c <HAL_UART_Transmit>

    	return 5;
 8002642:	2305      	movs	r3, #5
 8002644:	e000      	b.n	8002648 <Digital_Judge+0x6f0>
    }
    else {
    	return 6;
 8002646:	2306      	movs	r3, #6
    }
}
 8002648:	4618      	mov	r0, r3
 800264a:	f507 57bf 	add.w	r7, r7, #6112	@ 0x17e0
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	f3af 8000 	nop.w
 8002658:	00000000 	.word	0x00000000
 800265c:	40444000 	.word	0x40444000
 8002660:	ffffe814 	.word	0xffffe814
 8002664:	08015fb8 	.word	0x08015fb8
 8002668:	24024a1c 	.word	0x24024a1c
 800266c:	08015f50 	.word	0x08015f50

08002670 <Judger>:

 


void Judger(int value)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b0b4      	sub	sp, #208	@ 0xd0
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	char str[200];

	if (value == -1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800267e:	d10e      	bne.n	800269e <Judger+0x2e>
	{
    	sprintf(str , "No signal.\n");
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	4945      	ldr	r1, [pc, #276]	@ (800279c <Judger+0x12c>)
 8002686:	4618      	mov	r0, r3
 8002688:	f00e fa7c 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 800268c:	f107 0108 	add.w	r1, r7, #8
 8002690:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002694:	220c      	movs	r2, #12
 8002696:	4842      	ldr	r0, [pc, #264]	@ (80027a0 <Judger+0x130>)
 8002698:	f00b ff80 	bl	800e59c <HAL_UART_Transmit>
    else
    {
    	sprintf(str , "Unknown signal.\n");
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
	}
}
 800269c:	e079      	b.n	8002792 <Judger+0x122>
	else if (value == 0)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10e      	bne.n	80026c2 <Judger+0x52>
    	sprintf(str , "CW signal.\n");
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	493e      	ldr	r1, [pc, #248]	@ (80027a4 <Judger+0x134>)
 80026aa:	4618      	mov	r0, r3
 80026ac:	f00e fa6a 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 12   ,HAL_MAX_DELAY);
 80026b0:	f107 0108 	add.w	r1, r7, #8
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026b8:	220c      	movs	r2, #12
 80026ba:	4839      	ldr	r0, [pc, #228]	@ (80027a0 <Judger+0x130>)
 80026bc:	f00b ff6e 	bl	800e59c <HAL_UART_Transmit>
}
 80026c0:	e067      	b.n	8002792 <Judger+0x122>
    else if (value == 1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d10e      	bne.n	80026e6 <Judger+0x76>
    	sprintf(str , "AM signal.\n");
 80026c8:	f107 0308 	add.w	r3, r7, #8
 80026cc:	4936      	ldr	r1, [pc, #216]	@ (80027a8 <Judger+0x138>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	f00e fa58 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 80026d4:	f107 0108 	add.w	r1, r7, #8
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026dc:	220b      	movs	r2, #11
 80026de:	4830      	ldr	r0, [pc, #192]	@ (80027a0 <Judger+0x130>)
 80026e0:	f00b ff5c 	bl	800e59c <HAL_UART_Transmit>
}
 80026e4:	e055      	b.n	8002792 <Judger+0x122>
    else if (value == 2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d10e      	bne.n	800270a <Judger+0x9a>
    	sprintf(str , "FM signal.\n");
 80026ec:	f107 0308 	add.w	r3, r7, #8
 80026f0:	492e      	ldr	r1, [pc, #184]	@ (80027ac <Judger+0x13c>)
 80026f2:	4618      	mov	r0, r3
 80026f4:	f00e fa46 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 11   ,HAL_MAX_DELAY);
 80026f8:	f107 0108 	add.w	r1, r7, #8
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002700:	220b      	movs	r2, #11
 8002702:	4827      	ldr	r0, [pc, #156]	@ (80027a0 <Judger+0x130>)
 8002704:	f00b ff4a 	bl	800e59c <HAL_UART_Transmit>
}
 8002708:	e043      	b.n	8002792 <Judger+0x122>
    else if (value == 3)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d10e      	bne.n	800272e <Judger+0xbe>
    	sprintf(str , "ASK signal.\n");
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	4926      	ldr	r1, [pc, #152]	@ (80027b0 <Judger+0x140>)
 8002716:	4618      	mov	r0, r3
 8002718:	f00e fa34 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 800271c:	f107 0108 	add.w	r1, r7, #8
 8002720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002724:	221c      	movs	r2, #28
 8002726:	481e      	ldr	r0, [pc, #120]	@ (80027a0 <Judger+0x130>)
 8002728:	f00b ff38 	bl	800e59c <HAL_UART_Transmit>
}
 800272c:	e031      	b.n	8002792 <Judger+0x122>
    else if (value == 4)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d10e      	bne.n	8002752 <Judger+0xe2>
    	sprintf(str , "FSK signal.\n");
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	491e      	ldr	r1, [pc, #120]	@ (80027b4 <Judger+0x144>)
 800273a:	4618      	mov	r0, r3
 800273c:	f00e fa22 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8002740:	f107 0108 	add.w	r1, r7, #8
 8002744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002748:	221c      	movs	r2, #28
 800274a:	4815      	ldr	r0, [pc, #84]	@ (80027a0 <Judger+0x130>)
 800274c:	f00b ff26 	bl	800e59c <HAL_UART_Transmit>
}
 8002750:	e01f      	b.n	8002792 <Judger+0x122>
    else if (value == 5)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d10e      	bne.n	8002776 <Judger+0x106>
    	sprintf(str, "PSK signal.\n");
 8002758:	f107 0308 	add.w	r3, r7, #8
 800275c:	4916      	ldr	r1, [pc, #88]	@ (80027b8 <Judger+0x148>)
 800275e:	4618      	mov	r0, r3
 8002760:	f00e fa10 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8002764:	f107 0108 	add.w	r1, r7, #8
 8002768:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800276c:	221c      	movs	r2, #28
 800276e:	480c      	ldr	r0, [pc, #48]	@ (80027a0 <Judger+0x130>)
 8002770:	f00b ff14 	bl	800e59c <HAL_UART_Transmit>
}
 8002774:	e00d      	b.n	8002792 <Judger+0x122>
    	sprintf(str , "Unknown signal.\n");
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	4910      	ldr	r1, [pc, #64]	@ (80027bc <Judger+0x14c>)
 800277c:	4618      	mov	r0, r3
 800277e:	f00e fa01 	bl	8010b84 <sprintf>
    	HAL_UART_Transmit(&huart1,(uint8_t *)str , 28   ,HAL_MAX_DELAY);
 8002782:	f107 0108 	add.w	r1, r7, #8
 8002786:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800278a:	221c      	movs	r2, #28
 800278c:	4804      	ldr	r0, [pc, #16]	@ (80027a0 <Judger+0x130>)
 800278e:	f00b ff05 	bl	800e59c <HAL_UART_Transmit>
}
 8002792:	bf00      	nop
 8002794:	37d0      	adds	r7, #208	@ 0xd0
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	08015fd0 	.word	0x08015fd0
 80027a0:	24024a1c 	.word	0x24024a1c
 80027a4:	08015fdc 	.word	0x08015fdc
 80027a8:	08015fe8 	.word	0x08015fe8
 80027ac:	08015ff4 	.word	0x08015ff4
 80027b0:	08016000 	.word	0x08016000
 80027b4:	08016010 	.word	0x08016010
 80027b8:	08016020 	.word	0x08016020
 80027bc:	08016030 	.word	0x08016030

080027c0 <adc_init>:
wave_arg arg;
mod_arg mod_config = {2000000.0, 0.0};


void adc_init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t *)"start_adc\n",sizeof("start_adc\n"),HAL_MAX_DELAY);
 80027c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027c8:	220b      	movs	r2, #11
 80027ca:	4924      	ldr	r1, [pc, #144]	@ (800285c <adc_init+0x9c>)
 80027cc:	4824      	ldr	r0, [pc, #144]	@ (8002860 <adc_init+0xa0>)
 80027ce:	f00b fee5 	bl	800e59c <HAL_UART_Transmit>
	MX_ADC1Sampling_Handler(sample_fre, value);
 80027d2:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <adc_init+0xa4>)
 80027d4:	ed93 7b00 	vldr	d7, [r3]
 80027d8:	4b23      	ldr	r3, [pc, #140]	@ (8002868 <adc_init+0xa8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	eeb0 0b47 	vmov.f64	d0, d7
 80027e2:	f7fe fd25 	bl	8001230 <MX_ADC1Sampling_Handler>
	HAL_Delay(1);
 80027e6:	2001      	movs	r0, #1
 80027e8:	f001 fb8a 	bl	8003f00 <HAL_Delay>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 80027ec:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80027f0:	2100      	movs	r1, #0
 80027f2:	481e      	ldr	r0, [pc, #120]	@ (800286c <adc_init+0xac>)
 80027f4:	f003 f8d6 	bl	80059a4 <HAL_ADCEx_Calibration_Start>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <adc_init+0x50>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADCEx_Calibration_Start\r\n",
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002802:	222f      	movs	r2, #47	@ 0x2f
 8002804:	491a      	ldr	r1, [pc, #104]	@ (8002870 <adc_init+0xb0>)
 8002806:	4816      	ldr	r0, [pc, #88]	@ (8002860 <adc_init+0xa0>)
 8002808:	f00b fec8 	bl	800e59c <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADCEx_Calibration_Start\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 800280c:	f000 fb80 	bl	8002f10 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc1_data, FO_LENGTH) != HAL_OK)
 8002810:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002814:	4917      	ldr	r1, [pc, #92]	@ (8002874 <adc_init+0xb4>)
 8002816:	4815      	ldr	r0, [pc, #84]	@ (800286c <adc_init+0xac>)
 8002818:	f002 f8fc 	bl	8004a14 <HAL_ADC_Start_DMA>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <adc_init+0x74>
	{
		HAL_UART_Transmit(&huart1,(uint8_t *)"hadc1 error with HAL_ADC_Start_DMA\r\n",
 8002822:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002826:	2225      	movs	r2, #37	@ 0x25
 8002828:	4913      	ldr	r1, [pc, #76]	@ (8002878 <adc_init+0xb8>)
 800282a:	480d      	ldr	r0, [pc, #52]	@ (8002860 <adc_init+0xa0>)
 800282c:	f00b feb6 	bl	800e59c <HAL_UART_Transmit>
				sizeof("hadc1 error with HAL_ADC_Start_DMA\r\n"),HAL_MAX_DELAY);
			Error_Handler();
 8002830:	f000 fb6e 	bl	8002f10 <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim15);
 8002834:	4811      	ldr	r0, [pc, #68]	@ (800287c <adc_init+0xbc>)
 8002836:	f00a fe49 	bl	800d4cc <HAL_TIM_Base_Start>
	while (!AdcConvEnd);
 800283a:	bf00      	nop
 800283c:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <adc_init+0xc0>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0fa      	beq.n	800283c <adc_init+0x7c>
	AdcConvEnd = 0;
 8002846:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <adc_init+0xc0>)
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
	HAL_ADC_DeInit(&hadc1);
 800284c:	4807      	ldr	r0, [pc, #28]	@ (800286c <adc_init+0xac>)
 800284e:	f001 ff61 	bl	8004714 <HAL_ADC_DeInit>
	HAL_TIM_Base_Stop(&htim15);
 8002852:	480a      	ldr	r0, [pc, #40]	@ (800287c <adc_init+0xbc>)
 8002854:	f00a feaa 	bl	800d5ac <HAL_TIM_Base_Stop>
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	08016044 	.word	0x08016044
 8002860:	24024a1c 	.word	0x24024a1c
 8002864:	240248c0 	.word	0x240248c0
 8002868:	240248c8 	.word	0x240248c8
 800286c:	240046fc 	.word	0x240046fc
 8002870:	08016050 	.word	0x08016050
 8002874:	240006e0 	.word	0x240006e0
 8002878:	08016080 	.word	0x08016080
 800287c:	240249d0 	.word	0x240249d0
 8002880:	240048b8 	.word	0x240048b8
 8002884:	00000000 	.word	0x00000000

08002888 <ADC_Get>:


void ADC_Get(double arr[])
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	adc_init();
 8002890:	f7ff ff96 	bl	80027c0 <adc_init>
	double voltage;
//	char str[50];

	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 8002894:	2300      	movs	r3, #0
 8002896:	82fb      	strh	r3, [r7, #22]
 8002898:	e020      	b.n	80028dc <ADC_Get+0x54>
		voltage = ((double)adc1_data[temp]*3.3)/65535 *3;
 800289a:	8afb      	ldrh	r3, [r7, #22]
 800289c:	4a18      	ldr	r2, [pc, #96]	@ (8002900 <ADC_Get+0x78>)
 800289e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80028aa:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 80028f0 <ADC_Get+0x68>
 80028ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80028b2:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80028f8 <ADC_Get+0x70>
 80028b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028ba:	eeb0 6b08 	vmov.f64	d6, #8	@ 0x40400000  3.0
 80028be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80028c2:	ed87 7b02 	vstr	d7, [r7, #8]

		arr[temp] = voltage;
 80028c6:	8afb      	ldrh	r3, [r7, #22]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	18d1      	adds	r1, r2, r3
 80028ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028d2:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint16_t temp = 0; temp< FO_LENGTH;temp++){
 80028d6:	8afb      	ldrh	r3, [r7, #22]
 80028d8:	3301      	adds	r3, #1
 80028da:	82fb      	strh	r3, [r7, #22]
 80028dc:	8afb      	ldrh	r3, [r7, #22]
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e2:	d3da      	bcc.n	800289a <ADC_Get+0x12>
//		sprintf(str , "%.5f" , v[temp]);
//		HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//		HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
	}
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	66666666 	.word	0x66666666
 80028f4:	400a6666 	.word	0x400a6666
 80028f8:	00000000 	.word	0x00000000
 80028fc:	40efffe0 	.word	0x40efffe0
 8002900:	240006e0 	.word	0x240006e0

08002904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	f5ad 3d80 	sub.w	sp, sp, #65536	@ 0x10000
 800290a:	b094      	sub	sp, #80	@ 0x50
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800290e:	f000 faa1 	bl	8002e54 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002912:	4b8e      	ldr	r3, [pc, #568]	@ (8002b4c <main+0x248>)
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d11b      	bne.n	8002956 <main+0x52>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800291e:	f3bf 8f4f 	dsb	sy
}
 8002922:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002924:	f3bf 8f6f 	isb	sy
}
 8002928:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800292a:	4b88      	ldr	r3, [pc, #544]	@ (8002b4c <main+0x248>)
 800292c:	2200      	movs	r2, #0
 800292e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002932:	f3bf 8f4f 	dsb	sy
}
 8002936:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002938:	f3bf 8f6f 	isb	sy
}
 800293c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800293e:	4b83      	ldr	r3, [pc, #524]	@ (8002b4c <main+0x248>)
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	4a82      	ldr	r2, [pc, #520]	@ (8002b4c <main+0x248>)
 8002944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002948:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800294a:	f3bf 8f4f 	dsb	sy
}
 800294e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002950:	f3bf 8f6f 	isb	sy
}
 8002954:	e000      	b.n	8002958 <main+0x54>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002956:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002958:	4b7c      	ldr	r3, [pc, #496]	@ (8002b4c <main+0x248>)
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d14e      	bne.n	8002a02 <main+0xfe>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002964:	4b79      	ldr	r3, [pc, #484]	@ (8002b4c <main+0x248>)
 8002966:	2200      	movs	r2, #0
 8002968:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800296c:	f3bf 8f4f 	dsb	sy
}
 8002970:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002972:	4b76      	ldr	r3, [pc, #472]	@ (8002b4c <main+0x248>)
 8002974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002978:	4a75      	ldr	r2, [pc, #468]	@ (8002b50 <main+0x24c>)
 800297a:	443a      	add	r2, r7
 800297c:	6013      	str	r3, [r2, #0]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800297e:	4b74      	ldr	r3, [pc, #464]	@ (8002b50 <main+0x24c>)
 8002980:	443b      	add	r3, r7
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0b5b      	lsrs	r3, r3, #13
 8002986:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800298a:	4a72      	ldr	r2, [pc, #456]	@ (8002b54 <main+0x250>)
 800298c:	443a      	add	r2, r7
 800298e:	6013      	str	r3, [r2, #0]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002990:	4b6f      	ldr	r3, [pc, #444]	@ (8002b50 <main+0x24c>)
 8002992:	443b      	add	r3, r7
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	08db      	lsrs	r3, r3, #3
 8002998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800299c:	4a6e      	ldr	r2, [pc, #440]	@ (8002b58 <main+0x254>)
 800299e:	443a      	add	r2, r7
 80029a0:	6013      	str	r3, [r2, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80029a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002b54 <main+0x250>)
 80029a4:	443b      	add	r3, r7
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80029ae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80029b0:	4a69      	ldr	r2, [pc, #420]	@ (8002b58 <main+0x254>)
 80029b2:	443a      	add	r2, r7
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80029b8:	4964      	ldr	r1, [pc, #400]	@ (8002b4c <main+0x248>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80029c0:	4b65      	ldr	r3, [pc, #404]	@ (8002b58 <main+0x254>)
 80029c2:	443b      	add	r3, r7
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1e5a      	subs	r2, r3, #1
 80029c8:	4963      	ldr	r1, [pc, #396]	@ (8002b58 <main+0x254>)
 80029ca:	4439      	add	r1, r7
 80029cc:	600a      	str	r2, [r1, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e7      	bne.n	80029a2 <main+0x9e>
    } while(sets-- != 0U);
 80029d2:	4b60      	ldr	r3, [pc, #384]	@ (8002b54 <main+0x250>)
 80029d4:	443b      	add	r3, r7
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	1e5a      	subs	r2, r3, #1
 80029da:	495e      	ldr	r1, [pc, #376]	@ (8002b54 <main+0x250>)
 80029dc:	4439      	add	r1, r7
 80029de:	600a      	str	r2, [r1, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1d5      	bne.n	8002990 <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 80029e4:	f3bf 8f4f 	dsb	sy
}
 80029e8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80029ea:	4b58      	ldr	r3, [pc, #352]	@ (8002b4c <main+0x248>)
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	4a57      	ldr	r2, [pc, #348]	@ (8002b4c <main+0x248>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80029f6:	f3bf 8f4f 	dsb	sy
}
 80029fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029fc:	f3bf 8f6f 	isb	sy
}
 8002a00:	e000      	b.n	8002a04 <main+0x100>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002a02:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a04:	f001 f9ea 	bl	8003ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a08:	f000 f95e 	bl	8002cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a0c:	f7fe fd7a 	bl	8001504 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a10:	f7fe fd50 	bl	80014b4 <MX_DMA_Init>
  MX_I2C1_Init();
 8002a14:	f7fe fdf0 	bl	80015f8 <MX_I2C1_Init>
  MX_TIM15_Init();
 8002a18:	f000 fffa 	bl	8003a10 <MX_TIM15_Init>
  MX_DAC1_Init();
 8002a1c:	f7fe fc9e 	bl	800135c <MX_DAC1_Init>
  MX_TIM7_Init();
 8002a20:	f000 ffc0 	bl	80039a4 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002a24:	f001 f8f2 	bl	8003c0c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002a28:	f7fe fabe 	bl	8000fa8 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002a2c:	f000 ff84 	bl	8003938 <MX_TIM6_Init>
  MX_TIM4_Init();
 8002a30:	f000 fef6 	bl	8003820 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  char str[50];
  double v_cpy[FO_LENGTH];
  ADC_Get(v);
 8002a34:	4849      	ldr	r0, [pc, #292]	@ (8002b5c <main+0x258>)
 8002a36:	f7ff ff27 	bl	8002888 <ADC_Get>
  for (int i = 1 ;i < FO_LENGTH	; i++)
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	4a48      	ldr	r2, [pc, #288]	@ (8002b60 <main+0x25c>)
 8002a3e:	443a      	add	r2, r7
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e022      	b.n	8002a8a <main+0x186>
  {
	  sprintf(str , "%.5f" , v[i]);
 8002a44:	4a45      	ldr	r2, [pc, #276]	@ (8002b5c <main+0x258>)
 8002a46:	4b46      	ldr	r3, [pc, #280]	@ (8002b60 <main+0x25c>)
 8002a48:	443b      	add	r3, r7
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	4843      	ldr	r0, [pc, #268]	@ (8002b64 <main+0x260>)
 8002a56:	4438      	add	r0, r7
 8002a58:	4943      	ldr	r1, [pc, #268]	@ (8002b68 <main+0x264>)
 8002a5a:	f00e f893 	bl	8010b84 <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 8002a5e:	4941      	ldr	r1, [pc, #260]	@ (8002b64 <main+0x260>)
 8002a60:	4439      	add	r1, r7
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a66:	2207      	movs	r2, #7
 8002a68:	4840      	ldr	r0, [pc, #256]	@ (8002b6c <main+0x268>)
 8002a6a:	f00b fd97 	bl	800e59c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a72:	2201      	movs	r2, #1
 8002a74:	493e      	ldr	r1, [pc, #248]	@ (8002b70 <main+0x26c>)
 8002a76:	483d      	ldr	r0, [pc, #244]	@ (8002b6c <main+0x268>)
 8002a78:	f00b fd90 	bl	800e59c <HAL_UART_Transmit>
  for (int i = 1 ;i < FO_LENGTH	; i++)
 8002a7c:	4b38      	ldr	r3, [pc, #224]	@ (8002b60 <main+0x25c>)
 8002a7e:	443b      	add	r3, r7
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3301      	adds	r3, #1
 8002a84:	4a36      	ldr	r2, [pc, #216]	@ (8002b60 <main+0x25c>)
 8002a86:	443a      	add	r2, r7
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4b35      	ldr	r3, [pc, #212]	@ (8002b60 <main+0x25c>)
 8002a8c:	443b      	add	r3, r7
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a94:	dbd6      	blt.n	8002a44 <main+0x140>
  }
  memcpy(v_cpy, v, FO_LENGTH);
 8002a96:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <main+0x270>)
 8002a98:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002a9c:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8002aa0:	443b      	add	r3, r7
 8002aa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aa6:	492d      	ldr	r1, [pc, #180]	@ (8002b5c <main+0x258>)
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f00e fbc7 	bl	801123c <memcpy>

  Blackman(FO_LENGTH, (1640 - FO_LENGTH/ 4), (1640 + FO_LENGTH / 4), v);
 8002aae:	4b2b      	ldr	r3, [pc, #172]	@ (8002b5c <main+0x258>)
 8002ab0:	f640 6268 	movw	r2, #3688	@ 0xe68
 8002ab4:	4930      	ldr	r1, [pc, #192]	@ (8002b78 <main+0x274>)
 8002ab6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002aba:	f7fe f9e1 	bl	8000e80 <Blackman>
  FFT_Mag_sqrt(FO_LENGTH, v);
 8002abe:	4927      	ldr	r1, [pc, #156]	@ (8002b5c <main+0x258>)
 8002ac0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ac4:	f7fe f9a8 	bl	8000e18 <FFT_Mag_sqrt>
//  {
//	  sprintf(str , "%.5f" , v[i]);
//	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
//  }
  value = Analog_Judge(arg, mod_config, v, v_cpy);
 8002ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b74 <main+0x270>)
 8002aca:	4b2c      	ldr	r3, [pc, #176]	@ (8002b7c <main+0x278>)
 8002acc:	4413      	add	r3, r2
 8002ace:	19da      	adds	r2, r3, r7
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b80 <main+0x27c>)
 8002ad2:	ed93 3b00 	vldr	d3, [r3]
 8002ad6:	ed93 4b02 	vldr	d4, [r3, #8]
 8002ada:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <main+0x280>)
 8002adc:	ed93 5b00 	vldr	d5, [r3]
 8002ae0:	ed93 6b02 	vldr	d6, [r3, #8]
 8002ae4:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ae8:	4611      	mov	r1, r2
 8002aea:	481c      	ldr	r0, [pc, #112]	@ (8002b5c <main+0x258>)
 8002aec:	eeb0 0b45 	vmov.f64	d0, d5
 8002af0:	eeb0 1b46 	vmov.f64	d1, d6
 8002af4:	eeb0 2b47 	vmov.f64	d2, d7
 8002af8:	f7fe fe26 	bl	8001748 <Analog_Judge>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4a22      	ldr	r2, [pc, #136]	@ (8002b88 <main+0x284>)
 8002b00:	6013      	str	r3, [r2, #0]
  Judger(value);
 8002b02:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <main+0x284>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fdb2 	bl	8002670 <Judger>

  Demodulate_Init(v_cpy, v, FO_LENGTH, value);
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b88 <main+0x284>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4818      	ldr	r0, [pc, #96]	@ (8002b74 <main+0x270>)
 8002b12:	4a1a      	ldr	r2, [pc, #104]	@ (8002b7c <main+0x278>)
 8002b14:	4402      	add	r2, r0
 8002b16:	19d0      	adds	r0, r2, r7
 8002b18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b1c:	490f      	ldr	r1, [pc, #60]	@ (8002b5c <main+0x258>)
 8002b1e:	f001 f85f 	bl	8003be0 <Demodulate_Init>

  ADC_Get(v);
 8002b22:	480e      	ldr	r0, [pc, #56]	@ (8002b5c <main+0x258>)
 8002b24:	f7ff feb0 	bl	8002888 <ADC_Get>
  memcpy(v_cpy, v, FO_LENGTH);
 8002b28:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <main+0x270>)
 8002b2a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002b2e:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8002b32:	443b      	add	r3, r7
 8002b34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b38:	4908      	ldr	r1, [pc, #32]	@ (8002b5c <main+0x258>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f00e fb7e 	bl	801123c <memcpy>

  for (int i = 0 ;i < FO_LENGTH ; i++)
 8002b40:	2300      	movs	r3, #0
 8002b42:	4a12      	ldr	r2, [pc, #72]	@ (8002b8c <main+0x288>)
 8002b44:	443a      	add	r2, r7
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	e045      	b.n	8002bd6 <main+0x2d2>
 8002b4a:	bf00      	nop
 8002b4c:	e000ed00 	.word	0xe000ed00
 8002b50:	00010040 	.word	0x00010040
 8002b54:	0001003c 	.word	0x0001003c
 8002b58:	00010038 	.word	0x00010038
 8002b5c:	240048c0 	.word	0x240048c0
 8002b60:	0001004c 	.word	0x0001004c
 8002b64:	00010004 	.word	0x00010004
 8002b68:	080160a8 	.word	0x080160a8
 8002b6c:	24024a1c 	.word	0x24024a1c
 8002b70:	080160b0 	.word	0x080160b0
 8002b74:	fffeffb0 	.word	0xfffeffb0
 8002b78:	fffffe68 	.word	0xfffffe68
 8002b7c:	00010050 	.word	0x00010050
 8002b80:	24000000 	.word	0x24000000
 8002b84:	240248d0 	.word	0x240248d0
 8002b88:	240248c8 	.word	0x240248c8
 8002b8c:	00010048 	.word	0x00010048
  {
	  sprintf(str , "%.5f" , v[i]);
 8002b90:	4a41      	ldr	r2, [pc, #260]	@ (8002c98 <main+0x394>)
 8002b92:	4b42      	ldr	r3, [pc, #264]	@ (8002c9c <main+0x398>)
 8002b94:	443b      	add	r3, r7
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	483f      	ldr	r0, [pc, #252]	@ (8002ca0 <main+0x39c>)
 8002ba2:	4438      	add	r0, r7
 8002ba4:	493f      	ldr	r1, [pc, #252]	@ (8002ca4 <main+0x3a0>)
 8002ba6:	f00d ffed 	bl	8010b84 <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 8002baa:	493d      	ldr	r1, [pc, #244]	@ (8002ca0 <main+0x39c>)
 8002bac:	4439      	add	r1, r7
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bb2:	2207      	movs	r2, #7
 8002bb4:	483c      	ldr	r0, [pc, #240]	@ (8002ca8 <main+0x3a4>)
 8002bb6:	f00b fcf1 	bl	800e59c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	493a      	ldr	r1, [pc, #232]	@ (8002cac <main+0x3a8>)
 8002bc2:	4839      	ldr	r0, [pc, #228]	@ (8002ca8 <main+0x3a4>)
 8002bc4:	f00b fcea 	bl	800e59c <HAL_UART_Transmit>
  for (int i = 0 ;i < FO_LENGTH ; i++)
 8002bc8:	4b34      	ldr	r3, [pc, #208]	@ (8002c9c <main+0x398>)
 8002bca:	443b      	add	r3, r7
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	4a32      	ldr	r2, [pc, #200]	@ (8002c9c <main+0x398>)
 8002bd2:	443a      	add	r2, r7
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	4b31      	ldr	r3, [pc, #196]	@ (8002c9c <main+0x398>)
 8002bd8:	443b      	add	r3, r7
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be0:	dbd6      	blt.n	8002b90 <main+0x28c>
  }

  Blackman(FO_LENGTH, (1640 - FO_LENGTH/ 4), (1640 + FO_LENGTH / 4), v);
 8002be2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c98 <main+0x394>)
 8002be4:	f640 6268 	movw	r2, #3688	@ 0xe68
 8002be8:	4931      	ldr	r1, [pc, #196]	@ (8002cb0 <main+0x3ac>)
 8002bea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002bee:	f7fe f947 	bl	8000e80 <Blackman>
  FFT_Mag_sqrt(FO_LENGTH, v);
 8002bf2:	4929      	ldr	r1, [pc, #164]	@ (8002c98 <main+0x394>)
 8002bf4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002bf8:	f7fe f90e 	bl	8000e18 <FFT_Mag_sqrt>
//	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
//	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
//  }


  SineWave_FM_Demodulate(out, v_cpy, FO_LENGTH, 5, mod_config, arg);
 8002bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb4 <main+0x3b0>)
 8002bfe:	ed93 3b00 	vldr	d3, [r3]
 8002c02:	ed93 4b02 	vldr	d4, [r3, #8]
 8002c06:	ed93 5b04 	vldr	d5, [r3, #16]
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb8 <main+0x3b4>)
 8002c0c:	ed93 6b00 	vldr	d6, [r3]
 8002c10:	ed93 7b02 	vldr	d7, [r3, #8]
 8002c14:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <main+0x3b8>)
 8002c16:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002c1a:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8002c1e:	443b      	add	r3, r7
 8002c20:	eeb0 1b46 	vmov.f64	d1, d6
 8002c24:	eeb0 2b47 	vmov.f64	d2, d7
 8002c28:	eeb1 0b04 	vmov.f64	d0, #20	@ 0x40a00000  5.0
 8002c2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c30:	4619      	mov	r1, r3
 8002c32:	4823      	ldr	r0, [pc, #140]	@ (8002cc0 <main+0x3bc>)
 8002c34:	f000 f9cc 	bl	8002fd0 <SineWave_FM_Demodulate>

  for (int i = 0 ;i < FO_LENGTH ; i++)
 8002c38:	2300      	movs	r3, #0
 8002c3a:	4a22      	ldr	r2, [pc, #136]	@ (8002cc4 <main+0x3c0>)
 8002c3c:	443a      	add	r2, r7
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	e022      	b.n	8002c88 <main+0x384>
  {
	  sprintf(str , "%.5f" , out[i]);
 8002c42:	4a1f      	ldr	r2, [pc, #124]	@ (8002cc0 <main+0x3bc>)
 8002c44:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc4 <main+0x3c0>)
 8002c46:	443b      	add	r3, r7
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	4813      	ldr	r0, [pc, #76]	@ (8002ca0 <main+0x39c>)
 8002c54:	4438      	add	r0, r7
 8002c56:	4913      	ldr	r1, [pc, #76]	@ (8002ca4 <main+0x3a0>)
 8002c58:	f00d ff94 	bl	8010b84 <sprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *)str , 7   ,HAL_MAX_DELAY);
 8002c5c:	4910      	ldr	r1, [pc, #64]	@ (8002ca0 <main+0x39c>)
 8002c5e:	4439      	add	r1, r7
 8002c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c64:	2207      	movs	r2, #7
 8002c66:	4810      	ldr	r0, [pc, #64]	@ (8002ca8 <main+0x3a4>)
 8002c68:	f00b fc98 	bl	800e59c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1 ,(uint8_t *)"\n", 1 , HAL_MAX_DELAY);
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c70:	2201      	movs	r2, #1
 8002c72:	490e      	ldr	r1, [pc, #56]	@ (8002cac <main+0x3a8>)
 8002c74:	480c      	ldr	r0, [pc, #48]	@ (8002ca8 <main+0x3a4>)
 8002c76:	f00b fc91 	bl	800e59c <HAL_UART_Transmit>
  for (int i = 0 ;i < FO_LENGTH ; i++)
 8002c7a:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <main+0x3c0>)
 8002c7c:	443b      	add	r3, r7
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	4a10      	ldr	r2, [pc, #64]	@ (8002cc4 <main+0x3c0>)
 8002c84:	443a      	add	r2, r7
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <main+0x3c0>)
 8002c8a:	443b      	add	r3, r7
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c92:	dbd6      	blt.n	8002c42 <main+0x33e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <main+0x390>
 8002c98:	240048c0 	.word	0x240048c0
 8002c9c:	00010048 	.word	0x00010048
 8002ca0:	00010004 	.word	0x00010004
 8002ca4:	080160a8 	.word	0x080160a8
 8002ca8:	24024a1c 	.word	0x24024a1c
 8002cac:	080160b0 	.word	0x080160b0
 8002cb0:	fffffe68 	.word	0xfffffe68
 8002cb4:	240248d0 	.word	0x240248d0
 8002cb8:	24000000 	.word	0x24000000
 8002cbc:	fffeffb0 	.word	0xfffeffb0
 8002cc0:	240148c0 	.word	0x240148c0
 8002cc4:	00010044 	.word	0x00010044

08002cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b09e      	sub	sp, #120	@ 0x78
 8002ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cd2:	224c      	movs	r2, #76	@ 0x4c
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f00e fa5c 	bl	8011194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cdc:	f107 030c 	add.w	r3, r7, #12
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f00e fa55 	bl	8011194 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002cea:	2002      	movs	r0, #2
 8002cec:	f006 fe76 	bl	80099dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	@ (8002e28 <SystemClock_Config+0x160>)
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8002e28 <SystemClock_Config+0x160>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002d00:	4b49      	ldr	r3, [pc, #292]	@ (8002e28 <SystemClock_Config+0x160>)
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	4b48      	ldr	r3, [pc, #288]	@ (8002e2c <SystemClock_Config+0x164>)
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	4a47      	ldr	r2, [pc, #284]	@ (8002e2c <SystemClock_Config+0x164>)
 8002d10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d14:	6193      	str	r3, [r2, #24]
 8002d16:	4b45      	ldr	r3, [pc, #276]	@ (8002e2c <SystemClock_Config+0x164>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002d22:	bf00      	nop
 8002d24:	4b41      	ldr	r3, [pc, #260]	@ (8002e2c <SystemClock_Config+0x164>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d30:	d1f8      	bne.n	8002d24 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	4b3f      	ldr	r3, [pc, #252]	@ (8002e30 <SystemClock_Config+0x168>)
 8002d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d38:	4a3d      	ldr	r2, [pc, #244]	@ (8002e30 <SystemClock_Config+0x168>)
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d42:	4b3b      	ldr	r3, [pc, #236]	@ (8002e30 <SystemClock_Config+0x168>)
 8002d44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002d50:	2300      	movs	r3, #0
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4b35      	ldr	r3, [pc, #212]	@ (8002e2c <SystemClock_Config+0x164>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	4a34      	ldr	r2, [pc, #208]	@ (8002e2c <SystemClock_Config+0x164>)
 8002d5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d5e:	6193      	str	r3, [r2, #24]
 8002d60:	4b32      	ldr	r3, [pc, #200]	@ (8002e2c <SystemClock_Config+0x164>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e28 <SystemClock_Config+0x160>)
 8002d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002e28 <SystemClock_Config+0x160>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002d76:	4b2c      	ldr	r3, [pc, #176]	@ (8002e28 <SystemClock_Config+0x160>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002d82:	bf00      	nop
 8002d84:	4b29      	ldr	r3, [pc, #164]	@ (8002e2c <SystemClock_Config+0x164>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d90:	d1f8      	bne.n	8002d84 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002d92:	4b27      	ldr	r3, [pc, #156]	@ (8002e30 <SystemClock_Config+0x168>)
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d96:	f023 0303 	bic.w	r3, r3, #3
 8002d9a:	4a25      	ldr	r2, [pc, #148]	@ (8002e30 <SystemClock_Config+0x168>)
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002da2:	2301      	movs	r3, #1
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002da6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002daa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dac:	2302      	movs	r3, #2
 8002dae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002db0:	2302      	movs	r3, #2
 8002db2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002db4:	2305      	movs	r3, #5
 8002db6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002db8:	23c0      	movs	r3, #192	@ 0xc0
 8002dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002dc8:	2308      	movs	r3, #8
 8002dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f006 fe39 	bl	8009a50 <HAL_RCC_OscConfig>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8002de4:	f000 f894 	bl	8002f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002de8:	233f      	movs	r3, #63	@ 0x3f
 8002dea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dec:	2303      	movs	r3, #3
 8002dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002df4:	2308      	movs	r3, #8
 8002df6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002df8:	2340      	movs	r3, #64	@ 0x40
 8002dfa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002dfc:	2340      	movs	r3, #64	@ 0x40
 8002dfe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002e06:	2340      	movs	r3, #64	@ 0x40
 8002e08:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	2104      	movs	r1, #4
 8002e10:	4618      	mov	r0, r3
 8002e12:	f007 fa79 	bl	800a308 <HAL_RCC_ClockConfig>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8002e1c:	f000 f878 	bl	8002f10 <Error_Handler>
  }
}
 8002e20:	bf00      	nop
 8002e22:	3778      	adds	r7, #120	@ 0x78
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	58000400 	.word	0x58000400
 8002e2c:	58024800 	.word	0x58024800
 8002e30:	58024400 	.word	0x58024400

08002e34 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
   if(hadc->Instance == ADC1)
	{
      //SCB_InvalidateDCache_by_Addr((uint32_t *) &adc1_data[0], ADC1_BUFFER_SIZE);
   }
	 AdcConvEnd = 1;
 8002e3c:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	240048b8 	.word	0x240048b8

08002e54 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002e66:	f002 ffef 	bl	8005e48 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8002e72:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8002e76:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002e78:	2312      	movs	r3, #18
 8002e7a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002e80:	2301      	movs	r3, #1
 8002e82:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002e84:	2303      	movs	r3, #3
 8002e86:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002e98:	463b      	mov	r3, r7
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 f80c 	bl	8005eb8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002ea4:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002ea8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8002eaa:	2310      	movs	r3, #16
 8002eac:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002eb6:	463b      	mov	r3, r7
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f002 fffd 	bl	8005eb8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8002ec2:	4b11      	ldr	r3, [pc, #68]	@ (8002f08 <MPU_Config+0xb4>)
 8002ec4:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002ec6:	463b      	mov	r3, r7
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f002 fff5 	bl	8005eb8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <MPU_Config+0xb8>)
 8002ed4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8002ed6:	230e      	movs	r3, #14
 8002ed8:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002eda:	463b      	mov	r3, r7
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 ffeb 	bl	8005eb8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8002ee6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8002eea:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002eec:	230f      	movs	r3, #15
 8002eee:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002ef0:	463b      	mov	r3, r7
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 ffe0 	bl	8005eb8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002ef8:	2004      	movs	r0, #4
 8002efa:	f002 ffbd 	bl	8005e78 <HAL_MPU_Enable>

}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	30020000 	.word	0x30020000
 8002f0c:	30040000 	.word	0x30040000

08002f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f14:	b672      	cpsid	i
}
 8002f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <Error_Handler+0x8>
 8002f1c:	0000      	movs	r0, r0
	...

08002f20 <SineWave_Generator>:
#include "signals.h"

void SineWave_Generator(double wave[], int size, double time, wave_arg arg)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	ed2d 8b02 	vpush	{d8}
 8002f26:	b08e      	sub	sp, #56	@ 0x38
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f2c:	6239      	str	r1, [r7, #32]
 8002f2e:	ed87 0b06 	vstr	d0, [r7, #24]
 8002f32:	eeb0 5b41 	vmov.f64	d5, d1
 8002f36:	eeb0 6b42 	vmov.f64	d6, d2
 8002f3a:	eeb0 7b43 	vmov.f64	d7, d3
 8002f3e:	ed87 5b00 	vstr	d5, [r7]
 8002f42:	ed87 6b02 	vstr	d6, [r7, #8]
 8002f46:	ed87 7b04 	vstr	d7, [r7, #16]
    double time_step = (double)time / size;
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	ee07 3a90 	vmov	s15, r3
 8002f50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002f54:	ed97 5b06 	vldr	d5, [r7, #24]
 8002f58:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002f5c:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
    for (int i = 0; i < size; i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f64:	e023      	b.n	8002fae <SineWave_Generator+0x8e>
    {
        wave[i] = arg.amp * sin(2 * M_PI * i * time_step + arg.phase);
 8002f66:	ed97 8b00 	vldr	d8, [r7]
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002f74:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8002fc8 <SineWave_Generator+0xa8>
 8002f78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002f7c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002f80:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002f84:	ed97 7b04 	vldr	d7, [r7, #16]
 8002f88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f8c:	eeb0 0b47 	vmov.f64	d0, d7
 8002f90:	f012 f892 	bl	80150b8 <sin>
 8002f94:	eeb0 7b40 	vmov.f64	d7, d0
 8002f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f9e:	4413      	add	r3, r2
 8002fa0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002fa4:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 0; i < size; i++)
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002faa:	3301      	adds	r3, #1
 8002fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	dbd7      	blt.n	8002f66 <SineWave_Generator+0x46>
    }
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	3738      	adds	r7, #56	@ 0x38
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	ecbd 8b02 	vpop	{d8}
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	54442d18 	.word	0x54442d18
 8002fcc:	401921fb 	.word	0x401921fb

08002fd0 <SineWave_FM_Demodulate>:
    }
}


void SineWave_FM_Demodulate(double out[], double wave[], int size, double time, mod_arg fm_arg, wave_arg arg)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	f5ad 3d00 	sub.w	sp, sp, #131072	@ 0x20000
 8002fd6:	b098      	sub	sp, #96	@ 0x60
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002fde:	f843 0c24 	str.w	r0, [r3, #-36]
 8002fe2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002fe6:	f843 1c28 	str.w	r1, [r3, #-40]
 8002fea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002fee:	f843 2c2c 	str.w	r2, [r3, #-44]
 8002ff2:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <SineWave_FM_Demodulate+0x308>)
 8002ff4:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8002ff8:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8002ffc:	443b      	add	r3, r7
 8002ffe:	ed03 0b02 	vstr	d0, [r3, #-8]
 8003002:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003006:	461a      	mov	r2, r3
 8003008:	eeb0 6b44 	vmov.f64	d6, d4
 800300c:	eeb0 7b45 	vmov.f64	d7, d5
 8003010:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003014:	ed02 1b12 	vstr	d1, [r2, #-72]	@ 0xffffffb8
 8003018:	ed02 2b10 	vstr	d2, [r2, #-64]	@ 0xffffffc0
 800301c:	ed03 3b18 	vstr	d3, [r3, #-96]	@ 0xffffffa0
 8003020:	ed03 6b16 	vstr	d6, [r3, #-88]	@ 0xffffffa8
 8003024:	ed03 7b14 	vstr	d7, [r3, #-80]	@ 0xffffffb0
    double w1[FO_LENGTH] = {0};
 8003028:	4bac      	ldr	r3, [pc, #688]	@ (80032dc <SineWave_FM_Demodulate+0x30c>)
 800302a:	443b      	add	r3, r7
 800302c:	3b08      	subs	r3, #8
 800302e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f00e f8ad 	bl	8011194 <memset>
    double w2[FO_LENGTH] = {0};
 800303a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800303e:	3b08      	subs	r3, #8
 8003040:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f00e f8a4 	bl	8011194 <memset>
    wave_arg arg_delta = {arg.amp, arg.fre, arg.phase + M_PI / 2};
 800304c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003050:	e953 2318 	ldrd	r2, r3, [r3, #-96]	@ 0x60
 8003054:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003058:	e941 2308 	strd	r2, r3, [r1, #-32]
 800305c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003060:	e953 2316 	ldrd	r2, r3, [r3, #-88]	@ 0x58
 8003064:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8003068:	e941 2306 	strd	r2, r3, [r1, #-24]
 800306c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003070:	ed13 7b14 	vldr	d7, [r3, #-80]	@ 0xffffffb0
 8003074:	ed9f 6b92 	vldr	d6, [pc, #584]	@ 80032c0 <SineWave_FM_Demodulate+0x2f0>
 8003078:	ee37 7b06 	vadd.f64	d7, d7, d6
 800307c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003080:	ed03 7b04 	vstr	d7, [r3, #-16]

    SineWave_Generator(w1, FO_LENGTH, time * fm_arg.fre / arg.fre, arg);
 8003084:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003088:	ed13 6b12 	vldr	d6, [r3, #-72]	@ 0xffffffb8
 800308c:	4b92      	ldr	r3, [pc, #584]	@ (80032d8 <SineWave_FM_Demodulate+0x308>)
 800308e:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8003092:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003096:	443b      	add	r3, r7
 8003098:	ed13 7b02 	vldr	d7, [r3, #-8]
 800309c:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030a0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80030a4:	ed13 7b16 	vldr	d7, [r3, #-88]	@ 0xffffffa8
 80030a8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80030ac:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80030b0:	ed13 4b18 	vldr	d4, [r3, #-96]	@ 0xffffffa0
 80030b4:	ed13 6b16 	vldr	d6, [r3, #-88]	@ 0xffffffa8
 80030b8:	ed13 7b14 	vldr	d7, [r3, #-80]	@ 0xffffffb0
 80030bc:	4b88      	ldr	r3, [pc, #544]	@ (80032e0 <SineWave_FM_Demodulate+0x310>)
 80030be:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80030c2:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80030c6:	443b      	add	r3, r7
 80030c8:	eeb0 1b44 	vmov.f64	d1, d4
 80030cc:	eeb0 2b46 	vmov.f64	d2, d6
 80030d0:	eeb0 3b47 	vmov.f64	d3, d7
 80030d4:	eeb0 0b45 	vmov.f64	d0, d5
 80030d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff1f 	bl	8002f20 <SineWave_Generator>
    SineWave_Generator(w2, FO_LENGTH, time * fm_arg.fre / arg.fre, arg_delta);
 80030e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80030e6:	ed13 6b12 	vldr	d6, [r3, #-72]	@ 0xffffffb8
 80030ea:	4b7b      	ldr	r3, [pc, #492]	@ (80032d8 <SineWave_FM_Demodulate+0x308>)
 80030ec:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 80030f0:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80030f4:	443b      	add	r3, r7
 80030f6:	ed13 7b02 	vldr	d7, [r3, #-8]
 80030fa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003102:	ed13 7b16 	vldr	d7, [r3, #-88]	@ 0xffffffa8
 8003106:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800310a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800310e:	ed13 4b08 	vldr	d4, [r3, #-32]	@ 0xffffffe0
 8003112:	ed13 6b06 	vldr	d6, [r3, #-24]	@ 0xffffffe8
 8003116:	ed13 7b04 	vldr	d7, [r3, #-16]
 800311a:	4b72      	ldr	r3, [pc, #456]	@ (80032e4 <SineWave_FM_Demodulate+0x314>)
 800311c:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8003120:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003124:	443b      	add	r3, r7
 8003126:	eeb0 1b44 	vmov.f64	d1, d4
 800312a:	eeb0 2b46 	vmov.f64	d2, d6
 800312e:	eeb0 3b47 	vmov.f64	d3, d7
 8003132:	eeb0 0b45 	vmov.f64	d0, d5
 8003136:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fef0 	bl	8002f20 <SineWave_Generator>

    for (int i = 1; i < FO_LENGTH; i++)
 8003140:	2301      	movs	r3, #1
 8003142:	4a69      	ldr	r2, [pc, #420]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 8003144:	443a      	add	r2, r7
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	e0a2      	b.n	8003290 <SineWave_FM_Demodulate+0x2c0>
    {
        w1[i] = w1[i] * wave[i];
 800314a:	4b64      	ldr	r3, [pc, #400]	@ (80032dc <SineWave_FM_Demodulate+0x30c>)
 800314c:	443b      	add	r3, r7
 800314e:	461a      	mov	r2, r3
 8003150:	4b65      	ldr	r3, [pc, #404]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 8003152:	443b      	add	r3, r7
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	3b08      	subs	r3, #8
 800315c:	ed93 6b00 	vldr	d6, [r3]
 8003160:	4b61      	ldr	r3, [pc, #388]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 8003162:	443b      	add	r3, r7
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800316c:	f852 2c28 	ldr.w	r2, [r2, #-40]
 8003170:	4413      	add	r3, r2
 8003172:	ed93 7b00 	vldr	d7, [r3]
 8003176:	ee26 7b07 	vmul.f64	d7, d6, d7
 800317a:	4b58      	ldr	r3, [pc, #352]	@ (80032dc <SineWave_FM_Demodulate+0x30c>)
 800317c:	443b      	add	r3, r7
 800317e:	461a      	mov	r2, r3
 8003180:	4b59      	ldr	r3, [pc, #356]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 8003182:	443b      	add	r3, r7
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	3b08      	subs	r3, #8
 800318c:	ed83 7b00 	vstr	d7, [r3]
        w1[i] = 0.008 * w1[i] + 0.992 * w1[i - 1];
 8003190:	4b52      	ldr	r3, [pc, #328]	@ (80032dc <SineWave_FM_Demodulate+0x30c>)
 8003192:	443b      	add	r3, r7
 8003194:	461a      	mov	r2, r3
 8003196:	4b54      	ldr	r3, [pc, #336]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 8003198:	443b      	add	r3, r7
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	3b08      	subs	r3, #8
 80031a2:	ed93 7b00 	vldr	d7, [r3]
 80031a6:	ed9f 6b48 	vldr	d6, [pc, #288]	@ 80032c8 <SineWave_FM_Demodulate+0x2f8>
 80031aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80031ae:	4b4e      	ldr	r3, [pc, #312]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 80031b0:	443b      	add	r3, r7
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	4a49      	ldr	r2, [pc, #292]	@ (80032dc <SineWave_FM_Demodulate+0x30c>)
 80031b8:	443a      	add	r2, r7
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	3b08      	subs	r3, #8
 80031c0:	ed93 7b00 	vldr	d7, [r3]
 80031c4:	ed9f 5b42 	vldr	d5, [pc, #264]	@ 80032d0 <SineWave_FM_Demodulate+0x300>
 80031c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80031cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031d0:	4b42      	ldr	r3, [pc, #264]	@ (80032dc <SineWave_FM_Demodulate+0x30c>)
 80031d2:	443b      	add	r3, r7
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b44      	ldr	r3, [pc, #272]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 80031d8:	443b      	add	r3, r7
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	3b08      	subs	r3, #8
 80031e2:	ed83 7b00 	vstr	d7, [r3]
        w2[i] = w2[i] * wave[i];
 80031e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b3e      	ldr	r3, [pc, #248]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 80031ee:	443b      	add	r3, r7
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	3b08      	subs	r3, #8
 80031f8:	ed93 6b00 	vldr	d6, [r3]
 80031fc:	4b3a      	ldr	r3, [pc, #232]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 80031fe:	443b      	add	r3, r7
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8003208:	f852 2c28 	ldr.w	r2, [r2, #-40]
 800320c:	4413      	add	r3, r2
 800320e:	ed93 7b00 	vldr	d7, [r3]
 8003212:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003216:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800321a:	461a      	mov	r2, r3
 800321c:	4b32      	ldr	r3, [pc, #200]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 800321e:	443b      	add	r3, r7
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	3b08      	subs	r3, #8
 8003228:	ed83 7b00 	vstr	d7, [r3]
        w2[i] = 0.008 * w2[i] + 0.992 * w2[i - 1];
 800322c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003230:	461a      	mov	r2, r3
 8003232:	4b2d      	ldr	r3, [pc, #180]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 8003234:	443b      	add	r3, r7
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4413      	add	r3, r2
 800323c:	3b08      	subs	r3, #8
 800323e:	ed93 7b00 	vldr	d7, [r3]
 8003242:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 80032c8 <SineWave_FM_Demodulate+0x2f8>
 8003246:	ee27 6b06 	vmul.f64	d6, d7, d6
 800324a:	4b27      	ldr	r3, [pc, #156]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 800324c:	443b      	add	r3, r7
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3b01      	subs	r3, #1
 8003252:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4413      	add	r3, r2
 800325a:	3b08      	subs	r3, #8
 800325c:	ed93 7b00 	vldr	d7, [r3]
 8003260:	ed9f 5b1b 	vldr	d5, [pc, #108]	@ 80032d0 <SineWave_FM_Demodulate+0x300>
 8003264:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003268:	ee36 7b07 	vadd.f64	d7, d6, d7
 800326c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003270:	461a      	mov	r2, r3
 8003272:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 8003274:	443b      	add	r3, r7
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	3b08      	subs	r3, #8
 800327e:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 1; i < FO_LENGTH; i++)
 8003282:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 8003284:	443b      	add	r3, r7
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	4a17      	ldr	r2, [pc, #92]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 800328c:	443a      	add	r2, r7
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b15      	ldr	r3, [pc, #84]	@ (80032e8 <SineWave_FM_Demodulate+0x318>)
 8003292:	443b      	add	r3, r7
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800329a:	f6ff af56 	blt.w	800314a <SineWave_FM_Demodulate+0x17a>
    }
    out[0] = 0;
 800329e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80032a2:	f853 1c24 	ldr.w	r1, [r3, #-36]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 1; i < FO_LENGTH; i++)
 80032b2:	2301      	movs	r3, #1
 80032b4:	4a0d      	ldr	r2, [pc, #52]	@ (80032ec <SineWave_FM_Demodulate+0x31c>)
 80032b6:	443a      	add	r2, r7
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e0d5      	b.n	8003468 <SineWave_FM_Demodulate+0x498>
 80032bc:	f3af 8000 	nop.w
 80032c0:	54442d18 	.word	0x54442d18
 80032c4:	3ff921fb 	.word	0x3ff921fb
 80032c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80032cc:	3f80624d 	.word	0x3f80624d
 80032d0:	c8b43958 	.word	0xc8b43958
 80032d4:	3fefbe76 	.word	0x3fefbe76
 80032d8:	fffdffd0 	.word	0xfffdffd0
 80032dc:	00010060 	.word	0x00010060
 80032e0:	fffefff8 	.word	0xfffefff8
 80032e4:	fffdfff8 	.word	0xfffdfff8
 80032e8:	0002005c 	.word	0x0002005c
 80032ec:	00020058 	.word	0x00020058
    {
        out[i] = w1[i - 1] * w2[i] - w1[i] * w2[i - 1];
 80032f0:	4b69      	ldr	r3, [pc, #420]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 80032f2:	443b      	add	r3, r7
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	4a68      	ldr	r2, [pc, #416]	@ (800349c <SineWave_FM_Demodulate+0x4cc>)
 80032fa:	443a      	add	r2, r7
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4413      	add	r3, r2
 8003300:	3b08      	subs	r3, #8
 8003302:	ed93 6b00 	vldr	d6, [r3]
 8003306:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800330a:	461a      	mov	r2, r3
 800330c:	4b62      	ldr	r3, [pc, #392]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 800330e:	443b      	add	r3, r7
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	3b08      	subs	r3, #8
 8003318:	ed93 7b00 	vldr	d7, [r3]
 800331c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003320:	4b5e      	ldr	r3, [pc, #376]	@ (800349c <SineWave_FM_Demodulate+0x4cc>)
 8003322:	443b      	add	r3, r7
 8003324:	461a      	mov	r2, r3
 8003326:	4b5c      	ldr	r3, [pc, #368]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 8003328:	443b      	add	r3, r7
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	3b08      	subs	r3, #8
 8003332:	ed93 5b00 	vldr	d5, [r3]
 8003336:	4b58      	ldr	r3, [pc, #352]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 8003338:	443b      	add	r3, r7
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3b01      	subs	r3, #1
 800333e:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	3b08      	subs	r3, #8
 8003348:	ed93 7b00 	vldr	d7, [r3]
 800334c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003350:	4b51      	ldr	r3, [pc, #324]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 8003352:	443b      	add	r3, r7
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800335c:	f852 2c24 	ldr.w	r2, [r2, #-36]
 8003360:	4413      	add	r3, r2
 8003362:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003366:	ed83 7b00 	vstr	d7, [r3]
        out[i] = out[i] / (w1[i] * w1[i] + w2[i] * w2[i]);
 800336a:	4b4b      	ldr	r3, [pc, #300]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 800336c:	443b      	add	r3, r7
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8003376:	f852 2c24 	ldr.w	r2, [r2, #-36]
 800337a:	4413      	add	r3, r2
 800337c:	ed93 5b00 	vldr	d5, [r3]
 8003380:	4b46      	ldr	r3, [pc, #280]	@ (800349c <SineWave_FM_Demodulate+0x4cc>)
 8003382:	443b      	add	r3, r7
 8003384:	461a      	mov	r2, r3
 8003386:	4b44      	ldr	r3, [pc, #272]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 8003388:	443b      	add	r3, r7
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	3b08      	subs	r3, #8
 8003392:	ed93 6b00 	vldr	d6, [r3]
 8003396:	4b41      	ldr	r3, [pc, #260]	@ (800349c <SineWave_FM_Demodulate+0x4cc>)
 8003398:	443b      	add	r3, r7
 800339a:	461a      	mov	r2, r3
 800339c:	4b3e      	ldr	r3, [pc, #248]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 800339e:	443b      	add	r3, r7
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	3b08      	subs	r3, #8
 80033a8:	ed93 7b00 	vldr	d7, [r3]
 80033ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 80033b0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80033b4:	461a      	mov	r2, r3
 80033b6:	4b38      	ldr	r3, [pc, #224]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 80033b8:	443b      	add	r3, r7
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	3b08      	subs	r3, #8
 80033c2:	ed93 4b00 	vldr	d4, [r3]
 80033c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b32      	ldr	r3, [pc, #200]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 80033ce:	443b      	add	r3, r7
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	3b08      	subs	r3, #8
 80033d8:	ed93 7b00 	vldr	d7, [r3]
 80033dc:	ee24 7b07 	vmul.f64	d7, d4, d7
 80033e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80033e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 80033e6:	443b      	add	r3, r7
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80033f0:	f852 2c24 	ldr.w	r2, [r2, #-36]
 80033f4:	4413      	add	r3, r2
 80033f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80033fa:	ed83 7b00 	vstr	d7, [r3]
        out[i] = 0.0005 * out[i] + 0.9995 * out[i - 1];
 80033fe:	4b26      	ldr	r3, [pc, #152]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 8003400:	443b      	add	r3, r7
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800340a:	f852 2c24 	ldr.w	r2, [r2, #-36]
 800340e:	4413      	add	r3, r2
 8003410:	ed93 7b00 	vldr	d7, [r3]
 8003414:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8003488 <SineWave_FM_Demodulate+0x4b8>
 8003418:	ee27 6b06 	vmul.f64	d6, d7, d6
 800341c:	4b1e      	ldr	r3, [pc, #120]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 800341e:	443b      	add	r3, r7
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800342e:	f852 2c24 	ldr.w	r2, [r2, #-36]
 8003432:	4413      	add	r3, r2
 8003434:	ed93 7b00 	vldr	d7, [r3]
 8003438:	ed9f 5b15 	vldr	d5, [pc, #84]	@ 8003490 <SineWave_FM_Demodulate+0x4c0>
 800343c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003440:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 8003442:	443b      	add	r3, r7
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800344c:	f852 2c24 	ldr.w	r2, [r2, #-36]
 8003450:	4413      	add	r3, r2
 8003452:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003456:	ed83 7b00 	vstr	d7, [r3]
    for (int i = 1; i < FO_LENGTH; i++)
 800345a:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 800345c:	443b      	add	r3, r7
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	4a0d      	ldr	r2, [pc, #52]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 8003464:	443a      	add	r2, r7
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <SineWave_FM_Demodulate+0x4c8>)
 800346a:	443b      	add	r3, r7
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003472:	f6ff af3d 	blt.w	80032f0 <SineWave_FM_Demodulate+0x320>
    }
}
 8003476:	bf00      	nop
 8003478:	bf00      	nop
 800347a:	f507 3700 	add.w	r7, r7, #131072	@ 0x20000
 800347e:	3760      	adds	r7, #96	@ 0x60
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	f3af 8000 	nop.w
 8003488:	d2f1a9fc 	.word	0xd2f1a9fc
 800348c:	3f40624d 	.word	0x3f40624d
 8003490:	6c8b4396 	.word	0x6c8b4396
 8003494:	3feffbe7 	.word	0x3feffbe7
 8003498:	00020058 	.word	0x00020058
 800349c:	00010060 	.word	0x00010060

080034a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a6:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <HAL_MspInit+0x30>)
 80034a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034ac:	4a08      	ldr	r2, [pc, #32]	@ (80034d0 <HAL_MspInit+0x30>)
 80034ae:	f043 0302 	orr.w	r3, r3, #2
 80034b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80034b6:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <HAL_MspInit+0x30>)
 80034b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	58024400 	.word	0x58024400

080034d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034d8:	bf00      	nop
 80034da:	e7fd      	b.n	80034d8 <NMI_Handler+0x4>

080034dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034e0:	bf00      	nop
 80034e2:	e7fd      	b.n	80034e0 <HardFault_Handler+0x4>

080034e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e8:	bf00      	nop
 80034ea:	e7fd      	b.n	80034e8 <MemManage_Handler+0x4>

080034ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <BusFault_Handler+0x4>

080034f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034f8:	bf00      	nop
 80034fa:	e7fd      	b.n	80034f8 <UsageFault_Handler+0x4>

080034fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800352a:	f000 fcc9 	bl	8003ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003538:	4802      	ldr	r0, [pc, #8]	@ (8003544 <DMA1_Stream0_IRQHandler+0x10>)
 800353a:	f004 fb41 	bl	8007bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	24004760 	.word	0x24004760

08003548 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800354c:	4802      	ldr	r0, [pc, #8]	@ (8003558 <DMA1_Stream1_IRQHandler+0x10>)
 800354e:	f004 fb37 	bl	8007bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	240047ec 	.word	0x240047ec

0800355c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003560:	4802      	ldr	r0, [pc, #8]	@ (800356c <TIM4_IRQHandler+0x10>)
 8003562:	f00a f8ab 	bl	800d6bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	240248ec 	.word	0x240248ec

08003570 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003574:	4802      	ldr	r0, [pc, #8]	@ (8003580 <USART1_IRQHandler+0x10>)
 8003576:	f00b f89f 	bl	800e6b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	24024a1c 	.word	0x24024a1c

08003584 <_getpid>:
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
 8003588:	2301      	movs	r3, #1
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <_kill>:
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
 800359e:	f00d fe1f 	bl	80111e0 <__errno>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2216      	movs	r2, #22
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_exit>:
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ffe7 	bl	8003594 <_kill>
 80035c6:	bf00      	nop
 80035c8:	e7fd      	b.n	80035c6 <_exit+0x12>

080035ca <_read>:
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b086      	sub	sp, #24
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e00a      	b.n	80035f2 <_read+0x28>
 80035dc:	f3af 8000 	nop.w
 80035e0:	4601      	mov	r1, r0
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	60ba      	str	r2, [r7, #8]
 80035e8:	b2ca      	uxtb	r2, r1
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3301      	adds	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	dbf0      	blt.n	80035dc <_read+0x12>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <_write>:
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	e009      	b.n	800362a <_write+0x26>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	60ba      	str	r2, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f3af 8000 	nop.w
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3301      	adds	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	429a      	cmp	r2, r3
 8003630:	dbf1      	blt.n	8003616 <_write+0x12>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_close>:
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_fstat>:
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	2300      	movs	r3, #0
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <_isatty>:
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	2301      	movs	r3, #1
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_lseek>:
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	2300      	movs	r3, #0
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_sbrk>:
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	4a14      	ldr	r2, [pc, #80]	@ (8003700 <_sbrk+0x5c>)
 80036ae:	4b15      	ldr	r3, [pc, #84]	@ (8003704 <_sbrk+0x60>)
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	4b13      	ldr	r3, [pc, #76]	@ (8003708 <_sbrk+0x64>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <_sbrk+0x22>
 80036c0:	4b11      	ldr	r3, [pc, #68]	@ (8003708 <_sbrk+0x64>)
 80036c2:	4a12      	ldr	r2, [pc, #72]	@ (800370c <_sbrk+0x68>)
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	4b10      	ldr	r3, [pc, #64]	@ (8003708 <_sbrk+0x64>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d207      	bcs.n	80036e4 <_sbrk+0x40>
 80036d4:	f00d fd84 	bl	80111e0 <__errno>
 80036d8:	4603      	mov	r3, r0
 80036da:	220c      	movs	r2, #12
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036e2:	e009      	b.n	80036f8 <_sbrk+0x54>
 80036e4:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <_sbrk+0x64>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b07      	ldr	r3, [pc, #28]	@ (8003708 <_sbrk+0x64>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	4a05      	ldr	r2, [pc, #20]	@ (8003708 <_sbrk+0x64>)
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	24080000 	.word	0x24080000
 8003704:	00001000 	.word	0x00001000
 8003708:	240248e8 	.word	0x240248e8
 800370c:	24024dc0 	.word	0x24024dc0

08003710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003714:	4b37      	ldr	r3, [pc, #220]	@ (80037f4 <SystemInit+0xe4>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371a:	4a36      	ldr	r2, [pc, #216]	@ (80037f4 <SystemInit+0xe4>)
 800371c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003724:	4b34      	ldr	r3, [pc, #208]	@ (80037f8 <SystemInit+0xe8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	2b06      	cmp	r3, #6
 800372e:	d807      	bhi.n	8003740 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003730:	4b31      	ldr	r3, [pc, #196]	@ (80037f8 <SystemInit+0xe8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f023 030f 	bic.w	r3, r3, #15
 8003738:	4a2f      	ldr	r2, [pc, #188]	@ (80037f8 <SystemInit+0xe8>)
 800373a:	f043 0307 	orr.w	r3, r3, #7
 800373e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003740:	4b2e      	ldr	r3, [pc, #184]	@ (80037fc <SystemInit+0xec>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2d      	ldr	r2, [pc, #180]	@ (80037fc <SystemInit+0xec>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800374c:	4b2b      	ldr	r3, [pc, #172]	@ (80037fc <SystemInit+0xec>)
 800374e:	2200      	movs	r2, #0
 8003750:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003752:	4b2a      	ldr	r3, [pc, #168]	@ (80037fc <SystemInit+0xec>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	4929      	ldr	r1, [pc, #164]	@ (80037fc <SystemInit+0xec>)
 8003758:	4b29      	ldr	r3, [pc, #164]	@ (8003800 <SystemInit+0xf0>)
 800375a:	4013      	ands	r3, r2
 800375c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800375e:	4b26      	ldr	r3, [pc, #152]	@ (80037f8 <SystemInit+0xe8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800376a:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <SystemInit+0xe8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 030f 	bic.w	r3, r3, #15
 8003772:	4a21      	ldr	r2, [pc, #132]	@ (80037f8 <SystemInit+0xe8>)
 8003774:	f043 0307 	orr.w	r3, r3, #7
 8003778:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800377a:	4b20      	ldr	r3, [pc, #128]	@ (80037fc <SystemInit+0xec>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003780:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <SystemInit+0xec>)
 8003782:	2200      	movs	r2, #0
 8003784:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003786:	4b1d      	ldr	r3, [pc, #116]	@ (80037fc <SystemInit+0xec>)
 8003788:	2200      	movs	r2, #0
 800378a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800378c:	4b1b      	ldr	r3, [pc, #108]	@ (80037fc <SystemInit+0xec>)
 800378e:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <SystemInit+0xf4>)
 8003790:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003792:	4b1a      	ldr	r3, [pc, #104]	@ (80037fc <SystemInit+0xec>)
 8003794:	4a1c      	ldr	r2, [pc, #112]	@ (8003808 <SystemInit+0xf8>)
 8003796:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003798:	4b18      	ldr	r3, [pc, #96]	@ (80037fc <SystemInit+0xec>)
 800379a:	4a1c      	ldr	r2, [pc, #112]	@ (800380c <SystemInit+0xfc>)
 800379c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800379e:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <SystemInit+0xec>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80037a4:	4b15      	ldr	r3, [pc, #84]	@ (80037fc <SystemInit+0xec>)
 80037a6:	4a19      	ldr	r2, [pc, #100]	@ (800380c <SystemInit+0xfc>)
 80037a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80037aa:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <SystemInit+0xec>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80037b0:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <SystemInit+0xec>)
 80037b2:	4a16      	ldr	r2, [pc, #88]	@ (800380c <SystemInit+0xfc>)
 80037b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <SystemInit+0xec>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037bc:	4b0f      	ldr	r3, [pc, #60]	@ (80037fc <SystemInit+0xec>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0e      	ldr	r2, [pc, #56]	@ (80037fc <SystemInit+0xec>)
 80037c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80037c8:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <SystemInit+0xec>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80037ce:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <SystemInit+0x100>)
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4b10      	ldr	r3, [pc, #64]	@ (8003814 <SystemInit+0x104>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037da:	d202      	bcs.n	80037e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80037dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003818 <SystemInit+0x108>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80037e2:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <SystemInit+0x10c>)
 80037e4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80037e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80037ea:	bf00      	nop
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000ed00 	.word	0xe000ed00
 80037f8:	52002000 	.word	0x52002000
 80037fc:	58024400 	.word	0x58024400
 8003800:	eaf6ed7f 	.word	0xeaf6ed7f
 8003804:	02020200 	.word	0x02020200
 8003808:	01ff0000 	.word	0x01ff0000
 800380c:	01010280 	.word	0x01010280
 8003810:	5c001000 	.word	0x5c001000
 8003814:	ffff0000 	.word	0xffff0000
 8003818:	51008108 	.word	0x51008108
 800381c:	52004000 	.word	0x52004000

08003820 <MX_TIM4_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b090      	sub	sp, #64	@ 0x40
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003826:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003844:	f107 0310 	add.w	r3, r7, #16
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003850:	463b      	mov	r3, r7
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800385c:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <MX_TIM4_Init+0x110>)
 800385e:	4a35      	ldr	r2, [pc, #212]	@ (8003934 <MX_TIM4_Init+0x114>)
 8003860:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240 - 1;
 8003862:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <MX_TIM4_Init+0x110>)
 8003864:	22ef      	movs	r2, #239	@ 0xef
 8003866:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003868:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <MX_TIM4_Init+0x110>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000 -1;
 800386e:	4b30      	ldr	r3, [pc, #192]	@ (8003930 <MX_TIM4_Init+0x110>)
 8003870:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003874:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003876:	4b2e      	ldr	r3, [pc, #184]	@ (8003930 <MX_TIM4_Init+0x110>)
 8003878:	2200      	movs	r2, #0
 800387a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800387c:	4b2c      	ldr	r3, [pc, #176]	@ (8003930 <MX_TIM4_Init+0x110>)
 800387e:	2200      	movs	r2, #0
 8003880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003882:	482b      	ldr	r0, [pc, #172]	@ (8003930 <MX_TIM4_Init+0x110>)
 8003884:	f009 fdca 	bl	800d41c <HAL_TIM_Base_Init>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800388e:	f7ff fb3f 	bl	8002f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003896:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003898:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800389c:	4619      	mov	r1, r3
 800389e:	4824      	ldr	r0, [pc, #144]	@ (8003930 <MX_TIM4_Init+0x110>)
 80038a0:	f00a f8c8 	bl	800da34 <HAL_TIM_ConfigClockSource>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80038aa:	f7ff fb31 	bl	8002f10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80038ae:	4820      	ldr	r0, [pc, #128]	@ (8003930 <MX_TIM4_Init+0x110>)
 80038b0:	f009 fea3 	bl	800d5fa <HAL_TIM_IC_Init>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80038ba:	f7ff fb29 	bl	8002f10 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80038be:	2304      	movs	r3, #4
 80038c0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80038c2:	2350      	movs	r3, #80	@ 0x50
 80038c4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80038c6:	2300      	movs	r3, #0
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80038ce:	f107 031c 	add.w	r3, r7, #28
 80038d2:	4619      	mov	r1, r3
 80038d4:	4816      	ldr	r0, [pc, #88]	@ (8003930 <MX_TIM4_Init+0x110>)
 80038d6:	f00a f9a5 	bl	800dc24 <HAL_TIM_SlaveConfigSynchro>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_TIM4_Init+0xc4>
  {
    Error_Handler();
 80038e0:	f7ff fb16 	bl	8002f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e4:	2300      	movs	r3, #0
 80038e6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038ec:	f107 0310 	add.w	r3, r7, #16
 80038f0:	4619      	mov	r1, r3
 80038f2:	480f      	ldr	r0, [pc, #60]	@ (8003930 <MX_TIM4_Init+0x110>)
 80038f4:	f00a fd56 	bl	800e3a4 <HAL_TIMEx_MasterConfigSynchronization>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 80038fe:	f7ff fb07 	bl	8002f10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003902:	2300      	movs	r3, #0
 8003904:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003906:	2301      	movs	r3, #1
 8003908:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003912:	463b      	mov	r3, r7
 8003914:	2200      	movs	r2, #0
 8003916:	4619      	mov	r1, r3
 8003918:	4805      	ldr	r0, [pc, #20]	@ (8003930 <MX_TIM4_Init+0x110>)
 800391a:	f009 ffee 	bl	800d8fa <HAL_TIM_IC_ConfigChannel>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_TIM4_Init+0x108>
  {
    Error_Handler();
 8003924:	f7ff faf4 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003928:	bf00      	nop
 800392a:	3740      	adds	r7, #64	@ 0x40
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	240248ec 	.word	0x240248ec
 8003934:	40000800 	.word	0x40000800

08003938 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003948:	4b14      	ldr	r3, [pc, #80]	@ (800399c <MX_TIM6_Init+0x64>)
 800394a:	4a15      	ldr	r2, [pc, #84]	@ (80039a0 <MX_TIM6_Init+0x68>)
 800394c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 120 - 1;
 800394e:	4b13      	ldr	r3, [pc, #76]	@ (800399c <MX_TIM6_Init+0x64>)
 8003950:	2277      	movs	r2, #119	@ 0x77
 8003952:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003954:	4b11      	ldr	r3, [pc, #68]	@ (800399c <MX_TIM6_Init+0x64>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 800395a:	4b10      	ldr	r3, [pc, #64]	@ (800399c <MX_TIM6_Init+0x64>)
 800395c:	22c7      	movs	r2, #199	@ 0xc7
 800395e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003960:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <MX_TIM6_Init+0x64>)
 8003962:	2280      	movs	r2, #128	@ 0x80
 8003964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003966:	480d      	ldr	r0, [pc, #52]	@ (800399c <MX_TIM6_Init+0x64>)
 8003968:	f009 fd58 	bl	800d41c <HAL_TIM_Base_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003972:	f7ff facd 	bl	8002f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003976:	2320      	movs	r3, #32
 8003978:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	4619      	mov	r1, r3
 8003982:	4806      	ldr	r0, [pc, #24]	@ (800399c <MX_TIM6_Init+0x64>)
 8003984:	f00a fd0e 	bl	800e3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800398e:	f7ff fabf 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	24024938 	.word	0x24024938
 80039a0:	40001000 	.word	0x40001000

080039a4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80039b4:	4b14      	ldr	r3, [pc, #80]	@ (8003a08 <MX_TIM7_Init+0x64>)
 80039b6:	4a15      	ldr	r2, [pc, #84]	@ (8003a0c <MX_TIM7_Init+0x68>)
 80039b8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 80039ba:	4b13      	ldr	r3, [pc, #76]	@ (8003a08 <MX_TIM7_Init+0x64>)
 80039bc:	22ef      	movs	r2, #239	@ 0xef
 80039be:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c0:	4b11      	ldr	r3, [pc, #68]	@ (8003a08 <MX_TIM7_Init+0x64>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80039c6:	4b10      	ldr	r3, [pc, #64]	@ (8003a08 <MX_TIM7_Init+0x64>)
 80039c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039cc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003a08 <MX_TIM7_Init+0x64>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80039d4:	480c      	ldr	r0, [pc, #48]	@ (8003a08 <MX_TIM7_Init+0x64>)
 80039d6:	f009 fd21 	bl	800d41c <HAL_TIM_Base_Init>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80039e0:	f7ff fa96 	bl	8002f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80039ec:	1d3b      	adds	r3, r7, #4
 80039ee:	4619      	mov	r1, r3
 80039f0:	4805      	ldr	r0, [pc, #20]	@ (8003a08 <MX_TIM7_Init+0x64>)
 80039f2:	f00a fcd7 	bl	800e3a4 <HAL_TIMEx_MasterConfigSynchronization>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80039fc:	f7ff fa88 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	24024984 	.word	0x24024984
 8003a0c:	40001400 	.word	0x40001400

08003a10 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a16:	f107 0310 	add.w	r3, r7, #16
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa8 <MX_TIM15_Init+0x98>)
 8003a30:	4a1e      	ldr	r2, [pc, #120]	@ (8003aac <MX_TIM15_Init+0x9c>)
 8003a32:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2-1;
 8003a34:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa8 <MX_TIM15_Init+0x98>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa8 <MX_TIM15_Init+0x98>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2-1;
 8003a40:	4b19      	ldr	r3, [pc, #100]	@ (8003aa8 <MX_TIM15_Init+0x98>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a46:	4b18      	ldr	r3, [pc, #96]	@ (8003aa8 <MX_TIM15_Init+0x98>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003a4c:	4b16      	ldr	r3, [pc, #88]	@ (8003aa8 <MX_TIM15_Init+0x98>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a52:	4b15      	ldr	r3, [pc, #84]	@ (8003aa8 <MX_TIM15_Init+0x98>)
 8003a54:	2280      	movs	r2, #128	@ 0x80
 8003a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003a58:	4813      	ldr	r0, [pc, #76]	@ (8003aa8 <MX_TIM15_Init+0x98>)
 8003a5a:	f009 fcdf 	bl	800d41c <HAL_TIM_Base_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8003a64:	f7ff fa54 	bl	8002f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003a6e:	f107 0310 	add.w	r3, r7, #16
 8003a72:	4619      	mov	r1, r3
 8003a74:	480c      	ldr	r0, [pc, #48]	@ (8003aa8 <MX_TIM15_Init+0x98>)
 8003a76:	f009 ffdd 	bl	800da34 <HAL_TIM_ConfigClockSource>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8003a80:	f7ff fa46 	bl	8002f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a84:	2320      	movs	r3, #32
 8003a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4805      	ldr	r0, [pc, #20]	@ (8003aa8 <MX_TIM15_Init+0x98>)
 8003a92:	f00a fc87 	bl	800e3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8003a9c:	f7ff fa38 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003aa0:	bf00      	nop
 8003aa2:	3720      	adds	r7, #32
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	240249d0 	.word	0x240249d0
 8003aac:	40014000 	.word	0x40014000

08003ab0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	@ 0x30
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab8:	f107 031c 	add.w	r3, r7, #28
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM4)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a3e      	ldr	r2, [pc, #248]	@ (8003bc8 <HAL_TIM_Base_MspInit+0x118>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d137      	bne.n	8003b42 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ad8:	4a3c      	ldr	r2, [pc, #240]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003ada:	f043 0304 	orr.w	r3, r3, #4
 8003ade:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003af0:	4b36      	ldr	r3, [pc, #216]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003af6:	4a35      	ldr	r2, [pc, #212]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003af8:	f043 0308 	orr.w	r3, r3, #8
 8003afc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b00:	4b32      	ldr	r3, [pc, #200]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b14:	2302      	movs	r3, #2
 8003b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b20:	2302      	movs	r3, #2
 8003b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b24:	f107 031c 	add.w	r3, r7, #28
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4829      	ldr	r0, [pc, #164]	@ (8003bd0 <HAL_TIM_Base_MspInit+0x120>)
 8003b2c:	f005 fb5a 	bl	80091e4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b30:	2200      	movs	r2, #0
 8003b32:	2100      	movs	r1, #0
 8003b34:	201e      	movs	r0, #30
 8003b36:	f002 f952 	bl	8005dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b3a:	201e      	movs	r0, #30
 8003b3c:	f002 f969 	bl	8005e12 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003b40:	e03d      	b.n	8003bbe <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM6)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a23      	ldr	r2, [pc, #140]	@ (8003bd4 <HAL_TIM_Base_MspInit+0x124>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10f      	bne.n	8003b6c <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b52:	4a1e      	ldr	r2, [pc, #120]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003b54:	f043 0310 	orr.w	r3, r3, #16
 8003b58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003b5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
}
 8003b6a:	e028      	b.n	8003bbe <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM7)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a19      	ldr	r2, [pc, #100]	@ (8003bd8 <HAL_TIM_Base_MspInit+0x128>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10f      	bne.n	8003b96 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b76:	4b15      	ldr	r3, [pc, #84]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b7c:	4a13      	ldr	r2, [pc, #76]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003b7e:	f043 0320 	orr.w	r3, r3, #32
 8003b82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b86:	4b11      	ldr	r3, [pc, #68]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	e013      	b.n	8003bbe <HAL_TIM_Base_MspInit+0x10e>
  else if(tim_baseHandle->Instance==TIM15)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a10      	ldr	r2, [pc, #64]	@ (8003bdc <HAL_TIM_Base_MspInit+0x12c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10e      	bne.n	8003bbe <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ba6:	4a09      	ldr	r2, [pc, #36]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003bb0:	4b06      	ldr	r3, [pc, #24]	@ (8003bcc <HAL_TIM_Base_MspInit+0x11c>)
 8003bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
}
 8003bbe:	bf00      	nop
 8003bc0:	3730      	adds	r7, #48	@ 0x30
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40000800 	.word	0x40000800
 8003bcc:	58024400 	.word	0x58024400
 8003bd0:	58020c00 	.word	0x58020c00
 8003bd4:	40001000 	.word	0x40001000
 8003bd8:	40001400 	.word	0x40001400
 8003bdc:	40014000 	.word	0x40014000

08003be0 <Demodulate_Init>:
}

/* USER CODE BEGIN 1 */

void Demodulate_Init(double wave[], double spec[], int size, int mode)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
	double _ = 0;
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	MX_ADC1Sampling_Handler(_, mode);
 8003bfa:	6838      	ldr	r0, [r7, #0]
 8003bfc:	ed97 0b04 	vldr	d0, [r7, #16]
 8003c00:	f7fd fb16 	bl	8001230 <MX_ADC1Sampling_Handler>
}
 8003c04:	bf00      	nop
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c10:	4b22      	ldr	r3, [pc, #136]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c12:	4a23      	ldr	r2, [pc, #140]	@ (8003ca0 <MX_USART1_UART_Init+0x94>)
 8003c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c16:	4b21      	ldr	r3, [pc, #132]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c24:	4b1d      	ldr	r3, [pc, #116]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c30:	4b1a      	ldr	r3, [pc, #104]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c32:	220c      	movs	r2, #12
 8003c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c36:	4b19      	ldr	r3, [pc, #100]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c3c:	4b17      	ldr	r3, [pc, #92]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c42:	4b16      	ldr	r3, [pc, #88]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c48:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c4e:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c54:	4811      	ldr	r0, [pc, #68]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c56:	f00a fc51 	bl	800e4fc <HAL_UART_Init>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003c60:	f7ff f956 	bl	8002f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c64:	2100      	movs	r1, #0
 8003c66:	480d      	ldr	r0, [pc, #52]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c68:	f00c f91a 	bl	800fea0 <HAL_UARTEx_SetTxFifoThreshold>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003c72:	f7ff f94d 	bl	8002f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c76:	2100      	movs	r1, #0
 8003c78:	4808      	ldr	r0, [pc, #32]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c7a:	f00c f94f 	bl	800ff1c <HAL_UARTEx_SetRxFifoThreshold>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003c84:	f7ff f944 	bl	8002f10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003c88:	4804      	ldr	r0, [pc, #16]	@ (8003c9c <MX_USART1_UART_Init+0x90>)
 8003c8a:	f00c f8d0 	bl	800fe2e <HAL_UARTEx_DisableFifoMode>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003c94:	f7ff f93c 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c98:	bf00      	nop
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	24024a1c 	.word	0x24024a1c
 8003ca0:	40011000 	.word	0x40011000

08003ca4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cbc:	f107 0310 	add.w	r3, r7, #16
 8003cc0:	22c0      	movs	r2, #192	@ 0xc0
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f00d fa65 	bl	8011194 <memset>
  if(uartHandle->Instance==USART1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2b      	ldr	r2, [pc, #172]	@ (8003d7c <HAL_UART_MspInit+0xd8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d14e      	bne.n	8003d72 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003cd4:	f04f 0201 	mov.w	r2, #1
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ce6:	f107 0310 	add.w	r3, r7, #16
 8003cea:	4618      	mov	r0, r3
 8003cec:	f006 fe98 	bl	800aa20 <HAL_RCCEx_PeriphCLKConfig>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003cf6:	f7ff f90b 	bl	8002f10 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cfa:	4b21      	ldr	r3, [pc, #132]	@ (8003d80 <HAL_UART_MspInit+0xdc>)
 8003cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d00:	4a1f      	ldr	r2, [pc, #124]	@ (8003d80 <HAL_UART_MspInit+0xdc>)
 8003d02:	f043 0310 	orr.w	r3, r3, #16
 8003d06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d80 <HAL_UART_MspInit+0xdc>)
 8003d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d18:	4b19      	ldr	r3, [pc, #100]	@ (8003d80 <HAL_UART_MspInit+0xdc>)
 8003d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d1e:	4a18      	ldr	r2, [pc, #96]	@ (8003d80 <HAL_UART_MspInit+0xdc>)
 8003d20:	f043 0302 	orr.w	r3, r3, #2
 8003d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d28:	4b15      	ldr	r3, [pc, #84]	@ (8003d80 <HAL_UART_MspInit+0xdc>)
 8003d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003d36:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3e:	2302      	movs	r3, #2
 8003d40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003d50:	2304      	movs	r3, #4
 8003d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4809      	ldr	r0, [pc, #36]	@ (8003d84 <HAL_UART_MspInit+0xe0>)
 8003d5e:	f005 fa41 	bl	80091e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2100      	movs	r1, #0
 8003d66:	2025      	movs	r0, #37	@ 0x25
 8003d68:	f002 f839 	bl	8005dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d6c:	2025      	movs	r0, #37	@ 0x25
 8003d6e:	f002 f850 	bl	8005e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003d72:	bf00      	nop
 8003d74:	37e8      	adds	r7, #232	@ 0xe8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40011000 	.word	0x40011000
 8003d80:	58024400 	.word	0x58024400
 8003d84:	58020400 	.word	0x58020400

08003d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003dc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d8c:	f7ff fcc0 	bl	8003710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d90:	480c      	ldr	r0, [pc, #48]	@ (8003dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d92:	490d      	ldr	r1, [pc, #52]	@ (8003dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d94:	4a0d      	ldr	r2, [pc, #52]	@ (8003dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d98:	e002      	b.n	8003da0 <LoopCopyDataInit>

08003d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d9e:	3304      	adds	r3, #4

08003da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003da4:	d3f9      	bcc.n	8003d9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003da6:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003da8:	4c0a      	ldr	r4, [pc, #40]	@ (8003dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dac:	e001      	b.n	8003db2 <LoopFillZerobss>

08003dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003db0:	3204      	adds	r2, #4

08003db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003db4:	d3fb      	bcc.n	8003dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003db6:	f00d fa19 	bl	80111ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dba:	f7fe fda3 	bl	8002904 <main>
  bx  lr
 8003dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003dc0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003dc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003dc8:	240006d4 	.word	0x240006d4
  ldr r2, =_sidata
 8003dcc:	080187b4 	.word	0x080187b4
  ldr r2, =_sbss
 8003dd0:	240046e0 	.word	0x240046e0
  ldr r4, =_ebss
 8003dd4:	24024dc0 	.word	0x24024dc0

08003dd8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dd8:	e7fe      	b.n	8003dd8 <ADC3_IRQHandler>
	...

08003ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003de2:	2003      	movs	r0, #3
 8003de4:	f001 fff0 	bl	8005dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003de8:	f006 fc44 	bl	800a674 <HAL_RCC_GetSysClockFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <HAL_Init+0x68>)
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	4913      	ldr	r1, [pc, #76]	@ (8003e48 <HAL_Init+0x6c>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
 8003e04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e06:	4b0f      	ldr	r3, [pc, #60]	@ (8003e44 <HAL_Init+0x68>)
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e48 <HAL_Init+0x6c>)
 8003e10:	5cd3      	ldrb	r3, [r2, r3]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e4c <HAL_Init+0x70>)
 8003e1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e20:	4a0b      	ldr	r2, [pc, #44]	@ (8003e50 <HAL_Init+0x74>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e26:	200f      	movs	r0, #15
 8003e28:	f000 f814 	bl	8003e54 <HAL_InitTick>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e002      	b.n	8003e3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e36:	f7ff fb33 	bl	80034a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	58024400 	.word	0x58024400
 8003e48:	080160b4 	.word	0x080160b4
 8003e4c:	24000014 	.word	0x24000014
 8003e50:	24000010 	.word	0x24000010

08003e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e5c:	4b15      	ldr	r3, [pc, #84]	@ (8003eb4 <HAL_InitTick+0x60>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e021      	b.n	8003eac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e68:	4b13      	ldr	r3, [pc, #76]	@ (8003eb8 <HAL_InitTick+0x64>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <HAL_InitTick+0x60>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	4619      	mov	r1, r3
 8003e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 ffd5 	bl	8005e2e <HAL_SYSTICK_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e00e      	b.n	8003eac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b0f      	cmp	r3, #15
 8003e92:	d80a      	bhi.n	8003eaa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e94:	2200      	movs	r2, #0
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e9c:	f001 ff9f 	bl	8005dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ea0:	4a06      	ldr	r2, [pc, #24]	@ (8003ebc <HAL_InitTick+0x68>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e000      	b.n	8003eac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	2400001c 	.word	0x2400001c
 8003eb8:	24000010 	.word	0x24000010
 8003ebc:	24000018 	.word	0x24000018

08003ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ec4:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <HAL_IncTick+0x20>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <HAL_IncTick+0x24>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4413      	add	r3, r2
 8003ed0:	4a04      	ldr	r2, [pc, #16]	@ (8003ee4 <HAL_IncTick+0x24>)
 8003ed2:	6013      	str	r3, [r2, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	2400001c 	.word	0x2400001c
 8003ee4:	24024ab0 	.word	0x24024ab0

08003ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return uwTick;
 8003eec:	4b03      	ldr	r3, [pc, #12]	@ (8003efc <HAL_GetTick+0x14>)
 8003eee:	681b      	ldr	r3, [r3, #0]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	24024ab0 	.word	0x24024ab0

08003f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f08:	f7ff ffee 	bl	8003ee8 <HAL_GetTick>
 8003f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f18:	d005      	beq.n	8003f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f44 <HAL_Delay+0x44>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f26:	bf00      	nop
 8003f28:	f7ff ffde 	bl	8003ee8 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d8f7      	bhi.n	8003f28 <HAL_Delay+0x28>
  {
  }
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	2400001c 	.word	0x2400001c

08003f48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f4c:	4b03      	ldr	r3, [pc, #12]	@ (8003f5c <HAL_GetREVID+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	0c1b      	lsrs	r3, r3, #16
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	5c001000 	.word	0x5c001000

08003f60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	609a      	str	r2, [r3, #8]
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3360      	adds	r3, #96	@ 0x60
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	431a      	orrs	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	611a      	str	r2, [r3, #16]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800403a:	b480      	push	{r7}
 800403c:	b087      	sub	sp, #28
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3360      	adds	r3, #96	@ 0x60
 800404a:	461a      	mov	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	431a      	orrs	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	601a      	str	r2, [r3, #0]
  }
}
 8004064:	bf00      	nop
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004096:	b480      	push	{r7}
 8004098:	b087      	sub	sp, #28
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3330      	adds	r3, #48	@ 0x30
 80040a6:	461a      	mov	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	4413      	add	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	211f      	movs	r1, #31
 80040c2:	fa01 f303 	lsl.w	r3, r1, r3
 80040c6:	43db      	mvns	r3, r3
 80040c8:	401a      	ands	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0e9b      	lsrs	r3, r3, #26
 80040ce:	f003 011f 	and.w	r1, r3, #31
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	fa01 f303 	lsl.w	r3, r1, r3
 80040dc:	431a      	orrs	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f023 0203 	bic.w	r2, r3, #3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3314      	adds	r3, #20
 8004124:	461a      	mov	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	0e5b      	lsrs	r3, r3, #25
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	4413      	add	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	0d1b      	lsrs	r3, r3, #20
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2107      	movs	r1, #7
 8004142:	fa01 f303 	lsl.w	r3, r1, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	401a      	ands	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	0d1b      	lsrs	r3, r3, #20
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	fa01 f303 	lsl.w	r3, r1, r3
 8004158:	431a      	orrs	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004184:	43db      	mvns	r3, r3
 8004186:	401a      	ands	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f003 0318 	and.w	r3, r3, #24
 800418e:	4908      	ldr	r1, [pc, #32]	@ (80041b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004190:	40d9      	lsrs	r1, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	400b      	ands	r3, r1
 8004196:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800419a:	431a      	orrs	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	000fffff 	.word	0x000fffff

080041b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 031f 	and.w	r3, r3, #31
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	4b04      	ldr	r3, [pc, #16]	@ (80041f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80041de:	4013      	ands	r3, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6093      	str	r3, [r2, #8]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	5fffffc0 	.word	0x5fffffc0

080041f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004208:	d101      	bne.n	800420e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	4b05      	ldr	r3, [pc, #20]	@ (8004240 <LL_ADC_EnableInternalRegulator+0x24>)
 800422a:	4013      	ands	r3, r2
 800422c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	6fffffc0 	.word	0x6fffffc0

08004244 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004254:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004258:	d101      	bne.n	800425e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <LL_ADC_Enable+0x24>)
 800427a:	4013      	ands	r3, r2
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	7fffffc0 	.word	0x7fffffc0

08004294 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <LL_ADC_Disable+0x24>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	f043 0202 	orr.w	r2, r3, #2
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	7fffffc0 	.word	0x7fffffc0

080042bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <LL_ADC_IsEnabled+0x18>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <LL_ADC_IsEnabled+0x1a>
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d101      	bne.n	80042fa <LL_ADC_IsDisableOngoing+0x18>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <LL_ADC_IsDisableOngoing+0x1a>
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	4b05      	ldr	r3, [pc, #20]	@ (800432c <LL_ADC_REG_StartConversion+0x24>)
 8004316:	4013      	ands	r3, r2
 8004318:	f043 0204 	orr.w	r2, r3, #4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	7fffffc0 	.word	0x7fffffc0

08004330 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	4b05      	ldr	r3, [pc, #20]	@ (8004354 <LL_ADC_REG_StopConversion+0x24>)
 800433e:	4013      	ands	r3, r2
 8004340:	f043 0210 	orr.w	r2, r3, #16
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	7fffffc0 	.word	0x7fffffc0

08004358 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b04      	cmp	r3, #4
 800436a:	d101      	bne.n	8004370 <LL_ADC_REG_IsConversionOngoing+0x18>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <LL_ADC_INJ_StopConversion+0x24>)
 800438e:	4013      	ands	r3, r2
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	7fffffc0 	.word	0x7fffffc0

080043a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d101      	bne.n	80043c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b089      	sub	sp, #36	@ 0x24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043dc:	2300      	movs	r3, #0
 80043de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e18f      	b.n	800470a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7fc fe4f 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff feef 	bl	80041f4 <LL_ADC_IsDeepPowerDownEnabled>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fed5 	bl	80041d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff ff0a 	bl	8004244 <LL_ADC_IsInternalRegulatorEnabled>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d114      	bne.n	8004460 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff feee 	bl	800421c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004440:	4b87      	ldr	r3, [pc, #540]	@ (8004660 <HAL_ADC_Init+0x290>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	4a87      	ldr	r2, [pc, #540]	@ (8004664 <HAL_ADC_Init+0x294>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	3301      	adds	r3, #1
 8004450:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004452:	e002      	b.n	800445a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	3b01      	subs	r3, #1
 8004458:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f9      	bne.n	8004454 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff feed 	bl	8004244 <LL_ADC_IsInternalRegulatorEnabled>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10d      	bne.n	800448c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004474:	f043 0210 	orr.w	r2, r3, #16
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004480:	f043 0201 	orr.w	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ff61 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 8004496:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f040 8129 	bne.w	80046f8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f040 8125 	bne.w	80046f8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80044b6:	f043 0202 	orr.w	r2, r3, #2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fefa 	bl	80042bc <LL_ADC_IsEnabled>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d136      	bne.n	800453c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a65      	ldr	r2, [pc, #404]	@ (8004668 <HAL_ADC_Init+0x298>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <HAL_ADC_Init+0x112>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a63      	ldr	r2, [pc, #396]	@ (800466c <HAL_ADC_Init+0x29c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d10e      	bne.n	8004500 <HAL_ADC_Init+0x130>
 80044e2:	4861      	ldr	r0, [pc, #388]	@ (8004668 <HAL_ADC_Init+0x298>)
 80044e4:	f7ff feea 	bl	80042bc <LL_ADC_IsEnabled>
 80044e8:	4604      	mov	r4, r0
 80044ea:	4860      	ldr	r0, [pc, #384]	@ (800466c <HAL_ADC_Init+0x29c>)
 80044ec:	f7ff fee6 	bl	80042bc <LL_ADC_IsEnabled>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4323      	orrs	r3, r4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e008      	b.n	8004512 <HAL_ADC_Init+0x142>
 8004500:	485b      	ldr	r0, [pc, #364]	@ (8004670 <HAL_ADC_Init+0x2a0>)
 8004502:	f7ff fedb 	bl	80042bc <LL_ADC_IsEnabled>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d012      	beq.n	800453c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a53      	ldr	r2, [pc, #332]	@ (8004668 <HAL_ADC_Init+0x298>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <HAL_ADC_Init+0x15a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a51      	ldr	r2, [pc, #324]	@ (800466c <HAL_ADC_Init+0x29c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <HAL_ADC_Init+0x15e>
 800452a:	4a52      	ldr	r2, [pc, #328]	@ (8004674 <HAL_ADC_Init+0x2a4>)
 800452c:	e000      	b.n	8004530 <HAL_ADC_Init+0x160>
 800452e:	4a52      	ldr	r2, [pc, #328]	@ (8004678 <HAL_ADC_Init+0x2a8>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7ff fd12 	bl	8003f60 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800453c:	f7ff fd04 	bl	8003f48 <HAL_GetREVID>
 8004540:	4603      	mov	r3, r0
 8004542:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004546:	4293      	cmp	r3, r2
 8004548:	d914      	bls.n	8004574 <HAL_ADC_Init+0x1a4>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b10      	cmp	r3, #16
 8004550:	d110      	bne.n	8004574 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	7d5b      	ldrb	r3, [r3, #21]
 8004556:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800455c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004562:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	7f1b      	ldrb	r3, [r3, #28]
 8004568:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800456a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800456c:	f043 030c 	orr.w	r3, r3, #12
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	e00d      	b.n	8004590 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	7d5b      	ldrb	r3, [r3, #21]
 8004578:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800457e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004584:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7f1b      	ldrb	r3, [r3, #28]
 800458a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800458c:	4313      	orrs	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7f1b      	ldrb	r3, [r3, #28]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	3b01      	subs	r3, #1
 800459e:	045b      	lsls	r3, r3, #17
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	4b2c      	ldr	r3, [pc, #176]	@ (800467c <HAL_ADC_Init+0x2ac>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	69b9      	ldr	r1, [r7, #24]
 80045d2:	430b      	orrs	r3, r1
 80045d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff febc 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 80045e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fede 	bl	80043a8 <LL_ADC_INJ_IsConversionOngoing>
 80045ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d15f      	bne.n	80046b4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d15c      	bne.n	80046b4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7d1b      	ldrb	r3, [r3, #20]
 80045fe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8004604:	4313      	orrs	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	4b1c      	ldr	r3, [pc, #112]	@ (8004680 <HAL_ADC_Init+0x2b0>)
 8004610:	4013      	ands	r3, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	69b9      	ldr	r1, [r7, #24]
 8004618:	430b      	orrs	r3, r1
 800461a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004622:	2b01      	cmp	r3, #1
 8004624:	d130      	bne.n	8004688 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	4b14      	ldr	r3, [pc, #80]	@ (8004684 <HAL_ADC_Init+0x2b4>)
 8004634:	4013      	ands	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800463a:	3a01      	subs	r2, #1
 800463c:	0411      	lsls	r1, r2, #16
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004642:	4311      	orrs	r1, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004648:	4311      	orrs	r1, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800464e:	430a      	orrs	r2, r1
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	611a      	str	r2, [r3, #16]
 800465c:	e01c      	b.n	8004698 <HAL_ADC_Init+0x2c8>
 800465e:	bf00      	nop
 8004660:	24000010 	.word	0x24000010
 8004664:	053e2d63 	.word	0x053e2d63
 8004668:	40022000 	.word	0x40022000
 800466c:	40022100 	.word	0x40022100
 8004670:	58026000 	.word	0x58026000
 8004674:	40022300 	.word	0x40022300
 8004678:	58026300 	.word	0x58026300
 800467c:	fff0c003 	.word	0xfff0c003
 8004680:	ffffbffc 	.word	0xffffbffc
 8004684:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0201 	bic.w	r2, r2, #1
 8004696:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f001 f812 	bl	80056d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d10c      	bne.n	80046d6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	f023 010f 	bic.w	r1, r3, #15
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	1e5a      	subs	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80046d4:	e007      	b.n	80046e6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 020f 	bic.w	r2, r2, #15
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80046f6:	e007      	b.n	8004708 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fc:	f043 0210 	orr.w	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004708:	7ffb      	ldrb	r3, [r7, #31]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3724      	adds	r7, #36	@ 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}
 8004712:	bf00      	nop

08004714 <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e16e      	b.n	8004a04 <HAL_ADC_DeInit+0x2f0>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472a:	f043 0202 	orr.w	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004732:	2103      	movs	r1, #3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fd95 	bl	8005264 <ADC_ConversionStop>
 800473a:	4603      	mov	r3, r0
 800473c:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800474c:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fecb 	bl	80054f0 <ADC_Disable>
 800475a:	4603      	mov	r3, r0
 800475c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6859      	ldr	r1, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4b8c      	ldr	r3, [pc, #560]	@ (80049a8 <HAL_ADC_DeInit+0x294>)
 8004776:	400b      	ands	r3, r1
 8004778:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004782:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 8004792:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80047a2:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f002 2280 	and.w	r2, r2, #2147516416	@ 0x80008000
 80047b2:	60da      	str	r2, [r3, #12]
            ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
            ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
            ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
            ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
            ADC_CFGR_RES     | ADC_CFGR_DMNGT);
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80047c2:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6919      	ldr	r1, [r3, #16]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	4b77      	ldr	r3, [pc, #476]	@ (80049ac <HAL_ADC_DeInit+0x298>)
 80047d0:	400b      	ands	r3, r1
 80047d2:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 80047e2:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 80047f2:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
    CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
  }
#else
  /* Reset register LTR1 and HTR1 */
  CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004802:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004812:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register LTR2 and HTR2*/
  CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004824:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004838:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Reset register LTR3 and HTR3 */
  CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 800484c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f002 427c 	and.w	r2, r2, #4227858432	@ 0xfc000000
 8004860:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* ADC_VER_V5_V90 */


  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b50      	ldr	r3, [pc, #320]	@ (80049b0 <HAL_ADC_DeInit+0x29c>)
 8004870:	400b      	ands	r3, r1
 8004872:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b4d      	ldr	r3, [pc, #308]	@ (80049b4 <HAL_ADC_DeInit+0x2a0>)
 8004880:	400b      	ands	r3, r1
 8004882:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4b49      	ldr	r3, [pc, #292]	@ (80049b4 <HAL_ADC_DeInit+0x2a0>)
 8004890:	400b      	ands	r3, r1
 8004892:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4b46      	ldr	r3, [pc, #280]	@ (80049b8 <HAL_ADC_DeInit+0x2a4>)
 80048a0:	400b      	ands	r3, r1
 80048a2:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2200      	movs	r2, #0
 80048be:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2200      	movs	r2, #0
 80048cc:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2200      	movs	r2, #0
 80048da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	4b34      	ldr	r3, [pc, #208]	@ (80049bc <HAL_ADC_DeInit+0x2a8>)
 80048ea:	400b      	ands	r3, r1
 80048ec:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b2f      	ldr	r3, [pc, #188]	@ (80049bc <HAL_ADC_DeInit+0x2a8>)
 80048fe:	400b      	ands	r3, r1
 8004900:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    /* Reset register CALFACT */
    CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
  }
#else
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	4b2a      	ldr	r3, [pc, #168]	@ (80049bc <HAL_ADC_DeInit+0x2a8>)
 8004912:	400b      	ands	r3, r1
 8004914:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
 8004928:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a23      	ldr	r2, [pc, #140]	@ (80049c0 <HAL_ADC_DeInit+0x2ac>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_ADC_DeInit+0x22c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a22      	ldr	r2, [pc, #136]	@ (80049c4 <HAL_ADC_DeInit+0x2b0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d10e      	bne.n	800495e <HAL_ADC_DeInit+0x24a>
 8004940:	481f      	ldr	r0, [pc, #124]	@ (80049c0 <HAL_ADC_DeInit+0x2ac>)
 8004942:	f7ff fcbb 	bl	80042bc <LL_ADC_IsEnabled>
 8004946:	4604      	mov	r4, r0
 8004948:	481e      	ldr	r0, [pc, #120]	@ (80049c4 <HAL_ADC_DeInit+0x2b0>)
 800494a:	f7ff fcb7 	bl	80042bc <LL_ADC_IsEnabled>
 800494e:	4603      	mov	r3, r0
 8004950:	4323      	orrs	r3, r4
 8004952:	2b00      	cmp	r3, #0
 8004954:	bf0c      	ite	eq
 8004956:	2301      	moveq	r3, #1
 8004958:	2300      	movne	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e008      	b.n	8004970 <HAL_ADC_DeInit+0x25c>
 800495e:	481a      	ldr	r0, [pc, #104]	@ (80049c8 <HAL_ADC_DeInit+0x2b4>)
 8004960:	f7ff fcac 	bl	80042bc <LL_ADC_IsEnabled>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf0c      	ite	eq
 800496a:	2301      	moveq	r3, #1
 800496c:	2300      	movne	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d036      	beq.n	80049e2 <HAL_ADC_DeInit+0x2ce>
      - multimode related parameters(when this feature is available): DELAY, DUAL
       (set into  HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a11      	ldr	r2, [pc, #68]	@ (80049c0 <HAL_ADC_DeInit+0x2ac>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <HAL_ADC_DeInit+0x274>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a10      	ldr	r2, [pc, #64]	@ (80049c4 <HAL_ADC_DeInit+0x2b0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d101      	bne.n	800498c <HAL_ADC_DeInit+0x278>
 8004988:	4b10      	ldr	r3, [pc, #64]	@ (80049cc <HAL_ADC_DeInit+0x2b8>)
 800498a:	e000      	b.n	800498e <HAL_ADC_DeInit+0x27a>
 800498c:	4b10      	ldr	r3, [pc, #64]	@ (80049d0 <HAL_ADC_DeInit+0x2bc>)
 800498e:	6899      	ldr	r1, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a0a      	ldr	r2, [pc, #40]	@ (80049c0 <HAL_ADC_DeInit+0x2ac>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_ADC_DeInit+0x290>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a09      	ldr	r2, [pc, #36]	@ (80049c4 <HAL_ADC_DeInit+0x2b0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d117      	bne.n	80049d4 <HAL_ADC_DeInit+0x2c0>
 80049a4:	4a09      	ldr	r2, [pc, #36]	@ (80049cc <HAL_ADC_DeInit+0x2b8>)
 80049a6:	e016      	b.n	80049d6 <HAL_ADC_DeInit+0x2c2>
 80049a8:	fffff800 	.word	0xfffff800
 80049ac:	fc00f81c 	.word	0xfc00f81c
 80049b0:	e0820830 	.word	0xe0820830
 80049b4:	e0820820 	.word	0xe0820820
 80049b8:	fffff820 	.word	0xfffff820
 80049bc:	fff00000 	.word	0xfff00000
 80049c0:	40022000 	.word	0x40022000
 80049c4:	40022100 	.word	0x40022100
 80049c8:	58026000 	.word	0x58026000
 80049cc:	40022300 	.word	0x40022300
 80049d0:	58026300 	.word	0x58026300
 80049d4:	4a0d      	ldr	r2, [pc, #52]	@ (8004a0c <HAL_ADC_DeInit+0x2f8>)
 80049d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a10 <HAL_ADC_DeInit+0x2fc>)
 80049d8:	400b      	ands	r3, r1
 80049da:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware: RCC clock, NVIC */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware: RCC clock, NVIC */
    HAL_ADC_MspDeInit(hadc);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fc fc03 	bl	80011e8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd90      	pop	{r4, r7, pc}
 8004a0c:	58026300 	.word	0x58026300
 8004a10:	fe0030e0 	.word	0xfe0030e0

08004a14 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a55      	ldr	r2, [pc, #340]	@ (8004b7c <HAL_ADC_Start_DMA+0x168>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d004      	beq.n	8004a34 <HAL_ADC_Start_DMA+0x20>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a54      	ldr	r2, [pc, #336]	@ (8004b80 <HAL_ADC_Start_DMA+0x16c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d101      	bne.n	8004a38 <HAL_ADC_Start_DMA+0x24>
 8004a34:	4b53      	ldr	r3, [pc, #332]	@ (8004b84 <HAL_ADC_Start_DMA+0x170>)
 8004a36:	e000      	b.n	8004a3a <HAL_ADC_Start_DMA+0x26>
 8004a38:	4b53      	ldr	r3, [pc, #332]	@ (8004b88 <HAL_ADC_Start_DMA+0x174>)
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fbba 	bl	80041b4 <LL_ADC_GetMultimode>
 8004a40:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fc86 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f040 808c 	bne.w	8004b6c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_ADC_Start_DMA+0x4e>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e087      	b.n	8004b72 <HAL_ADC_Start_DMA+0x15e>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d002      	beq.n	8004a7c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b09      	cmp	r3, #9
 8004a7a:	d170      	bne.n	8004b5e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 fcad 	bl	80053dc <ADC_Enable>
 8004a82:	4603      	mov	r3, r0
 8004a84:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d163      	bne.n	8004b54 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a90:	4b3e      	ldr	r3, [pc, #248]	@ (8004b8c <HAL_ADC_Start_DMA+0x178>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a37      	ldr	r2, [pc, #220]	@ (8004b80 <HAL_ADC_Start_DMA+0x16c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d002      	beq.n	8004aac <HAL_ADC_Start_DMA+0x98>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	e000      	b.n	8004aae <HAL_ADC_Start_DMA+0x9a>
 8004aac:	4b33      	ldr	r3, [pc, #204]	@ (8004b7c <HAL_ADC_Start_DMA+0x168>)
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d002      	beq.n	8004abc <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d105      	bne.n	8004ac8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004acc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d006      	beq.n	8004ae2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad8:	f023 0206 	bic.w	r2, r3, #6
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ae0:	e002      	b.n	8004ae8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aec:	4a28      	ldr	r2, [pc, #160]	@ (8004b90 <HAL_ADC_Start_DMA+0x17c>)
 8004aee:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af4:	4a27      	ldr	r2, [pc, #156]	@ (8004b94 <HAL_ADC_Start_DMA+0x180>)
 8004af6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afc:	4a26      	ldr	r2, [pc, #152]	@ (8004b98 <HAL_ADC_Start_DMA+0x184>)
 8004afe:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	221c      	movs	r2, #28
 8004b06:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0210 	orr.w	r2, r2, #16
 8004b1e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7ff fadf 	bl	80040ee <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3340      	adds	r3, #64	@ 0x40
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f002 f870 	bl	8006c24 <HAL_DMA_Start_IT>
 8004b44:	4603      	mov	r3, r0
 8004b46:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fbdb 	bl	8004308 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004b52:	e00d      	b.n	8004b70 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8004b5c:	e008      	b.n	8004b70 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004b6a:	e001      	b.n	8004b70 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40022000 	.word	0x40022000
 8004b80:	40022100 	.word	0x40022100
 8004b84:	40022300 	.word	0x40022300
 8004b88:	58026300 	.word	0x58026300
 8004b8c:	fffff0fe 	.word	0xfffff0fe
 8004b90:	080055af 	.word	0x080055af
 8004b94:	08005687 	.word	0x08005687
 8004b98:	080056a3 	.word	0x080056a3

08004b9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b0a1      	sub	sp, #132	@ 0x84
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a9d      	ldr	r2, [pc, #628]	@ (8004e54 <HAL_ADC_ConfigChannel+0x290>)
 8004bde:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x2a>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e321      	b.n	8005232 <HAL_ADC_ConfigChannel+0x66e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff fbac 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 8306 	bne.w	8005214 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d108      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x62>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	0e9b      	lsrs	r3, r3, #26
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2201      	movs	r2, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	e016      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x90>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c2e:	fa93 f3a3 	rbit	r3, r3
 8004c32:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c36:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004c3e:	2320      	movs	r3, #32
 8004c40:	e003      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004c42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c44:	fab3 f383 	clz	r3, r3
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2201      	movs	r2, #1
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	69d1      	ldr	r1, [r2, #28]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f7ff fa11 	bl	8004096 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fb6d 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 8004c7e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fb8f 	bl	80043a8 <LL_ADC_INJ_IsConversionOngoing>
 8004c8a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f040 80b3 	bne.w	8004dfa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 80af 	bne.w	8004dfa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	6819      	ldr	r1, [r3, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f7ff fa33 	bl	8004114 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004cae:	4b6a      	ldr	r3, [pc, #424]	@ (8004e58 <HAL_ADC_ConfigChannel+0x294>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cba:	d10b      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x110>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	695a      	ldr	r2, [r3, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	089b      	lsrs	r3, r3, #2
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	e01d      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x14c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10b      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x136>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	089b      	lsrs	r3, r3, #2
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	e00a      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x14c>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	089b      	lsrs	r3, r3, #2
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d027      	beq.n	8004d6a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6919      	ldr	r1, [r3, #16]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d28:	f7ff f94e 	bl	8003fc8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	6919      	ldr	r1, [r3, #16]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	7e5b      	ldrb	r3, [r3, #25]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d102      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0x17e>
 8004d3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d40:	e000      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x180>
 8004d42:	2300      	movs	r3, #0
 8004d44:	461a      	mov	r2, r3
 8004d46:	f7ff f978 	bl	800403a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6919      	ldr	r1, [r3, #16]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	7e1b      	ldrb	r3, [r3, #24]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d102      	bne.n	8004d60 <HAL_ADC_ConfigChannel+0x19c>
 8004d5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d5e:	e000      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x19e>
 8004d60:	2300      	movs	r3, #0
 8004d62:	461a      	mov	r2, r3
 8004d64:	f7ff f950 	bl	8004008 <LL_ADC_SetDataRightShift>
 8004d68:	e047      	b.n	8004dfa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	069b      	lsls	r3, r3, #26
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d107      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004d8c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	069b      	lsls	r3, r3, #26
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d107      	bne.n	8004db2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004db0:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004db8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	069b      	lsls	r3, r3, #26
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d107      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004dd4:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ddc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	069b      	lsls	r3, r3, #26
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d107      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004df8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fa5c 	bl	80042bc <LL_ADC_IsEnabled>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f040 820d 	bne.w	8005226 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	f7ff f9a7 	bl	800416c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	4a0c      	ldr	r2, [pc, #48]	@ (8004e54 <HAL_ADC_ConfigChannel+0x290>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	f040 8133 	bne.w	8005090 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d110      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x298>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	0e9b      	lsrs	r3, r3, #26
 8004e40:	3301      	adds	r3, #1
 8004e42:	f003 031f 	and.w	r3, r3, #31
 8004e46:	2b09      	cmp	r3, #9
 8004e48:	bf94      	ite	ls
 8004e4a:	2301      	movls	r3, #1
 8004e4c:	2300      	movhi	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	e01e      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x2cc>
 8004e52:	bf00      	nop
 8004e54:	47ff0000 	.word	0x47ff0000
 8004e58:	5c001000 	.word	0x5c001000
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e64:	fa93 f3a3 	rbit	r3, r3
 8004e68:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004e6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004e74:	2320      	movs	r3, #32
 8004e76:	e003      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004e78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e7a:	fab3 f383 	clz	r3, r3
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	3301      	adds	r3, #1
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	2b09      	cmp	r3, #9
 8004e88:	bf94      	ite	ls
 8004e8a:	2301      	movls	r3, #1
 8004e8c:	2300      	movhi	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d079      	beq.n	8004f88 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d107      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0x2ec>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	0e9b      	lsrs	r3, r3, #26
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	069b      	lsls	r3, r3, #26
 8004eaa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004eae:	e015      	b.n	8004edc <HAL_ADC_ConfigChannel+0x318>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004ebe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ec0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004ec8:	2320      	movs	r3, #32
 8004eca:	e003      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	069b      	lsls	r3, r3, #26
 8004ed8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x338>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	0e9b      	lsrs	r3, r3, #26
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	e017      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x368>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f04:	fa93 f3a3 	rbit	r3, r3
 8004f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004f14:	2320      	movs	r3, #32
 8004f16:	e003      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f1a:	fab3 f383 	clz	r3, r3
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	3301      	adds	r3, #1
 8004f22:	f003 031f 	and.w	r3, r3, #31
 8004f26:	2101      	movs	r1, #1
 8004f28:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2c:	ea42 0103 	orr.w	r1, r2, r3
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x38e>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	0e9b      	lsrs	r3, r3, #26
 8004f42:	3301      	adds	r3, #1
 8004f44:	f003 021f 	and.w	r2, r3, #31
 8004f48:	4613      	mov	r3, r2
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4413      	add	r3, r2
 8004f4e:	051b      	lsls	r3, r3, #20
 8004f50:	e018      	b.n	8004f84 <HAL_ADC_ConfigChannel+0x3c0>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5a:	fa93 f3a3 	rbit	r3, r3
 8004f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004f6a:	2320      	movs	r3, #32
 8004f6c:	e003      	b.n	8004f76 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f70:	fab3 f383 	clz	r3, r3
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	3301      	adds	r3, #1
 8004f78:	f003 021f 	and.w	r2, r3, #31
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	4413      	add	r3, r2
 8004f82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f84:	430b      	orrs	r3, r1
 8004f86:	e07e      	b.n	8005086 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d107      	bne.n	8004fa4 <HAL_ADC_ConfigChannel+0x3e0>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	0e9b      	lsrs	r3, r3, #26
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	069b      	lsls	r3, r3, #26
 8004f9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fa2:	e015      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x40c>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fac:	fa93 f3a3 	rbit	r3, r3
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004fbc:	2320      	movs	r3, #32
 8004fbe:	e003      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	069b      	lsls	r3, r3, #26
 8004fcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x42c>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	0e9b      	lsrs	r3, r3, #26
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2101      	movs	r1, #1
 8004fea:	fa01 f303 	lsl.w	r3, r1, r3
 8004fee:	e017      	b.n	8005020 <HAL_ADC_ConfigChannel+0x45c>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	fa93 f3a3 	rbit	r3, r3
 8004ffc:	61bb      	str	r3, [r7, #24]
  return result;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005008:	2320      	movs	r3, #32
 800500a:	e003      	b.n	8005014 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	fab3 f383 	clz	r3, r3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	3301      	adds	r3, #1
 8005016:	f003 031f 	and.w	r3, r3, #31
 800501a:	2101      	movs	r1, #1
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	ea42 0103 	orr.w	r1, r2, r3
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10d      	bne.n	800504c <HAL_ADC_ConfigChannel+0x488>
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	0e9b      	lsrs	r3, r3, #26
 8005036:	3301      	adds	r3, #1
 8005038:	f003 021f 	and.w	r2, r3, #31
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	3b1e      	subs	r3, #30
 8005044:	051b      	lsls	r3, r3, #20
 8005046:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800504a:	e01b      	b.n	8005084 <HAL_ADC_ConfigChannel+0x4c0>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	fa93 f3a3 	rbit	r3, r3
 8005058:	60fb      	str	r3, [r7, #12]
  return result;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8005064:	2320      	movs	r3, #32
 8005066:	e003      	b.n	8005070 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	fab3 f383 	clz	r3, r3
 800506e:	b2db      	uxtb	r3, r3
 8005070:	3301      	adds	r3, #1
 8005072:	f003 021f 	and.w	r2, r3, #31
 8005076:	4613      	mov	r3, r2
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	4413      	add	r3, r2
 800507c:	3b1e      	subs	r3, #30
 800507e:	051b      	lsls	r3, r3, #20
 8005080:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005084:	430b      	orrs	r3, r1
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	6892      	ldr	r2, [r2, #8]
 800508a:	4619      	mov	r1, r3
 800508c:	f7ff f842 	bl	8004114 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f280 80c6 	bge.w	8005226 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a67      	ldr	r2, [pc, #412]	@ (800523c <HAL_ADC_ConfigChannel+0x678>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_ADC_ConfigChannel+0x4ea>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a65      	ldr	r2, [pc, #404]	@ (8005240 <HAL_ADC_ConfigChannel+0x67c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d101      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x4ee>
 80050ae:	4b65      	ldr	r3, [pc, #404]	@ (8005244 <HAL_ADC_ConfigChannel+0x680>)
 80050b0:	e000      	b.n	80050b4 <HAL_ADC_ConfigChannel+0x4f0>
 80050b2:	4b65      	ldr	r3, [pc, #404]	@ (8005248 <HAL_ADC_ConfigChannel+0x684>)
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe ff79 	bl	8003fac <LL_ADC_GetCommonPathInternalCh>
 80050ba:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a5e      	ldr	r2, [pc, #376]	@ (800523c <HAL_ADC_ConfigChannel+0x678>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_ADC_ConfigChannel+0x50c>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a5d      	ldr	r2, [pc, #372]	@ (8005240 <HAL_ADC_ConfigChannel+0x67c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d10e      	bne.n	80050ee <HAL_ADC_ConfigChannel+0x52a>
 80050d0:	485a      	ldr	r0, [pc, #360]	@ (800523c <HAL_ADC_ConfigChannel+0x678>)
 80050d2:	f7ff f8f3 	bl	80042bc <LL_ADC_IsEnabled>
 80050d6:	4604      	mov	r4, r0
 80050d8:	4859      	ldr	r0, [pc, #356]	@ (8005240 <HAL_ADC_ConfigChannel+0x67c>)
 80050da:	f7ff f8ef 	bl	80042bc <LL_ADC_IsEnabled>
 80050de:	4603      	mov	r3, r0
 80050e0:	4323      	orrs	r3, r4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	e008      	b.n	8005100 <HAL_ADC_ConfigChannel+0x53c>
 80050ee:	4857      	ldr	r0, [pc, #348]	@ (800524c <HAL_ADC_ConfigChannel+0x688>)
 80050f0:	f7ff f8e4 	bl	80042bc <LL_ADC_IsEnabled>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d07d      	beq.n	8005200 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a51      	ldr	r2, [pc, #324]	@ (8005250 <HAL_ADC_ConfigChannel+0x68c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d130      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x5ac>
 800510e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005110:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d12b      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a4b      	ldr	r2, [pc, #300]	@ (800524c <HAL_ADC_ConfigChannel+0x688>)
 800511e:	4293      	cmp	r3, r2
 8005120:	f040 8081 	bne.w	8005226 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a44      	ldr	r2, [pc, #272]	@ (800523c <HAL_ADC_ConfigChannel+0x678>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_ADC_ConfigChannel+0x574>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a43      	ldr	r2, [pc, #268]	@ (8005240 <HAL_ADC_ConfigChannel+0x67c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d101      	bne.n	800513c <HAL_ADC_ConfigChannel+0x578>
 8005138:	4a42      	ldr	r2, [pc, #264]	@ (8005244 <HAL_ADC_ConfigChannel+0x680>)
 800513a:	e000      	b.n	800513e <HAL_ADC_ConfigChannel+0x57a>
 800513c:	4a42      	ldr	r2, [pc, #264]	@ (8005248 <HAL_ADC_ConfigChannel+0x684>)
 800513e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005140:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005144:	4619      	mov	r1, r3
 8005146:	4610      	mov	r0, r2
 8005148:	f7fe ff1d 	bl	8003f86 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800514c:	4b41      	ldr	r3, [pc, #260]	@ (8005254 <HAL_ADC_ConfigChannel+0x690>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	099b      	lsrs	r3, r3, #6
 8005152:	4a41      	ldr	r2, [pc, #260]	@ (8005258 <HAL_ADC_ConfigChannel+0x694>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	099b      	lsrs	r3, r3, #6
 800515a:	3301      	adds	r3, #1
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005160:	e002      	b.n	8005168 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	3b01      	subs	r3, #1
 8005166:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f9      	bne.n	8005162 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800516e:	e05a      	b.n	8005226 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a39      	ldr	r2, [pc, #228]	@ (800525c <HAL_ADC_ConfigChannel+0x698>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d11e      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x5f4>
 800517a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800517c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d119      	bne.n	80051b8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a30      	ldr	r2, [pc, #192]	@ (800524c <HAL_ADC_ConfigChannel+0x688>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d14b      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a2a      	ldr	r2, [pc, #168]	@ (800523c <HAL_ADC_ConfigChannel+0x678>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_ADC_ConfigChannel+0x5de>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a28      	ldr	r2, [pc, #160]	@ (8005240 <HAL_ADC_ConfigChannel+0x67c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d101      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x5e2>
 80051a2:	4a28      	ldr	r2, [pc, #160]	@ (8005244 <HAL_ADC_ConfigChannel+0x680>)
 80051a4:	e000      	b.n	80051a8 <HAL_ADC_ConfigChannel+0x5e4>
 80051a6:	4a28      	ldr	r2, [pc, #160]	@ (8005248 <HAL_ADC_ConfigChannel+0x684>)
 80051a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7fe fee8 	bl	8003f86 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051b6:	e036      	b.n	8005226 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a28      	ldr	r2, [pc, #160]	@ (8005260 <HAL_ADC_ConfigChannel+0x69c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d131      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x662>
 80051c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d12c      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1e      	ldr	r2, [pc, #120]	@ (800524c <HAL_ADC_ConfigChannel+0x688>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d127      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a18      	ldr	r2, [pc, #96]	@ (800523c <HAL_ADC_ConfigChannel+0x678>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x626>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a16      	ldr	r2, [pc, #88]	@ (8005240 <HAL_ADC_ConfigChannel+0x67c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d101      	bne.n	80051ee <HAL_ADC_ConfigChannel+0x62a>
 80051ea:	4a16      	ldr	r2, [pc, #88]	@ (8005244 <HAL_ADC_ConfigChannel+0x680>)
 80051ec:	e000      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x62c>
 80051ee:	4a16      	ldr	r2, [pc, #88]	@ (8005248 <HAL_ADC_ConfigChannel+0x684>)
 80051f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051f6:	4619      	mov	r1, r3
 80051f8:	4610      	mov	r0, r2
 80051fa:	f7fe fec4 	bl	8003f86 <LL_ADC_SetCommonPathInternalCh>
 80051fe:	e012      	b.n	8005226 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005204:	f043 0220 	orr.w	r2, r3, #32
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005212:	e008      	b.n	8005226 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800522e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005232:	4618      	mov	r0, r3
 8005234:	3784      	adds	r7, #132	@ 0x84
 8005236:	46bd      	mov	sp, r7
 8005238:	bd90      	pop	{r4, r7, pc}
 800523a:	bf00      	nop
 800523c:	40022000 	.word	0x40022000
 8005240:	40022100 	.word	0x40022100
 8005244:	40022300 	.word	0x40022300
 8005248:	58026300 	.word	0x58026300
 800524c:	58026000 	.word	0x58026000
 8005250:	cb840000 	.word	0xcb840000
 8005254:	24000010 	.word	0x24000010
 8005258:	053e2d63 	.word	0x053e2d63
 800525c:	c7520000 	.word	0xc7520000
 8005260:	cfb80000 	.word	0xcfb80000

08005264 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff f86c 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 8005280:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff f88e 	bl	80043a8 <LL_ADC_INJ_IsConversionOngoing>
 800528c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d103      	bne.n	800529c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 8098 	beq.w	80053cc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d02a      	beq.n	8005300 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	7d5b      	ldrb	r3, [r3, #21]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d126      	bne.n	8005300 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	7d1b      	ldrb	r3, [r3, #20]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d122      	bne.n	8005300 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80052ba:	2301      	movs	r3, #1
 80052bc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80052be:	e014      	b.n	80052ea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	4a45      	ldr	r2, [pc, #276]	@ (80053d8 <ADC_ConversionStop+0x174>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d90d      	bls.n	80052e4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052cc:	f043 0210 	orr.w	r2, r3, #16
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d8:	f043 0201 	orr.w	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e074      	b.n	80053ce <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	3301      	adds	r3, #1
 80052e8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f4:	2b40      	cmp	r3, #64	@ 0x40
 80052f6:	d1e3      	bne.n	80052c0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2240      	movs	r2, #64	@ 0x40
 80052fe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d014      	beq.n	8005330 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff f824 	bl	8004358 <LL_ADC_REG_IsConversionOngoing>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00c      	beq.n	8005330 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe ffe1 	bl	80042e2 <LL_ADC_IsDisableOngoing>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff f800 	bl	8004330 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d014      	beq.n	8005360 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff f834 	bl	80043a8 <LL_ADC_INJ_IsConversionOngoing>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe ffc9 	bl	80042e2 <LL_ADC_IsDisableOngoing>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d104      	bne.n	8005360 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff f810 	bl	8004380 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d005      	beq.n	8005372 <ADC_ConversionStop+0x10e>
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d105      	bne.n	8005378 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800536c:	230c      	movs	r3, #12
 800536e:	617b      	str	r3, [r7, #20]
        break;
 8005370:	e005      	b.n	800537e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005372:	2308      	movs	r3, #8
 8005374:	617b      	str	r3, [r7, #20]
        break;
 8005376:	e002      	b.n	800537e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005378:	2304      	movs	r3, #4
 800537a:	617b      	str	r3, [r7, #20]
        break;
 800537c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800537e:	f7fe fdb3 	bl	8003ee8 <HAL_GetTick>
 8005382:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005384:	e01b      	b.n	80053be <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005386:	f7fe fdaf 	bl	8003ee8 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b05      	cmp	r3, #5
 8005392:	d914      	bls.n	80053be <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a6:	f043 0210 	orr.w	r2, r3, #16
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b2:	f043 0201 	orr.w	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e007      	b.n	80053ce <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1dc      	bne.n	8005386 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	000cdbff 	.word	0x000cdbff

080053dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fe ff67 	bl	80042bc <LL_ADC_IsEnabled>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d16e      	bne.n	80054d2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	4b38      	ldr	r3, [pc, #224]	@ (80054dc <ADC_Enable+0x100>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005406:	f043 0210 	orr.w	r2, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005412:	f043 0201 	orr.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e05a      	b.n	80054d4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe ff22 	bl	800426c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005428:	f7fe fd5e 	bl	8003ee8 <HAL_GetTick>
 800542c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a2b      	ldr	r2, [pc, #172]	@ (80054e0 <ADC_Enable+0x104>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d004      	beq.n	8005442 <ADC_Enable+0x66>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a29      	ldr	r2, [pc, #164]	@ (80054e4 <ADC_Enable+0x108>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d101      	bne.n	8005446 <ADC_Enable+0x6a>
 8005442:	4b29      	ldr	r3, [pc, #164]	@ (80054e8 <ADC_Enable+0x10c>)
 8005444:	e000      	b.n	8005448 <ADC_Enable+0x6c>
 8005446:	4b29      	ldr	r3, [pc, #164]	@ (80054ec <ADC_Enable+0x110>)
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe feb3 	bl	80041b4 <LL_ADC_GetMultimode>
 800544e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a23      	ldr	r2, [pc, #140]	@ (80054e4 <ADC_Enable+0x108>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d002      	beq.n	8005460 <ADC_Enable+0x84>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	e000      	b.n	8005462 <ADC_Enable+0x86>
 8005460:	4b1f      	ldr	r3, [pc, #124]	@ (80054e0 <ADC_Enable+0x104>)
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	4293      	cmp	r3, r2
 8005468:	d02c      	beq.n	80054c4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d130      	bne.n	80054d2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005470:	e028      	b.n	80054c4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe ff20 	bl	80042bc <LL_ADC_IsEnabled>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7fe fef0 	bl	800426c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800548c:	f7fe fd2c 	bl	8003ee8 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d914      	bls.n	80054c4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d00d      	beq.n	80054c4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ac:	f043 0210 	orr.w	r2, r3, #16
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b8:	f043 0201 	orr.w	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e007      	b.n	80054d4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d1cf      	bne.n	8005472 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	8000003f 	.word	0x8000003f
 80054e0:	40022000 	.word	0x40022000
 80054e4:	40022100 	.word	0x40022100
 80054e8:	40022300 	.word	0x40022300
 80054ec:	58026300 	.word	0x58026300

080054f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fe fef0 	bl	80042e2 <LL_ADC_IsDisableOngoing>
 8005502:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f7fe fed7 	bl	80042bc <LL_ADC_IsEnabled>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d047      	beq.n	80055a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d144      	bne.n	80055a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 030d 	and.w	r3, r3, #13
 8005524:	2b01      	cmp	r3, #1
 8005526:	d10c      	bne.n	8005542 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f7fe feb1 	bl	8004294 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2203      	movs	r2, #3
 8005538:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800553a:	f7fe fcd5 	bl	8003ee8 <HAL_GetTick>
 800553e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005540:	e029      	b.n	8005596 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005546:	f043 0210 	orr.w	r2, r3, #16
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005552:	f043 0201 	orr.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e023      	b.n	80055a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800555e:	f7fe fcc3 	bl	8003ee8 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d914      	bls.n	8005596 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00d      	beq.n	8005596 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	f043 0210 	orr.w	r2, r3, #16
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558a:	f043 0201 	orr.w	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e007      	b.n	80055a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1dc      	bne.n	800555e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d14b      	bne.n	8005660 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d021      	beq.n	8005626 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fe fd42 	bl	8004070 <LL_ADC_REG_IsTriggerSourceSWStart>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d032      	beq.n	8005658 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d12b      	bne.n	8005658 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005610:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d11f      	bne.n	8005658 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561c:	f043 0201 	orr.w	r2, r3, #1
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	655a      	str	r2, [r3, #84]	@ 0x54
 8005624:	e018      	b.n	8005658 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d111      	bne.n	8005658 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005638:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005644:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005650:	f043 0201 	orr.w	r2, r3, #1
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f7fd fbeb 	bl	8002e34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800565e:	e00e      	b.n	800567e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff fa9f 	bl	8004bb0 <HAL_ADC_ErrorCallback>
}
 8005672:	e004      	b.n	800567e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
}
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005692:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7ff fa81 	bl	8004b9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c0:	f043 0204 	orr.w	r2, r3, #4
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7ff fa71 	bl	8004bb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056ce:	bf00      	nop
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a7a      	ldr	r2, [pc, #488]	@ (80058d0 <ADC_ConfigureBoostMode+0x1f8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d004      	beq.n	80056f4 <ADC_ConfigureBoostMode+0x1c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a79      	ldr	r2, [pc, #484]	@ (80058d4 <ADC_ConfigureBoostMode+0x1fc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d109      	bne.n	8005708 <ADC_ConfigureBoostMode+0x30>
 80056f4:	4b78      	ldr	r3, [pc, #480]	@ (80058d8 <ADC_ConfigureBoostMode+0x200>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bf14      	ite	ne
 8005700:	2301      	movne	r3, #1
 8005702:	2300      	moveq	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	e008      	b.n	800571a <ADC_ConfigureBoostMode+0x42>
 8005708:	4b74      	ldr	r3, [pc, #464]	@ (80058dc <ADC_ConfigureBoostMode+0x204>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01c      	beq.n	8005758 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800571e:	f005 f923 	bl	800a968 <HAL_RCC_GetHCLKFreq>
 8005722:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800572c:	d010      	beq.n	8005750 <ADC_ConfigureBoostMode+0x78>
 800572e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005732:	d873      	bhi.n	800581c <ADC_ConfigureBoostMode+0x144>
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005738:	d002      	beq.n	8005740 <ADC_ConfigureBoostMode+0x68>
 800573a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800573e:	d16d      	bne.n	800581c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	60fb      	str	r3, [r7, #12]
        break;
 800574e:	e068      	b.n	8005822 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	089b      	lsrs	r3, r3, #2
 8005754:	60fb      	str	r3, [r7, #12]
        break;
 8005756:	e064      	b.n	8005822 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005758:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800575c:	f04f 0100 	mov.w	r1, #0
 8005760:	f006 fb68 	bl	800be34 <HAL_RCCEx_GetPeriphCLKFreq>
 8005764:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800576e:	d051      	beq.n	8005814 <ADC_ConfigureBoostMode+0x13c>
 8005770:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005774:	d854      	bhi.n	8005820 <ADC_ConfigureBoostMode+0x148>
 8005776:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800577a:	d047      	beq.n	800580c <ADC_ConfigureBoostMode+0x134>
 800577c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005780:	d84e      	bhi.n	8005820 <ADC_ConfigureBoostMode+0x148>
 8005782:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005786:	d03d      	beq.n	8005804 <ADC_ConfigureBoostMode+0x12c>
 8005788:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800578c:	d848      	bhi.n	8005820 <ADC_ConfigureBoostMode+0x148>
 800578e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005792:	d033      	beq.n	80057fc <ADC_ConfigureBoostMode+0x124>
 8005794:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005798:	d842      	bhi.n	8005820 <ADC_ConfigureBoostMode+0x148>
 800579a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800579e:	d029      	beq.n	80057f4 <ADC_ConfigureBoostMode+0x11c>
 80057a0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80057a4:	d83c      	bhi.n	8005820 <ADC_ConfigureBoostMode+0x148>
 80057a6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80057aa:	d01a      	beq.n	80057e2 <ADC_ConfigureBoostMode+0x10a>
 80057ac:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80057b0:	d836      	bhi.n	8005820 <ADC_ConfigureBoostMode+0x148>
 80057b2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80057b6:	d014      	beq.n	80057e2 <ADC_ConfigureBoostMode+0x10a>
 80057b8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80057bc:	d830      	bhi.n	8005820 <ADC_ConfigureBoostMode+0x148>
 80057be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057c2:	d00e      	beq.n	80057e2 <ADC_ConfigureBoostMode+0x10a>
 80057c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057c8:	d82a      	bhi.n	8005820 <ADC_ConfigureBoostMode+0x148>
 80057ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80057ce:	d008      	beq.n	80057e2 <ADC_ConfigureBoostMode+0x10a>
 80057d0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80057d4:	d824      	bhi.n	8005820 <ADC_ConfigureBoostMode+0x148>
 80057d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057da:	d002      	beq.n	80057e2 <ADC_ConfigureBoostMode+0x10a>
 80057dc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057e0:	d11e      	bne.n	8005820 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	0c9b      	lsrs	r3, r3, #18
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f0:	60fb      	str	r3, [r7, #12]
        break;
 80057f2:	e016      	b.n	8005822 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	091b      	lsrs	r3, r3, #4
 80057f8:	60fb      	str	r3, [r7, #12]
        break;
 80057fa:	e012      	b.n	8005822 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	60fb      	str	r3, [r7, #12]
        break;
 8005802:	e00e      	b.n	8005822 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	099b      	lsrs	r3, r3, #6
 8005808:	60fb      	str	r3, [r7, #12]
        break;
 800580a:	e00a      	b.n	8005822 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	09db      	lsrs	r3, r3, #7
 8005810:	60fb      	str	r3, [r7, #12]
        break;
 8005812:	e006      	b.n	8005822 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	0a1b      	lsrs	r3, r3, #8
 8005818:	60fb      	str	r3, [r7, #12]
        break;
 800581a:	e002      	b.n	8005822 <ADC_ConfigureBoostMode+0x14a>
        break;
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005820:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005822:	f7fe fb91 	bl	8003f48 <HAL_GetREVID>
 8005826:	4603      	mov	r3, r0
 8005828:	f241 0203 	movw	r2, #4099	@ 0x1003
 800582c:	4293      	cmp	r3, r2
 800582e:	d815      	bhi.n	800585c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a2b      	ldr	r2, [pc, #172]	@ (80058e0 <ADC_ConfigureBoostMode+0x208>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d908      	bls.n	800584a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005846:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005848:	e03e      	b.n	80058c8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005858:	609a      	str	r2, [r3, #8]
}
 800585a:	e035      	b.n	80058c8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a1f      	ldr	r2, [pc, #124]	@ (80058e4 <ADC_ConfigureBoostMode+0x20c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d808      	bhi.n	800587c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005878:	609a      	str	r2, [r3, #8]
}
 800587a:	e025      	b.n	80058c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4a1a      	ldr	r2, [pc, #104]	@ (80058e8 <ADC_ConfigureBoostMode+0x210>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d80a      	bhi.n	800589a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005896:	609a      	str	r2, [r3, #8]
}
 8005898:	e016      	b.n	80058c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a13      	ldr	r2, [pc, #76]	@ (80058ec <ADC_ConfigureBoostMode+0x214>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d80a      	bhi.n	80058b8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058b4:	609a      	str	r2, [r3, #8]
}
 80058b6:	e007      	b.n	80058c8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40022000 	.word	0x40022000
 80058d4:	40022100 	.word	0x40022100
 80058d8:	40022300 	.word	0x40022300
 80058dc:	58026300 	.word	0x58026300
 80058e0:	01312d00 	.word	0x01312d00
 80058e4:	005f5e10 	.word	0x005f5e10
 80058e8:	00bebc20 	.word	0x00bebc20
 80058ec:	017d7840 	.word	0x017d7840

080058f0 <LL_ADC_IsEnabled>:
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <LL_ADC_IsEnabled+0x18>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <LL_ADC_IsEnabled+0x1a>
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <LL_ADC_StartCalibration>:
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <LL_ADC_StartCalibration+0x38>)
 800592a:	4013      	ands	r3, r2
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005938:	430a      	orrs	r2, r1
 800593a:	4313      	orrs	r3, r2
 800593c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	3ffeffc0 	.word	0x3ffeffc0

08005954 <LL_ADC_IsCalibrationOnGoing>:
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005968:	d101      	bne.n	800596e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <LL_ADC_REG_IsConversionOngoing>:
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b04      	cmp	r3, #4
 800598e:	d101      	bne.n	8005994 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
	...

080059a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_ADCEx_Calibration_Start+0x1e>
 80059be:	2302      	movs	r3, #2
 80059c0:	e04c      	b.n	8005a5c <HAL_ADCEx_Calibration_Start+0xb8>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f7ff fd90 	bl	80054f0 <ADC_Disable>
 80059d0:	4603      	mov	r3, r0
 80059d2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d135      	bne.n	8005a46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059de:	4b21      	ldr	r3, [pc, #132]	@ (8005a64 <HAL_ADCEx_Calibration_Start+0xc0>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	f043 0202 	orr.w	r2, r3, #2
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff ff90 	bl	8005918 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80059f8:	e014      	b.n	8005a24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	3301      	adds	r3, #1
 80059fe:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	4a19      	ldr	r2, [pc, #100]	@ (8005a68 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d30d      	bcc.n	8005a24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0c:	f023 0312 	bic.w	r3, r3, #18
 8005a10:	f043 0210 	orr.w	r2, r3, #16
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e01b      	b.n	8005a5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff ff93 	bl	8005954 <LL_ADC_IsCalibrationOnGoing>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e2      	bne.n	80059fa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a38:	f023 0303 	bic.w	r3, r3, #3
 8005a3c:	f043 0201 	orr.w	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a44:	e005      	b.n	8005a52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4a:	f043 0210 	orr.w	r2, r3, #16
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	ffffeefd 	.word	0xffffeefd
 8005a68:	25c3f800 	.word	0x25c3f800

08005a6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005a6c:	b590      	push	{r4, r7, lr}
 8005a6e:	b09f      	sub	sp, #124	@ 0x7c
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e0be      	b.n	8005c08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005a92:	2300      	movs	r3, #0
 8005a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d102      	bne.n	8005aaa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8005c14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005aa6:	60bb      	str	r3, [r7, #8]
 8005aa8:	e001      	b.n	8005aae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10b      	bne.n	8005acc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab8:	f043 0220 	orr.w	r2, r3, #32
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e09d      	b.n	8005c08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff ff54 	bl	800597c <LL_ADC_REG_IsConversionOngoing>
 8005ad4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff ff4e 	bl	800597c <LL_ADC_REG_IsConversionOngoing>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d17f      	bne.n	8005be6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005ae6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d17c      	bne.n	8005be6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a47      	ldr	r2, [pc, #284]	@ (8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a46      	ldr	r2, [pc, #280]	@ (8005c14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d101      	bne.n	8005b04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005b00:	4b45      	ldr	r3, [pc, #276]	@ (8005c18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b02:	e000      	b.n	8005b06 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005b04:	4b45      	ldr	r3, [pc, #276]	@ (8005c1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b06:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d039      	beq.n	8005b84 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b20:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a3a      	ldr	r2, [pc, #232]	@ (8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a38      	ldr	r2, [pc, #224]	@ (8005c14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d10e      	bne.n	8005b54 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005b36:	4836      	ldr	r0, [pc, #216]	@ (8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b38:	f7ff feda 	bl	80058f0 <LL_ADC_IsEnabled>
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	4835      	ldr	r0, [pc, #212]	@ (8005c14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b40:	f7ff fed6 	bl	80058f0 <LL_ADC_IsEnabled>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4323      	orrs	r3, r4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	bf0c      	ite	eq
 8005b4c:	2301      	moveq	r3, #1
 8005b4e:	2300      	movne	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	e008      	b.n	8005b66 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005b54:	4832      	ldr	r0, [pc, #200]	@ (8005c20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005b56:	f7ff fecb 	bl	80058f0 <LL_ADC_IsEnabled>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bf0c      	ite	eq
 8005b60:	2301      	moveq	r3, #1
 8005b62:	2300      	movne	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d047      	beq.n	8005bfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	683a      	ldr	r2, [r7, #0]
 8005b74:	6811      	ldr	r1, [r2, #0]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	6892      	ldr	r2, [r2, #8]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b80:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b82:	e03a      	b.n	8005bfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1e      	ldr	r2, [pc, #120]	@ (8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8005c14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d10e      	bne.n	8005bc2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005ba4:	481a      	ldr	r0, [pc, #104]	@ (8005c10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005ba6:	f7ff fea3 	bl	80058f0 <LL_ADC_IsEnabled>
 8005baa:	4604      	mov	r4, r0
 8005bac:	4819      	ldr	r0, [pc, #100]	@ (8005c14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005bae:	f7ff fe9f 	bl	80058f0 <LL_ADC_IsEnabled>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4323      	orrs	r3, r4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bf0c      	ite	eq
 8005bba:	2301      	moveq	r3, #1
 8005bbc:	2300      	movne	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	e008      	b.n	8005bd4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005bc2:	4817      	ldr	r0, [pc, #92]	@ (8005c20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005bc4:	f7ff fe94 	bl	80058f0 <LL_ADC_IsEnabled>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bf0c      	ite	eq
 8005bce:	2301      	moveq	r3, #1
 8005bd0:	2300      	movne	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d010      	beq.n	8005bfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	4b11      	ldr	r3, [pc, #68]	@ (8005c24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005be2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005be4:	e009      	b.n	8005bfa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	f043 0220 	orr.w	r2, r3, #32
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8005bf8:	e000      	b.n	8005bfc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bfa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005c04:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	377c      	adds	r7, #124	@ 0x7c
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd90      	pop	{r4, r7, pc}
 8005c10:	40022000 	.word	0x40022000
 8005c14:	40022100 	.word	0x40022100
 8005c18:	40022300 	.word	0x40022300
 8005c1c:	58026300 	.word	0x58026300
 8005c20:	58026000 	.word	0x58026000
 8005c24:	fffff0e0 	.word	0xfffff0e0

08005c28 <__NVIC_SetPriorityGrouping>:
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c38:	4b0b      	ldr	r3, [pc, #44]	@ (8005c68 <__NVIC_SetPriorityGrouping+0x40>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c44:	4013      	ands	r3, r2
 8005c46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c50:	4b06      	ldr	r3, [pc, #24]	@ (8005c6c <__NVIC_SetPriorityGrouping+0x44>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c56:	4a04      	ldr	r2, [pc, #16]	@ (8005c68 <__NVIC_SetPriorityGrouping+0x40>)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	60d3      	str	r3, [r2, #12]
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	e000ed00 	.word	0xe000ed00
 8005c6c:	05fa0000 	.word	0x05fa0000

08005c70 <__NVIC_GetPriorityGrouping>:
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c74:	4b04      	ldr	r3, [pc, #16]	@ (8005c88 <__NVIC_GetPriorityGrouping+0x18>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	f003 0307 	and.w	r3, r3, #7
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	e000ed00 	.word	0xe000ed00

08005c8c <__NVIC_EnableIRQ>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	db0b      	blt.n	8005cb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	f003 021f 	and.w	r2, r3, #31
 8005ca4:	4907      	ldr	r1, [pc, #28]	@ (8005cc4 <__NVIC_EnableIRQ+0x38>)
 8005ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	2001      	movs	r0, #1
 8005cae:	fa00 f202 	lsl.w	r2, r0, r2
 8005cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	e000e100 	.word	0xe000e100

08005cc8 <__NVIC_SetPriority>:
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	6039      	str	r1, [r7, #0]
 8005cd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	db0a      	blt.n	8005cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	490c      	ldr	r1, [pc, #48]	@ (8005d14 <__NVIC_SetPriority+0x4c>)
 8005ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ce6:	0112      	lsls	r2, r2, #4
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	440b      	add	r3, r1
 8005cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005cf0:	e00a      	b.n	8005d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	4908      	ldr	r1, [pc, #32]	@ (8005d18 <__NVIC_SetPriority+0x50>)
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	3b04      	subs	r3, #4
 8005d00:	0112      	lsls	r2, r2, #4
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	440b      	add	r3, r1
 8005d06:	761a      	strb	r2, [r3, #24]
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	e000e100 	.word	0xe000e100
 8005d18:	e000ed00 	.word	0xe000ed00

08005d1c <NVIC_EncodePriority>:
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b089      	sub	sp, #36	@ 0x24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f1c3 0307 	rsb	r3, r3, #7
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	bf28      	it	cs
 8005d3a:	2304      	movcs	r3, #4
 8005d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	3304      	adds	r3, #4
 8005d42:	2b06      	cmp	r3, #6
 8005d44:	d902      	bls.n	8005d4c <NVIC_EncodePriority+0x30>
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	3b03      	subs	r3, #3
 8005d4a:	e000      	b.n	8005d4e <NVIC_EncodePriority+0x32>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	43da      	mvns	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	401a      	ands	r2, r3
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6e:	43d9      	mvns	r1, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d74:	4313      	orrs	r3, r2
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3724      	adds	r7, #36	@ 0x24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d94:	d301      	bcc.n	8005d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d96:	2301      	movs	r3, #1
 8005d98:	e00f      	b.n	8005dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005dc4 <SysTick_Config+0x40>)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005da2:	210f      	movs	r1, #15
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005da8:	f7ff ff8e 	bl	8005cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dac:	4b05      	ldr	r3, [pc, #20]	@ (8005dc4 <SysTick_Config+0x40>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005db2:	4b04      	ldr	r3, [pc, #16]	@ (8005dc4 <SysTick_Config+0x40>)
 8005db4:	2207      	movs	r2, #7
 8005db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	e000e010 	.word	0xe000e010

08005dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff ff29 	bl	8005c28 <__NVIC_SetPriorityGrouping>
}
 8005dd6:	bf00      	nop
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b086      	sub	sp, #24
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	4603      	mov	r3, r0
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607a      	str	r2, [r7, #4]
 8005dea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005dec:	f7ff ff40 	bl	8005c70 <__NVIC_GetPriorityGrouping>
 8005df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	68b9      	ldr	r1, [r7, #8]
 8005df6:	6978      	ldr	r0, [r7, #20]
 8005df8:	f7ff ff90 	bl	8005d1c <NVIC_EncodePriority>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e02:	4611      	mov	r1, r2
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff ff5f 	bl	8005cc8 <__NVIC_SetPriority>
}
 8005e0a:	bf00      	nop
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	4603      	mov	r3, r0
 8005e1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff ff33 	bl	8005c8c <__NVIC_EnableIRQ>
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff ffa4 	bl	8005d84 <SysTick_Config>
 8005e3c:	4603      	mov	r3, r0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005e4c:	f3bf 8f5f 	dmb	sy
}
 8005e50:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005e52:	4b07      	ldr	r3, [pc, #28]	@ (8005e70 <HAL_MPU_Disable+0x28>)
 8005e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e56:	4a06      	ldr	r2, [pc, #24]	@ (8005e70 <HAL_MPU_Disable+0x28>)
 8005e58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e5c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005e5e:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <HAL_MPU_Disable+0x2c>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	605a      	str	r2, [r3, #4]
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	e000ed00 	.word	0xe000ed00
 8005e74:	e000ed90 	.word	0xe000ed90

08005e78 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005e80:	4a0b      	ldr	r2, [pc, #44]	@ (8005eb0 <HAL_MPU_Enable+0x38>)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb4 <HAL_MPU_Enable+0x3c>)
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	4a09      	ldr	r2, [pc, #36]	@ (8005eb4 <HAL_MPU_Enable+0x3c>)
 8005e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e94:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005e96:	f3bf 8f4f 	dsb	sy
}
 8005e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e9c:	f3bf 8f6f 	isb	sy
}
 8005ea0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	e000ed90 	.word	0xe000ed90
 8005eb4:	e000ed00 	.word	0xe000ed00

08005eb8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	785a      	ldrb	r2, [r3, #1]
 8005ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f3c <HAL_MPU_ConfigRegion+0x84>)
 8005ec6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d029      	beq.n	8005f24 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8005f3c <HAL_MPU_ConfigRegion+0x84>)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	7b1b      	ldrb	r3, [r3, #12]
 8005edc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	7adb      	ldrb	r3, [r3, #11]
 8005ee2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ee4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	7a9b      	ldrb	r3, [r3, #10]
 8005eea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005eec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	7b5b      	ldrb	r3, [r3, #13]
 8005ef2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005ef4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	7b9b      	ldrb	r3, [r3, #14]
 8005efa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005efc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	7bdb      	ldrb	r3, [r3, #15]
 8005f02:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005f04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7a5b      	ldrb	r3, [r3, #9]
 8005f0a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005f0c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	7a1b      	ldrb	r3, [r3, #8]
 8005f12:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005f14:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f1c:	4a07      	ldr	r2, [pc, #28]	@ (8005f3c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005f1e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f20:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005f22:	e005      	b.n	8005f30 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8005f24:	4b05      	ldr	r3, [pc, #20]	@ (8005f3c <HAL_MPU_ConfigRegion+0x84>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8005f2a:	4b04      	ldr	r3, [pc, #16]	@ (8005f3c <HAL_MPU_ConfigRegion+0x84>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	611a      	str	r2, [r3, #16]
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	e000ed90 	.word	0xe000ed90

08005f40 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e014      	b.n	8005f7c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	791b      	ldrb	r3, [r3, #4]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d105      	bne.n	8005f68 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fb fa2c 	bl	80013c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	795b      	ldrb	r3, [r3, #5]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_DAC_ConfigChannel+0x18>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e12a      	b.n	80061f2 <HAL_DAC_ConfigChannel+0x26e>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	f040 8081 	bne.w	80060b4 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005fb2:	f7fd ff99 	bl	8003ee8 <HAL_GetTick>
 8005fb6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d140      	bne.n	8006040 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fbe:	e018      	b.n	8005ff2 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005fc0:	f7fd ff92 	bl	8003ee8 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d911      	bls.n	8005ff2 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fd4:	4b89      	ldr	r3, [pc, #548]	@ (80061fc <HAL_DAC_ConfigChannel+0x278>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f043 0208 	orr.w	r2, r3, #8
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2203      	movs	r2, #3
 8005fec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e0ff      	b.n	80061f2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ff8:	4b80      	ldr	r3, [pc, #512]	@ (80061fc <HAL_DAC_ConfigChannel+0x278>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1df      	bne.n	8005fc0 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8006000:	2001      	movs	r0, #1
 8006002:	f7fd ff7d 	bl	8003f00 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	6992      	ldr	r2, [r2, #24]
 800600e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006010:	e023      	b.n	800605a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006012:	f7fd ff69 	bl	8003ee8 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d90f      	bls.n	8006040 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006026:	2b00      	cmp	r3, #0
 8006028:	da0a      	bge.n	8006040 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f043 0208 	orr.w	r2, r3, #8
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2203      	movs	r2, #3
 800603a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e0d8      	b.n	80061f2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006046:	2b00      	cmp	r3, #0
 8006048:	dbe3      	blt.n	8006012 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 800604a:	2001      	movs	r0, #1
 800604c:	f7fd ff58 	bl	8003f00 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	6992      	ldr	r2, [r2, #24]
 8006058:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800606a:	fa01 f303 	lsl.w	r3, r1, r3
 800606e:	43db      	mvns	r3, r3
 8006070:	ea02 0103 	and.w	r1, r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f003 0310 	and.w	r3, r3, #16
 800607e:	409a      	lsls	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	21ff      	movs	r1, #255	@ 0xff
 8006096:	fa01 f303 	lsl.w	r3, r1, r3
 800609a:	43db      	mvns	r3, r3
 800609c:	ea02 0103 	and.w	r1, r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	6a1a      	ldr	r2, [r3, #32]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	409a      	lsls	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d11d      	bne.n	80060f8 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c2:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	221f      	movs	r2, #31
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	43db      	mvns	r3, r3
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4013      	ands	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060fe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f003 0310 	and.w	r3, r3, #16
 8006106:	2207      	movs	r2, #7
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4013      	ands	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d102      	bne.n	8006122 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 800611c:	2300      	movs	r3, #0
 800611e:	61fb      	str	r3, [r7, #28]
 8006120:	e00f      	b.n	8006142 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d102      	bne.n	8006130 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800612a:	2301      	movs	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	e008      	b.n	8006142 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006138:	2301      	movs	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	e001      	b.n	8006142 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800613e:	2300      	movs	r3, #0
 8006140:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	4313      	orrs	r3, r2
 800614c:	69fa      	ldr	r2, [r7, #28]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f003 0310 	and.w	r3, r3, #16
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6819      	ldr	r1, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	43da      	mvns	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	400a      	ands	r2, r1
 8006188:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800619c:	fa02 f303 	lsl.w	r3, r2, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4013      	ands	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6819      	ldr	r1, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	22c0      	movs	r2, #192	@ 0xc0
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	43da      	mvns	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	400a      	ands	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20008000 	.word	0x20008000

08006200 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006208:	f7fd fe6e 	bl	8003ee8 <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e316      	b.n	8006846 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a66      	ldr	r2, [pc, #408]	@ (80063b8 <HAL_DMA_Init+0x1b8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d04a      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a65      	ldr	r2, [pc, #404]	@ (80063bc <HAL_DMA_Init+0x1bc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d045      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a63      	ldr	r2, [pc, #396]	@ (80063c0 <HAL_DMA_Init+0x1c0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d040      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a62      	ldr	r2, [pc, #392]	@ (80063c4 <HAL_DMA_Init+0x1c4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d03b      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a60      	ldr	r2, [pc, #384]	@ (80063c8 <HAL_DMA_Init+0x1c8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d036      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a5f      	ldr	r2, [pc, #380]	@ (80063cc <HAL_DMA_Init+0x1cc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d031      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a5d      	ldr	r2, [pc, #372]	@ (80063d0 <HAL_DMA_Init+0x1d0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d02c      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a5c      	ldr	r2, [pc, #368]	@ (80063d4 <HAL_DMA_Init+0x1d4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d027      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a5a      	ldr	r2, [pc, #360]	@ (80063d8 <HAL_DMA_Init+0x1d8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d022      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a59      	ldr	r2, [pc, #356]	@ (80063dc <HAL_DMA_Init+0x1dc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d01d      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a57      	ldr	r2, [pc, #348]	@ (80063e0 <HAL_DMA_Init+0x1e0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d018      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a56      	ldr	r2, [pc, #344]	@ (80063e4 <HAL_DMA_Init+0x1e4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d013      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a54      	ldr	r2, [pc, #336]	@ (80063e8 <HAL_DMA_Init+0x1e8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00e      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a53      	ldr	r2, [pc, #332]	@ (80063ec <HAL_DMA_Init+0x1ec>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d009      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a51      	ldr	r2, [pc, #324]	@ (80063f0 <HAL_DMA_Init+0x1f0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d004      	beq.n	80062b8 <HAL_DMA_Init+0xb8>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a50      	ldr	r2, [pc, #320]	@ (80063f4 <HAL_DMA_Init+0x1f4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d101      	bne.n	80062bc <HAL_DMA_Init+0xbc>
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <HAL_DMA_Init+0xbe>
 80062bc:	2300      	movs	r3, #0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 813b 	beq.w	800653a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a37      	ldr	r2, [pc, #220]	@ (80063b8 <HAL_DMA_Init+0x1b8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d04a      	beq.n	8006374 <HAL_DMA_Init+0x174>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a36      	ldr	r2, [pc, #216]	@ (80063bc <HAL_DMA_Init+0x1bc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d045      	beq.n	8006374 <HAL_DMA_Init+0x174>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a34      	ldr	r2, [pc, #208]	@ (80063c0 <HAL_DMA_Init+0x1c0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d040      	beq.n	8006374 <HAL_DMA_Init+0x174>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a33      	ldr	r2, [pc, #204]	@ (80063c4 <HAL_DMA_Init+0x1c4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d03b      	beq.n	8006374 <HAL_DMA_Init+0x174>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a31      	ldr	r2, [pc, #196]	@ (80063c8 <HAL_DMA_Init+0x1c8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d036      	beq.n	8006374 <HAL_DMA_Init+0x174>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a30      	ldr	r2, [pc, #192]	@ (80063cc <HAL_DMA_Init+0x1cc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d031      	beq.n	8006374 <HAL_DMA_Init+0x174>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a2e      	ldr	r2, [pc, #184]	@ (80063d0 <HAL_DMA_Init+0x1d0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d02c      	beq.n	8006374 <HAL_DMA_Init+0x174>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2d      	ldr	r2, [pc, #180]	@ (80063d4 <HAL_DMA_Init+0x1d4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d027      	beq.n	8006374 <HAL_DMA_Init+0x174>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a2b      	ldr	r2, [pc, #172]	@ (80063d8 <HAL_DMA_Init+0x1d8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d022      	beq.n	8006374 <HAL_DMA_Init+0x174>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a2a      	ldr	r2, [pc, #168]	@ (80063dc <HAL_DMA_Init+0x1dc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d01d      	beq.n	8006374 <HAL_DMA_Init+0x174>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a28      	ldr	r2, [pc, #160]	@ (80063e0 <HAL_DMA_Init+0x1e0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d018      	beq.n	8006374 <HAL_DMA_Init+0x174>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a27      	ldr	r2, [pc, #156]	@ (80063e4 <HAL_DMA_Init+0x1e4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d013      	beq.n	8006374 <HAL_DMA_Init+0x174>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a25      	ldr	r2, [pc, #148]	@ (80063e8 <HAL_DMA_Init+0x1e8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00e      	beq.n	8006374 <HAL_DMA_Init+0x174>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a24      	ldr	r2, [pc, #144]	@ (80063ec <HAL_DMA_Init+0x1ec>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d009      	beq.n	8006374 <HAL_DMA_Init+0x174>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a22      	ldr	r2, [pc, #136]	@ (80063f0 <HAL_DMA_Init+0x1f0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d004      	beq.n	8006374 <HAL_DMA_Init+0x174>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	@ (80063f4 <HAL_DMA_Init+0x1f4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d108      	bne.n	8006386 <HAL_DMA_Init+0x186>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0201 	bic.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	e007      	b.n	8006396 <HAL_DMA_Init+0x196>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0201 	bic.w	r2, r2, #1
 8006394:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006396:	e02f      	b.n	80063f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006398:	f7fd fda6 	bl	8003ee8 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	d928      	bls.n	80063f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2203      	movs	r2, #3
 80063b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e246      	b.n	8006846 <HAL_DMA_Init+0x646>
 80063b8:	40020010 	.word	0x40020010
 80063bc:	40020028 	.word	0x40020028
 80063c0:	40020040 	.word	0x40020040
 80063c4:	40020058 	.word	0x40020058
 80063c8:	40020070 	.word	0x40020070
 80063cc:	40020088 	.word	0x40020088
 80063d0:	400200a0 	.word	0x400200a0
 80063d4:	400200b8 	.word	0x400200b8
 80063d8:	40020410 	.word	0x40020410
 80063dc:	40020428 	.word	0x40020428
 80063e0:	40020440 	.word	0x40020440
 80063e4:	40020458 	.word	0x40020458
 80063e8:	40020470 	.word	0x40020470
 80063ec:	40020488 	.word	0x40020488
 80063f0:	400204a0 	.word	0x400204a0
 80063f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1c8      	bne.n	8006398 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4b83      	ldr	r3, [pc, #524]	@ (8006620 <HAL_DMA_Init+0x420>)
 8006412:	4013      	ands	r3, r2
 8006414:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800641e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800642a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006436:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	2b04      	cmp	r3, #4
 800644a:	d107      	bne.n	800645c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006454:	4313      	orrs	r3, r2
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800645c:	4b71      	ldr	r3, [pc, #452]	@ (8006624 <HAL_DMA_Init+0x424>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	4b71      	ldr	r3, [pc, #452]	@ (8006628 <HAL_DMA_Init+0x428>)
 8006462:	4013      	ands	r3, r2
 8006464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006468:	d328      	bcc.n	80064bc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b28      	cmp	r3, #40	@ 0x28
 8006470:	d903      	bls.n	800647a <HAL_DMA_Init+0x27a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b2e      	cmp	r3, #46	@ 0x2e
 8006478:	d917      	bls.n	80064aa <HAL_DMA_Init+0x2aa>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006480:	d903      	bls.n	800648a <HAL_DMA_Init+0x28a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b42      	cmp	r3, #66	@ 0x42
 8006488:	d90f      	bls.n	80064aa <HAL_DMA_Init+0x2aa>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b46      	cmp	r3, #70	@ 0x46
 8006490:	d903      	bls.n	800649a <HAL_DMA_Init+0x29a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b48      	cmp	r3, #72	@ 0x48
 8006498:	d907      	bls.n	80064aa <HAL_DMA_Init+0x2aa>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b4e      	cmp	r3, #78	@ 0x4e
 80064a0:	d905      	bls.n	80064ae <HAL_DMA_Init+0x2ae>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2b52      	cmp	r3, #82	@ 0x52
 80064a8:	d801      	bhi.n	80064ae <HAL_DMA_Init+0x2ae>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <HAL_DMA_Init+0x2b0>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064ba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0307 	bic.w	r3, r3, #7
 80064d2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	d117      	bne.n	8006516 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00e      	beq.n	8006516 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f002 fce9 	bl	8008ed0 <DMA_CheckFifoParam>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d008      	beq.n	8006516 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2240      	movs	r2, #64	@ 0x40
 8006508:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e197      	b.n	8006846 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f002 fc24 	bl	8008d6c <DMA_CalcBaseAndBitshift>
 8006524:	4603      	mov	r3, r0
 8006526:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800652c:	f003 031f 	and.w	r3, r3, #31
 8006530:	223f      	movs	r2, #63	@ 0x3f
 8006532:	409a      	lsls	r2, r3
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	609a      	str	r2, [r3, #8]
 8006538:	e0cd      	b.n	80066d6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a3b      	ldr	r2, [pc, #236]	@ (800662c <HAL_DMA_Init+0x42c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d022      	beq.n	800658a <HAL_DMA_Init+0x38a>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a39      	ldr	r2, [pc, #228]	@ (8006630 <HAL_DMA_Init+0x430>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01d      	beq.n	800658a <HAL_DMA_Init+0x38a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a38      	ldr	r2, [pc, #224]	@ (8006634 <HAL_DMA_Init+0x434>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d018      	beq.n	800658a <HAL_DMA_Init+0x38a>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a36      	ldr	r2, [pc, #216]	@ (8006638 <HAL_DMA_Init+0x438>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <HAL_DMA_Init+0x38a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a35      	ldr	r2, [pc, #212]	@ (800663c <HAL_DMA_Init+0x43c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00e      	beq.n	800658a <HAL_DMA_Init+0x38a>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a33      	ldr	r2, [pc, #204]	@ (8006640 <HAL_DMA_Init+0x440>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_DMA_Init+0x38a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a32      	ldr	r2, [pc, #200]	@ (8006644 <HAL_DMA_Init+0x444>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_DMA_Init+0x38a>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a30      	ldr	r2, [pc, #192]	@ (8006648 <HAL_DMA_Init+0x448>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d101      	bne.n	800658e <HAL_DMA_Init+0x38e>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <HAL_DMA_Init+0x390>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 8097 	beq.w	80066c4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a24      	ldr	r2, [pc, #144]	@ (800662c <HAL_DMA_Init+0x42c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d021      	beq.n	80065e4 <HAL_DMA_Init+0x3e4>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a22      	ldr	r2, [pc, #136]	@ (8006630 <HAL_DMA_Init+0x430>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d01c      	beq.n	80065e4 <HAL_DMA_Init+0x3e4>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a21      	ldr	r2, [pc, #132]	@ (8006634 <HAL_DMA_Init+0x434>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d017      	beq.n	80065e4 <HAL_DMA_Init+0x3e4>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006638 <HAL_DMA_Init+0x438>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d012      	beq.n	80065e4 <HAL_DMA_Init+0x3e4>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1e      	ldr	r2, [pc, #120]	@ (800663c <HAL_DMA_Init+0x43c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00d      	beq.n	80065e4 <HAL_DMA_Init+0x3e4>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006640 <HAL_DMA_Init+0x440>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d008      	beq.n	80065e4 <HAL_DMA_Init+0x3e4>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006644 <HAL_DMA_Init+0x444>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <HAL_DMA_Init+0x3e4>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a19      	ldr	r2, [pc, #100]	@ (8006648 <HAL_DMA_Init+0x448>)
 80065e2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4b13      	ldr	r3, [pc, #76]	@ (800664c <HAL_DMA_Init+0x44c>)
 8006600:	4013      	ands	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2b40      	cmp	r3, #64	@ 0x40
 800660a:	d021      	beq.n	8006650 <HAL_DMA_Init+0x450>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b80      	cmp	r3, #128	@ 0x80
 8006612:	d102      	bne.n	800661a <HAL_DMA_Init+0x41a>
 8006614:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006618:	e01b      	b.n	8006652 <HAL_DMA_Init+0x452>
 800661a:	2300      	movs	r3, #0
 800661c:	e019      	b.n	8006652 <HAL_DMA_Init+0x452>
 800661e:	bf00      	nop
 8006620:	fe10803f 	.word	0xfe10803f
 8006624:	5c001000 	.word	0x5c001000
 8006628:	ffff0000 	.word	0xffff0000
 800662c:	58025408 	.word	0x58025408
 8006630:	5802541c 	.word	0x5802541c
 8006634:	58025430 	.word	0x58025430
 8006638:	58025444 	.word	0x58025444
 800663c:	58025458 	.word	0x58025458
 8006640:	5802546c 	.word	0x5802546c
 8006644:	58025480 	.word	0x58025480
 8006648:	58025494 	.word	0x58025494
 800664c:	fffe000f 	.word	0xfffe000f
 8006650:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68d2      	ldr	r2, [r2, #12]
 8006656:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006660:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006668:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006670:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006678:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006680:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	4b6e      	ldr	r3, [pc, #440]	@ (8006850 <HAL_DMA_Init+0x650>)
 8006698:	4413      	add	r3, r2
 800669a:	4a6e      	ldr	r2, [pc, #440]	@ (8006854 <HAL_DMA_Init+0x654>)
 800669c:	fba2 2303 	umull	r2, r3, r2, r3
 80066a0:	091b      	lsrs	r3, r3, #4
 80066a2:	009a      	lsls	r2, r3, #2
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f002 fb5f 	bl	8008d6c <DMA_CalcBaseAndBitshift>
 80066ae:	4603      	mov	r3, r0
 80066b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b6:	f003 031f 	and.w	r3, r3, #31
 80066ba:	2201      	movs	r2, #1
 80066bc:	409a      	lsls	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	605a      	str	r2, [r3, #4]
 80066c2:	e008      	b.n	80066d6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2240      	movs	r2, #64	@ 0x40
 80066c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2203      	movs	r2, #3
 80066ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e0b7      	b.n	8006846 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a5f      	ldr	r2, [pc, #380]	@ (8006858 <HAL_DMA_Init+0x658>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d072      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a5d      	ldr	r2, [pc, #372]	@ (800685c <HAL_DMA_Init+0x65c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d06d      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a5c      	ldr	r2, [pc, #368]	@ (8006860 <HAL_DMA_Init+0x660>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d068      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006864 <HAL_DMA_Init+0x664>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d063      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a59      	ldr	r2, [pc, #356]	@ (8006868 <HAL_DMA_Init+0x668>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d05e      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a57      	ldr	r2, [pc, #348]	@ (800686c <HAL_DMA_Init+0x66c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d059      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a56      	ldr	r2, [pc, #344]	@ (8006870 <HAL_DMA_Init+0x670>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d054      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a54      	ldr	r2, [pc, #336]	@ (8006874 <HAL_DMA_Init+0x674>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d04f      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a53      	ldr	r2, [pc, #332]	@ (8006878 <HAL_DMA_Init+0x678>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d04a      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a51      	ldr	r2, [pc, #324]	@ (800687c <HAL_DMA_Init+0x67c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d045      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a50      	ldr	r2, [pc, #320]	@ (8006880 <HAL_DMA_Init+0x680>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d040      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a4e      	ldr	r2, [pc, #312]	@ (8006884 <HAL_DMA_Init+0x684>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d03b      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a4d      	ldr	r2, [pc, #308]	@ (8006888 <HAL_DMA_Init+0x688>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d036      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a4b      	ldr	r2, [pc, #300]	@ (800688c <HAL_DMA_Init+0x68c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d031      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a4a      	ldr	r2, [pc, #296]	@ (8006890 <HAL_DMA_Init+0x690>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d02c      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a48      	ldr	r2, [pc, #288]	@ (8006894 <HAL_DMA_Init+0x694>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d027      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a47      	ldr	r2, [pc, #284]	@ (8006898 <HAL_DMA_Init+0x698>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d022      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a45      	ldr	r2, [pc, #276]	@ (800689c <HAL_DMA_Init+0x69c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d01d      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a44      	ldr	r2, [pc, #272]	@ (80068a0 <HAL_DMA_Init+0x6a0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d018      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a42      	ldr	r2, [pc, #264]	@ (80068a4 <HAL_DMA_Init+0x6a4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a41      	ldr	r2, [pc, #260]	@ (80068a8 <HAL_DMA_Init+0x6a8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00e      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a3f      	ldr	r2, [pc, #252]	@ (80068ac <HAL_DMA_Init+0x6ac>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d009      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a3e      	ldr	r2, [pc, #248]	@ (80068b0 <HAL_DMA_Init+0x6b0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d004      	beq.n	80067c6 <HAL_DMA_Init+0x5c6>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a3c      	ldr	r2, [pc, #240]	@ (80068b4 <HAL_DMA_Init+0x6b4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d101      	bne.n	80067ca <HAL_DMA_Init+0x5ca>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e000      	b.n	80067cc <HAL_DMA_Init+0x5cc>
 80067ca:	2300      	movs	r3, #0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d032      	beq.n	8006836 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f002 fbf9 	bl	8008fc8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b80      	cmp	r3, #128	@ 0x80
 80067dc:	d102      	bne.n	80067e4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80067f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d010      	beq.n	8006824 <HAL_DMA_Init+0x624>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b08      	cmp	r3, #8
 8006808:	d80c      	bhi.n	8006824 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f002 fc76 	bl	80090fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006820:	605a      	str	r2, [r3, #4]
 8006822:	e008      	b.n	8006836 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	a7fdabf8 	.word	0xa7fdabf8
 8006854:	cccccccd 	.word	0xcccccccd
 8006858:	40020010 	.word	0x40020010
 800685c:	40020028 	.word	0x40020028
 8006860:	40020040 	.word	0x40020040
 8006864:	40020058 	.word	0x40020058
 8006868:	40020070 	.word	0x40020070
 800686c:	40020088 	.word	0x40020088
 8006870:	400200a0 	.word	0x400200a0
 8006874:	400200b8 	.word	0x400200b8
 8006878:	40020410 	.word	0x40020410
 800687c:	40020428 	.word	0x40020428
 8006880:	40020440 	.word	0x40020440
 8006884:	40020458 	.word	0x40020458
 8006888:	40020470 	.word	0x40020470
 800688c:	40020488 	.word	0x40020488
 8006890:	400204a0 	.word	0x400204a0
 8006894:	400204b8 	.word	0x400204b8
 8006898:	58025408 	.word	0x58025408
 800689c:	5802541c 	.word	0x5802541c
 80068a0:	58025430 	.word	0x58025430
 80068a4:	58025444 	.word	0x58025444
 80068a8:	58025458 	.word	0x58025458
 80068ac:	5802546c 	.word	0x5802546c
 80068b0:	58025480 	.word	0x58025480
 80068b4:	58025494 	.word	0x58025494

080068b8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e1a8      	b.n	8006c1c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a82      	ldr	r2, [pc, #520]	@ (8006ad8 <HAL_DMA_DeInit+0x220>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d04a      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a80      	ldr	r2, [pc, #512]	@ (8006adc <HAL_DMA_DeInit+0x224>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d045      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a7f      	ldr	r2, [pc, #508]	@ (8006ae0 <HAL_DMA_DeInit+0x228>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d040      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a7d      	ldr	r2, [pc, #500]	@ (8006ae4 <HAL_DMA_DeInit+0x22c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d03b      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a7c      	ldr	r2, [pc, #496]	@ (8006ae8 <HAL_DMA_DeInit+0x230>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d036      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a7a      	ldr	r2, [pc, #488]	@ (8006aec <HAL_DMA_DeInit+0x234>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d031      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a79      	ldr	r2, [pc, #484]	@ (8006af0 <HAL_DMA_DeInit+0x238>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d02c      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a77      	ldr	r2, [pc, #476]	@ (8006af4 <HAL_DMA_DeInit+0x23c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d027      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a76      	ldr	r2, [pc, #472]	@ (8006af8 <HAL_DMA_DeInit+0x240>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d022      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a74      	ldr	r2, [pc, #464]	@ (8006afc <HAL_DMA_DeInit+0x244>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d01d      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a73      	ldr	r2, [pc, #460]	@ (8006b00 <HAL_DMA_DeInit+0x248>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d018      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a71      	ldr	r2, [pc, #452]	@ (8006b04 <HAL_DMA_DeInit+0x24c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a70      	ldr	r2, [pc, #448]	@ (8006b08 <HAL_DMA_DeInit+0x250>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00e      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a6e      	ldr	r2, [pc, #440]	@ (8006b0c <HAL_DMA_DeInit+0x254>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d009      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a6d      	ldr	r2, [pc, #436]	@ (8006b10 <HAL_DMA_DeInit+0x258>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d004      	beq.n	800696a <HAL_DMA_DeInit+0xb2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a6b      	ldr	r2, [pc, #428]	@ (8006b14 <HAL_DMA_DeInit+0x25c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d108      	bne.n	800697c <HAL_DMA_DeInit+0xc4>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e007      	b.n	800698c <HAL_DMA_DeInit+0xd4>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0201 	bic.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a51      	ldr	r2, [pc, #324]	@ (8006ad8 <HAL_DMA_DeInit+0x220>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d04a      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a50      	ldr	r2, [pc, #320]	@ (8006adc <HAL_DMA_DeInit+0x224>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d045      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a4e      	ldr	r2, [pc, #312]	@ (8006ae0 <HAL_DMA_DeInit+0x228>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d040      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a4d      	ldr	r2, [pc, #308]	@ (8006ae4 <HAL_DMA_DeInit+0x22c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d03b      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a4b      	ldr	r2, [pc, #300]	@ (8006ae8 <HAL_DMA_DeInit+0x230>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d036      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a4a      	ldr	r2, [pc, #296]	@ (8006aec <HAL_DMA_DeInit+0x234>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d031      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a48      	ldr	r2, [pc, #288]	@ (8006af0 <HAL_DMA_DeInit+0x238>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d02c      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a47      	ldr	r2, [pc, #284]	@ (8006af4 <HAL_DMA_DeInit+0x23c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d027      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a45      	ldr	r2, [pc, #276]	@ (8006af8 <HAL_DMA_DeInit+0x240>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d022      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a44      	ldr	r2, [pc, #272]	@ (8006afc <HAL_DMA_DeInit+0x244>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d01d      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a42      	ldr	r2, [pc, #264]	@ (8006b00 <HAL_DMA_DeInit+0x248>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d018      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a41      	ldr	r2, [pc, #260]	@ (8006b04 <HAL_DMA_DeInit+0x24c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d013      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a3f      	ldr	r2, [pc, #252]	@ (8006b08 <HAL_DMA_DeInit+0x250>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00e      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a3e      	ldr	r2, [pc, #248]	@ (8006b0c <HAL_DMA_DeInit+0x254>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d009      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a3c      	ldr	r2, [pc, #240]	@ (8006b10 <HAL_DMA_DeInit+0x258>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_DMA_DeInit+0x174>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a3b      	ldr	r2, [pc, #236]	@ (8006b14 <HAL_DMA_DeInit+0x25c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d101      	bne.n	8006a30 <HAL_DMA_DeInit+0x178>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e000      	b.n	8006a32 <HAL_DMA_DeInit+0x17a>
 8006a30:	2300      	movs	r3, #0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d025      	beq.n	8006a82 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2200      	movs	r2, #0
 8006a44:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2200      	movs	r2, #0
 8006a54:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2221      	movs	r2, #33	@ 0x21
 8006a64:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f002 f980 	bl	8008d6c <DMA_CalcBaseAndBitshift>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	223f      	movs	r2, #63	@ 0x3f
 8006a7a:	409a      	lsls	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	609a      	str	r2, [r3, #8]
 8006a80:	e081      	b.n	8006b86 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a24      	ldr	r2, [pc, #144]	@ (8006b18 <HAL_DMA_DeInit+0x260>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d022      	beq.n	8006ad2 <HAL_DMA_DeInit+0x21a>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a22      	ldr	r2, [pc, #136]	@ (8006b1c <HAL_DMA_DeInit+0x264>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d01d      	beq.n	8006ad2 <HAL_DMA_DeInit+0x21a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a21      	ldr	r2, [pc, #132]	@ (8006b20 <HAL_DMA_DeInit+0x268>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d018      	beq.n	8006ad2 <HAL_DMA_DeInit+0x21a>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b24 <HAL_DMA_DeInit+0x26c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <HAL_DMA_DeInit+0x21a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1e      	ldr	r2, [pc, #120]	@ (8006b28 <HAL_DMA_DeInit+0x270>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00e      	beq.n	8006ad2 <HAL_DMA_DeInit+0x21a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8006b2c <HAL_DMA_DeInit+0x274>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d009      	beq.n	8006ad2 <HAL_DMA_DeInit+0x21a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b30 <HAL_DMA_DeInit+0x278>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d004      	beq.n	8006ad2 <HAL_DMA_DeInit+0x21a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a19      	ldr	r2, [pc, #100]	@ (8006b34 <HAL_DMA_DeInit+0x27c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d132      	bne.n	8006b38 <HAL_DMA_DeInit+0x280>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e031      	b.n	8006b3a <HAL_DMA_DeInit+0x282>
 8006ad6:	bf00      	nop
 8006ad8:	40020010 	.word	0x40020010
 8006adc:	40020028 	.word	0x40020028
 8006ae0:	40020040 	.word	0x40020040
 8006ae4:	40020058 	.word	0x40020058
 8006ae8:	40020070 	.word	0x40020070
 8006aec:	40020088 	.word	0x40020088
 8006af0:	400200a0 	.word	0x400200a0
 8006af4:	400200b8 	.word	0x400200b8
 8006af8:	40020410 	.word	0x40020410
 8006afc:	40020428 	.word	0x40020428
 8006b00:	40020440 	.word	0x40020440
 8006b04:	40020458 	.word	0x40020458
 8006b08:	40020470 	.word	0x40020470
 8006b0c:	40020488 	.word	0x40020488
 8006b10:	400204a0 	.word	0x400204a0
 8006b14:	400204b8 	.word	0x400204b8
 8006b18:	58025408 	.word	0x58025408
 8006b1c:	5802541c 	.word	0x5802541c
 8006b20:	58025430 	.word	0x58025430
 8006b24:	58025444 	.word	0x58025444
 8006b28:	58025458 	.word	0x58025458
 8006b2c:	5802546c 	.word	0x5802546c
 8006b30:	58025480 	.word	0x58025480
 8006b34:	58025494 	.word	0x58025494
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d021      	beq.n	8006b82 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2200      	movs	r2, #0
 8006b54:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2200      	movs	r2, #0
 8006b64:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f002 f900 	bl	8008d6c <DMA_CalcBaseAndBitshift>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	2201      	movs	r2, #1
 8006b7a:	409a      	lsls	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	605a      	str	r2, [r3, #4]
 8006b80:	e001      	b.n	8006b86 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e04a      	b.n	8006c1c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f002 fa1e 	bl	8008fc8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d008      	beq.n	8006ba6 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006ba4:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00f      	beq.n	8006bce <HAL_DMA_DeInit+0x316>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b08      	cmp	r3, #8
 8006bb4:	d80b      	bhi.n	8006bce <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f002 faa0 	bl	80090fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006bcc:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e226      	b.n	800708e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_DMA_Start_IT+0x2a>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e21f      	b.n	800708e <HAL_DMA_Start_IT+0x46a>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	f040 820a 	bne.w	8007078 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a68      	ldr	r2, [pc, #416]	@ (8006e18 <HAL_DMA_Start_IT+0x1f4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d04a      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a66      	ldr	r2, [pc, #408]	@ (8006e1c <HAL_DMA_Start_IT+0x1f8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d045      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a65      	ldr	r2, [pc, #404]	@ (8006e20 <HAL_DMA_Start_IT+0x1fc>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d040      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a63      	ldr	r2, [pc, #396]	@ (8006e24 <HAL_DMA_Start_IT+0x200>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d03b      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a62      	ldr	r2, [pc, #392]	@ (8006e28 <HAL_DMA_Start_IT+0x204>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d036      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a60      	ldr	r2, [pc, #384]	@ (8006e2c <HAL_DMA_Start_IT+0x208>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d031      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a5f      	ldr	r2, [pc, #380]	@ (8006e30 <HAL_DMA_Start_IT+0x20c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d02c      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a5d      	ldr	r2, [pc, #372]	@ (8006e34 <HAL_DMA_Start_IT+0x210>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d027      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a5c      	ldr	r2, [pc, #368]	@ (8006e38 <HAL_DMA_Start_IT+0x214>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d022      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a5a      	ldr	r2, [pc, #360]	@ (8006e3c <HAL_DMA_Start_IT+0x218>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d01d      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a59      	ldr	r2, [pc, #356]	@ (8006e40 <HAL_DMA_Start_IT+0x21c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d018      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a57      	ldr	r2, [pc, #348]	@ (8006e44 <HAL_DMA_Start_IT+0x220>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d013      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a56      	ldr	r2, [pc, #344]	@ (8006e48 <HAL_DMA_Start_IT+0x224>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00e      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a54      	ldr	r2, [pc, #336]	@ (8006e4c <HAL_DMA_Start_IT+0x228>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d009      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a53      	ldr	r2, [pc, #332]	@ (8006e50 <HAL_DMA_Start_IT+0x22c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d004      	beq.n	8006d12 <HAL_DMA_Start_IT+0xee>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a51      	ldr	r2, [pc, #324]	@ (8006e54 <HAL_DMA_Start_IT+0x230>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d108      	bne.n	8006d24 <HAL_DMA_Start_IT+0x100>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0201 	bic.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e007      	b.n	8006d34 <HAL_DMA_Start_IT+0x110>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0201 	bic.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f001 fe6a 	bl	8008a14 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a34      	ldr	r2, [pc, #208]	@ (8006e18 <HAL_DMA_Start_IT+0x1f4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d04a      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a33      	ldr	r2, [pc, #204]	@ (8006e1c <HAL_DMA_Start_IT+0x1f8>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d045      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a31      	ldr	r2, [pc, #196]	@ (8006e20 <HAL_DMA_Start_IT+0x1fc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d040      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a30      	ldr	r2, [pc, #192]	@ (8006e24 <HAL_DMA_Start_IT+0x200>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d03b      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a2e      	ldr	r2, [pc, #184]	@ (8006e28 <HAL_DMA_Start_IT+0x204>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d036      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a2d      	ldr	r2, [pc, #180]	@ (8006e2c <HAL_DMA_Start_IT+0x208>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d031      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a2b      	ldr	r2, [pc, #172]	@ (8006e30 <HAL_DMA_Start_IT+0x20c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d02c      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8006e34 <HAL_DMA_Start_IT+0x210>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d027      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a28      	ldr	r2, [pc, #160]	@ (8006e38 <HAL_DMA_Start_IT+0x214>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d022      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a27      	ldr	r2, [pc, #156]	@ (8006e3c <HAL_DMA_Start_IT+0x218>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d01d      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a25      	ldr	r2, [pc, #148]	@ (8006e40 <HAL_DMA_Start_IT+0x21c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d018      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a24      	ldr	r2, [pc, #144]	@ (8006e44 <HAL_DMA_Start_IT+0x220>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d013      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a22      	ldr	r2, [pc, #136]	@ (8006e48 <HAL_DMA_Start_IT+0x224>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00e      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a21      	ldr	r2, [pc, #132]	@ (8006e4c <HAL_DMA_Start_IT+0x228>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d009      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8006e50 <HAL_DMA_Start_IT+0x22c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <HAL_DMA_Start_IT+0x1bc>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a1e      	ldr	r2, [pc, #120]	@ (8006e54 <HAL_DMA_Start_IT+0x230>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d101      	bne.n	8006de4 <HAL_DMA_Start_IT+0x1c0>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <HAL_DMA_Start_IT+0x1c2>
 8006de4:	2300      	movs	r3, #0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d036      	beq.n	8006e58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f023 021e 	bic.w	r2, r3, #30
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0216 	orr.w	r2, r2, #22
 8006dfc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d03e      	beq.n	8006e84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0208 	orr.w	r2, r2, #8
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e035      	b.n	8006e84 <HAL_DMA_Start_IT+0x260>
 8006e18:	40020010 	.word	0x40020010
 8006e1c:	40020028 	.word	0x40020028
 8006e20:	40020040 	.word	0x40020040
 8006e24:	40020058 	.word	0x40020058
 8006e28:	40020070 	.word	0x40020070
 8006e2c:	40020088 	.word	0x40020088
 8006e30:	400200a0 	.word	0x400200a0
 8006e34:	400200b8 	.word	0x400200b8
 8006e38:	40020410 	.word	0x40020410
 8006e3c:	40020428 	.word	0x40020428
 8006e40:	40020440 	.word	0x40020440
 8006e44:	40020458 	.word	0x40020458
 8006e48:	40020470 	.word	0x40020470
 8006e4c:	40020488 	.word	0x40020488
 8006e50:	400204a0 	.word	0x400204a0
 8006e54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f023 020e 	bic.w	r2, r3, #14
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 020a 	orr.w	r2, r2, #10
 8006e6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0204 	orr.w	r2, r2, #4
 8006e82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a83      	ldr	r2, [pc, #524]	@ (8007098 <HAL_DMA_Start_IT+0x474>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d072      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a82      	ldr	r2, [pc, #520]	@ (800709c <HAL_DMA_Start_IT+0x478>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d06d      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a80      	ldr	r2, [pc, #512]	@ (80070a0 <HAL_DMA_Start_IT+0x47c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d068      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a7f      	ldr	r2, [pc, #508]	@ (80070a4 <HAL_DMA_Start_IT+0x480>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d063      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a7d      	ldr	r2, [pc, #500]	@ (80070a8 <HAL_DMA_Start_IT+0x484>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d05e      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a7c      	ldr	r2, [pc, #496]	@ (80070ac <HAL_DMA_Start_IT+0x488>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d059      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a7a      	ldr	r2, [pc, #488]	@ (80070b0 <HAL_DMA_Start_IT+0x48c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d054      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a79      	ldr	r2, [pc, #484]	@ (80070b4 <HAL_DMA_Start_IT+0x490>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d04f      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a77      	ldr	r2, [pc, #476]	@ (80070b8 <HAL_DMA_Start_IT+0x494>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d04a      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a76      	ldr	r2, [pc, #472]	@ (80070bc <HAL_DMA_Start_IT+0x498>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d045      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a74      	ldr	r2, [pc, #464]	@ (80070c0 <HAL_DMA_Start_IT+0x49c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d040      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a73      	ldr	r2, [pc, #460]	@ (80070c4 <HAL_DMA_Start_IT+0x4a0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d03b      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a71      	ldr	r2, [pc, #452]	@ (80070c8 <HAL_DMA_Start_IT+0x4a4>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d036      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a70      	ldr	r2, [pc, #448]	@ (80070cc <HAL_DMA_Start_IT+0x4a8>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d031      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a6e      	ldr	r2, [pc, #440]	@ (80070d0 <HAL_DMA_Start_IT+0x4ac>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d02c      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a6d      	ldr	r2, [pc, #436]	@ (80070d4 <HAL_DMA_Start_IT+0x4b0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d027      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a6b      	ldr	r2, [pc, #428]	@ (80070d8 <HAL_DMA_Start_IT+0x4b4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d022      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a6a      	ldr	r2, [pc, #424]	@ (80070dc <HAL_DMA_Start_IT+0x4b8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d01d      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a68      	ldr	r2, [pc, #416]	@ (80070e0 <HAL_DMA_Start_IT+0x4bc>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d018      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a67      	ldr	r2, [pc, #412]	@ (80070e4 <HAL_DMA_Start_IT+0x4c0>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d013      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a65      	ldr	r2, [pc, #404]	@ (80070e8 <HAL_DMA_Start_IT+0x4c4>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00e      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a64      	ldr	r2, [pc, #400]	@ (80070ec <HAL_DMA_Start_IT+0x4c8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d009      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a62      	ldr	r2, [pc, #392]	@ (80070f0 <HAL_DMA_Start_IT+0x4cc>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d004      	beq.n	8006f74 <HAL_DMA_Start_IT+0x350>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a61      	ldr	r2, [pc, #388]	@ (80070f4 <HAL_DMA_Start_IT+0x4d0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d101      	bne.n	8006f78 <HAL_DMA_Start_IT+0x354>
 8006f74:	2301      	movs	r3, #1
 8006f76:	e000      	b.n	8006f7a <HAL_DMA_Start_IT+0x356>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01a      	beq.n	8006fb4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fb2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a37      	ldr	r2, [pc, #220]	@ (8007098 <HAL_DMA_Start_IT+0x474>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d04a      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a36      	ldr	r2, [pc, #216]	@ (800709c <HAL_DMA_Start_IT+0x478>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d045      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a34      	ldr	r2, [pc, #208]	@ (80070a0 <HAL_DMA_Start_IT+0x47c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d040      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a33      	ldr	r2, [pc, #204]	@ (80070a4 <HAL_DMA_Start_IT+0x480>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d03b      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a31      	ldr	r2, [pc, #196]	@ (80070a8 <HAL_DMA_Start_IT+0x484>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d036      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a30      	ldr	r2, [pc, #192]	@ (80070ac <HAL_DMA_Start_IT+0x488>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d031      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80070b0 <HAL_DMA_Start_IT+0x48c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d02c      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a2d      	ldr	r2, [pc, #180]	@ (80070b4 <HAL_DMA_Start_IT+0x490>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d027      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a2b      	ldr	r2, [pc, #172]	@ (80070b8 <HAL_DMA_Start_IT+0x494>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d022      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a2a      	ldr	r2, [pc, #168]	@ (80070bc <HAL_DMA_Start_IT+0x498>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d01d      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a28      	ldr	r2, [pc, #160]	@ (80070c0 <HAL_DMA_Start_IT+0x49c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d018      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a27      	ldr	r2, [pc, #156]	@ (80070c4 <HAL_DMA_Start_IT+0x4a0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d013      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a25      	ldr	r2, [pc, #148]	@ (80070c8 <HAL_DMA_Start_IT+0x4a4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00e      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a24      	ldr	r2, [pc, #144]	@ (80070cc <HAL_DMA_Start_IT+0x4a8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d009      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a22      	ldr	r2, [pc, #136]	@ (80070d0 <HAL_DMA_Start_IT+0x4ac>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_DMA_Start_IT+0x430>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a21      	ldr	r2, [pc, #132]	@ (80070d4 <HAL_DMA_Start_IT+0x4b0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d108      	bne.n	8007066 <HAL_DMA_Start_IT+0x442>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0201 	orr.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	e012      	b.n	800708c <HAL_DMA_Start_IT+0x468>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0201 	orr.w	r2, r2, #1
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e009      	b.n	800708c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800707e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800708c:	7dfb      	ldrb	r3, [r7, #23]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3718      	adds	r7, #24
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	40020010 	.word	0x40020010
 800709c:	40020028 	.word	0x40020028
 80070a0:	40020040 	.word	0x40020040
 80070a4:	40020058 	.word	0x40020058
 80070a8:	40020070 	.word	0x40020070
 80070ac:	40020088 	.word	0x40020088
 80070b0:	400200a0 	.word	0x400200a0
 80070b4:	400200b8 	.word	0x400200b8
 80070b8:	40020410 	.word	0x40020410
 80070bc:	40020428 	.word	0x40020428
 80070c0:	40020440 	.word	0x40020440
 80070c4:	40020458 	.word	0x40020458
 80070c8:	40020470 	.word	0x40020470
 80070cc:	40020488 	.word	0x40020488
 80070d0:	400204a0 	.word	0x400204a0
 80070d4:	400204b8 	.word	0x400204b8
 80070d8:	58025408 	.word	0x58025408
 80070dc:	5802541c 	.word	0x5802541c
 80070e0:	58025430 	.word	0x58025430
 80070e4:	58025444 	.word	0x58025444
 80070e8:	58025458 	.word	0x58025458
 80070ec:	5802546c 	.word	0x5802546c
 80070f0:	58025480 	.word	0x58025480
 80070f4:	58025494 	.word	0x58025494

080070f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007100:	f7fc fef2 	bl	8003ee8 <HAL_GetTick>
 8007104:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e2dc      	b.n	80076ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d008      	beq.n	800712e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2280      	movs	r2, #128	@ 0x80
 8007120:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e2cd      	b.n	80076ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a76      	ldr	r2, [pc, #472]	@ (800730c <HAL_DMA_Abort+0x214>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d04a      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a74      	ldr	r2, [pc, #464]	@ (8007310 <HAL_DMA_Abort+0x218>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d045      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a73      	ldr	r2, [pc, #460]	@ (8007314 <HAL_DMA_Abort+0x21c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d040      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a71      	ldr	r2, [pc, #452]	@ (8007318 <HAL_DMA_Abort+0x220>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d03b      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a70      	ldr	r2, [pc, #448]	@ (800731c <HAL_DMA_Abort+0x224>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d036      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a6e      	ldr	r2, [pc, #440]	@ (8007320 <HAL_DMA_Abort+0x228>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d031      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a6d      	ldr	r2, [pc, #436]	@ (8007324 <HAL_DMA_Abort+0x22c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d02c      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a6b      	ldr	r2, [pc, #428]	@ (8007328 <HAL_DMA_Abort+0x230>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d027      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a6a      	ldr	r2, [pc, #424]	@ (800732c <HAL_DMA_Abort+0x234>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d022      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a68      	ldr	r2, [pc, #416]	@ (8007330 <HAL_DMA_Abort+0x238>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d01d      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a67      	ldr	r2, [pc, #412]	@ (8007334 <HAL_DMA_Abort+0x23c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d018      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a65      	ldr	r2, [pc, #404]	@ (8007338 <HAL_DMA_Abort+0x240>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a64      	ldr	r2, [pc, #400]	@ (800733c <HAL_DMA_Abort+0x244>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00e      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a62      	ldr	r2, [pc, #392]	@ (8007340 <HAL_DMA_Abort+0x248>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d009      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a61      	ldr	r2, [pc, #388]	@ (8007344 <HAL_DMA_Abort+0x24c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d004      	beq.n	80071ce <HAL_DMA_Abort+0xd6>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a5f      	ldr	r2, [pc, #380]	@ (8007348 <HAL_DMA_Abort+0x250>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d101      	bne.n	80071d2 <HAL_DMA_Abort+0xda>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <HAL_DMA_Abort+0xdc>
 80071d2:	2300      	movs	r3, #0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d013      	beq.n	8007200 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 021e 	bic.w	r2, r2, #30
 80071e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	695a      	ldr	r2, [r3, #20]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	e00a      	b.n	8007216 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 020e 	bic.w	r2, r2, #14
 800720e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a3c      	ldr	r2, [pc, #240]	@ (800730c <HAL_DMA_Abort+0x214>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d072      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a3a      	ldr	r2, [pc, #232]	@ (8007310 <HAL_DMA_Abort+0x218>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d06d      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a39      	ldr	r2, [pc, #228]	@ (8007314 <HAL_DMA_Abort+0x21c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d068      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a37      	ldr	r2, [pc, #220]	@ (8007318 <HAL_DMA_Abort+0x220>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d063      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a36      	ldr	r2, [pc, #216]	@ (800731c <HAL_DMA_Abort+0x224>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d05e      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a34      	ldr	r2, [pc, #208]	@ (8007320 <HAL_DMA_Abort+0x228>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d059      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a33      	ldr	r2, [pc, #204]	@ (8007324 <HAL_DMA_Abort+0x22c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d054      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a31      	ldr	r2, [pc, #196]	@ (8007328 <HAL_DMA_Abort+0x230>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d04f      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a30      	ldr	r2, [pc, #192]	@ (800732c <HAL_DMA_Abort+0x234>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d04a      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a2e      	ldr	r2, [pc, #184]	@ (8007330 <HAL_DMA_Abort+0x238>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d045      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a2d      	ldr	r2, [pc, #180]	@ (8007334 <HAL_DMA_Abort+0x23c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d040      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a2b      	ldr	r2, [pc, #172]	@ (8007338 <HAL_DMA_Abort+0x240>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d03b      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a2a      	ldr	r2, [pc, #168]	@ (800733c <HAL_DMA_Abort+0x244>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d036      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a28      	ldr	r2, [pc, #160]	@ (8007340 <HAL_DMA_Abort+0x248>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d031      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a27      	ldr	r2, [pc, #156]	@ (8007344 <HAL_DMA_Abort+0x24c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d02c      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a25      	ldr	r2, [pc, #148]	@ (8007348 <HAL_DMA_Abort+0x250>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d027      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a24      	ldr	r2, [pc, #144]	@ (800734c <HAL_DMA_Abort+0x254>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d022      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a22      	ldr	r2, [pc, #136]	@ (8007350 <HAL_DMA_Abort+0x258>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d01d      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a21      	ldr	r2, [pc, #132]	@ (8007354 <HAL_DMA_Abort+0x25c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d018      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a1f      	ldr	r2, [pc, #124]	@ (8007358 <HAL_DMA_Abort+0x260>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d013      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a1e      	ldr	r2, [pc, #120]	@ (800735c <HAL_DMA_Abort+0x264>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d00e      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1c      	ldr	r2, [pc, #112]	@ (8007360 <HAL_DMA_Abort+0x268>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d009      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007364 <HAL_DMA_Abort+0x26c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d004      	beq.n	8007306 <HAL_DMA_Abort+0x20e>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a19      	ldr	r2, [pc, #100]	@ (8007368 <HAL_DMA_Abort+0x270>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d132      	bne.n	800736c <HAL_DMA_Abort+0x274>
 8007306:	2301      	movs	r3, #1
 8007308:	e031      	b.n	800736e <HAL_DMA_Abort+0x276>
 800730a:	bf00      	nop
 800730c:	40020010 	.word	0x40020010
 8007310:	40020028 	.word	0x40020028
 8007314:	40020040 	.word	0x40020040
 8007318:	40020058 	.word	0x40020058
 800731c:	40020070 	.word	0x40020070
 8007320:	40020088 	.word	0x40020088
 8007324:	400200a0 	.word	0x400200a0
 8007328:	400200b8 	.word	0x400200b8
 800732c:	40020410 	.word	0x40020410
 8007330:	40020428 	.word	0x40020428
 8007334:	40020440 	.word	0x40020440
 8007338:	40020458 	.word	0x40020458
 800733c:	40020470 	.word	0x40020470
 8007340:	40020488 	.word	0x40020488
 8007344:	400204a0 	.word	0x400204a0
 8007348:	400204b8 	.word	0x400204b8
 800734c:	58025408 	.word	0x58025408
 8007350:	5802541c 	.word	0x5802541c
 8007354:	58025430 	.word	0x58025430
 8007358:	58025444 	.word	0x58025444
 800735c:	58025458 	.word	0x58025458
 8007360:	5802546c 	.word	0x5802546c
 8007364:	58025480 	.word	0x58025480
 8007368:	58025494 	.word	0x58025494
 800736c:	2300      	movs	r3, #0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d007      	beq.n	8007382 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800737c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007380:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a6d      	ldr	r2, [pc, #436]	@ (800753c <HAL_DMA_Abort+0x444>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d04a      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a6b      	ldr	r2, [pc, #428]	@ (8007540 <HAL_DMA_Abort+0x448>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d045      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a6a      	ldr	r2, [pc, #424]	@ (8007544 <HAL_DMA_Abort+0x44c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d040      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a68      	ldr	r2, [pc, #416]	@ (8007548 <HAL_DMA_Abort+0x450>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d03b      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a67      	ldr	r2, [pc, #412]	@ (800754c <HAL_DMA_Abort+0x454>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d036      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a65      	ldr	r2, [pc, #404]	@ (8007550 <HAL_DMA_Abort+0x458>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d031      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a64      	ldr	r2, [pc, #400]	@ (8007554 <HAL_DMA_Abort+0x45c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d02c      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a62      	ldr	r2, [pc, #392]	@ (8007558 <HAL_DMA_Abort+0x460>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d027      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a61      	ldr	r2, [pc, #388]	@ (800755c <HAL_DMA_Abort+0x464>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d022      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a5f      	ldr	r2, [pc, #380]	@ (8007560 <HAL_DMA_Abort+0x468>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d01d      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a5e      	ldr	r2, [pc, #376]	@ (8007564 <HAL_DMA_Abort+0x46c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d018      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a5c      	ldr	r2, [pc, #368]	@ (8007568 <HAL_DMA_Abort+0x470>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d013      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a5b      	ldr	r2, [pc, #364]	@ (800756c <HAL_DMA_Abort+0x474>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d00e      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a59      	ldr	r2, [pc, #356]	@ (8007570 <HAL_DMA_Abort+0x478>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d009      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a58      	ldr	r2, [pc, #352]	@ (8007574 <HAL_DMA_Abort+0x47c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d004      	beq.n	8007422 <HAL_DMA_Abort+0x32a>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a56      	ldr	r2, [pc, #344]	@ (8007578 <HAL_DMA_Abort+0x480>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d108      	bne.n	8007434 <HAL_DMA_Abort+0x33c>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0201 	bic.w	r2, r2, #1
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	e007      	b.n	8007444 <HAL_DMA_Abort+0x34c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0201 	bic.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007444:	e013      	b.n	800746e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007446:	f7fc fd4f 	bl	8003ee8 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b05      	cmp	r3, #5
 8007452:	d90c      	bls.n	800746e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2203      	movs	r2, #3
 800745e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e12d      	b.n	80076ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e5      	bne.n	8007446 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a2f      	ldr	r2, [pc, #188]	@ (800753c <HAL_DMA_Abort+0x444>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d04a      	beq.n	800751a <HAL_DMA_Abort+0x422>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a2d      	ldr	r2, [pc, #180]	@ (8007540 <HAL_DMA_Abort+0x448>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d045      	beq.n	800751a <HAL_DMA_Abort+0x422>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a2c      	ldr	r2, [pc, #176]	@ (8007544 <HAL_DMA_Abort+0x44c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d040      	beq.n	800751a <HAL_DMA_Abort+0x422>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a2a      	ldr	r2, [pc, #168]	@ (8007548 <HAL_DMA_Abort+0x450>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d03b      	beq.n	800751a <HAL_DMA_Abort+0x422>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a29      	ldr	r2, [pc, #164]	@ (800754c <HAL_DMA_Abort+0x454>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d036      	beq.n	800751a <HAL_DMA_Abort+0x422>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a27      	ldr	r2, [pc, #156]	@ (8007550 <HAL_DMA_Abort+0x458>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d031      	beq.n	800751a <HAL_DMA_Abort+0x422>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a26      	ldr	r2, [pc, #152]	@ (8007554 <HAL_DMA_Abort+0x45c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d02c      	beq.n	800751a <HAL_DMA_Abort+0x422>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a24      	ldr	r2, [pc, #144]	@ (8007558 <HAL_DMA_Abort+0x460>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d027      	beq.n	800751a <HAL_DMA_Abort+0x422>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a23      	ldr	r2, [pc, #140]	@ (800755c <HAL_DMA_Abort+0x464>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d022      	beq.n	800751a <HAL_DMA_Abort+0x422>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a21      	ldr	r2, [pc, #132]	@ (8007560 <HAL_DMA_Abort+0x468>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d01d      	beq.n	800751a <HAL_DMA_Abort+0x422>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a20      	ldr	r2, [pc, #128]	@ (8007564 <HAL_DMA_Abort+0x46c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d018      	beq.n	800751a <HAL_DMA_Abort+0x422>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007568 <HAL_DMA_Abort+0x470>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d013      	beq.n	800751a <HAL_DMA_Abort+0x422>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a1d      	ldr	r2, [pc, #116]	@ (800756c <HAL_DMA_Abort+0x474>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00e      	beq.n	800751a <HAL_DMA_Abort+0x422>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a1b      	ldr	r2, [pc, #108]	@ (8007570 <HAL_DMA_Abort+0x478>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d009      	beq.n	800751a <HAL_DMA_Abort+0x422>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a1a      	ldr	r2, [pc, #104]	@ (8007574 <HAL_DMA_Abort+0x47c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d004      	beq.n	800751a <HAL_DMA_Abort+0x422>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a18      	ldr	r2, [pc, #96]	@ (8007578 <HAL_DMA_Abort+0x480>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d101      	bne.n	800751e <HAL_DMA_Abort+0x426>
 800751a:	2301      	movs	r3, #1
 800751c:	e000      	b.n	8007520 <HAL_DMA_Abort+0x428>
 800751e:	2300      	movs	r3, #0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d02b      	beq.n	800757c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007528:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800752e:	f003 031f 	and.w	r3, r3, #31
 8007532:	223f      	movs	r2, #63	@ 0x3f
 8007534:	409a      	lsls	r2, r3
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	609a      	str	r2, [r3, #8]
 800753a:	e02a      	b.n	8007592 <HAL_DMA_Abort+0x49a>
 800753c:	40020010 	.word	0x40020010
 8007540:	40020028 	.word	0x40020028
 8007544:	40020040 	.word	0x40020040
 8007548:	40020058 	.word	0x40020058
 800754c:	40020070 	.word	0x40020070
 8007550:	40020088 	.word	0x40020088
 8007554:	400200a0 	.word	0x400200a0
 8007558:	400200b8 	.word	0x400200b8
 800755c:	40020410 	.word	0x40020410
 8007560:	40020428 	.word	0x40020428
 8007564:	40020440 	.word	0x40020440
 8007568:	40020458 	.word	0x40020458
 800756c:	40020470 	.word	0x40020470
 8007570:	40020488 	.word	0x40020488
 8007574:	400204a0 	.word	0x400204a0
 8007578:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007580:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007586:	f003 031f 	and.w	r3, r3, #31
 800758a:	2201      	movs	r2, #1
 800758c:	409a      	lsls	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a4f      	ldr	r2, [pc, #316]	@ (80076d4 <HAL_DMA_Abort+0x5dc>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d072      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a4d      	ldr	r2, [pc, #308]	@ (80076d8 <HAL_DMA_Abort+0x5e0>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d06d      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a4c      	ldr	r2, [pc, #304]	@ (80076dc <HAL_DMA_Abort+0x5e4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d068      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a4a      	ldr	r2, [pc, #296]	@ (80076e0 <HAL_DMA_Abort+0x5e8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d063      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a49      	ldr	r2, [pc, #292]	@ (80076e4 <HAL_DMA_Abort+0x5ec>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d05e      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a47      	ldr	r2, [pc, #284]	@ (80076e8 <HAL_DMA_Abort+0x5f0>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d059      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a46      	ldr	r2, [pc, #280]	@ (80076ec <HAL_DMA_Abort+0x5f4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d054      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a44      	ldr	r2, [pc, #272]	@ (80076f0 <HAL_DMA_Abort+0x5f8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d04f      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a43      	ldr	r2, [pc, #268]	@ (80076f4 <HAL_DMA_Abort+0x5fc>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d04a      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a41      	ldr	r2, [pc, #260]	@ (80076f8 <HAL_DMA_Abort+0x600>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d045      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a40      	ldr	r2, [pc, #256]	@ (80076fc <HAL_DMA_Abort+0x604>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d040      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a3e      	ldr	r2, [pc, #248]	@ (8007700 <HAL_DMA_Abort+0x608>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d03b      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a3d      	ldr	r2, [pc, #244]	@ (8007704 <HAL_DMA_Abort+0x60c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d036      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a3b      	ldr	r2, [pc, #236]	@ (8007708 <HAL_DMA_Abort+0x610>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d031      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a3a      	ldr	r2, [pc, #232]	@ (800770c <HAL_DMA_Abort+0x614>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d02c      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a38      	ldr	r2, [pc, #224]	@ (8007710 <HAL_DMA_Abort+0x618>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d027      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a37      	ldr	r2, [pc, #220]	@ (8007714 <HAL_DMA_Abort+0x61c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d022      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a35      	ldr	r2, [pc, #212]	@ (8007718 <HAL_DMA_Abort+0x620>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d01d      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a34      	ldr	r2, [pc, #208]	@ (800771c <HAL_DMA_Abort+0x624>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d018      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a32      	ldr	r2, [pc, #200]	@ (8007720 <HAL_DMA_Abort+0x628>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d013      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a31      	ldr	r2, [pc, #196]	@ (8007724 <HAL_DMA_Abort+0x62c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00e      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2f      	ldr	r2, [pc, #188]	@ (8007728 <HAL_DMA_Abort+0x630>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d009      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a2e      	ldr	r2, [pc, #184]	@ (800772c <HAL_DMA_Abort+0x634>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d004      	beq.n	8007682 <HAL_DMA_Abort+0x58a>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a2c      	ldr	r2, [pc, #176]	@ (8007730 <HAL_DMA_Abort+0x638>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d101      	bne.n	8007686 <HAL_DMA_Abort+0x58e>
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <HAL_DMA_Abort+0x590>
 8007686:	2300      	movs	r3, #0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d015      	beq.n	80076b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007694:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00c      	beq.n	80076b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80076b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40020010 	.word	0x40020010
 80076d8:	40020028 	.word	0x40020028
 80076dc:	40020040 	.word	0x40020040
 80076e0:	40020058 	.word	0x40020058
 80076e4:	40020070 	.word	0x40020070
 80076e8:	40020088 	.word	0x40020088
 80076ec:	400200a0 	.word	0x400200a0
 80076f0:	400200b8 	.word	0x400200b8
 80076f4:	40020410 	.word	0x40020410
 80076f8:	40020428 	.word	0x40020428
 80076fc:	40020440 	.word	0x40020440
 8007700:	40020458 	.word	0x40020458
 8007704:	40020470 	.word	0x40020470
 8007708:	40020488 	.word	0x40020488
 800770c:	400204a0 	.word	0x400204a0
 8007710:	400204b8 	.word	0x400204b8
 8007714:	58025408 	.word	0x58025408
 8007718:	5802541c 	.word	0x5802541c
 800771c:	58025430 	.word	0x58025430
 8007720:	58025444 	.word	0x58025444
 8007724:	58025458 	.word	0x58025458
 8007728:	5802546c 	.word	0x5802546c
 800772c:	58025480 	.word	0x58025480
 8007730:	58025494 	.word	0x58025494

08007734 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e237      	b.n	8007bb6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d004      	beq.n	800775c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2280      	movs	r2, #128	@ 0x80
 8007756:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e22c      	b.n	8007bb6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a5c      	ldr	r2, [pc, #368]	@ (80078d4 <HAL_DMA_Abort_IT+0x1a0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d04a      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a5b      	ldr	r2, [pc, #364]	@ (80078d8 <HAL_DMA_Abort_IT+0x1a4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d045      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a59      	ldr	r2, [pc, #356]	@ (80078dc <HAL_DMA_Abort_IT+0x1a8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d040      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a58      	ldr	r2, [pc, #352]	@ (80078e0 <HAL_DMA_Abort_IT+0x1ac>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d03b      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a56      	ldr	r2, [pc, #344]	@ (80078e4 <HAL_DMA_Abort_IT+0x1b0>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d036      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a55      	ldr	r2, [pc, #340]	@ (80078e8 <HAL_DMA_Abort_IT+0x1b4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d031      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a53      	ldr	r2, [pc, #332]	@ (80078ec <HAL_DMA_Abort_IT+0x1b8>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d02c      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a52      	ldr	r2, [pc, #328]	@ (80078f0 <HAL_DMA_Abort_IT+0x1bc>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d027      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a50      	ldr	r2, [pc, #320]	@ (80078f4 <HAL_DMA_Abort_IT+0x1c0>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d022      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a4f      	ldr	r2, [pc, #316]	@ (80078f8 <HAL_DMA_Abort_IT+0x1c4>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d01d      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a4d      	ldr	r2, [pc, #308]	@ (80078fc <HAL_DMA_Abort_IT+0x1c8>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d018      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a4c      	ldr	r2, [pc, #304]	@ (8007900 <HAL_DMA_Abort_IT+0x1cc>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d013      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a4a      	ldr	r2, [pc, #296]	@ (8007904 <HAL_DMA_Abort_IT+0x1d0>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00e      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a49      	ldr	r2, [pc, #292]	@ (8007908 <HAL_DMA_Abort_IT+0x1d4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d009      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a47      	ldr	r2, [pc, #284]	@ (800790c <HAL_DMA_Abort_IT+0x1d8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <HAL_DMA_Abort_IT+0xc8>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a46      	ldr	r2, [pc, #280]	@ (8007910 <HAL_DMA_Abort_IT+0x1dc>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d101      	bne.n	8007800 <HAL_DMA_Abort_IT+0xcc>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <HAL_DMA_Abort_IT+0xce>
 8007800:	2300      	movs	r3, #0
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 8086 	beq.w	8007914 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2204      	movs	r2, #4
 800780c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a2f      	ldr	r2, [pc, #188]	@ (80078d4 <HAL_DMA_Abort_IT+0x1a0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d04a      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a2e      	ldr	r2, [pc, #184]	@ (80078d8 <HAL_DMA_Abort_IT+0x1a4>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d045      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a2c      	ldr	r2, [pc, #176]	@ (80078dc <HAL_DMA_Abort_IT+0x1a8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d040      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a2b      	ldr	r2, [pc, #172]	@ (80078e0 <HAL_DMA_Abort_IT+0x1ac>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d03b      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a29      	ldr	r2, [pc, #164]	@ (80078e4 <HAL_DMA_Abort_IT+0x1b0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d036      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a28      	ldr	r2, [pc, #160]	@ (80078e8 <HAL_DMA_Abort_IT+0x1b4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d031      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a26      	ldr	r2, [pc, #152]	@ (80078ec <HAL_DMA_Abort_IT+0x1b8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d02c      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a25      	ldr	r2, [pc, #148]	@ (80078f0 <HAL_DMA_Abort_IT+0x1bc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d027      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a23      	ldr	r2, [pc, #140]	@ (80078f4 <HAL_DMA_Abort_IT+0x1c0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d022      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a22      	ldr	r2, [pc, #136]	@ (80078f8 <HAL_DMA_Abort_IT+0x1c4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d01d      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a20      	ldr	r2, [pc, #128]	@ (80078fc <HAL_DMA_Abort_IT+0x1c8>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d018      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a1f      	ldr	r2, [pc, #124]	@ (8007900 <HAL_DMA_Abort_IT+0x1cc>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d013      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a1d      	ldr	r2, [pc, #116]	@ (8007904 <HAL_DMA_Abort_IT+0x1d0>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00e      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1c      	ldr	r2, [pc, #112]	@ (8007908 <HAL_DMA_Abort_IT+0x1d4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d009      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1a      	ldr	r2, [pc, #104]	@ (800790c <HAL_DMA_Abort_IT+0x1d8>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d004      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x17c>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a19      	ldr	r2, [pc, #100]	@ (8007910 <HAL_DMA_Abort_IT+0x1dc>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d108      	bne.n	80078c2 <HAL_DMA_Abort_IT+0x18e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0201 	bic.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	e178      	b.n	8007bb4 <HAL_DMA_Abort_IT+0x480>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0201 	bic.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	e16f      	b.n	8007bb4 <HAL_DMA_Abort_IT+0x480>
 80078d4:	40020010 	.word	0x40020010
 80078d8:	40020028 	.word	0x40020028
 80078dc:	40020040 	.word	0x40020040
 80078e0:	40020058 	.word	0x40020058
 80078e4:	40020070 	.word	0x40020070
 80078e8:	40020088 	.word	0x40020088
 80078ec:	400200a0 	.word	0x400200a0
 80078f0:	400200b8 	.word	0x400200b8
 80078f4:	40020410 	.word	0x40020410
 80078f8:	40020428 	.word	0x40020428
 80078fc:	40020440 	.word	0x40020440
 8007900:	40020458 	.word	0x40020458
 8007904:	40020470 	.word	0x40020470
 8007908:	40020488 	.word	0x40020488
 800790c:	400204a0 	.word	0x400204a0
 8007910:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 020e 	bic.w	r2, r2, #14
 8007922:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a6c      	ldr	r2, [pc, #432]	@ (8007adc <HAL_DMA_Abort_IT+0x3a8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d04a      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a6b      	ldr	r2, [pc, #428]	@ (8007ae0 <HAL_DMA_Abort_IT+0x3ac>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d045      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a69      	ldr	r2, [pc, #420]	@ (8007ae4 <HAL_DMA_Abort_IT+0x3b0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d040      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a68      	ldr	r2, [pc, #416]	@ (8007ae8 <HAL_DMA_Abort_IT+0x3b4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d03b      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a66      	ldr	r2, [pc, #408]	@ (8007aec <HAL_DMA_Abort_IT+0x3b8>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d036      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a65      	ldr	r2, [pc, #404]	@ (8007af0 <HAL_DMA_Abort_IT+0x3bc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d031      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a63      	ldr	r2, [pc, #396]	@ (8007af4 <HAL_DMA_Abort_IT+0x3c0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d02c      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a62      	ldr	r2, [pc, #392]	@ (8007af8 <HAL_DMA_Abort_IT+0x3c4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d027      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a60      	ldr	r2, [pc, #384]	@ (8007afc <HAL_DMA_Abort_IT+0x3c8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d022      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a5f      	ldr	r2, [pc, #380]	@ (8007b00 <HAL_DMA_Abort_IT+0x3cc>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d01d      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a5d      	ldr	r2, [pc, #372]	@ (8007b04 <HAL_DMA_Abort_IT+0x3d0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d018      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a5c      	ldr	r2, [pc, #368]	@ (8007b08 <HAL_DMA_Abort_IT+0x3d4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d013      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a5a      	ldr	r2, [pc, #360]	@ (8007b0c <HAL_DMA_Abort_IT+0x3d8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00e      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a59      	ldr	r2, [pc, #356]	@ (8007b10 <HAL_DMA_Abort_IT+0x3dc>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d009      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a57      	ldr	r2, [pc, #348]	@ (8007b14 <HAL_DMA_Abort_IT+0x3e0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d004      	beq.n	80079c4 <HAL_DMA_Abort_IT+0x290>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a56      	ldr	r2, [pc, #344]	@ (8007b18 <HAL_DMA_Abort_IT+0x3e4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d108      	bne.n	80079d6 <HAL_DMA_Abort_IT+0x2a2>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0201 	bic.w	r2, r2, #1
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	e007      	b.n	80079e6 <HAL_DMA_Abort_IT+0x2b2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0201 	bic.w	r2, r2, #1
 80079e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a3c      	ldr	r2, [pc, #240]	@ (8007adc <HAL_DMA_Abort_IT+0x3a8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d072      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a3a      	ldr	r2, [pc, #232]	@ (8007ae0 <HAL_DMA_Abort_IT+0x3ac>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d06d      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a39      	ldr	r2, [pc, #228]	@ (8007ae4 <HAL_DMA_Abort_IT+0x3b0>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d068      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a37      	ldr	r2, [pc, #220]	@ (8007ae8 <HAL_DMA_Abort_IT+0x3b4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d063      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a36      	ldr	r2, [pc, #216]	@ (8007aec <HAL_DMA_Abort_IT+0x3b8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d05e      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a34      	ldr	r2, [pc, #208]	@ (8007af0 <HAL_DMA_Abort_IT+0x3bc>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d059      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a33      	ldr	r2, [pc, #204]	@ (8007af4 <HAL_DMA_Abort_IT+0x3c0>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d054      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a31      	ldr	r2, [pc, #196]	@ (8007af8 <HAL_DMA_Abort_IT+0x3c4>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d04f      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a30      	ldr	r2, [pc, #192]	@ (8007afc <HAL_DMA_Abort_IT+0x3c8>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d04a      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a2e      	ldr	r2, [pc, #184]	@ (8007b00 <HAL_DMA_Abort_IT+0x3cc>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d045      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8007b04 <HAL_DMA_Abort_IT+0x3d0>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d040      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a2b      	ldr	r2, [pc, #172]	@ (8007b08 <HAL_DMA_Abort_IT+0x3d4>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d03b      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a2a      	ldr	r2, [pc, #168]	@ (8007b0c <HAL_DMA_Abort_IT+0x3d8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d036      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a28      	ldr	r2, [pc, #160]	@ (8007b10 <HAL_DMA_Abort_IT+0x3dc>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d031      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a27      	ldr	r2, [pc, #156]	@ (8007b14 <HAL_DMA_Abort_IT+0x3e0>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d02c      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a25      	ldr	r2, [pc, #148]	@ (8007b18 <HAL_DMA_Abort_IT+0x3e4>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d027      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a24      	ldr	r2, [pc, #144]	@ (8007b1c <HAL_DMA_Abort_IT+0x3e8>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d022      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a22      	ldr	r2, [pc, #136]	@ (8007b20 <HAL_DMA_Abort_IT+0x3ec>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d01d      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a21      	ldr	r2, [pc, #132]	@ (8007b24 <HAL_DMA_Abort_IT+0x3f0>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d018      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b28 <HAL_DMA_Abort_IT+0x3f4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d013      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a1e      	ldr	r2, [pc, #120]	@ (8007b2c <HAL_DMA_Abort_IT+0x3f8>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d00e      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a1c      	ldr	r2, [pc, #112]	@ (8007b30 <HAL_DMA_Abort_IT+0x3fc>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d009      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8007b34 <HAL_DMA_Abort_IT+0x400>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d004      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x3a2>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a19      	ldr	r2, [pc, #100]	@ (8007b38 <HAL_DMA_Abort_IT+0x404>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d132      	bne.n	8007b3c <HAL_DMA_Abort_IT+0x408>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e031      	b.n	8007b3e <HAL_DMA_Abort_IT+0x40a>
 8007ada:	bf00      	nop
 8007adc:	40020010 	.word	0x40020010
 8007ae0:	40020028 	.word	0x40020028
 8007ae4:	40020040 	.word	0x40020040
 8007ae8:	40020058 	.word	0x40020058
 8007aec:	40020070 	.word	0x40020070
 8007af0:	40020088 	.word	0x40020088
 8007af4:	400200a0 	.word	0x400200a0
 8007af8:	400200b8 	.word	0x400200b8
 8007afc:	40020410 	.word	0x40020410
 8007b00:	40020428 	.word	0x40020428
 8007b04:	40020440 	.word	0x40020440
 8007b08:	40020458 	.word	0x40020458
 8007b0c:	40020470 	.word	0x40020470
 8007b10:	40020488 	.word	0x40020488
 8007b14:	400204a0 	.word	0x400204a0
 8007b18:	400204b8 	.word	0x400204b8
 8007b1c:	58025408 	.word	0x58025408
 8007b20:	5802541c 	.word	0x5802541c
 8007b24:	58025430 	.word	0x58025430
 8007b28:	58025444 	.word	0x58025444
 8007b2c:	58025458 	.word	0x58025458
 8007b30:	5802546c 	.word	0x5802546c
 8007b34:	58025480 	.word	0x58025480
 8007b38:	58025494 	.word	0x58025494
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d028      	beq.n	8007b94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b5c:	f003 031f 	and.w	r3, r3, #31
 8007b60:	2201      	movs	r2, #1
 8007b62:	409a      	lsls	r2, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007b70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00c      	beq.n	8007b94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007b92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop

08007bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08a      	sub	sp, #40	@ 0x28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007bcc:	4b67      	ldr	r3, [pc, #412]	@ (8007d6c <HAL_DMA_IRQHandler+0x1ac>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a67      	ldr	r2, [pc, #412]	@ (8007d70 <HAL_DMA_IRQHandler+0x1b0>)
 8007bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd6:	0a9b      	lsrs	r3, r3, #10
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bde:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a5f      	ldr	r2, [pc, #380]	@ (8007d74 <HAL_DMA_IRQHandler+0x1b4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d04a      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a5d      	ldr	r2, [pc, #372]	@ (8007d78 <HAL_DMA_IRQHandler+0x1b8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d045      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a5c      	ldr	r2, [pc, #368]	@ (8007d7c <HAL_DMA_IRQHandler+0x1bc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d040      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a5a      	ldr	r2, [pc, #360]	@ (8007d80 <HAL_DMA_IRQHandler+0x1c0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d03b      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a59      	ldr	r2, [pc, #356]	@ (8007d84 <HAL_DMA_IRQHandler+0x1c4>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d036      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a57      	ldr	r2, [pc, #348]	@ (8007d88 <HAL_DMA_IRQHandler+0x1c8>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d031      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a56      	ldr	r2, [pc, #344]	@ (8007d8c <HAL_DMA_IRQHandler+0x1cc>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d02c      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a54      	ldr	r2, [pc, #336]	@ (8007d90 <HAL_DMA_IRQHandler+0x1d0>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d027      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a53      	ldr	r2, [pc, #332]	@ (8007d94 <HAL_DMA_IRQHandler+0x1d4>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d022      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a51      	ldr	r2, [pc, #324]	@ (8007d98 <HAL_DMA_IRQHandler+0x1d8>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d01d      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a50      	ldr	r2, [pc, #320]	@ (8007d9c <HAL_DMA_IRQHandler+0x1dc>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d018      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a4e      	ldr	r2, [pc, #312]	@ (8007da0 <HAL_DMA_IRQHandler+0x1e0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d013      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a4d      	ldr	r2, [pc, #308]	@ (8007da4 <HAL_DMA_IRQHandler+0x1e4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00e      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a4b      	ldr	r2, [pc, #300]	@ (8007da8 <HAL_DMA_IRQHandler+0x1e8>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d009      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a4a      	ldr	r2, [pc, #296]	@ (8007dac <HAL_DMA_IRQHandler+0x1ec>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d004      	beq.n	8007c92 <HAL_DMA_IRQHandler+0xd2>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a48      	ldr	r2, [pc, #288]	@ (8007db0 <HAL_DMA_IRQHandler+0x1f0>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d101      	bne.n	8007c96 <HAL_DMA_IRQHandler+0xd6>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e000      	b.n	8007c98 <HAL_DMA_IRQHandler+0xd8>
 8007c96:	2300      	movs	r3, #0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 842b 	beq.w	80084f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ca2:	f003 031f 	and.w	r3, r3, #31
 8007ca6:	2208      	movs	r2, #8
 8007ca8:	409a      	lsls	r2, r3
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	4013      	ands	r3, r2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 80a2 	beq.w	8007df8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8007d74 <HAL_DMA_IRQHandler+0x1b4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d04a      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a2d      	ldr	r2, [pc, #180]	@ (8007d78 <HAL_DMA_IRQHandler+0x1b8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d045      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8007d7c <HAL_DMA_IRQHandler+0x1bc>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d040      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d80 <HAL_DMA_IRQHandler+0x1c0>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d03b      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a28      	ldr	r2, [pc, #160]	@ (8007d84 <HAL_DMA_IRQHandler+0x1c4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d036      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a27      	ldr	r2, [pc, #156]	@ (8007d88 <HAL_DMA_IRQHandler+0x1c8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d031      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a25      	ldr	r2, [pc, #148]	@ (8007d8c <HAL_DMA_IRQHandler+0x1cc>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d02c      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a24      	ldr	r2, [pc, #144]	@ (8007d90 <HAL_DMA_IRQHandler+0x1d0>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d027      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a22      	ldr	r2, [pc, #136]	@ (8007d94 <HAL_DMA_IRQHandler+0x1d4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d022      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a21      	ldr	r2, [pc, #132]	@ (8007d98 <HAL_DMA_IRQHandler+0x1d8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d01d      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8007d9c <HAL_DMA_IRQHandler+0x1dc>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d018      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a1e      	ldr	r2, [pc, #120]	@ (8007da0 <HAL_DMA_IRQHandler+0x1e0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d013      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a1c      	ldr	r2, [pc, #112]	@ (8007da4 <HAL_DMA_IRQHandler+0x1e4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00e      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8007da8 <HAL_DMA_IRQHandler+0x1e8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d009      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a19      	ldr	r2, [pc, #100]	@ (8007dac <HAL_DMA_IRQHandler+0x1ec>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d004      	beq.n	8007d54 <HAL_DMA_IRQHandler+0x194>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a18      	ldr	r2, [pc, #96]	@ (8007db0 <HAL_DMA_IRQHandler+0x1f0>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d12f      	bne.n	8007db4 <HAL_DMA_IRQHandler+0x1f4>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0304 	and.w	r3, r3, #4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bf14      	ite	ne
 8007d62:	2301      	movne	r3, #1
 8007d64:	2300      	moveq	r3, #0
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	e02e      	b.n	8007dc8 <HAL_DMA_IRQHandler+0x208>
 8007d6a:	bf00      	nop
 8007d6c:	24000010 	.word	0x24000010
 8007d70:	1b4e81b5 	.word	0x1b4e81b5
 8007d74:	40020010 	.word	0x40020010
 8007d78:	40020028 	.word	0x40020028
 8007d7c:	40020040 	.word	0x40020040
 8007d80:	40020058 	.word	0x40020058
 8007d84:	40020070 	.word	0x40020070
 8007d88:	40020088 	.word	0x40020088
 8007d8c:	400200a0 	.word	0x400200a0
 8007d90:	400200b8 	.word	0x400200b8
 8007d94:	40020410 	.word	0x40020410
 8007d98:	40020428 	.word	0x40020428
 8007d9c:	40020440 	.word	0x40020440
 8007da0:	40020458 	.word	0x40020458
 8007da4:	40020470 	.word	0x40020470
 8007da8:	40020488 	.word	0x40020488
 8007dac:	400204a0 	.word	0x400204a0
 8007db0:	400204b8 	.word	0x400204b8
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0308 	and.w	r3, r3, #8
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	bf14      	ite	ne
 8007dc2:	2301      	movne	r3, #1
 8007dc4:	2300      	moveq	r3, #0
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d015      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 0204 	bic.w	r2, r2, #4
 8007dda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007de0:	f003 031f 	and.w	r3, r3, #31
 8007de4:	2208      	movs	r2, #8
 8007de6:	409a      	lsls	r2, r3
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df0:	f043 0201 	orr.w	r2, r3, #1
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dfc:	f003 031f 	and.w	r3, r3, #31
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	fa22 f303 	lsr.w	r3, r2, r3
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d06e      	beq.n	8007eec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a69      	ldr	r2, [pc, #420]	@ (8007fb8 <HAL_DMA_IRQHandler+0x3f8>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d04a      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a67      	ldr	r2, [pc, #412]	@ (8007fbc <HAL_DMA_IRQHandler+0x3fc>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d045      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a66      	ldr	r2, [pc, #408]	@ (8007fc0 <HAL_DMA_IRQHandler+0x400>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d040      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a64      	ldr	r2, [pc, #400]	@ (8007fc4 <HAL_DMA_IRQHandler+0x404>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d03b      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a63      	ldr	r2, [pc, #396]	@ (8007fc8 <HAL_DMA_IRQHandler+0x408>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d036      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a61      	ldr	r2, [pc, #388]	@ (8007fcc <HAL_DMA_IRQHandler+0x40c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d031      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a60      	ldr	r2, [pc, #384]	@ (8007fd0 <HAL_DMA_IRQHandler+0x410>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d02c      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a5e      	ldr	r2, [pc, #376]	@ (8007fd4 <HAL_DMA_IRQHandler+0x414>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d027      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a5d      	ldr	r2, [pc, #372]	@ (8007fd8 <HAL_DMA_IRQHandler+0x418>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d022      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a5b      	ldr	r2, [pc, #364]	@ (8007fdc <HAL_DMA_IRQHandler+0x41c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d01d      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a5a      	ldr	r2, [pc, #360]	@ (8007fe0 <HAL_DMA_IRQHandler+0x420>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d018      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a58      	ldr	r2, [pc, #352]	@ (8007fe4 <HAL_DMA_IRQHandler+0x424>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d013      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a57      	ldr	r2, [pc, #348]	@ (8007fe8 <HAL_DMA_IRQHandler+0x428>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d00e      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a55      	ldr	r2, [pc, #340]	@ (8007fec <HAL_DMA_IRQHandler+0x42c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d009      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a54      	ldr	r2, [pc, #336]	@ (8007ff0 <HAL_DMA_IRQHandler+0x430>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d004      	beq.n	8007eae <HAL_DMA_IRQHandler+0x2ee>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a52      	ldr	r2, [pc, #328]	@ (8007ff4 <HAL_DMA_IRQHandler+0x434>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d10a      	bne.n	8007ec4 <HAL_DMA_IRQHandler+0x304>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	bf14      	ite	ne
 8007ebc:	2301      	movne	r3, #1
 8007ebe:	2300      	moveq	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	e003      	b.n	8007ecc <HAL_DMA_IRQHandler+0x30c>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00d      	beq.n	8007eec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed4:	f003 031f 	and.w	r3, r3, #31
 8007ed8:	2201      	movs	r2, #1
 8007eda:	409a      	lsls	r2, r3
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee4:	f043 0202 	orr.w	r2, r3, #2
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ef0:	f003 031f 	and.w	r3, r3, #31
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	409a      	lsls	r2, r3
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	4013      	ands	r3, r2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 808f 	beq.w	8008020 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a2c      	ldr	r2, [pc, #176]	@ (8007fb8 <HAL_DMA_IRQHandler+0x3f8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d04a      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a2a      	ldr	r2, [pc, #168]	@ (8007fbc <HAL_DMA_IRQHandler+0x3fc>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d045      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a29      	ldr	r2, [pc, #164]	@ (8007fc0 <HAL_DMA_IRQHandler+0x400>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d040      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a27      	ldr	r2, [pc, #156]	@ (8007fc4 <HAL_DMA_IRQHandler+0x404>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d03b      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a26      	ldr	r2, [pc, #152]	@ (8007fc8 <HAL_DMA_IRQHandler+0x408>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d036      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a24      	ldr	r2, [pc, #144]	@ (8007fcc <HAL_DMA_IRQHandler+0x40c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d031      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a23      	ldr	r2, [pc, #140]	@ (8007fd0 <HAL_DMA_IRQHandler+0x410>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d02c      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a21      	ldr	r2, [pc, #132]	@ (8007fd4 <HAL_DMA_IRQHandler+0x414>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d027      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a20      	ldr	r2, [pc, #128]	@ (8007fd8 <HAL_DMA_IRQHandler+0x418>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d022      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a1e      	ldr	r2, [pc, #120]	@ (8007fdc <HAL_DMA_IRQHandler+0x41c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01d      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe0 <HAL_DMA_IRQHandler+0x420>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d018      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a1b      	ldr	r2, [pc, #108]	@ (8007fe4 <HAL_DMA_IRQHandler+0x424>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d013      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe8 <HAL_DMA_IRQHandler+0x428>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00e      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a18      	ldr	r2, [pc, #96]	@ (8007fec <HAL_DMA_IRQHandler+0x42c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d009      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a17      	ldr	r2, [pc, #92]	@ (8007ff0 <HAL_DMA_IRQHandler+0x430>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d004      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0x3e2>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a15      	ldr	r2, [pc, #84]	@ (8007ff4 <HAL_DMA_IRQHandler+0x434>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d12a      	bne.n	8007ff8 <HAL_DMA_IRQHandler+0x438>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bf14      	ite	ne
 8007fb0:	2301      	movne	r3, #1
 8007fb2:	2300      	moveq	r3, #0
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	e023      	b.n	8008000 <HAL_DMA_IRQHandler+0x440>
 8007fb8:	40020010 	.word	0x40020010
 8007fbc:	40020028 	.word	0x40020028
 8007fc0:	40020040 	.word	0x40020040
 8007fc4:	40020058 	.word	0x40020058
 8007fc8:	40020070 	.word	0x40020070
 8007fcc:	40020088 	.word	0x40020088
 8007fd0:	400200a0 	.word	0x400200a0
 8007fd4:	400200b8 	.word	0x400200b8
 8007fd8:	40020410 	.word	0x40020410
 8007fdc:	40020428 	.word	0x40020428
 8007fe0:	40020440 	.word	0x40020440
 8007fe4:	40020458 	.word	0x40020458
 8007fe8:	40020470 	.word	0x40020470
 8007fec:	40020488 	.word	0x40020488
 8007ff0:	400204a0 	.word	0x400204a0
 8007ff4:	400204b8 	.word	0x400204b8
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2300      	movs	r3, #0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00d      	beq.n	8008020 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	2204      	movs	r2, #4
 800800e:	409a      	lsls	r2, r3
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008018:	f043 0204 	orr.w	r2, r3, #4
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008024:	f003 031f 	and.w	r3, r3, #31
 8008028:	2210      	movs	r2, #16
 800802a:	409a      	lsls	r2, r3
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	4013      	ands	r3, r2
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 80a6 	beq.w	8008182 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a85      	ldr	r2, [pc, #532]	@ (8008250 <HAL_DMA_IRQHandler+0x690>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d04a      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a83      	ldr	r2, [pc, #524]	@ (8008254 <HAL_DMA_IRQHandler+0x694>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d045      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a82      	ldr	r2, [pc, #520]	@ (8008258 <HAL_DMA_IRQHandler+0x698>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d040      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a80      	ldr	r2, [pc, #512]	@ (800825c <HAL_DMA_IRQHandler+0x69c>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d03b      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a7f      	ldr	r2, [pc, #508]	@ (8008260 <HAL_DMA_IRQHandler+0x6a0>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d036      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a7d      	ldr	r2, [pc, #500]	@ (8008264 <HAL_DMA_IRQHandler+0x6a4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d031      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a7c      	ldr	r2, [pc, #496]	@ (8008268 <HAL_DMA_IRQHandler+0x6a8>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d02c      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a7a      	ldr	r2, [pc, #488]	@ (800826c <HAL_DMA_IRQHandler+0x6ac>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d027      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a79      	ldr	r2, [pc, #484]	@ (8008270 <HAL_DMA_IRQHandler+0x6b0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d022      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a77      	ldr	r2, [pc, #476]	@ (8008274 <HAL_DMA_IRQHandler+0x6b4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d01d      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a76      	ldr	r2, [pc, #472]	@ (8008278 <HAL_DMA_IRQHandler+0x6b8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d018      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a74      	ldr	r2, [pc, #464]	@ (800827c <HAL_DMA_IRQHandler+0x6bc>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d013      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a73      	ldr	r2, [pc, #460]	@ (8008280 <HAL_DMA_IRQHandler+0x6c0>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00e      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a71      	ldr	r2, [pc, #452]	@ (8008284 <HAL_DMA_IRQHandler+0x6c4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d009      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a70      	ldr	r2, [pc, #448]	@ (8008288 <HAL_DMA_IRQHandler+0x6c8>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d004      	beq.n	80080d6 <HAL_DMA_IRQHandler+0x516>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a6e      	ldr	r2, [pc, #440]	@ (800828c <HAL_DMA_IRQHandler+0x6cc>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d10a      	bne.n	80080ec <HAL_DMA_IRQHandler+0x52c>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bf14      	ite	ne
 80080e4:	2301      	movne	r3, #1
 80080e6:	2300      	moveq	r3, #0
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	e009      	b.n	8008100 <HAL_DMA_IRQHandler+0x540>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0304 	and.w	r3, r3, #4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	bf14      	ite	ne
 80080fa:	2301      	movne	r3, #1
 80080fc:	2300      	moveq	r3, #0
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d03e      	beq.n	8008182 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008108:	f003 031f 	and.w	r3, r3, #31
 800810c:	2210      	movs	r2, #16
 800810e:	409a      	lsls	r2, r3
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d018      	beq.n	8008154 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d108      	bne.n	8008142 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008134:	2b00      	cmp	r3, #0
 8008136:	d024      	beq.n	8008182 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	4798      	blx	r3
 8008140:	e01f      	b.n	8008182 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008146:	2b00      	cmp	r3, #0
 8008148:	d01b      	beq.n	8008182 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
 8008152:	e016      	b.n	8008182 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800815e:	2b00      	cmp	r3, #0
 8008160:	d107      	bne.n	8008172 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0208 	bic.w	r2, r2, #8
 8008170:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008186:	f003 031f 	and.w	r3, r3, #31
 800818a:	2220      	movs	r2, #32
 800818c:	409a      	lsls	r2, r3
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	4013      	ands	r3, r2
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 8110 	beq.w	80083b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a2c      	ldr	r2, [pc, #176]	@ (8008250 <HAL_DMA_IRQHandler+0x690>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d04a      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a2b      	ldr	r2, [pc, #172]	@ (8008254 <HAL_DMA_IRQHandler+0x694>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d045      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a29      	ldr	r2, [pc, #164]	@ (8008258 <HAL_DMA_IRQHandler+0x698>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d040      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a28      	ldr	r2, [pc, #160]	@ (800825c <HAL_DMA_IRQHandler+0x69c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d03b      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a26      	ldr	r2, [pc, #152]	@ (8008260 <HAL_DMA_IRQHandler+0x6a0>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d036      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a25      	ldr	r2, [pc, #148]	@ (8008264 <HAL_DMA_IRQHandler+0x6a4>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d031      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a23      	ldr	r2, [pc, #140]	@ (8008268 <HAL_DMA_IRQHandler+0x6a8>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d02c      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a22      	ldr	r2, [pc, #136]	@ (800826c <HAL_DMA_IRQHandler+0x6ac>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d027      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a20      	ldr	r2, [pc, #128]	@ (8008270 <HAL_DMA_IRQHandler+0x6b0>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d022      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008274 <HAL_DMA_IRQHandler+0x6b4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d01d      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a1d      	ldr	r2, [pc, #116]	@ (8008278 <HAL_DMA_IRQHandler+0x6b8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d018      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a1c      	ldr	r2, [pc, #112]	@ (800827c <HAL_DMA_IRQHandler+0x6bc>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d013      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a1a      	ldr	r2, [pc, #104]	@ (8008280 <HAL_DMA_IRQHandler+0x6c0>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d00e      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a19      	ldr	r2, [pc, #100]	@ (8008284 <HAL_DMA_IRQHandler+0x6c4>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d009      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a17      	ldr	r2, [pc, #92]	@ (8008288 <HAL_DMA_IRQHandler+0x6c8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d004      	beq.n	8008238 <HAL_DMA_IRQHandler+0x678>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a16      	ldr	r2, [pc, #88]	@ (800828c <HAL_DMA_IRQHandler+0x6cc>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d12b      	bne.n	8008290 <HAL_DMA_IRQHandler+0x6d0>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0310 	and.w	r3, r3, #16
 8008242:	2b00      	cmp	r3, #0
 8008244:	bf14      	ite	ne
 8008246:	2301      	movne	r3, #1
 8008248:	2300      	moveq	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	e02a      	b.n	80082a4 <HAL_DMA_IRQHandler+0x6e4>
 800824e:	bf00      	nop
 8008250:	40020010 	.word	0x40020010
 8008254:	40020028 	.word	0x40020028
 8008258:	40020040 	.word	0x40020040
 800825c:	40020058 	.word	0x40020058
 8008260:	40020070 	.word	0x40020070
 8008264:	40020088 	.word	0x40020088
 8008268:	400200a0 	.word	0x400200a0
 800826c:	400200b8 	.word	0x400200b8
 8008270:	40020410 	.word	0x40020410
 8008274:	40020428 	.word	0x40020428
 8008278:	40020440 	.word	0x40020440
 800827c:	40020458 	.word	0x40020458
 8008280:	40020470 	.word	0x40020470
 8008284:	40020488 	.word	0x40020488
 8008288:	400204a0 	.word	0x400204a0
 800828c:	400204b8 	.word	0x400204b8
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	bf14      	ite	ne
 800829e:	2301      	movne	r3, #1
 80082a0:	2300      	moveq	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 8087 	beq.w	80083b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082ae:	f003 031f 	and.w	r3, r3, #31
 80082b2:	2220      	movs	r2, #32
 80082b4:	409a      	lsls	r2, r3
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d139      	bne.n	800833a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 0216 	bic.w	r2, r2, #22
 80082d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	695a      	ldr	r2, [r3, #20]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <HAL_DMA_IRQHandler+0x736>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d007      	beq.n	8008306 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0208 	bic.w	r2, r2, #8
 8008304:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800830a:	f003 031f 	and.w	r3, r3, #31
 800830e:	223f      	movs	r2, #63	@ 0x3f
 8008310:	409a      	lsls	r2, r3
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 834a 	beq.w	80089c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	4798      	blx	r3
          }
          return;
 8008338:	e344      	b.n	80089c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d018      	beq.n	800837a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d108      	bne.n	8008368 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800835a:	2b00      	cmp	r3, #0
 800835c:	d02c      	beq.n	80083b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	4798      	blx	r3
 8008366:	e027      	b.n	80083b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800836c:	2b00      	cmp	r3, #0
 800836e:	d023      	beq.n	80083b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	4798      	blx	r3
 8008378:	e01e      	b.n	80083b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10f      	bne.n	80083a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0210 	bic.w	r2, r2, #16
 8008396:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d003      	beq.n	80083b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8306 	beq.w	80089ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8088 	beq.w	80084e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2204      	movs	r2, #4
 80083d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a7a      	ldr	r2, [pc, #488]	@ (80085c8 <HAL_DMA_IRQHandler+0xa08>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d04a      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a79      	ldr	r2, [pc, #484]	@ (80085cc <HAL_DMA_IRQHandler+0xa0c>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d045      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a77      	ldr	r2, [pc, #476]	@ (80085d0 <HAL_DMA_IRQHandler+0xa10>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d040      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a76      	ldr	r2, [pc, #472]	@ (80085d4 <HAL_DMA_IRQHandler+0xa14>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d03b      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a74      	ldr	r2, [pc, #464]	@ (80085d8 <HAL_DMA_IRQHandler+0xa18>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d036      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a73      	ldr	r2, [pc, #460]	@ (80085dc <HAL_DMA_IRQHandler+0xa1c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d031      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a71      	ldr	r2, [pc, #452]	@ (80085e0 <HAL_DMA_IRQHandler+0xa20>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d02c      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a70      	ldr	r2, [pc, #448]	@ (80085e4 <HAL_DMA_IRQHandler+0xa24>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d027      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a6e      	ldr	r2, [pc, #440]	@ (80085e8 <HAL_DMA_IRQHandler+0xa28>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d022      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a6d      	ldr	r2, [pc, #436]	@ (80085ec <HAL_DMA_IRQHandler+0xa2c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d01d      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a6b      	ldr	r2, [pc, #428]	@ (80085f0 <HAL_DMA_IRQHandler+0xa30>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d018      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a6a      	ldr	r2, [pc, #424]	@ (80085f4 <HAL_DMA_IRQHandler+0xa34>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d013      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a68      	ldr	r2, [pc, #416]	@ (80085f8 <HAL_DMA_IRQHandler+0xa38>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d00e      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a67      	ldr	r2, [pc, #412]	@ (80085fc <HAL_DMA_IRQHandler+0xa3c>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d009      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a65      	ldr	r2, [pc, #404]	@ (8008600 <HAL_DMA_IRQHandler+0xa40>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d004      	beq.n	8008478 <HAL_DMA_IRQHandler+0x8b8>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a64      	ldr	r2, [pc, #400]	@ (8008604 <HAL_DMA_IRQHandler+0xa44>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d108      	bne.n	800848a <HAL_DMA_IRQHandler+0x8ca>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0201 	bic.w	r2, r2, #1
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	e007      	b.n	800849a <HAL_DMA_IRQHandler+0x8da>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0201 	bic.w	r2, r2, #1
 8008498:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3301      	adds	r3, #1
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d307      	bcc.n	80084b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1f2      	bne.n	800849a <HAL_DMA_IRQHandler+0x8da>
 80084b4:	e000      	b.n	80084b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80084b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d004      	beq.n	80084d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2203      	movs	r2, #3
 80084ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80084ce:	e003      	b.n	80084d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 8272 	beq.w	80089ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	4798      	blx	r3
 80084f2:	e26c      	b.n	80089ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a43      	ldr	r2, [pc, #268]	@ (8008608 <HAL_DMA_IRQHandler+0xa48>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d022      	beq.n	8008544 <HAL_DMA_IRQHandler+0x984>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a42      	ldr	r2, [pc, #264]	@ (800860c <HAL_DMA_IRQHandler+0xa4c>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d01d      	beq.n	8008544 <HAL_DMA_IRQHandler+0x984>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a40      	ldr	r2, [pc, #256]	@ (8008610 <HAL_DMA_IRQHandler+0xa50>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d018      	beq.n	8008544 <HAL_DMA_IRQHandler+0x984>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a3f      	ldr	r2, [pc, #252]	@ (8008614 <HAL_DMA_IRQHandler+0xa54>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d013      	beq.n	8008544 <HAL_DMA_IRQHandler+0x984>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a3d      	ldr	r2, [pc, #244]	@ (8008618 <HAL_DMA_IRQHandler+0xa58>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00e      	beq.n	8008544 <HAL_DMA_IRQHandler+0x984>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a3c      	ldr	r2, [pc, #240]	@ (800861c <HAL_DMA_IRQHandler+0xa5c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d009      	beq.n	8008544 <HAL_DMA_IRQHandler+0x984>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a3a      	ldr	r2, [pc, #232]	@ (8008620 <HAL_DMA_IRQHandler+0xa60>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d004      	beq.n	8008544 <HAL_DMA_IRQHandler+0x984>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a39      	ldr	r2, [pc, #228]	@ (8008624 <HAL_DMA_IRQHandler+0xa64>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d101      	bne.n	8008548 <HAL_DMA_IRQHandler+0x988>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <HAL_DMA_IRQHandler+0x98a>
 8008548:	2300      	movs	r3, #0
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 823f 	beq.w	80089ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800855c:	f003 031f 	and.w	r3, r3, #31
 8008560:	2204      	movs	r2, #4
 8008562:	409a      	lsls	r2, r3
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	4013      	ands	r3, r2
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 80cd 	beq.w	8008708 <HAL_DMA_IRQHandler+0xb48>
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f003 0304 	and.w	r3, r3, #4
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 80c7 	beq.w	8008708 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800857e:	f003 031f 	and.w	r3, r3, #31
 8008582:	2204      	movs	r2, #4
 8008584:	409a      	lsls	r2, r3
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008590:	2b00      	cmp	r3, #0
 8008592:	d049      	beq.n	8008628 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d109      	bne.n	80085b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 8210 	beq.w	80089c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085b0:	e20a      	b.n	80089c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 8206 	beq.w	80089c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085c4:	e200      	b.n	80089c8 <HAL_DMA_IRQHandler+0xe08>
 80085c6:	bf00      	nop
 80085c8:	40020010 	.word	0x40020010
 80085cc:	40020028 	.word	0x40020028
 80085d0:	40020040 	.word	0x40020040
 80085d4:	40020058 	.word	0x40020058
 80085d8:	40020070 	.word	0x40020070
 80085dc:	40020088 	.word	0x40020088
 80085e0:	400200a0 	.word	0x400200a0
 80085e4:	400200b8 	.word	0x400200b8
 80085e8:	40020410 	.word	0x40020410
 80085ec:	40020428 	.word	0x40020428
 80085f0:	40020440 	.word	0x40020440
 80085f4:	40020458 	.word	0x40020458
 80085f8:	40020470 	.word	0x40020470
 80085fc:	40020488 	.word	0x40020488
 8008600:	400204a0 	.word	0x400204a0
 8008604:	400204b8 	.word	0x400204b8
 8008608:	58025408 	.word	0x58025408
 800860c:	5802541c 	.word	0x5802541c
 8008610:	58025430 	.word	0x58025430
 8008614:	58025444 	.word	0x58025444
 8008618:	58025458 	.word	0x58025458
 800861c:	5802546c 	.word	0x5802546c
 8008620:	58025480 	.word	0x58025480
 8008624:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d160      	bne.n	80086f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a7f      	ldr	r2, [pc, #508]	@ (8008834 <HAL_DMA_IRQHandler+0xc74>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d04a      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a7d      	ldr	r2, [pc, #500]	@ (8008838 <HAL_DMA_IRQHandler+0xc78>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d045      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a7c      	ldr	r2, [pc, #496]	@ (800883c <HAL_DMA_IRQHandler+0xc7c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d040      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a7a      	ldr	r2, [pc, #488]	@ (8008840 <HAL_DMA_IRQHandler+0xc80>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d03b      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a79      	ldr	r2, [pc, #484]	@ (8008844 <HAL_DMA_IRQHandler+0xc84>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d036      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a77      	ldr	r2, [pc, #476]	@ (8008848 <HAL_DMA_IRQHandler+0xc88>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d031      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a76      	ldr	r2, [pc, #472]	@ (800884c <HAL_DMA_IRQHandler+0xc8c>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d02c      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a74      	ldr	r2, [pc, #464]	@ (8008850 <HAL_DMA_IRQHandler+0xc90>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d027      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a73      	ldr	r2, [pc, #460]	@ (8008854 <HAL_DMA_IRQHandler+0xc94>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d022      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a71      	ldr	r2, [pc, #452]	@ (8008858 <HAL_DMA_IRQHandler+0xc98>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d01d      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a70      	ldr	r2, [pc, #448]	@ (800885c <HAL_DMA_IRQHandler+0xc9c>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d018      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a6e      	ldr	r2, [pc, #440]	@ (8008860 <HAL_DMA_IRQHandler+0xca0>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d013      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a6d      	ldr	r2, [pc, #436]	@ (8008864 <HAL_DMA_IRQHandler+0xca4>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d00e      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a6b      	ldr	r2, [pc, #428]	@ (8008868 <HAL_DMA_IRQHandler+0xca8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d009      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a6a      	ldr	r2, [pc, #424]	@ (800886c <HAL_DMA_IRQHandler+0xcac>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d004      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xb12>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a68      	ldr	r2, [pc, #416]	@ (8008870 <HAL_DMA_IRQHandler+0xcb0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d108      	bne.n	80086e4 <HAL_DMA_IRQHandler+0xb24>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0208 	bic.w	r2, r2, #8
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	e007      	b.n	80086f4 <HAL_DMA_IRQHandler+0xb34>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0204 	bic.w	r2, r2, #4
 80086f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8165 	beq.w	80089c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008706:	e15f      	b.n	80089c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800870c:	f003 031f 	and.w	r3, r3, #31
 8008710:	2202      	movs	r2, #2
 8008712:	409a      	lsls	r2, r3
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	4013      	ands	r3, r2
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 80c5 	beq.w	80088a8 <HAL_DMA_IRQHandler+0xce8>
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 80bf 	beq.w	80088a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800872e:	f003 031f 	and.w	r3, r3, #31
 8008732:	2202      	movs	r2, #2
 8008734:	409a      	lsls	r2, r3
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d018      	beq.n	8008776 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 813a 	beq.w	80089cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008760:	e134      	b.n	80089cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 8130 	beq.w	80089cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008774:	e12a      	b.n	80089cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	f040 8089 	bne.w	8008894 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a2b      	ldr	r2, [pc, #172]	@ (8008834 <HAL_DMA_IRQHandler+0xc74>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d04a      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a29      	ldr	r2, [pc, #164]	@ (8008838 <HAL_DMA_IRQHandler+0xc78>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d045      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a28      	ldr	r2, [pc, #160]	@ (800883c <HAL_DMA_IRQHandler+0xc7c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d040      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a26      	ldr	r2, [pc, #152]	@ (8008840 <HAL_DMA_IRQHandler+0xc80>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d03b      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a25      	ldr	r2, [pc, #148]	@ (8008844 <HAL_DMA_IRQHandler+0xc84>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d036      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a23      	ldr	r2, [pc, #140]	@ (8008848 <HAL_DMA_IRQHandler+0xc88>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d031      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a22      	ldr	r2, [pc, #136]	@ (800884c <HAL_DMA_IRQHandler+0xc8c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d02c      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a20      	ldr	r2, [pc, #128]	@ (8008850 <HAL_DMA_IRQHandler+0xc90>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d027      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1f      	ldr	r2, [pc, #124]	@ (8008854 <HAL_DMA_IRQHandler+0xc94>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d022      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008858 <HAL_DMA_IRQHandler+0xc98>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d01d      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a1c      	ldr	r2, [pc, #112]	@ (800885c <HAL_DMA_IRQHandler+0xc9c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d018      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a1a      	ldr	r2, [pc, #104]	@ (8008860 <HAL_DMA_IRQHandler+0xca0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a19      	ldr	r2, [pc, #100]	@ (8008864 <HAL_DMA_IRQHandler+0xca4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d00e      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a17      	ldr	r2, [pc, #92]	@ (8008868 <HAL_DMA_IRQHandler+0xca8>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d009      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a16      	ldr	r2, [pc, #88]	@ (800886c <HAL_DMA_IRQHandler+0xcac>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d004      	beq.n	8008822 <HAL_DMA_IRQHandler+0xc62>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a14      	ldr	r2, [pc, #80]	@ (8008870 <HAL_DMA_IRQHandler+0xcb0>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d128      	bne.n	8008874 <HAL_DMA_IRQHandler+0xcb4>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0214 	bic.w	r2, r2, #20
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	e027      	b.n	8008884 <HAL_DMA_IRQHandler+0xcc4>
 8008834:	40020010 	.word	0x40020010
 8008838:	40020028 	.word	0x40020028
 800883c:	40020040 	.word	0x40020040
 8008840:	40020058 	.word	0x40020058
 8008844:	40020070 	.word	0x40020070
 8008848:	40020088 	.word	0x40020088
 800884c:	400200a0 	.word	0x400200a0
 8008850:	400200b8 	.word	0x400200b8
 8008854:	40020410 	.word	0x40020410
 8008858:	40020428 	.word	0x40020428
 800885c:	40020440 	.word	0x40020440
 8008860:	40020458 	.word	0x40020458
 8008864:	40020470 	.word	0x40020470
 8008868:	40020488 	.word	0x40020488
 800886c:	400204a0 	.word	0x400204a0
 8008870:	400204b8 	.word	0x400204b8
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 020a 	bic.w	r2, r2, #10
 8008882:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 8097 	beq.w	80089cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088a6:	e091      	b.n	80089cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ac:	f003 031f 	and.w	r3, r3, #31
 80088b0:	2208      	movs	r2, #8
 80088b2:	409a      	lsls	r2, r3
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	4013      	ands	r3, r2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 8088 	beq.w	80089ce <HAL_DMA_IRQHandler+0xe0e>
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8082 	beq.w	80089ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a41      	ldr	r2, [pc, #260]	@ (80089d4 <HAL_DMA_IRQHandler+0xe14>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d04a      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a3f      	ldr	r2, [pc, #252]	@ (80089d8 <HAL_DMA_IRQHandler+0xe18>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d045      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a3e      	ldr	r2, [pc, #248]	@ (80089dc <HAL_DMA_IRQHandler+0xe1c>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d040      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a3c      	ldr	r2, [pc, #240]	@ (80089e0 <HAL_DMA_IRQHandler+0xe20>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d03b      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a3b      	ldr	r2, [pc, #236]	@ (80089e4 <HAL_DMA_IRQHandler+0xe24>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d036      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a39      	ldr	r2, [pc, #228]	@ (80089e8 <HAL_DMA_IRQHandler+0xe28>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d031      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a38      	ldr	r2, [pc, #224]	@ (80089ec <HAL_DMA_IRQHandler+0xe2c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d02c      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a36      	ldr	r2, [pc, #216]	@ (80089f0 <HAL_DMA_IRQHandler+0xe30>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d027      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a35      	ldr	r2, [pc, #212]	@ (80089f4 <HAL_DMA_IRQHandler+0xe34>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d022      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a33      	ldr	r2, [pc, #204]	@ (80089f8 <HAL_DMA_IRQHandler+0xe38>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d01d      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a32      	ldr	r2, [pc, #200]	@ (80089fc <HAL_DMA_IRQHandler+0xe3c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d018      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a30      	ldr	r2, [pc, #192]	@ (8008a00 <HAL_DMA_IRQHandler+0xe40>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d013      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a2f      	ldr	r2, [pc, #188]	@ (8008a04 <HAL_DMA_IRQHandler+0xe44>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d00e      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a2d      	ldr	r2, [pc, #180]	@ (8008a08 <HAL_DMA_IRQHandler+0xe48>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d009      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a2c      	ldr	r2, [pc, #176]	@ (8008a0c <HAL_DMA_IRQHandler+0xe4c>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d004      	beq.n	800896a <HAL_DMA_IRQHandler+0xdaa>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a2a      	ldr	r2, [pc, #168]	@ (8008a10 <HAL_DMA_IRQHandler+0xe50>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d108      	bne.n	800897c <HAL_DMA_IRQHandler+0xdbc>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 021c 	bic.w	r2, r2, #28
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	e007      	b.n	800898c <HAL_DMA_IRQHandler+0xdcc>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 020e 	bic.w	r2, r2, #14
 800898a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008990:	f003 031f 	and.w	r3, r3, #31
 8008994:	2201      	movs	r2, #1
 8008996:	409a      	lsls	r2, r3
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d009      	beq.n	80089ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	4798      	blx	r3
 80089c2:	e004      	b.n	80089ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80089c4:	bf00      	nop
 80089c6:	e002      	b.n	80089ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089c8:	bf00      	nop
 80089ca:	e000      	b.n	80089ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80089ce:	3728      	adds	r7, #40	@ 0x28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	40020010 	.word	0x40020010
 80089d8:	40020028 	.word	0x40020028
 80089dc:	40020040 	.word	0x40020040
 80089e0:	40020058 	.word	0x40020058
 80089e4:	40020070 	.word	0x40020070
 80089e8:	40020088 	.word	0x40020088
 80089ec:	400200a0 	.word	0x400200a0
 80089f0:	400200b8 	.word	0x400200b8
 80089f4:	40020410 	.word	0x40020410
 80089f8:	40020428 	.word	0x40020428
 80089fc:	40020440 	.word	0x40020440
 8008a00:	40020458 	.word	0x40020458
 8008a04:	40020470 	.word	0x40020470
 8008a08:	40020488 	.word	0x40020488
 8008a0c:	400204a0 	.word	0x400204a0
 8008a10:	400204b8 	.word	0x400204b8

08008a14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a26:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a2c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a7f      	ldr	r2, [pc, #508]	@ (8008c30 <DMA_SetConfig+0x21c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d072      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a7d      	ldr	r2, [pc, #500]	@ (8008c34 <DMA_SetConfig+0x220>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d06d      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a7c      	ldr	r2, [pc, #496]	@ (8008c38 <DMA_SetConfig+0x224>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d068      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a7a      	ldr	r2, [pc, #488]	@ (8008c3c <DMA_SetConfig+0x228>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d063      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a79      	ldr	r2, [pc, #484]	@ (8008c40 <DMA_SetConfig+0x22c>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d05e      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a77      	ldr	r2, [pc, #476]	@ (8008c44 <DMA_SetConfig+0x230>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d059      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a76      	ldr	r2, [pc, #472]	@ (8008c48 <DMA_SetConfig+0x234>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d054      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a74      	ldr	r2, [pc, #464]	@ (8008c4c <DMA_SetConfig+0x238>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d04f      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a73      	ldr	r2, [pc, #460]	@ (8008c50 <DMA_SetConfig+0x23c>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d04a      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a71      	ldr	r2, [pc, #452]	@ (8008c54 <DMA_SetConfig+0x240>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d045      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a70      	ldr	r2, [pc, #448]	@ (8008c58 <DMA_SetConfig+0x244>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d040      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a6e      	ldr	r2, [pc, #440]	@ (8008c5c <DMA_SetConfig+0x248>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d03b      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a6d      	ldr	r2, [pc, #436]	@ (8008c60 <DMA_SetConfig+0x24c>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d036      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a6b      	ldr	r2, [pc, #428]	@ (8008c64 <DMA_SetConfig+0x250>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d031      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a6a      	ldr	r2, [pc, #424]	@ (8008c68 <DMA_SetConfig+0x254>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d02c      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a68      	ldr	r2, [pc, #416]	@ (8008c6c <DMA_SetConfig+0x258>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d027      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a67      	ldr	r2, [pc, #412]	@ (8008c70 <DMA_SetConfig+0x25c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d022      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a65      	ldr	r2, [pc, #404]	@ (8008c74 <DMA_SetConfig+0x260>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d01d      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a64      	ldr	r2, [pc, #400]	@ (8008c78 <DMA_SetConfig+0x264>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d018      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a62      	ldr	r2, [pc, #392]	@ (8008c7c <DMA_SetConfig+0x268>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d013      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a61      	ldr	r2, [pc, #388]	@ (8008c80 <DMA_SetConfig+0x26c>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00e      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a5f      	ldr	r2, [pc, #380]	@ (8008c84 <DMA_SetConfig+0x270>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d009      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a5e      	ldr	r2, [pc, #376]	@ (8008c88 <DMA_SetConfig+0x274>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d004      	beq.n	8008b1e <DMA_SetConfig+0x10a>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a5c      	ldr	r2, [pc, #368]	@ (8008c8c <DMA_SetConfig+0x278>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d101      	bne.n	8008b22 <DMA_SetConfig+0x10e>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e000      	b.n	8008b24 <DMA_SetConfig+0x110>
 8008b22:	2300      	movs	r3, #0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00d      	beq.n	8008b44 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008b30:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d004      	beq.n	8008b44 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008b42:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a39      	ldr	r2, [pc, #228]	@ (8008c30 <DMA_SetConfig+0x21c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d04a      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a38      	ldr	r2, [pc, #224]	@ (8008c34 <DMA_SetConfig+0x220>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d045      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a36      	ldr	r2, [pc, #216]	@ (8008c38 <DMA_SetConfig+0x224>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d040      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a35      	ldr	r2, [pc, #212]	@ (8008c3c <DMA_SetConfig+0x228>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d03b      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a33      	ldr	r2, [pc, #204]	@ (8008c40 <DMA_SetConfig+0x22c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d036      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a32      	ldr	r2, [pc, #200]	@ (8008c44 <DMA_SetConfig+0x230>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d031      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a30      	ldr	r2, [pc, #192]	@ (8008c48 <DMA_SetConfig+0x234>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d02c      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8008c4c <DMA_SetConfig+0x238>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d027      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a2d      	ldr	r2, [pc, #180]	@ (8008c50 <DMA_SetConfig+0x23c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d022      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8008c54 <DMA_SetConfig+0x240>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d01d      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a2a      	ldr	r2, [pc, #168]	@ (8008c58 <DMA_SetConfig+0x244>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d018      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a29      	ldr	r2, [pc, #164]	@ (8008c5c <DMA_SetConfig+0x248>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d013      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a27      	ldr	r2, [pc, #156]	@ (8008c60 <DMA_SetConfig+0x24c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00e      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a26      	ldr	r2, [pc, #152]	@ (8008c64 <DMA_SetConfig+0x250>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d009      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a24      	ldr	r2, [pc, #144]	@ (8008c68 <DMA_SetConfig+0x254>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d004      	beq.n	8008be4 <DMA_SetConfig+0x1d0>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a23      	ldr	r2, [pc, #140]	@ (8008c6c <DMA_SetConfig+0x258>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d101      	bne.n	8008be8 <DMA_SetConfig+0x1d4>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e000      	b.n	8008bea <DMA_SetConfig+0x1d6>
 8008be8:	2300      	movs	r3, #0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d059      	beq.n	8008ca2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bf2:	f003 031f 	and.w	r3, r3, #31
 8008bf6:	223f      	movs	r2, #63	@ 0x3f
 8008bf8:	409a      	lsls	r2, r3
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008c0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	2b40      	cmp	r3, #64	@ 0x40
 8008c1c:	d138      	bne.n	8008c90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008c2e:	e086      	b.n	8008d3e <DMA_SetConfig+0x32a>
 8008c30:	40020010 	.word	0x40020010
 8008c34:	40020028 	.word	0x40020028
 8008c38:	40020040 	.word	0x40020040
 8008c3c:	40020058 	.word	0x40020058
 8008c40:	40020070 	.word	0x40020070
 8008c44:	40020088 	.word	0x40020088
 8008c48:	400200a0 	.word	0x400200a0
 8008c4c:	400200b8 	.word	0x400200b8
 8008c50:	40020410 	.word	0x40020410
 8008c54:	40020428 	.word	0x40020428
 8008c58:	40020440 	.word	0x40020440
 8008c5c:	40020458 	.word	0x40020458
 8008c60:	40020470 	.word	0x40020470
 8008c64:	40020488 	.word	0x40020488
 8008c68:	400204a0 	.word	0x400204a0
 8008c6c:	400204b8 	.word	0x400204b8
 8008c70:	58025408 	.word	0x58025408
 8008c74:	5802541c 	.word	0x5802541c
 8008c78:	58025430 	.word	0x58025430
 8008c7c:	58025444 	.word	0x58025444
 8008c80:	58025458 	.word	0x58025458
 8008c84:	5802546c 	.word	0x5802546c
 8008c88:	58025480 	.word	0x58025480
 8008c8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	60da      	str	r2, [r3, #12]
}
 8008ca0:	e04d      	b.n	8008d3e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a29      	ldr	r2, [pc, #164]	@ (8008d4c <DMA_SetConfig+0x338>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d022      	beq.n	8008cf2 <DMA_SetConfig+0x2de>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a27      	ldr	r2, [pc, #156]	@ (8008d50 <DMA_SetConfig+0x33c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d01d      	beq.n	8008cf2 <DMA_SetConfig+0x2de>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a26      	ldr	r2, [pc, #152]	@ (8008d54 <DMA_SetConfig+0x340>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d018      	beq.n	8008cf2 <DMA_SetConfig+0x2de>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a24      	ldr	r2, [pc, #144]	@ (8008d58 <DMA_SetConfig+0x344>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d013      	beq.n	8008cf2 <DMA_SetConfig+0x2de>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a23      	ldr	r2, [pc, #140]	@ (8008d5c <DMA_SetConfig+0x348>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d00e      	beq.n	8008cf2 <DMA_SetConfig+0x2de>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a21      	ldr	r2, [pc, #132]	@ (8008d60 <DMA_SetConfig+0x34c>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d009      	beq.n	8008cf2 <DMA_SetConfig+0x2de>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a20      	ldr	r2, [pc, #128]	@ (8008d64 <DMA_SetConfig+0x350>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d004      	beq.n	8008cf2 <DMA_SetConfig+0x2de>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a1e      	ldr	r2, [pc, #120]	@ (8008d68 <DMA_SetConfig+0x354>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d101      	bne.n	8008cf6 <DMA_SetConfig+0x2e2>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <DMA_SetConfig+0x2e4>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d020      	beq.n	8008d3e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d00:	f003 031f 	and.w	r3, r3, #31
 8008d04:	2201      	movs	r2, #1
 8008d06:	409a      	lsls	r2, r3
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	2b40      	cmp	r3, #64	@ 0x40
 8008d1a:	d108      	bne.n	8008d2e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	60da      	str	r2, [r3, #12]
}
 8008d2c:	e007      	b.n	8008d3e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	60da      	str	r2, [r3, #12]
}
 8008d3e:	bf00      	nop
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	58025408 	.word	0x58025408
 8008d50:	5802541c 	.word	0x5802541c
 8008d54:	58025430 	.word	0x58025430
 8008d58:	58025444 	.word	0x58025444
 8008d5c:	58025458 	.word	0x58025458
 8008d60:	5802546c 	.word	0x5802546c
 8008d64:	58025480 	.word	0x58025480
 8008d68:	58025494 	.word	0x58025494

08008d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a42      	ldr	r2, [pc, #264]	@ (8008e84 <DMA_CalcBaseAndBitshift+0x118>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d04a      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a41      	ldr	r2, [pc, #260]	@ (8008e88 <DMA_CalcBaseAndBitshift+0x11c>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d045      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008e8c <DMA_CalcBaseAndBitshift+0x120>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d040      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a3e      	ldr	r2, [pc, #248]	@ (8008e90 <DMA_CalcBaseAndBitshift+0x124>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d03b      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a3c      	ldr	r2, [pc, #240]	@ (8008e94 <DMA_CalcBaseAndBitshift+0x128>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d036      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a3b      	ldr	r2, [pc, #236]	@ (8008e98 <DMA_CalcBaseAndBitshift+0x12c>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d031      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a39      	ldr	r2, [pc, #228]	@ (8008e9c <DMA_CalcBaseAndBitshift+0x130>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d02c      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a38      	ldr	r2, [pc, #224]	@ (8008ea0 <DMA_CalcBaseAndBitshift+0x134>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d027      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a36      	ldr	r2, [pc, #216]	@ (8008ea4 <DMA_CalcBaseAndBitshift+0x138>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d022      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a35      	ldr	r2, [pc, #212]	@ (8008ea8 <DMA_CalcBaseAndBitshift+0x13c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d01d      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a33      	ldr	r2, [pc, #204]	@ (8008eac <DMA_CalcBaseAndBitshift+0x140>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d018      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a32      	ldr	r2, [pc, #200]	@ (8008eb0 <DMA_CalcBaseAndBitshift+0x144>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d013      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a30      	ldr	r2, [pc, #192]	@ (8008eb4 <DMA_CalcBaseAndBitshift+0x148>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d00e      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8008eb8 <DMA_CalcBaseAndBitshift+0x14c>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d009      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a2d      	ldr	r2, [pc, #180]	@ (8008ebc <DMA_CalcBaseAndBitshift+0x150>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d004      	beq.n	8008e14 <DMA_CalcBaseAndBitshift+0xa8>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8008ec0 <DMA_CalcBaseAndBitshift+0x154>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d101      	bne.n	8008e18 <DMA_CalcBaseAndBitshift+0xac>
 8008e14:	2301      	movs	r3, #1
 8008e16:	e000      	b.n	8008e1a <DMA_CalcBaseAndBitshift+0xae>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d024      	beq.n	8008e68 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	3b10      	subs	r3, #16
 8008e26:	4a27      	ldr	r2, [pc, #156]	@ (8008ec4 <DMA_CalcBaseAndBitshift+0x158>)
 8008e28:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2c:	091b      	lsrs	r3, r3, #4
 8008e2e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	4a24      	ldr	r2, [pc, #144]	@ (8008ec8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008e38:	5cd3      	ldrb	r3, [r2, r3]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d908      	bls.n	8008e58 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8008ecc <DMA_CalcBaseAndBitshift+0x160>)
 8008e4e:	4013      	ands	r3, r2
 8008e50:	1d1a      	adds	r2, r3, #4
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	659a      	str	r2, [r3, #88]	@ 0x58
 8008e56:	e00d      	b.n	8008e74 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ecc <DMA_CalcBaseAndBitshift+0x160>)
 8008e60:	4013      	ands	r3, r2
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e66:	e005      	b.n	8008e74 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	40020010 	.word	0x40020010
 8008e88:	40020028 	.word	0x40020028
 8008e8c:	40020040 	.word	0x40020040
 8008e90:	40020058 	.word	0x40020058
 8008e94:	40020070 	.word	0x40020070
 8008e98:	40020088 	.word	0x40020088
 8008e9c:	400200a0 	.word	0x400200a0
 8008ea0:	400200b8 	.word	0x400200b8
 8008ea4:	40020410 	.word	0x40020410
 8008ea8:	40020428 	.word	0x40020428
 8008eac:	40020440 	.word	0x40020440
 8008eb0:	40020458 	.word	0x40020458
 8008eb4:	40020470 	.word	0x40020470
 8008eb8:	40020488 	.word	0x40020488
 8008ebc:	400204a0 	.word	0x400204a0
 8008ec0:	400204b8 	.word	0x400204b8
 8008ec4:	aaaaaaab 	.word	0xaaaaaaab
 8008ec8:	080160c4 	.word	0x080160c4
 8008ecc:	fffffc00 	.word	0xfffffc00

08008ed0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d120      	bne.n	8008f26 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d858      	bhi.n	8008f9e <DMA_CheckFifoParam+0xce>
 8008eec:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef4 <DMA_CheckFifoParam+0x24>)
 8008eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef2:	bf00      	nop
 8008ef4:	08008f05 	.word	0x08008f05
 8008ef8:	08008f17 	.word	0x08008f17
 8008efc:	08008f05 	.word	0x08008f05
 8008f00:	08008f9f 	.word	0x08008f9f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d048      	beq.n	8008fa2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f14:	e045      	b.n	8008fa2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008f1e:	d142      	bne.n	8008fa6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f24:	e03f      	b.n	8008fa6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f2e:	d123      	bne.n	8008f78 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d838      	bhi.n	8008faa <DMA_CheckFifoParam+0xda>
 8008f38:	a201      	add	r2, pc, #4	@ (adr r2, 8008f40 <DMA_CheckFifoParam+0x70>)
 8008f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3e:	bf00      	nop
 8008f40:	08008f51 	.word	0x08008f51
 8008f44:	08008f57 	.word	0x08008f57
 8008f48:	08008f51 	.word	0x08008f51
 8008f4c:	08008f69 	.word	0x08008f69
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
        break;
 8008f54:	e030      	b.n	8008fb8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d025      	beq.n	8008fae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f66:	e022      	b.n	8008fae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008f70:	d11f      	bne.n	8008fb2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f76:	e01c      	b.n	8008fb2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d902      	bls.n	8008f86 <DMA_CheckFifoParam+0xb6>
 8008f80:	2b03      	cmp	r3, #3
 8008f82:	d003      	beq.n	8008f8c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008f84:	e018      	b.n	8008fb8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	73fb      	strb	r3, [r7, #15]
        break;
 8008f8a:	e015      	b.n	8008fb8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00e      	beq.n	8008fb6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f9c:	e00b      	b.n	8008fb6 <DMA_CheckFifoParam+0xe6>
        break;
 8008f9e:	bf00      	nop
 8008fa0:	e00a      	b.n	8008fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8008fa2:	bf00      	nop
 8008fa4:	e008      	b.n	8008fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8008fa6:	bf00      	nop
 8008fa8:	e006      	b.n	8008fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8008faa:	bf00      	nop
 8008fac:	e004      	b.n	8008fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8008fae:	bf00      	nop
 8008fb0:	e002      	b.n	8008fb8 <DMA_CheckFifoParam+0xe8>
        break;
 8008fb2:	bf00      	nop
 8008fb4:	e000      	b.n	8008fb8 <DMA_CheckFifoParam+0xe8>
    break;
 8008fb6:	bf00      	nop
    }
  }

  return status;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop

08008fc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a38      	ldr	r2, [pc, #224]	@ (80090bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d022      	beq.n	8009026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a36      	ldr	r2, [pc, #216]	@ (80090c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d01d      	beq.n	8009026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a35      	ldr	r2, [pc, #212]	@ (80090c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d018      	beq.n	8009026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a33      	ldr	r2, [pc, #204]	@ (80090c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d013      	beq.n	8009026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a32      	ldr	r2, [pc, #200]	@ (80090cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d00e      	beq.n	8009026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a30      	ldr	r2, [pc, #192]	@ (80090d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d009      	beq.n	8009026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a2f      	ldr	r2, [pc, #188]	@ (80090d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d004      	beq.n	8009026 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a2d      	ldr	r2, [pc, #180]	@ (80090d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d101      	bne.n	800902a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800902a:	2300      	movs	r3, #0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01a      	beq.n	8009066 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	b2db      	uxtb	r3, r3
 8009036:	3b08      	subs	r3, #8
 8009038:	4a28      	ldr	r2, [pc, #160]	@ (80090dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800903a:	fba2 2303 	umull	r2, r3, r2, r3
 800903e:	091b      	lsrs	r3, r3, #4
 8009040:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	4b26      	ldr	r3, [pc, #152]	@ (80090e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	461a      	mov	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a24      	ldr	r2, [pc, #144]	@ (80090e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009054:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f003 031f 	and.w	r3, r3, #31
 800905c:	2201      	movs	r2, #1
 800905e:	409a      	lsls	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009064:	e024      	b.n	80090b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	3b10      	subs	r3, #16
 800906e:	4a1e      	ldr	r2, [pc, #120]	@ (80090e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009070:	fba2 2303 	umull	r2, r3, r2, r3
 8009074:	091b      	lsrs	r3, r3, #4
 8009076:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	4a1c      	ldr	r2, [pc, #112]	@ (80090ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d806      	bhi.n	800908e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	4a1b      	ldr	r2, [pc, #108]	@ (80090f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d902      	bls.n	800908e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	3308      	adds	r3, #8
 800908c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4b18      	ldr	r3, [pc, #96]	@ (80090f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	461a      	mov	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a16      	ldr	r2, [pc, #88]	@ (80090f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80090a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f003 031f 	and.w	r3, r3, #31
 80090a8:	2201      	movs	r2, #1
 80090aa:	409a      	lsls	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80090b0:	bf00      	nop
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	58025408 	.word	0x58025408
 80090c0:	5802541c 	.word	0x5802541c
 80090c4:	58025430 	.word	0x58025430
 80090c8:	58025444 	.word	0x58025444
 80090cc:	58025458 	.word	0x58025458
 80090d0:	5802546c 	.word	0x5802546c
 80090d4:	58025480 	.word	0x58025480
 80090d8:	58025494 	.word	0x58025494
 80090dc:	cccccccd 	.word	0xcccccccd
 80090e0:	16009600 	.word	0x16009600
 80090e4:	58025880 	.word	0x58025880
 80090e8:	aaaaaaab 	.word	0xaaaaaaab
 80090ec:	400204b8 	.word	0x400204b8
 80090f0:	4002040f 	.word	0x4002040f
 80090f4:	10008200 	.word	0x10008200
 80090f8:	40020880 	.word	0x40020880

080090fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	b2db      	uxtb	r3, r3
 800910a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d04a      	beq.n	80091a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2b08      	cmp	r3, #8
 8009116:	d847      	bhi.n	80091a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a25      	ldr	r2, [pc, #148]	@ (80091b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d022      	beq.n	8009168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a24      	ldr	r2, [pc, #144]	@ (80091b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d01d      	beq.n	8009168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a22      	ldr	r2, [pc, #136]	@ (80091bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d018      	beq.n	8009168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a21      	ldr	r2, [pc, #132]	@ (80091c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d013      	beq.n	8009168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a1f      	ldr	r2, [pc, #124]	@ (80091c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d00e      	beq.n	8009168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a1e      	ldr	r2, [pc, #120]	@ (80091c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d009      	beq.n	8009168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a1c      	ldr	r2, [pc, #112]	@ (80091cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d004      	beq.n	8009168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a1b      	ldr	r2, [pc, #108]	@ (80091d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d101      	bne.n	800916c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009168:	2301      	movs	r3, #1
 800916a:	e000      	b.n	800916e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800916c:	2300      	movs	r3, #0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00a      	beq.n	8009188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	4b17      	ldr	r3, [pc, #92]	@ (80091d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	461a      	mov	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a15      	ldr	r2, [pc, #84]	@ (80091d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009184:	671a      	str	r2, [r3, #112]	@ 0x70
 8009186:	e009      	b.n	800919c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	4b14      	ldr	r3, [pc, #80]	@ (80091dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	461a      	mov	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a11      	ldr	r2, [pc, #68]	@ (80091e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800919a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	3b01      	subs	r3, #1
 80091a0:	2201      	movs	r2, #1
 80091a2:	409a      	lsls	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80091a8:	bf00      	nop
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	58025408 	.word	0x58025408
 80091b8:	5802541c 	.word	0x5802541c
 80091bc:	58025430 	.word	0x58025430
 80091c0:	58025444 	.word	0x58025444
 80091c4:	58025458 	.word	0x58025458
 80091c8:	5802546c 	.word	0x5802546c
 80091cc:	58025480 	.word	0x58025480
 80091d0:	58025494 	.word	0x58025494
 80091d4:	1600963f 	.word	0x1600963f
 80091d8:	58025940 	.word	0x58025940
 80091dc:	1000823f 	.word	0x1000823f
 80091e0:	40020940 	.word	0x40020940

080091e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b089      	sub	sp, #36	@ 0x24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80091f2:	4b89      	ldr	r3, [pc, #548]	@ (8009418 <HAL_GPIO_Init+0x234>)
 80091f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80091f6:	e194      	b.n	8009522 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	2101      	movs	r1, #1
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	fa01 f303 	lsl.w	r3, r1, r3
 8009204:	4013      	ands	r3, r2
 8009206:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 8186 	beq.w	800951c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f003 0303 	and.w	r3, r3, #3
 8009218:	2b01      	cmp	r3, #1
 800921a:	d005      	beq.n	8009228 <HAL_GPIO_Init+0x44>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	f003 0303 	and.w	r3, r3, #3
 8009224:	2b02      	cmp	r3, #2
 8009226:	d130      	bne.n	800928a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	2203      	movs	r2, #3
 8009234:	fa02 f303 	lsl.w	r3, r2, r3
 8009238:	43db      	mvns	r3, r3
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	4013      	ands	r3, r2
 800923e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	fa02 f303 	lsl.w	r3, r2, r3
 800924c:	69ba      	ldr	r2, [r7, #24]
 800924e:	4313      	orrs	r3, r2
 8009250:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	69ba      	ldr	r2, [r7, #24]
 8009256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800925e:	2201      	movs	r2, #1
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	fa02 f303 	lsl.w	r3, r2, r3
 8009266:	43db      	mvns	r3, r3
 8009268:	69ba      	ldr	r2, [r7, #24]
 800926a:	4013      	ands	r3, r2
 800926c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	091b      	lsrs	r3, r3, #4
 8009274:	f003 0201 	and.w	r2, r3, #1
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	fa02 f303 	lsl.w	r3, r2, r3
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	4313      	orrs	r3, r2
 8009282:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	f003 0303 	and.w	r3, r3, #3
 8009292:	2b03      	cmp	r3, #3
 8009294:	d017      	beq.n	80092c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	005b      	lsls	r3, r3, #1
 80092a0:	2203      	movs	r2, #3
 80092a2:	fa02 f303 	lsl.w	r3, r2, r3
 80092a6:	43db      	mvns	r3, r3
 80092a8:	69ba      	ldr	r2, [r7, #24]
 80092aa:	4013      	ands	r3, r2
 80092ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	689a      	ldr	r2, [r3, #8]
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	4313      	orrs	r3, r2
 80092be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	69ba      	ldr	r2, [r7, #24]
 80092c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d123      	bne.n	800931a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	08da      	lsrs	r2, r3, #3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3208      	adds	r2, #8
 80092da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	f003 0307 	and.w	r3, r3, #7
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	220f      	movs	r2, #15
 80092ea:	fa02 f303 	lsl.w	r3, r2, r3
 80092ee:	43db      	mvns	r3, r3
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	4013      	ands	r3, r2
 80092f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	691a      	ldr	r2, [r3, #16]
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	f003 0307 	and.w	r3, r3, #7
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	fa02 f303 	lsl.w	r3, r2, r3
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	4313      	orrs	r3, r2
 800930a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	08da      	lsrs	r2, r3, #3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3208      	adds	r2, #8
 8009314:	69b9      	ldr	r1, [r7, #24]
 8009316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	2203      	movs	r2, #3
 8009326:	fa02 f303 	lsl.w	r3, r2, r3
 800932a:	43db      	mvns	r3, r3
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	4013      	ands	r3, r2
 8009330:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f003 0203 	and.w	r2, r3, #3
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	fa02 f303 	lsl.w	r3, r2, r3
 8009342:	69ba      	ldr	r2, [r7, #24]
 8009344:	4313      	orrs	r3, r2
 8009346:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	69ba      	ldr	r2, [r7, #24]
 800934c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 80e0 	beq.w	800951c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800935c:	4b2f      	ldr	r3, [pc, #188]	@ (800941c <HAL_GPIO_Init+0x238>)
 800935e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009362:	4a2e      	ldr	r2, [pc, #184]	@ (800941c <HAL_GPIO_Init+0x238>)
 8009364:	f043 0302 	orr.w	r3, r3, #2
 8009368:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800936c:	4b2b      	ldr	r3, [pc, #172]	@ (800941c <HAL_GPIO_Init+0x238>)
 800936e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009372:	f003 0302 	and.w	r3, r3, #2
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800937a:	4a29      	ldr	r2, [pc, #164]	@ (8009420 <HAL_GPIO_Init+0x23c>)
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	089b      	lsrs	r3, r3, #2
 8009380:	3302      	adds	r3, #2
 8009382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	220f      	movs	r2, #15
 8009392:	fa02 f303 	lsl.w	r3, r2, r3
 8009396:	43db      	mvns	r3, r3
 8009398:	69ba      	ldr	r2, [r7, #24]
 800939a:	4013      	ands	r3, r2
 800939c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a20      	ldr	r2, [pc, #128]	@ (8009424 <HAL_GPIO_Init+0x240>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d052      	beq.n	800944c <HAL_GPIO_Init+0x268>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a1f      	ldr	r2, [pc, #124]	@ (8009428 <HAL_GPIO_Init+0x244>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d031      	beq.n	8009412 <HAL_GPIO_Init+0x22e>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a1e      	ldr	r2, [pc, #120]	@ (800942c <HAL_GPIO_Init+0x248>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d02b      	beq.n	800940e <HAL_GPIO_Init+0x22a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009430 <HAL_GPIO_Init+0x24c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d025      	beq.n	800940a <HAL_GPIO_Init+0x226>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a1c      	ldr	r2, [pc, #112]	@ (8009434 <HAL_GPIO_Init+0x250>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d01f      	beq.n	8009406 <HAL_GPIO_Init+0x222>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a1b      	ldr	r2, [pc, #108]	@ (8009438 <HAL_GPIO_Init+0x254>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d019      	beq.n	8009402 <HAL_GPIO_Init+0x21e>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a1a      	ldr	r2, [pc, #104]	@ (800943c <HAL_GPIO_Init+0x258>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d013      	beq.n	80093fe <HAL_GPIO_Init+0x21a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a19      	ldr	r2, [pc, #100]	@ (8009440 <HAL_GPIO_Init+0x25c>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d00d      	beq.n	80093fa <HAL_GPIO_Init+0x216>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a18      	ldr	r2, [pc, #96]	@ (8009444 <HAL_GPIO_Init+0x260>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d007      	beq.n	80093f6 <HAL_GPIO_Init+0x212>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a17      	ldr	r2, [pc, #92]	@ (8009448 <HAL_GPIO_Init+0x264>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d101      	bne.n	80093f2 <HAL_GPIO_Init+0x20e>
 80093ee:	2309      	movs	r3, #9
 80093f0:	e02d      	b.n	800944e <HAL_GPIO_Init+0x26a>
 80093f2:	230a      	movs	r3, #10
 80093f4:	e02b      	b.n	800944e <HAL_GPIO_Init+0x26a>
 80093f6:	2308      	movs	r3, #8
 80093f8:	e029      	b.n	800944e <HAL_GPIO_Init+0x26a>
 80093fa:	2307      	movs	r3, #7
 80093fc:	e027      	b.n	800944e <HAL_GPIO_Init+0x26a>
 80093fe:	2306      	movs	r3, #6
 8009400:	e025      	b.n	800944e <HAL_GPIO_Init+0x26a>
 8009402:	2305      	movs	r3, #5
 8009404:	e023      	b.n	800944e <HAL_GPIO_Init+0x26a>
 8009406:	2304      	movs	r3, #4
 8009408:	e021      	b.n	800944e <HAL_GPIO_Init+0x26a>
 800940a:	2303      	movs	r3, #3
 800940c:	e01f      	b.n	800944e <HAL_GPIO_Init+0x26a>
 800940e:	2302      	movs	r3, #2
 8009410:	e01d      	b.n	800944e <HAL_GPIO_Init+0x26a>
 8009412:	2301      	movs	r3, #1
 8009414:	e01b      	b.n	800944e <HAL_GPIO_Init+0x26a>
 8009416:	bf00      	nop
 8009418:	58000080 	.word	0x58000080
 800941c:	58024400 	.word	0x58024400
 8009420:	58000400 	.word	0x58000400
 8009424:	58020000 	.word	0x58020000
 8009428:	58020400 	.word	0x58020400
 800942c:	58020800 	.word	0x58020800
 8009430:	58020c00 	.word	0x58020c00
 8009434:	58021000 	.word	0x58021000
 8009438:	58021400 	.word	0x58021400
 800943c:	58021800 	.word	0x58021800
 8009440:	58021c00 	.word	0x58021c00
 8009444:	58022000 	.word	0x58022000
 8009448:	58022400 	.word	0x58022400
 800944c:	2300      	movs	r3, #0
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	f002 0203 	and.w	r2, r2, #3
 8009454:	0092      	lsls	r2, r2, #2
 8009456:	4093      	lsls	r3, r2
 8009458:	69ba      	ldr	r2, [r7, #24]
 800945a:	4313      	orrs	r3, r2
 800945c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800945e:	4938      	ldr	r1, [pc, #224]	@ (8009540 <HAL_GPIO_Init+0x35c>)
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	089b      	lsrs	r3, r3, #2
 8009464:	3302      	adds	r3, #2
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800946c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	43db      	mvns	r3, r3
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	4013      	ands	r3, r2
 800947c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800948a:	69ba      	ldr	r2, [r7, #24]
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	4313      	orrs	r3, r2
 8009490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009492:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800949a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	43db      	mvns	r3, r3
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	4013      	ands	r3, r2
 80094aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d003      	beq.n	80094c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80094b8:	69ba      	ldr	r2, [r7, #24]
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	4313      	orrs	r3, r2
 80094be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80094c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	43db      	mvns	r3, r3
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	4013      	ands	r3, r2
 80094d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d003      	beq.n	80094ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	43db      	mvns	r3, r3
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	4013      	ands	r3, r2
 8009500:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800950e:	69ba      	ldr	r2, [r7, #24]
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	4313      	orrs	r3, r2
 8009514:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	3301      	adds	r3, #1
 8009520:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	fa22 f303 	lsr.w	r3, r2, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	f47f ae63 	bne.w	80091f8 <HAL_GPIO_Init+0x14>
  }
}
 8009532:	bf00      	nop
 8009534:	bf00      	nop
 8009536:	3724      	adds	r7, #36	@ 0x24
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	58000400 	.word	0x58000400

08009544 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800954e:	2300      	movs	r3, #0
 8009550:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009552:	4b75      	ldr	r3, [pc, #468]	@ (8009728 <HAL_GPIO_DeInit+0x1e4>)
 8009554:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8009556:	e0d9      	b.n	800970c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8009558:	2201      	movs	r2, #1
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	fa02 f303 	lsl.w	r3, r2, r3
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	4013      	ands	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 80cc 	beq.w	8009706 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800956e:	4a6f      	ldr	r2, [pc, #444]	@ (800972c <HAL_GPIO_DeInit+0x1e8>)
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	089b      	lsrs	r3, r3, #2
 8009574:	3302      	adds	r3, #2
 8009576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800957a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f003 0303 	and.w	r3, r3, #3
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	220f      	movs	r2, #15
 8009586:	fa02 f303 	lsl.w	r3, r2, r3
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	4013      	ands	r3, r2
 800958e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a67      	ldr	r2, [pc, #412]	@ (8009730 <HAL_GPIO_DeInit+0x1ec>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d037      	beq.n	8009608 <HAL_GPIO_DeInit+0xc4>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a66      	ldr	r2, [pc, #408]	@ (8009734 <HAL_GPIO_DeInit+0x1f0>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d031      	beq.n	8009604 <HAL_GPIO_DeInit+0xc0>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a65      	ldr	r2, [pc, #404]	@ (8009738 <HAL_GPIO_DeInit+0x1f4>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d02b      	beq.n	8009600 <HAL_GPIO_DeInit+0xbc>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a64      	ldr	r2, [pc, #400]	@ (800973c <HAL_GPIO_DeInit+0x1f8>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d025      	beq.n	80095fc <HAL_GPIO_DeInit+0xb8>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a63      	ldr	r2, [pc, #396]	@ (8009740 <HAL_GPIO_DeInit+0x1fc>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d01f      	beq.n	80095f8 <HAL_GPIO_DeInit+0xb4>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a62      	ldr	r2, [pc, #392]	@ (8009744 <HAL_GPIO_DeInit+0x200>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d019      	beq.n	80095f4 <HAL_GPIO_DeInit+0xb0>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a61      	ldr	r2, [pc, #388]	@ (8009748 <HAL_GPIO_DeInit+0x204>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d013      	beq.n	80095f0 <HAL_GPIO_DeInit+0xac>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a60      	ldr	r2, [pc, #384]	@ (800974c <HAL_GPIO_DeInit+0x208>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d00d      	beq.n	80095ec <HAL_GPIO_DeInit+0xa8>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a5f      	ldr	r2, [pc, #380]	@ (8009750 <HAL_GPIO_DeInit+0x20c>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d007      	beq.n	80095e8 <HAL_GPIO_DeInit+0xa4>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a5e      	ldr	r2, [pc, #376]	@ (8009754 <HAL_GPIO_DeInit+0x210>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d101      	bne.n	80095e4 <HAL_GPIO_DeInit+0xa0>
 80095e0:	2309      	movs	r3, #9
 80095e2:	e012      	b.n	800960a <HAL_GPIO_DeInit+0xc6>
 80095e4:	230a      	movs	r3, #10
 80095e6:	e010      	b.n	800960a <HAL_GPIO_DeInit+0xc6>
 80095e8:	2308      	movs	r3, #8
 80095ea:	e00e      	b.n	800960a <HAL_GPIO_DeInit+0xc6>
 80095ec:	2307      	movs	r3, #7
 80095ee:	e00c      	b.n	800960a <HAL_GPIO_DeInit+0xc6>
 80095f0:	2306      	movs	r3, #6
 80095f2:	e00a      	b.n	800960a <HAL_GPIO_DeInit+0xc6>
 80095f4:	2305      	movs	r3, #5
 80095f6:	e008      	b.n	800960a <HAL_GPIO_DeInit+0xc6>
 80095f8:	2304      	movs	r3, #4
 80095fa:	e006      	b.n	800960a <HAL_GPIO_DeInit+0xc6>
 80095fc:	2303      	movs	r3, #3
 80095fe:	e004      	b.n	800960a <HAL_GPIO_DeInit+0xc6>
 8009600:	2302      	movs	r3, #2
 8009602:	e002      	b.n	800960a <HAL_GPIO_DeInit+0xc6>
 8009604:	2301      	movs	r3, #1
 8009606:	e000      	b.n	800960a <HAL_GPIO_DeInit+0xc6>
 8009608:	2300      	movs	r3, #0
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	f002 0203 	and.w	r2, r2, #3
 8009610:	0092      	lsls	r2, r2, #2
 8009612:	4093      	lsls	r3, r2
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	429a      	cmp	r2, r3
 8009618:	d136      	bne.n	8009688 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	43db      	mvns	r3, r3
 8009622:	401a      	ands	r2, r3
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	43db      	mvns	r3, r3
 8009630:	401a      	ands	r2, r3
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	43db      	mvns	r3, r3
 8009640:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009644:	4013      	ands	r3, r2
 8009646:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8009648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	43db      	mvns	r3, r3
 8009652:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009656:	4013      	ands	r3, r2
 8009658:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f003 0303 	and.w	r3, r3, #3
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	220f      	movs	r2, #15
 8009664:	fa02 f303 	lsl.w	r3, r2, r3
 8009668:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800966a:	4a30      	ldr	r2, [pc, #192]	@ (800972c <HAL_GPIO_DeInit+0x1e8>)
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	089b      	lsrs	r3, r3, #2
 8009670:	3302      	adds	r3, #2
 8009672:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	43da      	mvns	r2, r3
 800967a:	482c      	ldr	r0, [pc, #176]	@ (800972c <HAL_GPIO_DeInit+0x1e8>)
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	089b      	lsrs	r3, r3, #2
 8009680:	400a      	ands	r2, r1
 8009682:	3302      	adds	r3, #2
 8009684:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	2103      	movs	r1, #3
 8009692:	fa01 f303 	lsl.w	r3, r1, r3
 8009696:	431a      	orrs	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	08da      	lsrs	r2, r3, #3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	3208      	adds	r2, #8
 80096a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f003 0307 	and.w	r3, r3, #7
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	220f      	movs	r2, #15
 80096b2:	fa02 f303 	lsl.w	r3, r2, r3
 80096b6:	43db      	mvns	r3, r3
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	08d2      	lsrs	r2, r2, #3
 80096bc:	4019      	ands	r1, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3208      	adds	r2, #8
 80096c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	2103      	movs	r1, #3
 80096d0:	fa01 f303 	lsl.w	r3, r1, r3
 80096d4:	43db      	mvns	r3, r3
 80096d6:	401a      	ands	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685a      	ldr	r2, [r3, #4]
 80096e0:	2101      	movs	r1, #1
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	fa01 f303 	lsl.w	r3, r1, r3
 80096e8:	43db      	mvns	r3, r3
 80096ea:	401a      	ands	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	689a      	ldr	r2, [r3, #8]
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	2103      	movs	r1, #3
 80096fa:	fa01 f303 	lsl.w	r3, r1, r3
 80096fe:	43db      	mvns	r3, r3
 8009700:	401a      	ands	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	3301      	adds	r3, #1
 800970a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	fa22 f303 	lsr.w	r3, r2, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	f47f af1f 	bne.w	8009558 <HAL_GPIO_DeInit+0x14>
  }
}
 800971a:	bf00      	nop
 800971c:	bf00      	nop
 800971e:	371c      	adds	r7, #28
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	58000080 	.word	0x58000080
 800972c:	58000400 	.word	0x58000400
 8009730:	58020000 	.word	0x58020000
 8009734:	58020400 	.word	0x58020400
 8009738:	58020800 	.word	0x58020800
 800973c:	58020c00 	.word	0x58020c00
 8009740:	58021000 	.word	0x58021000
 8009744:	58021400 	.word	0x58021400
 8009748:	58021800 	.word	0x58021800
 800974c:	58021c00 	.word	0x58021c00
 8009750:	58022000 	.word	0x58022000
 8009754:	58022400 	.word	0x58022400

08009758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	807b      	strh	r3, [r7, #2]
 8009764:	4613      	mov	r3, r2
 8009766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009768:	787b      	ldrb	r3, [r7, #1]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d003      	beq.n	8009776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800976e:	887a      	ldrh	r2, [r7, #2]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009774:	e003      	b.n	800977e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009776:	887b      	ldrh	r3, [r7, #2]
 8009778:	041a      	lsls	r2, r3, #16
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	619a      	str	r2, [r3, #24]
}
 800977e:	bf00      	nop
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
	...

0800978c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e07f      	b.n	800989e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d106      	bne.n	80097b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7f7 ff60 	bl	8001678 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2224      	movs	r2, #36	@ 0x24
 80097bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0201 	bic.w	r2, r2, #1
 80097ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80097dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689a      	ldr	r2, [r3, #8]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80097ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d107      	bne.n	8009806 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	689a      	ldr	r2, [r3, #8]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009802:	609a      	str	r2, [r3, #8]
 8009804:	e006      	b.n	8009814 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	689a      	ldr	r2, [r3, #8]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009812:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	2b02      	cmp	r3, #2
 800981a:	d104      	bne.n	8009826 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009824:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6859      	ldr	r1, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	4b1d      	ldr	r3, [pc, #116]	@ (80098a8 <HAL_I2C_Init+0x11c>)
 8009832:	430b      	orrs	r3, r1
 8009834:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009844:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	691a      	ldr	r2, [r3, #16]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	430a      	orrs	r2, r1
 800985e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	69d9      	ldr	r1, [r3, #28]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a1a      	ldr	r2, [r3, #32]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	430a      	orrs	r2, r1
 800986e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f042 0201 	orr.w	r2, r2, #1
 800987e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2220      	movs	r2, #32
 800988a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	02008000 	.word	0x02008000

080098ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	2b20      	cmp	r3, #32
 80098c0:	d138      	bne.n	8009934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d101      	bne.n	80098d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80098cc:	2302      	movs	r3, #2
 80098ce:	e032      	b.n	8009936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2224      	movs	r2, #36	@ 0x24
 80098dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f022 0201 	bic.w	r2, r2, #1
 80098ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80098fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6819      	ldr	r1, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f042 0201 	orr.w	r2, r2, #1
 800991e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2220      	movs	r2, #32
 8009924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	e000      	b.n	8009936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009934:	2302      	movs	r3, #2
  }
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b20      	cmp	r3, #32
 8009956:	d139      	bne.n	80099cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800995e:	2b01      	cmp	r3, #1
 8009960:	d101      	bne.n	8009966 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009962:	2302      	movs	r3, #2
 8009964:	e033      	b.n	80099ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2224      	movs	r2, #36	@ 0x24
 8009972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f022 0201 	bic.w	r2, r2, #1
 8009984:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009994:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	021b      	lsls	r3, r3, #8
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	4313      	orrs	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f042 0201 	orr.w	r2, r2, #1
 80099b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2220      	movs	r2, #32
 80099bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	e000      	b.n	80099ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80099cc:	2302      	movs	r3, #2
  }
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3714      	adds	r7, #20
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
	...

080099dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80099e4:	4b19      	ldr	r3, [pc, #100]	@ (8009a4c <HAL_PWREx_ConfigSupply+0x70>)
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	d00a      	beq.n	8009a06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80099f0:	4b16      	ldr	r3, [pc, #88]	@ (8009a4c <HAL_PWREx_ConfigSupply+0x70>)
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	f003 0307 	and.w	r3, r3, #7
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d001      	beq.n	8009a02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e01f      	b.n	8009a42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	e01d      	b.n	8009a42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009a06:	4b11      	ldr	r3, [pc, #68]	@ (8009a4c <HAL_PWREx_ConfigSupply+0x70>)
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	f023 0207 	bic.w	r2, r3, #7
 8009a0e:	490f      	ldr	r1, [pc, #60]	@ (8009a4c <HAL_PWREx_ConfigSupply+0x70>)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009a16:	f7fa fa67 	bl	8003ee8 <HAL_GetTick>
 8009a1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a1c:	e009      	b.n	8009a32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009a1e:	f7fa fa63 	bl	8003ee8 <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a2c:	d901      	bls.n	8009a32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e007      	b.n	8009a42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a32:	4b06      	ldr	r3, [pc, #24]	@ (8009a4c <HAL_PWREx_ConfigSupply+0x70>)
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a3e:	d1ee      	bne.n	8009a1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	58024800 	.word	0x58024800

08009a50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08c      	sub	sp, #48	@ 0x30
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d102      	bne.n	8009a64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	f000 bc48 	b.w	800a2f4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 808c 	beq.w	8009b8a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a72:	4b96      	ldr	r3, [pc, #600]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a7c:	4b93      	ldr	r3, [pc, #588]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a84:	2b10      	cmp	r3, #16
 8009a86:	d007      	beq.n	8009a98 <HAL_RCC_OscConfig+0x48>
 8009a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a8a:	2b18      	cmp	r3, #24
 8009a8c:	d111      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x62>
 8009a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a90:	f003 0303 	and.w	r3, r3, #3
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d10c      	bne.n	8009ab2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a98:	4b8c      	ldr	r3, [pc, #560]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d071      	beq.n	8009b88 <HAL_RCC_OscConfig+0x138>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d16d      	bne.n	8009b88 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	f000 bc21 	b.w	800a2f4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009aba:	d106      	bne.n	8009aca <HAL_RCC_OscConfig+0x7a>
 8009abc:	4b83      	ldr	r3, [pc, #524]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a82      	ldr	r2, [pc, #520]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	e02e      	b.n	8009b28 <HAL_RCC_OscConfig+0xd8>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10c      	bne.n	8009aec <HAL_RCC_OscConfig+0x9c>
 8009ad2:	4b7e      	ldr	r3, [pc, #504]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a7d      	ldr	r2, [pc, #500]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009adc:	6013      	str	r3, [r2, #0]
 8009ade:	4b7b      	ldr	r3, [pc, #492]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a7a      	ldr	r2, [pc, #488]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ae4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ae8:	6013      	str	r3, [r2, #0]
 8009aea:	e01d      	b.n	8009b28 <HAL_RCC_OscConfig+0xd8>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009af4:	d10c      	bne.n	8009b10 <HAL_RCC_OscConfig+0xc0>
 8009af6:	4b75      	ldr	r3, [pc, #468]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a74      	ldr	r2, [pc, #464]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009b00:	6013      	str	r3, [r2, #0]
 8009b02:	4b72      	ldr	r3, [pc, #456]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a71      	ldr	r2, [pc, #452]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	e00b      	b.n	8009b28 <HAL_RCC_OscConfig+0xd8>
 8009b10:	4b6e      	ldr	r3, [pc, #440]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a6d      	ldr	r2, [pc, #436]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b1a:	6013      	str	r3, [r2, #0]
 8009b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a6a      	ldr	r2, [pc, #424]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d015      	beq.n	8009b5c <HAL_RCC_OscConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b30:	f7fa f9da 	bl	8003ee8 <HAL_GetTick>
 8009b34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b36:	e00a      	b.n	8009b4e <HAL_RCC_OscConfig+0xfe>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b38:	f7fa f9d6 	bl	8003ee8 <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d901      	bls.n	8009b4e <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e3d2      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b4e:	4b5f      	ldr	r3, [pc, #380]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0ee      	beq.n	8009b38 <HAL_RCC_OscConfig+0xe8>
 8009b5a:	e016      	b.n	8009b8a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b5c:	f7fa f9c4 	bl	8003ee8 <HAL_GetTick>
 8009b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b62:	e00a      	b.n	8009b7a <HAL_RCC_OscConfig+0x12a>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b64:	f7fa f9c0 	bl	8003ee8 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d901      	bls.n	8009b7a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e3bc      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b7a:	4b54      	ldr	r3, [pc, #336]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d1ee      	bne.n	8009b64 <HAL_RCC_OscConfig+0x114>
 8009b86:	e000      	b.n	8009b8a <HAL_RCC_OscConfig+0x13a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0302 	and.w	r3, r3, #2
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 80cb 	beq.w	8009d2e <HAL_RCC_OscConfig+0x2de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b98:	4b4c      	ldr	r3, [pc, #304]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ba0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d007      	beq.n	8009bbe <HAL_RCC_OscConfig+0x16e>
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	2b18      	cmp	r3, #24
 8009bb2:	d156      	bne.n	8009c62 <HAL_RCC_OscConfig+0x212>
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	f003 0303 	and.w	r3, r3, #3
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d151      	bne.n	8009c62 <HAL_RCC_OscConfig+0x212>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bbe:	4b43      	ldr	r3, [pc, #268]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 0304 	and.w	r3, r3, #4
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d005      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x186>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e38e      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f023 0219 	bic.w	r2, r3, #25
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	493a      	ldr	r1, [pc, #232]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be8:	f7fa f97e 	bl	8003ee8 <HAL_GetTick>
 8009bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bee:	e008      	b.n	8009c02 <HAL_RCC_OscConfig+0x1b2>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bf0:	f7fa f97a 	bl	8003ee8 <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d901      	bls.n	8009c02 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e378      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c02:	4b32      	ldr	r3, [pc, #200]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0f0      	beq.n	8009bf0 <HAL_RCC_OscConfig+0x1a0>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c0e:	f7fa f99b 	bl	8003f48 <HAL_GetREVID>
 8009c12:	4603      	mov	r3, r0
 8009c14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d817      	bhi.n	8009c4c <HAL_RCC_OscConfig+0x1fc>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	2b40      	cmp	r3, #64	@ 0x40
 8009c22:	d108      	bne.n	8009c36 <HAL_RCC_OscConfig+0x1e6>
 8009c24:	4b29      	ldr	r3, [pc, #164]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009c2c:	4a27      	ldr	r2, [pc, #156]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c32:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c34:	e07b      	b.n	8009d2e <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c36:	4b25      	ldr	r3, [pc, #148]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	031b      	lsls	r3, r3, #12
 8009c44:	4921      	ldr	r1, [pc, #132]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c4a:	e070      	b.n	8009d2e <HAL_RCC_OscConfig+0x2de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	061b      	lsls	r3, r3, #24
 8009c5a:	491c      	ldr	r1, [pc, #112]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c60:	e065      	b.n	8009d2e <HAL_RCC_OscConfig+0x2de>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d048      	beq.n	8009cfc <HAL_RCC_OscConfig+0x2ac>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c6a:	4b18      	ldr	r3, [pc, #96]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f023 0219 	bic.w	r2, r3, #25
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	4915      	ldr	r1, [pc, #84]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c7c:	f7fa f934 	bl	8003ee8 <HAL_GetTick>
 8009c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c82:	e008      	b.n	8009c96 <HAL_RCC_OscConfig+0x246>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c84:	f7fa f930 	bl	8003ee8 <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d901      	bls.n	8009c96 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e32e      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c96:	4b0d      	ldr	r3, [pc, #52]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d0f0      	beq.n	8009c84 <HAL_RCC_OscConfig+0x234>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ca2:	f7fa f951 	bl	8003f48 <HAL_GetREVID>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d81a      	bhi.n	8009ce6 <HAL_RCC_OscConfig+0x296>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	2b40      	cmp	r3, #64	@ 0x40
 8009cb6:	d10b      	bne.n	8009cd0 <HAL_RCC_OscConfig+0x280>
 8009cb8:	4b04      	ldr	r3, [pc, #16]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009cc0:	4a02      	ldr	r2, [pc, #8]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cc6:	6053      	str	r3, [r2, #4]
 8009cc8:	e031      	b.n	8009d2e <HAL_RCC_OscConfig+0x2de>
 8009cca:	bf00      	nop
 8009ccc:	58024400 	.word	0x58024400
 8009cd0:	4b9c      	ldr	r3, [pc, #624]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	031b      	lsls	r3, r3, #12
 8009cde:	4999      	ldr	r1, [pc, #612]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	604b      	str	r3, [r1, #4]
 8009ce4:	e023      	b.n	8009d2e <HAL_RCC_OscConfig+0x2de>
 8009ce6:	4b97      	ldr	r3, [pc, #604]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	061b      	lsls	r3, r3, #24
 8009cf4:	4993      	ldr	r1, [pc, #588]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	604b      	str	r3, [r1, #4]
 8009cfa:	e018      	b.n	8009d2e <HAL_RCC_OscConfig+0x2de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009cfc:	4b91      	ldr	r3, [pc, #580]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a90      	ldr	r2, [pc, #576]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009d02:	f023 0301 	bic.w	r3, r3, #1
 8009d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d08:	f7fa f8ee 	bl	8003ee8 <HAL_GetTick>
 8009d0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d0e:	e008      	b.n	8009d22 <HAL_RCC_OscConfig+0x2d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d10:	f7fa f8ea 	bl	8003ee8 <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d901      	bls.n	8009d22 <HAL_RCC_OscConfig+0x2d2>
          {
            return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e2e8      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d22:	4b88      	ldr	r3, [pc, #544]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0304 	and.w	r3, r3, #4
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1f0      	bne.n	8009d10 <HAL_RCC_OscConfig+0x2c0>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0310 	and.w	r3, r3, #16
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f000 80a9 	beq.w	8009e8e <HAL_RCC_OscConfig+0x43e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d3c:	4b81      	ldr	r3, [pc, #516]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d44:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d46:	4b7f      	ldr	r3, [pc, #508]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	2b08      	cmp	r3, #8
 8009d50:	d007      	beq.n	8009d62 <HAL_RCC_OscConfig+0x312>
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	2b18      	cmp	r3, #24
 8009d56:	d13a      	bne.n	8009dce <HAL_RCC_OscConfig+0x37e>
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d135      	bne.n	8009dce <HAL_RCC_OscConfig+0x37e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d62:	4b78      	ldr	r3, [pc, #480]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d005      	beq.n	8009d7a <HAL_RCC_OscConfig+0x32a>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	69db      	ldr	r3, [r3, #28]
 8009d72:	2b80      	cmp	r3, #128	@ 0x80
 8009d74:	d001      	beq.n	8009d7a <HAL_RCC_OscConfig+0x32a>
      {
        return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e2bc      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d7a:	f7fa f8e5 	bl	8003f48 <HAL_GetREVID>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d817      	bhi.n	8009db8 <HAL_RCC_OscConfig+0x368>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a1b      	ldr	r3, [r3, #32]
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	d108      	bne.n	8009da2 <HAL_RCC_OscConfig+0x352>
 8009d90:	4b6c      	ldr	r3, [pc, #432]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009d98:	4a6a      	ldr	r2, [pc, #424]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009d9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d9e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009da0:	e075      	b.n	8009e8e <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009da2:	4b68      	ldr	r3, [pc, #416]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	069b      	lsls	r3, r3, #26
 8009db0:	4964      	ldr	r1, [pc, #400]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009db6:	e06a      	b.n	8009e8e <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009db8:	4b62      	ldr	r3, [pc, #392]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	061b      	lsls	r3, r3, #24
 8009dc6:	495f      	ldr	r1, [pc, #380]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009dcc:	e05f      	b.n	8009e8e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	69db      	ldr	r3, [r3, #28]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d042      	beq.n	8009e5c <HAL_RCC_OscConfig+0x40c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009dd6:	4b5b      	ldr	r3, [pc, #364]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a5a      	ldr	r2, [pc, #360]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009de2:	f7fa f881 	bl	8003ee8 <HAL_GetTick>
 8009de6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009de8:	e008      	b.n	8009dfc <HAL_RCC_OscConfig+0x3ac>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009dea:	f7fa f87d 	bl	8003ee8 <HAL_GetTick>
 8009dee:	4602      	mov	r2, r0
 8009df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d901      	bls.n	8009dfc <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	e27b      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009dfc:	4b51      	ldr	r3, [pc, #324]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d0f0      	beq.n	8009dea <HAL_RCC_OscConfig+0x39a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e08:	f7fa f89e 	bl	8003f48 <HAL_GetREVID>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d817      	bhi.n	8009e46 <HAL_RCC_OscConfig+0x3f6>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	2b20      	cmp	r3, #32
 8009e1c:	d108      	bne.n	8009e30 <HAL_RCC_OscConfig+0x3e0>
 8009e1e:	4b49      	ldr	r3, [pc, #292]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009e26:	4a47      	ldr	r2, [pc, #284]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009e28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e2c:	6053      	str	r3, [r2, #4]
 8009e2e:	e02e      	b.n	8009e8e <HAL_RCC_OscConfig+0x43e>
 8009e30:	4b44      	ldr	r3, [pc, #272]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a1b      	ldr	r3, [r3, #32]
 8009e3c:	069b      	lsls	r3, r3, #26
 8009e3e:	4941      	ldr	r1, [pc, #260]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009e40:	4313      	orrs	r3, r2
 8009e42:	604b      	str	r3, [r1, #4]
 8009e44:	e023      	b.n	8009e8e <HAL_RCC_OscConfig+0x43e>
 8009e46:	4b3f      	ldr	r3, [pc, #252]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	061b      	lsls	r3, r3, #24
 8009e54:	493b      	ldr	r1, [pc, #236]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	60cb      	str	r3, [r1, #12]
 8009e5a:	e018      	b.n	8009e8e <HAL_RCC_OscConfig+0x43e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009e5c:	4b39      	ldr	r3, [pc, #228]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a38      	ldr	r2, [pc, #224]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e68:	f7fa f83e 	bl	8003ee8 <HAL_GetTick>
 8009e6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e6e:	e008      	b.n	8009e82 <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e70:	f7fa f83a 	bl	8003ee8 <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d901      	bls.n	8009e82 <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e238      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e82:	4b30      	ldr	r3, [pc, #192]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1f0      	bne.n	8009e70 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0308 	and.w	r3, r3, #8
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d036      	beq.n	8009f08 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d019      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x486>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ea2:	4b28      	ldr	r3, [pc, #160]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ea6:	4a27      	ldr	r2, [pc, #156]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009ea8:	f043 0301 	orr.w	r3, r3, #1
 8009eac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009eae:	f7fa f81b 	bl	8003ee8 <HAL_GetTick>
 8009eb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009eb4:	e008      	b.n	8009ec8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009eb6:	f7fa f817 	bl	8003ee8 <HAL_GetTick>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d901      	bls.n	8009ec8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e215      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d0f0      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x466>
 8009ed4:	e018      	b.n	8009f08 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009eda:	4a1a      	ldr	r2, [pc, #104]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009edc:	f023 0301 	bic.w	r3, r3, #1
 8009ee0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ee2:	f7fa f801 	bl	8003ee8 <HAL_GetTick>
 8009ee6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ee8:	e008      	b.n	8009efc <HAL_RCC_OscConfig+0x4ac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009eea:	f7f9 fffd 	bl	8003ee8 <HAL_GetTick>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d901      	bls.n	8009efc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e1fb      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009efc:	4b11      	ldr	r3, [pc, #68]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f00:	f003 0302 	and.w	r3, r3, #2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1f0      	bne.n	8009eea <HAL_RCC_OscConfig+0x49a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0320 	and.w	r3, r3, #32
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d039      	beq.n	8009f88 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01c      	beq.n	8009f56 <HAL_RCC_OscConfig+0x506>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f1c:	4b09      	ldr	r3, [pc, #36]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a08      	ldr	r2, [pc, #32]	@ (8009f44 <HAL_RCC_OscConfig+0x4f4>)
 8009f22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009f26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f28:	f7f9 ffde 	bl	8003ee8 <HAL_GetTick>
 8009f2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f2e:	e00b      	b.n	8009f48 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f30:	f7f9 ffda 	bl	8003ee8 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d904      	bls.n	8009f48 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e1d8      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
 8009f42:	bf00      	nop
 8009f44:	58024400 	.word	0x58024400
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f48:	4b65      	ldr	r3, [pc, #404]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d0ed      	beq.n	8009f30 <HAL_RCC_OscConfig+0x4e0>
 8009f54:	e018      	b.n	8009f88 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f56:	4b62      	ldr	r3, [pc, #392]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a61      	ldr	r2, [pc, #388]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 8009f5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f62:	f7f9 ffc1 	bl	8003ee8 <HAL_GetTick>
 8009f66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f68:	e008      	b.n	8009f7c <HAL_RCC_OscConfig+0x52c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f6a:	f7f9 ffbd 	bl	8003ee8 <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d901      	bls.n	8009f7c <HAL_RCC_OscConfig+0x52c>
        {
          return HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e1bb      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f7c:	4b58      	ldr	r3, [pc, #352]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1f0      	bne.n	8009f6a <HAL_RCC_OscConfig+0x51a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0304 	and.w	r3, r3, #4
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 8081 	beq.w	800a098 <HAL_RCC_OscConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009f96:	4b53      	ldr	r3, [pc, #332]	@ (800a0e4 <HAL_RCC_OscConfig+0x694>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a52      	ldr	r2, [pc, #328]	@ (800a0e4 <HAL_RCC_OscConfig+0x694>)
 8009f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fa0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fa2:	f7f9 ffa1 	bl	8003ee8 <HAL_GetTick>
 8009fa6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fa8:	e008      	b.n	8009fbc <HAL_RCC_OscConfig+0x56c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009faa:	f7f9 ff9d 	bl	8003ee8 <HAL_GetTick>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	2b64      	cmp	r3, #100	@ 0x64
 8009fb6:	d901      	bls.n	8009fbc <HAL_RCC_OscConfig+0x56c>
      {
        return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e19b      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fbc:	4b49      	ldr	r3, [pc, #292]	@ (800a0e4 <HAL_RCC_OscConfig+0x694>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d0f0      	beq.n	8009faa <HAL_RCC_OscConfig+0x55a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d106      	bne.n	8009fde <HAL_RCC_OscConfig+0x58e>
 8009fd0:	4b43      	ldr	r3, [pc, #268]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 8009fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fd4:	4a42      	ldr	r2, [pc, #264]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 8009fd6:	f043 0301 	orr.w	r3, r3, #1
 8009fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fdc:	e02d      	b.n	800a03a <HAL_RCC_OscConfig+0x5ea>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10c      	bne.n	800a000 <HAL_RCC_OscConfig+0x5b0>
 8009fe6:	4b3e      	ldr	r3, [pc, #248]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 8009fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fea:	4a3d      	ldr	r2, [pc, #244]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 8009fec:	f023 0301 	bic.w	r3, r3, #1
 8009ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ff2:	4b3b      	ldr	r3, [pc, #236]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 8009ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ff6:	4a3a      	ldr	r2, [pc, #232]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 8009ff8:	f023 0304 	bic.w	r3, r3, #4
 8009ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ffe:	e01c      	b.n	800a03a <HAL_RCC_OscConfig+0x5ea>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	2b05      	cmp	r3, #5
 800a006:	d10c      	bne.n	800a022 <HAL_RCC_OscConfig+0x5d2>
 800a008:	4b35      	ldr	r3, [pc, #212]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a00a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a00c:	4a34      	ldr	r2, [pc, #208]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a00e:	f043 0304 	orr.w	r3, r3, #4
 800a012:	6713      	str	r3, [r2, #112]	@ 0x70
 800a014:	4b32      	ldr	r3, [pc, #200]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a018:	4a31      	ldr	r2, [pc, #196]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a01a:	f043 0301 	orr.w	r3, r3, #1
 800a01e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a020:	e00b      	b.n	800a03a <HAL_RCC_OscConfig+0x5ea>
 800a022:	4b2f      	ldr	r3, [pc, #188]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a026:	4a2e      	ldr	r2, [pc, #184]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a028:	f023 0301 	bic.w	r3, r3, #1
 800a02c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a02e:	4b2c      	ldr	r3, [pc, #176]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a032:	4a2b      	ldr	r2, [pc, #172]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a034:	f023 0304 	bic.w	r3, r3, #4
 800a038:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d015      	beq.n	800a06e <HAL_RCC_OscConfig+0x61e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a042:	f7f9 ff51 	bl	8003ee8 <HAL_GetTick>
 800a046:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a048:	e00a      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a04a:	f7f9 ff4d 	bl	8003ee8 <HAL_GetTick>
 800a04e:	4602      	mov	r2, r0
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a058:	4293      	cmp	r3, r2
 800a05a:	d901      	bls.n	800a060 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e149      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a060:	4b1f      	ldr	r3, [pc, #124]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0ee      	beq.n	800a04a <HAL_RCC_OscConfig+0x5fa>
 800a06c:	e014      	b.n	800a098 <HAL_RCC_OscConfig+0x648>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a06e:	f7f9 ff3b 	bl	8003ee8 <HAL_GetTick>
 800a072:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a074:	e00a      	b.n	800a08c <HAL_RCC_OscConfig+0x63c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a076:	f7f9 ff37 	bl	8003ee8 <HAL_GetTick>
 800a07a:	4602      	mov	r2, r0
 800a07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07e:	1ad3      	subs	r3, r2, r3
 800a080:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a084:	4293      	cmp	r3, r2
 800a086:	d901      	bls.n	800a08c <HAL_RCC_OscConfig+0x63c>
        {
          return HAL_TIMEOUT;
 800a088:	2303      	movs	r3, #3
 800a08a:	e133      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a08c:	4b14      	ldr	r3, [pc, #80]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a08e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a090:	f003 0302 	and.w	r3, r3, #2
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1ee      	bne.n	800a076 <HAL_RCC_OscConfig+0x626>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 8128 	beq.w	800a2f2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a0a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0aa:	2b18      	cmp	r3, #24
 800a0ac:	f000 80b8 	beq.w	800a220 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	f040 8099 	bne.w	800a1ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0ba:	4b09      	ldr	r3, [pc, #36]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a08      	ldr	r2, [pc, #32]	@ (800a0e0 <HAL_RCC_OscConfig+0x690>)
 800a0c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a0c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0c6:	f7f9 ff0f 	bl	8003ee8 <HAL_GetTick>
 800a0ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0cc:	e00c      	b.n	800a0e8 <HAL_RCC_OscConfig+0x698>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0ce:	f7f9 ff0b 	bl	8003ee8 <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d905      	bls.n	800a0e8 <HAL_RCC_OscConfig+0x698>
          {
            return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e109      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
 800a0e0:	58024400 	.word	0x58024400
 800a0e4:	58024800 	.word	0x58024800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0e8:	4b84      	ldr	r3, [pc, #528]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1ec      	bne.n	800a0ce <HAL_RCC_OscConfig+0x67e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0f4:	4b81      	ldr	r3, [pc, #516]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a0f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0f8:	4b81      	ldr	r3, [pc, #516]	@ (800a300 <HAL_RCC_OscConfig+0x8b0>)
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a104:	0112      	lsls	r2, r2, #4
 800a106:	430a      	orrs	r2, r1
 800a108:	497c      	ldr	r1, [pc, #496]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a10a:	4313      	orrs	r3, r2
 800a10c:	628b      	str	r3, [r1, #40]	@ 0x28
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a112:	3b01      	subs	r3, #1
 800a114:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a11c:	3b01      	subs	r3, #1
 800a11e:	025b      	lsls	r3, r3, #9
 800a120:	b29b      	uxth	r3, r3
 800a122:	431a      	orrs	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a128:	3b01      	subs	r3, #1
 800a12a:	041b      	lsls	r3, r3, #16
 800a12c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a130:	431a      	orrs	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a136:	3b01      	subs	r3, #1
 800a138:	061b      	lsls	r3, r3, #24
 800a13a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a13e:	496f      	ldr	r1, [pc, #444]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a140:	4313      	orrs	r3, r2
 800a142:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a144:	4b6d      	ldr	r3, [pc, #436]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a148:	4a6c      	ldr	r2, [pc, #432]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a14a:	f023 0301 	bic.w	r3, r3, #1
 800a14e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a150:	4b6a      	ldr	r3, [pc, #424]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a152:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a154:	4b6b      	ldr	r3, [pc, #428]	@ (800a304 <HAL_RCC_OscConfig+0x8b4>)
 800a156:	4013      	ands	r3, r2
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a15c:	00d2      	lsls	r2, r2, #3
 800a15e:	4967      	ldr	r1, [pc, #412]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a160:	4313      	orrs	r3, r2
 800a162:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a164:	4b65      	ldr	r3, [pc, #404]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a168:	f023 020c 	bic.w	r2, r3, #12
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a170:	4962      	ldr	r1, [pc, #392]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a172:	4313      	orrs	r3, r2
 800a174:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a176:	4b61      	ldr	r3, [pc, #388]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a17a:	f023 0202 	bic.w	r2, r3, #2
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a182:	495e      	ldr	r1, [pc, #376]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a184:	4313      	orrs	r3, r2
 800a186:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a188:	4b5c      	ldr	r3, [pc, #368]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a18a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18c:	4a5b      	ldr	r2, [pc, #364]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a18e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a194:	4b59      	ldr	r3, [pc, #356]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a198:	4a58      	ldr	r2, [pc, #352]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a19a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a19e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a1a0:	4b56      	ldr	r3, [pc, #344]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a4:	4a55      	ldr	r2, [pc, #340]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a1a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a1aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a1ac:	4b53      	ldr	r3, [pc, #332]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a1ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b0:	4a52      	ldr	r2, [pc, #328]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1b8:	4b50      	ldr	r3, [pc, #320]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a4f      	ldr	r2, [pc, #316]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a1be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a1c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1c4:	f7f9 fe90 	bl	8003ee8 <HAL_GetTick>
 800a1c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1ca:	e008      	b.n	800a1de <HAL_RCC_OscConfig+0x78e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1cc:	f7f9 fe8c 	bl	8003ee8 <HAL_GetTick>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d901      	bls.n	800a1de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e08a      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1de:	4b47      	ldr	r3, [pc, #284]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d0f0      	beq.n	800a1cc <HAL_RCC_OscConfig+0x77c>
 800a1ea:	e082      	b.n	800a2f2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1ec:	4b43      	ldr	r3, [pc, #268]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a42      	ldr	r2, [pc, #264]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a1f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a1f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f8:	f7f9 fe76 	bl	8003ee8 <HAL_GetTick>
 800a1fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1fe:	e008      	b.n	800a212 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a200:	f7f9 fe72 	bl	8003ee8 <HAL_GetTick>
 800a204:	4602      	mov	r2, r0
 800a206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d901      	bls.n	800a212 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a20e:	2303      	movs	r3, #3
 800a210:	e070      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a212:	4b3a      	ldr	r3, [pc, #232]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1f0      	bne.n	800a200 <HAL_RCC_OscConfig+0x7b0>
 800a21e:	e068      	b.n	800a2f2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a220:	4b36      	ldr	r3, [pc, #216]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a224:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a226:	4b35      	ldr	r3, [pc, #212]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a22a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a230:	2b01      	cmp	r3, #1
 800a232:	d031      	beq.n	800a298 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	f003 0203 	and.w	r2, r3, #3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a23e:	429a      	cmp	r2, r3
 800a240:	d12a      	bne.n	800a298 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	091b      	lsrs	r3, r3, #4
 800a246:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a24e:	429a      	cmp	r2, r3
 800a250:	d122      	bne.n	800a298 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a25c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a25e:	429a      	cmp	r2, r3
 800a260:	d11a      	bne.n	800a298 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	0a5b      	lsrs	r3, r3, #9
 800a266:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a26e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a270:	429a      	cmp	r2, r3
 800a272:	d111      	bne.n	800a298 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	0c1b      	lsrs	r3, r3, #16
 800a278:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a280:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a282:	429a      	cmp	r2, r3
 800a284:	d108      	bne.n	800a298 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	0e1b      	lsrs	r3, r3, #24
 800a28a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a292:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a294:	429a      	cmp	r2, r3
 800a296:	d001      	beq.n	800a29c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e02b      	b.n	800a2f4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a29c:	4b17      	ldr	r3, [pc, #92]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a29e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2a0:	08db      	lsrs	r3, r3, #3
 800a2a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d01f      	beq.n	800a2f2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a2b2:	4b12      	ldr	r3, [pc, #72]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b6:	4a11      	ldr	r2, [pc, #68]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a2b8:	f023 0301 	bic.w	r3, r3, #1
 800a2bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a2be:	f7f9 fe13 	bl	8003ee8 <HAL_GetTick>
 800a2c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a2c4:	bf00      	nop
 800a2c6:	f7f9 fe0f 	bl	8003ee8 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d0f9      	beq.n	800a2c6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a2d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a304 <HAL_RCC_OscConfig+0x8b4>)
 800a2d8:	4013      	ands	r3, r2
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a2de:	00d2      	lsls	r2, r2, #3
 800a2e0:	4906      	ldr	r1, [pc, #24]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a2e6:	4b05      	ldr	r3, [pc, #20]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ea:	4a04      	ldr	r2, [pc, #16]	@ (800a2fc <HAL_RCC_OscConfig+0x8ac>)
 800a2ec:	f043 0301 	orr.w	r3, r3, #1
 800a2f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3730      	adds	r7, #48	@ 0x30
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	58024400 	.word	0x58024400
 800a300:	fffffc0c 	.word	0xfffffc0c
 800a304:	ffff0007 	.word	0xffff0007

0800a308 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e19c      	b.n	800a656 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a31c:	4b8a      	ldr	r3, [pc, #552]	@ (800a548 <HAL_RCC_ClockConfig+0x240>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 030f 	and.w	r3, r3, #15
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	429a      	cmp	r2, r3
 800a328:	d910      	bls.n	800a34c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a32a:	4b87      	ldr	r3, [pc, #540]	@ (800a548 <HAL_RCC_ClockConfig+0x240>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f023 020f 	bic.w	r2, r3, #15
 800a332:	4985      	ldr	r1, [pc, #532]	@ (800a548 <HAL_RCC_ClockConfig+0x240>)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	4313      	orrs	r3, r2
 800a338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a33a:	4b83      	ldr	r3, [pc, #524]	@ (800a548 <HAL_RCC_ClockConfig+0x240>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f003 030f 	and.w	r3, r3, #15
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	429a      	cmp	r2, r3
 800a346:	d001      	beq.n	800a34c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e184      	b.n	800a656 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f003 0304 	and.w	r3, r3, #4
 800a354:	2b00      	cmp	r3, #0
 800a356:	d010      	beq.n	800a37a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691a      	ldr	r2, [r3, #16]
 800a35c:	4b7b      	ldr	r3, [pc, #492]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a364:	429a      	cmp	r2, r3
 800a366:	d908      	bls.n	800a37a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a368:	4b78      	ldr	r3, [pc, #480]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a36a:	699b      	ldr	r3, [r3, #24]
 800a36c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	4975      	ldr	r1, [pc, #468]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a376:	4313      	orrs	r3, r2
 800a378:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0308 	and.w	r3, r3, #8
 800a382:	2b00      	cmp	r3, #0
 800a384:	d010      	beq.n	800a3a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	695a      	ldr	r2, [r3, #20]
 800a38a:	4b70      	ldr	r3, [pc, #448]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a392:	429a      	cmp	r2, r3
 800a394:	d908      	bls.n	800a3a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a396:	4b6d      	ldr	r3, [pc, #436]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a398:	69db      	ldr	r3, [r3, #28]
 800a39a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	496a      	ldr	r1, [pc, #424]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0310 	and.w	r3, r3, #16
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d010      	beq.n	800a3d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	699a      	ldr	r2, [r3, #24]
 800a3b8:	4b64      	ldr	r3, [pc, #400]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d908      	bls.n	800a3d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3c4:	4b61      	ldr	r3, [pc, #388]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a3c6:	69db      	ldr	r3, [r3, #28]
 800a3c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	495e      	ldr	r1, [pc, #376]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0320 	and.w	r3, r3, #32
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d010      	beq.n	800a404 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	69da      	ldr	r2, [r3, #28]
 800a3e6:	4b59      	ldr	r3, [pc, #356]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
 800a3ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d908      	bls.n	800a404 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a3f2:	4b56      	ldr	r3, [pc, #344]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	4953      	ldr	r1, [pc, #332]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a400:	4313      	orrs	r3, r2
 800a402:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0302 	and.w	r3, r3, #2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d010      	beq.n	800a432 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68da      	ldr	r2, [r3, #12]
 800a414:	4b4d      	ldr	r3, [pc, #308]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	f003 030f 	and.w	r3, r3, #15
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d908      	bls.n	800a432 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a420:	4b4a      	ldr	r3, [pc, #296]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	f023 020f 	bic.w	r2, r3, #15
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	4947      	ldr	r1, [pc, #284]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a42e:	4313      	orrs	r3, r2
 800a430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d055      	beq.n	800a4ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a43e:	4b43      	ldr	r3, [pc, #268]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	4940      	ldr	r1, [pc, #256]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a44c:	4313      	orrs	r3, r2
 800a44e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d107      	bne.n	800a468 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a458:	4b3c      	ldr	r3, [pc, #240]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d121      	bne.n	800a4a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e0f6      	b.n	800a656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	d107      	bne.n	800a480 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a470:	4b36      	ldr	r3, [pc, #216]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d115      	bne.n	800a4a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e0ea      	b.n	800a656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d107      	bne.n	800a498 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a488:	4b30      	ldr	r3, [pc, #192]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a490:	2b00      	cmp	r3, #0
 800a492:	d109      	bne.n	800a4a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e0de      	b.n	800a656 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a498:	4b2c      	ldr	r3, [pc, #176]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d101      	bne.n	800a4a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e0d6      	b.n	800a656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a4a8:	4b28      	ldr	r3, [pc, #160]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	f023 0207 	bic.w	r2, r3, #7
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	4925      	ldr	r1, [pc, #148]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4ba:	f7f9 fd15 	bl	8003ee8 <HAL_GetTick>
 800a4be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4c0:	e00a      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4c2:	f7f9 fd11 	bl	8003ee8 <HAL_GetTick>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d901      	bls.n	800a4d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e0be      	b.n	800a656 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4d8:	4b1c      	ldr	r3, [pc, #112]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	00db      	lsls	r3, r3, #3
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d1eb      	bne.n	800a4c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0302 	and.w	r3, r3, #2
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d010      	beq.n	800a518 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68da      	ldr	r2, [r3, #12]
 800a4fa:	4b14      	ldr	r3, [pc, #80]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	f003 030f 	and.w	r3, r3, #15
 800a502:	429a      	cmp	r2, r3
 800a504:	d208      	bcs.n	800a518 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a506:	4b11      	ldr	r3, [pc, #68]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	f023 020f 	bic.w	r2, r3, #15
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	490e      	ldr	r1, [pc, #56]	@ (800a54c <HAL_RCC_ClockConfig+0x244>)
 800a514:	4313      	orrs	r3, r2
 800a516:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a518:	4b0b      	ldr	r3, [pc, #44]	@ (800a548 <HAL_RCC_ClockConfig+0x240>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 030f 	and.w	r3, r3, #15
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	429a      	cmp	r2, r3
 800a524:	d214      	bcs.n	800a550 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a526:	4b08      	ldr	r3, [pc, #32]	@ (800a548 <HAL_RCC_ClockConfig+0x240>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f023 020f 	bic.w	r2, r3, #15
 800a52e:	4906      	ldr	r1, [pc, #24]	@ (800a548 <HAL_RCC_ClockConfig+0x240>)
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	4313      	orrs	r3, r2
 800a534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a536:	4b04      	ldr	r3, [pc, #16]	@ (800a548 <HAL_RCC_ClockConfig+0x240>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 030f 	and.w	r3, r3, #15
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	429a      	cmp	r2, r3
 800a542:	d005      	beq.n	800a550 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e086      	b.n	800a656 <HAL_RCC_ClockConfig+0x34e>
 800a548:	52002000 	.word	0x52002000
 800a54c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0304 	and.w	r3, r3, #4
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d010      	beq.n	800a57e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	691a      	ldr	r2, [r3, #16]
 800a560:	4b3f      	ldr	r3, [pc, #252]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a568:	429a      	cmp	r2, r3
 800a56a:	d208      	bcs.n	800a57e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a56c:	4b3c      	ldr	r3, [pc, #240]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	4939      	ldr	r1, [pc, #228]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0308 	and.w	r3, r3, #8
 800a586:	2b00      	cmp	r3, #0
 800a588:	d010      	beq.n	800a5ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	695a      	ldr	r2, [r3, #20]
 800a58e:	4b34      	ldr	r3, [pc, #208]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a596:	429a      	cmp	r2, r3
 800a598:	d208      	bcs.n	800a5ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a59a:	4b31      	ldr	r3, [pc, #196]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	492e      	ldr	r1, [pc, #184]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0310 	and.w	r3, r3, #16
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d010      	beq.n	800a5da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	699a      	ldr	r2, [r3, #24]
 800a5bc:	4b28      	ldr	r3, [pc, #160]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a5be:	69db      	ldr	r3, [r3, #28]
 800a5c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d208      	bcs.n	800a5da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a5c8:	4b25      	ldr	r3, [pc, #148]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	4922      	ldr	r1, [pc, #136]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 0320 	and.w	r3, r3, #32
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d010      	beq.n	800a608 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	69da      	ldr	r2, [r3, #28]
 800a5ea:	4b1d      	ldr	r3, [pc, #116]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d208      	bcs.n	800a608 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a5f6:	4b1a      	ldr	r3, [pc, #104]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	4917      	ldr	r1, [pc, #92]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a604:	4313      	orrs	r3, r2
 800a606:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a608:	f000 f834 	bl	800a674 <HAL_RCC_GetSysClockFreq>
 800a60c:	4602      	mov	r2, r0
 800a60e:	4b14      	ldr	r3, [pc, #80]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	0a1b      	lsrs	r3, r3, #8
 800a614:	f003 030f 	and.w	r3, r3, #15
 800a618:	4912      	ldr	r1, [pc, #72]	@ (800a664 <HAL_RCC_ClockConfig+0x35c>)
 800a61a:	5ccb      	ldrb	r3, [r1, r3]
 800a61c:	f003 031f 	and.w	r3, r3, #31
 800a620:	fa22 f303 	lsr.w	r3, r2, r3
 800a624:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a626:	4b0e      	ldr	r3, [pc, #56]	@ (800a660 <HAL_RCC_ClockConfig+0x358>)
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	f003 030f 	and.w	r3, r3, #15
 800a62e:	4a0d      	ldr	r2, [pc, #52]	@ (800a664 <HAL_RCC_ClockConfig+0x35c>)
 800a630:	5cd3      	ldrb	r3, [r2, r3]
 800a632:	f003 031f 	and.w	r3, r3, #31
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	fa22 f303 	lsr.w	r3, r2, r3
 800a63c:	4a0a      	ldr	r2, [pc, #40]	@ (800a668 <HAL_RCC_ClockConfig+0x360>)
 800a63e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a640:	4a0a      	ldr	r2, [pc, #40]	@ (800a66c <HAL_RCC_ClockConfig+0x364>)
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a646:	4b0a      	ldr	r3, [pc, #40]	@ (800a670 <HAL_RCC_ClockConfig+0x368>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7f9 fc02 	bl	8003e54 <HAL_InitTick>
 800a650:	4603      	mov	r3, r0
 800a652:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a654:	7bfb      	ldrb	r3, [r7, #15]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	58024400 	.word	0x58024400
 800a664:	080160b4 	.word	0x080160b4
 800a668:	24000014 	.word	0x24000014
 800a66c:	24000010 	.word	0x24000010
 800a670:	24000018 	.word	0x24000018

0800a674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a674:	b480      	push	{r7}
 800a676:	b089      	sub	sp, #36	@ 0x24
 800a678:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a67a:	4bb3      	ldr	r3, [pc, #716]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a682:	2b18      	cmp	r3, #24
 800a684:	f200 8155 	bhi.w	800a932 <HAL_RCC_GetSysClockFreq+0x2be>
 800a688:	a201      	add	r2, pc, #4	@ (adr r2, 800a690 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68e:	bf00      	nop
 800a690:	0800a6f5 	.word	0x0800a6f5
 800a694:	0800a933 	.word	0x0800a933
 800a698:	0800a933 	.word	0x0800a933
 800a69c:	0800a933 	.word	0x0800a933
 800a6a0:	0800a933 	.word	0x0800a933
 800a6a4:	0800a933 	.word	0x0800a933
 800a6a8:	0800a933 	.word	0x0800a933
 800a6ac:	0800a933 	.word	0x0800a933
 800a6b0:	0800a71b 	.word	0x0800a71b
 800a6b4:	0800a933 	.word	0x0800a933
 800a6b8:	0800a933 	.word	0x0800a933
 800a6bc:	0800a933 	.word	0x0800a933
 800a6c0:	0800a933 	.word	0x0800a933
 800a6c4:	0800a933 	.word	0x0800a933
 800a6c8:	0800a933 	.word	0x0800a933
 800a6cc:	0800a933 	.word	0x0800a933
 800a6d0:	0800a721 	.word	0x0800a721
 800a6d4:	0800a933 	.word	0x0800a933
 800a6d8:	0800a933 	.word	0x0800a933
 800a6dc:	0800a933 	.word	0x0800a933
 800a6e0:	0800a933 	.word	0x0800a933
 800a6e4:	0800a933 	.word	0x0800a933
 800a6e8:	0800a933 	.word	0x0800a933
 800a6ec:	0800a933 	.word	0x0800a933
 800a6f0:	0800a727 	.word	0x0800a727
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6f4:	4b94      	ldr	r3, [pc, #592]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 0320 	and.w	r3, r3, #32
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d009      	beq.n	800a714 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a700:	4b91      	ldr	r3, [pc, #580]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	08db      	lsrs	r3, r3, #3
 800a706:	f003 0303 	and.w	r3, r3, #3
 800a70a:	4a90      	ldr	r2, [pc, #576]	@ (800a94c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a70c:	fa22 f303 	lsr.w	r3, r2, r3
 800a710:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a712:	e111      	b.n	800a938 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a714:	4b8d      	ldr	r3, [pc, #564]	@ (800a94c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a716:	61bb      	str	r3, [r7, #24]
      break;
 800a718:	e10e      	b.n	800a938 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a71a:	4b8d      	ldr	r3, [pc, #564]	@ (800a950 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a71c:	61bb      	str	r3, [r7, #24]
      break;
 800a71e:	e10b      	b.n	800a938 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a720:	4b8c      	ldr	r3, [pc, #560]	@ (800a954 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a722:	61bb      	str	r3, [r7, #24]
      break;
 800a724:	e108      	b.n	800a938 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a726:	4b88      	ldr	r3, [pc, #544]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a72a:	f003 0303 	and.w	r3, r3, #3
 800a72e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a730:	4b85      	ldr	r3, [pc, #532]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a734:	091b      	lsrs	r3, r3, #4
 800a736:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a73a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a73c:	4b82      	ldr	r3, [pc, #520]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a746:	4b80      	ldr	r3, [pc, #512]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a74a:	08db      	lsrs	r3, r3, #3
 800a74c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	fb02 f303 	mul.w	r3, r2, r3
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 80e1 	beq.w	800a92c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	f000 8083 	beq.w	800a878 <HAL_RCC_GetSysClockFreq+0x204>
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	2b02      	cmp	r3, #2
 800a776:	f200 80a1 	bhi.w	800a8bc <HAL_RCC_GetSysClockFreq+0x248>
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d003      	beq.n	800a788 <HAL_RCC_GetSysClockFreq+0x114>
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d056      	beq.n	800a834 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a786:	e099      	b.n	800a8bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a788:	4b6f      	ldr	r3, [pc, #444]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0320 	and.w	r3, r3, #32
 800a790:	2b00      	cmp	r3, #0
 800a792:	d02d      	beq.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a794:	4b6c      	ldr	r3, [pc, #432]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	08db      	lsrs	r3, r3, #3
 800a79a:	f003 0303 	and.w	r3, r3, #3
 800a79e:	4a6b      	ldr	r2, [pc, #428]	@ (800a94c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	ee07 3a90 	vmov	s15, r3
 800a7ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	ee07 3a90 	vmov	s15, r3
 800a7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7be:	4b62      	ldr	r3, [pc, #392]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a7ee:	e087      	b.n	800a900 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	ee07 3a90 	vmov	s15, r3
 800a7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a95c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a802:	4b51      	ldr	r3, [pc, #324]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a80a:	ee07 3a90 	vmov	s15, r3
 800a80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a812:	ed97 6a02 	vldr	s12, [r7, #8]
 800a816:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a832:	e065      	b.n	800a900 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	ee07 3a90 	vmov	s15, r3
 800a83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a960 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a846:	4b40      	ldr	r3, [pc, #256]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a84e:	ee07 3a90 	vmov	s15, r3
 800a852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a856:	ed97 6a02 	vldr	s12, [r7, #8]
 800a85a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a876:	e043      	b.n	800a900 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	ee07 3a90 	vmov	s15, r3
 800a87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a882:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a964 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a88a:	4b2f      	ldr	r3, [pc, #188]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a88c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a892:	ee07 3a90 	vmov	s15, r3
 800a896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a89a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a89e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8ba:	e021      	b.n	800a900 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	ee07 3a90 	vmov	s15, r3
 800a8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a960 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a8ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d6:	ee07 3a90 	vmov	s15, r3
 800a8da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a900:	4b11      	ldr	r3, [pc, #68]	@ (800a948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a904:	0a5b      	lsrs	r3, r3, #9
 800a906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a90a:	3301      	adds	r3, #1
 800a90c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	ee07 3a90 	vmov	s15, r3
 800a914:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a918:	edd7 6a07 	vldr	s13, [r7, #28]
 800a91c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a924:	ee17 3a90 	vmov	r3, s15
 800a928:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a92a:	e005      	b.n	800a938 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a92c:	2300      	movs	r3, #0
 800a92e:	61bb      	str	r3, [r7, #24]
      break;
 800a930:	e002      	b.n	800a938 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a932:	4b07      	ldr	r3, [pc, #28]	@ (800a950 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a934:	61bb      	str	r3, [r7, #24]
      break;
 800a936:	bf00      	nop
  }

  return sysclockfreq;
 800a938:	69bb      	ldr	r3, [r7, #24]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3724      	adds	r7, #36	@ 0x24
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	58024400 	.word	0x58024400
 800a94c:	03d09000 	.word	0x03d09000
 800a950:	003d0900 	.word	0x003d0900
 800a954:	017d7840 	.word	0x017d7840
 800a958:	46000000 	.word	0x46000000
 800a95c:	4c742400 	.word	0x4c742400
 800a960:	4a742400 	.word	0x4a742400
 800a964:	4bbebc20 	.word	0x4bbebc20

0800a968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a96e:	f7ff fe81 	bl	800a674 <HAL_RCC_GetSysClockFreq>
 800a972:	4602      	mov	r2, r0
 800a974:	4b10      	ldr	r3, [pc, #64]	@ (800a9b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	0a1b      	lsrs	r3, r3, #8
 800a97a:	f003 030f 	and.w	r3, r3, #15
 800a97e:	490f      	ldr	r1, [pc, #60]	@ (800a9bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a980:	5ccb      	ldrb	r3, [r1, r3]
 800a982:	f003 031f 	and.w	r3, r3, #31
 800a986:	fa22 f303 	lsr.w	r3, r2, r3
 800a98a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a98c:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	f003 030f 	and.w	r3, r3, #15
 800a994:	4a09      	ldr	r2, [pc, #36]	@ (800a9bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a996:	5cd3      	ldrb	r3, [r2, r3]
 800a998:	f003 031f 	and.w	r3, r3, #31
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	fa22 f303 	lsr.w	r3, r2, r3
 800a9a2:	4a07      	ldr	r2, [pc, #28]	@ (800a9c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a9a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9a6:	4a07      	ldr	r2, [pc, #28]	@ (800a9c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a9ac:	4b04      	ldr	r3, [pc, #16]	@ (800a9c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	080160b4 	.word	0x080160b4
 800a9c0:	24000014 	.word	0x24000014
 800a9c4:	24000010 	.word	0x24000010

0800a9c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a9cc:	f7ff ffcc 	bl	800a968 <HAL_RCC_GetHCLKFreq>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	4b06      	ldr	r3, [pc, #24]	@ (800a9ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	091b      	lsrs	r3, r3, #4
 800a9d8:	f003 0307 	and.w	r3, r3, #7
 800a9dc:	4904      	ldr	r1, [pc, #16]	@ (800a9f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a9de:	5ccb      	ldrb	r3, [r1, r3]
 800a9e0:	f003 031f 	and.w	r3, r3, #31
 800a9e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	58024400 	.word	0x58024400
 800a9f0:	080160b4 	.word	0x080160b4

0800a9f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a9f8:	f7ff ffb6 	bl	800a968 <HAL_RCC_GetHCLKFreq>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	4b06      	ldr	r3, [pc, #24]	@ (800aa18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	0a1b      	lsrs	r3, r3, #8
 800aa04:	f003 0307 	and.w	r3, r3, #7
 800aa08:	4904      	ldr	r1, [pc, #16]	@ (800aa1c <HAL_RCC_GetPCLK2Freq+0x28>)
 800aa0a:	5ccb      	ldrb	r3, [r1, r3]
 800aa0c:	f003 031f 	and.w	r3, r3, #31
 800aa10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	58024400 	.word	0x58024400
 800aa1c:	080160b4 	.word	0x080160b4

0800aa20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa24:	b0ca      	sub	sp, #296	@ 0x128
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aa32:	2300      	movs	r3, #0
 800aa34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800aa44:	2500      	movs	r5, #0
 800aa46:	ea54 0305 	orrs.w	r3, r4, r5
 800aa4a:	d049      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800aa4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aa56:	d02f      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800aa58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aa5c:	d828      	bhi.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aa5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa62:	d01a      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aa64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa68:	d822      	bhi.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800aa6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa72:	d007      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aa74:	e01c      	b.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa76:	4bb8      	ldr	r3, [pc, #736]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa7a:	4ab7      	ldr	r2, [pc, #732]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa82:	e01a      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa88:	3308      	adds	r3, #8
 800aa8a:	2102      	movs	r1, #2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f002 fb61 	bl	800d154 <RCCEx_PLL2_Config>
 800aa92:	4603      	mov	r3, r0
 800aa94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa98:	e00f      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa9e:	3328      	adds	r3, #40	@ 0x28
 800aaa0:	2102      	movs	r1, #2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f002 fc08 	bl	800d2b8 <RCCEx_PLL3_Config>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aaae:	e004      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aab0:	2301      	movs	r3, #1
 800aab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aab6:	e000      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aaba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10a      	bne.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aac2:	4ba5      	ldr	r3, [pc, #660]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aac6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800aaca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aace:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aad0:	4aa1      	ldr	r2, [pc, #644]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aad2:	430b      	orrs	r3, r1
 800aad4:	6513      	str	r3, [r2, #80]	@ 0x50
 800aad6:	e003      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aadc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800aaec:	f04f 0900 	mov.w	r9, #0
 800aaf0:	ea58 0309 	orrs.w	r3, r8, r9
 800aaf4:	d047      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aaf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aafa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aafc:	2b04      	cmp	r3, #4
 800aafe:	d82a      	bhi.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ab00:	a201      	add	r2, pc, #4	@ (adr r2, 800ab08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ab02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab06:	bf00      	nop
 800ab08:	0800ab1d 	.word	0x0800ab1d
 800ab0c:	0800ab2b 	.word	0x0800ab2b
 800ab10:	0800ab41 	.word	0x0800ab41
 800ab14:	0800ab5f 	.word	0x0800ab5f
 800ab18:	0800ab5f 	.word	0x0800ab5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab1c:	4b8e      	ldr	r3, [pc, #568]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab20:	4a8d      	ldr	r2, [pc, #564]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab28:	e01a      	b.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab2e:	3308      	adds	r3, #8
 800ab30:	2100      	movs	r1, #0
 800ab32:	4618      	mov	r0, r3
 800ab34:	f002 fb0e 	bl	800d154 <RCCEx_PLL2_Config>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab3e:	e00f      	b.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab44:	3328      	adds	r3, #40	@ 0x28
 800ab46:	2100      	movs	r1, #0
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f002 fbb5 	bl	800d2b8 <RCCEx_PLL3_Config>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab54:	e004      	b.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab5c:	e000      	b.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ab5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d10a      	bne.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab68:	4b7b      	ldr	r3, [pc, #492]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab6c:	f023 0107 	bic.w	r1, r3, #7
 800ab70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab76:	4a78      	ldr	r2, [pc, #480]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab78:	430b      	orrs	r3, r1
 800ab7a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ab7c:	e003      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ab86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800ab92:	f04f 0b00 	mov.w	fp, #0
 800ab96:	ea5a 030b 	orrs.w	r3, sl, fp
 800ab9a:	d04c      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ab9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aba6:	d030      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800aba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abac:	d829      	bhi.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abae:	2bc0      	cmp	r3, #192	@ 0xc0
 800abb0:	d02d      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800abb2:	2bc0      	cmp	r3, #192	@ 0xc0
 800abb4:	d825      	bhi.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abb6:	2b80      	cmp	r3, #128	@ 0x80
 800abb8:	d018      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800abba:	2b80      	cmp	r3, #128	@ 0x80
 800abbc:	d821      	bhi.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800abc2:	2b40      	cmp	r3, #64	@ 0x40
 800abc4:	d007      	beq.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800abc6:	e01c      	b.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abc8:	4b63      	ldr	r3, [pc, #396]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abcc:	4a62      	ldr	r2, [pc, #392]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800abd4:	e01c      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abda:	3308      	adds	r3, #8
 800abdc:	2100      	movs	r1, #0
 800abde:	4618      	mov	r0, r3
 800abe0:	f002 fab8 	bl	800d154 <RCCEx_PLL2_Config>
 800abe4:	4603      	mov	r3, r0
 800abe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800abea:	e011      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abf0:	3328      	adds	r3, #40	@ 0x28
 800abf2:	2100      	movs	r1, #0
 800abf4:	4618      	mov	r0, r3
 800abf6:	f002 fb5f 	bl	800d2b8 <RCCEx_PLL3_Config>
 800abfa:	4603      	mov	r3, r0
 800abfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac00:	e006      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ac08:	e002      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ac0a:	bf00      	nop
 800ac0c:	e000      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ac0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10a      	bne.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ac18:	4b4f      	ldr	r3, [pc, #316]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800ac20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac26:	4a4c      	ldr	r2, [pc, #304]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac28:	430b      	orrs	r3, r1
 800ac2a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ac2c:	e003      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ac32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ac36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ac42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800ac46:	2300      	movs	r3, #0
 800ac48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800ac4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800ac50:	460b      	mov	r3, r1
 800ac52:	4313      	orrs	r3, r2
 800ac54:	d053      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ac56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ac5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac62:	d035      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ac64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ac68:	d82e      	bhi.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ac6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ac6e:	d031      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ac70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ac74:	d828      	bhi.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ac76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac7a:	d01a      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ac7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac80:	d822      	bhi.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d003      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ac86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac8a:	d007      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ac8c:	e01c      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac8e:	4b32      	ldr	r3, [pc, #200]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac92:	4a31      	ldr	r2, [pc, #196]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac9a:	e01c      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aca0:	3308      	adds	r3, #8
 800aca2:	2100      	movs	r1, #0
 800aca4:	4618      	mov	r0, r3
 800aca6:	f002 fa55 	bl	800d154 <RCCEx_PLL2_Config>
 800acaa:	4603      	mov	r3, r0
 800acac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800acb0:	e011      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acb6:	3328      	adds	r3, #40	@ 0x28
 800acb8:	2100      	movs	r1, #0
 800acba:	4618      	mov	r0, r3
 800acbc:	f002 fafc 	bl	800d2b8 <RCCEx_PLL3_Config>
 800acc0:	4603      	mov	r3, r0
 800acc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acc6:	e006      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800acce:	e002      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800acd0:	bf00      	nop
 800acd2:	e000      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800acd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10b      	bne.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800acde:	4b1e      	ldr	r3, [pc, #120]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ace0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ace2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ace6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800acee:	4a1a      	ldr	r2, [pc, #104]	@ (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acf0:	430b      	orrs	r3, r1
 800acf2:	6593      	str	r3, [r2, #88]	@ 0x58
 800acf4:	e003      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800acfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ad0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ad14:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800ad18:	460b      	mov	r3, r1
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	d056      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ad1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ad26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad2a:	d038      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ad2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad30:	d831      	bhi.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ad36:	d034      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ad38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ad3c:	d82b      	bhi.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad42:	d01d      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ad44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad48:	d825      	bhi.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d006      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ad4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad52:	d00a      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ad54:	e01f      	b.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad56:	bf00      	nop
 800ad58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad5c:	4ba2      	ldr	r3, [pc, #648]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad60:	4aa1      	ldr	r2, [pc, #644]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad68:	e01c      	b.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad6e:	3308      	adds	r3, #8
 800ad70:	2100      	movs	r1, #0
 800ad72:	4618      	mov	r0, r3
 800ad74:	f002 f9ee 	bl	800d154 <RCCEx_PLL2_Config>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ad7e:	e011      	b.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad84:	3328      	adds	r3, #40	@ 0x28
 800ad86:	2100      	movs	r1, #0
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f002 fa95 	bl	800d2b8 <RCCEx_PLL3_Config>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad94:	e006      	b.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad9c:	e002      	b.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ad9e:	bf00      	nop
 800ada0:	e000      	b.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ada2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ada4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10b      	bne.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800adac:	4b8e      	ldr	r3, [pc, #568]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adb0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800adb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800adbc:	4a8a      	ldr	r2, [pc, #552]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adbe:	430b      	orrs	r3, r1
 800adc0:	6593      	str	r3, [r2, #88]	@ 0x58
 800adc2:	e003      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800adcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800add0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800add8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800addc:	2300      	movs	r3, #0
 800adde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ade2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ade6:	460b      	mov	r3, r1
 800ade8:	4313      	orrs	r3, r2
 800adea:	d03a      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800adec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adf2:	2b30      	cmp	r3, #48	@ 0x30
 800adf4:	d01f      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800adf6:	2b30      	cmp	r3, #48	@ 0x30
 800adf8:	d819      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800adfa:	2b20      	cmp	r3, #32
 800adfc:	d00c      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800adfe:	2b20      	cmp	r3, #32
 800ae00:	d815      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d019      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ae06:	2b10      	cmp	r3, #16
 800ae08:	d111      	bne.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae0a:	4b77      	ldr	r3, [pc, #476]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae0e:	4a76      	ldr	r2, [pc, #472]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ae16:	e011      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	2102      	movs	r1, #2
 800ae20:	4618      	mov	r0, r3
 800ae22:	f002 f997 	bl	800d154 <RCCEx_PLL2_Config>
 800ae26:	4603      	mov	r3, r0
 800ae28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ae2c:	e006      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae34:	e002      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ae36:	bf00      	nop
 800ae38:	e000      	b.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ae3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ae44:	4b68      	ldr	r3, [pc, #416]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ae4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae52:	4a65      	ldr	r2, [pc, #404]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae54:	430b      	orrs	r3, r1
 800ae56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ae58:	e003      	b.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ae62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ae6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ae72:	2300      	movs	r3, #0
 800ae74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ae78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	d051      	beq.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ae82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae8c:	d035      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ae8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae92:	d82e      	bhi.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ae94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ae98:	d031      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ae9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ae9e:	d828      	bhi.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aea4:	d01a      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800aea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeaa:	d822      	bhi.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d003      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800aeb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aeb4:	d007      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800aeb6:	e01c      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeb8:	4b4b      	ldr	r3, [pc, #300]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aeba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aebc:	4a4a      	ldr	r2, [pc, #296]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aec2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aec4:	e01c      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeca:	3308      	adds	r3, #8
 800aecc:	2100      	movs	r1, #0
 800aece:	4618      	mov	r0, r3
 800aed0:	f002 f940 	bl	800d154 <RCCEx_PLL2_Config>
 800aed4:	4603      	mov	r3, r0
 800aed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aeda:	e011      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aee0:	3328      	adds	r3, #40	@ 0x28
 800aee2:	2100      	movs	r1, #0
 800aee4:	4618      	mov	r0, r3
 800aee6:	f002 f9e7 	bl	800d2b8 <RCCEx_PLL3_Config>
 800aeea:	4603      	mov	r3, r0
 800aeec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aef0:	e006      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aef8:	e002      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800aefa:	bf00      	nop
 800aefc:	e000      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800aefe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10a      	bne.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800af08:	4b37      	ldr	r3, [pc, #220]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800af10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af16:	4a34      	ldr	r2, [pc, #208]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af18:	430b      	orrs	r3, r1
 800af1a:	6513      	str	r3, [r2, #80]	@ 0x50
 800af1c:	e003      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800af22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800af26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800af32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800af36:	2300      	movs	r3, #0
 800af38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800af40:	460b      	mov	r3, r1
 800af42:	4313      	orrs	r3, r2
 800af44:	d056      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800af46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800af50:	d033      	beq.n	800afba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800af52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800af56:	d82c      	bhi.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af5c:	d02f      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800af5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af62:	d826      	bhi.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800af68:	d02b      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800af6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800af6e:	d820      	bhi.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af74:	d012      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800af76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af7a:	d81a      	bhi.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d022      	beq.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800af80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af84:	d115      	bne.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af8a:	3308      	adds	r3, #8
 800af8c:	2101      	movs	r1, #1
 800af8e:	4618      	mov	r0, r3
 800af90:	f002 f8e0 	bl	800d154 <RCCEx_PLL2_Config>
 800af94:	4603      	mov	r3, r0
 800af96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af9a:	e015      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afa0:	3328      	adds	r3, #40	@ 0x28
 800afa2:	2101      	movs	r1, #1
 800afa4:	4618      	mov	r0, r3
 800afa6:	f002 f987 	bl	800d2b8 <RCCEx_PLL3_Config>
 800afaa:	4603      	mov	r3, r0
 800afac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800afb0:	e00a      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800afb8:	e006      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800afba:	bf00      	nop
 800afbc:	e004      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800afbe:	bf00      	nop
 800afc0:	e002      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800afc2:	bf00      	nop
 800afc4:	e000      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800afc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10d      	bne.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800afd0:	4b05      	ldr	r3, [pc, #20]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800afd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800afd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afde:	4a02      	ldr	r2, [pc, #8]	@ (800afe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800afe0:	430b      	orrs	r3, r1
 800afe2:	6513      	str	r3, [r2, #80]	@ 0x50
 800afe4:	e006      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800afe6:	bf00      	nop
 800afe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aff0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b004:	2300      	movs	r3, #0
 800b006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b00a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b00e:	460b      	mov	r3, r1
 800b010:	4313      	orrs	r3, r2
 800b012:	d055      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b018:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b01c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b020:	d033      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b026:	d82c      	bhi.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b02c:	d02f      	beq.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b02e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b032:	d826      	bhi.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b034:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b038:	d02b      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b03a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b03e:	d820      	bhi.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b044:	d012      	beq.n	800b06c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b04a:	d81a      	bhi.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d022      	beq.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b054:	d115      	bne.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b05a:	3308      	adds	r3, #8
 800b05c:	2101      	movs	r1, #1
 800b05e:	4618      	mov	r0, r3
 800b060:	f002 f878 	bl	800d154 <RCCEx_PLL2_Config>
 800b064:	4603      	mov	r3, r0
 800b066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b06a:	e015      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b070:	3328      	adds	r3, #40	@ 0x28
 800b072:	2101      	movs	r1, #1
 800b074:	4618      	mov	r0, r3
 800b076:	f002 f91f 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b07a:	4603      	mov	r3, r0
 800b07c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b080:	e00a      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b088:	e006      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b08a:	bf00      	nop
 800b08c:	e004      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b08e:	bf00      	nop
 800b090:	e002      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b092:	bf00      	nop
 800b094:	e000      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b096:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d10b      	bne.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b0a0:	4ba3      	ldr	r3, [pc, #652]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b0b0:	4a9f      	ldr	r2, [pc, #636]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0b2:	430b      	orrs	r3, r1
 800b0b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800b0b6:	e003      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b0cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b0d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	d037      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0ea:	d00e      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b0ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0f0:	d816      	bhi.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d018      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b0f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0fa:	d111      	bne.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0fc:	4b8c      	ldr	r3, [pc, #560]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b100:	4a8b      	ldr	r2, [pc, #556]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b108:	e00f      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b10e:	3308      	adds	r3, #8
 800b110:	2101      	movs	r1, #1
 800b112:	4618      	mov	r0, r3
 800b114:	f002 f81e 	bl	800d154 <RCCEx_PLL2_Config>
 800b118:	4603      	mov	r3, r0
 800b11a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b11e:	e004      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b126:	e000      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b12a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10a      	bne.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b132:	4b7f      	ldr	r3, [pc, #508]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b136:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b13a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b13e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b140:	4a7b      	ldr	r2, [pc, #492]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b142:	430b      	orrs	r3, r1
 800b144:	6513      	str	r3, [r2, #80]	@ 0x50
 800b146:	e003      	b.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b14c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b158:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b15c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b160:	2300      	movs	r3, #0
 800b162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b166:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b16a:	460b      	mov	r3, r1
 800b16c:	4313      	orrs	r3, r2
 800b16e:	d039      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b176:	2b03      	cmp	r3, #3
 800b178:	d81c      	bhi.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b17a:	a201      	add	r2, pc, #4	@ (adr r2, 800b180 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b180:	0800b1bd 	.word	0x0800b1bd
 800b184:	0800b191 	.word	0x0800b191
 800b188:	0800b19f 	.word	0x0800b19f
 800b18c:	0800b1bd 	.word	0x0800b1bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b190:	4b67      	ldr	r3, [pc, #412]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b194:	4a66      	ldr	r2, [pc, #408]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b19a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b19c:	e00f      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	2102      	movs	r1, #2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f001 ffd4 	bl	800d154 <RCCEx_PLL2_Config>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b1b2:	e004      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b1ba:	e000      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b1bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10a      	bne.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b1c6:	4b5a      	ldr	r3, [pc, #360]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1ca:	f023 0103 	bic.w	r1, r3, #3
 800b1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1d4:	4a56      	ldr	r2, [pc, #344]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b1da:	e003      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b1e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b1f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b1fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b1fe:	460b      	mov	r3, r1
 800b200:	4313      	orrs	r3, r2
 800b202:	f000 809f 	beq.w	800b344 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b206:	4b4b      	ldr	r3, [pc, #300]	@ (800b334 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a4a      	ldr	r2, [pc, #296]	@ (800b334 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b20c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b212:	f7f8 fe69 	bl	8003ee8 <HAL_GetTick>
 800b216:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b21a:	e00b      	b.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b21c:	f7f8 fe64 	bl	8003ee8 <HAL_GetTick>
 800b220:	4602      	mov	r2, r0
 800b222:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b226:	1ad3      	subs	r3, r2, r3
 800b228:	2b64      	cmp	r3, #100	@ 0x64
 800b22a:	d903      	bls.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b22c:	2303      	movs	r3, #3
 800b22e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b232:	e005      	b.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b234:	4b3f      	ldr	r3, [pc, #252]	@ (800b334 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d0ed      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b244:	2b00      	cmp	r3, #0
 800b246:	d179      	bne.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b248:	4b39      	ldr	r3, [pc, #228]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b24a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b250:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b254:	4053      	eors	r3, r2
 800b256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d015      	beq.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b25e:	4b34      	ldr	r3, [pc, #208]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b266:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b26a:	4b31      	ldr	r3, [pc, #196]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b26c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b26e:	4a30      	ldr	r2, [pc, #192]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b274:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b276:	4b2e      	ldr	r3, [pc, #184]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b27a:	4a2d      	ldr	r2, [pc, #180]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b27c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b280:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b282:	4a2b      	ldr	r2, [pc, #172]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b284:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b288:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b28e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b296:	d118      	bne.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b298:	f7f8 fe26 	bl	8003ee8 <HAL_GetTick>
 800b29c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2a0:	e00d      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2a2:	f7f8 fe21 	bl	8003ee8 <HAL_GetTick>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b2ac:	1ad2      	subs	r2, r2, r3
 800b2ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d903      	bls.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800b2bc:	e005      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2be:	4b1c      	ldr	r3, [pc, #112]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2c2:	f003 0302 	and.w	r3, r3, #2
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d0eb      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d129      	bne.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b2da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2e2:	d10e      	bne.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b2e4:	4b12      	ldr	r3, [pc, #72]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b2f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b2f4:	091a      	lsrs	r2, r3, #4
 800b2f6:	4b10      	ldr	r3, [pc, #64]	@ (800b338 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	4a0d      	ldr	r2, [pc, #52]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2fc:	430b      	orrs	r3, r1
 800b2fe:	6113      	str	r3, [r2, #16]
 800b300:	e005      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b302:	4b0b      	ldr	r3, [pc, #44]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	4a0a      	ldr	r2, [pc, #40]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b308:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b30c:	6113      	str	r3, [r2, #16]
 800b30e:	4b08      	ldr	r3, [pc, #32]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b310:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b31a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b31e:	4a04      	ldr	r2, [pc, #16]	@ (800b330 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b320:	430b      	orrs	r3, r1
 800b322:	6713      	str	r3, [r2, #112]	@ 0x70
 800b324:	e00e      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b32a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800b32e:	e009      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b330:	58024400 	.word	0x58024400
 800b334:	58024800 	.word	0x58024800
 800b338:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b33c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	f002 0301 	and.w	r3, r2, #1
 800b350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b354:	2300      	movs	r3, #0
 800b356:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b35a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b35e:	460b      	mov	r3, r1
 800b360:	4313      	orrs	r3, r2
 800b362:	f000 8089 	beq.w	800b478 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b36a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b36c:	2b28      	cmp	r3, #40	@ 0x28
 800b36e:	d86b      	bhi.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b370:	a201      	add	r2, pc, #4	@ (adr r2, 800b378 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b376:	bf00      	nop
 800b378:	0800b451 	.word	0x0800b451
 800b37c:	0800b449 	.word	0x0800b449
 800b380:	0800b449 	.word	0x0800b449
 800b384:	0800b449 	.word	0x0800b449
 800b388:	0800b449 	.word	0x0800b449
 800b38c:	0800b449 	.word	0x0800b449
 800b390:	0800b449 	.word	0x0800b449
 800b394:	0800b449 	.word	0x0800b449
 800b398:	0800b41d 	.word	0x0800b41d
 800b39c:	0800b449 	.word	0x0800b449
 800b3a0:	0800b449 	.word	0x0800b449
 800b3a4:	0800b449 	.word	0x0800b449
 800b3a8:	0800b449 	.word	0x0800b449
 800b3ac:	0800b449 	.word	0x0800b449
 800b3b0:	0800b449 	.word	0x0800b449
 800b3b4:	0800b449 	.word	0x0800b449
 800b3b8:	0800b433 	.word	0x0800b433
 800b3bc:	0800b449 	.word	0x0800b449
 800b3c0:	0800b449 	.word	0x0800b449
 800b3c4:	0800b449 	.word	0x0800b449
 800b3c8:	0800b449 	.word	0x0800b449
 800b3cc:	0800b449 	.word	0x0800b449
 800b3d0:	0800b449 	.word	0x0800b449
 800b3d4:	0800b449 	.word	0x0800b449
 800b3d8:	0800b451 	.word	0x0800b451
 800b3dc:	0800b449 	.word	0x0800b449
 800b3e0:	0800b449 	.word	0x0800b449
 800b3e4:	0800b449 	.word	0x0800b449
 800b3e8:	0800b449 	.word	0x0800b449
 800b3ec:	0800b449 	.word	0x0800b449
 800b3f0:	0800b449 	.word	0x0800b449
 800b3f4:	0800b449 	.word	0x0800b449
 800b3f8:	0800b451 	.word	0x0800b451
 800b3fc:	0800b449 	.word	0x0800b449
 800b400:	0800b449 	.word	0x0800b449
 800b404:	0800b449 	.word	0x0800b449
 800b408:	0800b449 	.word	0x0800b449
 800b40c:	0800b449 	.word	0x0800b449
 800b410:	0800b449 	.word	0x0800b449
 800b414:	0800b449 	.word	0x0800b449
 800b418:	0800b451 	.word	0x0800b451
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b420:	3308      	adds	r3, #8
 800b422:	2101      	movs	r1, #1
 800b424:	4618      	mov	r0, r3
 800b426:	f001 fe95 	bl	800d154 <RCCEx_PLL2_Config>
 800b42a:	4603      	mov	r3, r0
 800b42c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b430:	e00f      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b436:	3328      	adds	r3, #40	@ 0x28
 800b438:	2101      	movs	r1, #1
 800b43a:	4618      	mov	r0, r3
 800b43c:	f001 ff3c 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b440:	4603      	mov	r3, r0
 800b442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b446:	e004      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b44e:	e000      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b450:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10a      	bne.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b45a:	4bbf      	ldr	r3, [pc, #764]	@ (800b758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b45c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b45e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b466:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b468:	4abb      	ldr	r2, [pc, #748]	@ (800b758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b46a:	430b      	orrs	r3, r1
 800b46c:	6553      	str	r3, [r2, #84]	@ 0x54
 800b46e:	e003      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f002 0302 	and.w	r3, r2, #2
 800b484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b488:	2300      	movs	r3, #0
 800b48a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b48e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b492:	460b      	mov	r3, r1
 800b494:	4313      	orrs	r3, r2
 800b496:	d041      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b49c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b49e:	2b05      	cmp	r3, #5
 800b4a0:	d824      	bhi.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b4a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a8:	0800b4f5 	.word	0x0800b4f5
 800b4ac:	0800b4c1 	.word	0x0800b4c1
 800b4b0:	0800b4d7 	.word	0x0800b4d7
 800b4b4:	0800b4f5 	.word	0x0800b4f5
 800b4b8:	0800b4f5 	.word	0x0800b4f5
 800b4bc:	0800b4f5 	.word	0x0800b4f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4c4:	3308      	adds	r3, #8
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f001 fe43 	bl	800d154 <RCCEx_PLL2_Config>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b4d4:	e00f      	b.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b4da:	3328      	adds	r3, #40	@ 0x28
 800b4dc:	2101      	movs	r1, #1
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f001 feea 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b4ea:	e004      	b.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b4f2:	e000      	b.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b4f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10a      	bne.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b4fe:	4b96      	ldr	r3, [pc, #600]	@ (800b758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b502:	f023 0107 	bic.w	r1, r3, #7
 800b506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b50a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b50c:	4a92      	ldr	r2, [pc, #584]	@ (800b758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b50e:	430b      	orrs	r3, r1
 800b510:	6553      	str	r3, [r2, #84]	@ 0x54
 800b512:	e003      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b518:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f002 0304 	and.w	r3, r2, #4
 800b528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b52c:	2300      	movs	r3, #0
 800b52e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b532:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b536:	460b      	mov	r3, r1
 800b538:	4313      	orrs	r3, r2
 800b53a:	d044      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b544:	2b05      	cmp	r3, #5
 800b546:	d825      	bhi.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b548:	a201      	add	r2, pc, #4	@ (adr r2, 800b550 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54e:	bf00      	nop
 800b550:	0800b59d 	.word	0x0800b59d
 800b554:	0800b569 	.word	0x0800b569
 800b558:	0800b57f 	.word	0x0800b57f
 800b55c:	0800b59d 	.word	0x0800b59d
 800b560:	0800b59d 	.word	0x0800b59d
 800b564:	0800b59d 	.word	0x0800b59d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b56c:	3308      	adds	r3, #8
 800b56e:	2101      	movs	r1, #1
 800b570:	4618      	mov	r0, r3
 800b572:	f001 fdef 	bl	800d154 <RCCEx_PLL2_Config>
 800b576:	4603      	mov	r3, r0
 800b578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b57c:	e00f      	b.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b582:	3328      	adds	r3, #40	@ 0x28
 800b584:	2101      	movs	r1, #1
 800b586:	4618      	mov	r0, r3
 800b588:	f001 fe96 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b58c:	4603      	mov	r3, r0
 800b58e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b592:	e004      	b.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b59a:	e000      	b.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b59c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b59e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10b      	bne.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b5a6:	4b6c      	ldr	r3, [pc, #432]	@ (800b758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5aa:	f023 0107 	bic.w	r1, r3, #7
 800b5ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5b6:	4a68      	ldr	r2, [pc, #416]	@ (800b758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5b8:	430b      	orrs	r3, r1
 800b5ba:	6593      	str	r3, [r2, #88]	@ 0x58
 800b5bc:	e003      	b.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b5c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ce:	f002 0320 	and.w	r3, r2, #32
 800b5d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b5dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	d055      	beq.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5f2:	d033      	beq.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b5f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5f8:	d82c      	bhi.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5fe:	d02f      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b604:	d826      	bhi.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b606:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b60a:	d02b      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b60c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b610:	d820      	bhi.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b616:	d012      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b61c:	d81a      	bhi.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d022      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b626:	d115      	bne.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b62c:	3308      	adds	r3, #8
 800b62e:	2100      	movs	r1, #0
 800b630:	4618      	mov	r0, r3
 800b632:	f001 fd8f 	bl	800d154 <RCCEx_PLL2_Config>
 800b636:	4603      	mov	r3, r0
 800b638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b63c:	e015      	b.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b642:	3328      	adds	r3, #40	@ 0x28
 800b644:	2102      	movs	r1, #2
 800b646:	4618      	mov	r0, r3
 800b648:	f001 fe36 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b64c:	4603      	mov	r3, r0
 800b64e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b652:	e00a      	b.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b65a:	e006      	b.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b65c:	bf00      	nop
 800b65e:	e004      	b.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b660:	bf00      	nop
 800b662:	e002      	b.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b664:	bf00      	nop
 800b666:	e000      	b.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b66a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10b      	bne.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b672:	4b39      	ldr	r3, [pc, #228]	@ (800b758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b676:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b67e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b682:	4a35      	ldr	r2, [pc, #212]	@ (800b758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b684:	430b      	orrs	r3, r1
 800b686:	6553      	str	r3, [r2, #84]	@ 0x54
 800b688:	e003      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b68a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b68e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b69e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b6a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	d058      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b6ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b6be:	d033      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b6c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b6c4:	d82c      	bhi.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b6c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6ca:	d02f      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b6cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6d0:	d826      	bhi.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b6d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b6d6:	d02b      	beq.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b6d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b6dc:	d820      	bhi.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b6de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6e2:	d012      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b6e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6e8:	d81a      	bhi.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d022      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b6ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6f2:	d115      	bne.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f001 fd29 	bl	800d154 <RCCEx_PLL2_Config>
 800b702:	4603      	mov	r3, r0
 800b704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b708:	e015      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b70e:	3328      	adds	r3, #40	@ 0x28
 800b710:	2102      	movs	r1, #2
 800b712:	4618      	mov	r0, r3
 800b714:	f001 fdd0 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b718:	4603      	mov	r3, r0
 800b71a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b71e:	e00a      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b726:	e006      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b728:	bf00      	nop
 800b72a:	e004      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b72c:	bf00      	nop
 800b72e:	e002      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b730:	bf00      	nop
 800b732:	e000      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b734:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d10e      	bne.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b73e:	4b06      	ldr	r3, [pc, #24]	@ (800b758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b742:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b74a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b74e:	4a02      	ldr	r2, [pc, #8]	@ (800b758 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b750:	430b      	orrs	r3, r1
 800b752:	6593      	str	r3, [r2, #88]	@ 0x58
 800b754:	e006      	b.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b756:	bf00      	nop
 800b758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b75c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b774:	2300      	movs	r3, #0
 800b776:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b77a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b77e:	460b      	mov	r3, r1
 800b780:	4313      	orrs	r3, r2
 800b782:	d055      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b788:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b78c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b790:	d033      	beq.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b792:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b796:	d82c      	bhi.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b79c:	d02f      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b79e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7a2:	d826      	bhi.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b7a8:	d02b      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b7aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b7ae:	d820      	bhi.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7b4:	d012      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b7b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7ba:	d81a      	bhi.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d022      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b7c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7c4:	d115      	bne.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7ca:	3308      	adds	r3, #8
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f001 fcc0 	bl	800d154 <RCCEx_PLL2_Config>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b7da:	e015      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b7e0:	3328      	adds	r3, #40	@ 0x28
 800b7e2:	2102      	movs	r1, #2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 fd67 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b7f0:	e00a      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b7f8:	e006      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b7fa:	bf00      	nop
 800b7fc:	e004      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b7fe:	bf00      	nop
 800b800:	e002      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b802:	bf00      	nop
 800b804:	e000      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b806:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10b      	bne.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b810:	4ba1      	ldr	r3, [pc, #644]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b814:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b81c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b820:	4a9d      	ldr	r2, [pc, #628]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b822:	430b      	orrs	r3, r1
 800b824:	6593      	str	r3, [r2, #88]	@ 0x58
 800b826:	e003      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b82c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f002 0308 	and.w	r3, r2, #8
 800b83c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b840:	2300      	movs	r3, #0
 800b842:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b846:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b84a:	460b      	mov	r3, r1
 800b84c:	4313      	orrs	r3, r2
 800b84e:	d01e      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b85c:	d10c      	bne.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b862:	3328      	adds	r3, #40	@ 0x28
 800b864:	2102      	movs	r1, #2
 800b866:	4618      	mov	r0, r3
 800b868:	f001 fd26 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d002      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b878:	4b87      	ldr	r3, [pc, #540]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b87a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b87c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b888:	4a83      	ldr	r2, [pc, #524]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b88a:	430b      	orrs	r3, r1
 800b88c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b896:	f002 0310 	and.w	r3, r2, #16
 800b89a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b8a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	d01e      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b8b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8ba:	d10c      	bne.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8c0:	3328      	adds	r3, #40	@ 0x28
 800b8c2:	2102      	movs	r1, #2
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f001 fcf7 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b8d6:	4b70      	ldr	r3, [pc, #448]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b8e6:	4a6c      	ldr	r2, [pc, #432]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8e8:	430b      	orrs	r3, r1
 800b8ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b8f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b902:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b906:	460b      	mov	r3, r1
 800b908:	4313      	orrs	r3, r2
 800b90a:	d03e      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b910:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b918:	d022      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b91a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b91e:	d81b      	bhi.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b928:	d00b      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b92a:	e015      	b.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b930:	3308      	adds	r3, #8
 800b932:	2100      	movs	r1, #0
 800b934:	4618      	mov	r0, r3
 800b936:	f001 fc0d 	bl	800d154 <RCCEx_PLL2_Config>
 800b93a:	4603      	mov	r3, r0
 800b93c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b940:	e00f      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b946:	3328      	adds	r3, #40	@ 0x28
 800b948:	2102      	movs	r1, #2
 800b94a:	4618      	mov	r0, r3
 800b94c:	f001 fcb4 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b950:	4603      	mov	r3, r0
 800b952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b956:	e004      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b95e:	e000      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b960:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b966:	2b00      	cmp	r3, #0
 800b968:	d10b      	bne.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b96a:	4b4b      	ldr	r3, [pc, #300]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b96c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b96e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b976:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b97a:	4a47      	ldr	r2, [pc, #284]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b97c:	430b      	orrs	r3, r1
 800b97e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b980:	e003      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b992:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b996:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b998:	2300      	movs	r3, #0
 800b99a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b99c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	d03b      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9b2:	d01f      	beq.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b9b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9b8:	d818      	bhi.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b9ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9be:	d003      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b9c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9c4:	d007      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b9c6:	e011      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9c8:	4b33      	ldr	r3, [pc, #204]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9cc:	4a32      	ldr	r2, [pc, #200]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b9d4:	e00f      	b.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9da:	3328      	adds	r3, #40	@ 0x28
 800b9dc:	2101      	movs	r1, #1
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f001 fc6a 	bl	800d2b8 <RCCEx_PLL3_Config>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b9ea:	e004      	b.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800b9f2:	e000      	b.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b9f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10b      	bne.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b9fe:	4b26      	ldr	r3, [pc, #152]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ba06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba0e:	4a22      	ldr	r2, [pc, #136]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba10:	430b      	orrs	r3, r1
 800ba12:	6553      	str	r3, [r2, #84]	@ 0x54
 800ba14:	e003      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ba1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ba2a:	673b      	str	r3, [r7, #112]	@ 0x70
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ba34:	460b      	mov	r3, r1
 800ba36:	4313      	orrs	r3, r2
 800ba38:	d034      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ba3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d003      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ba44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba48:	d007      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ba4a:	e011      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba4c:	4b12      	ldr	r3, [pc, #72]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba50:	4a11      	ldr	r2, [pc, #68]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba58:	e00e      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba5e:	3308      	adds	r3, #8
 800ba60:	2102      	movs	r1, #2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f001 fb76 	bl	800d154 <RCCEx_PLL2_Config>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba6e:	e003      	b.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ba76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10d      	bne.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ba80:	4b05      	ldr	r3, [pc, #20]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ba88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba8e:	4a02      	ldr	r2, [pc, #8]	@ (800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba90:	430b      	orrs	r3, r1
 800ba92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ba94:	e006      	b.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ba96:	bf00      	nop
 800ba98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800baa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800baa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800baa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800bab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bab2:	2300      	movs	r3, #0
 800bab4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bab6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800baba:	460b      	mov	r3, r1
 800babc:	4313      	orrs	r3, r2
 800babe:	d00c      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bac4:	3328      	adds	r3, #40	@ 0x28
 800bac6:	2102      	movs	r1, #2
 800bac8:	4618      	mov	r0, r3
 800baca:	f001 fbf5 	bl	800d2b8 <RCCEx_PLL3_Config>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800bae6:	663b      	str	r3, [r7, #96]	@ 0x60
 800bae8:	2300      	movs	r3, #0
 800baea:	667b      	str	r3, [r7, #100]	@ 0x64
 800baec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800baf0:	460b      	mov	r3, r1
 800baf2:	4313      	orrs	r3, r2
 800baf4:	d038      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800baf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bafa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bafe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb02:	d018      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bb04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb08:	d811      	bhi.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bb0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb0e:	d014      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bb10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb14:	d80b      	bhi.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d011      	beq.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bb1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb1e:	d106      	bne.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb20:	4bc3      	ldr	r3, [pc, #780]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb24:	4ac2      	ldr	r2, [pc, #776]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bb2c:	e008      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bb34:	e004      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb36:	bf00      	nop
 800bb38:	e002      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb3a:	bf00      	nop
 800bb3c:	e000      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bb3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d10b      	bne.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb48:	4bb9      	ldr	r3, [pc, #740]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb4c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bb50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bb58:	4ab5      	ldr	r2, [pc, #724]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb5a:	430b      	orrs	r3, r1
 800bb5c:	6553      	str	r3, [r2, #84]	@ 0x54
 800bb5e:	e003      	b.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bb68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800bb74:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb76:	2300      	movs	r3, #0
 800bb78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bb7e:	460b      	mov	r3, r1
 800bb80:	4313      	orrs	r3, r2
 800bb82:	d009      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bb84:	4baa      	ldr	r3, [pc, #680]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb92:	4aa7      	ldr	r2, [pc, #668]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb94:	430b      	orrs	r3, r1
 800bb96:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bb98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800bba4:	653b      	str	r3, [r7, #80]	@ 0x50
 800bba6:	2300      	movs	r3, #0
 800bba8:	657b      	str	r3, [r7, #84]	@ 0x54
 800bbaa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	d00a      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bbb4:	4b9e      	ldr	r3, [pc, #632]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800bbbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bbc4:	4a9a      	ldr	r2, [pc, #616]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbc6:	430b      	orrs	r3, r1
 800bbc8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bbca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800bbd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbd8:	2300      	movs	r3, #0
 800bbda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbdc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	d009      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bbe6:	4b92      	ldr	r3, [pc, #584]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800bbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbf4:	4a8e      	ldr	r2, [pc, #568]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbf6:	430b      	orrs	r3, r1
 800bbf8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800bc06:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc08:	2300      	movs	r3, #0
 800bc0a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bc10:	460b      	mov	r3, r1
 800bc12:	4313      	orrs	r3, r2
 800bc14:	d00e      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc16:	4b86      	ldr	r3, [pc, #536]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	4a85      	ldr	r2, [pc, #532]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bc20:	6113      	str	r3, [r2, #16]
 800bc22:	4b83      	ldr	r3, [pc, #524]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc24:	6919      	ldr	r1, [r3, #16]
 800bc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bc2e:	4a80      	ldr	r2, [pc, #512]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc30:	430b      	orrs	r3, r1
 800bc32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bc40:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc42:	2300      	movs	r3, #0
 800bc44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	d009      	beq.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc50:	4b77      	ldr	r3, [pc, #476]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc54:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc5e:	4a74      	ldr	r2, [pc, #464]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc60:	430b      	orrs	r3, r1
 800bc62:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800bc70:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc72:	2300      	movs	r3, #0
 800bc74:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	d00a      	beq.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc80:	4b6b      	ldr	r3, [pc, #428]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc84:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800bc88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc90:	4a67      	ldr	r2, [pc, #412]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc92:	430b      	orrs	r3, r1
 800bc94:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bc96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	2100      	movs	r1, #0
 800bca0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800bca2:	f003 0301 	and.w	r3, r3, #1
 800bca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bca8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bcac:	460b      	mov	r3, r1
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	d011      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	2100      	movs	r1, #0
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f001 fa4a 	bl	800d154 <RCCEx_PLL2_Config>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800bcc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d003      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bcd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bcd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	2100      	movs	r1, #0
 800bce0:	6239      	str	r1, [r7, #32]
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bce8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bcec:	460b      	mov	r3, r1
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	d011      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bcf6:	3308      	adds	r3, #8
 800bcf8:	2101      	movs	r1, #1
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f001 fa2a 	bl	800d154 <RCCEx_PLL2_Config>
 800bd00:	4603      	mov	r3, r0
 800bd02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800bd06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d003      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	2100      	movs	r1, #0
 800bd20:	61b9      	str	r1, [r7, #24]
 800bd22:	f003 0304 	and.w	r3, r3, #4
 800bd26:	61fb      	str	r3, [r7, #28]
 800bd28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	d011      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd36:	3308      	adds	r3, #8
 800bd38:	2102      	movs	r1, #2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f001 fa0a 	bl	800d154 <RCCEx_PLL2_Config>
 800bd40:	4603      	mov	r3, r0
 800bd42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800bd46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d003      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bd56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5e:	2100      	movs	r1, #0
 800bd60:	6139      	str	r1, [r7, #16]
 800bd62:	f003 0308 	and.w	r3, r3, #8
 800bd66:	617b      	str	r3, [r7, #20]
 800bd68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	d011      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd76:	3328      	adds	r3, #40	@ 0x28
 800bd78:	2100      	movs	r1, #0
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f001 fa9c 	bl	800d2b8 <RCCEx_PLL3_Config>
 800bd80:	4603      	mov	r3, r0
 800bd82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800bd86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d003      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	2100      	movs	r1, #0
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	f003 0310 	and.w	r3, r3, #16
 800bda6:	60fb      	str	r3, [r7, #12]
 800bda8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bdac:	460b      	mov	r3, r1
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	d011      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdb6:	3328      	adds	r3, #40	@ 0x28
 800bdb8:	2101      	movs	r1, #1
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f001 fa7c 	bl	800d2b8 <RCCEx_PLL3_Config>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800bdc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d003      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bdd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bdd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	2100      	movs	r1, #0
 800bde0:	6039      	str	r1, [r7, #0]
 800bde2:	f003 0320 	and.w	r3, r3, #32
 800bde6:	607b      	str	r3, [r7, #4]
 800bde8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bdec:	460b      	mov	r3, r1
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	d011      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdf6:	3328      	adds	r3, #40	@ 0x28
 800bdf8:	2102      	movs	r1, #2
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f001 fa5c 	bl	800d2b8 <RCCEx_PLL3_Config>
 800be00:	4603      	mov	r3, r0
 800be02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800be06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d003      	beq.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800be12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800be16:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	e000      	b.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800be22:	2301      	movs	r3, #1
}
 800be24:	4618      	mov	r0, r3
 800be26:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800be2a:	46bd      	mov	sp, r7
 800be2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be30:	58024400 	.word	0x58024400

0800be34 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b090      	sub	sp, #64	@ 0x40
 800be38:	af00      	add	r7, sp, #0
 800be3a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be42:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800be46:	430b      	orrs	r3, r1
 800be48:	f040 8094 	bne.w	800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800be4c:	4b9e      	ldr	r3, [pc, #632]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be50:	f003 0307 	and.w	r3, r3, #7
 800be54:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800be56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be58:	2b04      	cmp	r3, #4
 800be5a:	f200 8087 	bhi.w	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800be5e:	a201      	add	r2, pc, #4	@ (adr r2, 800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800be60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be64:	0800be79 	.word	0x0800be79
 800be68:	0800bea1 	.word	0x0800bea1
 800be6c:	0800bec9 	.word	0x0800bec9
 800be70:	0800bf65 	.word	0x0800bf65
 800be74:	0800bef1 	.word	0x0800bef1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be78:	4b93      	ldr	r3, [pc, #588]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be84:	d108      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be8a:	4618      	mov	r0, r3
 800be8c:	f001 f810 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be94:	f000 bd45 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be98:	2300      	movs	r3, #0
 800be9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be9c:	f000 bd41 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bea0:	4b89      	ldr	r3, [pc, #548]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800beac:	d108      	bne.n	800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beae:	f107 0318 	add.w	r3, r7, #24
 800beb2:	4618      	mov	r0, r3
 800beb4:	f000 fd54 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bebc:	f000 bd31 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bec4:	f000 bd2d 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bec8:	4b7f      	ldr	r3, [pc, #508]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bed4:	d108      	bne.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bed6:	f107 030c 	add.w	r3, r7, #12
 800beda:	4618      	mov	r0, r3
 800bedc:	f000 fe94 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bee4:	f000 bd1d 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beec:	f000 bd19 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bef0:	4b75      	ldr	r3, [pc, #468]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bef4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bef8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800befa:	4b73      	ldr	r3, [pc, #460]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f003 0304 	and.w	r3, r3, #4
 800bf02:	2b04      	cmp	r3, #4
 800bf04:	d10c      	bne.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bf06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d109      	bne.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf0c:	4b6e      	ldr	r3, [pc, #440]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	08db      	lsrs	r3, r3, #3
 800bf12:	f003 0303 	and.w	r3, r3, #3
 800bf16:	4a6d      	ldr	r2, [pc, #436]	@ (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf18:	fa22 f303 	lsr.w	r3, r2, r3
 800bf1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf1e:	e01f      	b.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf20:	4b69      	ldr	r3, [pc, #420]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf2c:	d106      	bne.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bf2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf34:	d102      	bne.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf36:	4b66      	ldr	r3, [pc, #408]	@ (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bf38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf3a:	e011      	b.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf3c:	4b62      	ldr	r3, [pc, #392]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf48:	d106      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bf4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf50:	d102      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf52:	4b60      	ldr	r3, [pc, #384]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bf54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf56:	e003      	b.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bf5c:	f000 bce1 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf60:	f000 bcdf 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf64:	4b5c      	ldr	r3, [pc, #368]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bf66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf68:	f000 bcdb 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf70:	f000 bcd7 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bf74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf78:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800bf7c:	430b      	orrs	r3, r1
 800bf7e:	f040 80ad 	bne.w	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bf82:	4b51      	ldr	r3, [pc, #324]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf86:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800bf8a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800bf8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf92:	d056      	beq.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf9a:	f200 8090 	bhi.w	800c0be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa0:	2bc0      	cmp	r3, #192	@ 0xc0
 800bfa2:	f000 8088 	beq.w	800c0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa8:	2bc0      	cmp	r3, #192	@ 0xc0
 800bfaa:	f200 8088 	bhi.w	800c0be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb0:	2b80      	cmp	r3, #128	@ 0x80
 800bfb2:	d032      	beq.n	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb6:	2b80      	cmp	r3, #128	@ 0x80
 800bfb8:	f200 8081 	bhi.w	800c0be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d003      	beq.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc4:	2b40      	cmp	r3, #64	@ 0x40
 800bfc6:	d014      	beq.n	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bfc8:	e079      	b.n	800c0be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfca:	4b3f      	ldr	r3, [pc, #252]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bfd6:	d108      	bne.n	800bfea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f000 ff67 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfe6:	f000 bc9c 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfea:	2300      	movs	r3, #0
 800bfec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bfee:	f000 bc98 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bff2:	4b35      	ldr	r3, [pc, #212]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bffa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bffe:	d108      	bne.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c000:	f107 0318 	add.w	r3, r7, #24
 800c004:	4618      	mov	r0, r3
 800c006:	f000 fcab 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c00e:	f000 bc88 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c016:	f000 bc84 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c01a:	4b2b      	ldr	r3, [pc, #172]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c026:	d108      	bne.n	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c028:	f107 030c 	add.w	r3, r7, #12
 800c02c:	4618      	mov	r0, r3
 800c02e:	f000 fdeb 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c036:	f000 bc74 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c03e:	f000 bc70 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c042:	4b21      	ldr	r3, [pc, #132]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c046:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c04a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c04c:	4b1e      	ldr	r3, [pc, #120]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 0304 	and.w	r3, r3, #4
 800c054:	2b04      	cmp	r3, #4
 800c056:	d10c      	bne.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d109      	bne.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c05e:	4b1a      	ldr	r3, [pc, #104]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	08db      	lsrs	r3, r3, #3
 800c064:	f003 0303 	and.w	r3, r3, #3
 800c068:	4a18      	ldr	r2, [pc, #96]	@ (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c06a:	fa22 f303 	lsr.w	r3, r2, r3
 800c06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c070:	e01f      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c072:	4b15      	ldr	r3, [pc, #84]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c07a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c07e:	d106      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c086:	d102      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c088:	4b11      	ldr	r3, [pc, #68]	@ (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c08c:	e011      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c08e:	4b0e      	ldr	r3, [pc, #56]	@ (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c09a:	d106      	bne.n	800c0aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c09c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c09e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0a2:	d102      	bne.n	800c0aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0a8:	e003      	b.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c0ae:	f000 bc38 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0b2:	f000 bc36 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0b6:	4b08      	ldr	r3, [pc, #32]	@ (800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0ba:	f000 bc32 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0c2:	f000 bc2e 	b.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c0c6:	bf00      	nop
 800c0c8:	58024400 	.word	0x58024400
 800c0cc:	03d09000 	.word	0x03d09000
 800c0d0:	003d0900 	.word	0x003d0900
 800c0d4:	017d7840 	.word	0x017d7840
 800c0d8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c0dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0e0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c0e4:	430b      	orrs	r3, r1
 800c0e6:	f040 809c 	bne.w	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c0ea:	4b9e      	ldr	r3, [pc, #632]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0ee:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c0f2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c0fa:	d054      	beq.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c102:	f200 808b 	bhi.w	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c108:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c10c:	f000 8083 	beq.w	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c112:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c116:	f200 8081 	bhi.w	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c11c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c120:	d02f      	beq.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c128:	d878      	bhi.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d004      	beq.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c132:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c136:	d012      	beq.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c138:	e070      	b.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c13a:	4b8a      	ldr	r3, [pc, #552]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c146:	d107      	bne.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c14c:	4618      	mov	r0, r3
 800c14e:	f000 feaf 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c156:	e3e4      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c15c:	e3e1      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c15e:	4b81      	ldr	r3, [pc, #516]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c16a:	d107      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c16c:	f107 0318 	add.w	r3, r7, #24
 800c170:	4618      	mov	r0, r3
 800c172:	f000 fbf5 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c17a:	e3d2      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c180:	e3cf      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c182:	4b78      	ldr	r3, [pc, #480]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c18a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c18e:	d107      	bne.n	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c190:	f107 030c 	add.w	r3, r7, #12
 800c194:	4618      	mov	r0, r3
 800c196:	f000 fd37 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c19e:	e3c0      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c1a4:	e3bd      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1a6:	4b6f      	ldr	r3, [pc, #444]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c1ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1b0:	4b6c      	ldr	r3, [pc, #432]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f003 0304 	and.w	r3, r3, #4
 800c1b8:	2b04      	cmp	r3, #4
 800c1ba:	d10c      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d109      	bne.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1c2:	4b68      	ldr	r3, [pc, #416]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	08db      	lsrs	r3, r3, #3
 800c1c8:	f003 0303 	and.w	r3, r3, #3
 800c1cc:	4a66      	ldr	r2, [pc, #408]	@ (800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c1ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1d4:	e01e      	b.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1d6:	4b63      	ldr	r3, [pc, #396]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1e2:	d106      	bne.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1ea:	d102      	bne.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1ec:	4b5f      	ldr	r3, [pc, #380]	@ (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1f0:	e010      	b.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1f2:	4b5c      	ldr	r3, [pc, #368]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1fe:	d106      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c206:	d102      	bne.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c208:	4b59      	ldr	r3, [pc, #356]	@ (800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c20c:	e002      	b.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c212:	e386      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c214:	e385      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c216:	4b57      	ldr	r3, [pc, #348]	@ (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c21a:	e382      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c220:	e37f      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c222:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c226:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800c22a:	430b      	orrs	r3, r1
 800c22c:	f040 80a7 	bne.w	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c230:	4b4c      	ldr	r3, [pc, #304]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c234:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c238:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c23c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c240:	d055      	beq.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c244:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c248:	f200 8096 	bhi.w	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c24e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c252:	f000 8084 	beq.w	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c258:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c25c:	f200 808c 	bhi.w	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c262:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c266:	d030      	beq.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c26a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c26e:	f200 8083 	bhi.w	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c274:	2b00      	cmp	r3, #0
 800c276:	d004      	beq.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c27a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c27e:	d012      	beq.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c280:	e07a      	b.n	800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c282:	4b38      	ldr	r3, [pc, #224]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c28a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c28e:	d107      	bne.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c294:	4618      	mov	r0, r3
 800c296:	f000 fe0b 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c29e:	e340      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2a4:	e33d      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2a6:	4b2f      	ldr	r3, [pc, #188]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2b2:	d107      	bne.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2b4:	f107 0318 	add.w	r3, r7, #24
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 fb51 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2c2:	e32e      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2c8:	e32b      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2ca:	4b26      	ldr	r3, [pc, #152]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c2d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c2d6:	d107      	bne.n	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2d8:	f107 030c 	add.w	r3, r7, #12
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 fc93 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e6:	e31c      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2ec:	e319      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2ee:	4b1d      	ldr	r3, [pc, #116]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c2f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2f8:	4b1a      	ldr	r3, [pc, #104]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 0304 	and.w	r3, r3, #4
 800c300:	2b04      	cmp	r3, #4
 800c302:	d10c      	bne.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c306:	2b00      	cmp	r3, #0
 800c308:	d109      	bne.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c30a:	4b16      	ldr	r3, [pc, #88]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	08db      	lsrs	r3, r3, #3
 800c310:	f003 0303 	and.w	r3, r3, #3
 800c314:	4a14      	ldr	r2, [pc, #80]	@ (800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c316:	fa22 f303 	lsr.w	r3, r2, r3
 800c31a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c31c:	e01e      	b.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c31e:	4b11      	ldr	r3, [pc, #68]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c32a:	d106      	bne.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c32e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c332:	d102      	bne.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c334:	4b0d      	ldr	r3, [pc, #52]	@ (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c338:	e010      	b.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c33a:	4b0a      	ldr	r3, [pc, #40]	@ (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c342:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c346:	d106      	bne.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c34a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c34e:	d102      	bne.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c350:	4b07      	ldr	r3, [pc, #28]	@ (800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c354:	e002      	b.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c35a:	e2e2      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c35c:	e2e1      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c35e:	4b05      	ldr	r3, [pc, #20]	@ (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c362:	e2de      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c364:	58024400 	.word	0x58024400
 800c368:	03d09000 	.word	0x03d09000
 800c36c:	003d0900 	.word	0x003d0900
 800c370:	017d7840 	.word	0x017d7840
 800c374:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c378:	2300      	movs	r3, #0
 800c37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c37c:	e2d1      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c37e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c382:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800c386:	430b      	orrs	r3, r1
 800c388:	f040 809c 	bne.w	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c38c:	4b93      	ldr	r3, [pc, #588]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c38e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c390:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c394:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c39c:	d054      	beq.n	800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c3a4:	f200 808b 	bhi.w	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c3ae:	f000 8083 	beq.w	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c3b8:	f200 8081 	bhi.w	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c3c2:	d02f      	beq.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c3ca:	d878      	bhi.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d004      	beq.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c3d8:	d012      	beq.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c3da:	e070      	b.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3dc:	4b7f      	ldr	r3, [pc, #508]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3e8:	d107      	bne.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 fd5e 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3f8:	e293      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c3fe:	e290      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c400:	4b76      	ldr	r3, [pc, #472]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c40c:	d107      	bne.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c40e:	f107 0318 	add.w	r3, r7, #24
 800c412:	4618      	mov	r0, r3
 800c414:	f000 faa4 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c41c:	e281      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c422:	e27e      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c424:	4b6d      	ldr	r3, [pc, #436]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c42c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c430:	d107      	bne.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c432:	f107 030c 	add.w	r3, r7, #12
 800c436:	4618      	mov	r0, r3
 800c438:	f000 fbe6 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c440:	e26f      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c446:	e26c      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c448:	4b64      	ldr	r3, [pc, #400]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c44a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c44c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c450:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c452:	4b62      	ldr	r3, [pc, #392]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 0304 	and.w	r3, r3, #4
 800c45a:	2b04      	cmp	r3, #4
 800c45c:	d10c      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c45e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c460:	2b00      	cmp	r3, #0
 800c462:	d109      	bne.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c464:	4b5d      	ldr	r3, [pc, #372]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	08db      	lsrs	r3, r3, #3
 800c46a:	f003 0303 	and.w	r3, r3, #3
 800c46e:	4a5c      	ldr	r2, [pc, #368]	@ (800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c470:	fa22 f303 	lsr.w	r3, r2, r3
 800c474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c476:	e01e      	b.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c478:	4b58      	ldr	r3, [pc, #352]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c484:	d106      	bne.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c488:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c48c:	d102      	bne.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c48e:	4b55      	ldr	r3, [pc, #340]	@ (800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c492:	e010      	b.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c494:	4b51      	ldr	r3, [pc, #324]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c49c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c4a0:	d106      	bne.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c4a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4a8:	d102      	bne.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4aa:	4b4f      	ldr	r3, [pc, #316]	@ (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4ae:	e002      	b.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c4b4:	e235      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4b6:	e234      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4b8:	4b4c      	ldr	r3, [pc, #304]	@ (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4bc:	e231      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4c2:	e22e      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c4c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4c8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800c4cc:	430b      	orrs	r3, r1
 800c4ce:	f040 808f 	bne.w	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c4d2:	4b42      	ldr	r3, [pc, #264]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4d6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c4da:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c4e2:	d06b      	beq.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c4ea:	d874      	bhi.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c4f2:	d056      	beq.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c4fa:	d86c      	bhi.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c502:	d03b      	beq.n	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c506:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c50a:	d864      	bhi.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c512:	d021      	beq.n	800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c516:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c51a:	d85c      	bhi.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d004      	beq.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c528:	d004      	beq.n	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c52a:	e054      	b.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c52c:	f7fe fa4c 	bl	800a9c8 <HAL_RCC_GetPCLK1Freq>
 800c530:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c532:	e1f6      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c534:	4b29      	ldr	r3, [pc, #164]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c53c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c540:	d107      	bne.n	800c552 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c542:	f107 0318 	add.w	r3, r7, #24
 800c546:	4618      	mov	r0, r3
 800c548:	f000 fa0a 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c550:	e1e7      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c552:	2300      	movs	r3, #0
 800c554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c556:	e1e4      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c558:	4b20      	ldr	r3, [pc, #128]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c564:	d107      	bne.n	800c576 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c566:	f107 030c 	add.w	r3, r7, #12
 800c56a:	4618      	mov	r0, r3
 800c56c:	f000 fb4c 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c574:	e1d5      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c576:	2300      	movs	r3, #0
 800c578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c57a:	e1d2      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c57c:	4b17      	ldr	r3, [pc, #92]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 0304 	and.w	r3, r3, #4
 800c584:	2b04      	cmp	r3, #4
 800c586:	d109      	bne.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c588:	4b14      	ldr	r3, [pc, #80]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	08db      	lsrs	r3, r3, #3
 800c58e:	f003 0303 	and.w	r3, r3, #3
 800c592:	4a13      	ldr	r2, [pc, #76]	@ (800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c594:	fa22 f303 	lsr.w	r3, r2, r3
 800c598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c59a:	e1c2      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c59c:	2300      	movs	r3, #0
 800c59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5a0:	e1bf      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5a2:	4b0e      	ldr	r3, [pc, #56]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5ae:	d102      	bne.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c5b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b4:	e1b5      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5ba:	e1b2      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5bc:	4b07      	ldr	r3, [pc, #28]	@ (800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5c8:	d102      	bne.n	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c5ca:	4b07      	ldr	r3, [pc, #28]	@ (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ce:	e1a8      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5d4:	e1a5      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5da:	e1a2      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5dc:	58024400 	.word	0x58024400
 800c5e0:	03d09000 	.word	0x03d09000
 800c5e4:	003d0900 	.word	0x003d0900
 800c5e8:	017d7840 	.word	0x017d7840
 800c5ec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c5f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5f4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800c5f8:	430b      	orrs	r3, r1
 800c5fa:	d173      	bne.n	800c6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c5fc:	4b9c      	ldr	r3, [pc, #624]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c604:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c608:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c60c:	d02f      	beq.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c610:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c614:	d863      	bhi.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d004      	beq.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c622:	d012      	beq.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c624:	e05b      	b.n	800c6de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c626:	4b92      	ldr	r3, [pc, #584]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c62e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c632:	d107      	bne.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c634:	f107 0318 	add.w	r3, r7, #24
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 f991 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c642:	e16e      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c644:	2300      	movs	r3, #0
 800c646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c648:	e16b      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c64a:	4b89      	ldr	r3, [pc, #548]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c656:	d107      	bne.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c658:	f107 030c 	add.w	r3, r7, #12
 800c65c:	4618      	mov	r0, r3
 800c65e:	f000 fad3 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c666:	e15c      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c668:	2300      	movs	r3, #0
 800c66a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c66c:	e159      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c66e:	4b80      	ldr	r3, [pc, #512]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c672:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c676:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c678:	4b7d      	ldr	r3, [pc, #500]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f003 0304 	and.w	r3, r3, #4
 800c680:	2b04      	cmp	r3, #4
 800c682:	d10c      	bne.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c686:	2b00      	cmp	r3, #0
 800c688:	d109      	bne.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c68a:	4b79      	ldr	r3, [pc, #484]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	08db      	lsrs	r3, r3, #3
 800c690:	f003 0303 	and.w	r3, r3, #3
 800c694:	4a77      	ldr	r2, [pc, #476]	@ (800c874 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c696:	fa22 f303 	lsr.w	r3, r2, r3
 800c69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c69c:	e01e      	b.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c69e:	4b74      	ldr	r3, [pc, #464]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6aa:	d106      	bne.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6b2:	d102      	bne.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6b4:	4b70      	ldr	r3, [pc, #448]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6b8:	e010      	b.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6ba:	4b6d      	ldr	r3, [pc, #436]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6c6:	d106      	bne.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6ce:	d102      	bne.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6d0:	4b6a      	ldr	r3, [pc, #424]	@ (800c87c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6d4:	e002      	b.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c6da:	e122      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6dc:	e121      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6e2:	e11e      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6e8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800c6ec:	430b      	orrs	r3, r1
 800c6ee:	d133      	bne.n	800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c6f0:	4b5f      	ldr	r3, [pc, #380]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c6f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d004      	beq.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c706:	d012      	beq.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c708:	e023      	b.n	800c752 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c70a:	4b59      	ldr	r3, [pc, #356]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c712:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c716:	d107      	bne.n	800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c71c:	4618      	mov	r0, r3
 800c71e:	f000 fbc7 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c726:	e0fc      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c728:	2300      	movs	r3, #0
 800c72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c72c:	e0f9      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c72e:	4b50      	ldr	r3, [pc, #320]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c73a:	d107      	bne.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c73c:	f107 0318 	add.w	r3, r7, #24
 800c740:	4618      	mov	r0, r3
 800c742:	f000 f90d 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c746:	6a3b      	ldr	r3, [r7, #32]
 800c748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c74a:	e0ea      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c74c:	2300      	movs	r3, #0
 800c74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c750:	e0e7      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c752:	2300      	movs	r3, #0
 800c754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c756:	e0e4      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c75c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800c760:	430b      	orrs	r3, r1
 800c762:	f040 808d 	bne.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c766:	4b42      	ldr	r3, [pc, #264]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c76a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800c76e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c772:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c776:	d06b      	beq.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c77e:	d874      	bhi.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c786:	d056      	beq.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c78e:	d86c      	bhi.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c792:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c796:	d03b      	beq.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c79e:	d864      	bhi.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7a6:	d021      	beq.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7ae:	d85c      	bhi.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d004      	beq.n	800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7bc:	d004      	beq.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c7be:	e054      	b.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c7c0:	f000 f8b8 	bl	800c934 <HAL_RCCEx_GetD3PCLK1Freq>
 800c7c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c7c6:	e0ac      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7c8:	4b29      	ldr	r3, [pc, #164]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c7d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7d4:	d107      	bne.n	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7d6:	f107 0318 	add.w	r3, r7, #24
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 f8c0 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e4:	e09d      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7ea:	e09a      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7ec:	4b20      	ldr	r3, [pc, #128]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c7f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7f8:	d107      	bne.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7fa:	f107 030c 	add.w	r3, r7, #12
 800c7fe:	4618      	mov	r0, r3
 800c800:	f000 fa02 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c808:	e08b      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c80a:	2300      	movs	r3, #0
 800c80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c80e:	e088      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c810:	4b17      	ldr	r3, [pc, #92]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 0304 	and.w	r3, r3, #4
 800c818:	2b04      	cmp	r3, #4
 800c81a:	d109      	bne.n	800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c81c:	4b14      	ldr	r3, [pc, #80]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	08db      	lsrs	r3, r3, #3
 800c822:	f003 0303 	and.w	r3, r3, #3
 800c826:	4a13      	ldr	r2, [pc, #76]	@ (800c874 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c828:	fa22 f303 	lsr.w	r3, r2, r3
 800c82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c82e:	e078      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c830:	2300      	movs	r3, #0
 800c832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c834:	e075      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c836:	4b0e      	ldr	r3, [pc, #56]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c83e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c842:	d102      	bne.n	800c84a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c844:	4b0c      	ldr	r3, [pc, #48]	@ (800c878 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c848:	e06b      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c84e:	e068      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c850:	4b07      	ldr	r3, [pc, #28]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c858:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c85c:	d102      	bne.n	800c864 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c85e:	4b07      	ldr	r3, [pc, #28]	@ (800c87c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c862:	e05e      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c864:	2300      	movs	r3, #0
 800c866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c868:	e05b      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c86a:	2300      	movs	r3, #0
 800c86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c86e:	e058      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c870:	58024400 	.word	0x58024400
 800c874:	03d09000 	.word	0x03d09000
 800c878:	003d0900 	.word	0x003d0900
 800c87c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c880:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c884:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800c888:	430b      	orrs	r3, r1
 800c88a:	d148      	bne.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c88c:	4b27      	ldr	r3, [pc, #156]	@ (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c88e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c890:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c894:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800c896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c89c:	d02a      	beq.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8a4:	d838      	bhi.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d004      	beq.n	800c8b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8b2:	d00d      	beq.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c8b4:	e030      	b.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8b6:	4b1d      	ldr	r3, [pc, #116]	@ (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8c2:	d102      	bne.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c8c4:	4b1a      	ldr	r3, [pc, #104]	@ (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8c8:	e02b      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8ce:	e028      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8d0:	4b16      	ldr	r3, [pc, #88]	@ (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c8dc:	d107      	bne.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 fae4 	bl	800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8ec:	e019      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8f2:	e016      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8f4:	4b0d      	ldr	r3, [pc, #52]	@ (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c8fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c900:	d107      	bne.n	800c912 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c902:	f107 0318 	add.w	r3, r7, #24
 800c906:	4618      	mov	r0, r3
 800c908:	f000 f82a 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c910:	e007      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c912:	2300      	movs	r3, #0
 800c914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c916:	e004      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c918:	2300      	movs	r3, #0
 800c91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c91c:	e001      	b.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c91e:	2300      	movs	r3, #0
 800c920:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800c922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c924:	4618      	mov	r0, r3
 800c926:	3740      	adds	r7, #64	@ 0x40
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	58024400 	.word	0x58024400
 800c930:	017d7840 	.word	0x017d7840

0800c934 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c938:	f7fe f816 	bl	800a968 <HAL_RCC_GetHCLKFreq>
 800c93c:	4602      	mov	r2, r0
 800c93e:	4b06      	ldr	r3, [pc, #24]	@ (800c958 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c940:	6a1b      	ldr	r3, [r3, #32]
 800c942:	091b      	lsrs	r3, r3, #4
 800c944:	f003 0307 	and.w	r3, r3, #7
 800c948:	4904      	ldr	r1, [pc, #16]	@ (800c95c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c94a:	5ccb      	ldrb	r3, [r1, r3]
 800c94c:	f003 031f 	and.w	r3, r3, #31
 800c950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c954:	4618      	mov	r0, r3
 800c956:	bd80      	pop	{r7, pc}
 800c958:	58024400 	.word	0x58024400
 800c95c:	080160b4 	.word	0x080160b4

0800c960 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c960:	b480      	push	{r7}
 800c962:	b089      	sub	sp, #36	@ 0x24
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c968:	4ba1      	ldr	r3, [pc, #644]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c96c:	f003 0303 	and.w	r3, r3, #3
 800c970:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c972:	4b9f      	ldr	r3, [pc, #636]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c976:	0b1b      	lsrs	r3, r3, #12
 800c978:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c97c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c97e:	4b9c      	ldr	r3, [pc, #624]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c982:	091b      	lsrs	r3, r3, #4
 800c984:	f003 0301 	and.w	r3, r3, #1
 800c988:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c98a:	4b99      	ldr	r3, [pc, #612]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c98c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c98e:	08db      	lsrs	r3, r3, #3
 800c990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c994:	693a      	ldr	r2, [r7, #16]
 800c996:	fb02 f303 	mul.w	r3, r2, r3
 800c99a:	ee07 3a90 	vmov	s15, r3
 800c99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 8111 	beq.w	800cbd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	f000 8083 	beq.w	800cabc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	2b02      	cmp	r3, #2
 800c9ba:	f200 80a1 	bhi.w	800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d003      	beq.n	800c9cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d056      	beq.n	800ca78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c9ca:	e099      	b.n	800cb00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9cc:	4b88      	ldr	r3, [pc, #544]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 0320 	and.w	r3, r3, #32
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d02d      	beq.n	800ca34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9d8:	4b85      	ldr	r3, [pc, #532]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	08db      	lsrs	r3, r3, #3
 800c9de:	f003 0303 	and.w	r3, r3, #3
 800c9e2:	4a84      	ldr	r2, [pc, #528]	@ (800cbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	ee07 3a90 	vmov	s15, r3
 800c9f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca02:	4b7b      	ldr	r3, [pc, #492]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca32:	e087      	b.n	800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	ee07 3a90 	vmov	s15, r3
 800ca3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca46:	4b6a      	ldr	r3, [pc, #424]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4e:	ee07 3a90 	vmov	s15, r3
 800ca52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca76:	e065      	b.n	800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	ee07 3a90 	vmov	s15, r3
 800ca7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca8a:	4b59      	ldr	r3, [pc, #356]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca92:	ee07 3a90 	vmov	s15, r3
 800ca96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800caae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caba:	e043      	b.n	800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	ee07 3a90 	vmov	s15, r3
 800cac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800caca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cace:	4b48      	ldr	r3, [pc, #288]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad6:	ee07 3a90 	vmov	s15, r3
 800cada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cade:	ed97 6a03 	vldr	s12, [r7, #12]
 800cae2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800caf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cafa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cafe:	e021      	b.n	800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	ee07 3a90 	vmov	s15, r3
 800cb06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb12:	4b37      	ldr	r3, [pc, #220]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb1a:	ee07 3a90 	vmov	s15, r3
 800cb1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb22:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cb36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb44:	4b2a      	ldr	r3, [pc, #168]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb48:	0a5b      	lsrs	r3, r3, #9
 800cb4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb4e:	ee07 3a90 	vmov	s15, r3
 800cb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb6a:	ee17 2a90 	vmov	r2, s15
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cb72:	4b1f      	ldr	r3, [pc, #124]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb76:	0c1b      	lsrs	r3, r3, #16
 800cb78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb7c:	ee07 3a90 	vmov	s15, r3
 800cb80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb98:	ee17 2a90 	vmov	r2, s15
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cba0:	4b13      	ldr	r3, [pc, #76]	@ (800cbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cba4:	0e1b      	lsrs	r3, r3, #24
 800cba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbaa:	ee07 3a90 	vmov	s15, r3
 800cbae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbba:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbc6:	ee17 2a90 	vmov	r2, s15
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cbce:	e008      	b.n	800cbe2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	609a      	str	r2, [r3, #8]
}
 800cbe2:	bf00      	nop
 800cbe4:	3724      	adds	r7, #36	@ 0x24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	58024400 	.word	0x58024400
 800cbf4:	03d09000 	.word	0x03d09000
 800cbf8:	46000000 	.word	0x46000000
 800cbfc:	4c742400 	.word	0x4c742400
 800cc00:	4a742400 	.word	0x4a742400
 800cc04:	4bbebc20 	.word	0x4bbebc20

0800cc08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b089      	sub	sp, #36	@ 0x24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc10:	4ba1      	ldr	r3, [pc, #644]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc14:	f003 0303 	and.w	r3, r3, #3
 800cc18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc1a:	4b9f      	ldr	r3, [pc, #636]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc1e:	0d1b      	lsrs	r3, r3, #20
 800cc20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc26:	4b9c      	ldr	r3, [pc, #624]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc2a:	0a1b      	lsrs	r3, r3, #8
 800cc2c:	f003 0301 	and.w	r3, r3, #1
 800cc30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc32:	4b99      	ldr	r3, [pc, #612]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc36:	08db      	lsrs	r3, r3, #3
 800cc38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	fb02 f303 	mul.w	r3, r2, r3
 800cc42:	ee07 3a90 	vmov	s15, r3
 800cc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f000 8111 	beq.w	800ce78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	f000 8083 	beq.w	800cd64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	f200 80a1 	bhi.w	800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d003      	beq.n	800cc74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cc6c:	69bb      	ldr	r3, [r7, #24]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d056      	beq.n	800cd20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cc72:	e099      	b.n	800cda8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc74:	4b88      	ldr	r3, [pc, #544]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 0320 	and.w	r3, r3, #32
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d02d      	beq.n	800ccdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc80:	4b85      	ldr	r3, [pc, #532]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	08db      	lsrs	r3, r3, #3
 800cc86:	f003 0303 	and.w	r3, r3, #3
 800cc8a:	4a84      	ldr	r2, [pc, #528]	@ (800ce9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cc8c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	ee07 3a90 	vmov	s15, r3
 800cc98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	ee07 3a90 	vmov	s15, r3
 800cca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccaa:	4b7b      	ldr	r3, [pc, #492]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccb2:	ee07 3a90 	vmov	s15, r3
 800ccb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccba:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ccce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ccda:	e087      	b.n	800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	ee07 3a90 	vmov	s15, r3
 800cce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ccea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccee:	4b6a      	ldr	r3, [pc, #424]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf6:	ee07 3a90 	vmov	s15, r3
 800ccfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd1e:	e065      	b.n	800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	ee07 3a90 	vmov	s15, r3
 800cd26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd32:	4b59      	ldr	r3, [pc, #356]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd3a:	ee07 3a90 	vmov	s15, r3
 800cd3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd42:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd62:	e043      	b.n	800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	ee07 3a90 	vmov	s15, r3
 800cd6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cd72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd76:	4b48      	ldr	r3, [pc, #288]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd7e:	ee07 3a90 	vmov	s15, r3
 800cd82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd86:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cda2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cda6:	e021      	b.n	800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	ee07 3a90 	vmov	s15, r3
 800cdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdba:	4b37      	ldr	r3, [pc, #220]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdc2:	ee07 3a90 	vmov	s15, r3
 800cdc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdca:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800cea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cde6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cdec:	4b2a      	ldr	r3, [pc, #168]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdf0:	0a5b      	lsrs	r3, r3, #9
 800cdf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdf6:	ee07 3a90 	vmov	s15, r3
 800cdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce12:	ee17 2a90 	vmov	r2, s15
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce1a:	4b1f      	ldr	r3, [pc, #124]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce1e:	0c1b      	lsrs	r3, r3, #16
 800ce20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce24:	ee07 3a90 	vmov	s15, r3
 800ce28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce40:	ee17 2a90 	vmov	r2, s15
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce48:	4b13      	ldr	r3, [pc, #76]	@ (800ce98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce4c:	0e1b      	lsrs	r3, r3, #24
 800ce4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce52:	ee07 3a90 	vmov	s15, r3
 800ce56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ce5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce6e:	ee17 2a90 	vmov	r2, s15
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ce76:	e008      	b.n	800ce8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	609a      	str	r2, [r3, #8]
}
 800ce8a:	bf00      	nop
 800ce8c:	3724      	adds	r7, #36	@ 0x24
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	58024400 	.word	0x58024400
 800ce9c:	03d09000 	.word	0x03d09000
 800cea0:	46000000 	.word	0x46000000
 800cea4:	4c742400 	.word	0x4c742400
 800cea8:	4a742400 	.word	0x4a742400
 800ceac:	4bbebc20 	.word	0x4bbebc20

0800ceb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b089      	sub	sp, #36	@ 0x24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ceb8:	4ba0      	ldr	r3, [pc, #640]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cebc:	f003 0303 	and.w	r3, r3, #3
 800cec0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cec2:	4b9e      	ldr	r3, [pc, #632]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cec6:	091b      	lsrs	r3, r3, #4
 800cec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cecc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cece:	4b9b      	ldr	r3, [pc, #620]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ced0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ced8:	4b98      	ldr	r3, [pc, #608]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cedc:	08db      	lsrs	r3, r3, #3
 800cede:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cee2:	693a      	ldr	r2, [r7, #16]
 800cee4:	fb02 f303 	mul.w	r3, r2, r3
 800cee8:	ee07 3a90 	vmov	s15, r3
 800ceec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f000 8111 	beq.w	800d11e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	f000 8083 	beq.w	800d00a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	f200 80a1 	bhi.w	800d04e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d003      	beq.n	800cf1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d056      	beq.n	800cfc6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cf18:	e099      	b.n	800d04e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf1a:	4b88      	ldr	r3, [pc, #544]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 0320 	and.w	r3, r3, #32
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d02d      	beq.n	800cf82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf26:	4b85      	ldr	r3, [pc, #532]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	08db      	lsrs	r3, r3, #3
 800cf2c:	f003 0303 	and.w	r3, r3, #3
 800cf30:	4a83      	ldr	r2, [pc, #524]	@ (800d140 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cf32:	fa22 f303 	lsr.w	r3, r2, r3
 800cf36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	ee07 3a90 	vmov	s15, r3
 800cf3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	ee07 3a90 	vmov	s15, r3
 800cf48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf50:	4b7a      	ldr	r3, [pc, #488]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf58:	ee07 3a90 	vmov	s15, r3
 800cf5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf60:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf64:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800d144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf80:	e087      	b.n	800d092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	ee07 3a90 	vmov	s15, r3
 800cf88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf8c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cf90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf94:	4b69      	ldr	r3, [pc, #420]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf9c:	ee07 3a90 	vmov	s15, r3
 800cfa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfa4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfa8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800d144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cfb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfc4:	e065      	b.n	800d092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	ee07 3a90 	vmov	s15, r3
 800cfcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800d14c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cfd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfd8:	4b58      	ldr	r3, [pc, #352]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe0:	ee07 3a90 	vmov	s15, r3
 800cfe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfec:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800d144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cff0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d000:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d004:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d008:	e043      	b.n	800d092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	ee07 3a90 	vmov	s15, r3
 800d010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d014:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800d150 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d01c:	4b47      	ldr	r3, [pc, #284]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d01e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d024:	ee07 3a90 	vmov	s15, r3
 800d028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d02c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d030:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800d144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d038:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d03c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d044:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d048:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d04c:	e021      	b.n	800d092 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	ee07 3a90 	vmov	s15, r3
 800d054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d058:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d148 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d05c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d060:	4b36      	ldr	r3, [pc, #216]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d068:	ee07 3a90 	vmov	s15, r3
 800d06c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d070:	ed97 6a03 	vldr	s12, [r7, #12]
 800d074:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d144 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d078:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d07c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d080:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d084:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d08c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d090:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d092:	4b2a      	ldr	r3, [pc, #168]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d096:	0a5b      	lsrs	r3, r3, #9
 800d098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d09c:	ee07 3a90 	vmov	s15, r3
 800d0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d0a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0b8:	ee17 2a90 	vmov	r2, s15
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d0c0:	4b1e      	ldr	r3, [pc, #120]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0c4:	0c1b      	lsrs	r3, r3, #16
 800d0c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0ca:	ee07 3a90 	vmov	s15, r3
 800d0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d0d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0da:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0e6:	ee17 2a90 	vmov	r2, s15
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d0ee:	4b13      	ldr	r3, [pc, #76]	@ (800d13c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0f2:	0e1b      	lsrs	r3, r3, #24
 800d0f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0f8:	ee07 3a90 	vmov	s15, r3
 800d0fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d100:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d104:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d108:	edd7 6a07 	vldr	s13, [r7, #28]
 800d10c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d114:	ee17 2a90 	vmov	r2, s15
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d11c:	e008      	b.n	800d130 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2200      	movs	r2, #0
 800d122:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	609a      	str	r2, [r3, #8]
}
 800d130:	bf00      	nop
 800d132:	3724      	adds	r7, #36	@ 0x24
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr
 800d13c:	58024400 	.word	0x58024400
 800d140:	03d09000 	.word	0x03d09000
 800d144:	46000000 	.word	0x46000000
 800d148:	4c742400 	.word	0x4c742400
 800d14c:	4a742400 	.word	0x4a742400
 800d150:	4bbebc20 	.word	0x4bbebc20

0800d154 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d15e:	2300      	movs	r3, #0
 800d160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d162:	4b53      	ldr	r3, [pc, #332]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d166:	f003 0303 	and.w	r3, r3, #3
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d101      	bne.n	800d172 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d16e:	2301      	movs	r3, #1
 800d170:	e099      	b.n	800d2a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d172:	4b4f      	ldr	r3, [pc, #316]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a4e      	ldr	r2, [pc, #312]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d178:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d17c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d17e:	f7f6 feb3 	bl	8003ee8 <HAL_GetTick>
 800d182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d184:	e008      	b.n	800d198 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d186:	f7f6 feaf 	bl	8003ee8 <HAL_GetTick>
 800d18a:	4602      	mov	r2, r0
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	2b02      	cmp	r3, #2
 800d192:	d901      	bls.n	800d198 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d194:	2303      	movs	r3, #3
 800d196:	e086      	b.n	800d2a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d198:	4b45      	ldr	r3, [pc, #276]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1f0      	bne.n	800d186 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d1a4:	4b42      	ldr	r3, [pc, #264]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	031b      	lsls	r3, r3, #12
 800d1b2:	493f      	ldr	r1, [pc, #252]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	628b      	str	r3, [r1, #40]	@ 0x28
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	025b      	lsls	r3, r3, #9
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	431a      	orrs	r2, r3
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	3b01      	subs	r3, #1
 800d1d4:	041b      	lsls	r3, r3, #16
 800d1d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d1da:	431a      	orrs	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	061b      	lsls	r3, r3, #24
 800d1e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d1e8:	4931      	ldr	r1, [pc, #196]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d1ee:	4b30      	ldr	r3, [pc, #192]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	695b      	ldr	r3, [r3, #20]
 800d1fa:	492d      	ldr	r1, [pc, #180]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d200:	4b2b      	ldr	r3, [pc, #172]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d204:	f023 0220 	bic.w	r2, r3, #32
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	699b      	ldr	r3, [r3, #24]
 800d20c:	4928      	ldr	r1, [pc, #160]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d20e:	4313      	orrs	r3, r2
 800d210:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d212:	4b27      	ldr	r3, [pc, #156]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d216:	4a26      	ldr	r2, [pc, #152]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d218:	f023 0310 	bic.w	r3, r3, #16
 800d21c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d21e:	4b24      	ldr	r3, [pc, #144]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d220:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d222:	4b24      	ldr	r3, [pc, #144]	@ (800d2b4 <RCCEx_PLL2_Config+0x160>)
 800d224:	4013      	ands	r3, r2
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	69d2      	ldr	r2, [r2, #28]
 800d22a:	00d2      	lsls	r2, r2, #3
 800d22c:	4920      	ldr	r1, [pc, #128]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d22e:	4313      	orrs	r3, r2
 800d230:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d232:	4b1f      	ldr	r3, [pc, #124]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d236:	4a1e      	ldr	r2, [pc, #120]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d238:	f043 0310 	orr.w	r3, r3, #16
 800d23c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d106      	bne.n	800d252 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d244:	4b1a      	ldr	r3, [pc, #104]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d248:	4a19      	ldr	r2, [pc, #100]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d24a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d24e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d250:	e00f      	b.n	800d272 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d106      	bne.n	800d266 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d258:	4b15      	ldr	r3, [pc, #84]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d25c:	4a14      	ldr	r2, [pc, #80]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d25e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d262:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d264:	e005      	b.n	800d272 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d266:	4b12      	ldr	r3, [pc, #72]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d26a:	4a11      	ldr	r2, [pc, #68]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d26c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d270:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d272:	4b0f      	ldr	r3, [pc, #60]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a0e      	ldr	r2, [pc, #56]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d278:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d27c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d27e:	f7f6 fe33 	bl	8003ee8 <HAL_GetTick>
 800d282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d284:	e008      	b.n	800d298 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d286:	f7f6 fe2f 	bl	8003ee8 <HAL_GetTick>
 800d28a:	4602      	mov	r2, r0
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	2b02      	cmp	r3, #2
 800d292:	d901      	bls.n	800d298 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d294:	2303      	movs	r3, #3
 800d296:	e006      	b.n	800d2a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d298:	4b05      	ldr	r3, [pc, #20]	@ (800d2b0 <RCCEx_PLL2_Config+0x15c>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d0f0      	beq.n	800d286 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	58024400 	.word	0x58024400
 800d2b4:	ffff0007 	.word	0xffff0007

0800d2b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d2c6:	4b53      	ldr	r3, [pc, #332]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ca:	f003 0303 	and.w	r3, r3, #3
 800d2ce:	2b03      	cmp	r3, #3
 800d2d0:	d101      	bne.n	800d2d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e099      	b.n	800d40a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d2d6:	4b4f      	ldr	r3, [pc, #316]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a4e      	ldr	r2, [pc, #312]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d2dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d2e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2e2:	f7f6 fe01 	bl	8003ee8 <HAL_GetTick>
 800d2e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d2e8:	e008      	b.n	800d2fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d2ea:	f7f6 fdfd 	bl	8003ee8 <HAL_GetTick>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d901      	bls.n	800d2fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d2f8:	2303      	movs	r3, #3
 800d2fa:	e086      	b.n	800d40a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d2fc:	4b45      	ldr	r3, [pc, #276]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1f0      	bne.n	800d2ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d308:	4b42      	ldr	r3, [pc, #264]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d30a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d30c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	051b      	lsls	r3, r3, #20
 800d316:	493f      	ldr	r1, [pc, #252]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d318:	4313      	orrs	r3, r2
 800d31a:	628b      	str	r3, [r1, #40]	@ 0x28
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	3b01      	subs	r3, #1
 800d322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	3b01      	subs	r3, #1
 800d32c:	025b      	lsls	r3, r3, #9
 800d32e:	b29b      	uxth	r3, r3
 800d330:	431a      	orrs	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	3b01      	subs	r3, #1
 800d338:	041b      	lsls	r3, r3, #16
 800d33a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d33e:	431a      	orrs	r2, r3
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	3b01      	subs	r3, #1
 800d346:	061b      	lsls	r3, r3, #24
 800d348:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d34c:	4931      	ldr	r1, [pc, #196]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d34e:	4313      	orrs	r3, r2
 800d350:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d352:	4b30      	ldr	r3, [pc, #192]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d356:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	695b      	ldr	r3, [r3, #20]
 800d35e:	492d      	ldr	r1, [pc, #180]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d360:	4313      	orrs	r3, r2
 800d362:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d364:	4b2b      	ldr	r3, [pc, #172]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d368:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	699b      	ldr	r3, [r3, #24]
 800d370:	4928      	ldr	r1, [pc, #160]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d372:	4313      	orrs	r3, r2
 800d374:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d376:	4b27      	ldr	r3, [pc, #156]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d37a:	4a26      	ldr	r2, [pc, #152]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d37c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d380:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d382:	4b24      	ldr	r3, [pc, #144]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d386:	4b24      	ldr	r3, [pc, #144]	@ (800d418 <RCCEx_PLL3_Config+0x160>)
 800d388:	4013      	ands	r3, r2
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	69d2      	ldr	r2, [r2, #28]
 800d38e:	00d2      	lsls	r2, r2, #3
 800d390:	4920      	ldr	r1, [pc, #128]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d392:	4313      	orrs	r3, r2
 800d394:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d396:	4b1f      	ldr	r3, [pc, #124]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d39a:	4a1e      	ldr	r2, [pc, #120]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d39c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d3a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d106      	bne.n	800d3b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d3a8:	4b1a      	ldr	r3, [pc, #104]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ac:	4a19      	ldr	r2, [pc, #100]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d3b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d3b4:	e00f      	b.n	800d3d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d106      	bne.n	800d3ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d3bc:	4b15      	ldr	r3, [pc, #84]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c0:	4a14      	ldr	r2, [pc, #80]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d3c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d3c8:	e005      	b.n	800d3d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d3ca:	4b12      	ldr	r3, [pc, #72]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ce:	4a11      	ldr	r2, [pc, #68]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d3d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a0e      	ldr	r2, [pc, #56]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d3e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3e2:	f7f6 fd81 	bl	8003ee8 <HAL_GetTick>
 800d3e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d3e8:	e008      	b.n	800d3fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d3ea:	f7f6 fd7d 	bl	8003ee8 <HAL_GetTick>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	2b02      	cmp	r3, #2
 800d3f6:	d901      	bls.n	800d3fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	e006      	b.n	800d40a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d3fc:	4b05      	ldr	r3, [pc, #20]	@ (800d414 <RCCEx_PLL3_Config+0x15c>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d404:	2b00      	cmp	r3, #0
 800d406:	d0f0      	beq.n	800d3ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d408:	7bfb      	ldrb	r3, [r7, #15]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3710      	adds	r7, #16
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	58024400 	.word	0x58024400
 800d418:	ffff0007 	.word	0xffff0007

0800d41c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d101      	bne.n	800d42e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	e049      	b.n	800d4c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d434:	b2db      	uxtb	r3, r3
 800d436:	2b00      	cmp	r3, #0
 800d438:	d106      	bne.n	800d448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2200      	movs	r2, #0
 800d43e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f7f6 fb34 	bl	8003ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2202      	movs	r2, #2
 800d44c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	3304      	adds	r3, #4
 800d458:	4619      	mov	r1, r3
 800d45a:	4610      	mov	r0, r2
 800d45c:	f000 fc56 	bl	800dd0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2201      	movs	r2, #1
 800d46c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2201      	movs	r2, #1
 800d494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
	...

0800d4cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d001      	beq.n	800d4e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e04c      	b.n	800d57e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4a26      	ldr	r2, [pc, #152]	@ (800d58c <HAL_TIM_Base_Start+0xc0>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d022      	beq.n	800d53c <HAL_TIM_Base_Start+0x70>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4fe:	d01d      	beq.n	800d53c <HAL_TIM_Base_Start+0x70>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4a22      	ldr	r2, [pc, #136]	@ (800d590 <HAL_TIM_Base_Start+0xc4>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d018      	beq.n	800d53c <HAL_TIM_Base_Start+0x70>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a21      	ldr	r2, [pc, #132]	@ (800d594 <HAL_TIM_Base_Start+0xc8>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d013      	beq.n	800d53c <HAL_TIM_Base_Start+0x70>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a1f      	ldr	r2, [pc, #124]	@ (800d598 <HAL_TIM_Base_Start+0xcc>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d00e      	beq.n	800d53c <HAL_TIM_Base_Start+0x70>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4a1e      	ldr	r2, [pc, #120]	@ (800d59c <HAL_TIM_Base_Start+0xd0>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d009      	beq.n	800d53c <HAL_TIM_Base_Start+0x70>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a1c      	ldr	r2, [pc, #112]	@ (800d5a0 <HAL_TIM_Base_Start+0xd4>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d004      	beq.n	800d53c <HAL_TIM_Base_Start+0x70>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a1b      	ldr	r2, [pc, #108]	@ (800d5a4 <HAL_TIM_Base_Start+0xd8>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d115      	bne.n	800d568 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	689a      	ldr	r2, [r3, #8]
 800d542:	4b19      	ldr	r3, [pc, #100]	@ (800d5a8 <HAL_TIM_Base_Start+0xdc>)
 800d544:	4013      	ands	r3, r2
 800d546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2b06      	cmp	r3, #6
 800d54c:	d015      	beq.n	800d57a <HAL_TIM_Base_Start+0xae>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d554:	d011      	beq.n	800d57a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f042 0201 	orr.w	r2, r2, #1
 800d564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d566:	e008      	b.n	800d57a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f042 0201 	orr.w	r2, r2, #1
 800d576:	601a      	str	r2, [r3, #0]
 800d578:	e000      	b.n	800d57c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d57a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3714      	adds	r7, #20
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	40010000 	.word	0x40010000
 800d590:	40000400 	.word	0x40000400
 800d594:	40000800 	.word	0x40000800
 800d598:	40000c00 	.word	0x40000c00
 800d59c:	40010400 	.word	0x40010400
 800d5a0:	40001800 	.word	0x40001800
 800d5a4:	40014000 	.word	0x40014000
 800d5a8:	00010007 	.word	0x00010007

0800d5ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	6a1a      	ldr	r2, [r3, #32]
 800d5ba:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d5be:	4013      	ands	r3, r2
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d10f      	bne.n	800d5e4 <HAL_TIM_Base_Stop+0x38>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6a1a      	ldr	r2, [r3, #32]
 800d5ca:	f240 4344 	movw	r3, #1092	@ 0x444
 800d5ce:	4013      	ands	r3, r2
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d107      	bne.n	800d5e4 <HAL_TIM_Base_Stop+0x38>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f022 0201 	bic.w	r2, r2, #1
 800d5e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800d5ec:	2300      	movs	r3, #0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b082      	sub	sp, #8
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d101      	bne.n	800d60c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d608:	2301      	movs	r3, #1
 800d60a:	e049      	b.n	800d6a0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b00      	cmp	r3, #0
 800d616:	d106      	bne.n	800d626 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 f841 	bl	800d6a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2202      	movs	r2, #2
 800d62a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	3304      	adds	r3, #4
 800d636:	4619      	mov	r1, r3
 800d638:	4610      	mov	r0, r2
 800d63a:	f000 fb67 	bl	800dd0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2201      	movs	r2, #1
 800d642:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2201      	movs	r2, #1
 800d652:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2201      	movs	r2, #1
 800d662:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2201      	movs	r2, #1
 800d66a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2201      	movs	r2, #1
 800d672:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2201      	movs	r2, #1
 800d67a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2201      	movs	r2, #1
 800d682:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2201      	movs	r2, #1
 800d68a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d6b0:	bf00      	nop
 800d6b2:	370c      	adds	r7, #12
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	f003 0302 	and.w	r3, r3, #2
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	d122      	bne.n	800d718 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	f003 0302 	and.w	r3, r3, #2
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	d11b      	bne.n	800d718 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f06f 0202 	mvn.w	r2, #2
 800d6e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	f003 0303 	and.w	r3, r3, #3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d003      	beq.n	800d706 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 fae6 	bl	800dcd0 <HAL_TIM_IC_CaptureCallback>
 800d704:	e005      	b.n	800d712 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fad8 	bl	800dcbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 fae9 	bl	800dce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	691b      	ldr	r3, [r3, #16]
 800d71e:	f003 0304 	and.w	r3, r3, #4
 800d722:	2b04      	cmp	r3, #4
 800d724:	d122      	bne.n	800d76c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	f003 0304 	and.w	r3, r3, #4
 800d730:	2b04      	cmp	r3, #4
 800d732:	d11b      	bne.n	800d76c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f06f 0204 	mvn.w	r2, #4
 800d73c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2202      	movs	r2, #2
 800d742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	699b      	ldr	r3, [r3, #24]
 800d74a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d003      	beq.n	800d75a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 fabc 	bl	800dcd0 <HAL_TIM_IC_CaptureCallback>
 800d758:	e005      	b.n	800d766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 faae 	bl	800dcbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fabf 	bl	800dce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	691b      	ldr	r3, [r3, #16]
 800d772:	f003 0308 	and.w	r3, r3, #8
 800d776:	2b08      	cmp	r3, #8
 800d778:	d122      	bne.n	800d7c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	f003 0308 	and.w	r3, r3, #8
 800d784:	2b08      	cmp	r3, #8
 800d786:	d11b      	bne.n	800d7c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f06f 0208 	mvn.w	r2, #8
 800d790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2204      	movs	r2, #4
 800d796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	69db      	ldr	r3, [r3, #28]
 800d79e:	f003 0303 	and.w	r3, r3, #3
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d003      	beq.n	800d7ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 fa92 	bl	800dcd0 <HAL_TIM_IC_CaptureCallback>
 800d7ac:	e005      	b.n	800d7ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fa84 	bl	800dcbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 fa95 	bl	800dce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	f003 0310 	and.w	r3, r3, #16
 800d7ca:	2b10      	cmp	r3, #16
 800d7cc:	d122      	bne.n	800d814 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	68db      	ldr	r3, [r3, #12]
 800d7d4:	f003 0310 	and.w	r3, r3, #16
 800d7d8:	2b10      	cmp	r3, #16
 800d7da:	d11b      	bne.n	800d814 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f06f 0210 	mvn.w	r2, #16
 800d7e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2208      	movs	r2, #8
 800d7ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	69db      	ldr	r3, [r3, #28]
 800d7f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d003      	beq.n	800d802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 fa68 	bl	800dcd0 <HAL_TIM_IC_CaptureCallback>
 800d800:	e005      	b.n	800d80e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 fa5a 	bl	800dcbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 fa6b 	bl	800dce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d10e      	bne.n	800d840 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	f003 0301 	and.w	r3, r3, #1
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d107      	bne.n	800d840 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f06f 0201 	mvn.w	r2, #1
 800d838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fa34 	bl	800dca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	691b      	ldr	r3, [r3, #16]
 800d846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d84a:	2b80      	cmp	r3, #128	@ 0x80
 800d84c:	d10e      	bne.n	800d86c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d858:	2b80      	cmp	r3, #128	@ 0x80
 800d85a:	d107      	bne.n	800d86c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fe34 	bl	800e4d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	691b      	ldr	r3, [r3, #16]
 800d872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d876:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d87a:	d10e      	bne.n	800d89a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d886:	2b80      	cmp	r3, #128	@ 0x80
 800d888:	d107      	bne.n	800d89a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 fe27 	bl	800e4e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8a4:	2b40      	cmp	r3, #64	@ 0x40
 800d8a6:	d10e      	bne.n	800d8c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	68db      	ldr	r3, [r3, #12]
 800d8ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8b2:	2b40      	cmp	r3, #64	@ 0x40
 800d8b4:	d107      	bne.n	800d8c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d8be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 fa19 	bl	800dcf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	691b      	ldr	r3, [r3, #16]
 800d8cc:	f003 0320 	and.w	r3, r3, #32
 800d8d0:	2b20      	cmp	r3, #32
 800d8d2:	d10e      	bne.n	800d8f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	f003 0320 	and.w	r3, r3, #32
 800d8de:	2b20      	cmp	r3, #32
 800d8e0:	d107      	bne.n	800d8f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f06f 0220 	mvn.w	r2, #32
 800d8ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fde7 	bl	800e4c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8f2:	bf00      	nop
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b086      	sub	sp, #24
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	60f8      	str	r0, [r7, #12]
 800d902:	60b9      	str	r1, [r7, #8]
 800d904:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d906:	2300      	movs	r3, #0
 800d908:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d910:	2b01      	cmp	r3, #1
 800d912:	d101      	bne.n	800d918 <HAL_TIM_IC_ConfigChannel+0x1e>
 800d914:	2302      	movs	r3, #2
 800d916:	e088      	b.n	800da2a <HAL_TIM_IC_ConfigChannel+0x130>
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2201      	movs	r2, #1
 800d91c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d11b      	bne.n	800d95e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800d936:	f000 fb6d 	bl	800e014 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	699a      	ldr	r2, [r3, #24]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f022 020c 	bic.w	r2, r2, #12
 800d948:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	6999      	ldr	r1, [r3, #24]
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	689a      	ldr	r2, [r3, #8]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	430a      	orrs	r2, r1
 800d95a:	619a      	str	r2, [r3, #24]
 800d95c:	e060      	b.n	800da20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b04      	cmp	r3, #4
 800d962:	d11c      	bne.n	800d99e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800d974:	f000 fbf1 	bl	800e15a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	699a      	ldr	r2, [r3, #24]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d986:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	6999      	ldr	r1, [r3, #24]
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	021a      	lsls	r2, r3, #8
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	430a      	orrs	r2, r1
 800d99a:	619a      	str	r2, [r3, #24]
 800d99c:	e040      	b.n	800da20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2b08      	cmp	r3, #8
 800d9a2:	d11b      	bne.n	800d9dc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800d9b4:	f000 fc3e 	bl	800e234 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	69da      	ldr	r2, [r3, #28]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f022 020c 	bic.w	r2, r2, #12
 800d9c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	69d9      	ldr	r1, [r3, #28]
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	689a      	ldr	r2, [r3, #8]
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	430a      	orrs	r2, r1
 800d9d8:	61da      	str	r2, [r3, #28]
 800d9da:	e021      	b.n	800da20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b0c      	cmp	r3, #12
 800d9e0:	d11c      	bne.n	800da1c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800d9f2:	f000 fc5b 	bl	800e2ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	69da      	ldr	r2, [r3, #28]
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800da04:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	69d9      	ldr	r1, [r3, #28]
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	021a      	lsls	r2, r3, #8
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	430a      	orrs	r2, r1
 800da18:	61da      	str	r2, [r3, #28]
 800da1a:	e001      	b.n	800da20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800da1c:	2301      	movs	r3, #1
 800da1e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2200      	movs	r2, #0
 800da24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800da28:	7dfb      	ldrb	r3, [r7, #23]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3718      	adds	r7, #24
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
	...

0800da34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800da3e:	2300      	movs	r3, #0
 800da40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d101      	bne.n	800da50 <HAL_TIM_ConfigClockSource+0x1c>
 800da4c:	2302      	movs	r3, #2
 800da4e:	e0dc      	b.n	800dc0a <HAL_TIM_ConfigClockSource+0x1d6>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2201      	movs	r2, #1
 800da54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2202      	movs	r2, #2
 800da5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	689b      	ldr	r3, [r3, #8]
 800da66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800da68:	68ba      	ldr	r2, [r7, #8]
 800da6a:	4b6a      	ldr	r3, [pc, #424]	@ (800dc14 <HAL_TIM_ConfigClockSource+0x1e0>)
 800da6c:	4013      	ands	r3, r2
 800da6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800da76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a64      	ldr	r2, [pc, #400]	@ (800dc18 <HAL_TIM_ConfigClockSource+0x1e4>)
 800da86:	4293      	cmp	r3, r2
 800da88:	f000 80a9 	beq.w	800dbde <HAL_TIM_ConfigClockSource+0x1aa>
 800da8c:	4a62      	ldr	r2, [pc, #392]	@ (800dc18 <HAL_TIM_ConfigClockSource+0x1e4>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	f200 80ae 	bhi.w	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800da94:	4a61      	ldr	r2, [pc, #388]	@ (800dc1c <HAL_TIM_ConfigClockSource+0x1e8>)
 800da96:	4293      	cmp	r3, r2
 800da98:	f000 80a1 	beq.w	800dbde <HAL_TIM_ConfigClockSource+0x1aa>
 800da9c:	4a5f      	ldr	r2, [pc, #380]	@ (800dc1c <HAL_TIM_ConfigClockSource+0x1e8>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	f200 80a6 	bhi.w	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800daa4:	4a5e      	ldr	r2, [pc, #376]	@ (800dc20 <HAL_TIM_ConfigClockSource+0x1ec>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	f000 8099 	beq.w	800dbde <HAL_TIM_ConfigClockSource+0x1aa>
 800daac:	4a5c      	ldr	r2, [pc, #368]	@ (800dc20 <HAL_TIM_ConfigClockSource+0x1ec>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	f200 809e 	bhi.w	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dab4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dab8:	f000 8091 	beq.w	800dbde <HAL_TIM_ConfigClockSource+0x1aa>
 800dabc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dac0:	f200 8096 	bhi.w	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dac4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dac8:	f000 8089 	beq.w	800dbde <HAL_TIM_ConfigClockSource+0x1aa>
 800dacc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dad0:	f200 808e 	bhi.w	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dad8:	d03e      	beq.n	800db58 <HAL_TIM_ConfigClockSource+0x124>
 800dada:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dade:	f200 8087 	bhi.w	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dae6:	f000 8086 	beq.w	800dbf6 <HAL_TIM_ConfigClockSource+0x1c2>
 800daea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800daee:	d87f      	bhi.n	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800daf0:	2b70      	cmp	r3, #112	@ 0x70
 800daf2:	d01a      	beq.n	800db2a <HAL_TIM_ConfigClockSource+0xf6>
 800daf4:	2b70      	cmp	r3, #112	@ 0x70
 800daf6:	d87b      	bhi.n	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800daf8:	2b60      	cmp	r3, #96	@ 0x60
 800dafa:	d050      	beq.n	800db9e <HAL_TIM_ConfigClockSource+0x16a>
 800dafc:	2b60      	cmp	r3, #96	@ 0x60
 800dafe:	d877      	bhi.n	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800db00:	2b50      	cmp	r3, #80	@ 0x50
 800db02:	d03c      	beq.n	800db7e <HAL_TIM_ConfigClockSource+0x14a>
 800db04:	2b50      	cmp	r3, #80	@ 0x50
 800db06:	d873      	bhi.n	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800db08:	2b40      	cmp	r3, #64	@ 0x40
 800db0a:	d058      	beq.n	800dbbe <HAL_TIM_ConfigClockSource+0x18a>
 800db0c:	2b40      	cmp	r3, #64	@ 0x40
 800db0e:	d86f      	bhi.n	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800db10:	2b30      	cmp	r3, #48	@ 0x30
 800db12:	d064      	beq.n	800dbde <HAL_TIM_ConfigClockSource+0x1aa>
 800db14:	2b30      	cmp	r3, #48	@ 0x30
 800db16:	d86b      	bhi.n	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800db18:	2b20      	cmp	r3, #32
 800db1a:	d060      	beq.n	800dbde <HAL_TIM_ConfigClockSource+0x1aa>
 800db1c:	2b20      	cmp	r3, #32
 800db1e:	d867      	bhi.n	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
 800db20:	2b00      	cmp	r3, #0
 800db22:	d05c      	beq.n	800dbde <HAL_TIM_ConfigClockSource+0x1aa>
 800db24:	2b10      	cmp	r3, #16
 800db26:	d05a      	beq.n	800dbde <HAL_TIM_ConfigClockSource+0x1aa>
 800db28:	e062      	b.n	800dbf0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800db3a:	f000 fc13 	bl	800e364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800db4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	68ba      	ldr	r2, [r7, #8]
 800db54:	609a      	str	r2, [r3, #8]
      break;
 800db56:	e04f      	b.n	800dbf8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800db68:	f000 fbfc 	bl	800e364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	689a      	ldr	r2, [r3, #8]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800db7a:	609a      	str	r2, [r3, #8]
      break;
 800db7c:	e03c      	b.n	800dbf8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db8a:	461a      	mov	r2, r3
 800db8c:	f000 fab6 	bl	800e0fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2150      	movs	r1, #80	@ 0x50
 800db96:	4618      	mov	r0, r3
 800db98:	f000 fbc6 	bl	800e328 <TIM_ITRx_SetConfig>
      break;
 800db9c:	e02c      	b.n	800dbf8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dbaa:	461a      	mov	r2, r3
 800dbac:	f000 fb12 	bl	800e1d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2160      	movs	r1, #96	@ 0x60
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f000 fbb6 	bl	800e328 <TIM_ITRx_SetConfig>
      break;
 800dbbc:	e01c      	b.n	800dbf8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbca:	461a      	mov	r2, r3
 800dbcc:	f000 fa96 	bl	800e0fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2140      	movs	r1, #64	@ 0x40
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f000 fba6 	bl	800e328 <TIM_ITRx_SetConfig>
      break;
 800dbdc:	e00c      	b.n	800dbf8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	4610      	mov	r0, r2
 800dbea:	f000 fb9d 	bl	800e328 <TIM_ITRx_SetConfig>
      break;
 800dbee:	e003      	b.n	800dbf8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	73fb      	strb	r3, [r7, #15]
      break;
 800dbf4:	e000      	b.n	800dbf8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dbf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	ffceff88 	.word	0xffceff88
 800dc18:	00100040 	.word	0x00100040
 800dc1c:	00100030 	.word	0x00100030
 800dc20:	00100020 	.word	0x00100020

0800dc24 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d101      	bne.n	800dc3c <HAL_TIM_SlaveConfigSynchro+0x18>
 800dc38:	2302      	movs	r3, #2
 800dc3a:	e031      	b.n	800dca0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2202      	movs	r2, #2
 800dc48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800dc4c:	6839      	ldr	r1, [r7, #0]
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 f8f6 	bl	800de40 <TIM_SlaveTimer_SetConfig>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d009      	beq.n	800dc6e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2200      	movs	r2, #0
 800dc66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	e018      	b.n	800dca0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	68da      	ldr	r2, [r3, #12]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc7c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68da      	ldr	r2, [r3, #12]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800dc8c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2201      	movs	r2, #1
 800dc92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800dcb0:	bf00      	nop
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dcc4:	bf00      	nop
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dcd8:	bf00      	nop
 800dcda:	370c      	adds	r7, #12
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dcec:	bf00      	nop
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dd00:	bf00      	nop
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	4a40      	ldr	r2, [pc, #256]	@ (800de20 <TIM_Base_SetConfig+0x114>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d013      	beq.n	800dd4c <TIM_Base_SetConfig+0x40>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd2a:	d00f      	beq.n	800dd4c <TIM_Base_SetConfig+0x40>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a3d      	ldr	r2, [pc, #244]	@ (800de24 <TIM_Base_SetConfig+0x118>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d00b      	beq.n	800dd4c <TIM_Base_SetConfig+0x40>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	4a3c      	ldr	r2, [pc, #240]	@ (800de28 <TIM_Base_SetConfig+0x11c>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d007      	beq.n	800dd4c <TIM_Base_SetConfig+0x40>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a3b      	ldr	r2, [pc, #236]	@ (800de2c <TIM_Base_SetConfig+0x120>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d003      	beq.n	800dd4c <TIM_Base_SetConfig+0x40>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a3a      	ldr	r2, [pc, #232]	@ (800de30 <TIM_Base_SetConfig+0x124>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d108      	bne.n	800dd5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	68fa      	ldr	r2, [r7, #12]
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4a2f      	ldr	r2, [pc, #188]	@ (800de20 <TIM_Base_SetConfig+0x114>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d01f      	beq.n	800dda6 <TIM_Base_SetConfig+0x9a>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd6c:	d01b      	beq.n	800dda6 <TIM_Base_SetConfig+0x9a>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a2c      	ldr	r2, [pc, #176]	@ (800de24 <TIM_Base_SetConfig+0x118>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d017      	beq.n	800dda6 <TIM_Base_SetConfig+0x9a>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4a2b      	ldr	r2, [pc, #172]	@ (800de28 <TIM_Base_SetConfig+0x11c>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d013      	beq.n	800dda6 <TIM_Base_SetConfig+0x9a>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4a2a      	ldr	r2, [pc, #168]	@ (800de2c <TIM_Base_SetConfig+0x120>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d00f      	beq.n	800dda6 <TIM_Base_SetConfig+0x9a>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4a29      	ldr	r2, [pc, #164]	@ (800de30 <TIM_Base_SetConfig+0x124>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d00b      	beq.n	800dda6 <TIM_Base_SetConfig+0x9a>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a28      	ldr	r2, [pc, #160]	@ (800de34 <TIM_Base_SetConfig+0x128>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d007      	beq.n	800dda6 <TIM_Base_SetConfig+0x9a>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a27      	ldr	r2, [pc, #156]	@ (800de38 <TIM_Base_SetConfig+0x12c>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d003      	beq.n	800dda6 <TIM_Base_SetConfig+0x9a>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	4a26      	ldr	r2, [pc, #152]	@ (800de3c <TIM_Base_SetConfig+0x130>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d108      	bne.n	800ddb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ddac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	689a      	ldr	r2, [r3, #8]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a10      	ldr	r2, [pc, #64]	@ (800de20 <TIM_Base_SetConfig+0x114>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d00f      	beq.n	800de04 <TIM_Base_SetConfig+0xf8>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a12      	ldr	r2, [pc, #72]	@ (800de30 <TIM_Base_SetConfig+0x124>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d00b      	beq.n	800de04 <TIM_Base_SetConfig+0xf8>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a11      	ldr	r2, [pc, #68]	@ (800de34 <TIM_Base_SetConfig+0x128>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d007      	beq.n	800de04 <TIM_Base_SetConfig+0xf8>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a10      	ldr	r2, [pc, #64]	@ (800de38 <TIM_Base_SetConfig+0x12c>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d003      	beq.n	800de04 <TIM_Base_SetConfig+0xf8>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a0f      	ldr	r2, [pc, #60]	@ (800de3c <TIM_Base_SetConfig+0x130>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d103      	bne.n	800de0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	691a      	ldr	r2, [r3, #16]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2201      	movs	r2, #1
 800de10:	615a      	str	r2, [r3, #20]
}
 800de12:	bf00      	nop
 800de14:	3714      	adds	r7, #20
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	40010000 	.word	0x40010000
 800de24:	40000400 	.word	0x40000400
 800de28:	40000800 	.word	0x40000800
 800de2c:	40000c00 	.word	0x40000c00
 800de30:	40010400 	.word	0x40010400
 800de34:	40014000 	.word	0x40014000
 800de38:	40014400 	.word	0x40014400
 800de3c:	40014800 	.word	0x40014800

0800de40 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800de4a:	2300      	movs	r3, #0
 800de4c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de56:	693a      	ldr	r2, [r7, #16]
 800de58:	4b65      	ldr	r3, [pc, #404]	@ (800dff0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800de5a:	4013      	ands	r3, r2
 800de5c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	693a      	ldr	r2, [r7, #16]
 800de64:	4313      	orrs	r3, r2
 800de66:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800de68:	693a      	ldr	r2, [r7, #16]
 800de6a:	4b62      	ldr	r3, [pc, #392]	@ (800dff4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800de6c:	4013      	ands	r3, r2
 800de6e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	4313      	orrs	r3, r2
 800de78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	693a      	ldr	r2, [r7, #16]
 800de80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	4a5c      	ldr	r2, [pc, #368]	@ (800dff8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	f000 80ab 	beq.w	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800de8e:	4a5a      	ldr	r2, [pc, #360]	@ (800dff8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800de90:	4293      	cmp	r3, r2
 800de92:	f200 80a4 	bhi.w	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800de96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800de9a:	f000 80a3 	beq.w	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800de9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dea2:	f200 809c 	bhi.w	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800dea6:	4a55      	ldr	r2, [pc, #340]	@ (800dffc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	f000 809b 	beq.w	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800deae:	4a53      	ldr	r2, [pc, #332]	@ (800dffc <TIM_SlaveTimer_SetConfig+0x1bc>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	f200 8094 	bhi.w	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800deb6:	4a52      	ldr	r2, [pc, #328]	@ (800e000 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	f000 8093 	beq.w	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800debe:	4a50      	ldr	r2, [pc, #320]	@ (800e000 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	f200 808c 	bhi.w	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800dec6:	4a4f      	ldr	r2, [pc, #316]	@ (800e004 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	f000 808b 	beq.w	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dece:	4a4d      	ldr	r2, [pc, #308]	@ (800e004 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	f200 8084 	bhi.w	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800ded6:	4a4c      	ldr	r2, [pc, #304]	@ (800e008 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800ded8:	4293      	cmp	r3, r2
 800deda:	f000 8083 	beq.w	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dede:	4a4a      	ldr	r2, [pc, #296]	@ (800e008 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d87c      	bhi.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800dee4:	4a49      	ldr	r2, [pc, #292]	@ (800e00c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d07c      	beq.n	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800deea:	4a48      	ldr	r2, [pc, #288]	@ (800e00c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d876      	bhi.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800def0:	4a47      	ldr	r2, [pc, #284]	@ (800e010 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d076      	beq.n	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800def6:	4a46      	ldr	r2, [pc, #280]	@ (800e010 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d870      	bhi.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800defc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800df00:	d070      	beq.n	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800df02:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800df06:	d86a      	bhi.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800df08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df0c:	d06a      	beq.n	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800df0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df12:	d864      	bhi.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800df14:	2b70      	cmp	r3, #112	@ 0x70
 800df16:	d01a      	beq.n	800df4e <TIM_SlaveTimer_SetConfig+0x10e>
 800df18:	2b70      	cmp	r3, #112	@ 0x70
 800df1a:	d860      	bhi.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800df1c:	2b60      	cmp	r3, #96	@ 0x60
 800df1e:	d054      	beq.n	800dfca <TIM_SlaveTimer_SetConfig+0x18a>
 800df20:	2b60      	cmp	r3, #96	@ 0x60
 800df22:	d85c      	bhi.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800df24:	2b50      	cmp	r3, #80	@ 0x50
 800df26:	d046      	beq.n	800dfb6 <TIM_SlaveTimer_SetConfig+0x176>
 800df28:	2b50      	cmp	r3, #80	@ 0x50
 800df2a:	d858      	bhi.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800df2c:	2b40      	cmp	r3, #64	@ 0x40
 800df2e:	d019      	beq.n	800df64 <TIM_SlaveTimer_SetConfig+0x124>
 800df30:	2b40      	cmp	r3, #64	@ 0x40
 800df32:	d854      	bhi.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800df34:	2b30      	cmp	r3, #48	@ 0x30
 800df36:	d055      	beq.n	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800df38:	2b30      	cmp	r3, #48	@ 0x30
 800df3a:	d850      	bhi.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800df3c:	2b20      	cmp	r3, #32
 800df3e:	d051      	beq.n	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800df40:	2b20      	cmp	r3, #32
 800df42:	d84c      	bhi.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
 800df44:	2b00      	cmp	r3, #0
 800df46:	d04d      	beq.n	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800df48:	2b10      	cmp	r3, #16
 800df4a:	d04b      	beq.n	800dfe4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800df4c:	e047      	b.n	800dfde <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800df5e:	f000 fa01 	bl	800e364 <TIM_ETR_SetConfig>
      break;
 800df62:	e040      	b.n	800dfe6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b05      	cmp	r3, #5
 800df6a:	d101      	bne.n	800df70 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800df6c:	2301      	movs	r3, #1
 800df6e:	e03b      	b.n	800dfe8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	6a1b      	ldr	r3, [r3, #32]
 800df76:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	6a1a      	ldr	r2, [r3, #32]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f022 0201 	bic.w	r2, r2, #1
 800df86:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	699b      	ldr	r3, [r3, #24]
 800df8e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800df96:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	011b      	lsls	r3, r3, #4
 800df9e:	68ba      	ldr	r2, [r7, #8]
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	68ba      	ldr	r2, [r7, #8]
 800dfaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	621a      	str	r2, [r3, #32]
      break;
 800dfb4:	e017      	b.n	800dfe6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	f000 f89a 	bl	800e0fc <TIM_TI1_ConfigInputStage>
      break;
 800dfc8:	e00d      	b.n	800dfe6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	f000 f8fc 	bl	800e1d4 <TIM_TI2_ConfigInputStage>
      break;
 800dfdc:	e003      	b.n	800dfe6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	75fb      	strb	r3, [r7, #23]
      break;
 800dfe2:	e000      	b.n	800dfe6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800dfe4:	bf00      	nop
  }

  return status;
 800dfe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3718      	adds	r7, #24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	ffcfff8f 	.word	0xffcfff8f
 800dff4:	fffefff8 	.word	0xfffefff8
 800dff8:	00200010 	.word	0x00200010
 800dffc:	00100070 	.word	0x00100070
 800e000:	00100060 	.word	0x00100060
 800e004:	00100050 	.word	0x00100050
 800e008:	00100040 	.word	0x00100040
 800e00c:	00100030 	.word	0x00100030
 800e010:	00100020 	.word	0x00100020

0800e014 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e014:	b480      	push	{r7}
 800e016:	b087      	sub	sp, #28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	607a      	str	r2, [r7, #4]
 800e020:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6a1b      	ldr	r3, [r3, #32]
 800e026:	f023 0201 	bic.w	r2, r3, #1
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	699b      	ldr	r3, [r3, #24]
 800e032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6a1b      	ldr	r3, [r3, #32]
 800e038:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	4a28      	ldr	r2, [pc, #160]	@ (800e0e0 <TIM_TI1_SetConfig+0xcc>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d01b      	beq.n	800e07a <TIM_TI1_SetConfig+0x66>
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e048:	d017      	beq.n	800e07a <TIM_TI1_SetConfig+0x66>
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	4a25      	ldr	r2, [pc, #148]	@ (800e0e4 <TIM_TI1_SetConfig+0xd0>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d013      	beq.n	800e07a <TIM_TI1_SetConfig+0x66>
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	4a24      	ldr	r2, [pc, #144]	@ (800e0e8 <TIM_TI1_SetConfig+0xd4>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d00f      	beq.n	800e07a <TIM_TI1_SetConfig+0x66>
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	4a23      	ldr	r2, [pc, #140]	@ (800e0ec <TIM_TI1_SetConfig+0xd8>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d00b      	beq.n	800e07a <TIM_TI1_SetConfig+0x66>
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	4a22      	ldr	r2, [pc, #136]	@ (800e0f0 <TIM_TI1_SetConfig+0xdc>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d007      	beq.n	800e07a <TIM_TI1_SetConfig+0x66>
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	4a21      	ldr	r2, [pc, #132]	@ (800e0f4 <TIM_TI1_SetConfig+0xe0>)
 800e06e:	4293      	cmp	r3, r2
 800e070:	d003      	beq.n	800e07a <TIM_TI1_SetConfig+0x66>
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	4a20      	ldr	r2, [pc, #128]	@ (800e0f8 <TIM_TI1_SetConfig+0xe4>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d101      	bne.n	800e07e <TIM_TI1_SetConfig+0x6a>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e000      	b.n	800e080 <TIM_TI1_SetConfig+0x6c>
 800e07e:	2300      	movs	r3, #0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d008      	beq.n	800e096 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	f023 0303 	bic.w	r3, r3, #3
 800e08a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4313      	orrs	r3, r2
 800e092:	617b      	str	r3, [r7, #20]
 800e094:	e003      	b.n	800e09e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	f043 0301 	orr.w	r3, r3, #1
 800e09c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e0a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	011b      	lsls	r3, r3, #4
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	697a      	ldr	r2, [r7, #20]
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	f023 030a 	bic.w	r3, r3, #10
 800e0b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	f003 030a 	and.w	r3, r3, #10
 800e0c0:	693a      	ldr	r2, [r7, #16]
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	697a      	ldr	r2, [r7, #20]
 800e0ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	693a      	ldr	r2, [r7, #16]
 800e0d0:	621a      	str	r2, [r3, #32]
}
 800e0d2:	bf00      	nop
 800e0d4:	371c      	adds	r7, #28
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop
 800e0e0:	40010000 	.word	0x40010000
 800e0e4:	40000400 	.word	0x40000400
 800e0e8:	40000800 	.word	0x40000800
 800e0ec:	40000c00 	.word	0x40000c00
 800e0f0:	40010400 	.word	0x40010400
 800e0f4:	40001800 	.word	0x40001800
 800e0f8:	40014000 	.word	0x40014000

0800e0fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b087      	sub	sp, #28
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6a1b      	ldr	r3, [r3, #32]
 800e10c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	f023 0201 	bic.w	r2, r3, #1
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	011b      	lsls	r3, r3, #4
 800e12c:	693a      	ldr	r2, [r7, #16]
 800e12e:	4313      	orrs	r3, r2
 800e130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	f023 030a 	bic.w	r3, r3, #10
 800e138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e13a:	697a      	ldr	r2, [r7, #20]
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	4313      	orrs	r3, r2
 800e140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	693a      	ldr	r2, [r7, #16]
 800e146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	621a      	str	r2, [r3, #32]
}
 800e14e:	bf00      	nop
 800e150:	371c      	adds	r7, #28
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr

0800e15a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e15a:	b480      	push	{r7}
 800e15c:	b087      	sub	sp, #28
 800e15e:	af00      	add	r7, sp, #0
 800e160:	60f8      	str	r0, [r7, #12]
 800e162:	60b9      	str	r1, [r7, #8]
 800e164:	607a      	str	r2, [r7, #4]
 800e166:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6a1b      	ldr	r3, [r3, #32]
 800e16c:	f023 0210 	bic.w	r2, r3, #16
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	699b      	ldr	r3, [r3, #24]
 800e178:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	6a1b      	ldr	r3, [r3, #32]
 800e17e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e186:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	021b      	lsls	r3, r3, #8
 800e18c:	697a      	ldr	r2, [r7, #20]
 800e18e:	4313      	orrs	r3, r2
 800e190:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	031b      	lsls	r3, r3, #12
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	697a      	ldr	r2, [r7, #20]
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e1ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	011b      	lsls	r3, r3, #4
 800e1b2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e1b6:	693a      	ldr	r2, [r7, #16]
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	693a      	ldr	r2, [r7, #16]
 800e1c6:	621a      	str	r2, [r3, #32]
}
 800e1c8:	bf00      	nop
 800e1ca:	371c      	adds	r7, #28
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b087      	sub	sp, #28
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6a1b      	ldr	r3, [r3, #32]
 800e1e4:	f023 0210 	bic.w	r2, r3, #16
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	699b      	ldr	r3, [r3, #24]
 800e1f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	6a1b      	ldr	r3, [r3, #32]
 800e1f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e1fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	031b      	lsls	r3, r3, #12
 800e204:	697a      	ldr	r2, [r7, #20]
 800e206:	4313      	orrs	r3, r2
 800e208:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e210:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	011b      	lsls	r3, r3, #4
 800e216:	693a      	ldr	r2, [r7, #16]
 800e218:	4313      	orrs	r3, r2
 800e21a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	697a      	ldr	r2, [r7, #20]
 800e220:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	693a      	ldr	r2, [r7, #16]
 800e226:	621a      	str	r2, [r3, #32]
}
 800e228:	bf00      	nop
 800e22a:	371c      	adds	r7, #28
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e234:	b480      	push	{r7}
 800e236:	b087      	sub	sp, #28
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
 800e240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6a1b      	ldr	r3, [r3, #32]
 800e246:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	69db      	ldr	r3, [r3, #28]
 800e252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6a1b      	ldr	r3, [r3, #32]
 800e258:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	f023 0303 	bic.w	r3, r3, #3
 800e260:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e262:	697a      	ldr	r2, [r7, #20]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4313      	orrs	r3, r2
 800e268:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e270:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	011b      	lsls	r3, r3, #4
 800e276:	b2db      	uxtb	r3, r3
 800e278:	697a      	ldr	r2, [r7, #20]
 800e27a:	4313      	orrs	r3, r2
 800e27c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800e284:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	021b      	lsls	r3, r3, #8
 800e28a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800e28e:	693a      	ldr	r2, [r7, #16]
 800e290:	4313      	orrs	r3, r2
 800e292:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	693a      	ldr	r2, [r7, #16]
 800e29e:	621a      	str	r2, [r3, #32]
}
 800e2a0:	bf00      	nop
 800e2a2:	371c      	adds	r7, #28
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b087      	sub	sp, #28
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	60b9      	str	r1, [r7, #8]
 800e2b6:	607a      	str	r2, [r7, #4]
 800e2b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	69db      	ldr	r3, [r3, #28]
 800e2ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6a1b      	ldr	r3, [r3, #32]
 800e2d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e2d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	021b      	lsls	r3, r3, #8
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e2ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	031b      	lsls	r3, r3, #12
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	697a      	ldr	r2, [r7, #20]
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800e2fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	031b      	lsls	r3, r3, #12
 800e304:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800e308:	693a      	ldr	r2, [r7, #16]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	697a      	ldr	r2, [r7, #20]
 800e312:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	693a      	ldr	r2, [r7, #16]
 800e318:	621a      	str	r2, [r3, #32]
}
 800e31a:	bf00      	nop
 800e31c:	371c      	adds	r7, #28
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr
	...

0800e328 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	4b09      	ldr	r3, [pc, #36]	@ (800e360 <TIM_ITRx_SetConfig+0x38>)
 800e33c:	4013      	ands	r3, r2
 800e33e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e340:	683a      	ldr	r2, [r7, #0]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	4313      	orrs	r3, r2
 800e346:	f043 0307 	orr.w	r3, r3, #7
 800e34a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	609a      	str	r2, [r3, #8]
}
 800e352:	bf00      	nop
 800e354:	3714      	adds	r7, #20
 800e356:	46bd      	mov	sp, r7
 800e358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop
 800e360:	ffcfff8f 	.word	0xffcfff8f

0800e364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e364:	b480      	push	{r7}
 800e366:	b087      	sub	sp, #28
 800e368:	af00      	add	r7, sp, #0
 800e36a:	60f8      	str	r0, [r7, #12]
 800e36c:	60b9      	str	r1, [r7, #8]
 800e36e:	607a      	str	r2, [r7, #4]
 800e370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e37e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	021a      	lsls	r2, r3, #8
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	431a      	orrs	r2, r3
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	4313      	orrs	r3, r2
 800e38c:	697a      	ldr	r2, [r7, #20]
 800e38e:	4313      	orrs	r3, r2
 800e390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	697a      	ldr	r2, [r7, #20]
 800e396:	609a      	str	r2, [r3, #8]
}
 800e398:	bf00      	nop
 800e39a:	371c      	adds	r7, #28
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d101      	bne.n	800e3bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e3b8:	2302      	movs	r3, #2
 800e3ba:	e06d      	b.n	800e498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2201      	movs	r2, #1
 800e3c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2202      	movs	r2, #2
 800e3c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	689b      	ldr	r3, [r3, #8]
 800e3da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a30      	ldr	r2, [pc, #192]	@ (800e4a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d004      	beq.n	800e3f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4a2f      	ldr	r2, [pc, #188]	@ (800e4a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d108      	bne.n	800e402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e3f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	4313      	orrs	r3, r2
 800e400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	4313      	orrs	r3, r2
 800e412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4a20      	ldr	r2, [pc, #128]	@ (800e4a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e422:	4293      	cmp	r3, r2
 800e424:	d022      	beq.n	800e46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e42e:	d01d      	beq.n	800e46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4a1d      	ldr	r2, [pc, #116]	@ (800e4ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d018      	beq.n	800e46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	4a1c      	ldr	r2, [pc, #112]	@ (800e4b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d013      	beq.n	800e46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4a1a      	ldr	r2, [pc, #104]	@ (800e4b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d00e      	beq.n	800e46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4a15      	ldr	r2, [pc, #84]	@ (800e4a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d009      	beq.n	800e46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4a16      	ldr	r2, [pc, #88]	@ (800e4b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d004      	beq.n	800e46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4a15      	ldr	r2, [pc, #84]	@ (800e4bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d10c      	bne.n	800e486 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	689b      	ldr	r3, [r3, #8]
 800e478:	68ba      	ldr	r2, [r7, #8]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2201      	movs	r2, #1
 800e48a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2200      	movs	r2, #0
 800e492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e496:	2300      	movs	r3, #0
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3714      	adds	r7, #20
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr
 800e4a4:	40010000 	.word	0x40010000
 800e4a8:	40010400 	.word	0x40010400
 800e4ac:	40000400 	.word	0x40000400
 800e4b0:	40000800 	.word	0x40000800
 800e4b4:	40000c00 	.word	0x40000c00
 800e4b8:	40001800 	.word	0x40001800
 800e4bc:	40014000 	.word	0x40014000

0800e4c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e4c8:	bf00      	nop
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e4dc:	bf00      	nop
 800e4de:	370c      	adds	r7, #12
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e4f0:	bf00      	nop
 800e4f2:	370c      	adds	r7, #12
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b082      	sub	sp, #8
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d101      	bne.n	800e50e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	e042      	b.n	800e594 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e514:	2b00      	cmp	r3, #0
 800e516:	d106      	bne.n	800e526 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f7f5 fbbf 	bl	8003ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2224      	movs	r2, #36	@ 0x24
 800e52a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f022 0201 	bic.w	r2, r2, #1
 800e53c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 fc94 	bl	800ee6c <UART_SetConfig>
 800e544:	4603      	mov	r3, r0
 800e546:	2b01      	cmp	r3, #1
 800e548:	d101      	bne.n	800e54e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e54a:	2301      	movs	r3, #1
 800e54c:	e022      	b.n	800e594 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e552:	2b00      	cmp	r3, #0
 800e554:	d002      	beq.n	800e55c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f001 f9f0 	bl	800f93c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	685a      	ldr	r2, [r3, #4]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e56a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	689a      	ldr	r2, [r3, #8]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e57a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f042 0201 	orr.w	r2, r2, #1
 800e58a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f001 fa77 	bl	800fa80 <UART_CheckIdleState>
 800e592:	4603      	mov	r3, r0
}
 800e594:	4618      	mov	r0, r3
 800e596:	3708      	adds	r7, #8
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b08a      	sub	sp, #40	@ 0x28
 800e5a0:	af02      	add	r7, sp, #8
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	603b      	str	r3, [r7, #0]
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5b2:	2b20      	cmp	r3, #32
 800e5b4:	d17b      	bne.n	800e6ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d002      	beq.n	800e5c2 <HAL_UART_Transmit+0x26>
 800e5bc:	88fb      	ldrh	r3, [r7, #6]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d101      	bne.n	800e5c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e074      	b.n	800e6b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2221      	movs	r2, #33	@ 0x21
 800e5d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e5d6:	f7f5 fc87 	bl	8003ee8 <HAL_GetTick>
 800e5da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	88fa      	ldrh	r2, [r7, #6]
 800e5e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	88fa      	ldrh	r2, [r7, #6]
 800e5e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5f4:	d108      	bne.n	800e608 <HAL_UART_Transmit+0x6c>
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	691b      	ldr	r3, [r3, #16]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d104      	bne.n	800e608 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e5fe:	2300      	movs	r3, #0
 800e600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	61bb      	str	r3, [r7, #24]
 800e606:	e003      	b.n	800e610 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e60c:	2300      	movs	r3, #0
 800e60e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e610:	e030      	b.n	800e674 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	9300      	str	r3, [sp, #0]
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	2200      	movs	r2, #0
 800e61a:	2180      	movs	r1, #128	@ 0x80
 800e61c:	68f8      	ldr	r0, [r7, #12]
 800e61e:	f001 fad9 	bl	800fbd4 <UART_WaitOnFlagUntilTimeout>
 800e622:	4603      	mov	r3, r0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d005      	beq.n	800e634 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2220      	movs	r2, #32
 800e62c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e630:	2303      	movs	r3, #3
 800e632:	e03d      	b.n	800e6b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d10b      	bne.n	800e652 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	461a      	mov	r2, r3
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e648:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	3302      	adds	r3, #2
 800e64e:	61bb      	str	r3, [r7, #24]
 800e650:	e007      	b.n	800e662 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	781a      	ldrb	r2, [r3, #0]
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	3301      	adds	r3, #1
 800e660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e668:	b29b      	uxth	r3, r3
 800e66a:	3b01      	subs	r3, #1
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d1c8      	bne.n	800e612 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	2200      	movs	r2, #0
 800e688:	2140      	movs	r1, #64	@ 0x40
 800e68a:	68f8      	ldr	r0, [r7, #12]
 800e68c:	f001 faa2 	bl	800fbd4 <UART_WaitOnFlagUntilTimeout>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d005      	beq.n	800e6a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2220      	movs	r2, #32
 800e69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e69e:	2303      	movs	r3, #3
 800e6a0:	e006      	b.n	800e6b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2220      	movs	r2, #32
 800e6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	e000      	b.n	800e6b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e6ae:	2302      	movs	r3, #2
  }
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3720      	adds	r7, #32
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b0ba      	sub	sp, #232	@ 0xe8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	69db      	ldr	r3, [r3, #28]
 800e6c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e6de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e6e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e6e6:	4013      	ands	r3, r2
 800e6e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e6ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d11b      	bne.n	800e72c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e6f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6f8:	f003 0320 	and.w	r3, r3, #32
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d015      	beq.n	800e72c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e704:	f003 0320 	and.w	r3, r3, #32
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d105      	bne.n	800e718 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e70c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e714:	2b00      	cmp	r3, #0
 800e716:	d009      	beq.n	800e72c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	f000 8377 	beq.w	800ee10 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	4798      	blx	r3
      }
      return;
 800e72a:	e371      	b.n	800ee10 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e72c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e730:	2b00      	cmp	r3, #0
 800e732:	f000 8123 	beq.w	800e97c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e736:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e73a:	4b8d      	ldr	r3, [pc, #564]	@ (800e970 <HAL_UART_IRQHandler+0x2b8>)
 800e73c:	4013      	ands	r3, r2
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d106      	bne.n	800e750 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e742:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e746:	4b8b      	ldr	r3, [pc, #556]	@ (800e974 <HAL_UART_IRQHandler+0x2bc>)
 800e748:	4013      	ands	r3, r2
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f000 8116 	beq.w	800e97c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e754:	f003 0301 	and.w	r3, r3, #1
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d011      	beq.n	800e780 <HAL_UART_IRQHandler+0xc8>
 800e75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e764:	2b00      	cmp	r3, #0
 800e766:	d00b      	beq.n	800e780 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2201      	movs	r2, #1
 800e76e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e776:	f043 0201 	orr.w	r2, r3, #1
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e784:	f003 0302 	and.w	r3, r3, #2
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d011      	beq.n	800e7b0 <HAL_UART_IRQHandler+0xf8>
 800e78c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e790:	f003 0301 	and.w	r3, r3, #1
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00b      	beq.n	800e7b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2202      	movs	r2, #2
 800e79e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7a6:	f043 0204 	orr.w	r2, r3, #4
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7b4:	f003 0304 	and.w	r3, r3, #4
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d011      	beq.n	800e7e0 <HAL_UART_IRQHandler+0x128>
 800e7bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d00b      	beq.n	800e7e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	2204      	movs	r2, #4
 800e7ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7d6:	f043 0202 	orr.w	r2, r3, #2
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e7e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7e4:	f003 0308 	and.w	r3, r3, #8
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d017      	beq.n	800e81c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e7ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7f0:	f003 0320 	and.w	r3, r3, #32
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d105      	bne.n	800e804 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e7f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e7fc:	4b5c      	ldr	r3, [pc, #368]	@ (800e970 <HAL_UART_IRQHandler+0x2b8>)
 800e7fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e800:	2b00      	cmp	r3, #0
 800e802:	d00b      	beq.n	800e81c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2208      	movs	r2, #8
 800e80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e812:	f043 0208 	orr.w	r2, r3, #8
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e824:	2b00      	cmp	r3, #0
 800e826:	d012      	beq.n	800e84e <HAL_UART_IRQHandler+0x196>
 800e828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e82c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00c      	beq.n	800e84e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e83c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e844:	f043 0220 	orr.w	r2, r3, #32
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e854:	2b00      	cmp	r3, #0
 800e856:	f000 82dd 	beq.w	800ee14 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e85a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e85e:	f003 0320 	and.w	r3, r3, #32
 800e862:	2b00      	cmp	r3, #0
 800e864:	d013      	beq.n	800e88e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e86a:	f003 0320 	and.w	r3, r3, #32
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d105      	bne.n	800e87e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d007      	beq.n	800e88e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e882:	2b00      	cmp	r3, #0
 800e884:	d003      	beq.n	800e88e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e894:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8a2:	2b40      	cmp	r3, #64	@ 0x40
 800e8a4:	d005      	beq.n	800e8b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e8a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e8aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d054      	beq.n	800e95c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f001 f9f6 	bl	800fca4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	689b      	ldr	r3, [r3, #8]
 800e8be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8c2:	2b40      	cmp	r3, #64	@ 0x40
 800e8c4:	d146      	bne.n	800e954 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3308      	adds	r3, #8
 800e8cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e8d4:	e853 3f00 	ldrex	r3, [r3]
 800e8d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e8dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e8e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	3308      	adds	r3, #8
 800e8ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e8f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e8f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e8fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e902:	e841 2300 	strex	r3, r2, [r1]
 800e906:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e90a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1d9      	bne.n	800e8c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d017      	beq.n	800e94c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e922:	4a15      	ldr	r2, [pc, #84]	@ (800e978 <HAL_UART_IRQHandler+0x2c0>)
 800e924:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7f8 ff01 	bl	8007734 <HAL_DMA_Abort_IT>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d019      	beq.n	800e96c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e93e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e946:	4610      	mov	r0, r2
 800e948:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e94a:	e00f      	b.n	800e96c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f000 fa77 	bl	800ee40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e952:	e00b      	b.n	800e96c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f000 fa73 	bl	800ee40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e95a:	e007      	b.n	800e96c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 fa6f 	bl	800ee40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e96a:	e253      	b.n	800ee14 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e96c:	bf00      	nop
    return;
 800e96e:	e251      	b.n	800ee14 <HAL_UART_IRQHandler+0x75c>
 800e970:	10000001 	.word	0x10000001
 800e974:	04000120 	.word	0x04000120
 800e978:	0800fd71 	.word	0x0800fd71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e980:	2b01      	cmp	r3, #1
 800e982:	f040 81e7 	bne.w	800ed54 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e98a:	f003 0310 	and.w	r3, r3, #16
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f000 81e0 	beq.w	800ed54 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e998:	f003 0310 	and.w	r3, r3, #16
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	f000 81d9 	beq.w	800ed54 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2210      	movs	r2, #16
 800e9a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9b4:	2b40      	cmp	r3, #64	@ 0x40
 800e9b6:	f040 8151 	bne.w	800ec5c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4a96      	ldr	r2, [pc, #600]	@ (800ec1c <HAL_UART_IRQHandler+0x564>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d068      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a93      	ldr	r2, [pc, #588]	@ (800ec20 <HAL_UART_IRQHandler+0x568>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d061      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4a91      	ldr	r2, [pc, #580]	@ (800ec24 <HAL_UART_IRQHandler+0x56c>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d05a      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4a8e      	ldr	r2, [pc, #568]	@ (800ec28 <HAL_UART_IRQHandler+0x570>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d053      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a8c      	ldr	r2, [pc, #560]	@ (800ec2c <HAL_UART_IRQHandler+0x574>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d04c      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a89      	ldr	r2, [pc, #548]	@ (800ec30 <HAL_UART_IRQHandler+0x578>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d045      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4a87      	ldr	r2, [pc, #540]	@ (800ec34 <HAL_UART_IRQHandler+0x57c>)
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d03e      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	4a84      	ldr	r2, [pc, #528]	@ (800ec38 <HAL_UART_IRQHandler+0x580>)
 800ea26:	4293      	cmp	r3, r2
 800ea28:	d037      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a82      	ldr	r2, [pc, #520]	@ (800ec3c <HAL_UART_IRQHandler+0x584>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d030      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a7f      	ldr	r2, [pc, #508]	@ (800ec40 <HAL_UART_IRQHandler+0x588>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d029      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4a7d      	ldr	r2, [pc, #500]	@ (800ec44 <HAL_UART_IRQHandler+0x58c>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d022      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4a7a      	ldr	r2, [pc, #488]	@ (800ec48 <HAL_UART_IRQHandler+0x590>)
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d01b      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4a78      	ldr	r2, [pc, #480]	@ (800ec4c <HAL_UART_IRQHandler+0x594>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d014      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4a75      	ldr	r2, [pc, #468]	@ (800ec50 <HAL_UART_IRQHandler+0x598>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d00d      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a73      	ldr	r2, [pc, #460]	@ (800ec54 <HAL_UART_IRQHandler+0x59c>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d006      	beq.n	800ea9a <HAL_UART_IRQHandler+0x3e2>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a70      	ldr	r2, [pc, #448]	@ (800ec58 <HAL_UART_IRQHandler+0x5a0>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d106      	bne.n	800eaa8 <HAL_UART_IRQHandler+0x3f0>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	e005      	b.n	800eab4 <HAL_UART_IRQHandler+0x3fc>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eab8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f000 81ab 	beq.w	800ee18 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eac8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eacc:	429a      	cmp	r2, r3
 800eace:	f080 81a3 	bcs.w	800ee18 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ead8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eae2:	69db      	ldr	r3, [r3, #28]
 800eae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eae8:	f000 8087 	beq.w	800ebfa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eaf8:	e853 3f00 	ldrex	r3, [r3]
 800eafc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800eb00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eb04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eb08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	461a      	mov	r2, r3
 800eb12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800eb16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eb1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800eb22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800eb26:	e841 2300 	strex	r3, r2, [r1]
 800eb2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800eb2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1da      	bne.n	800eaec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	3308      	adds	r3, #8
 800eb3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb40:	e853 3f00 	ldrex	r3, [r3]
 800eb44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800eb46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800eb48:	f023 0301 	bic.w	r3, r3, #1
 800eb4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	3308      	adds	r3, #8
 800eb56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800eb5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800eb5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800eb62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eb66:	e841 2300 	strex	r3, r2, [r1]
 800eb6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800eb6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1e1      	bne.n	800eb36 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	3308      	adds	r3, #8
 800eb78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb7c:	e853 3f00 	ldrex	r3, [r3]
 800eb80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800eb82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	3308      	adds	r3, #8
 800eb92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800eb96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800eb98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800eb9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800eb9e:	e841 2300 	strex	r3, r2, [r1]
 800eba2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800eba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1e3      	bne.n	800eb72 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2220      	movs	r2, #32
 800ebae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebc0:	e853 3f00 	ldrex	r3, [r3]
 800ebc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ebc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebc8:	f023 0310 	bic.w	r3, r3, #16
 800ebcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebda:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ebdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ebe0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ebe2:	e841 2300 	strex	r3, r2, [r1]
 800ebe6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ebe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1e4      	bne.n	800ebb8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7f8 fa7f 	bl	80070f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2202      	movs	r2, #2
 800ebfe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	4619      	mov	r1, r3
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 f91d 	bl	800ee54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ec1a:	e0fd      	b.n	800ee18 <HAL_UART_IRQHandler+0x760>
 800ec1c:	40020010 	.word	0x40020010
 800ec20:	40020028 	.word	0x40020028
 800ec24:	40020040 	.word	0x40020040
 800ec28:	40020058 	.word	0x40020058
 800ec2c:	40020070 	.word	0x40020070
 800ec30:	40020088 	.word	0x40020088
 800ec34:	400200a0 	.word	0x400200a0
 800ec38:	400200b8 	.word	0x400200b8
 800ec3c:	40020410 	.word	0x40020410
 800ec40:	40020428 	.word	0x40020428
 800ec44:	40020440 	.word	0x40020440
 800ec48:	40020458 	.word	0x40020458
 800ec4c:	40020470 	.word	0x40020470
 800ec50:	40020488 	.word	0x40020488
 800ec54:	400204a0 	.word	0x400204a0
 800ec58:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	1ad3      	subs	r3, r2, r3
 800ec6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f000 80cf 	beq.w	800ee1c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ec7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f000 80ca 	beq.w	800ee1c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec90:	e853 3f00 	ldrex	r3, [r3]
 800ec94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ec96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	461a      	mov	r2, r3
 800eca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ecaa:	647b      	str	r3, [r7, #68]	@ 0x44
 800ecac:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ecb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ecb2:	e841 2300 	strex	r3, r2, [r1]
 800ecb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ecb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d1e4      	bne.n	800ec88 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	3308      	adds	r3, #8
 800ecc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc8:	e853 3f00 	ldrex	r3, [r3]
 800eccc:	623b      	str	r3, [r7, #32]
   return(result);
 800ecce:	6a3a      	ldr	r2, [r7, #32]
 800ecd0:	4b55      	ldr	r3, [pc, #340]	@ (800ee28 <HAL_UART_IRQHandler+0x770>)
 800ecd2:	4013      	ands	r3, r2
 800ecd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	3308      	adds	r3, #8
 800ecde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ece2:	633a      	str	r2, [r7, #48]	@ 0x30
 800ece4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ece8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecea:	e841 2300 	strex	r3, r2, [r1]
 800ecee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ecf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d1e3      	bne.n	800ecbe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2220      	movs	r2, #32
 800ecfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	e853 3f00 	ldrex	r3, [r3]
 800ed16:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f023 0310 	bic.w	r3, r3, #16
 800ed1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	461a      	mov	r2, r3
 800ed28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ed2c:	61fb      	str	r3, [r7, #28]
 800ed2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed30:	69b9      	ldr	r1, [r7, #24]
 800ed32:	69fa      	ldr	r2, [r7, #28]
 800ed34:	e841 2300 	strex	r3, r2, [r1]
 800ed38:	617b      	str	r3, [r7, #20]
   return(result);
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1e4      	bne.n	800ed0a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2202      	movs	r2, #2
 800ed44:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ed46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 f881 	bl	800ee54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ed52:	e063      	b.n	800ee1c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ed54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d00e      	beq.n	800ed7e <HAL_UART_IRQHandler+0x6c6>
 800ed60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d008      	beq.n	800ed7e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ed74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f001 f83b 	bl	800fdf2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ed7c:	e051      	b.n	800ee22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ed7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d014      	beq.n	800edb4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ed8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d105      	bne.n	800eda2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ed96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d008      	beq.n	800edb4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d03a      	beq.n	800ee20 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	4798      	blx	r3
    }
    return;
 800edb2:	e035      	b.n	800ee20 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800edb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d009      	beq.n	800edd4 <HAL_UART_IRQHandler+0x71c>
 800edc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d003      	beq.n	800edd4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 ffe5 	bl	800fd9c <UART_EndTransmit_IT>
    return;
 800edd2:	e026      	b.n	800ee22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800edd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d009      	beq.n	800edf4 <HAL_UART_IRQHandler+0x73c>
 800ede0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ede4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d003      	beq.n	800edf4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f001 f814 	bl	800fe1a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800edf2:	e016      	b.n	800ee22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800edf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edf8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d010      	beq.n	800ee22 <HAL_UART_IRQHandler+0x76a>
 800ee00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	da0c      	bge.n	800ee22 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 fffc 	bl	800fe06 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ee0e:	e008      	b.n	800ee22 <HAL_UART_IRQHandler+0x76a>
      return;
 800ee10:	bf00      	nop
 800ee12:	e006      	b.n	800ee22 <HAL_UART_IRQHandler+0x76a>
    return;
 800ee14:	bf00      	nop
 800ee16:	e004      	b.n	800ee22 <HAL_UART_IRQHandler+0x76a>
      return;
 800ee18:	bf00      	nop
 800ee1a:	e002      	b.n	800ee22 <HAL_UART_IRQHandler+0x76a>
      return;
 800ee1c:	bf00      	nop
 800ee1e:	e000      	b.n	800ee22 <HAL_UART_IRQHandler+0x76a>
    return;
 800ee20:	bf00      	nop
  }
}
 800ee22:	37e8      	adds	r7, #232	@ 0xe8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}
 800ee28:	effffffe 	.word	0xeffffffe

0800ee2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ee34:	bf00      	nop
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ee48:	bf00      	nop
 800ee4a:	370c      	adds	r7, #12
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ee60:	bf00      	nop
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr

0800ee6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee70:	b092      	sub	sp, #72	@ 0x48
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ee76:	2300      	movs	r3, #0
 800ee78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	689a      	ldr	r2, [r3, #8]
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	691b      	ldr	r3, [r3, #16]
 800ee84:	431a      	orrs	r2, r3
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	695b      	ldr	r3, [r3, #20]
 800ee8a:	431a      	orrs	r2, r3
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	69db      	ldr	r3, [r3, #28]
 800ee90:	4313      	orrs	r3, r2
 800ee92:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	4bbe      	ldr	r3, [pc, #760]	@ (800f194 <UART_SetConfig+0x328>)
 800ee9c:	4013      	ands	r3, r2
 800ee9e:	697a      	ldr	r2, [r7, #20]
 800eea0:	6812      	ldr	r2, [r2, #0]
 800eea2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eea4:	430b      	orrs	r3, r1
 800eea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	68da      	ldr	r2, [r3, #12]
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	430a      	orrs	r2, r1
 800eebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	699b      	ldr	r3, [r3, #24]
 800eec2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4ab3      	ldr	r2, [pc, #716]	@ (800f198 <UART_SetConfig+0x32c>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d004      	beq.n	800eed8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	6a1b      	ldr	r3, [r3, #32]
 800eed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eed4:	4313      	orrs	r3, r2
 800eed6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	689a      	ldr	r2, [r3, #8]
 800eede:	4baf      	ldr	r3, [pc, #700]	@ (800f19c <UART_SetConfig+0x330>)
 800eee0:	4013      	ands	r3, r2
 800eee2:	697a      	ldr	r2, [r7, #20]
 800eee4:	6812      	ldr	r2, [r2, #0]
 800eee6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eee8:	430b      	orrs	r3, r1
 800eeea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eef2:	f023 010f 	bic.w	r1, r3, #15
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	430a      	orrs	r2, r1
 800ef00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4aa6      	ldr	r2, [pc, #664]	@ (800f1a0 <UART_SetConfig+0x334>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d177      	bne.n	800effc <UART_SetConfig+0x190>
 800ef0c:	4ba5      	ldr	r3, [pc, #660]	@ (800f1a4 <UART_SetConfig+0x338>)
 800ef0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ef14:	2b28      	cmp	r3, #40	@ 0x28
 800ef16:	d86d      	bhi.n	800eff4 <UART_SetConfig+0x188>
 800ef18:	a201      	add	r2, pc, #4	@ (adr r2, 800ef20 <UART_SetConfig+0xb4>)
 800ef1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef1e:	bf00      	nop
 800ef20:	0800efc5 	.word	0x0800efc5
 800ef24:	0800eff5 	.word	0x0800eff5
 800ef28:	0800eff5 	.word	0x0800eff5
 800ef2c:	0800eff5 	.word	0x0800eff5
 800ef30:	0800eff5 	.word	0x0800eff5
 800ef34:	0800eff5 	.word	0x0800eff5
 800ef38:	0800eff5 	.word	0x0800eff5
 800ef3c:	0800eff5 	.word	0x0800eff5
 800ef40:	0800efcd 	.word	0x0800efcd
 800ef44:	0800eff5 	.word	0x0800eff5
 800ef48:	0800eff5 	.word	0x0800eff5
 800ef4c:	0800eff5 	.word	0x0800eff5
 800ef50:	0800eff5 	.word	0x0800eff5
 800ef54:	0800eff5 	.word	0x0800eff5
 800ef58:	0800eff5 	.word	0x0800eff5
 800ef5c:	0800eff5 	.word	0x0800eff5
 800ef60:	0800efd5 	.word	0x0800efd5
 800ef64:	0800eff5 	.word	0x0800eff5
 800ef68:	0800eff5 	.word	0x0800eff5
 800ef6c:	0800eff5 	.word	0x0800eff5
 800ef70:	0800eff5 	.word	0x0800eff5
 800ef74:	0800eff5 	.word	0x0800eff5
 800ef78:	0800eff5 	.word	0x0800eff5
 800ef7c:	0800eff5 	.word	0x0800eff5
 800ef80:	0800efdd 	.word	0x0800efdd
 800ef84:	0800eff5 	.word	0x0800eff5
 800ef88:	0800eff5 	.word	0x0800eff5
 800ef8c:	0800eff5 	.word	0x0800eff5
 800ef90:	0800eff5 	.word	0x0800eff5
 800ef94:	0800eff5 	.word	0x0800eff5
 800ef98:	0800eff5 	.word	0x0800eff5
 800ef9c:	0800eff5 	.word	0x0800eff5
 800efa0:	0800efe5 	.word	0x0800efe5
 800efa4:	0800eff5 	.word	0x0800eff5
 800efa8:	0800eff5 	.word	0x0800eff5
 800efac:	0800eff5 	.word	0x0800eff5
 800efb0:	0800eff5 	.word	0x0800eff5
 800efb4:	0800eff5 	.word	0x0800eff5
 800efb8:	0800eff5 	.word	0x0800eff5
 800efbc:	0800eff5 	.word	0x0800eff5
 800efc0:	0800efed 	.word	0x0800efed
 800efc4:	2301      	movs	r3, #1
 800efc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efca:	e222      	b.n	800f412 <UART_SetConfig+0x5a6>
 800efcc:	2304      	movs	r3, #4
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efd2:	e21e      	b.n	800f412 <UART_SetConfig+0x5a6>
 800efd4:	2308      	movs	r3, #8
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efda:	e21a      	b.n	800f412 <UART_SetConfig+0x5a6>
 800efdc:	2310      	movs	r3, #16
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efe2:	e216      	b.n	800f412 <UART_SetConfig+0x5a6>
 800efe4:	2320      	movs	r3, #32
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efea:	e212      	b.n	800f412 <UART_SetConfig+0x5a6>
 800efec:	2340      	movs	r3, #64	@ 0x40
 800efee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eff2:	e20e      	b.n	800f412 <UART_SetConfig+0x5a6>
 800eff4:	2380      	movs	r3, #128	@ 0x80
 800eff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800effa:	e20a      	b.n	800f412 <UART_SetConfig+0x5a6>
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a69      	ldr	r2, [pc, #420]	@ (800f1a8 <UART_SetConfig+0x33c>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d130      	bne.n	800f068 <UART_SetConfig+0x1fc>
 800f006:	4b67      	ldr	r3, [pc, #412]	@ (800f1a4 <UART_SetConfig+0x338>)
 800f008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f00a:	f003 0307 	and.w	r3, r3, #7
 800f00e:	2b05      	cmp	r3, #5
 800f010:	d826      	bhi.n	800f060 <UART_SetConfig+0x1f4>
 800f012:	a201      	add	r2, pc, #4	@ (adr r2, 800f018 <UART_SetConfig+0x1ac>)
 800f014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f018:	0800f031 	.word	0x0800f031
 800f01c:	0800f039 	.word	0x0800f039
 800f020:	0800f041 	.word	0x0800f041
 800f024:	0800f049 	.word	0x0800f049
 800f028:	0800f051 	.word	0x0800f051
 800f02c:	0800f059 	.word	0x0800f059
 800f030:	2300      	movs	r3, #0
 800f032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f036:	e1ec      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f038:	2304      	movs	r3, #4
 800f03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f03e:	e1e8      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f040:	2308      	movs	r3, #8
 800f042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f046:	e1e4      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f048:	2310      	movs	r3, #16
 800f04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f04e:	e1e0      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f050:	2320      	movs	r3, #32
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f056:	e1dc      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f058:	2340      	movs	r3, #64	@ 0x40
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f05e:	e1d8      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f060:	2380      	movs	r3, #128	@ 0x80
 800f062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f066:	e1d4      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4a4f      	ldr	r2, [pc, #316]	@ (800f1ac <UART_SetConfig+0x340>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d130      	bne.n	800f0d4 <UART_SetConfig+0x268>
 800f072:	4b4c      	ldr	r3, [pc, #304]	@ (800f1a4 <UART_SetConfig+0x338>)
 800f074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f076:	f003 0307 	and.w	r3, r3, #7
 800f07a:	2b05      	cmp	r3, #5
 800f07c:	d826      	bhi.n	800f0cc <UART_SetConfig+0x260>
 800f07e:	a201      	add	r2, pc, #4	@ (adr r2, 800f084 <UART_SetConfig+0x218>)
 800f080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f084:	0800f09d 	.word	0x0800f09d
 800f088:	0800f0a5 	.word	0x0800f0a5
 800f08c:	0800f0ad 	.word	0x0800f0ad
 800f090:	0800f0b5 	.word	0x0800f0b5
 800f094:	0800f0bd 	.word	0x0800f0bd
 800f098:	0800f0c5 	.word	0x0800f0c5
 800f09c:	2300      	movs	r3, #0
 800f09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0a2:	e1b6      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f0a4:	2304      	movs	r3, #4
 800f0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0aa:	e1b2      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f0ac:	2308      	movs	r3, #8
 800f0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0b2:	e1ae      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f0b4:	2310      	movs	r3, #16
 800f0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ba:	e1aa      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f0bc:	2320      	movs	r3, #32
 800f0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0c2:	e1a6      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f0c4:	2340      	movs	r3, #64	@ 0x40
 800f0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ca:	e1a2      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f0cc:	2380      	movs	r3, #128	@ 0x80
 800f0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0d2:	e19e      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4a35      	ldr	r2, [pc, #212]	@ (800f1b0 <UART_SetConfig+0x344>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d130      	bne.n	800f140 <UART_SetConfig+0x2d4>
 800f0de:	4b31      	ldr	r3, [pc, #196]	@ (800f1a4 <UART_SetConfig+0x338>)
 800f0e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0e2:	f003 0307 	and.w	r3, r3, #7
 800f0e6:	2b05      	cmp	r3, #5
 800f0e8:	d826      	bhi.n	800f138 <UART_SetConfig+0x2cc>
 800f0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f0f0 <UART_SetConfig+0x284>)
 800f0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f0:	0800f109 	.word	0x0800f109
 800f0f4:	0800f111 	.word	0x0800f111
 800f0f8:	0800f119 	.word	0x0800f119
 800f0fc:	0800f121 	.word	0x0800f121
 800f100:	0800f129 	.word	0x0800f129
 800f104:	0800f131 	.word	0x0800f131
 800f108:	2300      	movs	r3, #0
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f10e:	e180      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f110:	2304      	movs	r3, #4
 800f112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f116:	e17c      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f118:	2308      	movs	r3, #8
 800f11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f11e:	e178      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f120:	2310      	movs	r3, #16
 800f122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f126:	e174      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f128:	2320      	movs	r3, #32
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f12e:	e170      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f130:	2340      	movs	r3, #64	@ 0x40
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f136:	e16c      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f138:	2380      	movs	r3, #128	@ 0x80
 800f13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f13e:	e168      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4a1b      	ldr	r2, [pc, #108]	@ (800f1b4 <UART_SetConfig+0x348>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d142      	bne.n	800f1d0 <UART_SetConfig+0x364>
 800f14a:	4b16      	ldr	r3, [pc, #88]	@ (800f1a4 <UART_SetConfig+0x338>)
 800f14c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f14e:	f003 0307 	and.w	r3, r3, #7
 800f152:	2b05      	cmp	r3, #5
 800f154:	d838      	bhi.n	800f1c8 <UART_SetConfig+0x35c>
 800f156:	a201      	add	r2, pc, #4	@ (adr r2, 800f15c <UART_SetConfig+0x2f0>)
 800f158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15c:	0800f175 	.word	0x0800f175
 800f160:	0800f17d 	.word	0x0800f17d
 800f164:	0800f185 	.word	0x0800f185
 800f168:	0800f18d 	.word	0x0800f18d
 800f16c:	0800f1b9 	.word	0x0800f1b9
 800f170:	0800f1c1 	.word	0x0800f1c1
 800f174:	2300      	movs	r3, #0
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f17a:	e14a      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f17c:	2304      	movs	r3, #4
 800f17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f182:	e146      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f184:	2308      	movs	r3, #8
 800f186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f18a:	e142      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f18c:	2310      	movs	r3, #16
 800f18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f192:	e13e      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f194:	cfff69f3 	.word	0xcfff69f3
 800f198:	58000c00 	.word	0x58000c00
 800f19c:	11fff4ff 	.word	0x11fff4ff
 800f1a0:	40011000 	.word	0x40011000
 800f1a4:	58024400 	.word	0x58024400
 800f1a8:	40004400 	.word	0x40004400
 800f1ac:	40004800 	.word	0x40004800
 800f1b0:	40004c00 	.word	0x40004c00
 800f1b4:	40005000 	.word	0x40005000
 800f1b8:	2320      	movs	r3, #32
 800f1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1be:	e128      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f1c0:	2340      	movs	r3, #64	@ 0x40
 800f1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1c6:	e124      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f1c8:	2380      	movs	r3, #128	@ 0x80
 800f1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ce:	e120      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4acb      	ldr	r2, [pc, #812]	@ (800f504 <UART_SetConfig+0x698>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d176      	bne.n	800f2c8 <UART_SetConfig+0x45c>
 800f1da:	4bcb      	ldr	r3, [pc, #812]	@ (800f508 <UART_SetConfig+0x69c>)
 800f1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f1e2:	2b28      	cmp	r3, #40	@ 0x28
 800f1e4:	d86c      	bhi.n	800f2c0 <UART_SetConfig+0x454>
 800f1e6:	a201      	add	r2, pc, #4	@ (adr r2, 800f1ec <UART_SetConfig+0x380>)
 800f1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ec:	0800f291 	.word	0x0800f291
 800f1f0:	0800f2c1 	.word	0x0800f2c1
 800f1f4:	0800f2c1 	.word	0x0800f2c1
 800f1f8:	0800f2c1 	.word	0x0800f2c1
 800f1fc:	0800f2c1 	.word	0x0800f2c1
 800f200:	0800f2c1 	.word	0x0800f2c1
 800f204:	0800f2c1 	.word	0x0800f2c1
 800f208:	0800f2c1 	.word	0x0800f2c1
 800f20c:	0800f299 	.word	0x0800f299
 800f210:	0800f2c1 	.word	0x0800f2c1
 800f214:	0800f2c1 	.word	0x0800f2c1
 800f218:	0800f2c1 	.word	0x0800f2c1
 800f21c:	0800f2c1 	.word	0x0800f2c1
 800f220:	0800f2c1 	.word	0x0800f2c1
 800f224:	0800f2c1 	.word	0x0800f2c1
 800f228:	0800f2c1 	.word	0x0800f2c1
 800f22c:	0800f2a1 	.word	0x0800f2a1
 800f230:	0800f2c1 	.word	0x0800f2c1
 800f234:	0800f2c1 	.word	0x0800f2c1
 800f238:	0800f2c1 	.word	0x0800f2c1
 800f23c:	0800f2c1 	.word	0x0800f2c1
 800f240:	0800f2c1 	.word	0x0800f2c1
 800f244:	0800f2c1 	.word	0x0800f2c1
 800f248:	0800f2c1 	.word	0x0800f2c1
 800f24c:	0800f2a9 	.word	0x0800f2a9
 800f250:	0800f2c1 	.word	0x0800f2c1
 800f254:	0800f2c1 	.word	0x0800f2c1
 800f258:	0800f2c1 	.word	0x0800f2c1
 800f25c:	0800f2c1 	.word	0x0800f2c1
 800f260:	0800f2c1 	.word	0x0800f2c1
 800f264:	0800f2c1 	.word	0x0800f2c1
 800f268:	0800f2c1 	.word	0x0800f2c1
 800f26c:	0800f2b1 	.word	0x0800f2b1
 800f270:	0800f2c1 	.word	0x0800f2c1
 800f274:	0800f2c1 	.word	0x0800f2c1
 800f278:	0800f2c1 	.word	0x0800f2c1
 800f27c:	0800f2c1 	.word	0x0800f2c1
 800f280:	0800f2c1 	.word	0x0800f2c1
 800f284:	0800f2c1 	.word	0x0800f2c1
 800f288:	0800f2c1 	.word	0x0800f2c1
 800f28c:	0800f2b9 	.word	0x0800f2b9
 800f290:	2301      	movs	r3, #1
 800f292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f296:	e0bc      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f298:	2304      	movs	r3, #4
 800f29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f29e:	e0b8      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f2a0:	2308      	movs	r3, #8
 800f2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2a6:	e0b4      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f2a8:	2310      	movs	r3, #16
 800f2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2ae:	e0b0      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f2b0:	2320      	movs	r3, #32
 800f2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2b6:	e0ac      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f2b8:	2340      	movs	r3, #64	@ 0x40
 800f2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2be:	e0a8      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f2c0:	2380      	movs	r3, #128	@ 0x80
 800f2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f2c6:	e0a4      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4a8f      	ldr	r2, [pc, #572]	@ (800f50c <UART_SetConfig+0x6a0>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d130      	bne.n	800f334 <UART_SetConfig+0x4c8>
 800f2d2:	4b8d      	ldr	r3, [pc, #564]	@ (800f508 <UART_SetConfig+0x69c>)
 800f2d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2d6:	f003 0307 	and.w	r3, r3, #7
 800f2da:	2b05      	cmp	r3, #5
 800f2dc:	d826      	bhi.n	800f32c <UART_SetConfig+0x4c0>
 800f2de:	a201      	add	r2, pc, #4	@ (adr r2, 800f2e4 <UART_SetConfig+0x478>)
 800f2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2e4:	0800f2fd 	.word	0x0800f2fd
 800f2e8:	0800f305 	.word	0x0800f305
 800f2ec:	0800f30d 	.word	0x0800f30d
 800f2f0:	0800f315 	.word	0x0800f315
 800f2f4:	0800f31d 	.word	0x0800f31d
 800f2f8:	0800f325 	.word	0x0800f325
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f302:	e086      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f304:	2304      	movs	r3, #4
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f30a:	e082      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f30c:	2308      	movs	r3, #8
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f312:	e07e      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f314:	2310      	movs	r3, #16
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f31a:	e07a      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f31c:	2320      	movs	r3, #32
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f322:	e076      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f324:	2340      	movs	r3, #64	@ 0x40
 800f326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f32a:	e072      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f32c:	2380      	movs	r3, #128	@ 0x80
 800f32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f332:	e06e      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4a75      	ldr	r2, [pc, #468]	@ (800f510 <UART_SetConfig+0x6a4>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d130      	bne.n	800f3a0 <UART_SetConfig+0x534>
 800f33e:	4b72      	ldr	r3, [pc, #456]	@ (800f508 <UART_SetConfig+0x69c>)
 800f340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f342:	f003 0307 	and.w	r3, r3, #7
 800f346:	2b05      	cmp	r3, #5
 800f348:	d826      	bhi.n	800f398 <UART_SetConfig+0x52c>
 800f34a:	a201      	add	r2, pc, #4	@ (adr r2, 800f350 <UART_SetConfig+0x4e4>)
 800f34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f350:	0800f369 	.word	0x0800f369
 800f354:	0800f371 	.word	0x0800f371
 800f358:	0800f379 	.word	0x0800f379
 800f35c:	0800f381 	.word	0x0800f381
 800f360:	0800f389 	.word	0x0800f389
 800f364:	0800f391 	.word	0x0800f391
 800f368:	2300      	movs	r3, #0
 800f36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f36e:	e050      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f370:	2304      	movs	r3, #4
 800f372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f376:	e04c      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f378:	2308      	movs	r3, #8
 800f37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f37e:	e048      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f380:	2310      	movs	r3, #16
 800f382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f386:	e044      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f388:	2320      	movs	r3, #32
 800f38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f38e:	e040      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f390:	2340      	movs	r3, #64	@ 0x40
 800f392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f396:	e03c      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f398:	2380      	movs	r3, #128	@ 0x80
 800f39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f39e:	e038      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4a5b      	ldr	r2, [pc, #364]	@ (800f514 <UART_SetConfig+0x6a8>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d130      	bne.n	800f40c <UART_SetConfig+0x5a0>
 800f3aa:	4b57      	ldr	r3, [pc, #348]	@ (800f508 <UART_SetConfig+0x69c>)
 800f3ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3ae:	f003 0307 	and.w	r3, r3, #7
 800f3b2:	2b05      	cmp	r3, #5
 800f3b4:	d826      	bhi.n	800f404 <UART_SetConfig+0x598>
 800f3b6:	a201      	add	r2, pc, #4	@ (adr r2, 800f3bc <UART_SetConfig+0x550>)
 800f3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3bc:	0800f3d5 	.word	0x0800f3d5
 800f3c0:	0800f3dd 	.word	0x0800f3dd
 800f3c4:	0800f3e5 	.word	0x0800f3e5
 800f3c8:	0800f3ed 	.word	0x0800f3ed
 800f3cc:	0800f3f5 	.word	0x0800f3f5
 800f3d0:	0800f3fd 	.word	0x0800f3fd
 800f3d4:	2302      	movs	r3, #2
 800f3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3da:	e01a      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f3dc:	2304      	movs	r3, #4
 800f3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3e2:	e016      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f3e4:	2308      	movs	r3, #8
 800f3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3ea:	e012      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f3ec:	2310      	movs	r3, #16
 800f3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3f2:	e00e      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f3f4:	2320      	movs	r3, #32
 800f3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f3fa:	e00a      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f3fc:	2340      	movs	r3, #64	@ 0x40
 800f3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f402:	e006      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f404:	2380      	movs	r3, #128	@ 0x80
 800f406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f40a:	e002      	b.n	800f412 <UART_SetConfig+0x5a6>
 800f40c:	2380      	movs	r3, #128	@ 0x80
 800f40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	4a3f      	ldr	r2, [pc, #252]	@ (800f514 <UART_SetConfig+0x6a8>)
 800f418:	4293      	cmp	r3, r2
 800f41a:	f040 80f8 	bne.w	800f60e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f41e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f422:	2b20      	cmp	r3, #32
 800f424:	dc46      	bgt.n	800f4b4 <UART_SetConfig+0x648>
 800f426:	2b02      	cmp	r3, #2
 800f428:	f2c0 8082 	blt.w	800f530 <UART_SetConfig+0x6c4>
 800f42c:	3b02      	subs	r3, #2
 800f42e:	2b1e      	cmp	r3, #30
 800f430:	d87e      	bhi.n	800f530 <UART_SetConfig+0x6c4>
 800f432:	a201      	add	r2, pc, #4	@ (adr r2, 800f438 <UART_SetConfig+0x5cc>)
 800f434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f438:	0800f4bb 	.word	0x0800f4bb
 800f43c:	0800f531 	.word	0x0800f531
 800f440:	0800f4c3 	.word	0x0800f4c3
 800f444:	0800f531 	.word	0x0800f531
 800f448:	0800f531 	.word	0x0800f531
 800f44c:	0800f531 	.word	0x0800f531
 800f450:	0800f4d3 	.word	0x0800f4d3
 800f454:	0800f531 	.word	0x0800f531
 800f458:	0800f531 	.word	0x0800f531
 800f45c:	0800f531 	.word	0x0800f531
 800f460:	0800f531 	.word	0x0800f531
 800f464:	0800f531 	.word	0x0800f531
 800f468:	0800f531 	.word	0x0800f531
 800f46c:	0800f531 	.word	0x0800f531
 800f470:	0800f4e3 	.word	0x0800f4e3
 800f474:	0800f531 	.word	0x0800f531
 800f478:	0800f531 	.word	0x0800f531
 800f47c:	0800f531 	.word	0x0800f531
 800f480:	0800f531 	.word	0x0800f531
 800f484:	0800f531 	.word	0x0800f531
 800f488:	0800f531 	.word	0x0800f531
 800f48c:	0800f531 	.word	0x0800f531
 800f490:	0800f531 	.word	0x0800f531
 800f494:	0800f531 	.word	0x0800f531
 800f498:	0800f531 	.word	0x0800f531
 800f49c:	0800f531 	.word	0x0800f531
 800f4a0:	0800f531 	.word	0x0800f531
 800f4a4:	0800f531 	.word	0x0800f531
 800f4a8:	0800f531 	.word	0x0800f531
 800f4ac:	0800f531 	.word	0x0800f531
 800f4b0:	0800f523 	.word	0x0800f523
 800f4b4:	2b40      	cmp	r3, #64	@ 0x40
 800f4b6:	d037      	beq.n	800f528 <UART_SetConfig+0x6bc>
 800f4b8:	e03a      	b.n	800f530 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f4ba:	f7fd fa3b 	bl	800c934 <HAL_RCCEx_GetD3PCLK1Freq>
 800f4be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f4c0:	e03c      	b.n	800f53c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fd fa4a 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4d0:	e034      	b.n	800f53c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4d2:	f107 0318 	add.w	r3, r7, #24
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fd fb96 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f4e0:	e02c      	b.n	800f53c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4e2:	4b09      	ldr	r3, [pc, #36]	@ (800f508 <UART_SetConfig+0x69c>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f003 0320 	and.w	r3, r3, #32
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d016      	beq.n	800f51c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f4ee:	4b06      	ldr	r3, [pc, #24]	@ (800f508 <UART_SetConfig+0x69c>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	08db      	lsrs	r3, r3, #3
 800f4f4:	f003 0303 	and.w	r3, r3, #3
 800f4f8:	4a07      	ldr	r2, [pc, #28]	@ (800f518 <UART_SetConfig+0x6ac>)
 800f4fa:	fa22 f303 	lsr.w	r3, r2, r3
 800f4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f500:	e01c      	b.n	800f53c <UART_SetConfig+0x6d0>
 800f502:	bf00      	nop
 800f504:	40011400 	.word	0x40011400
 800f508:	58024400 	.word	0x58024400
 800f50c:	40007800 	.word	0x40007800
 800f510:	40007c00 	.word	0x40007c00
 800f514:	58000c00 	.word	0x58000c00
 800f518:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f51c:	4b9d      	ldr	r3, [pc, #628]	@ (800f794 <UART_SetConfig+0x928>)
 800f51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f520:	e00c      	b.n	800f53c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f522:	4b9d      	ldr	r3, [pc, #628]	@ (800f798 <UART_SetConfig+0x92c>)
 800f524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f526:	e009      	b.n	800f53c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f52e:	e005      	b.n	800f53c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f530:	2300      	movs	r3, #0
 800f532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f534:	2301      	movs	r3, #1
 800f536:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f53a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f53c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f000 81de 	beq.w	800f900 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f548:	4a94      	ldr	r2, [pc, #592]	@ (800f79c <UART_SetConfig+0x930>)
 800f54a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f54e:	461a      	mov	r2, r3
 800f550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f552:	fbb3 f3f2 	udiv	r3, r3, r2
 800f556:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	685a      	ldr	r2, [r3, #4]
 800f55c:	4613      	mov	r3, r2
 800f55e:	005b      	lsls	r3, r3, #1
 800f560:	4413      	add	r3, r2
 800f562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f564:	429a      	cmp	r2, r3
 800f566:	d305      	bcc.n	800f574 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f56e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f570:	429a      	cmp	r2, r3
 800f572:	d903      	bls.n	800f57c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f574:	2301      	movs	r3, #1
 800f576:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f57a:	e1c1      	b.n	800f900 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f57e:	2200      	movs	r2, #0
 800f580:	60bb      	str	r3, [r7, #8]
 800f582:	60fa      	str	r2, [r7, #12]
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f588:	4a84      	ldr	r2, [pc, #528]	@ (800f79c <UART_SetConfig+0x930>)
 800f58a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f58e:	b29b      	uxth	r3, r3
 800f590:	2200      	movs	r2, #0
 800f592:	603b      	str	r3, [r7, #0]
 800f594:	607a      	str	r2, [r7, #4]
 800f596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f59a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f59e:	f7f0 fef7 	bl	8000390 <__aeabi_uldivmod>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	4610      	mov	r0, r2
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	f04f 0200 	mov.w	r2, #0
 800f5ae:	f04f 0300 	mov.w	r3, #0
 800f5b2:	020b      	lsls	r3, r1, #8
 800f5b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f5b8:	0202      	lsls	r2, r0, #8
 800f5ba:	6979      	ldr	r1, [r7, #20]
 800f5bc:	6849      	ldr	r1, [r1, #4]
 800f5be:	0849      	lsrs	r1, r1, #1
 800f5c0:	2000      	movs	r0, #0
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	eb12 0804 	adds.w	r8, r2, r4
 800f5ca:	eb43 0905 	adc.w	r9, r3, r5
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	469a      	mov	sl, r3
 800f5d6:	4693      	mov	fp, r2
 800f5d8:	4652      	mov	r2, sl
 800f5da:	465b      	mov	r3, fp
 800f5dc:	4640      	mov	r0, r8
 800f5de:	4649      	mov	r1, r9
 800f5e0:	f7f0 fed6 	bl	8000390 <__aeabi_uldivmod>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f5f2:	d308      	bcc.n	800f606 <UART_SetConfig+0x79a>
 800f5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5fa:	d204      	bcs.n	800f606 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f602:	60da      	str	r2, [r3, #12]
 800f604:	e17c      	b.n	800f900 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f606:	2301      	movs	r3, #1
 800f608:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f60c:	e178      	b.n	800f900 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	69db      	ldr	r3, [r3, #28]
 800f612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f616:	f040 80c5 	bne.w	800f7a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f61a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f61e:	2b20      	cmp	r3, #32
 800f620:	dc48      	bgt.n	800f6b4 <UART_SetConfig+0x848>
 800f622:	2b00      	cmp	r3, #0
 800f624:	db7b      	blt.n	800f71e <UART_SetConfig+0x8b2>
 800f626:	2b20      	cmp	r3, #32
 800f628:	d879      	bhi.n	800f71e <UART_SetConfig+0x8b2>
 800f62a:	a201      	add	r2, pc, #4	@ (adr r2, 800f630 <UART_SetConfig+0x7c4>)
 800f62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f630:	0800f6bb 	.word	0x0800f6bb
 800f634:	0800f6c3 	.word	0x0800f6c3
 800f638:	0800f71f 	.word	0x0800f71f
 800f63c:	0800f71f 	.word	0x0800f71f
 800f640:	0800f6cb 	.word	0x0800f6cb
 800f644:	0800f71f 	.word	0x0800f71f
 800f648:	0800f71f 	.word	0x0800f71f
 800f64c:	0800f71f 	.word	0x0800f71f
 800f650:	0800f6db 	.word	0x0800f6db
 800f654:	0800f71f 	.word	0x0800f71f
 800f658:	0800f71f 	.word	0x0800f71f
 800f65c:	0800f71f 	.word	0x0800f71f
 800f660:	0800f71f 	.word	0x0800f71f
 800f664:	0800f71f 	.word	0x0800f71f
 800f668:	0800f71f 	.word	0x0800f71f
 800f66c:	0800f71f 	.word	0x0800f71f
 800f670:	0800f6eb 	.word	0x0800f6eb
 800f674:	0800f71f 	.word	0x0800f71f
 800f678:	0800f71f 	.word	0x0800f71f
 800f67c:	0800f71f 	.word	0x0800f71f
 800f680:	0800f71f 	.word	0x0800f71f
 800f684:	0800f71f 	.word	0x0800f71f
 800f688:	0800f71f 	.word	0x0800f71f
 800f68c:	0800f71f 	.word	0x0800f71f
 800f690:	0800f71f 	.word	0x0800f71f
 800f694:	0800f71f 	.word	0x0800f71f
 800f698:	0800f71f 	.word	0x0800f71f
 800f69c:	0800f71f 	.word	0x0800f71f
 800f6a0:	0800f71f 	.word	0x0800f71f
 800f6a4:	0800f71f 	.word	0x0800f71f
 800f6a8:	0800f71f 	.word	0x0800f71f
 800f6ac:	0800f71f 	.word	0x0800f71f
 800f6b0:	0800f711 	.word	0x0800f711
 800f6b4:	2b40      	cmp	r3, #64	@ 0x40
 800f6b6:	d02e      	beq.n	800f716 <UART_SetConfig+0x8aa>
 800f6b8:	e031      	b.n	800f71e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6ba:	f7fb f985 	bl	800a9c8 <HAL_RCC_GetPCLK1Freq>
 800f6be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f6c0:	e033      	b.n	800f72a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f6c2:	f7fb f997 	bl	800a9f4 <HAL_RCC_GetPCLK2Freq>
 800f6c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f6c8:	e02f      	b.n	800f72a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fd f946 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6d8:	e027      	b.n	800f72a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6da:	f107 0318 	add.w	r3, r7, #24
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fd fa92 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f6e8:	e01f      	b.n	800f72a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6ea:	4b2d      	ldr	r3, [pc, #180]	@ (800f7a0 <UART_SetConfig+0x934>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f003 0320 	and.w	r3, r3, #32
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d009      	beq.n	800f70a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f6f6:	4b2a      	ldr	r3, [pc, #168]	@ (800f7a0 <UART_SetConfig+0x934>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	08db      	lsrs	r3, r3, #3
 800f6fc:	f003 0303 	and.w	r3, r3, #3
 800f700:	4a24      	ldr	r2, [pc, #144]	@ (800f794 <UART_SetConfig+0x928>)
 800f702:	fa22 f303 	lsr.w	r3, r2, r3
 800f706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f708:	e00f      	b.n	800f72a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f70a:	4b22      	ldr	r3, [pc, #136]	@ (800f794 <UART_SetConfig+0x928>)
 800f70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f70e:	e00c      	b.n	800f72a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f710:	4b21      	ldr	r3, [pc, #132]	@ (800f798 <UART_SetConfig+0x92c>)
 800f712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f714:	e009      	b.n	800f72a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f71c:	e005      	b.n	800f72a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f71e:	2300      	movs	r3, #0
 800f720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f722:	2301      	movs	r3, #1
 800f724:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f72a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	f000 80e7 	beq.w	800f900 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f736:	4a19      	ldr	r2, [pc, #100]	@ (800f79c <UART_SetConfig+0x930>)
 800f738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f73c:	461a      	mov	r2, r3
 800f73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f740:	fbb3 f3f2 	udiv	r3, r3, r2
 800f744:	005a      	lsls	r2, r3, #1
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	085b      	lsrs	r3, r3, #1
 800f74c:	441a      	add	r2, r3
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	fbb2 f3f3 	udiv	r3, r2, r3
 800f756:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f75a:	2b0f      	cmp	r3, #15
 800f75c:	d916      	bls.n	800f78c <UART_SetConfig+0x920>
 800f75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f764:	d212      	bcs.n	800f78c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f768:	b29b      	uxth	r3, r3
 800f76a:	f023 030f 	bic.w	r3, r3, #15
 800f76e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f772:	085b      	lsrs	r3, r3, #1
 800f774:	b29b      	uxth	r3, r3
 800f776:	f003 0307 	and.w	r3, r3, #7
 800f77a:	b29a      	uxth	r2, r3
 800f77c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f77e:	4313      	orrs	r3, r2
 800f780:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f788:	60da      	str	r2, [r3, #12]
 800f78a:	e0b9      	b.n	800f900 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f78c:	2301      	movs	r3, #1
 800f78e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f792:	e0b5      	b.n	800f900 <UART_SetConfig+0xa94>
 800f794:	03d09000 	.word	0x03d09000
 800f798:	003d0900 	.word	0x003d0900
 800f79c:	080160cc 	.word	0x080160cc
 800f7a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f7a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f7a8:	2b20      	cmp	r3, #32
 800f7aa:	dc49      	bgt.n	800f840 <UART_SetConfig+0x9d4>
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	db7c      	blt.n	800f8aa <UART_SetConfig+0xa3e>
 800f7b0:	2b20      	cmp	r3, #32
 800f7b2:	d87a      	bhi.n	800f8aa <UART_SetConfig+0xa3e>
 800f7b4:	a201      	add	r2, pc, #4	@ (adr r2, 800f7bc <UART_SetConfig+0x950>)
 800f7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7ba:	bf00      	nop
 800f7bc:	0800f847 	.word	0x0800f847
 800f7c0:	0800f84f 	.word	0x0800f84f
 800f7c4:	0800f8ab 	.word	0x0800f8ab
 800f7c8:	0800f8ab 	.word	0x0800f8ab
 800f7cc:	0800f857 	.word	0x0800f857
 800f7d0:	0800f8ab 	.word	0x0800f8ab
 800f7d4:	0800f8ab 	.word	0x0800f8ab
 800f7d8:	0800f8ab 	.word	0x0800f8ab
 800f7dc:	0800f867 	.word	0x0800f867
 800f7e0:	0800f8ab 	.word	0x0800f8ab
 800f7e4:	0800f8ab 	.word	0x0800f8ab
 800f7e8:	0800f8ab 	.word	0x0800f8ab
 800f7ec:	0800f8ab 	.word	0x0800f8ab
 800f7f0:	0800f8ab 	.word	0x0800f8ab
 800f7f4:	0800f8ab 	.word	0x0800f8ab
 800f7f8:	0800f8ab 	.word	0x0800f8ab
 800f7fc:	0800f877 	.word	0x0800f877
 800f800:	0800f8ab 	.word	0x0800f8ab
 800f804:	0800f8ab 	.word	0x0800f8ab
 800f808:	0800f8ab 	.word	0x0800f8ab
 800f80c:	0800f8ab 	.word	0x0800f8ab
 800f810:	0800f8ab 	.word	0x0800f8ab
 800f814:	0800f8ab 	.word	0x0800f8ab
 800f818:	0800f8ab 	.word	0x0800f8ab
 800f81c:	0800f8ab 	.word	0x0800f8ab
 800f820:	0800f8ab 	.word	0x0800f8ab
 800f824:	0800f8ab 	.word	0x0800f8ab
 800f828:	0800f8ab 	.word	0x0800f8ab
 800f82c:	0800f8ab 	.word	0x0800f8ab
 800f830:	0800f8ab 	.word	0x0800f8ab
 800f834:	0800f8ab 	.word	0x0800f8ab
 800f838:	0800f8ab 	.word	0x0800f8ab
 800f83c:	0800f89d 	.word	0x0800f89d
 800f840:	2b40      	cmp	r3, #64	@ 0x40
 800f842:	d02e      	beq.n	800f8a2 <UART_SetConfig+0xa36>
 800f844:	e031      	b.n	800f8aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f846:	f7fb f8bf 	bl	800a9c8 <HAL_RCC_GetPCLK1Freq>
 800f84a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f84c:	e033      	b.n	800f8b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f84e:	f7fb f8d1 	bl	800a9f4 <HAL_RCC_GetPCLK2Freq>
 800f852:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f854:	e02f      	b.n	800f8b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fd f880 	bl	800c960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f864:	e027      	b.n	800f8b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f866:	f107 0318 	add.w	r3, r7, #24
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7fd f9cc 	bl	800cc08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f874:	e01f      	b.n	800f8b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f876:	4b2d      	ldr	r3, [pc, #180]	@ (800f92c <UART_SetConfig+0xac0>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f003 0320 	and.w	r3, r3, #32
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d009      	beq.n	800f896 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f882:	4b2a      	ldr	r3, [pc, #168]	@ (800f92c <UART_SetConfig+0xac0>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	08db      	lsrs	r3, r3, #3
 800f888:	f003 0303 	and.w	r3, r3, #3
 800f88c:	4a28      	ldr	r2, [pc, #160]	@ (800f930 <UART_SetConfig+0xac4>)
 800f88e:	fa22 f303 	lsr.w	r3, r2, r3
 800f892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f894:	e00f      	b.n	800f8b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f896:	4b26      	ldr	r3, [pc, #152]	@ (800f930 <UART_SetConfig+0xac4>)
 800f898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f89a:	e00c      	b.n	800f8b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f89c:	4b25      	ldr	r3, [pc, #148]	@ (800f934 <UART_SetConfig+0xac8>)
 800f89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8a0:	e009      	b.n	800f8b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8a8:	e005      	b.n	800f8b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f8b4:	bf00      	nop
    }

    if (pclk != 0U)
 800f8b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d021      	beq.n	800f900 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8c0:	4a1d      	ldr	r2, [pc, #116]	@ (800f938 <UART_SetConfig+0xacc>)
 800f8c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	085b      	lsrs	r3, r3, #1
 800f8d4:	441a      	add	r2, r3
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e2:	2b0f      	cmp	r3, #15
 800f8e4:	d909      	bls.n	800f8fa <UART_SetConfig+0xa8e>
 800f8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8ec:	d205      	bcs.n	800f8fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	60da      	str	r2, [r3, #12]
 800f8f8:	e002      	b.n	800f900 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	2201      	movs	r2, #1
 800f904:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	2201      	movs	r2, #1
 800f90c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	2200      	movs	r2, #0
 800f914:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	2200      	movs	r2, #0
 800f91a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f91c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f920:	4618      	mov	r0, r3
 800f922:	3748      	adds	r7, #72	@ 0x48
 800f924:	46bd      	mov	sp, r7
 800f926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f92a:	bf00      	nop
 800f92c:	58024400 	.word	0x58024400
 800f930:	03d09000 	.word	0x03d09000
 800f934:	003d0900 	.word	0x003d0900
 800f938:	080160cc 	.word	0x080160cc

0800f93c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f948:	f003 0301 	and.w	r3, r3, #1
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d00a      	beq.n	800f966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	430a      	orrs	r2, r1
 800f964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f96a:	f003 0302 	and.w	r3, r3, #2
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d00a      	beq.n	800f988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	430a      	orrs	r2, r1
 800f986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f98c:	f003 0304 	and.w	r3, r3, #4
 800f990:	2b00      	cmp	r3, #0
 800f992:	d00a      	beq.n	800f9aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	430a      	orrs	r2, r1
 800f9a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9ae:	f003 0308 	and.w	r3, r3, #8
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d00a      	beq.n	800f9cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	430a      	orrs	r2, r1
 800f9ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9d0:	f003 0310 	and.w	r3, r3, #16
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00a      	beq.n	800f9ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	689b      	ldr	r3, [r3, #8]
 800f9de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	430a      	orrs	r2, r1
 800f9ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9f2:	f003 0320 	and.w	r3, r3, #32
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d00a      	beq.n	800fa10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	430a      	orrs	r2, r1
 800fa0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d01a      	beq.n	800fa52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	430a      	orrs	r2, r1
 800fa30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fa3a:	d10a      	bne.n	800fa52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	430a      	orrs	r2, r1
 800fa50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00a      	beq.n	800fa74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	430a      	orrs	r2, r1
 800fa72:	605a      	str	r2, [r3, #4]
  }
}
 800fa74:	bf00      	nop
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b098      	sub	sp, #96	@ 0x60
 800fa84:	af02      	add	r7, sp, #8
 800fa86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fa90:	f7f4 fa2a 	bl	8003ee8 <HAL_GetTick>
 800fa94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f003 0308 	and.w	r3, r3, #8
 800faa0:	2b08      	cmp	r3, #8
 800faa2:	d12f      	bne.n	800fb04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800faa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800faa8:	9300      	str	r3, [sp, #0]
 800faaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800faac:	2200      	movs	r2, #0
 800faae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 f88e 	bl	800fbd4 <UART_WaitOnFlagUntilTimeout>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d022      	beq.n	800fb04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac6:	e853 3f00 	ldrex	r3, [r3]
 800faca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800facc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800face:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fad2:	653b      	str	r3, [r7, #80]	@ 0x50
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	461a      	mov	r2, r3
 800fada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fadc:	647b      	str	r3, [r7, #68]	@ 0x44
 800fade:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fae0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fae4:	e841 2300 	strex	r3, r2, [r1]
 800fae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800faea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faec:	2b00      	cmp	r3, #0
 800faee:	d1e6      	bne.n	800fabe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2220      	movs	r2, #32
 800faf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2200      	movs	r2, #0
 800fafc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb00:	2303      	movs	r3, #3
 800fb02:	e063      	b.n	800fbcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f003 0304 	and.w	r3, r3, #4
 800fb0e:	2b04      	cmp	r3, #4
 800fb10:	d149      	bne.n	800fba6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb12:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fb16:	9300      	str	r3, [sp, #0]
 800fb18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f000 f857 	bl	800fbd4 <UART_WaitOnFlagUntilTimeout>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d03c      	beq.n	800fba6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb34:	e853 3f00 	ldrex	r3, [r3]
 800fb38:	623b      	str	r3, [r7, #32]
   return(result);
 800fb3a:	6a3b      	ldr	r3, [r7, #32]
 800fb3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	461a      	mov	r2, r3
 800fb48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb52:	e841 2300 	strex	r3, r2, [r1]
 800fb56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d1e6      	bne.n	800fb2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	3308      	adds	r3, #8
 800fb64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	e853 3f00 	ldrex	r3, [r3]
 800fb6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	f023 0301 	bic.w	r3, r3, #1
 800fb74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	3308      	adds	r3, #8
 800fb7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb7e:	61fa      	str	r2, [r7, #28]
 800fb80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb82:	69b9      	ldr	r1, [r7, #24]
 800fb84:	69fa      	ldr	r2, [r7, #28]
 800fb86:	e841 2300 	strex	r3, r2, [r1]
 800fb8a:	617b      	str	r3, [r7, #20]
   return(result);
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d1e5      	bne.n	800fb5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2220      	movs	r2, #32
 800fb96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fba2:	2303      	movs	r3, #3
 800fba4:	e012      	b.n	800fbcc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2220      	movs	r2, #32
 800fbaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2220      	movs	r2, #32
 800fbb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fbca:	2300      	movs	r3, #0
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3758      	adds	r7, #88	@ 0x58
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b084      	sub	sp, #16
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	603b      	str	r3, [r7, #0]
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbe4:	e049      	b.n	800fc7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fbe6:	69bb      	ldr	r3, [r7, #24]
 800fbe8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fbec:	d045      	beq.n	800fc7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fbee:	f7f4 f97b 	bl	8003ee8 <HAL_GetTick>
 800fbf2:	4602      	mov	r2, r0
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	1ad3      	subs	r3, r2, r3
 800fbf8:	69ba      	ldr	r2, [r7, #24]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d302      	bcc.n	800fc04 <UART_WaitOnFlagUntilTimeout+0x30>
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d101      	bne.n	800fc08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fc04:	2303      	movs	r3, #3
 800fc06:	e048      	b.n	800fc9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f003 0304 	and.w	r3, r3, #4
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d031      	beq.n	800fc7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	69db      	ldr	r3, [r3, #28]
 800fc1c:	f003 0308 	and.w	r3, r3, #8
 800fc20:	2b08      	cmp	r3, #8
 800fc22:	d110      	bne.n	800fc46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2208      	movs	r2, #8
 800fc2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800fc2c:	68f8      	ldr	r0, [r7, #12]
 800fc2e:	f000 f839 	bl	800fca4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2208      	movs	r2, #8
 800fc36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800fc42:	2301      	movs	r3, #1
 800fc44:	e029      	b.n	800fc9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	69db      	ldr	r3, [r3, #28]
 800fc4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fc50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fc54:	d111      	bne.n	800fc7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fc5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc60:	68f8      	ldr	r0, [r7, #12]
 800fc62:	f000 f81f 	bl	800fca4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2220      	movs	r2, #32
 800fc6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2200      	movs	r2, #0
 800fc72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fc76:	2303      	movs	r3, #3
 800fc78:	e00f      	b.n	800fc9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	69da      	ldr	r2, [r3, #28]
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	4013      	ands	r3, r2
 800fc84:	68ba      	ldr	r2, [r7, #8]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	bf0c      	ite	eq
 800fc8a:	2301      	moveq	r3, #1
 800fc8c:	2300      	movne	r3, #0
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	461a      	mov	r2, r3
 800fc92:	79fb      	ldrb	r3, [r7, #7]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d0a6      	beq.n	800fbe6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc98:	2300      	movs	r3, #0
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
	...

0800fca4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b095      	sub	sp, #84	@ 0x54
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcb4:	e853 3f00 	ldrex	r3, [r3]
 800fcb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fcc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcca:	643b      	str	r3, [r7, #64]	@ 0x40
 800fccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fcd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fcd2:	e841 2300 	strex	r3, r2, [r1]
 800fcd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d1e6      	bne.n	800fcac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	3308      	adds	r3, #8
 800fce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce6:	6a3b      	ldr	r3, [r7, #32]
 800fce8:	e853 3f00 	ldrex	r3, [r3]
 800fcec:	61fb      	str	r3, [r7, #28]
   return(result);
 800fcee:	69fa      	ldr	r2, [r7, #28]
 800fcf0:	4b1e      	ldr	r3, [pc, #120]	@ (800fd6c <UART_EndRxTransfer+0xc8>)
 800fcf2:	4013      	ands	r3, r2
 800fcf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	3308      	adds	r3, #8
 800fcfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fd00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fd04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd06:	e841 2300 	strex	r3, r2, [r1]
 800fd0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d1e5      	bne.n	800fcde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd16:	2b01      	cmp	r3, #1
 800fd18:	d118      	bne.n	800fd4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	e853 3f00 	ldrex	r3, [r3]
 800fd26:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	f023 0310 	bic.w	r3, r3, #16
 800fd2e:	647b      	str	r3, [r7, #68]	@ 0x44
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	461a      	mov	r2, r3
 800fd36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd38:	61bb      	str	r3, [r7, #24]
 800fd3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd3c:	6979      	ldr	r1, [r7, #20]
 800fd3e:	69ba      	ldr	r2, [r7, #24]
 800fd40:	e841 2300 	strex	r3, r2, [r1]
 800fd44:	613b      	str	r3, [r7, #16]
   return(result);
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d1e6      	bne.n	800fd1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2220      	movs	r2, #32
 800fd50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2200      	movs	r2, #0
 800fd58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fd60:	bf00      	nop
 800fd62:	3754      	adds	r7, #84	@ 0x54
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr
 800fd6c:	effffffe 	.word	0xeffffffe

0800fd70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2200      	movs	r2, #0
 800fd82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd8e:	68f8      	ldr	r0, [r7, #12]
 800fd90:	f7ff f856 	bl	800ee40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd94:	bf00      	nop
 800fd96:	3710      	adds	r7, #16
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b088      	sub	sp, #32
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	e853 3f00 	ldrex	r3, [r3]
 800fdb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fdb8:	61fb      	str	r3, [r7, #28]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	69fb      	ldr	r3, [r7, #28]
 800fdc2:	61bb      	str	r3, [r7, #24]
 800fdc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc6:	6979      	ldr	r1, [r7, #20]
 800fdc8:	69ba      	ldr	r2, [r7, #24]
 800fdca:	e841 2300 	strex	r3, r2, [r1]
 800fdce:	613b      	str	r3, [r7, #16]
   return(result);
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d1e6      	bne.n	800fda4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2220      	movs	r2, #32
 800fdda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f7ff f821 	bl	800ee2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fdea:	bf00      	nop
 800fdec:	3720      	adds	r7, #32
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fdf2:	b480      	push	{r7}
 800fdf4:	b083      	sub	sp, #12
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fdfa:	bf00      	nop
 800fdfc:	370c      	adds	r7, #12
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr

0800fe06 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fe06:	b480      	push	{r7}
 800fe08:	b083      	sub	sp, #12
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fe0e:	bf00      	nop
 800fe10:	370c      	adds	r7, #12
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr

0800fe1a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fe1a:	b480      	push	{r7}
 800fe1c:	b083      	sub	sp, #12
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fe22:	bf00      	nop
 800fe24:	370c      	adds	r7, #12
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr

0800fe2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fe2e:	b480      	push	{r7}
 800fe30:	b085      	sub	sp, #20
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	d101      	bne.n	800fe44 <HAL_UARTEx_DisableFifoMode+0x16>
 800fe40:	2302      	movs	r3, #2
 800fe42:	e027      	b.n	800fe94 <HAL_UARTEx_DisableFifoMode+0x66>
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2201      	movs	r2, #1
 800fe48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2224      	movs	r2, #36	@ 0x24
 800fe50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f022 0201 	bic.w	r2, r2, #1
 800fe6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fe72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2200      	movs	r2, #0
 800fe78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	68fa      	ldr	r2, [r7, #12]
 800fe80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2220      	movs	r2, #32
 800fe86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fe92:	2300      	movs	r3, #0
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3714      	adds	r7, #20
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr

0800fea0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b084      	sub	sp, #16
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d101      	bne.n	800feb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800feb4:	2302      	movs	r3, #2
 800feb6:	e02d      	b.n	800ff14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2201      	movs	r2, #1
 800febc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2224      	movs	r2, #36	@ 0x24
 800fec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	681a      	ldr	r2, [r3, #0]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f022 0201 	bic.w	r2, r2, #1
 800fede:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	689b      	ldr	r3, [r3, #8]
 800fee6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	430a      	orrs	r2, r1
 800fef2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f000 f84f 	bl	800ff98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	68fa      	ldr	r2, [r7, #12]
 800ff00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2220      	movs	r2, #32
 800ff06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff12:	2300      	movs	r3, #0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3710      	adds	r7, #16
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d101      	bne.n	800ff34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ff30:	2302      	movs	r3, #2
 800ff32:	e02d      	b.n	800ff90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2201      	movs	r2, #1
 800ff38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2224      	movs	r2, #36	@ 0x24
 800ff40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	681a      	ldr	r2, [r3, #0]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f022 0201 	bic.w	r2, r2, #1
 800ff5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	689b      	ldr	r3, [r3, #8]
 800ff62:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	683a      	ldr	r2, [r7, #0]
 800ff6c:	430a      	orrs	r2, r1
 800ff6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 f811 	bl	800ff98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	68fa      	ldr	r2, [r7, #12]
 800ff7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2220      	movs	r2, #32
 800ff82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff8e:	2300      	movs	r3, #0
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b085      	sub	sp, #20
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d108      	bne.n	800ffba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ffb8:	e031      	b.n	801001e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ffba:	2310      	movs	r3, #16
 800ffbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ffbe:	2310      	movs	r3, #16
 800ffc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	689b      	ldr	r3, [r3, #8]
 800ffc8:	0e5b      	lsrs	r3, r3, #25
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	f003 0307 	and.w	r3, r3, #7
 800ffd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	689b      	ldr	r3, [r3, #8]
 800ffd8:	0f5b      	lsrs	r3, r3, #29
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	f003 0307 	and.w	r3, r3, #7
 800ffe0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ffe2:	7bbb      	ldrb	r3, [r7, #14]
 800ffe4:	7b3a      	ldrb	r2, [r7, #12]
 800ffe6:	4911      	ldr	r1, [pc, #68]	@ (801002c <UARTEx_SetNbDataToProcess+0x94>)
 800ffe8:	5c8a      	ldrb	r2, [r1, r2]
 800ffea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ffee:	7b3a      	ldrb	r2, [r7, #12]
 800fff0:	490f      	ldr	r1, [pc, #60]	@ (8010030 <UARTEx_SetNbDataToProcess+0x98>)
 800fff2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fff4:	fb93 f3f2 	sdiv	r3, r3, r2
 800fff8:	b29a      	uxth	r2, r3
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010000:	7bfb      	ldrb	r3, [r7, #15]
 8010002:	7b7a      	ldrb	r2, [r7, #13]
 8010004:	4909      	ldr	r1, [pc, #36]	@ (801002c <UARTEx_SetNbDataToProcess+0x94>)
 8010006:	5c8a      	ldrb	r2, [r1, r2]
 8010008:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801000c:	7b7a      	ldrb	r2, [r7, #13]
 801000e:	4908      	ldr	r1, [pc, #32]	@ (8010030 <UARTEx_SetNbDataToProcess+0x98>)
 8010010:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010012:	fb93 f3f2 	sdiv	r3, r3, r2
 8010016:	b29a      	uxth	r2, r3
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801001e:	bf00      	nop
 8010020:	3714      	adds	r7, #20
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop
 801002c:	080160e4 	.word	0x080160e4
 8010030:	080160ec 	.word	0x080160ec

08010034 <__sprint_r>:
 8010034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010038:	6893      	ldr	r3, [r2, #8]
 801003a:	4680      	mov	r8, r0
 801003c:	460e      	mov	r6, r1
 801003e:	4614      	mov	r4, r2
 8010040:	b343      	cbz	r3, 8010094 <__sprint_r+0x60>
 8010042:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8010044:	049d      	lsls	r5, r3, #18
 8010046:	d522      	bpl.n	801008e <__sprint_r+0x5a>
 8010048:	6815      	ldr	r5, [r2, #0]
 801004a:	68a0      	ldr	r0, [r4, #8]
 801004c:	3508      	adds	r5, #8
 801004e:	b928      	cbnz	r0, 801005c <__sprint_r+0x28>
 8010050:	2300      	movs	r3, #0
 8010052:	60a3      	str	r3, [r4, #8]
 8010054:	2300      	movs	r3, #0
 8010056:	6063      	str	r3, [r4, #4]
 8010058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801005c:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8010060:	f04f 0900 	mov.w	r9, #0
 8010064:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8010068:	45ca      	cmp	sl, r9
 801006a:	dc05      	bgt.n	8010078 <__sprint_r+0x44>
 801006c:	68a3      	ldr	r3, [r4, #8]
 801006e:	f027 0703 	bic.w	r7, r7, #3
 8010072:	1bdb      	subs	r3, r3, r7
 8010074:	60a3      	str	r3, [r4, #8]
 8010076:	e7e8      	b.n	801004a <__sprint_r+0x16>
 8010078:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 801007c:	4632      	mov	r2, r6
 801007e:	4640      	mov	r0, r8
 8010080:	f001 f845 	bl	801110e <_fputwc_r>
 8010084:	1c43      	adds	r3, r0, #1
 8010086:	d0e3      	beq.n	8010050 <__sprint_r+0x1c>
 8010088:	f109 0901 	add.w	r9, r9, #1
 801008c:	e7ec      	b.n	8010068 <__sprint_r+0x34>
 801008e:	f000 fe3d 	bl	8010d0c <__sfvwrite_r>
 8010092:	e7dd      	b.n	8010050 <__sprint_r+0x1c>
 8010094:	4618      	mov	r0, r3
 8010096:	e7dd      	b.n	8010054 <__sprint_r+0x20>

08010098 <_vfiprintf_r>:
 8010098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801009c:	b0bb      	sub	sp, #236	@ 0xec
 801009e:	460f      	mov	r7, r1
 80100a0:	4693      	mov	fp, r2
 80100a2:	461c      	mov	r4, r3
 80100a4:	461d      	mov	r5, r3
 80100a6:	9000      	str	r0, [sp, #0]
 80100a8:	b118      	cbz	r0, 80100b2 <_vfiprintf_r+0x1a>
 80100aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80100ac:	b90b      	cbnz	r3, 80100b2 <_vfiprintf_r+0x1a>
 80100ae:	f000 fe15 	bl	8010cdc <__sinit>
 80100b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80100b4:	07db      	lsls	r3, r3, #31
 80100b6:	d405      	bmi.n	80100c4 <_vfiprintf_r+0x2c>
 80100b8:	89bb      	ldrh	r3, [r7, #12]
 80100ba:	059e      	lsls	r6, r3, #22
 80100bc:	d402      	bmi.n	80100c4 <_vfiprintf_r+0x2c>
 80100be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80100c0:	f001 f8ba 	bl	8011238 <__retarget_lock_acquire_recursive>
 80100c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80100c8:	0498      	lsls	r0, r3, #18
 80100ca:	d406      	bmi.n	80100da <_vfiprintf_r+0x42>
 80100cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80100d0:	81bb      	strh	r3, [r7, #12]
 80100d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80100d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80100d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80100da:	89bb      	ldrh	r3, [r7, #12]
 80100dc:	0719      	lsls	r1, r3, #28
 80100de:	d501      	bpl.n	80100e4 <_vfiprintf_r+0x4c>
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	b9ab      	cbnz	r3, 8010110 <_vfiprintf_r+0x78>
 80100e4:	9800      	ldr	r0, [sp, #0]
 80100e6:	4639      	mov	r1, r7
 80100e8:	f000 ff7a 	bl	8010fe0 <__swsetup_r>
 80100ec:	b180      	cbz	r0, 8010110 <_vfiprintf_r+0x78>
 80100ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80100f0:	07da      	lsls	r2, r3, #31
 80100f2:	d506      	bpl.n	8010102 <_vfiprintf_r+0x6a>
 80100f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80100f8:	9303      	str	r3, [sp, #12]
 80100fa:	9803      	ldr	r0, [sp, #12]
 80100fc:	b03b      	add	sp, #236	@ 0xec
 80100fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010102:	89bb      	ldrh	r3, [r7, #12]
 8010104:	059b      	lsls	r3, r3, #22
 8010106:	d4f5      	bmi.n	80100f4 <_vfiprintf_r+0x5c>
 8010108:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801010a:	f001 f896 	bl	801123a <__retarget_lock_release_recursive>
 801010e:	e7f1      	b.n	80100f4 <_vfiprintf_r+0x5c>
 8010110:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010114:	f003 021a 	and.w	r2, r3, #26
 8010118:	2a0a      	cmp	r2, #10
 801011a:	d114      	bne.n	8010146 <_vfiprintf_r+0xae>
 801011c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010120:	2a00      	cmp	r2, #0
 8010122:	db10      	blt.n	8010146 <_vfiprintf_r+0xae>
 8010124:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010126:	07d6      	lsls	r6, r2, #31
 8010128:	d404      	bmi.n	8010134 <_vfiprintf_r+0x9c>
 801012a:	059d      	lsls	r5, r3, #22
 801012c:	d402      	bmi.n	8010134 <_vfiprintf_r+0x9c>
 801012e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010130:	f001 f883 	bl	801123a <__retarget_lock_release_recursive>
 8010134:	9800      	ldr	r0, [sp, #0]
 8010136:	4623      	mov	r3, r4
 8010138:	465a      	mov	r2, fp
 801013a:	4639      	mov	r1, r7
 801013c:	b03b      	add	sp, #236	@ 0xec
 801013e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010142:	f000 bc31 	b.w	80109a8 <__sbprintf>
 8010146:	2300      	movs	r3, #0
 8010148:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 801014c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8010150:	ae11      	add	r6, sp, #68	@ 0x44
 8010152:	960e      	str	r6, [sp, #56]	@ 0x38
 8010154:	9307      	str	r3, [sp, #28]
 8010156:	9309      	str	r3, [sp, #36]	@ 0x24
 8010158:	9303      	str	r3, [sp, #12]
 801015a:	465b      	mov	r3, fp
 801015c:	461c      	mov	r4, r3
 801015e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010162:	b10a      	cbz	r2, 8010168 <_vfiprintf_r+0xd0>
 8010164:	2a25      	cmp	r2, #37	@ 0x25
 8010166:	d1f9      	bne.n	801015c <_vfiprintf_r+0xc4>
 8010168:	ebb4 080b 	subs.w	r8, r4, fp
 801016c:	d00d      	beq.n	801018a <_vfiprintf_r+0xf2>
 801016e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010170:	4443      	add	r3, r8
 8010172:	9310      	str	r3, [sp, #64]	@ 0x40
 8010174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010176:	3301      	adds	r3, #1
 8010178:	2b07      	cmp	r3, #7
 801017a:	e9c6 b800 	strd	fp, r8, [r6]
 801017e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010180:	dc75      	bgt.n	801026e <_vfiprintf_r+0x1d6>
 8010182:	3608      	adds	r6, #8
 8010184:	9b03      	ldr	r3, [sp, #12]
 8010186:	4443      	add	r3, r8
 8010188:	9303      	str	r3, [sp, #12]
 801018a:	7823      	ldrb	r3, [r4, #0]
 801018c:	2b00      	cmp	r3, #0
 801018e:	f000 83cd 	beq.w	801092c <_vfiprintf_r+0x894>
 8010192:	2300      	movs	r3, #0
 8010194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010198:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801019c:	3401      	adds	r4, #1
 801019e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80101a2:	469a      	mov	sl, r3
 80101a4:	46a3      	mov	fp, r4
 80101a6:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80101aa:	f1a3 0220 	sub.w	r2, r3, #32
 80101ae:	2a5a      	cmp	r2, #90	@ 0x5a
 80101b0:	f200 8316 	bhi.w	80107e0 <_vfiprintf_r+0x748>
 80101b4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80101b8:	0314009a 	.word	0x0314009a
 80101bc:	00a20314 	.word	0x00a20314
 80101c0:	03140314 	.word	0x03140314
 80101c4:	00820314 	.word	0x00820314
 80101c8:	03140314 	.word	0x03140314
 80101cc:	00af00a5 	.word	0x00af00a5
 80101d0:	00ac0314 	.word	0x00ac0314
 80101d4:	031400b1 	.word	0x031400b1
 80101d8:	00d000cd 	.word	0x00d000cd
 80101dc:	00d000d0 	.word	0x00d000d0
 80101e0:	00d000d0 	.word	0x00d000d0
 80101e4:	00d000d0 	.word	0x00d000d0
 80101e8:	00d000d0 	.word	0x00d000d0
 80101ec:	03140314 	.word	0x03140314
 80101f0:	03140314 	.word	0x03140314
 80101f4:	03140314 	.word	0x03140314
 80101f8:	03140314 	.word	0x03140314
 80101fc:	00f70314 	.word	0x00f70314
 8010200:	03140104 	.word	0x03140104
 8010204:	03140314 	.word	0x03140314
 8010208:	03140314 	.word	0x03140314
 801020c:	03140314 	.word	0x03140314
 8010210:	03140314 	.word	0x03140314
 8010214:	01520314 	.word	0x01520314
 8010218:	03140314 	.word	0x03140314
 801021c:	019a0314 	.word	0x019a0314
 8010220:	027a0314 	.word	0x027a0314
 8010224:	03140314 	.word	0x03140314
 8010228:	0314029a 	.word	0x0314029a
 801022c:	03140314 	.word	0x03140314
 8010230:	03140314 	.word	0x03140314
 8010234:	03140314 	.word	0x03140314
 8010238:	03140314 	.word	0x03140314
 801023c:	00f70314 	.word	0x00f70314
 8010240:	03140106 	.word	0x03140106
 8010244:	03140314 	.word	0x03140314
 8010248:	010600e0 	.word	0x010600e0
 801024c:	031400f1 	.word	0x031400f1
 8010250:	031400eb 	.word	0x031400eb
 8010254:	01540132 	.word	0x01540132
 8010258:	00f10189 	.word	0x00f10189
 801025c:	019a0314 	.word	0x019a0314
 8010260:	027c0098 	.word	0x027c0098
 8010264:	03140314 	.word	0x03140314
 8010268:	03140065 	.word	0x03140065
 801026c:	0098      	.short	0x0098
 801026e:	9800      	ldr	r0, [sp, #0]
 8010270:	aa0e      	add	r2, sp, #56	@ 0x38
 8010272:	4639      	mov	r1, r7
 8010274:	f7ff fede 	bl	8010034 <__sprint_r>
 8010278:	2800      	cmp	r0, #0
 801027a:	f040 8336 	bne.w	80108ea <_vfiprintf_r+0x852>
 801027e:	ae11      	add	r6, sp, #68	@ 0x44
 8010280:	e780      	b.n	8010184 <_vfiprintf_r+0xec>
 8010282:	4a99      	ldr	r2, [pc, #612]	@ (80104e8 <_vfiprintf_r+0x450>)
 8010284:	9205      	str	r2, [sp, #20]
 8010286:	f01a 0220 	ands.w	r2, sl, #32
 801028a:	f000 8231 	beq.w	80106f0 <_vfiprintf_r+0x658>
 801028e:	3507      	adds	r5, #7
 8010290:	f025 0507 	bic.w	r5, r5, #7
 8010294:	46a8      	mov	r8, r5
 8010296:	686d      	ldr	r5, [r5, #4]
 8010298:	f858 4b08 	ldr.w	r4, [r8], #8
 801029c:	f01a 0f01 	tst.w	sl, #1
 80102a0:	d009      	beq.n	80102b6 <_vfiprintf_r+0x21e>
 80102a2:	ea54 0205 	orrs.w	r2, r4, r5
 80102a6:	bf1f      	itttt	ne
 80102a8:	2230      	movne	r2, #48	@ 0x30
 80102aa:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80102ae:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80102b2:	f04a 0a02 	orrne.w	sl, sl, #2
 80102b6:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80102ba:	e112      	b.n	80104e2 <_vfiprintf_r+0x44a>
 80102bc:	9800      	ldr	r0, [sp, #0]
 80102be:	f000 ff8b 	bl	80111d8 <_localeconv_r>
 80102c2:	6843      	ldr	r3, [r0, #4]
 80102c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80102c6:	4618      	mov	r0, r3
 80102c8:	f7f0 f85a 	bl	8000380 <strlen>
 80102cc:	9007      	str	r0, [sp, #28]
 80102ce:	9800      	ldr	r0, [sp, #0]
 80102d0:	f000 ff82 	bl	80111d8 <_localeconv_r>
 80102d4:	6883      	ldr	r3, [r0, #8]
 80102d6:	9306      	str	r3, [sp, #24]
 80102d8:	9b07      	ldr	r3, [sp, #28]
 80102da:	b12b      	cbz	r3, 80102e8 <_vfiprintf_r+0x250>
 80102dc:	9b06      	ldr	r3, [sp, #24]
 80102de:	b11b      	cbz	r3, 80102e8 <_vfiprintf_r+0x250>
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	b10b      	cbz	r3, 80102e8 <_vfiprintf_r+0x250>
 80102e4:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 80102e8:	465c      	mov	r4, fp
 80102ea:	e75b      	b.n	80101a4 <_vfiprintf_r+0x10c>
 80102ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d1f9      	bne.n	80102e8 <_vfiprintf_r+0x250>
 80102f4:	2320      	movs	r3, #32
 80102f6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80102fa:	e7f5      	b.n	80102e8 <_vfiprintf_r+0x250>
 80102fc:	f04a 0a01 	orr.w	sl, sl, #1
 8010300:	e7f2      	b.n	80102e8 <_vfiprintf_r+0x250>
 8010302:	f855 3b04 	ldr.w	r3, [r5], #4
 8010306:	9302      	str	r3, [sp, #8]
 8010308:	2b00      	cmp	r3, #0
 801030a:	daed      	bge.n	80102e8 <_vfiprintf_r+0x250>
 801030c:	425b      	negs	r3, r3
 801030e:	9302      	str	r3, [sp, #8]
 8010310:	f04a 0a04 	orr.w	sl, sl, #4
 8010314:	e7e8      	b.n	80102e8 <_vfiprintf_r+0x250>
 8010316:	232b      	movs	r3, #43	@ 0x2b
 8010318:	e7ed      	b.n	80102f6 <_vfiprintf_r+0x25e>
 801031a:	465a      	mov	r2, fp
 801031c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8010320:	2b2a      	cmp	r3, #42	@ 0x2a
 8010322:	d112      	bne.n	801034a <_vfiprintf_r+0x2b2>
 8010324:	f855 3b04 	ldr.w	r3, [r5], #4
 8010328:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801032c:	9301      	str	r3, [sp, #4]
 801032e:	4693      	mov	fp, r2
 8010330:	e7da      	b.n	80102e8 <_vfiprintf_r+0x250>
 8010332:	9b01      	ldr	r3, [sp, #4]
 8010334:	fb00 1303 	mla	r3, r0, r3, r1
 8010338:	9301      	str	r3, [sp, #4]
 801033a:	f812 3b01 	ldrb.w	r3, [r2], #1
 801033e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8010342:	2909      	cmp	r1, #9
 8010344:	d9f5      	bls.n	8010332 <_vfiprintf_r+0x29a>
 8010346:	4693      	mov	fp, r2
 8010348:	e72f      	b.n	80101aa <_vfiprintf_r+0x112>
 801034a:	2100      	movs	r1, #0
 801034c:	9101      	str	r1, [sp, #4]
 801034e:	200a      	movs	r0, #10
 8010350:	e7f5      	b.n	801033e <_vfiprintf_r+0x2a6>
 8010352:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8010356:	e7c7      	b.n	80102e8 <_vfiprintf_r+0x250>
 8010358:	2100      	movs	r1, #0
 801035a:	465a      	mov	r2, fp
 801035c:	9102      	str	r1, [sp, #8]
 801035e:	200a      	movs	r0, #10
 8010360:	9902      	ldr	r1, [sp, #8]
 8010362:	3b30      	subs	r3, #48	@ 0x30
 8010364:	fb00 3301 	mla	r3, r0, r1, r3
 8010368:	9302      	str	r3, [sp, #8]
 801036a:	f812 3b01 	ldrb.w	r3, [r2], #1
 801036e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8010372:	2909      	cmp	r1, #9
 8010374:	d9f4      	bls.n	8010360 <_vfiprintf_r+0x2c8>
 8010376:	e7e6      	b.n	8010346 <_vfiprintf_r+0x2ae>
 8010378:	f89b 3000 	ldrb.w	r3, [fp]
 801037c:	2b68      	cmp	r3, #104	@ 0x68
 801037e:	bf06      	itte	eq
 8010380:	f10b 0b01 	addeq.w	fp, fp, #1
 8010384:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8010388:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 801038c:	e7ac      	b.n	80102e8 <_vfiprintf_r+0x250>
 801038e:	f89b 3000 	ldrb.w	r3, [fp]
 8010392:	2b6c      	cmp	r3, #108	@ 0x6c
 8010394:	d104      	bne.n	80103a0 <_vfiprintf_r+0x308>
 8010396:	f10b 0b01 	add.w	fp, fp, #1
 801039a:	f04a 0a20 	orr.w	sl, sl, #32
 801039e:	e7a3      	b.n	80102e8 <_vfiprintf_r+0x250>
 80103a0:	f04a 0a10 	orr.w	sl, sl, #16
 80103a4:	e7a0      	b.n	80102e8 <_vfiprintf_r+0x250>
 80103a6:	46a8      	mov	r8, r5
 80103a8:	2400      	movs	r4, #0
 80103aa:	f858 3b04 	ldr.w	r3, [r8], #4
 80103ae:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80103b2:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80103b6:	2301      	movs	r3, #1
 80103b8:	9301      	str	r3, [sp, #4]
 80103ba:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 80103be:	e0ab      	b.n	8010518 <_vfiprintf_r+0x480>
 80103c0:	f04a 0a10 	orr.w	sl, sl, #16
 80103c4:	f01a 0f20 	tst.w	sl, #32
 80103c8:	d011      	beq.n	80103ee <_vfiprintf_r+0x356>
 80103ca:	3507      	adds	r5, #7
 80103cc:	f025 0507 	bic.w	r5, r5, #7
 80103d0:	46a8      	mov	r8, r5
 80103d2:	686d      	ldr	r5, [r5, #4]
 80103d4:	f858 4b08 	ldr.w	r4, [r8], #8
 80103d8:	2d00      	cmp	r5, #0
 80103da:	da06      	bge.n	80103ea <_vfiprintf_r+0x352>
 80103dc:	4264      	negs	r4, r4
 80103de:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80103e2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80103e6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80103ea:	2301      	movs	r3, #1
 80103ec:	e048      	b.n	8010480 <_vfiprintf_r+0x3e8>
 80103ee:	46a8      	mov	r8, r5
 80103f0:	f01a 0f10 	tst.w	sl, #16
 80103f4:	f858 5b04 	ldr.w	r5, [r8], #4
 80103f8:	d002      	beq.n	8010400 <_vfiprintf_r+0x368>
 80103fa:	462c      	mov	r4, r5
 80103fc:	17ed      	asrs	r5, r5, #31
 80103fe:	e7eb      	b.n	80103d8 <_vfiprintf_r+0x340>
 8010400:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8010404:	d003      	beq.n	801040e <_vfiprintf_r+0x376>
 8010406:	b22c      	sxth	r4, r5
 8010408:	f345 35c0 	sbfx	r5, r5, #15, #1
 801040c:	e7e4      	b.n	80103d8 <_vfiprintf_r+0x340>
 801040e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8010412:	d0f2      	beq.n	80103fa <_vfiprintf_r+0x362>
 8010414:	b26c      	sxtb	r4, r5
 8010416:	f345 15c0 	sbfx	r5, r5, #7, #1
 801041a:	e7dd      	b.n	80103d8 <_vfiprintf_r+0x340>
 801041c:	f01a 0f20 	tst.w	sl, #32
 8010420:	d007      	beq.n	8010432 <_vfiprintf_r+0x39a>
 8010422:	9a03      	ldr	r2, [sp, #12]
 8010424:	682b      	ldr	r3, [r5, #0]
 8010426:	9903      	ldr	r1, [sp, #12]
 8010428:	17d2      	asrs	r2, r2, #31
 801042a:	e9c3 1200 	strd	r1, r2, [r3]
 801042e:	3504      	adds	r5, #4
 8010430:	e693      	b.n	801015a <_vfiprintf_r+0xc2>
 8010432:	f01a 0f10 	tst.w	sl, #16
 8010436:	d003      	beq.n	8010440 <_vfiprintf_r+0x3a8>
 8010438:	682b      	ldr	r3, [r5, #0]
 801043a:	9a03      	ldr	r2, [sp, #12]
 801043c:	601a      	str	r2, [r3, #0]
 801043e:	e7f6      	b.n	801042e <_vfiprintf_r+0x396>
 8010440:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8010444:	d003      	beq.n	801044e <_vfiprintf_r+0x3b6>
 8010446:	682b      	ldr	r3, [r5, #0]
 8010448:	9a03      	ldr	r2, [sp, #12]
 801044a:	801a      	strh	r2, [r3, #0]
 801044c:	e7ef      	b.n	801042e <_vfiprintf_r+0x396>
 801044e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8010452:	d0f1      	beq.n	8010438 <_vfiprintf_r+0x3a0>
 8010454:	682b      	ldr	r3, [r5, #0]
 8010456:	9a03      	ldr	r2, [sp, #12]
 8010458:	701a      	strb	r2, [r3, #0]
 801045a:	e7e8      	b.n	801042e <_vfiprintf_r+0x396>
 801045c:	f04a 0a10 	orr.w	sl, sl, #16
 8010460:	f01a 0320 	ands.w	r3, sl, #32
 8010464:	d01f      	beq.n	80104a6 <_vfiprintf_r+0x40e>
 8010466:	3507      	adds	r5, #7
 8010468:	f025 0507 	bic.w	r5, r5, #7
 801046c:	46a8      	mov	r8, r5
 801046e:	686d      	ldr	r5, [r5, #4]
 8010470:	f858 4b08 	ldr.w	r4, [r8], #8
 8010474:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8010478:	2300      	movs	r3, #0
 801047a:	2200      	movs	r2, #0
 801047c:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8010480:	9a01      	ldr	r2, [sp, #4]
 8010482:	3201      	adds	r2, #1
 8010484:	f000 825f 	beq.w	8010946 <_vfiprintf_r+0x8ae>
 8010488:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 801048c:	9204      	str	r2, [sp, #16]
 801048e:	ea54 0205 	orrs.w	r2, r4, r5
 8010492:	f040 825e 	bne.w	8010952 <_vfiprintf_r+0x8ba>
 8010496:	9a01      	ldr	r2, [sp, #4]
 8010498:	2a00      	cmp	r2, #0
 801049a:	f000 8198 	beq.w	80107ce <_vfiprintf_r+0x736>
 801049e:	2b01      	cmp	r3, #1
 80104a0:	f040 825a 	bne.w	8010958 <_vfiprintf_r+0x8c0>
 80104a4:	e13b      	b.n	801071e <_vfiprintf_r+0x686>
 80104a6:	46a8      	mov	r8, r5
 80104a8:	f01a 0510 	ands.w	r5, sl, #16
 80104ac:	f858 4b04 	ldr.w	r4, [r8], #4
 80104b0:	d001      	beq.n	80104b6 <_vfiprintf_r+0x41e>
 80104b2:	461d      	mov	r5, r3
 80104b4:	e7de      	b.n	8010474 <_vfiprintf_r+0x3dc>
 80104b6:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80104ba:	d001      	beq.n	80104c0 <_vfiprintf_r+0x428>
 80104bc:	b2a4      	uxth	r4, r4
 80104be:	e7d9      	b.n	8010474 <_vfiprintf_r+0x3dc>
 80104c0:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80104c4:	d0d6      	beq.n	8010474 <_vfiprintf_r+0x3dc>
 80104c6:	b2e4      	uxtb	r4, r4
 80104c8:	e7f3      	b.n	80104b2 <_vfiprintf_r+0x41a>
 80104ca:	46a8      	mov	r8, r5
 80104cc:	f647 0330 	movw	r3, #30768	@ 0x7830
 80104d0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80104d4:	f858 4b04 	ldr.w	r4, [r8], #4
 80104d8:	4b03      	ldr	r3, [pc, #12]	@ (80104e8 <_vfiprintf_r+0x450>)
 80104da:	9305      	str	r3, [sp, #20]
 80104dc:	2500      	movs	r5, #0
 80104de:	f04a 0a02 	orr.w	sl, sl, #2
 80104e2:	2302      	movs	r3, #2
 80104e4:	e7c9      	b.n	801047a <_vfiprintf_r+0x3e2>
 80104e6:	bf00      	nop
 80104e8:	08016105 	.word	0x08016105
 80104ec:	9b01      	ldr	r3, [sp, #4]
 80104ee:	46a8      	mov	r8, r5
 80104f0:	1c5c      	adds	r4, r3, #1
 80104f2:	f04f 0500 	mov.w	r5, #0
 80104f6:	f858 9b04 	ldr.w	r9, [r8], #4
 80104fa:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 80104fe:	f000 80d0 	beq.w	80106a2 <_vfiprintf_r+0x60a>
 8010502:	461a      	mov	r2, r3
 8010504:	4629      	mov	r1, r5
 8010506:	4648      	mov	r0, r9
 8010508:	f7ef feea 	bl	80002e0 <memchr>
 801050c:	4604      	mov	r4, r0
 801050e:	b118      	cbz	r0, 8010518 <_vfiprintf_r+0x480>
 8010510:	eba0 0309 	sub.w	r3, r0, r9
 8010514:	9301      	str	r3, [sp, #4]
 8010516:	462c      	mov	r4, r5
 8010518:	9b01      	ldr	r3, [sp, #4]
 801051a:	42a3      	cmp	r3, r4
 801051c:	bfb8      	it	lt
 801051e:	4623      	movlt	r3, r4
 8010520:	9304      	str	r3, [sp, #16]
 8010522:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8010526:	b113      	cbz	r3, 801052e <_vfiprintf_r+0x496>
 8010528:	9b04      	ldr	r3, [sp, #16]
 801052a:	3301      	adds	r3, #1
 801052c:	9304      	str	r3, [sp, #16]
 801052e:	f01a 0302 	ands.w	r3, sl, #2
 8010532:	9308      	str	r3, [sp, #32]
 8010534:	bf1e      	ittt	ne
 8010536:	9b04      	ldrne	r3, [sp, #16]
 8010538:	3302      	addne	r3, #2
 801053a:	9304      	strne	r3, [sp, #16]
 801053c:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8010540:	930a      	str	r3, [sp, #40]	@ 0x28
 8010542:	d11f      	bne.n	8010584 <_vfiprintf_r+0x4ec>
 8010544:	9b02      	ldr	r3, [sp, #8]
 8010546:	9a04      	ldr	r2, [sp, #16]
 8010548:	1a9d      	subs	r5, r3, r2
 801054a:	2d00      	cmp	r5, #0
 801054c:	dd1a      	ble.n	8010584 <_vfiprintf_r+0x4ec>
 801054e:	4ba9      	ldr	r3, [pc, #676]	@ (80107f4 <_vfiprintf_r+0x75c>)
 8010550:	6033      	str	r3, [r6, #0]
 8010552:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8010556:	2d10      	cmp	r5, #16
 8010558:	f102 0201 	add.w	r2, r2, #1
 801055c:	f106 0008 	add.w	r0, r6, #8
 8010560:	f300 814e 	bgt.w	8010800 <_vfiprintf_r+0x768>
 8010564:	6075      	str	r5, [r6, #4]
 8010566:	2a07      	cmp	r2, #7
 8010568:	4465      	add	r5, ip
 801056a:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 801056e:	f340 815a 	ble.w	8010826 <_vfiprintf_r+0x78e>
 8010572:	9800      	ldr	r0, [sp, #0]
 8010574:	aa0e      	add	r2, sp, #56	@ 0x38
 8010576:	4639      	mov	r1, r7
 8010578:	f7ff fd5c 	bl	8010034 <__sprint_r>
 801057c:	2800      	cmp	r0, #0
 801057e:	f040 81b4 	bne.w	80108ea <_vfiprintf_r+0x852>
 8010582:	ae11      	add	r6, sp, #68	@ 0x44
 8010584:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8010588:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801058c:	b161      	cbz	r1, 80105a8 <_vfiprintf_r+0x510>
 801058e:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8010592:	3301      	adds	r3, #1
 8010594:	6031      	str	r1, [r6, #0]
 8010596:	2101      	movs	r1, #1
 8010598:	440a      	add	r2, r1
 801059a:	2b07      	cmp	r3, #7
 801059c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80105a0:	6071      	str	r1, [r6, #4]
 80105a2:	f300 8142 	bgt.w	801082a <_vfiprintf_r+0x792>
 80105a6:	3608      	adds	r6, #8
 80105a8:	9908      	ldr	r1, [sp, #32]
 80105aa:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80105ae:	b159      	cbz	r1, 80105c8 <_vfiprintf_r+0x530>
 80105b0:	a90d      	add	r1, sp, #52	@ 0x34
 80105b2:	3301      	adds	r3, #1
 80105b4:	6031      	str	r1, [r6, #0]
 80105b6:	2102      	movs	r1, #2
 80105b8:	440a      	add	r2, r1
 80105ba:	2b07      	cmp	r3, #7
 80105bc:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80105c0:	6071      	str	r1, [r6, #4]
 80105c2:	f300 813b 	bgt.w	801083c <_vfiprintf_r+0x7a4>
 80105c6:	3608      	adds	r6, #8
 80105c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105ca:	2b80      	cmp	r3, #128	@ 0x80
 80105cc:	d11f      	bne.n	801060e <_vfiprintf_r+0x576>
 80105ce:	9b02      	ldr	r3, [sp, #8]
 80105d0:	9a04      	ldr	r2, [sp, #16]
 80105d2:	1a9d      	subs	r5, r3, r2
 80105d4:	2d00      	cmp	r5, #0
 80105d6:	dd1a      	ble.n	801060e <_vfiprintf_r+0x576>
 80105d8:	4b87      	ldr	r3, [pc, #540]	@ (80107f8 <_vfiprintf_r+0x760>)
 80105da:	6033      	str	r3, [r6, #0]
 80105dc:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80105e0:	2d10      	cmp	r5, #16
 80105e2:	f102 0201 	add.w	r2, r2, #1
 80105e6:	f106 0008 	add.w	r0, r6, #8
 80105ea:	f300 8130 	bgt.w	801084e <_vfiprintf_r+0x7b6>
 80105ee:	6075      	str	r5, [r6, #4]
 80105f0:	2a07      	cmp	r2, #7
 80105f2:	4465      	add	r5, ip
 80105f4:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80105f8:	f340 813c 	ble.w	8010874 <_vfiprintf_r+0x7dc>
 80105fc:	9800      	ldr	r0, [sp, #0]
 80105fe:	aa0e      	add	r2, sp, #56	@ 0x38
 8010600:	4639      	mov	r1, r7
 8010602:	f7ff fd17 	bl	8010034 <__sprint_r>
 8010606:	2800      	cmp	r0, #0
 8010608:	f040 816f 	bne.w	80108ea <_vfiprintf_r+0x852>
 801060c:	ae11      	add	r6, sp, #68	@ 0x44
 801060e:	9b01      	ldr	r3, [sp, #4]
 8010610:	1ae4      	subs	r4, r4, r3
 8010612:	2c00      	cmp	r4, #0
 8010614:	dd1a      	ble.n	801064c <_vfiprintf_r+0x5b4>
 8010616:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801061a:	4877      	ldr	r0, [pc, #476]	@ (80107f8 <_vfiprintf_r+0x760>)
 801061c:	6030      	str	r0, [r6, #0]
 801061e:	2c10      	cmp	r4, #16
 8010620:	f103 0301 	add.w	r3, r3, #1
 8010624:	f106 0108 	add.w	r1, r6, #8
 8010628:	f300 8126 	bgt.w	8010878 <_vfiprintf_r+0x7e0>
 801062c:	6074      	str	r4, [r6, #4]
 801062e:	2b07      	cmp	r3, #7
 8010630:	4414      	add	r4, r2
 8010632:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8010636:	f340 8130 	ble.w	801089a <_vfiprintf_r+0x802>
 801063a:	9800      	ldr	r0, [sp, #0]
 801063c:	aa0e      	add	r2, sp, #56	@ 0x38
 801063e:	4639      	mov	r1, r7
 8010640:	f7ff fcf8 	bl	8010034 <__sprint_r>
 8010644:	2800      	cmp	r0, #0
 8010646:	f040 8150 	bne.w	80108ea <_vfiprintf_r+0x852>
 801064a:	ae11      	add	r6, sp, #68	@ 0x44
 801064c:	9b01      	ldr	r3, [sp, #4]
 801064e:	9a01      	ldr	r2, [sp, #4]
 8010650:	6073      	str	r3, [r6, #4]
 8010652:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010654:	f8c6 9000 	str.w	r9, [r6]
 8010658:	4413      	add	r3, r2
 801065a:	9310      	str	r3, [sp, #64]	@ 0x40
 801065c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801065e:	3301      	adds	r3, #1
 8010660:	2b07      	cmp	r3, #7
 8010662:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010664:	f300 811b 	bgt.w	801089e <_vfiprintf_r+0x806>
 8010668:	f106 0308 	add.w	r3, r6, #8
 801066c:	f01a 0f04 	tst.w	sl, #4
 8010670:	f040 811d 	bne.w	80108ae <_vfiprintf_r+0x816>
 8010674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010678:	9904      	ldr	r1, [sp, #16]
 801067a:	428a      	cmp	r2, r1
 801067c:	bfac      	ite	ge
 801067e:	189b      	addge	r3, r3, r2
 8010680:	185b      	addlt	r3, r3, r1
 8010682:	9303      	str	r3, [sp, #12]
 8010684:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010686:	b13b      	cbz	r3, 8010698 <_vfiprintf_r+0x600>
 8010688:	9800      	ldr	r0, [sp, #0]
 801068a:	aa0e      	add	r2, sp, #56	@ 0x38
 801068c:	4639      	mov	r1, r7
 801068e:	f7ff fcd1 	bl	8010034 <__sprint_r>
 8010692:	2800      	cmp	r0, #0
 8010694:	f040 8129 	bne.w	80108ea <_vfiprintf_r+0x852>
 8010698:	2300      	movs	r3, #0
 801069a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801069c:	4645      	mov	r5, r8
 801069e:	ae11      	add	r6, sp, #68	@ 0x44
 80106a0:	e55b      	b.n	801015a <_vfiprintf_r+0xc2>
 80106a2:	4648      	mov	r0, r9
 80106a4:	f7ef fe6c 	bl	8000380 <strlen>
 80106a8:	9001      	str	r0, [sp, #4]
 80106aa:	e734      	b.n	8010516 <_vfiprintf_r+0x47e>
 80106ac:	f04a 0a10 	orr.w	sl, sl, #16
 80106b0:	f01a 0320 	ands.w	r3, sl, #32
 80106b4:	d008      	beq.n	80106c8 <_vfiprintf_r+0x630>
 80106b6:	3507      	adds	r5, #7
 80106b8:	f025 0507 	bic.w	r5, r5, #7
 80106bc:	46a8      	mov	r8, r5
 80106be:	686d      	ldr	r5, [r5, #4]
 80106c0:	f858 4b08 	ldr.w	r4, [r8], #8
 80106c4:	2301      	movs	r3, #1
 80106c6:	e6d8      	b.n	801047a <_vfiprintf_r+0x3e2>
 80106c8:	46a8      	mov	r8, r5
 80106ca:	f01a 0510 	ands.w	r5, sl, #16
 80106ce:	f858 4b04 	ldr.w	r4, [r8], #4
 80106d2:	d001      	beq.n	80106d8 <_vfiprintf_r+0x640>
 80106d4:	461d      	mov	r5, r3
 80106d6:	e7f5      	b.n	80106c4 <_vfiprintf_r+0x62c>
 80106d8:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80106dc:	d001      	beq.n	80106e2 <_vfiprintf_r+0x64a>
 80106de:	b2a4      	uxth	r4, r4
 80106e0:	e7f0      	b.n	80106c4 <_vfiprintf_r+0x62c>
 80106e2:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80106e6:	d0ed      	beq.n	80106c4 <_vfiprintf_r+0x62c>
 80106e8:	b2e4      	uxtb	r4, r4
 80106ea:	e7f3      	b.n	80106d4 <_vfiprintf_r+0x63c>
 80106ec:	4a43      	ldr	r2, [pc, #268]	@ (80107fc <_vfiprintf_r+0x764>)
 80106ee:	e5c9      	b.n	8010284 <_vfiprintf_r+0x1ec>
 80106f0:	46a8      	mov	r8, r5
 80106f2:	f01a 0510 	ands.w	r5, sl, #16
 80106f6:	f858 4b04 	ldr.w	r4, [r8], #4
 80106fa:	d001      	beq.n	8010700 <_vfiprintf_r+0x668>
 80106fc:	4615      	mov	r5, r2
 80106fe:	e5cd      	b.n	801029c <_vfiprintf_r+0x204>
 8010700:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8010704:	d001      	beq.n	801070a <_vfiprintf_r+0x672>
 8010706:	b2a4      	uxth	r4, r4
 8010708:	e5c8      	b.n	801029c <_vfiprintf_r+0x204>
 801070a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801070e:	f43f adc5 	beq.w	801029c <_vfiprintf_r+0x204>
 8010712:	b2e4      	uxtb	r4, r4
 8010714:	e7f2      	b.n	80106fc <_vfiprintf_r+0x664>
 8010716:	2c0a      	cmp	r4, #10
 8010718:	f175 0300 	sbcs.w	r3, r5, #0
 801071c:	d206      	bcs.n	801072c <_vfiprintf_r+0x694>
 801071e:	3430      	adds	r4, #48	@ 0x30
 8010720:	b2e4      	uxtb	r4, r4
 8010722:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8010726:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 801072a:	e131      	b.n	8010990 <_vfiprintf_r+0x8f8>
 801072c:	ab3a      	add	r3, sp, #232	@ 0xe8
 801072e:	9308      	str	r3, [sp, #32]
 8010730:	9b04      	ldr	r3, [sp, #16]
 8010732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8010736:	f04f 0a00 	mov.w	sl, #0
 801073a:	930a      	str	r3, [sp, #40]	@ 0x28
 801073c:	220a      	movs	r2, #10
 801073e:	2300      	movs	r3, #0
 8010740:	4620      	mov	r0, r4
 8010742:	4629      	mov	r1, r5
 8010744:	f7ef fe24 	bl	8000390 <__aeabi_uldivmod>
 8010748:	460b      	mov	r3, r1
 801074a:	9908      	ldr	r1, [sp, #32]
 801074c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801074e:	3230      	adds	r2, #48	@ 0x30
 8010750:	f801 2c01 	strb.w	r2, [r1, #-1]
 8010754:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010756:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 801075a:	f10a 0a01 	add.w	sl, sl, #1
 801075e:	b1e2      	cbz	r2, 801079a <_vfiprintf_r+0x702>
 8010760:	9a06      	ldr	r2, [sp, #24]
 8010762:	7812      	ldrb	r2, [r2, #0]
 8010764:	4552      	cmp	r2, sl
 8010766:	d118      	bne.n	801079a <_vfiprintf_r+0x702>
 8010768:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 801076c:	d015      	beq.n	801079a <_vfiprintf_r+0x702>
 801076e:	2c0a      	cmp	r4, #10
 8010770:	f175 0200 	sbcs.w	r2, r5, #0
 8010774:	d311      	bcc.n	801079a <_vfiprintf_r+0x702>
 8010776:	9308      	str	r3, [sp, #32]
 8010778:	9b07      	ldr	r3, [sp, #28]
 801077a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801077c:	eba9 0903 	sub.w	r9, r9, r3
 8010780:	461a      	mov	r2, r3
 8010782:	4648      	mov	r0, r9
 8010784:	f000 fd0e 	bl	80111a4 <strncpy>
 8010788:	9b06      	ldr	r3, [sp, #24]
 801078a:	785a      	ldrb	r2, [r3, #1]
 801078c:	9b08      	ldr	r3, [sp, #32]
 801078e:	b172      	cbz	r2, 80107ae <_vfiprintf_r+0x716>
 8010790:	9a06      	ldr	r2, [sp, #24]
 8010792:	3201      	adds	r2, #1
 8010794:	9206      	str	r2, [sp, #24]
 8010796:	f04f 0a00 	mov.w	sl, #0
 801079a:	2c0a      	cmp	r4, #10
 801079c:	f175 0500 	sbcs.w	r5, r5, #0
 80107a0:	f0c0 80f6 	bcc.w	8010990 <_vfiprintf_r+0x8f8>
 80107a4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80107a6:	f8cd 9020 	str.w	r9, [sp, #32]
 80107aa:	461d      	mov	r5, r3
 80107ac:	e7c6      	b.n	801073c <_vfiprintf_r+0x6a4>
 80107ae:	4692      	mov	sl, r2
 80107b0:	e7f3      	b.n	801079a <_vfiprintf_r+0x702>
 80107b2:	f004 030f 	and.w	r3, r4, #15
 80107b6:	9a05      	ldr	r2, [sp, #20]
 80107b8:	0924      	lsrs	r4, r4, #4
 80107ba:	5cd3      	ldrb	r3, [r2, r3]
 80107bc:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80107c0:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 80107c4:	092d      	lsrs	r5, r5, #4
 80107c6:	ea54 0305 	orrs.w	r3, r4, r5
 80107ca:	d1f2      	bne.n	80107b2 <_vfiprintf_r+0x71a>
 80107cc:	e0e0      	b.n	8010990 <_vfiprintf_r+0x8f8>
 80107ce:	b923      	cbnz	r3, 80107da <_vfiprintf_r+0x742>
 80107d0:	f01a 0f01 	tst.w	sl, #1
 80107d4:	d001      	beq.n	80107da <_vfiprintf_r+0x742>
 80107d6:	2430      	movs	r4, #48	@ 0x30
 80107d8:	e7a3      	b.n	8010722 <_vfiprintf_r+0x68a>
 80107da:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80107de:	e0d7      	b.n	8010990 <_vfiprintf_r+0x8f8>
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	f000 80a3 	beq.w	801092c <_vfiprintf_r+0x894>
 80107e6:	2400      	movs	r4, #0
 80107e8:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80107ec:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80107f0:	46a8      	mov	r8, r5
 80107f2:	e5e0      	b.n	80103b6 <_vfiprintf_r+0x31e>
 80107f4:	08016126 	.word	0x08016126
 80107f8:	08016116 	.word	0x08016116
 80107fc:	080160f4 	.word	0x080160f4
 8010800:	2110      	movs	r1, #16
 8010802:	6071      	str	r1, [r6, #4]
 8010804:	2a07      	cmp	r2, #7
 8010806:	4461      	add	r1, ip
 8010808:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801080c:	dd08      	ble.n	8010820 <_vfiprintf_r+0x788>
 801080e:	9800      	ldr	r0, [sp, #0]
 8010810:	aa0e      	add	r2, sp, #56	@ 0x38
 8010812:	4639      	mov	r1, r7
 8010814:	f7ff fc0e 	bl	8010034 <__sprint_r>
 8010818:	2800      	cmp	r0, #0
 801081a:	d166      	bne.n	80108ea <_vfiprintf_r+0x852>
 801081c:	4b60      	ldr	r3, [pc, #384]	@ (80109a0 <_vfiprintf_r+0x908>)
 801081e:	a811      	add	r0, sp, #68	@ 0x44
 8010820:	3d10      	subs	r5, #16
 8010822:	4606      	mov	r6, r0
 8010824:	e694      	b.n	8010550 <_vfiprintf_r+0x4b8>
 8010826:	4606      	mov	r6, r0
 8010828:	e6ac      	b.n	8010584 <_vfiprintf_r+0x4ec>
 801082a:	9800      	ldr	r0, [sp, #0]
 801082c:	aa0e      	add	r2, sp, #56	@ 0x38
 801082e:	4639      	mov	r1, r7
 8010830:	f7ff fc00 	bl	8010034 <__sprint_r>
 8010834:	2800      	cmp	r0, #0
 8010836:	d158      	bne.n	80108ea <_vfiprintf_r+0x852>
 8010838:	ae11      	add	r6, sp, #68	@ 0x44
 801083a:	e6b5      	b.n	80105a8 <_vfiprintf_r+0x510>
 801083c:	9800      	ldr	r0, [sp, #0]
 801083e:	aa0e      	add	r2, sp, #56	@ 0x38
 8010840:	4639      	mov	r1, r7
 8010842:	f7ff fbf7 	bl	8010034 <__sprint_r>
 8010846:	2800      	cmp	r0, #0
 8010848:	d14f      	bne.n	80108ea <_vfiprintf_r+0x852>
 801084a:	ae11      	add	r6, sp, #68	@ 0x44
 801084c:	e6bc      	b.n	80105c8 <_vfiprintf_r+0x530>
 801084e:	2110      	movs	r1, #16
 8010850:	6071      	str	r1, [r6, #4]
 8010852:	2a07      	cmp	r2, #7
 8010854:	4461      	add	r1, ip
 8010856:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 801085a:	dd08      	ble.n	801086e <_vfiprintf_r+0x7d6>
 801085c:	9800      	ldr	r0, [sp, #0]
 801085e:	aa0e      	add	r2, sp, #56	@ 0x38
 8010860:	4639      	mov	r1, r7
 8010862:	f7ff fbe7 	bl	8010034 <__sprint_r>
 8010866:	2800      	cmp	r0, #0
 8010868:	d13f      	bne.n	80108ea <_vfiprintf_r+0x852>
 801086a:	4b4e      	ldr	r3, [pc, #312]	@ (80109a4 <_vfiprintf_r+0x90c>)
 801086c:	a811      	add	r0, sp, #68	@ 0x44
 801086e:	3d10      	subs	r5, #16
 8010870:	4606      	mov	r6, r0
 8010872:	e6b2      	b.n	80105da <_vfiprintf_r+0x542>
 8010874:	4606      	mov	r6, r0
 8010876:	e6ca      	b.n	801060e <_vfiprintf_r+0x576>
 8010878:	2010      	movs	r0, #16
 801087a:	4402      	add	r2, r0
 801087c:	2b07      	cmp	r3, #7
 801087e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8010882:	6070      	str	r0, [r6, #4]
 8010884:	dd06      	ble.n	8010894 <_vfiprintf_r+0x7fc>
 8010886:	9800      	ldr	r0, [sp, #0]
 8010888:	aa0e      	add	r2, sp, #56	@ 0x38
 801088a:	4639      	mov	r1, r7
 801088c:	f7ff fbd2 	bl	8010034 <__sprint_r>
 8010890:	bb58      	cbnz	r0, 80108ea <_vfiprintf_r+0x852>
 8010892:	a911      	add	r1, sp, #68	@ 0x44
 8010894:	3c10      	subs	r4, #16
 8010896:	460e      	mov	r6, r1
 8010898:	e6bd      	b.n	8010616 <_vfiprintf_r+0x57e>
 801089a:	460e      	mov	r6, r1
 801089c:	e6d6      	b.n	801064c <_vfiprintf_r+0x5b4>
 801089e:	9800      	ldr	r0, [sp, #0]
 80108a0:	aa0e      	add	r2, sp, #56	@ 0x38
 80108a2:	4639      	mov	r1, r7
 80108a4:	f7ff fbc6 	bl	8010034 <__sprint_r>
 80108a8:	b9f8      	cbnz	r0, 80108ea <_vfiprintf_r+0x852>
 80108aa:	ab11      	add	r3, sp, #68	@ 0x44
 80108ac:	e6de      	b.n	801066c <_vfiprintf_r+0x5d4>
 80108ae:	9a02      	ldr	r2, [sp, #8]
 80108b0:	9904      	ldr	r1, [sp, #16]
 80108b2:	1a54      	subs	r4, r2, r1
 80108b4:	2c00      	cmp	r4, #0
 80108b6:	f77f aedd 	ble.w	8010674 <_vfiprintf_r+0x5dc>
 80108ba:	4d39      	ldr	r5, [pc, #228]	@ (80109a0 <_vfiprintf_r+0x908>)
 80108bc:	2610      	movs	r6, #16
 80108be:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 80108c2:	2c10      	cmp	r4, #16
 80108c4:	f102 0201 	add.w	r2, r2, #1
 80108c8:	601d      	str	r5, [r3, #0]
 80108ca:	dc1d      	bgt.n	8010908 <_vfiprintf_r+0x870>
 80108cc:	605c      	str	r4, [r3, #4]
 80108ce:	2a07      	cmp	r2, #7
 80108d0:	440c      	add	r4, r1
 80108d2:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80108d6:	f77f aecd 	ble.w	8010674 <_vfiprintf_r+0x5dc>
 80108da:	9800      	ldr	r0, [sp, #0]
 80108dc:	aa0e      	add	r2, sp, #56	@ 0x38
 80108de:	4639      	mov	r1, r7
 80108e0:	f7ff fba8 	bl	8010034 <__sprint_r>
 80108e4:	2800      	cmp	r0, #0
 80108e6:	f43f aec5 	beq.w	8010674 <_vfiprintf_r+0x5dc>
 80108ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80108ec:	07d9      	lsls	r1, r3, #31
 80108ee:	d405      	bmi.n	80108fc <_vfiprintf_r+0x864>
 80108f0:	89bb      	ldrh	r3, [r7, #12]
 80108f2:	059a      	lsls	r2, r3, #22
 80108f4:	d402      	bmi.n	80108fc <_vfiprintf_r+0x864>
 80108f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80108f8:	f000 fc9f 	bl	801123a <__retarget_lock_release_recursive>
 80108fc:	89bb      	ldrh	r3, [r7, #12]
 80108fe:	065b      	lsls	r3, r3, #25
 8010900:	f57f abfb 	bpl.w	80100fa <_vfiprintf_r+0x62>
 8010904:	f7ff bbf6 	b.w	80100f4 <_vfiprintf_r+0x5c>
 8010908:	3110      	adds	r1, #16
 801090a:	2a07      	cmp	r2, #7
 801090c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8010910:	605e      	str	r6, [r3, #4]
 8010912:	dc02      	bgt.n	801091a <_vfiprintf_r+0x882>
 8010914:	3308      	adds	r3, #8
 8010916:	3c10      	subs	r4, #16
 8010918:	e7d1      	b.n	80108be <_vfiprintf_r+0x826>
 801091a:	9800      	ldr	r0, [sp, #0]
 801091c:	aa0e      	add	r2, sp, #56	@ 0x38
 801091e:	4639      	mov	r1, r7
 8010920:	f7ff fb88 	bl	8010034 <__sprint_r>
 8010924:	2800      	cmp	r0, #0
 8010926:	d1e0      	bne.n	80108ea <_vfiprintf_r+0x852>
 8010928:	ab11      	add	r3, sp, #68	@ 0x44
 801092a:	e7f4      	b.n	8010916 <_vfiprintf_r+0x87e>
 801092c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801092e:	b913      	cbnz	r3, 8010936 <_vfiprintf_r+0x89e>
 8010930:	2300      	movs	r3, #0
 8010932:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010934:	e7d9      	b.n	80108ea <_vfiprintf_r+0x852>
 8010936:	9800      	ldr	r0, [sp, #0]
 8010938:	aa0e      	add	r2, sp, #56	@ 0x38
 801093a:	4639      	mov	r1, r7
 801093c:	f7ff fb7a 	bl	8010034 <__sprint_r>
 8010940:	2800      	cmp	r0, #0
 8010942:	d0f5      	beq.n	8010930 <_vfiprintf_r+0x898>
 8010944:	e7d1      	b.n	80108ea <_vfiprintf_r+0x852>
 8010946:	ea54 0205 	orrs.w	r2, r4, r5
 801094a:	f8cd a010 	str.w	sl, [sp, #16]
 801094e:	f43f ada6 	beq.w	801049e <_vfiprintf_r+0x406>
 8010952:	2b01      	cmp	r3, #1
 8010954:	f43f aedf 	beq.w	8010716 <_vfiprintf_r+0x67e>
 8010958:	2b02      	cmp	r3, #2
 801095a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 801095e:	f43f af28 	beq.w	80107b2 <_vfiprintf_r+0x71a>
 8010962:	f004 0307 	and.w	r3, r4, #7
 8010966:	08e4      	lsrs	r4, r4, #3
 8010968:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 801096c:	08ed      	lsrs	r5, r5, #3
 801096e:	3330      	adds	r3, #48	@ 0x30
 8010970:	ea54 0105 	orrs.w	r1, r4, r5
 8010974:	464a      	mov	r2, r9
 8010976:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801097a:	d1f2      	bne.n	8010962 <_vfiprintf_r+0x8ca>
 801097c:	9904      	ldr	r1, [sp, #16]
 801097e:	07c8      	lsls	r0, r1, #31
 8010980:	d506      	bpl.n	8010990 <_vfiprintf_r+0x8f8>
 8010982:	2b30      	cmp	r3, #48	@ 0x30
 8010984:	d004      	beq.n	8010990 <_vfiprintf_r+0x8f8>
 8010986:	2330      	movs	r3, #48	@ 0x30
 8010988:	f809 3c01 	strb.w	r3, [r9, #-1]
 801098c:	f1a2 0902 	sub.w	r9, r2, #2
 8010990:	ab3a      	add	r3, sp, #232	@ 0xe8
 8010992:	eba3 0309 	sub.w	r3, r3, r9
 8010996:	9c01      	ldr	r4, [sp, #4]
 8010998:	f8dd a010 	ldr.w	sl, [sp, #16]
 801099c:	9301      	str	r3, [sp, #4]
 801099e:	e5bb      	b.n	8010518 <_vfiprintf_r+0x480>
 80109a0:	08016126 	.word	0x08016126
 80109a4:	08016116 	.word	0x08016116

080109a8 <__sbprintf>:
 80109a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109aa:	461f      	mov	r7, r3
 80109ac:	898b      	ldrh	r3, [r1, #12]
 80109ae:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 80109b2:	f023 0302 	bic.w	r3, r3, #2
 80109b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80109ba:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80109bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80109be:	89cb      	ldrh	r3, [r1, #14]
 80109c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80109c4:	69cb      	ldr	r3, [r1, #28]
 80109c6:	9307      	str	r3, [sp, #28]
 80109c8:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80109ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80109cc:	ab1a      	add	r3, sp, #104	@ 0x68
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	9304      	str	r3, [sp, #16]
 80109d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80109d6:	4615      	mov	r5, r2
 80109d8:	4606      	mov	r6, r0
 80109da:	9302      	str	r3, [sp, #8]
 80109dc:	9305      	str	r3, [sp, #20]
 80109de:	a816      	add	r0, sp, #88	@ 0x58
 80109e0:	2300      	movs	r3, #0
 80109e2:	460c      	mov	r4, r1
 80109e4:	9306      	str	r3, [sp, #24]
 80109e6:	f000 fc25 	bl	8011234 <__retarget_lock_init_recursive>
 80109ea:	462a      	mov	r2, r5
 80109ec:	463b      	mov	r3, r7
 80109ee:	4669      	mov	r1, sp
 80109f0:	4630      	mov	r0, r6
 80109f2:	f7ff fb51 	bl	8010098 <_vfiprintf_r>
 80109f6:	1e05      	subs	r5, r0, #0
 80109f8:	db07      	blt.n	8010a0a <__sbprintf+0x62>
 80109fa:	4669      	mov	r1, sp
 80109fc:	4630      	mov	r0, r6
 80109fe:	f000 f89b 	bl	8010b38 <_fflush_r>
 8010a02:	2800      	cmp	r0, #0
 8010a04:	bf18      	it	ne
 8010a06:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
 8010a0a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010a0e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010a10:	065b      	lsls	r3, r3, #25
 8010a12:	bf42      	ittt	mi
 8010a14:	89a3      	ldrhmi	r3, [r4, #12]
 8010a16:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8010a1a:	81a3      	strhmi	r3, [r4, #12]
 8010a1c:	f000 fc0b 	bl	8011236 <__retarget_lock_close_recursive>
 8010a20:	4628      	mov	r0, r5
 8010a22:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8010a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a28 <__sflush_r>:
 8010a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a2c:	4605      	mov	r5, r0
 8010a2e:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8010a32:	0706      	lsls	r6, r0, #28
 8010a34:	460c      	mov	r4, r1
 8010a36:	d457      	bmi.n	8010ae8 <__sflush_r+0xc0>
 8010a38:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8010a3c:	818b      	strh	r3, [r1, #12]
 8010a3e:	684b      	ldr	r3, [r1, #4]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	dc02      	bgt.n	8010a4a <__sflush_r+0x22>
 8010a44:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	dd4c      	ble.n	8010ae4 <__sflush_r+0xbc>
 8010a4a:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a4c:	2e00      	cmp	r6, #0
 8010a4e:	d049      	beq.n	8010ae4 <__sflush_r+0xbc>
 8010a50:	2300      	movs	r3, #0
 8010a52:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 8010a56:	682f      	ldr	r7, [r5, #0]
 8010a58:	69e1      	ldr	r1, [r4, #28]
 8010a5a:	602b      	str	r3, [r5, #0]
 8010a5c:	d034      	beq.n	8010ac8 <__sflush_r+0xa0>
 8010a5e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8010a60:	89a3      	ldrh	r3, [r4, #12]
 8010a62:	0759      	lsls	r1, r3, #29
 8010a64:	d505      	bpl.n	8010a72 <__sflush_r+0x4a>
 8010a66:	6863      	ldr	r3, [r4, #4]
 8010a68:	1ad2      	subs	r2, r2, r3
 8010a6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010a6c:	b10b      	cbz	r3, 8010a72 <__sflush_r+0x4a>
 8010a6e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010a70:	1ad2      	subs	r2, r2, r3
 8010a72:	2300      	movs	r3, #0
 8010a74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a76:	69e1      	ldr	r1, [r4, #28]
 8010a78:	4628      	mov	r0, r5
 8010a7a:	47b0      	blx	r6
 8010a7c:	1c43      	adds	r3, r0, #1
 8010a7e:	d106      	bne.n	8010a8e <__sflush_r+0x66>
 8010a80:	682a      	ldr	r2, [r5, #0]
 8010a82:	2a1d      	cmp	r2, #29
 8010a84:	d848      	bhi.n	8010b18 <__sflush_r+0xf0>
 8010a86:	4b2b      	ldr	r3, [pc, #172]	@ (8010b34 <__sflush_r+0x10c>)
 8010a88:	4113      	asrs	r3, r2
 8010a8a:	07de      	lsls	r6, r3, #31
 8010a8c:	d444      	bmi.n	8010b18 <__sflush_r+0xf0>
 8010a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a92:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010a96:	81a2      	strh	r2, [r4, #12]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	6062      	str	r2, [r4, #4]
 8010a9c:	04d9      	lsls	r1, r3, #19
 8010a9e:	6922      	ldr	r2, [r4, #16]
 8010aa0:	6022      	str	r2, [r4, #0]
 8010aa2:	d504      	bpl.n	8010aae <__sflush_r+0x86>
 8010aa4:	1c42      	adds	r2, r0, #1
 8010aa6:	d101      	bne.n	8010aac <__sflush_r+0x84>
 8010aa8:	682b      	ldr	r3, [r5, #0]
 8010aaa:	b903      	cbnz	r3, 8010aae <__sflush_r+0x86>
 8010aac:	6520      	str	r0, [r4, #80]	@ 0x50
 8010aae:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010ab0:	602f      	str	r7, [r5, #0]
 8010ab2:	b1b9      	cbz	r1, 8010ae4 <__sflush_r+0xbc>
 8010ab4:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8010ab8:	4299      	cmp	r1, r3
 8010aba:	d002      	beq.n	8010ac2 <__sflush_r+0x9a>
 8010abc:	4628      	mov	r0, r5
 8010abe:	f001 fa47 	bl	8011f50 <_free_r>
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	6323      	str	r3, [r4, #48]	@ 0x30
 8010ac6:	e00d      	b.n	8010ae4 <__sflush_r+0xbc>
 8010ac8:	2301      	movs	r3, #1
 8010aca:	4628      	mov	r0, r5
 8010acc:	47b0      	blx	r6
 8010ace:	4602      	mov	r2, r0
 8010ad0:	1c50      	adds	r0, r2, #1
 8010ad2:	d1c5      	bne.n	8010a60 <__sflush_r+0x38>
 8010ad4:	682b      	ldr	r3, [r5, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d0c2      	beq.n	8010a60 <__sflush_r+0x38>
 8010ada:	2b1d      	cmp	r3, #29
 8010adc:	d001      	beq.n	8010ae2 <__sflush_r+0xba>
 8010ade:	2b16      	cmp	r3, #22
 8010ae0:	d11a      	bne.n	8010b18 <__sflush_r+0xf0>
 8010ae2:	602f      	str	r7, [r5, #0]
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	e01e      	b.n	8010b26 <__sflush_r+0xfe>
 8010ae8:	690f      	ldr	r7, [r1, #16]
 8010aea:	2f00      	cmp	r7, #0
 8010aec:	d0fa      	beq.n	8010ae4 <__sflush_r+0xbc>
 8010aee:	0783      	lsls	r3, r0, #30
 8010af0:	680e      	ldr	r6, [r1, #0]
 8010af2:	bf08      	it	eq
 8010af4:	694b      	ldreq	r3, [r1, #20]
 8010af6:	600f      	str	r7, [r1, #0]
 8010af8:	bf18      	it	ne
 8010afa:	2300      	movne	r3, #0
 8010afc:	eba6 0807 	sub.w	r8, r6, r7
 8010b00:	608b      	str	r3, [r1, #8]
 8010b02:	f1b8 0f00 	cmp.w	r8, #0
 8010b06:	dded      	ble.n	8010ae4 <__sflush_r+0xbc>
 8010b08:	69e1      	ldr	r1, [r4, #28]
 8010b0a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8010b0c:	4643      	mov	r3, r8
 8010b0e:	463a      	mov	r2, r7
 8010b10:	4628      	mov	r0, r5
 8010b12:	47b0      	blx	r6
 8010b14:	2800      	cmp	r0, #0
 8010b16:	dc08      	bgt.n	8010b2a <__sflush_r+0x102>
 8010b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b20:	81a3      	strh	r3, [r4, #12]
 8010b22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b2a:	4407      	add	r7, r0
 8010b2c:	eba8 0800 	sub.w	r8, r8, r0
 8010b30:	e7e7      	b.n	8010b02 <__sflush_r+0xda>
 8010b32:	bf00      	nop
 8010b34:	dfbffffe 	.word	0xdfbffffe

08010b38 <_fflush_r>:
 8010b38:	b538      	push	{r3, r4, r5, lr}
 8010b3a:	460c      	mov	r4, r1
 8010b3c:	4605      	mov	r5, r0
 8010b3e:	b118      	cbz	r0, 8010b48 <_fflush_r+0x10>
 8010b40:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010b42:	b90b      	cbnz	r3, 8010b48 <_fflush_r+0x10>
 8010b44:	f000 f8ca 	bl	8010cdc <__sinit>
 8010b48:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8010b4c:	b1b8      	cbz	r0, 8010b7e <_fflush_r+0x46>
 8010b4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010b50:	07db      	lsls	r3, r3, #31
 8010b52:	d404      	bmi.n	8010b5e <_fflush_r+0x26>
 8010b54:	0581      	lsls	r1, r0, #22
 8010b56:	d402      	bmi.n	8010b5e <_fflush_r+0x26>
 8010b58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b5a:	f000 fb6d 	bl	8011238 <__retarget_lock_acquire_recursive>
 8010b5e:	4628      	mov	r0, r5
 8010b60:	4621      	mov	r1, r4
 8010b62:	f7ff ff61 	bl	8010a28 <__sflush_r>
 8010b66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010b68:	07da      	lsls	r2, r3, #31
 8010b6a:	4605      	mov	r5, r0
 8010b6c:	d405      	bmi.n	8010b7a <_fflush_r+0x42>
 8010b6e:	89a3      	ldrh	r3, [r4, #12]
 8010b70:	059b      	lsls	r3, r3, #22
 8010b72:	d402      	bmi.n	8010b7a <_fflush_r+0x42>
 8010b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b76:	f000 fb60 	bl	801123a <__retarget_lock_release_recursive>
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	bd38      	pop	{r3, r4, r5, pc}
 8010b7e:	4605      	mov	r5, r0
 8010b80:	e7fb      	b.n	8010b7a <_fflush_r+0x42>
	...

08010b84 <sprintf>:
 8010b84:	b40e      	push	{r1, r2, r3}
 8010b86:	b500      	push	{lr}
 8010b88:	b09c      	sub	sp, #112	@ 0x70
 8010b8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8010b8c:	9002      	str	r0, [sp, #8]
 8010b8e:	9006      	str	r0, [sp, #24]
 8010b90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010b94:	4809      	ldr	r0, [pc, #36]	@ (8010bbc <sprintf+0x38>)
 8010b96:	9107      	str	r1, [sp, #28]
 8010b98:	9104      	str	r1, [sp, #16]
 8010b9a:	4909      	ldr	r1, [pc, #36]	@ (8010bc0 <sprintf+0x3c>)
 8010b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ba0:	9105      	str	r1, [sp, #20]
 8010ba2:	6800      	ldr	r0, [r0, #0]
 8010ba4:	9301      	str	r3, [sp, #4]
 8010ba6:	a902      	add	r1, sp, #8
 8010ba8:	f001 fcde 	bl	8012568 <_svfprintf_r>
 8010bac:	9b02      	ldr	r3, [sp, #8]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	701a      	strb	r2, [r3, #0]
 8010bb2:	b01c      	add	sp, #112	@ 0x70
 8010bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bb8:	b003      	add	sp, #12
 8010bba:	4770      	bx	lr
 8010bbc:	24000198 	.word	0x24000198
 8010bc0:	ffff0208 	.word	0xffff0208

08010bc4 <std>:
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	b510      	push	{r4, lr}
 8010bc8:	4604      	mov	r4, r0
 8010bca:	e9c0 3300 	strd	r3, r3, [r0]
 8010bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bd2:	6083      	str	r3, [r0, #8]
 8010bd4:	8181      	strh	r1, [r0, #12]
 8010bd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8010bd8:	81c2      	strh	r2, [r0, #14]
 8010bda:	6183      	str	r3, [r0, #24]
 8010bdc:	4619      	mov	r1, r3
 8010bde:	2208      	movs	r2, #8
 8010be0:	305c      	adds	r0, #92	@ 0x5c
 8010be2:	f000 fad7 	bl	8011194 <memset>
 8010be6:	4b0d      	ldr	r3, [pc, #52]	@ (8010c1c <std+0x58>)
 8010be8:	6223      	str	r3, [r4, #32]
 8010bea:	4b0d      	ldr	r3, [pc, #52]	@ (8010c20 <std+0x5c>)
 8010bec:	6263      	str	r3, [r4, #36]	@ 0x24
 8010bee:	4b0d      	ldr	r3, [pc, #52]	@ (8010c24 <std+0x60>)
 8010bf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8010c28 <std+0x64>)
 8010bf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8010c2c <std+0x68>)
 8010bf8:	61e4      	str	r4, [r4, #28]
 8010bfa:	429c      	cmp	r4, r3
 8010bfc:	d006      	beq.n	8010c0c <std+0x48>
 8010bfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010c02:	4294      	cmp	r4, r2
 8010c04:	d002      	beq.n	8010c0c <std+0x48>
 8010c06:	33d0      	adds	r3, #208	@ 0xd0
 8010c08:	429c      	cmp	r4, r3
 8010c0a:	d105      	bne.n	8010c18 <std+0x54>
 8010c0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c14:	f000 bb0e 	b.w	8011234 <__retarget_lock_init_recursive>
 8010c18:	bd10      	pop	{r4, pc}
 8010c1a:	bf00      	nop
 8010c1c:	080143b5 	.word	0x080143b5
 8010c20:	080143d7 	.word	0x080143d7
 8010c24:	0801440f 	.word	0x0801440f
 8010c28:	08014433 	.word	0x08014433
 8010c2c:	24024ab4 	.word	0x24024ab4

08010c30 <stdio_exit_handler>:
 8010c30:	4a02      	ldr	r2, [pc, #8]	@ (8010c3c <stdio_exit_handler+0xc>)
 8010c32:	4903      	ldr	r1, [pc, #12]	@ (8010c40 <stdio_exit_handler+0x10>)
 8010c34:	4803      	ldr	r0, [pc, #12]	@ (8010c44 <stdio_exit_handler+0x14>)
 8010c36:	f000 b9b5 	b.w	8010fa4 <_fwalk_sglue>
 8010c3a:	bf00      	nop
 8010c3c:	24000020 	.word	0x24000020
 8010c40:	08013fb9 	.word	0x08013fb9
 8010c44:	240001a0 	.word	0x240001a0

08010c48 <cleanup_stdio>:
 8010c48:	6841      	ldr	r1, [r0, #4]
 8010c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8010c7c <cleanup_stdio+0x34>)
 8010c4c:	4299      	cmp	r1, r3
 8010c4e:	b510      	push	{r4, lr}
 8010c50:	4604      	mov	r4, r0
 8010c52:	d001      	beq.n	8010c58 <cleanup_stdio+0x10>
 8010c54:	f003 f9b0 	bl	8013fb8 <_fclose_r>
 8010c58:	68a1      	ldr	r1, [r4, #8]
 8010c5a:	4b09      	ldr	r3, [pc, #36]	@ (8010c80 <cleanup_stdio+0x38>)
 8010c5c:	4299      	cmp	r1, r3
 8010c5e:	d002      	beq.n	8010c66 <cleanup_stdio+0x1e>
 8010c60:	4620      	mov	r0, r4
 8010c62:	f003 f9a9 	bl	8013fb8 <_fclose_r>
 8010c66:	68e1      	ldr	r1, [r4, #12]
 8010c68:	4b06      	ldr	r3, [pc, #24]	@ (8010c84 <cleanup_stdio+0x3c>)
 8010c6a:	4299      	cmp	r1, r3
 8010c6c:	d004      	beq.n	8010c78 <cleanup_stdio+0x30>
 8010c6e:	4620      	mov	r0, r4
 8010c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c74:	f003 b9a0 	b.w	8013fb8 <_fclose_r>
 8010c78:	bd10      	pop	{r4, pc}
 8010c7a:	bf00      	nop
 8010c7c:	24024ab4 	.word	0x24024ab4
 8010c80:	24024b1c 	.word	0x24024b1c
 8010c84:	24024b84 	.word	0x24024b84

08010c88 <global_stdio_init.part.0>:
 8010c88:	b510      	push	{r4, lr}
 8010c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8010cb8 <global_stdio_init.part.0+0x30>)
 8010c8c:	4c0b      	ldr	r4, [pc, #44]	@ (8010cbc <global_stdio_init.part.0+0x34>)
 8010c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8010cc0 <global_stdio_init.part.0+0x38>)
 8010c90:	601a      	str	r2, [r3, #0]
 8010c92:	4620      	mov	r0, r4
 8010c94:	2200      	movs	r2, #0
 8010c96:	2104      	movs	r1, #4
 8010c98:	f7ff ff94 	bl	8010bc4 <std>
 8010c9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	2109      	movs	r1, #9
 8010ca4:	f7ff ff8e 	bl	8010bc4 <std>
 8010ca8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010cac:	2202      	movs	r2, #2
 8010cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cb2:	2112      	movs	r1, #18
 8010cb4:	f7ff bf86 	b.w	8010bc4 <std>
 8010cb8:	24024bec 	.word	0x24024bec
 8010cbc:	24024ab4 	.word	0x24024ab4
 8010cc0:	08010c31 	.word	0x08010c31

08010cc4 <__sfp_lock_acquire>:
 8010cc4:	4801      	ldr	r0, [pc, #4]	@ (8010ccc <__sfp_lock_acquire+0x8>)
 8010cc6:	f000 bab7 	b.w	8011238 <__retarget_lock_acquire_recursive>
 8010cca:	bf00      	nop
 8010ccc:	24024bf2 	.word	0x24024bf2

08010cd0 <__sfp_lock_release>:
 8010cd0:	4801      	ldr	r0, [pc, #4]	@ (8010cd8 <__sfp_lock_release+0x8>)
 8010cd2:	f000 bab2 	b.w	801123a <__retarget_lock_release_recursive>
 8010cd6:	bf00      	nop
 8010cd8:	24024bf2 	.word	0x24024bf2

08010cdc <__sinit>:
 8010cdc:	b510      	push	{r4, lr}
 8010cde:	4604      	mov	r4, r0
 8010ce0:	f7ff fff0 	bl	8010cc4 <__sfp_lock_acquire>
 8010ce4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010ce6:	b11b      	cbz	r3, 8010cf0 <__sinit+0x14>
 8010ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cec:	f7ff bff0 	b.w	8010cd0 <__sfp_lock_release>
 8010cf0:	4b04      	ldr	r3, [pc, #16]	@ (8010d04 <__sinit+0x28>)
 8010cf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8010cf4:	4b04      	ldr	r3, [pc, #16]	@ (8010d08 <__sinit+0x2c>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d1f5      	bne.n	8010ce8 <__sinit+0xc>
 8010cfc:	f7ff ffc4 	bl	8010c88 <global_stdio_init.part.0>
 8010d00:	e7f2      	b.n	8010ce8 <__sinit+0xc>
 8010d02:	bf00      	nop
 8010d04:	08010c49 	.word	0x08010c49
 8010d08:	24024bec 	.word	0x24024bec

08010d0c <__sfvwrite_r>:
 8010d0c:	6893      	ldr	r3, [r2, #8]
 8010d0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d12:	4606      	mov	r6, r0
 8010d14:	460c      	mov	r4, r1
 8010d16:	4691      	mov	r9, r2
 8010d18:	b91b      	cbnz	r3, 8010d22 <__sfvwrite_r+0x16>
 8010d1a:	2000      	movs	r0, #0
 8010d1c:	b003      	add	sp, #12
 8010d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d22:	898b      	ldrh	r3, [r1, #12]
 8010d24:	0718      	lsls	r0, r3, #28
 8010d26:	d550      	bpl.n	8010dca <__sfvwrite_r+0xbe>
 8010d28:	690b      	ldr	r3, [r1, #16]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d04d      	beq.n	8010dca <__sfvwrite_r+0xbe>
 8010d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d32:	f8d9 8000 	ldr.w	r8, [r9]
 8010d36:	f013 0702 	ands.w	r7, r3, #2
 8010d3a:	d16b      	bne.n	8010e14 <__sfvwrite_r+0x108>
 8010d3c:	f013 0301 	ands.w	r3, r3, #1
 8010d40:	f000 809c 	beq.w	8010e7c <__sfvwrite_r+0x170>
 8010d44:	4638      	mov	r0, r7
 8010d46:	46ba      	mov	sl, r7
 8010d48:	46bb      	mov	fp, r7
 8010d4a:	f1bb 0f00 	cmp.w	fp, #0
 8010d4e:	f000 8103 	beq.w	8010f58 <__sfvwrite_r+0x24c>
 8010d52:	b950      	cbnz	r0, 8010d6a <__sfvwrite_r+0x5e>
 8010d54:	465a      	mov	r2, fp
 8010d56:	210a      	movs	r1, #10
 8010d58:	4650      	mov	r0, sl
 8010d5a:	f7ef fac1 	bl	80002e0 <memchr>
 8010d5e:	2800      	cmp	r0, #0
 8010d60:	f000 8100 	beq.w	8010f64 <__sfvwrite_r+0x258>
 8010d64:	3001      	adds	r0, #1
 8010d66:	eba0 070a 	sub.w	r7, r0, sl
 8010d6a:	6820      	ldr	r0, [r4, #0]
 8010d6c:	6921      	ldr	r1, [r4, #16]
 8010d6e:	68a5      	ldr	r5, [r4, #8]
 8010d70:	6963      	ldr	r3, [r4, #20]
 8010d72:	455f      	cmp	r7, fp
 8010d74:	463a      	mov	r2, r7
 8010d76:	bf28      	it	cs
 8010d78:	465a      	movcs	r2, fp
 8010d7a:	4288      	cmp	r0, r1
 8010d7c:	f240 80f5 	bls.w	8010f6a <__sfvwrite_r+0x25e>
 8010d80:	441d      	add	r5, r3
 8010d82:	42aa      	cmp	r2, r5
 8010d84:	f340 80f1 	ble.w	8010f6a <__sfvwrite_r+0x25e>
 8010d88:	4651      	mov	r1, sl
 8010d8a:	462a      	mov	r2, r5
 8010d8c:	f000 f9e8 	bl	8011160 <memmove>
 8010d90:	6823      	ldr	r3, [r4, #0]
 8010d92:	442b      	add	r3, r5
 8010d94:	6023      	str	r3, [r4, #0]
 8010d96:	4621      	mov	r1, r4
 8010d98:	4630      	mov	r0, r6
 8010d9a:	f7ff fecd 	bl	8010b38 <_fflush_r>
 8010d9e:	2800      	cmp	r0, #0
 8010da0:	d167      	bne.n	8010e72 <__sfvwrite_r+0x166>
 8010da2:	1b7f      	subs	r7, r7, r5
 8010da4:	f040 80f9 	bne.w	8010f9a <__sfvwrite_r+0x28e>
 8010da8:	4621      	mov	r1, r4
 8010daa:	4630      	mov	r0, r6
 8010dac:	f7ff fec4 	bl	8010b38 <_fflush_r>
 8010db0:	2800      	cmp	r0, #0
 8010db2:	d15e      	bne.n	8010e72 <__sfvwrite_r+0x166>
 8010db4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010db8:	1b5b      	subs	r3, r3, r5
 8010dba:	44aa      	add	sl, r5
 8010dbc:	ebab 0b05 	sub.w	fp, fp, r5
 8010dc0:	f8c9 3008 	str.w	r3, [r9, #8]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d1c0      	bne.n	8010d4a <__sfvwrite_r+0x3e>
 8010dc8:	e7a7      	b.n	8010d1a <__sfvwrite_r+0xe>
 8010dca:	4621      	mov	r1, r4
 8010dcc:	4630      	mov	r0, r6
 8010dce:	f000 f907 	bl	8010fe0 <__swsetup_r>
 8010dd2:	2800      	cmp	r0, #0
 8010dd4:	d0ab      	beq.n	8010d2e <__sfvwrite_r+0x22>
 8010dd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010dda:	e79f      	b.n	8010d1c <__sfvwrite_r+0x10>
 8010ddc:	e9d8 a500 	ldrd	sl, r5, [r8]
 8010de0:	f108 0808 	add.w	r8, r8, #8
 8010de4:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8010de8:	69e1      	ldr	r1, [r4, #28]
 8010dea:	2d00      	cmp	r5, #0
 8010dec:	d0f6      	beq.n	8010ddc <__sfvwrite_r+0xd0>
 8010dee:	42bd      	cmp	r5, r7
 8010df0:	462b      	mov	r3, r5
 8010df2:	4652      	mov	r2, sl
 8010df4:	bf28      	it	cs
 8010df6:	463b      	movcs	r3, r7
 8010df8:	4630      	mov	r0, r6
 8010dfa:	47d8      	blx	fp
 8010dfc:	2800      	cmp	r0, #0
 8010dfe:	dd38      	ble.n	8010e72 <__sfvwrite_r+0x166>
 8010e00:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010e04:	1a1b      	subs	r3, r3, r0
 8010e06:	4482      	add	sl, r0
 8010e08:	1a2d      	subs	r5, r5, r0
 8010e0a:	f8c9 3008 	str.w	r3, [r9, #8]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d1e8      	bne.n	8010de4 <__sfvwrite_r+0xd8>
 8010e12:	e782      	b.n	8010d1a <__sfvwrite_r+0xe>
 8010e14:	f04f 0a00 	mov.w	sl, #0
 8010e18:	4f61      	ldr	r7, [pc, #388]	@ (8010fa0 <__sfvwrite_r+0x294>)
 8010e1a:	4655      	mov	r5, sl
 8010e1c:	e7e2      	b.n	8010de4 <__sfvwrite_r+0xd8>
 8010e1e:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8010e22:	f108 0808 	add.w	r8, r8, #8
 8010e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e2a:	6820      	ldr	r0, [r4, #0]
 8010e2c:	68a2      	ldr	r2, [r4, #8]
 8010e2e:	f1ba 0f00 	cmp.w	sl, #0
 8010e32:	d0f4      	beq.n	8010e1e <__sfvwrite_r+0x112>
 8010e34:	0599      	lsls	r1, r3, #22
 8010e36:	d563      	bpl.n	8010f00 <__sfvwrite_r+0x1f4>
 8010e38:	4552      	cmp	r2, sl
 8010e3a:	d836      	bhi.n	8010eaa <__sfvwrite_r+0x19e>
 8010e3c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8010e40:	d033      	beq.n	8010eaa <__sfvwrite_r+0x19e>
 8010e42:	6921      	ldr	r1, [r4, #16]
 8010e44:	6965      	ldr	r5, [r4, #20]
 8010e46:	eba0 0b01 	sub.w	fp, r0, r1
 8010e4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e52:	f10b 0201 	add.w	r2, fp, #1
 8010e56:	106d      	asrs	r5, r5, #1
 8010e58:	4452      	add	r2, sl
 8010e5a:	4295      	cmp	r5, r2
 8010e5c:	bf38      	it	cc
 8010e5e:	4615      	movcc	r5, r2
 8010e60:	055b      	lsls	r3, r3, #21
 8010e62:	d53d      	bpl.n	8010ee0 <__sfvwrite_r+0x1d4>
 8010e64:	4629      	mov	r1, r5
 8010e66:	4630      	mov	r0, r6
 8010e68:	f001 f932 	bl	80120d0 <_malloc_r>
 8010e6c:	b948      	cbnz	r0, 8010e82 <__sfvwrite_r+0x176>
 8010e6e:	230c      	movs	r3, #12
 8010e70:	6033      	str	r3, [r6, #0]
 8010e72:	89a3      	ldrh	r3, [r4, #12]
 8010e74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e78:	81a3      	strh	r3, [r4, #12]
 8010e7a:	e7ac      	b.n	8010dd6 <__sfvwrite_r+0xca>
 8010e7c:	461f      	mov	r7, r3
 8010e7e:	469a      	mov	sl, r3
 8010e80:	e7d1      	b.n	8010e26 <__sfvwrite_r+0x11a>
 8010e82:	465a      	mov	r2, fp
 8010e84:	6921      	ldr	r1, [r4, #16]
 8010e86:	9001      	str	r0, [sp, #4]
 8010e88:	f000 f9d8 	bl	801123c <memcpy>
 8010e8c:	89a2      	ldrh	r2, [r4, #12]
 8010e8e:	9b01      	ldr	r3, [sp, #4]
 8010e90:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8010e94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010e98:	81a2      	strh	r2, [r4, #12]
 8010e9a:	6123      	str	r3, [r4, #16]
 8010e9c:	6165      	str	r5, [r4, #20]
 8010e9e:	445b      	add	r3, fp
 8010ea0:	eba5 050b 	sub.w	r5, r5, fp
 8010ea4:	6023      	str	r3, [r4, #0]
 8010ea6:	4652      	mov	r2, sl
 8010ea8:	60a5      	str	r5, [r4, #8]
 8010eaa:	4552      	cmp	r2, sl
 8010eac:	bf28      	it	cs
 8010eae:	4652      	movcs	r2, sl
 8010eb0:	6820      	ldr	r0, [r4, #0]
 8010eb2:	9201      	str	r2, [sp, #4]
 8010eb4:	4639      	mov	r1, r7
 8010eb6:	f000 f953 	bl	8011160 <memmove>
 8010eba:	68a3      	ldr	r3, [r4, #8]
 8010ebc:	9a01      	ldr	r2, [sp, #4]
 8010ebe:	1a9b      	subs	r3, r3, r2
 8010ec0:	60a3      	str	r3, [r4, #8]
 8010ec2:	6823      	ldr	r3, [r4, #0]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	4655      	mov	r5, sl
 8010ec8:	6023      	str	r3, [r4, #0]
 8010eca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010ece:	1b5b      	subs	r3, r3, r5
 8010ed0:	442f      	add	r7, r5
 8010ed2:	ebaa 0a05 	sub.w	sl, sl, r5
 8010ed6:	f8c9 3008 	str.w	r3, [r9, #8]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d1a3      	bne.n	8010e26 <__sfvwrite_r+0x11a>
 8010ede:	e71c      	b.n	8010d1a <__sfvwrite_r+0xe>
 8010ee0:	462a      	mov	r2, r5
 8010ee2:	4630      	mov	r0, r6
 8010ee4:	f003 f8be 	bl	8014064 <_realloc_r>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	2800      	cmp	r0, #0
 8010eec:	d1d5      	bne.n	8010e9a <__sfvwrite_r+0x18e>
 8010eee:	6921      	ldr	r1, [r4, #16]
 8010ef0:	4630      	mov	r0, r6
 8010ef2:	f001 f82d 	bl	8011f50 <_free_r>
 8010ef6:	89a3      	ldrh	r3, [r4, #12]
 8010ef8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010efc:	81a3      	strh	r3, [r4, #12]
 8010efe:	e7b6      	b.n	8010e6e <__sfvwrite_r+0x162>
 8010f00:	6923      	ldr	r3, [r4, #16]
 8010f02:	4283      	cmp	r3, r0
 8010f04:	d302      	bcc.n	8010f0c <__sfvwrite_r+0x200>
 8010f06:	6961      	ldr	r1, [r4, #20]
 8010f08:	4551      	cmp	r1, sl
 8010f0a:	d915      	bls.n	8010f38 <__sfvwrite_r+0x22c>
 8010f0c:	4552      	cmp	r2, sl
 8010f0e:	bf28      	it	cs
 8010f10:	4652      	movcs	r2, sl
 8010f12:	4639      	mov	r1, r7
 8010f14:	4615      	mov	r5, r2
 8010f16:	f000 f923 	bl	8011160 <memmove>
 8010f1a:	68a3      	ldr	r3, [r4, #8]
 8010f1c:	6822      	ldr	r2, [r4, #0]
 8010f1e:	1b5b      	subs	r3, r3, r5
 8010f20:	442a      	add	r2, r5
 8010f22:	60a3      	str	r3, [r4, #8]
 8010f24:	6022      	str	r2, [r4, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d1cf      	bne.n	8010eca <__sfvwrite_r+0x1be>
 8010f2a:	4621      	mov	r1, r4
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	f7ff fe03 	bl	8010b38 <_fflush_r>
 8010f32:	2800      	cmp	r0, #0
 8010f34:	d0c9      	beq.n	8010eca <__sfvwrite_r+0x1be>
 8010f36:	e79c      	b.n	8010e72 <__sfvwrite_r+0x166>
 8010f38:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010f3c:	4553      	cmp	r3, sl
 8010f3e:	bf28      	it	cs
 8010f40:	4653      	movcs	r3, sl
 8010f42:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8010f44:	fb93 f3f1 	sdiv	r3, r3, r1
 8010f48:	463a      	mov	r2, r7
 8010f4a:	434b      	muls	r3, r1
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	69e1      	ldr	r1, [r4, #28]
 8010f50:	47a8      	blx	r5
 8010f52:	1e05      	subs	r5, r0, #0
 8010f54:	dcb9      	bgt.n	8010eca <__sfvwrite_r+0x1be>
 8010f56:	e78c      	b.n	8010e72 <__sfvwrite_r+0x166>
 8010f58:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8010f5c:	2000      	movs	r0, #0
 8010f5e:	f108 0808 	add.w	r8, r8, #8
 8010f62:	e6f2      	b.n	8010d4a <__sfvwrite_r+0x3e>
 8010f64:	f10b 0701 	add.w	r7, fp, #1
 8010f68:	e6ff      	b.n	8010d6a <__sfvwrite_r+0x5e>
 8010f6a:	4293      	cmp	r3, r2
 8010f6c:	dc08      	bgt.n	8010f80 <__sfvwrite_r+0x274>
 8010f6e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8010f70:	69e1      	ldr	r1, [r4, #28]
 8010f72:	4652      	mov	r2, sl
 8010f74:	4630      	mov	r0, r6
 8010f76:	47a8      	blx	r5
 8010f78:	1e05      	subs	r5, r0, #0
 8010f7a:	f73f af12 	bgt.w	8010da2 <__sfvwrite_r+0x96>
 8010f7e:	e778      	b.n	8010e72 <__sfvwrite_r+0x166>
 8010f80:	4651      	mov	r1, sl
 8010f82:	9201      	str	r2, [sp, #4]
 8010f84:	f000 f8ec 	bl	8011160 <memmove>
 8010f88:	9a01      	ldr	r2, [sp, #4]
 8010f8a:	68a3      	ldr	r3, [r4, #8]
 8010f8c:	1a9b      	subs	r3, r3, r2
 8010f8e:	60a3      	str	r3, [r4, #8]
 8010f90:	6823      	ldr	r3, [r4, #0]
 8010f92:	4413      	add	r3, r2
 8010f94:	6023      	str	r3, [r4, #0]
 8010f96:	4615      	mov	r5, r2
 8010f98:	e703      	b.n	8010da2 <__sfvwrite_r+0x96>
 8010f9a:	2001      	movs	r0, #1
 8010f9c:	e70a      	b.n	8010db4 <__sfvwrite_r+0xa8>
 8010f9e:	bf00      	nop
 8010fa0:	7ffffc00 	.word	0x7ffffc00

08010fa4 <_fwalk_sglue>:
 8010fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fa8:	4607      	mov	r7, r0
 8010faa:	4688      	mov	r8, r1
 8010fac:	4614      	mov	r4, r2
 8010fae:	2600      	movs	r6, #0
 8010fb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010fb4:	f1b9 0901 	subs.w	r9, r9, #1
 8010fb8:	d505      	bpl.n	8010fc6 <_fwalk_sglue+0x22>
 8010fba:	6824      	ldr	r4, [r4, #0]
 8010fbc:	2c00      	cmp	r4, #0
 8010fbe:	d1f7      	bne.n	8010fb0 <_fwalk_sglue+0xc>
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fc6:	89ab      	ldrh	r3, [r5, #12]
 8010fc8:	2b01      	cmp	r3, #1
 8010fca:	d907      	bls.n	8010fdc <_fwalk_sglue+0x38>
 8010fcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	d003      	beq.n	8010fdc <_fwalk_sglue+0x38>
 8010fd4:	4629      	mov	r1, r5
 8010fd6:	4638      	mov	r0, r7
 8010fd8:	47c0      	blx	r8
 8010fda:	4306      	orrs	r6, r0
 8010fdc:	3568      	adds	r5, #104	@ 0x68
 8010fde:	e7e9      	b.n	8010fb4 <_fwalk_sglue+0x10>

08010fe0 <__swsetup_r>:
 8010fe0:	b538      	push	{r3, r4, r5, lr}
 8010fe2:	4b29      	ldr	r3, [pc, #164]	@ (8011088 <__swsetup_r+0xa8>)
 8010fe4:	4605      	mov	r5, r0
 8010fe6:	6818      	ldr	r0, [r3, #0]
 8010fe8:	460c      	mov	r4, r1
 8010fea:	b118      	cbz	r0, 8010ff4 <__swsetup_r+0x14>
 8010fec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010fee:	b90b      	cbnz	r3, 8010ff4 <__swsetup_r+0x14>
 8010ff0:	f7ff fe74 	bl	8010cdc <__sinit>
 8010ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ff8:	0719      	lsls	r1, r3, #28
 8010ffa:	d422      	bmi.n	8011042 <__swsetup_r+0x62>
 8010ffc:	06da      	lsls	r2, r3, #27
 8010ffe:	d407      	bmi.n	8011010 <__swsetup_r+0x30>
 8011000:	2209      	movs	r2, #9
 8011002:	602a      	str	r2, [r5, #0]
 8011004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011008:	81a3      	strh	r3, [r4, #12]
 801100a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801100e:	e033      	b.n	8011078 <__swsetup_r+0x98>
 8011010:	0758      	lsls	r0, r3, #29
 8011012:	d512      	bpl.n	801103a <__swsetup_r+0x5a>
 8011014:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011016:	b141      	cbz	r1, 801102a <__swsetup_r+0x4a>
 8011018:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801101c:	4299      	cmp	r1, r3
 801101e:	d002      	beq.n	8011026 <__swsetup_r+0x46>
 8011020:	4628      	mov	r0, r5
 8011022:	f000 ff95 	bl	8011f50 <_free_r>
 8011026:	2300      	movs	r3, #0
 8011028:	6323      	str	r3, [r4, #48]	@ 0x30
 801102a:	89a3      	ldrh	r3, [r4, #12]
 801102c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011030:	81a3      	strh	r3, [r4, #12]
 8011032:	2300      	movs	r3, #0
 8011034:	6063      	str	r3, [r4, #4]
 8011036:	6923      	ldr	r3, [r4, #16]
 8011038:	6023      	str	r3, [r4, #0]
 801103a:	89a3      	ldrh	r3, [r4, #12]
 801103c:	f043 0308 	orr.w	r3, r3, #8
 8011040:	81a3      	strh	r3, [r4, #12]
 8011042:	6923      	ldr	r3, [r4, #16]
 8011044:	b94b      	cbnz	r3, 801105a <__swsetup_r+0x7a>
 8011046:	89a3      	ldrh	r3, [r4, #12]
 8011048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801104c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011050:	d003      	beq.n	801105a <__swsetup_r+0x7a>
 8011052:	4621      	mov	r1, r4
 8011054:	4628      	mov	r0, r5
 8011056:	f002 fc33 	bl	80138c0 <__smakebuf_r>
 801105a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801105e:	f013 0201 	ands.w	r2, r3, #1
 8011062:	d00a      	beq.n	801107a <__swsetup_r+0x9a>
 8011064:	2200      	movs	r2, #0
 8011066:	60a2      	str	r2, [r4, #8]
 8011068:	6962      	ldr	r2, [r4, #20]
 801106a:	4252      	negs	r2, r2
 801106c:	61a2      	str	r2, [r4, #24]
 801106e:	6922      	ldr	r2, [r4, #16]
 8011070:	b942      	cbnz	r2, 8011084 <__swsetup_r+0xa4>
 8011072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011076:	d1c5      	bne.n	8011004 <__swsetup_r+0x24>
 8011078:	bd38      	pop	{r3, r4, r5, pc}
 801107a:	0799      	lsls	r1, r3, #30
 801107c:	bf58      	it	pl
 801107e:	6962      	ldrpl	r2, [r4, #20]
 8011080:	60a2      	str	r2, [r4, #8]
 8011082:	e7f4      	b.n	801106e <__swsetup_r+0x8e>
 8011084:	2000      	movs	r0, #0
 8011086:	e7f7      	b.n	8011078 <__swsetup_r+0x98>
 8011088:	24000198 	.word	0x24000198

0801108c <__fputwc>:
 801108c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011090:	4680      	mov	r8, r0
 8011092:	460f      	mov	r7, r1
 8011094:	4614      	mov	r4, r2
 8011096:	f000 f899 	bl	80111cc <__locale_mb_cur_max>
 801109a:	2801      	cmp	r0, #1
 801109c:	4605      	mov	r5, r0
 801109e:	d11b      	bne.n	80110d8 <__fputwc+0x4c>
 80110a0:	1e7b      	subs	r3, r7, #1
 80110a2:	2bfe      	cmp	r3, #254	@ 0xfe
 80110a4:	d818      	bhi.n	80110d8 <__fputwc+0x4c>
 80110a6:	f88d 7004 	strb.w	r7, [sp, #4]
 80110aa:	2600      	movs	r6, #0
 80110ac:	f10d 0904 	add.w	r9, sp, #4
 80110b0:	42ae      	cmp	r6, r5
 80110b2:	d021      	beq.n	80110f8 <__fputwc+0x6c>
 80110b4:	68a3      	ldr	r3, [r4, #8]
 80110b6:	f816 1009 	ldrb.w	r1, [r6, r9]
 80110ba:	3b01      	subs	r3, #1
 80110bc:	2b00      	cmp	r3, #0
 80110be:	60a3      	str	r3, [r4, #8]
 80110c0:	da04      	bge.n	80110cc <__fputwc+0x40>
 80110c2:	69a2      	ldr	r2, [r4, #24]
 80110c4:	4293      	cmp	r3, r2
 80110c6:	db1b      	blt.n	8011100 <__fputwc+0x74>
 80110c8:	290a      	cmp	r1, #10
 80110ca:	d019      	beq.n	8011100 <__fputwc+0x74>
 80110cc:	6823      	ldr	r3, [r4, #0]
 80110ce:	1c5a      	adds	r2, r3, #1
 80110d0:	6022      	str	r2, [r4, #0]
 80110d2:	7019      	strb	r1, [r3, #0]
 80110d4:	3601      	adds	r6, #1
 80110d6:	e7eb      	b.n	80110b0 <__fputwc+0x24>
 80110d8:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 80110dc:	463a      	mov	r2, r7
 80110de:	a901      	add	r1, sp, #4
 80110e0:	4640      	mov	r0, r8
 80110e2:	f000 f8b9 	bl	8011258 <_wcrtomb_r>
 80110e6:	1c43      	adds	r3, r0, #1
 80110e8:	4605      	mov	r5, r0
 80110ea:	d1de      	bne.n	80110aa <__fputwc+0x1e>
 80110ec:	89a3      	ldrh	r3, [r4, #12]
 80110ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110f2:	81a3      	strh	r3, [r4, #12]
 80110f4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80110f8:	4638      	mov	r0, r7
 80110fa:	b003      	add	sp, #12
 80110fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011100:	4622      	mov	r2, r4
 8011102:	4640      	mov	r0, r8
 8011104:	f003 f9a6 	bl	8014454 <__swbuf_r>
 8011108:	3001      	adds	r0, #1
 801110a:	d1e3      	bne.n	80110d4 <__fputwc+0x48>
 801110c:	e7f2      	b.n	80110f4 <__fputwc+0x68>

0801110e <_fputwc_r>:
 801110e:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8011110:	07db      	lsls	r3, r3, #31
 8011112:	b570      	push	{r4, r5, r6, lr}
 8011114:	4605      	mov	r5, r0
 8011116:	460e      	mov	r6, r1
 8011118:	4614      	mov	r4, r2
 801111a:	d405      	bmi.n	8011128 <_fputwc_r+0x1a>
 801111c:	8993      	ldrh	r3, [r2, #12]
 801111e:	0598      	lsls	r0, r3, #22
 8011120:	d402      	bmi.n	8011128 <_fputwc_r+0x1a>
 8011122:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8011124:	f000 f888 	bl	8011238 <__retarget_lock_acquire_recursive>
 8011128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801112c:	0499      	lsls	r1, r3, #18
 801112e:	d406      	bmi.n	801113e <_fputwc_r+0x30>
 8011130:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011134:	81a3      	strh	r3, [r4, #12]
 8011136:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011138:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801113c:	6663      	str	r3, [r4, #100]	@ 0x64
 801113e:	4622      	mov	r2, r4
 8011140:	4628      	mov	r0, r5
 8011142:	4631      	mov	r1, r6
 8011144:	f7ff ffa2 	bl	801108c <__fputwc>
 8011148:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801114a:	07da      	lsls	r2, r3, #31
 801114c:	4605      	mov	r5, r0
 801114e:	d405      	bmi.n	801115c <_fputwc_r+0x4e>
 8011150:	89a3      	ldrh	r3, [r4, #12]
 8011152:	059b      	lsls	r3, r3, #22
 8011154:	d402      	bmi.n	801115c <_fputwc_r+0x4e>
 8011156:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011158:	f000 f86f 	bl	801123a <__retarget_lock_release_recursive>
 801115c:	4628      	mov	r0, r5
 801115e:	bd70      	pop	{r4, r5, r6, pc}

08011160 <memmove>:
 8011160:	4288      	cmp	r0, r1
 8011162:	b510      	push	{r4, lr}
 8011164:	eb01 0402 	add.w	r4, r1, r2
 8011168:	d902      	bls.n	8011170 <memmove+0x10>
 801116a:	4284      	cmp	r4, r0
 801116c:	4623      	mov	r3, r4
 801116e:	d807      	bhi.n	8011180 <memmove+0x20>
 8011170:	1e43      	subs	r3, r0, #1
 8011172:	42a1      	cmp	r1, r4
 8011174:	d008      	beq.n	8011188 <memmove+0x28>
 8011176:	f811 2b01 	ldrb.w	r2, [r1], #1
 801117a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801117e:	e7f8      	b.n	8011172 <memmove+0x12>
 8011180:	4402      	add	r2, r0
 8011182:	4601      	mov	r1, r0
 8011184:	428a      	cmp	r2, r1
 8011186:	d100      	bne.n	801118a <memmove+0x2a>
 8011188:	bd10      	pop	{r4, pc}
 801118a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801118e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011192:	e7f7      	b.n	8011184 <memmove+0x24>

08011194 <memset>:
 8011194:	4402      	add	r2, r0
 8011196:	4603      	mov	r3, r0
 8011198:	4293      	cmp	r3, r2
 801119a:	d100      	bne.n	801119e <memset+0xa>
 801119c:	4770      	bx	lr
 801119e:	f803 1b01 	strb.w	r1, [r3], #1
 80111a2:	e7f9      	b.n	8011198 <memset+0x4>

080111a4 <strncpy>:
 80111a4:	b510      	push	{r4, lr}
 80111a6:	3901      	subs	r1, #1
 80111a8:	4603      	mov	r3, r0
 80111aa:	b132      	cbz	r2, 80111ba <strncpy+0x16>
 80111ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80111b0:	f803 4b01 	strb.w	r4, [r3], #1
 80111b4:	3a01      	subs	r2, #1
 80111b6:	2c00      	cmp	r4, #0
 80111b8:	d1f7      	bne.n	80111aa <strncpy+0x6>
 80111ba:	441a      	add	r2, r3
 80111bc:	2100      	movs	r1, #0
 80111be:	4293      	cmp	r3, r2
 80111c0:	d100      	bne.n	80111c4 <strncpy+0x20>
 80111c2:	bd10      	pop	{r4, pc}
 80111c4:	f803 1b01 	strb.w	r1, [r3], #1
 80111c8:	e7f9      	b.n	80111be <strncpy+0x1a>
	...

080111cc <__locale_mb_cur_max>:
 80111cc:	4b01      	ldr	r3, [pc, #4]	@ (80111d4 <__locale_mb_cur_max+0x8>)
 80111ce:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 80111d2:	4770      	bx	lr
 80111d4:	2400002c 	.word	0x2400002c

080111d8 <_localeconv_r>:
 80111d8:	4800      	ldr	r0, [pc, #0]	@ (80111dc <_localeconv_r+0x4>)
 80111da:	4770      	bx	lr
 80111dc:	2400011c 	.word	0x2400011c

080111e0 <__errno>:
 80111e0:	4b01      	ldr	r3, [pc, #4]	@ (80111e8 <__errno+0x8>)
 80111e2:	6818      	ldr	r0, [r3, #0]
 80111e4:	4770      	bx	lr
 80111e6:	bf00      	nop
 80111e8:	24000198 	.word	0x24000198

080111ec <__libc_init_array>:
 80111ec:	b570      	push	{r4, r5, r6, lr}
 80111ee:	4d0d      	ldr	r5, [pc, #52]	@ (8011224 <__libc_init_array+0x38>)
 80111f0:	4c0d      	ldr	r4, [pc, #52]	@ (8011228 <__libc_init_array+0x3c>)
 80111f2:	1b64      	subs	r4, r4, r5
 80111f4:	10a4      	asrs	r4, r4, #2
 80111f6:	2600      	movs	r6, #0
 80111f8:	42a6      	cmp	r6, r4
 80111fa:	d109      	bne.n	8011210 <__libc_init_array+0x24>
 80111fc:	4d0b      	ldr	r5, [pc, #44]	@ (801122c <__libc_init_array+0x40>)
 80111fe:	4c0c      	ldr	r4, [pc, #48]	@ (8011230 <__libc_init_array+0x44>)
 8011200:	f004 fe88 	bl	8015f14 <_init>
 8011204:	1b64      	subs	r4, r4, r5
 8011206:	10a4      	asrs	r4, r4, #2
 8011208:	2600      	movs	r6, #0
 801120a:	42a6      	cmp	r6, r4
 801120c:	d105      	bne.n	801121a <__libc_init_array+0x2e>
 801120e:	bd70      	pop	{r4, r5, r6, pc}
 8011210:	f855 3b04 	ldr.w	r3, [r5], #4
 8011214:	4798      	blx	r3
 8011216:	3601      	adds	r6, #1
 8011218:	e7ee      	b.n	80111f8 <__libc_init_array+0xc>
 801121a:	f855 3b04 	ldr.w	r3, [r5], #4
 801121e:	4798      	blx	r3
 8011220:	3601      	adds	r6, #1
 8011222:	e7f2      	b.n	801120a <__libc_init_array+0x1e>
 8011224:	080187a8 	.word	0x080187a8
 8011228:	080187a8 	.word	0x080187a8
 801122c:	080187a8 	.word	0x080187a8
 8011230:	080187b0 	.word	0x080187b0

08011234 <__retarget_lock_init_recursive>:
 8011234:	4770      	bx	lr

08011236 <__retarget_lock_close_recursive>:
 8011236:	4770      	bx	lr

08011238 <__retarget_lock_acquire_recursive>:
 8011238:	4770      	bx	lr

0801123a <__retarget_lock_release_recursive>:
 801123a:	4770      	bx	lr

0801123c <memcpy>:
 801123c:	440a      	add	r2, r1
 801123e:	4291      	cmp	r1, r2
 8011240:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011244:	d100      	bne.n	8011248 <memcpy+0xc>
 8011246:	4770      	bx	lr
 8011248:	b510      	push	{r4, lr}
 801124a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801124e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011252:	4291      	cmp	r1, r2
 8011254:	d1f9      	bne.n	801124a <memcpy+0xe>
 8011256:	bd10      	pop	{r4, pc}

08011258 <_wcrtomb_r>:
 8011258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801125a:	4c09      	ldr	r4, [pc, #36]	@ (8011280 <_wcrtomb_r+0x28>)
 801125c:	b085      	sub	sp, #20
 801125e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8011262:	4605      	mov	r5, r0
 8011264:	461e      	mov	r6, r3
 8011266:	b909      	cbnz	r1, 801126c <_wcrtomb_r+0x14>
 8011268:	460a      	mov	r2, r1
 801126a:	a901      	add	r1, sp, #4
 801126c:	47b8      	blx	r7
 801126e:	1c43      	adds	r3, r0, #1
 8011270:	bf01      	itttt	eq
 8011272:	2300      	moveq	r3, #0
 8011274:	6033      	streq	r3, [r6, #0]
 8011276:	238a      	moveq	r3, #138	@ 0x8a
 8011278:	602b      	streq	r3, [r5, #0]
 801127a:	b005      	add	sp, #20
 801127c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801127e:	bf00      	nop
 8011280:	2400002c 	.word	0x2400002c
 8011284:	00000000 	.word	0x00000000

08011288 <frexp>:
 8011288:	2200      	movs	r2, #0
 801128a:	ee10 1a90 	vmov	r1, s1
 801128e:	6002      	str	r2, [r0, #0]
 8011290:	4a17      	ldr	r2, [pc, #92]	@ (80112f0 <frexp+0x68>)
 8011292:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011296:	4293      	cmp	r3, r2
 8011298:	d823      	bhi.n	80112e2 <frexp+0x5a>
 801129a:	ee10 2a10 	vmov	r2, s0
 801129e:	431a      	orrs	r2, r3
 80112a0:	d01f      	beq.n	80112e2 <frexp+0x5a>
 80112a2:	4a14      	ldr	r2, [pc, #80]	@ (80112f4 <frexp+0x6c>)
 80112a4:	400a      	ands	r2, r1
 80112a6:	b952      	cbnz	r2, 80112be <frexp+0x36>
 80112a8:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 80112e8 <frexp+0x60>
 80112ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 80112b0:	ee10 1a90 	vmov	r1, s1
 80112b4:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 80112b8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80112bc:	6002      	str	r2, [r0, #0]
 80112be:	6802      	ldr	r2, [r0, #0]
 80112c0:	151b      	asrs	r3, r3, #20
 80112c2:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80112c6:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80112ca:	441a      	add	r2, r3
 80112cc:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80112d0:	6002      	str	r2, [r0, #0]
 80112d2:	ec53 2b10 	vmov	r2, r3, d0
 80112d6:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
 80112da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80112de:	ec43 2b10 	vmov	d0, r2, r3
 80112e2:	4770      	bx	lr
 80112e4:	f3af 8000 	nop.w
 80112e8:	00000000 	.word	0x00000000
 80112ec:	43500000 	.word	0x43500000
 80112f0:	7fefffff 	.word	0x7fefffff
 80112f4:	7ff00000 	.word	0x7ff00000

080112f8 <register_fini>:
 80112f8:	4b02      	ldr	r3, [pc, #8]	@ (8011304 <register_fini+0xc>)
 80112fa:	b113      	cbz	r3, 8011302 <register_fini+0xa>
 80112fc:	4802      	ldr	r0, [pc, #8]	@ (8011308 <register_fini+0x10>)
 80112fe:	f000 b805 	b.w	801130c <atexit>
 8011302:	4770      	bx	lr
 8011304:	00000000 	.word	0x00000000
 8011308:	080145f1 	.word	0x080145f1

0801130c <atexit>:
 801130c:	2300      	movs	r3, #0
 801130e:	4601      	mov	r1, r0
 8011310:	461a      	mov	r2, r3
 8011312:	4618      	mov	r0, r3
 8011314:	f003 b980 	b.w	8014618 <__register_exitproc>

08011318 <quorem>:
 8011318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801131c:	6903      	ldr	r3, [r0, #16]
 801131e:	690c      	ldr	r4, [r1, #16]
 8011320:	42a3      	cmp	r3, r4
 8011322:	4607      	mov	r7, r0
 8011324:	db7e      	blt.n	8011424 <quorem+0x10c>
 8011326:	3c01      	subs	r4, #1
 8011328:	f101 0814 	add.w	r8, r1, #20
 801132c:	00a3      	lsls	r3, r4, #2
 801132e:	f100 0514 	add.w	r5, r0, #20
 8011332:	9300      	str	r3, [sp, #0]
 8011334:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011338:	9301      	str	r3, [sp, #4]
 801133a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801133e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011342:	3301      	adds	r3, #1
 8011344:	429a      	cmp	r2, r3
 8011346:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801134a:	fbb2 f6f3 	udiv	r6, r2, r3
 801134e:	d32e      	bcc.n	80113ae <quorem+0x96>
 8011350:	f04f 0a00 	mov.w	sl, #0
 8011354:	46c4      	mov	ip, r8
 8011356:	46ae      	mov	lr, r5
 8011358:	46d3      	mov	fp, sl
 801135a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801135e:	b298      	uxth	r0, r3
 8011360:	fb06 a000 	mla	r0, r6, r0, sl
 8011364:	0c02      	lsrs	r2, r0, #16
 8011366:	0c1b      	lsrs	r3, r3, #16
 8011368:	fb06 2303 	mla	r3, r6, r3, r2
 801136c:	f8de 2000 	ldr.w	r2, [lr]
 8011370:	b280      	uxth	r0, r0
 8011372:	b292      	uxth	r2, r2
 8011374:	1a12      	subs	r2, r2, r0
 8011376:	445a      	add	r2, fp
 8011378:	f8de 0000 	ldr.w	r0, [lr]
 801137c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011380:	b29b      	uxth	r3, r3
 8011382:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011386:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801138a:	b292      	uxth	r2, r2
 801138c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011390:	45e1      	cmp	r9, ip
 8011392:	f84e 2b04 	str.w	r2, [lr], #4
 8011396:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801139a:	d2de      	bcs.n	801135a <quorem+0x42>
 801139c:	9b00      	ldr	r3, [sp, #0]
 801139e:	58eb      	ldr	r3, [r5, r3]
 80113a0:	b92b      	cbnz	r3, 80113ae <quorem+0x96>
 80113a2:	9b01      	ldr	r3, [sp, #4]
 80113a4:	3b04      	subs	r3, #4
 80113a6:	429d      	cmp	r5, r3
 80113a8:	461a      	mov	r2, r3
 80113aa:	d32f      	bcc.n	801140c <quorem+0xf4>
 80113ac:	613c      	str	r4, [r7, #16]
 80113ae:	4638      	mov	r0, r7
 80113b0:	f002 fcfa 	bl	8013da8 <__mcmp>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	db25      	blt.n	8011404 <quorem+0xec>
 80113b8:	4629      	mov	r1, r5
 80113ba:	2000      	movs	r0, #0
 80113bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80113c0:	f8d1 c000 	ldr.w	ip, [r1]
 80113c4:	fa1f fe82 	uxth.w	lr, r2
 80113c8:	fa1f f38c 	uxth.w	r3, ip
 80113cc:	eba3 030e 	sub.w	r3, r3, lr
 80113d0:	4403      	add	r3, r0
 80113d2:	0c12      	lsrs	r2, r2, #16
 80113d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80113d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80113dc:	b29b      	uxth	r3, r3
 80113de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80113e2:	45c1      	cmp	r9, r8
 80113e4:	f841 3b04 	str.w	r3, [r1], #4
 80113e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80113ec:	d2e6      	bcs.n	80113bc <quorem+0xa4>
 80113ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113f6:	b922      	cbnz	r2, 8011402 <quorem+0xea>
 80113f8:	3b04      	subs	r3, #4
 80113fa:	429d      	cmp	r5, r3
 80113fc:	461a      	mov	r2, r3
 80113fe:	d30b      	bcc.n	8011418 <quorem+0x100>
 8011400:	613c      	str	r4, [r7, #16]
 8011402:	3601      	adds	r6, #1
 8011404:	4630      	mov	r0, r6
 8011406:	b003      	add	sp, #12
 8011408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801140c:	6812      	ldr	r2, [r2, #0]
 801140e:	3b04      	subs	r3, #4
 8011410:	2a00      	cmp	r2, #0
 8011412:	d1cb      	bne.n	80113ac <quorem+0x94>
 8011414:	3c01      	subs	r4, #1
 8011416:	e7c6      	b.n	80113a6 <quorem+0x8e>
 8011418:	6812      	ldr	r2, [r2, #0]
 801141a:	3b04      	subs	r3, #4
 801141c:	2a00      	cmp	r2, #0
 801141e:	d1ef      	bne.n	8011400 <quorem+0xe8>
 8011420:	3c01      	subs	r4, #1
 8011422:	e7ea      	b.n	80113fa <quorem+0xe2>
 8011424:	2000      	movs	r0, #0
 8011426:	e7ee      	b.n	8011406 <quorem+0xee>

08011428 <_dtoa_r>:
 8011428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801142c:	ed2d 8b02 	vpush	{d8}
 8011430:	b091      	sub	sp, #68	@ 0x44
 8011432:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011436:	9107      	str	r1, [sp, #28]
 8011438:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801143a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801143c:	9209      	str	r2, [sp, #36]	@ 0x24
 801143e:	ec55 4b10 	vmov	r4, r5, d0
 8011442:	4681      	mov	r9, r0
 8011444:	930d      	str	r3, [sp, #52]	@ 0x34
 8011446:	b149      	cbz	r1, 801145c <_dtoa_r+0x34>
 8011448:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801144a:	604a      	str	r2, [r1, #4]
 801144c:	2301      	movs	r3, #1
 801144e:	4093      	lsls	r3, r2
 8011450:	608b      	str	r3, [r1, #8]
 8011452:	f002 faa2 	bl	801399a <_Bfree>
 8011456:	2300      	movs	r3, #0
 8011458:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 801145c:	1e2b      	subs	r3, r5, #0
 801145e:	bfbb      	ittet	lt
 8011460:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011464:	9303      	strlt	r3, [sp, #12]
 8011466:	2300      	movge	r3, #0
 8011468:	2201      	movlt	r2, #1
 801146a:	bfac      	ite	ge
 801146c:	6033      	strge	r3, [r6, #0]
 801146e:	6032      	strlt	r2, [r6, #0]
 8011470:	4b91      	ldr	r3, [pc, #580]	@ (80116b8 <_dtoa_r+0x290>)
 8011472:	9e03      	ldr	r6, [sp, #12]
 8011474:	43b3      	bics	r3, r6
 8011476:	d114      	bne.n	80114a2 <_dtoa_r+0x7a>
 8011478:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801147a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011484:	4323      	orrs	r3, r4
 8011486:	f000 84df 	beq.w	8011e48 <_dtoa_r+0xa20>
 801148a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801148c:	4f8b      	ldr	r7, [pc, #556]	@ (80116bc <_dtoa_r+0x294>)
 801148e:	b113      	cbz	r3, 8011496 <_dtoa_r+0x6e>
 8011490:	1cfb      	adds	r3, r7, #3
 8011492:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011494:	6013      	str	r3, [r2, #0]
 8011496:	4638      	mov	r0, r7
 8011498:	b011      	add	sp, #68	@ 0x44
 801149a:	ecbd 8b02 	vpop	{d8}
 801149e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80114a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80114aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ae:	d109      	bne.n	80114c4 <_dtoa_r+0x9c>
 80114b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80114b2:	2301      	movs	r3, #1
 80114b4:	6013      	str	r3, [r2, #0]
 80114b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80114b8:	b113      	cbz	r3, 80114c0 <_dtoa_r+0x98>
 80114ba:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80114bc:	4b80      	ldr	r3, [pc, #512]	@ (80116c0 <_dtoa_r+0x298>)
 80114be:	6013      	str	r3, [r2, #0]
 80114c0:	4f80      	ldr	r7, [pc, #512]	@ (80116c4 <_dtoa_r+0x29c>)
 80114c2:	e7e8      	b.n	8011496 <_dtoa_r+0x6e>
 80114c4:	aa0e      	add	r2, sp, #56	@ 0x38
 80114c6:	a90f      	add	r1, sp, #60	@ 0x3c
 80114c8:	4648      	mov	r0, r9
 80114ca:	eeb0 0b48 	vmov.f64	d0, d8
 80114ce:	f002 fd1b 	bl	8013f08 <__d2b>
 80114d2:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80114d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80114d8:	9001      	str	r0, [sp, #4]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d045      	beq.n	801156a <_dtoa_r+0x142>
 80114de:	eeb0 7b48 	vmov.f64	d7, d8
 80114e2:	ee18 1a90 	vmov	r1, s17
 80114e6:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80114ea:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80114ee:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80114f2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80114f6:	2500      	movs	r5, #0
 80114f8:	ee07 1a90 	vmov	s15, r1
 80114fc:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8011500:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 80116a0 <_dtoa_r+0x278>
 8011504:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011508:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 80116a8 <_dtoa_r+0x280>
 801150c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011510:	ed9f 5b67 	vldr	d5, [pc, #412]	@ 80116b0 <_dtoa_r+0x288>
 8011514:	ee07 3a90 	vmov	s15, r3
 8011518:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801151c:	eeb0 7b46 	vmov.f64	d7, d6
 8011520:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011524:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011528:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801152c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011530:	ee16 8a90 	vmov	r8, s13
 8011534:	d508      	bpl.n	8011548 <_dtoa_r+0x120>
 8011536:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801153a:	eeb4 6b47 	vcmp.f64	d6, d7
 801153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011542:	bf18      	it	ne
 8011544:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8011548:	f1b8 0f16 	cmp.w	r8, #22
 801154c:	d82b      	bhi.n	80115a6 <_dtoa_r+0x17e>
 801154e:	495e      	ldr	r1, [pc, #376]	@ (80116c8 <_dtoa_r+0x2a0>)
 8011550:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8011554:	ed91 7b00 	vldr	d7, [r1]
 8011558:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011560:	d501      	bpl.n	8011566 <_dtoa_r+0x13e>
 8011562:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011566:	2100      	movs	r1, #0
 8011568:	e01e      	b.n	80115a8 <_dtoa_r+0x180>
 801156a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801156c:	4413      	add	r3, r2
 801156e:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011572:	2920      	cmp	r1, #32
 8011574:	bfc1      	itttt	gt
 8011576:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801157a:	408e      	lslgt	r6, r1
 801157c:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8011580:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011584:	bfd6      	itet	le
 8011586:	f1c1 0120 	rsble	r1, r1, #32
 801158a:	4331      	orrgt	r1, r6
 801158c:	fa04 f101 	lslle.w	r1, r4, r1
 8011590:	ee07 1a90 	vmov	s15, r1
 8011594:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011598:	3b01      	subs	r3, #1
 801159a:	ee17 1a90 	vmov	r1, s15
 801159e:	2501      	movs	r5, #1
 80115a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80115a4:	e7a8      	b.n	80114f8 <_dtoa_r+0xd0>
 80115a6:	2101      	movs	r1, #1
 80115a8:	1ad2      	subs	r2, r2, r3
 80115aa:	1e53      	subs	r3, r2, #1
 80115ac:	9306      	str	r3, [sp, #24]
 80115ae:	bf45      	ittet	mi
 80115b0:	f1c2 0301 	rsbmi	r3, r2, #1
 80115b4:	9305      	strmi	r3, [sp, #20]
 80115b6:	2300      	movpl	r3, #0
 80115b8:	2300      	movmi	r3, #0
 80115ba:	bf4c      	ite	mi
 80115bc:	9306      	strmi	r3, [sp, #24]
 80115be:	9305      	strpl	r3, [sp, #20]
 80115c0:	f1b8 0f00 	cmp.w	r8, #0
 80115c4:	910c      	str	r1, [sp, #48]	@ 0x30
 80115c6:	db18      	blt.n	80115fa <_dtoa_r+0x1d2>
 80115c8:	9b06      	ldr	r3, [sp, #24]
 80115ca:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80115ce:	4443      	add	r3, r8
 80115d0:	9306      	str	r3, [sp, #24]
 80115d2:	2300      	movs	r3, #0
 80115d4:	9a07      	ldr	r2, [sp, #28]
 80115d6:	2a09      	cmp	r2, #9
 80115d8:	d84a      	bhi.n	8011670 <_dtoa_r+0x248>
 80115da:	2a05      	cmp	r2, #5
 80115dc:	bfc4      	itt	gt
 80115de:	3a04      	subgt	r2, #4
 80115e0:	9207      	strgt	r2, [sp, #28]
 80115e2:	9a07      	ldr	r2, [sp, #28]
 80115e4:	f1a2 0202 	sub.w	r2, r2, #2
 80115e8:	bfcc      	ite	gt
 80115ea:	2400      	movgt	r4, #0
 80115ec:	2401      	movle	r4, #1
 80115ee:	2a03      	cmp	r2, #3
 80115f0:	d849      	bhi.n	8011686 <_dtoa_r+0x25e>
 80115f2:	e8df f002 	tbb	[pc, r2]
 80115f6:	2f0b      	.short	0x2f0b
 80115f8:	3b2d      	.short	0x3b2d
 80115fa:	9b05      	ldr	r3, [sp, #20]
 80115fc:	2200      	movs	r2, #0
 80115fe:	eba3 0308 	sub.w	r3, r3, r8
 8011602:	9305      	str	r3, [sp, #20]
 8011604:	920a      	str	r2, [sp, #40]	@ 0x28
 8011606:	f1c8 0300 	rsb	r3, r8, #0
 801160a:	e7e3      	b.n	80115d4 <_dtoa_r+0x1ac>
 801160c:	2200      	movs	r2, #0
 801160e:	9208      	str	r2, [sp, #32]
 8011610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011612:	2a00      	cmp	r2, #0
 8011614:	dc3a      	bgt.n	801168c <_dtoa_r+0x264>
 8011616:	f04f 0b01 	mov.w	fp, #1
 801161a:	46da      	mov	sl, fp
 801161c:	465a      	mov	r2, fp
 801161e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8011622:	2100      	movs	r1, #0
 8011624:	2004      	movs	r0, #4
 8011626:	f100 0614 	add.w	r6, r0, #20
 801162a:	4296      	cmp	r6, r2
 801162c:	d933      	bls.n	8011696 <_dtoa_r+0x26e>
 801162e:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 8011632:	4648      	mov	r0, r9
 8011634:	9304      	str	r3, [sp, #16]
 8011636:	f002 f98b 	bl	8013950 <_Balloc>
 801163a:	9b04      	ldr	r3, [sp, #16]
 801163c:	4607      	mov	r7, r0
 801163e:	2800      	cmp	r0, #0
 8011640:	d148      	bne.n	80116d4 <_dtoa_r+0x2ac>
 8011642:	4b22      	ldr	r3, [pc, #136]	@ (80116cc <_dtoa_r+0x2a4>)
 8011644:	4602      	mov	r2, r0
 8011646:	f240 11af 	movw	r1, #431	@ 0x1af
 801164a:	4821      	ldr	r0, [pc, #132]	@ (80116d0 <_dtoa_r+0x2a8>)
 801164c:	f003 f824 	bl	8014698 <__assert_func>
 8011650:	2201      	movs	r2, #1
 8011652:	e7dc      	b.n	801160e <_dtoa_r+0x1e6>
 8011654:	2200      	movs	r2, #0
 8011656:	9208      	str	r2, [sp, #32]
 8011658:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801165a:	eb08 0b02 	add.w	fp, r8, r2
 801165e:	f10b 0a01 	add.w	sl, fp, #1
 8011662:	4652      	mov	r2, sl
 8011664:	2a01      	cmp	r2, #1
 8011666:	bfb8      	it	lt
 8011668:	2201      	movlt	r2, #1
 801166a:	e7da      	b.n	8011622 <_dtoa_r+0x1fa>
 801166c:	2201      	movs	r2, #1
 801166e:	e7f2      	b.n	8011656 <_dtoa_r+0x22e>
 8011670:	2401      	movs	r4, #1
 8011672:	2200      	movs	r2, #0
 8011674:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011678:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801167c:	2100      	movs	r1, #0
 801167e:	46da      	mov	sl, fp
 8011680:	2212      	movs	r2, #18
 8011682:	9109      	str	r1, [sp, #36]	@ 0x24
 8011684:	e7cd      	b.n	8011622 <_dtoa_r+0x1fa>
 8011686:	2201      	movs	r2, #1
 8011688:	9208      	str	r2, [sp, #32]
 801168a:	e7f5      	b.n	8011678 <_dtoa_r+0x250>
 801168c:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8011690:	46da      	mov	sl, fp
 8011692:	465a      	mov	r2, fp
 8011694:	e7c5      	b.n	8011622 <_dtoa_r+0x1fa>
 8011696:	3101      	adds	r1, #1
 8011698:	0040      	lsls	r0, r0, #1
 801169a:	e7c4      	b.n	8011626 <_dtoa_r+0x1fe>
 801169c:	f3af 8000 	nop.w
 80116a0:	636f4361 	.word	0x636f4361
 80116a4:	3fd287a7 	.word	0x3fd287a7
 80116a8:	8b60c8b3 	.word	0x8b60c8b3
 80116ac:	3fc68a28 	.word	0x3fc68a28
 80116b0:	509f79fb 	.word	0x509f79fb
 80116b4:	3fd34413 	.word	0x3fd34413
 80116b8:	7ff00000 	.word	0x7ff00000
 80116bc:	0801624a 	.word	0x0801624a
 80116c0:	0801624f 	.word	0x0801624f
 80116c4:	0801624e 	.word	0x0801624e
 80116c8:	08016378 	.word	0x08016378
 80116cc:	08016250 	.word	0x08016250
 80116d0:	08016261 	.word	0x08016261
 80116d4:	f1ba 0f0e 	cmp.w	sl, #14
 80116d8:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 80116dc:	d86f      	bhi.n	80117be <_dtoa_r+0x396>
 80116de:	2c00      	cmp	r4, #0
 80116e0:	d06d      	beq.n	80117be <_dtoa_r+0x396>
 80116e2:	f1b8 0f00 	cmp.w	r8, #0
 80116e6:	f340 80c2 	ble.w	801186e <_dtoa_r+0x446>
 80116ea:	4aca      	ldr	r2, [pc, #808]	@ (8011a14 <_dtoa_r+0x5ec>)
 80116ec:	f008 010f 	and.w	r1, r8, #15
 80116f0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80116f4:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80116f8:	ed92 7b00 	vldr	d7, [r2]
 80116fc:	ea4f 1128 	mov.w	r1, r8, asr #4
 8011700:	f000 80a9 	beq.w	8011856 <_dtoa_r+0x42e>
 8011704:	4ac4      	ldr	r2, [pc, #784]	@ (8011a18 <_dtoa_r+0x5f0>)
 8011706:	ed92 6b08 	vldr	d6, [r2, #32]
 801170a:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801170e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011712:	f001 010f 	and.w	r1, r1, #15
 8011716:	2203      	movs	r2, #3
 8011718:	48bf      	ldr	r0, [pc, #764]	@ (8011a18 <_dtoa_r+0x5f0>)
 801171a:	2900      	cmp	r1, #0
 801171c:	f040 809d 	bne.w	801185a <_dtoa_r+0x432>
 8011720:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011724:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011728:	ed8d 7b02 	vstr	d7, [sp, #8]
 801172c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801172e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011732:	2900      	cmp	r1, #0
 8011734:	f000 80c1 	beq.w	80118ba <_dtoa_r+0x492>
 8011738:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801173c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011744:	f140 80b9 	bpl.w	80118ba <_dtoa_r+0x492>
 8011748:	f1ba 0f00 	cmp.w	sl, #0
 801174c:	f000 80b5 	beq.w	80118ba <_dtoa_r+0x492>
 8011750:	f1bb 0f00 	cmp.w	fp, #0
 8011754:	dd31      	ble.n	80117ba <_dtoa_r+0x392>
 8011756:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801175a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801175e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011762:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8011766:	9104      	str	r1, [sp, #16]
 8011768:	3201      	adds	r2, #1
 801176a:	465c      	mov	r4, fp
 801176c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011770:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8011774:	ee07 2a90 	vmov	s15, r2
 8011778:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801177c:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011780:	ee15 2a90 	vmov	r2, s11
 8011784:	ec51 0b15 	vmov	r0, r1, d5
 8011788:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801178c:	2c00      	cmp	r4, #0
 801178e:	f040 8098 	bne.w	80118c2 <_dtoa_r+0x49a>
 8011792:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011796:	ee36 6b47 	vsub.f64	d6, d6, d7
 801179a:	ec41 0b17 	vmov	d7, r0, r1
 801179e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80117a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a6:	f300 8260 	bgt.w	8011c6a <_dtoa_r+0x842>
 80117aa:	eeb1 7b47 	vneg.f64	d7, d7
 80117ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80117b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117b6:	f100 80f5 	bmi.w	80119a4 <_dtoa_r+0x57c>
 80117ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80117be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80117c0:	2a00      	cmp	r2, #0
 80117c2:	f2c0 812b 	blt.w	8011a1c <_dtoa_r+0x5f4>
 80117c6:	f1b8 0f0e 	cmp.w	r8, #14
 80117ca:	f300 8127 	bgt.w	8011a1c <_dtoa_r+0x5f4>
 80117ce:	4b91      	ldr	r3, [pc, #580]	@ (8011a14 <_dtoa_r+0x5ec>)
 80117d0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80117d4:	ed93 6b00 	vldr	d6, [r3]
 80117d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117da:	2b00      	cmp	r3, #0
 80117dc:	da03      	bge.n	80117e6 <_dtoa_r+0x3be>
 80117de:	f1ba 0f00 	cmp.w	sl, #0
 80117e2:	f340 80d2 	ble.w	801198a <_dtoa_r+0x562>
 80117e6:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80117ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80117ee:	463e      	mov	r6, r7
 80117f0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80117f4:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80117f8:	ee15 3a10 	vmov	r3, s10
 80117fc:	3330      	adds	r3, #48	@ 0x30
 80117fe:	f806 3b01 	strb.w	r3, [r6], #1
 8011802:	1bf3      	subs	r3, r6, r7
 8011804:	459a      	cmp	sl, r3
 8011806:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801180a:	eea3 7b46 	vfms.f64	d7, d3, d6
 801180e:	f040 80f8 	bne.w	8011a02 <_dtoa_r+0x5da>
 8011812:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011816:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801181e:	f300 80dd 	bgt.w	80119dc <_dtoa_r+0x5b4>
 8011822:	eeb4 7b46 	vcmp.f64	d7, d6
 8011826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182a:	d104      	bne.n	8011836 <_dtoa_r+0x40e>
 801182c:	ee15 3a10 	vmov	r3, s10
 8011830:	07db      	lsls	r3, r3, #31
 8011832:	f100 80d3 	bmi.w	80119dc <_dtoa_r+0x5b4>
 8011836:	9901      	ldr	r1, [sp, #4]
 8011838:	4648      	mov	r0, r9
 801183a:	f002 f8ae 	bl	801399a <_Bfree>
 801183e:	2300      	movs	r3, #0
 8011840:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011842:	7033      	strb	r3, [r6, #0]
 8011844:	f108 0301 	add.w	r3, r8, #1
 8011848:	6013      	str	r3, [r2, #0]
 801184a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801184c:	2b00      	cmp	r3, #0
 801184e:	f43f ae22 	beq.w	8011496 <_dtoa_r+0x6e>
 8011852:	601e      	str	r6, [r3, #0]
 8011854:	e61f      	b.n	8011496 <_dtoa_r+0x6e>
 8011856:	2202      	movs	r2, #2
 8011858:	e75e      	b.n	8011718 <_dtoa_r+0x2f0>
 801185a:	07cc      	lsls	r4, r1, #31
 801185c:	d504      	bpl.n	8011868 <_dtoa_r+0x440>
 801185e:	ed90 6b00 	vldr	d6, [r0]
 8011862:	3201      	adds	r2, #1
 8011864:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011868:	1049      	asrs	r1, r1, #1
 801186a:	3008      	adds	r0, #8
 801186c:	e755      	b.n	801171a <_dtoa_r+0x2f2>
 801186e:	d022      	beq.n	80118b6 <_dtoa_r+0x48e>
 8011870:	f1c8 0100 	rsb	r1, r8, #0
 8011874:	4a67      	ldr	r2, [pc, #412]	@ (8011a14 <_dtoa_r+0x5ec>)
 8011876:	f001 000f 	and.w	r0, r1, #15
 801187a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801187e:	ed92 7b00 	vldr	d7, [r2]
 8011882:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011886:	ed8d 7b02 	vstr	d7, [sp, #8]
 801188a:	4863      	ldr	r0, [pc, #396]	@ (8011a18 <_dtoa_r+0x5f0>)
 801188c:	1109      	asrs	r1, r1, #4
 801188e:	2400      	movs	r4, #0
 8011890:	2202      	movs	r2, #2
 8011892:	b929      	cbnz	r1, 80118a0 <_dtoa_r+0x478>
 8011894:	2c00      	cmp	r4, #0
 8011896:	f43f af49 	beq.w	801172c <_dtoa_r+0x304>
 801189a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801189e:	e745      	b.n	801172c <_dtoa_r+0x304>
 80118a0:	07ce      	lsls	r6, r1, #31
 80118a2:	d505      	bpl.n	80118b0 <_dtoa_r+0x488>
 80118a4:	ed90 6b00 	vldr	d6, [r0]
 80118a8:	3201      	adds	r2, #1
 80118aa:	2401      	movs	r4, #1
 80118ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80118b0:	1049      	asrs	r1, r1, #1
 80118b2:	3008      	adds	r0, #8
 80118b4:	e7ed      	b.n	8011892 <_dtoa_r+0x46a>
 80118b6:	2202      	movs	r2, #2
 80118b8:	e738      	b.n	801172c <_dtoa_r+0x304>
 80118ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80118be:	4654      	mov	r4, sl
 80118c0:	e754      	b.n	801176c <_dtoa_r+0x344>
 80118c2:	4a54      	ldr	r2, [pc, #336]	@ (8011a14 <_dtoa_r+0x5ec>)
 80118c4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80118c8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80118cc:	9a08      	ldr	r2, [sp, #32]
 80118ce:	ec41 0b17 	vmov	d7, r0, r1
 80118d2:	443c      	add	r4, r7
 80118d4:	b34a      	cbz	r2, 801192a <_dtoa_r+0x502>
 80118d6:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80118da:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80118de:	463e      	mov	r6, r7
 80118e0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80118e4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80118e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80118ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80118f0:	ee14 2a90 	vmov	r2, s9
 80118f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80118f8:	3230      	adds	r2, #48	@ 0x30
 80118fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80118fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011906:	f806 2b01 	strb.w	r2, [r6], #1
 801190a:	d438      	bmi.n	801197e <_dtoa_r+0x556>
 801190c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8011910:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011918:	d462      	bmi.n	80119e0 <_dtoa_r+0x5b8>
 801191a:	42a6      	cmp	r6, r4
 801191c:	f43f af4d 	beq.w	80117ba <_dtoa_r+0x392>
 8011920:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011924:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011928:	e7e0      	b.n	80118ec <_dtoa_r+0x4c4>
 801192a:	4621      	mov	r1, r4
 801192c:	463e      	mov	r6, r7
 801192e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011932:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011936:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801193a:	ee14 2a90 	vmov	r2, s9
 801193e:	3230      	adds	r2, #48	@ 0x30
 8011940:	f806 2b01 	strb.w	r2, [r6], #1
 8011944:	42a6      	cmp	r6, r4
 8011946:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801194a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801194e:	d119      	bne.n	8011984 <_dtoa_r+0x55c>
 8011950:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8011954:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011958:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011960:	dc3e      	bgt.n	80119e0 <_dtoa_r+0x5b8>
 8011962:	ee35 5b47 	vsub.f64	d5, d5, d7
 8011966:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196e:	f57f af24 	bpl.w	80117ba <_dtoa_r+0x392>
 8011972:	460e      	mov	r6, r1
 8011974:	3901      	subs	r1, #1
 8011976:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801197a:	2b30      	cmp	r3, #48	@ 0x30
 801197c:	d0f9      	beq.n	8011972 <_dtoa_r+0x54a>
 801197e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011982:	e758      	b.n	8011836 <_dtoa_r+0x40e>
 8011984:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011988:	e7d5      	b.n	8011936 <_dtoa_r+0x50e>
 801198a:	d10b      	bne.n	80119a4 <_dtoa_r+0x57c>
 801198c:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011990:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011994:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011998:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a0:	f2c0 8160 	blt.w	8011c64 <_dtoa_r+0x83c>
 80119a4:	2400      	movs	r4, #0
 80119a6:	4625      	mov	r5, r4
 80119a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119aa:	43db      	mvns	r3, r3
 80119ac:	9304      	str	r3, [sp, #16]
 80119ae:	463e      	mov	r6, r7
 80119b0:	f04f 0800 	mov.w	r8, #0
 80119b4:	4621      	mov	r1, r4
 80119b6:	4648      	mov	r0, r9
 80119b8:	f001 ffef 	bl	801399a <_Bfree>
 80119bc:	2d00      	cmp	r5, #0
 80119be:	d0de      	beq.n	801197e <_dtoa_r+0x556>
 80119c0:	f1b8 0f00 	cmp.w	r8, #0
 80119c4:	d005      	beq.n	80119d2 <_dtoa_r+0x5aa>
 80119c6:	45a8      	cmp	r8, r5
 80119c8:	d003      	beq.n	80119d2 <_dtoa_r+0x5aa>
 80119ca:	4641      	mov	r1, r8
 80119cc:	4648      	mov	r0, r9
 80119ce:	f001 ffe4 	bl	801399a <_Bfree>
 80119d2:	4629      	mov	r1, r5
 80119d4:	4648      	mov	r0, r9
 80119d6:	f001 ffe0 	bl	801399a <_Bfree>
 80119da:	e7d0      	b.n	801197e <_dtoa_r+0x556>
 80119dc:	f8cd 8010 	str.w	r8, [sp, #16]
 80119e0:	4633      	mov	r3, r6
 80119e2:	461e      	mov	r6, r3
 80119e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80119e8:	2a39      	cmp	r2, #57	@ 0x39
 80119ea:	d106      	bne.n	80119fa <_dtoa_r+0x5d2>
 80119ec:	429f      	cmp	r7, r3
 80119ee:	d1f8      	bne.n	80119e2 <_dtoa_r+0x5ba>
 80119f0:	9a04      	ldr	r2, [sp, #16]
 80119f2:	3201      	adds	r2, #1
 80119f4:	9204      	str	r2, [sp, #16]
 80119f6:	2230      	movs	r2, #48	@ 0x30
 80119f8:	703a      	strb	r2, [r7, #0]
 80119fa:	781a      	ldrb	r2, [r3, #0]
 80119fc:	3201      	adds	r2, #1
 80119fe:	701a      	strb	r2, [r3, #0]
 8011a00:	e7bd      	b.n	801197e <_dtoa_r+0x556>
 8011a02:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011a06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a0e:	f47f aeef 	bne.w	80117f0 <_dtoa_r+0x3c8>
 8011a12:	e710      	b.n	8011836 <_dtoa_r+0x40e>
 8011a14:	08016378 	.word	0x08016378
 8011a18:	08016350 	.word	0x08016350
 8011a1c:	9908      	ldr	r1, [sp, #32]
 8011a1e:	2900      	cmp	r1, #0
 8011a20:	f000 80e3 	beq.w	8011bea <_dtoa_r+0x7c2>
 8011a24:	9907      	ldr	r1, [sp, #28]
 8011a26:	2901      	cmp	r1, #1
 8011a28:	f300 80c8 	bgt.w	8011bbc <_dtoa_r+0x794>
 8011a2c:	2d00      	cmp	r5, #0
 8011a2e:	f000 80c1 	beq.w	8011bb4 <_dtoa_r+0x78c>
 8011a32:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011a36:	9e05      	ldr	r6, [sp, #20]
 8011a38:	461c      	mov	r4, r3
 8011a3a:	9304      	str	r3, [sp, #16]
 8011a3c:	9b05      	ldr	r3, [sp, #20]
 8011a3e:	4413      	add	r3, r2
 8011a40:	9305      	str	r3, [sp, #20]
 8011a42:	9b06      	ldr	r3, [sp, #24]
 8011a44:	2101      	movs	r1, #1
 8011a46:	4413      	add	r3, r2
 8011a48:	4648      	mov	r0, r9
 8011a4a:	9306      	str	r3, [sp, #24]
 8011a4c:	f002 f840 	bl	8013ad0 <__i2b>
 8011a50:	9b04      	ldr	r3, [sp, #16]
 8011a52:	4605      	mov	r5, r0
 8011a54:	b166      	cbz	r6, 8011a70 <_dtoa_r+0x648>
 8011a56:	9a06      	ldr	r2, [sp, #24]
 8011a58:	2a00      	cmp	r2, #0
 8011a5a:	dd09      	ble.n	8011a70 <_dtoa_r+0x648>
 8011a5c:	42b2      	cmp	r2, r6
 8011a5e:	9905      	ldr	r1, [sp, #20]
 8011a60:	bfa8      	it	ge
 8011a62:	4632      	movge	r2, r6
 8011a64:	1a89      	subs	r1, r1, r2
 8011a66:	9105      	str	r1, [sp, #20]
 8011a68:	9906      	ldr	r1, [sp, #24]
 8011a6a:	1ab6      	subs	r6, r6, r2
 8011a6c:	1a8a      	subs	r2, r1, r2
 8011a6e:	9206      	str	r2, [sp, #24]
 8011a70:	b1fb      	cbz	r3, 8011ab2 <_dtoa_r+0x68a>
 8011a72:	9a08      	ldr	r2, [sp, #32]
 8011a74:	2a00      	cmp	r2, #0
 8011a76:	f000 80bc 	beq.w	8011bf2 <_dtoa_r+0x7ca>
 8011a7a:	b19c      	cbz	r4, 8011aa4 <_dtoa_r+0x67c>
 8011a7c:	4629      	mov	r1, r5
 8011a7e:	4622      	mov	r2, r4
 8011a80:	4648      	mov	r0, r9
 8011a82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a84:	f002 f8e4 	bl	8013c50 <__pow5mult>
 8011a88:	9a01      	ldr	r2, [sp, #4]
 8011a8a:	4601      	mov	r1, r0
 8011a8c:	4605      	mov	r5, r0
 8011a8e:	4648      	mov	r0, r9
 8011a90:	f002 f834 	bl	8013afc <__multiply>
 8011a94:	9901      	ldr	r1, [sp, #4]
 8011a96:	9004      	str	r0, [sp, #16]
 8011a98:	4648      	mov	r0, r9
 8011a9a:	f001 ff7e 	bl	801399a <_Bfree>
 8011a9e:	9a04      	ldr	r2, [sp, #16]
 8011aa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011aa2:	9201      	str	r2, [sp, #4]
 8011aa4:	1b1a      	subs	r2, r3, r4
 8011aa6:	d004      	beq.n	8011ab2 <_dtoa_r+0x68a>
 8011aa8:	9901      	ldr	r1, [sp, #4]
 8011aaa:	4648      	mov	r0, r9
 8011aac:	f002 f8d0 	bl	8013c50 <__pow5mult>
 8011ab0:	9001      	str	r0, [sp, #4]
 8011ab2:	2101      	movs	r1, #1
 8011ab4:	4648      	mov	r0, r9
 8011ab6:	f002 f80b 	bl	8013ad0 <__i2b>
 8011aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011abc:	4604      	mov	r4, r0
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	f000 81cb 	beq.w	8011e5a <_dtoa_r+0xa32>
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	4601      	mov	r1, r0
 8011ac8:	4648      	mov	r0, r9
 8011aca:	f002 f8c1 	bl	8013c50 <__pow5mult>
 8011ace:	9b07      	ldr	r3, [sp, #28]
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	f300 8095 	bgt.w	8011c02 <_dtoa_r+0x7da>
 8011ad8:	9b02      	ldr	r3, [sp, #8]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	f040 808b 	bne.w	8011bf6 <_dtoa_r+0x7ce>
 8011ae0:	9b03      	ldr	r3, [sp, #12]
 8011ae2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011ae6:	2a00      	cmp	r2, #0
 8011ae8:	f040 8087 	bne.w	8011bfa <_dtoa_r+0x7d2>
 8011aec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011af0:	0d12      	lsrs	r2, r2, #20
 8011af2:	0512      	lsls	r2, r2, #20
 8011af4:	2a00      	cmp	r2, #0
 8011af6:	f000 8082 	beq.w	8011bfe <_dtoa_r+0x7d6>
 8011afa:	9b05      	ldr	r3, [sp, #20]
 8011afc:	3301      	adds	r3, #1
 8011afe:	9305      	str	r3, [sp, #20]
 8011b00:	9b06      	ldr	r3, [sp, #24]
 8011b02:	3301      	adds	r3, #1
 8011b04:	9306      	str	r3, [sp, #24]
 8011b06:	2301      	movs	r3, #1
 8011b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	f000 81aa 	beq.w	8011e66 <_dtoa_r+0xa3e>
 8011b12:	6922      	ldr	r2, [r4, #16]
 8011b14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011b18:	6910      	ldr	r0, [r2, #16]
 8011b1a:	f001 ff8d 	bl	8013a38 <__hi0bits>
 8011b1e:	f1c0 0020 	rsb	r0, r0, #32
 8011b22:	9b06      	ldr	r3, [sp, #24]
 8011b24:	4418      	add	r0, r3
 8011b26:	f010 001f 	ands.w	r0, r0, #31
 8011b2a:	d076      	beq.n	8011c1a <_dtoa_r+0x7f2>
 8011b2c:	f1c0 0220 	rsb	r2, r0, #32
 8011b30:	2a04      	cmp	r2, #4
 8011b32:	dd69      	ble.n	8011c08 <_dtoa_r+0x7e0>
 8011b34:	9b05      	ldr	r3, [sp, #20]
 8011b36:	f1c0 001c 	rsb	r0, r0, #28
 8011b3a:	4403      	add	r3, r0
 8011b3c:	9305      	str	r3, [sp, #20]
 8011b3e:	9b06      	ldr	r3, [sp, #24]
 8011b40:	4406      	add	r6, r0
 8011b42:	4403      	add	r3, r0
 8011b44:	9306      	str	r3, [sp, #24]
 8011b46:	9b05      	ldr	r3, [sp, #20]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	dd05      	ble.n	8011b58 <_dtoa_r+0x730>
 8011b4c:	9901      	ldr	r1, [sp, #4]
 8011b4e:	461a      	mov	r2, r3
 8011b50:	4648      	mov	r0, r9
 8011b52:	f002 f8bd 	bl	8013cd0 <__lshift>
 8011b56:	9001      	str	r0, [sp, #4]
 8011b58:	9b06      	ldr	r3, [sp, #24]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	dd05      	ble.n	8011b6a <_dtoa_r+0x742>
 8011b5e:	4621      	mov	r1, r4
 8011b60:	461a      	mov	r2, r3
 8011b62:	4648      	mov	r0, r9
 8011b64:	f002 f8b4 	bl	8013cd0 <__lshift>
 8011b68:	4604      	mov	r4, r0
 8011b6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d056      	beq.n	8011c1e <_dtoa_r+0x7f6>
 8011b70:	9801      	ldr	r0, [sp, #4]
 8011b72:	4621      	mov	r1, r4
 8011b74:	f002 f918 	bl	8013da8 <__mcmp>
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	da50      	bge.n	8011c1e <_dtoa_r+0x7f6>
 8011b7c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011b80:	9304      	str	r3, [sp, #16]
 8011b82:	9901      	ldr	r1, [sp, #4]
 8011b84:	2300      	movs	r3, #0
 8011b86:	220a      	movs	r2, #10
 8011b88:	4648      	mov	r0, r9
 8011b8a:	f001 ff0f 	bl	80139ac <__multadd>
 8011b8e:	9b08      	ldr	r3, [sp, #32]
 8011b90:	9001      	str	r0, [sp, #4]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f000 8169 	beq.w	8011e6a <_dtoa_r+0xa42>
 8011b98:	4629      	mov	r1, r5
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	220a      	movs	r2, #10
 8011b9e:	4648      	mov	r0, r9
 8011ba0:	f001 ff04 	bl	80139ac <__multadd>
 8011ba4:	f1bb 0f00 	cmp.w	fp, #0
 8011ba8:	4605      	mov	r5, r0
 8011baa:	dc64      	bgt.n	8011c76 <_dtoa_r+0x84e>
 8011bac:	9b07      	ldr	r3, [sp, #28]
 8011bae:	2b02      	cmp	r3, #2
 8011bb0:	dc3e      	bgt.n	8011c30 <_dtoa_r+0x808>
 8011bb2:	e060      	b.n	8011c76 <_dtoa_r+0x84e>
 8011bb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011bb6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011bba:	e73c      	b.n	8011a36 <_dtoa_r+0x60e>
 8011bbc:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8011bc0:	42a3      	cmp	r3, r4
 8011bc2:	bfbf      	itttt	lt
 8011bc4:	1ae2      	sublt	r2, r4, r3
 8011bc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011bc8:	189b      	addlt	r3, r3, r2
 8011bca:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8011bcc:	bfae      	itee	ge
 8011bce:	1b1c      	subge	r4, r3, r4
 8011bd0:	4623      	movlt	r3, r4
 8011bd2:	2400      	movlt	r4, #0
 8011bd4:	f1ba 0f00 	cmp.w	sl, #0
 8011bd8:	bfb5      	itete	lt
 8011bda:	9a05      	ldrlt	r2, [sp, #20]
 8011bdc:	9e05      	ldrge	r6, [sp, #20]
 8011bde:	eba2 060a 	sublt.w	r6, r2, sl
 8011be2:	4652      	movge	r2, sl
 8011be4:	bfb8      	it	lt
 8011be6:	2200      	movlt	r2, #0
 8011be8:	e727      	b.n	8011a3a <_dtoa_r+0x612>
 8011bea:	9e05      	ldr	r6, [sp, #20]
 8011bec:	9d08      	ldr	r5, [sp, #32]
 8011bee:	461c      	mov	r4, r3
 8011bf0:	e730      	b.n	8011a54 <_dtoa_r+0x62c>
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	e758      	b.n	8011aa8 <_dtoa_r+0x680>
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	e786      	b.n	8011b08 <_dtoa_r+0x6e0>
 8011bfa:	9b02      	ldr	r3, [sp, #8]
 8011bfc:	e784      	b.n	8011b08 <_dtoa_r+0x6e0>
 8011bfe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011c00:	e783      	b.n	8011b0a <_dtoa_r+0x6e2>
 8011c02:	2300      	movs	r3, #0
 8011c04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c06:	e784      	b.n	8011b12 <_dtoa_r+0x6ea>
 8011c08:	d09d      	beq.n	8011b46 <_dtoa_r+0x71e>
 8011c0a:	9b05      	ldr	r3, [sp, #20]
 8011c0c:	321c      	adds	r2, #28
 8011c0e:	4413      	add	r3, r2
 8011c10:	9305      	str	r3, [sp, #20]
 8011c12:	9b06      	ldr	r3, [sp, #24]
 8011c14:	4416      	add	r6, r2
 8011c16:	4413      	add	r3, r2
 8011c18:	e794      	b.n	8011b44 <_dtoa_r+0x71c>
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	e7f5      	b.n	8011c0a <_dtoa_r+0x7e2>
 8011c1e:	f1ba 0f00 	cmp.w	sl, #0
 8011c22:	f8cd 8010 	str.w	r8, [sp, #16]
 8011c26:	46d3      	mov	fp, sl
 8011c28:	dc21      	bgt.n	8011c6e <_dtoa_r+0x846>
 8011c2a:	9b07      	ldr	r3, [sp, #28]
 8011c2c:	2b02      	cmp	r3, #2
 8011c2e:	dd1e      	ble.n	8011c6e <_dtoa_r+0x846>
 8011c30:	f1bb 0f00 	cmp.w	fp, #0
 8011c34:	f47f aeb8 	bne.w	80119a8 <_dtoa_r+0x580>
 8011c38:	4621      	mov	r1, r4
 8011c3a:	465b      	mov	r3, fp
 8011c3c:	2205      	movs	r2, #5
 8011c3e:	4648      	mov	r0, r9
 8011c40:	f001 feb4 	bl	80139ac <__multadd>
 8011c44:	4601      	mov	r1, r0
 8011c46:	4604      	mov	r4, r0
 8011c48:	9801      	ldr	r0, [sp, #4]
 8011c4a:	f002 f8ad 	bl	8013da8 <__mcmp>
 8011c4e:	2800      	cmp	r0, #0
 8011c50:	f77f aeaa 	ble.w	80119a8 <_dtoa_r+0x580>
 8011c54:	463e      	mov	r6, r7
 8011c56:	2331      	movs	r3, #49	@ 0x31
 8011c58:	f806 3b01 	strb.w	r3, [r6], #1
 8011c5c:	9b04      	ldr	r3, [sp, #16]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	9304      	str	r3, [sp, #16]
 8011c62:	e6a5      	b.n	80119b0 <_dtoa_r+0x588>
 8011c64:	f8cd 8010 	str.w	r8, [sp, #16]
 8011c68:	4654      	mov	r4, sl
 8011c6a:	4625      	mov	r5, r4
 8011c6c:	e7f2      	b.n	8011c54 <_dtoa_r+0x82c>
 8011c6e:	9b08      	ldr	r3, [sp, #32]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	f000 80fe 	beq.w	8011e72 <_dtoa_r+0xa4a>
 8011c76:	2e00      	cmp	r6, #0
 8011c78:	dd05      	ble.n	8011c86 <_dtoa_r+0x85e>
 8011c7a:	4629      	mov	r1, r5
 8011c7c:	4632      	mov	r2, r6
 8011c7e:	4648      	mov	r0, r9
 8011c80:	f002 f826 	bl	8013cd0 <__lshift>
 8011c84:	4605      	mov	r5, r0
 8011c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d057      	beq.n	8011d3c <_dtoa_r+0x914>
 8011c8c:	6869      	ldr	r1, [r5, #4]
 8011c8e:	4648      	mov	r0, r9
 8011c90:	f001 fe5e 	bl	8013950 <_Balloc>
 8011c94:	4606      	mov	r6, r0
 8011c96:	b920      	cbnz	r0, 8011ca2 <_dtoa_r+0x87a>
 8011c98:	4b80      	ldr	r3, [pc, #512]	@ (8011e9c <_dtoa_r+0xa74>)
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011ca0:	e4d3      	b.n	801164a <_dtoa_r+0x222>
 8011ca2:	692a      	ldr	r2, [r5, #16]
 8011ca4:	3202      	adds	r2, #2
 8011ca6:	0092      	lsls	r2, r2, #2
 8011ca8:	f105 010c 	add.w	r1, r5, #12
 8011cac:	300c      	adds	r0, #12
 8011cae:	f7ff fac5 	bl	801123c <memcpy>
 8011cb2:	2201      	movs	r2, #1
 8011cb4:	4631      	mov	r1, r6
 8011cb6:	4648      	mov	r0, r9
 8011cb8:	f002 f80a 	bl	8013cd0 <__lshift>
 8011cbc:	1c7b      	adds	r3, r7, #1
 8011cbe:	9305      	str	r3, [sp, #20]
 8011cc0:	eb07 030b 	add.w	r3, r7, fp
 8011cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cc6:	9b02      	ldr	r3, [sp, #8]
 8011cc8:	f003 0301 	and.w	r3, r3, #1
 8011ccc:	46a8      	mov	r8, r5
 8011cce:	9308      	str	r3, [sp, #32]
 8011cd0:	4605      	mov	r5, r0
 8011cd2:	9b05      	ldr	r3, [sp, #20]
 8011cd4:	9801      	ldr	r0, [sp, #4]
 8011cd6:	4621      	mov	r1, r4
 8011cd8:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8011cdc:	f7ff fb1c 	bl	8011318 <quorem>
 8011ce0:	4641      	mov	r1, r8
 8011ce2:	9002      	str	r0, [sp, #8]
 8011ce4:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011ce8:	9801      	ldr	r0, [sp, #4]
 8011cea:	f002 f85d 	bl	8013da8 <__mcmp>
 8011cee:	462a      	mov	r2, r5
 8011cf0:	9006      	str	r0, [sp, #24]
 8011cf2:	4621      	mov	r1, r4
 8011cf4:	4648      	mov	r0, r9
 8011cf6:	f002 f873 	bl	8013de0 <__mdiff>
 8011cfa:	68c2      	ldr	r2, [r0, #12]
 8011cfc:	4606      	mov	r6, r0
 8011cfe:	b9fa      	cbnz	r2, 8011d40 <_dtoa_r+0x918>
 8011d00:	4601      	mov	r1, r0
 8011d02:	9801      	ldr	r0, [sp, #4]
 8011d04:	f002 f850 	bl	8013da8 <__mcmp>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	4631      	mov	r1, r6
 8011d0c:	4648      	mov	r0, r9
 8011d0e:	920a      	str	r2, [sp, #40]	@ 0x28
 8011d10:	f001 fe43 	bl	801399a <_Bfree>
 8011d14:	9b07      	ldr	r3, [sp, #28]
 8011d16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d18:	9e05      	ldr	r6, [sp, #20]
 8011d1a:	ea43 0102 	orr.w	r1, r3, r2
 8011d1e:	9b08      	ldr	r3, [sp, #32]
 8011d20:	4319      	orrs	r1, r3
 8011d22:	d10f      	bne.n	8011d44 <_dtoa_r+0x91c>
 8011d24:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011d28:	d028      	beq.n	8011d7c <_dtoa_r+0x954>
 8011d2a:	9b06      	ldr	r3, [sp, #24]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	dd02      	ble.n	8011d36 <_dtoa_r+0x90e>
 8011d30:	9b02      	ldr	r3, [sp, #8]
 8011d32:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8011d36:	f88b a000 	strb.w	sl, [fp]
 8011d3a:	e63b      	b.n	80119b4 <_dtoa_r+0x58c>
 8011d3c:	4628      	mov	r0, r5
 8011d3e:	e7bd      	b.n	8011cbc <_dtoa_r+0x894>
 8011d40:	2201      	movs	r2, #1
 8011d42:	e7e2      	b.n	8011d0a <_dtoa_r+0x8e2>
 8011d44:	9b06      	ldr	r3, [sp, #24]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	db04      	blt.n	8011d54 <_dtoa_r+0x92c>
 8011d4a:	9907      	ldr	r1, [sp, #28]
 8011d4c:	430b      	orrs	r3, r1
 8011d4e:	9908      	ldr	r1, [sp, #32]
 8011d50:	430b      	orrs	r3, r1
 8011d52:	d120      	bne.n	8011d96 <_dtoa_r+0x96e>
 8011d54:	2a00      	cmp	r2, #0
 8011d56:	ddee      	ble.n	8011d36 <_dtoa_r+0x90e>
 8011d58:	9901      	ldr	r1, [sp, #4]
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	4648      	mov	r0, r9
 8011d5e:	f001 ffb7 	bl	8013cd0 <__lshift>
 8011d62:	4621      	mov	r1, r4
 8011d64:	9001      	str	r0, [sp, #4]
 8011d66:	f002 f81f 	bl	8013da8 <__mcmp>
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	dc03      	bgt.n	8011d76 <_dtoa_r+0x94e>
 8011d6e:	d1e2      	bne.n	8011d36 <_dtoa_r+0x90e>
 8011d70:	f01a 0f01 	tst.w	sl, #1
 8011d74:	d0df      	beq.n	8011d36 <_dtoa_r+0x90e>
 8011d76:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011d7a:	d1d9      	bne.n	8011d30 <_dtoa_r+0x908>
 8011d7c:	2339      	movs	r3, #57	@ 0x39
 8011d7e:	f88b 3000 	strb.w	r3, [fp]
 8011d82:	4633      	mov	r3, r6
 8011d84:	461e      	mov	r6, r3
 8011d86:	3b01      	subs	r3, #1
 8011d88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011d8c:	2a39      	cmp	r2, #57	@ 0x39
 8011d8e:	d053      	beq.n	8011e38 <_dtoa_r+0xa10>
 8011d90:	3201      	adds	r2, #1
 8011d92:	701a      	strb	r2, [r3, #0]
 8011d94:	e60e      	b.n	80119b4 <_dtoa_r+0x58c>
 8011d96:	2a00      	cmp	r2, #0
 8011d98:	dd07      	ble.n	8011daa <_dtoa_r+0x982>
 8011d9a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011d9e:	d0ed      	beq.n	8011d7c <_dtoa_r+0x954>
 8011da0:	f10a 0301 	add.w	r3, sl, #1
 8011da4:	f88b 3000 	strb.w	r3, [fp]
 8011da8:	e604      	b.n	80119b4 <_dtoa_r+0x58c>
 8011daa:	9b05      	ldr	r3, [sp, #20]
 8011dac:	9a05      	ldr	r2, [sp, #20]
 8011dae:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011db4:	4293      	cmp	r3, r2
 8011db6:	d029      	beq.n	8011e0c <_dtoa_r+0x9e4>
 8011db8:	9901      	ldr	r1, [sp, #4]
 8011dba:	2300      	movs	r3, #0
 8011dbc:	220a      	movs	r2, #10
 8011dbe:	4648      	mov	r0, r9
 8011dc0:	f001 fdf4 	bl	80139ac <__multadd>
 8011dc4:	45a8      	cmp	r8, r5
 8011dc6:	9001      	str	r0, [sp, #4]
 8011dc8:	f04f 0300 	mov.w	r3, #0
 8011dcc:	f04f 020a 	mov.w	r2, #10
 8011dd0:	4641      	mov	r1, r8
 8011dd2:	4648      	mov	r0, r9
 8011dd4:	d107      	bne.n	8011de6 <_dtoa_r+0x9be>
 8011dd6:	f001 fde9 	bl	80139ac <__multadd>
 8011dda:	4680      	mov	r8, r0
 8011ddc:	4605      	mov	r5, r0
 8011dde:	9b05      	ldr	r3, [sp, #20]
 8011de0:	3301      	adds	r3, #1
 8011de2:	9305      	str	r3, [sp, #20]
 8011de4:	e775      	b.n	8011cd2 <_dtoa_r+0x8aa>
 8011de6:	f001 fde1 	bl	80139ac <__multadd>
 8011dea:	4629      	mov	r1, r5
 8011dec:	4680      	mov	r8, r0
 8011dee:	2300      	movs	r3, #0
 8011df0:	220a      	movs	r2, #10
 8011df2:	4648      	mov	r0, r9
 8011df4:	f001 fdda 	bl	80139ac <__multadd>
 8011df8:	4605      	mov	r5, r0
 8011dfa:	e7f0      	b.n	8011dde <_dtoa_r+0x9b6>
 8011dfc:	f1bb 0f00 	cmp.w	fp, #0
 8011e00:	bfcc      	ite	gt
 8011e02:	465e      	movgt	r6, fp
 8011e04:	2601      	movle	r6, #1
 8011e06:	443e      	add	r6, r7
 8011e08:	f04f 0800 	mov.w	r8, #0
 8011e0c:	9901      	ldr	r1, [sp, #4]
 8011e0e:	2201      	movs	r2, #1
 8011e10:	4648      	mov	r0, r9
 8011e12:	f001 ff5d 	bl	8013cd0 <__lshift>
 8011e16:	4621      	mov	r1, r4
 8011e18:	9001      	str	r0, [sp, #4]
 8011e1a:	f001 ffc5 	bl	8013da8 <__mcmp>
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	dcaf      	bgt.n	8011d82 <_dtoa_r+0x95a>
 8011e22:	d102      	bne.n	8011e2a <_dtoa_r+0xa02>
 8011e24:	f01a 0f01 	tst.w	sl, #1
 8011e28:	d1ab      	bne.n	8011d82 <_dtoa_r+0x95a>
 8011e2a:	4633      	mov	r3, r6
 8011e2c:	461e      	mov	r6, r3
 8011e2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e32:	2a30      	cmp	r2, #48	@ 0x30
 8011e34:	d0fa      	beq.n	8011e2c <_dtoa_r+0xa04>
 8011e36:	e5bd      	b.n	80119b4 <_dtoa_r+0x58c>
 8011e38:	429f      	cmp	r7, r3
 8011e3a:	d1a3      	bne.n	8011d84 <_dtoa_r+0x95c>
 8011e3c:	9b04      	ldr	r3, [sp, #16]
 8011e3e:	3301      	adds	r3, #1
 8011e40:	9304      	str	r3, [sp, #16]
 8011e42:	2331      	movs	r3, #49	@ 0x31
 8011e44:	703b      	strb	r3, [r7, #0]
 8011e46:	e5b5      	b.n	80119b4 <_dtoa_r+0x58c>
 8011e48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011e4a:	4f15      	ldr	r7, [pc, #84]	@ (8011ea0 <_dtoa_r+0xa78>)
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	f43f ab22 	beq.w	8011496 <_dtoa_r+0x6e>
 8011e52:	f107 0308 	add.w	r3, r7, #8
 8011e56:	f7ff bb1c 	b.w	8011492 <_dtoa_r+0x6a>
 8011e5a:	9b07      	ldr	r3, [sp, #28]
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	f77f ae3b 	ble.w	8011ad8 <_dtoa_r+0x6b0>
 8011e62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011e64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e66:	2001      	movs	r0, #1
 8011e68:	e65b      	b.n	8011b22 <_dtoa_r+0x6fa>
 8011e6a:	f1bb 0f00 	cmp.w	fp, #0
 8011e6e:	f77f aedc 	ble.w	8011c2a <_dtoa_r+0x802>
 8011e72:	463e      	mov	r6, r7
 8011e74:	9801      	ldr	r0, [sp, #4]
 8011e76:	4621      	mov	r1, r4
 8011e78:	f7ff fa4e 	bl	8011318 <quorem>
 8011e7c:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011e80:	f806 ab01 	strb.w	sl, [r6], #1
 8011e84:	1bf2      	subs	r2, r6, r7
 8011e86:	4593      	cmp	fp, r2
 8011e88:	ddb8      	ble.n	8011dfc <_dtoa_r+0x9d4>
 8011e8a:	9901      	ldr	r1, [sp, #4]
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	220a      	movs	r2, #10
 8011e90:	4648      	mov	r0, r9
 8011e92:	f001 fd8b 	bl	80139ac <__multadd>
 8011e96:	9001      	str	r0, [sp, #4]
 8011e98:	e7ec      	b.n	8011e74 <_dtoa_r+0xa4c>
 8011e9a:	bf00      	nop
 8011e9c:	08016250 	.word	0x08016250
 8011ea0:	08016241 	.word	0x08016241

08011ea4 <_malloc_trim_r>:
 8011ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ea8:	4606      	mov	r6, r0
 8011eaa:	2008      	movs	r0, #8
 8011eac:	4689      	mov	r9, r1
 8011eae:	f002 fb93 	bl	80145d8 <sysconf>
 8011eb2:	4f24      	ldr	r7, [pc, #144]	@ (8011f44 <_malloc_trim_r+0xa0>)
 8011eb4:	4680      	mov	r8, r0
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	f001 fd3e 	bl	8013938 <__malloc_lock>
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	685d      	ldr	r5, [r3, #4]
 8011ec0:	f025 0503 	bic.w	r5, r5, #3
 8011ec4:	f1a5 0411 	sub.w	r4, r5, #17
 8011ec8:	eba4 0409 	sub.w	r4, r4, r9
 8011ecc:	4444      	add	r4, r8
 8011ece:	fbb4 f4f8 	udiv	r4, r4, r8
 8011ed2:	3c01      	subs	r4, #1
 8011ed4:	fb08 f404 	mul.w	r4, r8, r4
 8011ed8:	45a0      	cmp	r8, r4
 8011eda:	dd05      	ble.n	8011ee8 <_malloc_trim_r+0x44>
 8011edc:	4630      	mov	r0, r6
 8011ede:	f001 fd31 	bl	8013944 <__malloc_unlock>
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ee8:	2100      	movs	r1, #0
 8011eea:	4630      	mov	r0, r6
 8011eec:	f002 fb52 	bl	8014594 <_sbrk_r>
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	442b      	add	r3, r5
 8011ef4:	4298      	cmp	r0, r3
 8011ef6:	d1f1      	bne.n	8011edc <_malloc_trim_r+0x38>
 8011ef8:	4261      	negs	r1, r4
 8011efa:	4630      	mov	r0, r6
 8011efc:	f002 fb4a 	bl	8014594 <_sbrk_r>
 8011f00:	3001      	adds	r0, #1
 8011f02:	d110      	bne.n	8011f26 <_malloc_trim_r+0x82>
 8011f04:	2100      	movs	r1, #0
 8011f06:	4630      	mov	r0, r6
 8011f08:	f002 fb44 	bl	8014594 <_sbrk_r>
 8011f0c:	68ba      	ldr	r2, [r7, #8]
 8011f0e:	1a83      	subs	r3, r0, r2
 8011f10:	2b0f      	cmp	r3, #15
 8011f12:	dde3      	ble.n	8011edc <_malloc_trim_r+0x38>
 8011f14:	490c      	ldr	r1, [pc, #48]	@ (8011f48 <_malloc_trim_r+0xa4>)
 8011f16:	6809      	ldr	r1, [r1, #0]
 8011f18:	1a40      	subs	r0, r0, r1
 8011f1a:	490c      	ldr	r1, [pc, #48]	@ (8011f4c <_malloc_trim_r+0xa8>)
 8011f1c:	f043 0301 	orr.w	r3, r3, #1
 8011f20:	6008      	str	r0, [r1, #0]
 8011f22:	6053      	str	r3, [r2, #4]
 8011f24:	e7da      	b.n	8011edc <_malloc_trim_r+0x38>
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	4a08      	ldr	r2, [pc, #32]	@ (8011f4c <_malloc_trim_r+0xa8>)
 8011f2a:	1b2d      	subs	r5, r5, r4
 8011f2c:	f045 0501 	orr.w	r5, r5, #1
 8011f30:	605d      	str	r5, [r3, #4]
 8011f32:	6813      	ldr	r3, [r2, #0]
 8011f34:	4630      	mov	r0, r6
 8011f36:	1b1b      	subs	r3, r3, r4
 8011f38:	6013      	str	r3, [r2, #0]
 8011f3a:	f001 fd03 	bl	8013944 <__malloc_unlock>
 8011f3e:	2001      	movs	r0, #1
 8011f40:	e7d0      	b.n	8011ee4 <_malloc_trim_r+0x40>
 8011f42:	bf00      	nop
 8011f44:	240002cc 	.word	0x240002cc
 8011f48:	240002c4 	.word	0x240002c4
 8011f4c:	24024bf8 	.word	0x24024bf8

08011f50 <_free_r>:
 8011f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f52:	4604      	mov	r4, r0
 8011f54:	460f      	mov	r7, r1
 8011f56:	2900      	cmp	r1, #0
 8011f58:	f000 80b1 	beq.w	80120be <_free_r+0x16e>
 8011f5c:	f001 fcec 	bl	8013938 <__malloc_lock>
 8011f60:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011f64:	4d56      	ldr	r5, [pc, #344]	@ (80120c0 <_free_r+0x170>)
 8011f66:	f022 0001 	bic.w	r0, r2, #1
 8011f6a:	f1a7 0308 	sub.w	r3, r7, #8
 8011f6e:	eb03 0c00 	add.w	ip, r3, r0
 8011f72:	68a9      	ldr	r1, [r5, #8]
 8011f74:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8011f78:	4561      	cmp	r1, ip
 8011f7a:	f026 0603 	bic.w	r6, r6, #3
 8011f7e:	f002 0201 	and.w	r2, r2, #1
 8011f82:	d11b      	bne.n	8011fbc <_free_r+0x6c>
 8011f84:	4406      	add	r6, r0
 8011f86:	b93a      	cbnz	r2, 8011f98 <_free_r+0x48>
 8011f88:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8011f8c:	1a9b      	subs	r3, r3, r2
 8011f8e:	4416      	add	r6, r2
 8011f90:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8011f94:	60ca      	str	r2, [r1, #12]
 8011f96:	6091      	str	r1, [r2, #8]
 8011f98:	f046 0201 	orr.w	r2, r6, #1
 8011f9c:	605a      	str	r2, [r3, #4]
 8011f9e:	60ab      	str	r3, [r5, #8]
 8011fa0:	4b48      	ldr	r3, [pc, #288]	@ (80120c4 <_free_r+0x174>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	42b3      	cmp	r3, r6
 8011fa6:	d804      	bhi.n	8011fb2 <_free_r+0x62>
 8011fa8:	4b47      	ldr	r3, [pc, #284]	@ (80120c8 <_free_r+0x178>)
 8011faa:	4620      	mov	r0, r4
 8011fac:	6819      	ldr	r1, [r3, #0]
 8011fae:	f7ff ff79 	bl	8011ea4 <_malloc_trim_r>
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011fb8:	f001 bcc4 	b.w	8013944 <__malloc_unlock>
 8011fbc:	f8cc 6004 	str.w	r6, [ip, #4]
 8011fc0:	2a00      	cmp	r2, #0
 8011fc2:	d138      	bne.n	8012036 <_free_r+0xe6>
 8011fc4:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8011fc8:	1a5b      	subs	r3, r3, r1
 8011fca:	4408      	add	r0, r1
 8011fcc:	6899      	ldr	r1, [r3, #8]
 8011fce:	f105 0708 	add.w	r7, r5, #8
 8011fd2:	42b9      	cmp	r1, r7
 8011fd4:	d031      	beq.n	801203a <_free_r+0xea>
 8011fd6:	68df      	ldr	r7, [r3, #12]
 8011fd8:	60cf      	str	r7, [r1, #12]
 8011fda:	60b9      	str	r1, [r7, #8]
 8011fdc:	eb0c 0106 	add.w	r1, ip, r6
 8011fe0:	6849      	ldr	r1, [r1, #4]
 8011fe2:	07c9      	lsls	r1, r1, #31
 8011fe4:	d40b      	bmi.n	8011ffe <_free_r+0xae>
 8011fe6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8011fea:	4430      	add	r0, r6
 8011fec:	bb3a      	cbnz	r2, 801203e <_free_r+0xee>
 8011fee:	4e37      	ldr	r6, [pc, #220]	@ (80120cc <_free_r+0x17c>)
 8011ff0:	42b1      	cmp	r1, r6
 8011ff2:	d124      	bne.n	801203e <_free_r+0xee>
 8011ff4:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8011ff8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	f040 0101 	orr.w	r1, r0, #1
 8012002:	6059      	str	r1, [r3, #4]
 8012004:	5018      	str	r0, [r3, r0]
 8012006:	2a00      	cmp	r2, #0
 8012008:	d1d3      	bne.n	8011fb2 <_free_r+0x62>
 801200a:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801200e:	d21b      	bcs.n	8012048 <_free_r+0xf8>
 8012010:	08c2      	lsrs	r2, r0, #3
 8012012:	2101      	movs	r1, #1
 8012014:	0940      	lsrs	r0, r0, #5
 8012016:	4081      	lsls	r1, r0
 8012018:	6868      	ldr	r0, [r5, #4]
 801201a:	3201      	adds	r2, #1
 801201c:	4301      	orrs	r1, r0
 801201e:	6069      	str	r1, [r5, #4]
 8012020:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8012024:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8012028:	3908      	subs	r1, #8
 801202a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801202e:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8012032:	60c3      	str	r3, [r0, #12]
 8012034:	e7bd      	b.n	8011fb2 <_free_r+0x62>
 8012036:	2200      	movs	r2, #0
 8012038:	e7d0      	b.n	8011fdc <_free_r+0x8c>
 801203a:	2201      	movs	r2, #1
 801203c:	e7ce      	b.n	8011fdc <_free_r+0x8c>
 801203e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8012042:	60ce      	str	r6, [r1, #12]
 8012044:	60b1      	str	r1, [r6, #8]
 8012046:	e7da      	b.n	8011ffe <_free_r+0xae>
 8012048:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 801204c:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8012050:	d214      	bcs.n	801207c <_free_r+0x12c>
 8012052:	0982      	lsrs	r2, r0, #6
 8012054:	3238      	adds	r2, #56	@ 0x38
 8012056:	1c51      	adds	r1, r2, #1
 8012058:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801205c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8012060:	428e      	cmp	r6, r1
 8012062:	d125      	bne.n	80120b0 <_free_r+0x160>
 8012064:	2001      	movs	r0, #1
 8012066:	1092      	asrs	r2, r2, #2
 8012068:	fa00 f202 	lsl.w	r2, r0, r2
 801206c:	6868      	ldr	r0, [r5, #4]
 801206e:	4302      	orrs	r2, r0
 8012070:	606a      	str	r2, [r5, #4]
 8012072:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8012076:	60b3      	str	r3, [r6, #8]
 8012078:	60cb      	str	r3, [r1, #12]
 801207a:	e79a      	b.n	8011fb2 <_free_r+0x62>
 801207c:	2a14      	cmp	r2, #20
 801207e:	d801      	bhi.n	8012084 <_free_r+0x134>
 8012080:	325b      	adds	r2, #91	@ 0x5b
 8012082:	e7e8      	b.n	8012056 <_free_r+0x106>
 8012084:	2a54      	cmp	r2, #84	@ 0x54
 8012086:	d802      	bhi.n	801208e <_free_r+0x13e>
 8012088:	0b02      	lsrs	r2, r0, #12
 801208a:	326e      	adds	r2, #110	@ 0x6e
 801208c:	e7e3      	b.n	8012056 <_free_r+0x106>
 801208e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8012092:	d802      	bhi.n	801209a <_free_r+0x14a>
 8012094:	0bc2      	lsrs	r2, r0, #15
 8012096:	3277      	adds	r2, #119	@ 0x77
 8012098:	e7dd      	b.n	8012056 <_free_r+0x106>
 801209a:	f240 5154 	movw	r1, #1364	@ 0x554
 801209e:	428a      	cmp	r2, r1
 80120a0:	bf9a      	itte	ls
 80120a2:	0c82      	lsrls	r2, r0, #18
 80120a4:	327c      	addls	r2, #124	@ 0x7c
 80120a6:	227e      	movhi	r2, #126	@ 0x7e
 80120a8:	e7d5      	b.n	8012056 <_free_r+0x106>
 80120aa:	6889      	ldr	r1, [r1, #8]
 80120ac:	428e      	cmp	r6, r1
 80120ae:	d004      	beq.n	80120ba <_free_r+0x16a>
 80120b0:	684a      	ldr	r2, [r1, #4]
 80120b2:	f022 0203 	bic.w	r2, r2, #3
 80120b6:	4282      	cmp	r2, r0
 80120b8:	d8f7      	bhi.n	80120aa <_free_r+0x15a>
 80120ba:	68ce      	ldr	r6, [r1, #12]
 80120bc:	e7d9      	b.n	8012072 <_free_r+0x122>
 80120be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120c0:	240002cc 	.word	0x240002cc
 80120c4:	240002c8 	.word	0x240002c8
 80120c8:	24024c28 	.word	0x24024c28
 80120cc:	240002d4 	.word	0x240002d4

080120d0 <_malloc_r>:
 80120d0:	f101 030b 	add.w	r3, r1, #11
 80120d4:	2b16      	cmp	r3, #22
 80120d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120da:	4605      	mov	r5, r0
 80120dc:	d906      	bls.n	80120ec <_malloc_r+0x1c>
 80120de:	f033 0707 	bics.w	r7, r3, #7
 80120e2:	d504      	bpl.n	80120ee <_malloc_r+0x1e>
 80120e4:	230c      	movs	r3, #12
 80120e6:	602b      	str	r3, [r5, #0]
 80120e8:	2400      	movs	r4, #0
 80120ea:	e1a3      	b.n	8012434 <_malloc_r+0x364>
 80120ec:	2710      	movs	r7, #16
 80120ee:	42b9      	cmp	r1, r7
 80120f0:	d8f8      	bhi.n	80120e4 <_malloc_r+0x14>
 80120f2:	4628      	mov	r0, r5
 80120f4:	f001 fc20 	bl	8013938 <__malloc_lock>
 80120f8:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 80120fc:	4eaf      	ldr	r6, [pc, #700]	@ (80123bc <_malloc_r+0x2ec>)
 80120fe:	d237      	bcs.n	8012170 <_malloc_r+0xa0>
 8012100:	f107 0208 	add.w	r2, r7, #8
 8012104:	4432      	add	r2, r6
 8012106:	f1a2 0108 	sub.w	r1, r2, #8
 801210a:	6854      	ldr	r4, [r2, #4]
 801210c:	428c      	cmp	r4, r1
 801210e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8012112:	d102      	bne.n	801211a <_malloc_r+0x4a>
 8012114:	68d4      	ldr	r4, [r2, #12]
 8012116:	42a2      	cmp	r2, r4
 8012118:	d010      	beq.n	801213c <_malloc_r+0x6c>
 801211a:	6863      	ldr	r3, [r4, #4]
 801211c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8012120:	f023 0303 	bic.w	r3, r3, #3
 8012124:	60ca      	str	r2, [r1, #12]
 8012126:	4423      	add	r3, r4
 8012128:	6091      	str	r1, [r2, #8]
 801212a:	685a      	ldr	r2, [r3, #4]
 801212c:	f042 0201 	orr.w	r2, r2, #1
 8012130:	605a      	str	r2, [r3, #4]
 8012132:	4628      	mov	r0, r5
 8012134:	f001 fc06 	bl	8013944 <__malloc_unlock>
 8012138:	3408      	adds	r4, #8
 801213a:	e17b      	b.n	8012434 <_malloc_r+0x364>
 801213c:	3302      	adds	r3, #2
 801213e:	6934      	ldr	r4, [r6, #16]
 8012140:	499f      	ldr	r1, [pc, #636]	@ (80123c0 <_malloc_r+0x2f0>)
 8012142:	428c      	cmp	r4, r1
 8012144:	d077      	beq.n	8012236 <_malloc_r+0x166>
 8012146:	6862      	ldr	r2, [r4, #4]
 8012148:	f022 0c03 	bic.w	ip, r2, #3
 801214c:	ebac 0007 	sub.w	r0, ip, r7
 8012150:	280f      	cmp	r0, #15
 8012152:	dd48      	ble.n	80121e6 <_malloc_r+0x116>
 8012154:	19e2      	adds	r2, r4, r7
 8012156:	f040 0301 	orr.w	r3, r0, #1
 801215a:	f047 0701 	orr.w	r7, r7, #1
 801215e:	6067      	str	r7, [r4, #4]
 8012160:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8012164:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8012168:	6053      	str	r3, [r2, #4]
 801216a:	f844 000c 	str.w	r0, [r4, ip]
 801216e:	e7e0      	b.n	8012132 <_malloc_r+0x62>
 8012170:	0a7b      	lsrs	r3, r7, #9
 8012172:	d02a      	beq.n	80121ca <_malloc_r+0xfa>
 8012174:	2b04      	cmp	r3, #4
 8012176:	d812      	bhi.n	801219e <_malloc_r+0xce>
 8012178:	09bb      	lsrs	r3, r7, #6
 801217a:	3338      	adds	r3, #56	@ 0x38
 801217c:	1c5a      	adds	r2, r3, #1
 801217e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8012182:	f1a2 0c08 	sub.w	ip, r2, #8
 8012186:	6854      	ldr	r4, [r2, #4]
 8012188:	4564      	cmp	r4, ip
 801218a:	d006      	beq.n	801219a <_malloc_r+0xca>
 801218c:	6862      	ldr	r2, [r4, #4]
 801218e:	f022 0203 	bic.w	r2, r2, #3
 8012192:	1bd0      	subs	r0, r2, r7
 8012194:	280f      	cmp	r0, #15
 8012196:	dd1c      	ble.n	80121d2 <_malloc_r+0x102>
 8012198:	3b01      	subs	r3, #1
 801219a:	3301      	adds	r3, #1
 801219c:	e7cf      	b.n	801213e <_malloc_r+0x6e>
 801219e:	2b14      	cmp	r3, #20
 80121a0:	d801      	bhi.n	80121a6 <_malloc_r+0xd6>
 80121a2:	335b      	adds	r3, #91	@ 0x5b
 80121a4:	e7ea      	b.n	801217c <_malloc_r+0xac>
 80121a6:	2b54      	cmp	r3, #84	@ 0x54
 80121a8:	d802      	bhi.n	80121b0 <_malloc_r+0xe0>
 80121aa:	0b3b      	lsrs	r3, r7, #12
 80121ac:	336e      	adds	r3, #110	@ 0x6e
 80121ae:	e7e5      	b.n	801217c <_malloc_r+0xac>
 80121b0:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 80121b4:	d802      	bhi.n	80121bc <_malloc_r+0xec>
 80121b6:	0bfb      	lsrs	r3, r7, #15
 80121b8:	3377      	adds	r3, #119	@ 0x77
 80121ba:	e7df      	b.n	801217c <_malloc_r+0xac>
 80121bc:	f240 5254 	movw	r2, #1364	@ 0x554
 80121c0:	4293      	cmp	r3, r2
 80121c2:	d804      	bhi.n	80121ce <_malloc_r+0xfe>
 80121c4:	0cbb      	lsrs	r3, r7, #18
 80121c6:	337c      	adds	r3, #124	@ 0x7c
 80121c8:	e7d8      	b.n	801217c <_malloc_r+0xac>
 80121ca:	233f      	movs	r3, #63	@ 0x3f
 80121cc:	e7d6      	b.n	801217c <_malloc_r+0xac>
 80121ce:	237e      	movs	r3, #126	@ 0x7e
 80121d0:	e7d4      	b.n	801217c <_malloc_r+0xac>
 80121d2:	2800      	cmp	r0, #0
 80121d4:	68e1      	ldr	r1, [r4, #12]
 80121d6:	db04      	blt.n	80121e2 <_malloc_r+0x112>
 80121d8:	68a3      	ldr	r3, [r4, #8]
 80121da:	60d9      	str	r1, [r3, #12]
 80121dc:	608b      	str	r3, [r1, #8]
 80121de:	18a3      	adds	r3, r4, r2
 80121e0:	e7a3      	b.n	801212a <_malloc_r+0x5a>
 80121e2:	460c      	mov	r4, r1
 80121e4:	e7d0      	b.n	8012188 <_malloc_r+0xb8>
 80121e6:	2800      	cmp	r0, #0
 80121e8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80121ec:	db07      	blt.n	80121fe <_malloc_r+0x12e>
 80121ee:	44a4      	add	ip, r4
 80121f0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80121f4:	f043 0301 	orr.w	r3, r3, #1
 80121f8:	f8cc 3004 	str.w	r3, [ip, #4]
 80121fc:	e799      	b.n	8012132 <_malloc_r+0x62>
 80121fe:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8012202:	6870      	ldr	r0, [r6, #4]
 8012204:	f080 8095 	bcs.w	8012332 <_malloc_r+0x262>
 8012208:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801220c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8012210:	f04f 0c01 	mov.w	ip, #1
 8012214:	3201      	adds	r2, #1
 8012216:	fa0c fc0e 	lsl.w	ip, ip, lr
 801221a:	ea4c 0000 	orr.w	r0, ip, r0
 801221e:	6070      	str	r0, [r6, #4]
 8012220:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8012224:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8012228:	3808      	subs	r0, #8
 801222a:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801222e:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8012232:	f8cc 400c 	str.w	r4, [ip, #12]
 8012236:	1098      	asrs	r0, r3, #2
 8012238:	2201      	movs	r2, #1
 801223a:	4082      	lsls	r2, r0
 801223c:	6870      	ldr	r0, [r6, #4]
 801223e:	4290      	cmp	r0, r2
 8012240:	d326      	bcc.n	8012290 <_malloc_r+0x1c0>
 8012242:	4210      	tst	r0, r2
 8012244:	d106      	bne.n	8012254 <_malloc_r+0x184>
 8012246:	f023 0303 	bic.w	r3, r3, #3
 801224a:	0052      	lsls	r2, r2, #1
 801224c:	4210      	tst	r0, r2
 801224e:	f103 0304 	add.w	r3, r3, #4
 8012252:	d0fa      	beq.n	801224a <_malloc_r+0x17a>
 8012254:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8012258:	46c1      	mov	r9, r8
 801225a:	469e      	mov	lr, r3
 801225c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8012260:	454c      	cmp	r4, r9
 8012262:	f040 80b9 	bne.w	80123d8 <_malloc_r+0x308>
 8012266:	f10e 0e01 	add.w	lr, lr, #1
 801226a:	f01e 0f03 	tst.w	lr, #3
 801226e:	f109 0908 	add.w	r9, r9, #8
 8012272:	d1f3      	bne.n	801225c <_malloc_r+0x18c>
 8012274:	0798      	lsls	r0, r3, #30
 8012276:	f040 80e3 	bne.w	8012440 <_malloc_r+0x370>
 801227a:	6873      	ldr	r3, [r6, #4]
 801227c:	ea23 0302 	bic.w	r3, r3, r2
 8012280:	6073      	str	r3, [r6, #4]
 8012282:	6870      	ldr	r0, [r6, #4]
 8012284:	0052      	lsls	r2, r2, #1
 8012286:	4290      	cmp	r0, r2
 8012288:	d302      	bcc.n	8012290 <_malloc_r+0x1c0>
 801228a:	2a00      	cmp	r2, #0
 801228c:	f040 80e5 	bne.w	801245a <_malloc_r+0x38a>
 8012290:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8012294:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012298:	f023 0903 	bic.w	r9, r3, #3
 801229c:	45b9      	cmp	r9, r7
 801229e:	d304      	bcc.n	80122aa <_malloc_r+0x1da>
 80122a0:	eba9 0207 	sub.w	r2, r9, r7
 80122a4:	2a0f      	cmp	r2, #15
 80122a6:	f300 8141 	bgt.w	801252c <_malloc_r+0x45c>
 80122aa:	4b46      	ldr	r3, [pc, #280]	@ (80123c4 <_malloc_r+0x2f4>)
 80122ac:	6819      	ldr	r1, [r3, #0]
 80122ae:	3110      	adds	r1, #16
 80122b0:	4439      	add	r1, r7
 80122b2:	2008      	movs	r0, #8
 80122b4:	9101      	str	r1, [sp, #4]
 80122b6:	f002 f98f 	bl	80145d8 <sysconf>
 80122ba:	4a43      	ldr	r2, [pc, #268]	@ (80123c8 <_malloc_r+0x2f8>)
 80122bc:	9901      	ldr	r1, [sp, #4]
 80122be:	6813      	ldr	r3, [r2, #0]
 80122c0:	3301      	adds	r3, #1
 80122c2:	bf1f      	itttt	ne
 80122c4:	f101 31ff 	addne.w	r1, r1, #4294967295	@ 0xffffffff
 80122c8:	1809      	addne	r1, r1, r0
 80122ca:	4243      	negne	r3, r0
 80122cc:	4019      	andne	r1, r3
 80122ce:	4680      	mov	r8, r0
 80122d0:	4628      	mov	r0, r5
 80122d2:	9101      	str	r1, [sp, #4]
 80122d4:	f002 f95e 	bl	8014594 <_sbrk_r>
 80122d8:	1c42      	adds	r2, r0, #1
 80122da:	eb0a 0b09 	add.w	fp, sl, r9
 80122de:	4604      	mov	r4, r0
 80122e0:	f000 80f7 	beq.w	80124d2 <_malloc_r+0x402>
 80122e4:	4583      	cmp	fp, r0
 80122e6:	9901      	ldr	r1, [sp, #4]
 80122e8:	4a37      	ldr	r2, [pc, #220]	@ (80123c8 <_malloc_r+0x2f8>)
 80122ea:	d902      	bls.n	80122f2 <_malloc_r+0x222>
 80122ec:	45b2      	cmp	sl, r6
 80122ee:	f040 80f0 	bne.w	80124d2 <_malloc_r+0x402>
 80122f2:	4b36      	ldr	r3, [pc, #216]	@ (80123cc <_malloc_r+0x2fc>)
 80122f4:	6818      	ldr	r0, [r3, #0]
 80122f6:	45a3      	cmp	fp, r4
 80122f8:	eb00 0e01 	add.w	lr, r0, r1
 80122fc:	f8c3 e000 	str.w	lr, [r3]
 8012300:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8012304:	f040 80ab 	bne.w	801245e <_malloc_r+0x38e>
 8012308:	ea1b 0f0c 	tst.w	fp, ip
 801230c:	f040 80a7 	bne.w	801245e <_malloc_r+0x38e>
 8012310:	68b2      	ldr	r2, [r6, #8]
 8012312:	4449      	add	r1, r9
 8012314:	f041 0101 	orr.w	r1, r1, #1
 8012318:	6051      	str	r1, [r2, #4]
 801231a:	4a2d      	ldr	r2, [pc, #180]	@ (80123d0 <_malloc_r+0x300>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	6811      	ldr	r1, [r2, #0]
 8012320:	428b      	cmp	r3, r1
 8012322:	bf88      	it	hi
 8012324:	6013      	strhi	r3, [r2, #0]
 8012326:	4a2b      	ldr	r2, [pc, #172]	@ (80123d4 <_malloc_r+0x304>)
 8012328:	6811      	ldr	r1, [r2, #0]
 801232a:	428b      	cmp	r3, r1
 801232c:	bf88      	it	hi
 801232e:	6013      	strhi	r3, [r2, #0]
 8012330:	e0cf      	b.n	80124d2 <_malloc_r+0x402>
 8012332:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8012336:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801233a:	d218      	bcs.n	801236e <_malloc_r+0x29e>
 801233c:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8012340:	3238      	adds	r2, #56	@ 0x38
 8012342:	f102 0e01 	add.w	lr, r2, #1
 8012346:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801234a:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801234e:	45f0      	cmp	r8, lr
 8012350:	d12b      	bne.n	80123aa <_malloc_r+0x2da>
 8012352:	1092      	asrs	r2, r2, #2
 8012354:	f04f 0c01 	mov.w	ip, #1
 8012358:	fa0c f202 	lsl.w	r2, ip, r2
 801235c:	4302      	orrs	r2, r0
 801235e:	6072      	str	r2, [r6, #4]
 8012360:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8012364:	f8c8 4008 	str.w	r4, [r8, #8]
 8012368:	f8ce 400c 	str.w	r4, [lr, #12]
 801236c:	e763      	b.n	8012236 <_malloc_r+0x166>
 801236e:	2a14      	cmp	r2, #20
 8012370:	d801      	bhi.n	8012376 <_malloc_r+0x2a6>
 8012372:	325b      	adds	r2, #91	@ 0x5b
 8012374:	e7e5      	b.n	8012342 <_malloc_r+0x272>
 8012376:	2a54      	cmp	r2, #84	@ 0x54
 8012378:	d803      	bhi.n	8012382 <_malloc_r+0x2b2>
 801237a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801237e:	326e      	adds	r2, #110	@ 0x6e
 8012380:	e7df      	b.n	8012342 <_malloc_r+0x272>
 8012382:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8012386:	d803      	bhi.n	8012390 <_malloc_r+0x2c0>
 8012388:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801238c:	3277      	adds	r2, #119	@ 0x77
 801238e:	e7d8      	b.n	8012342 <_malloc_r+0x272>
 8012390:	f240 5e54 	movw	lr, #1364	@ 0x554
 8012394:	4572      	cmp	r2, lr
 8012396:	bf9a      	itte	ls
 8012398:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801239c:	327c      	addls	r2, #124	@ 0x7c
 801239e:	227e      	movhi	r2, #126	@ 0x7e
 80123a0:	e7cf      	b.n	8012342 <_malloc_r+0x272>
 80123a2:	f8de e008 	ldr.w	lr, [lr, #8]
 80123a6:	45f0      	cmp	r8, lr
 80123a8:	d005      	beq.n	80123b6 <_malloc_r+0x2e6>
 80123aa:	f8de 2004 	ldr.w	r2, [lr, #4]
 80123ae:	f022 0203 	bic.w	r2, r2, #3
 80123b2:	4562      	cmp	r2, ip
 80123b4:	d8f5      	bhi.n	80123a2 <_malloc_r+0x2d2>
 80123b6:	f8de 800c 	ldr.w	r8, [lr, #12]
 80123ba:	e7d1      	b.n	8012360 <_malloc_r+0x290>
 80123bc:	240002cc 	.word	0x240002cc
 80123c0:	240002d4 	.word	0x240002d4
 80123c4:	24024c28 	.word	0x24024c28
 80123c8:	240002c4 	.word	0x240002c4
 80123cc:	24024bf8 	.word	0x24024bf8
 80123d0:	24024c24 	.word	0x24024c24
 80123d4:	24024c20 	.word	0x24024c20
 80123d8:	6860      	ldr	r0, [r4, #4]
 80123da:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80123de:	f020 0003 	bic.w	r0, r0, #3
 80123e2:	eba0 0a07 	sub.w	sl, r0, r7
 80123e6:	f1ba 0f0f 	cmp.w	sl, #15
 80123ea:	dd12      	ble.n	8012412 <_malloc_r+0x342>
 80123ec:	68a3      	ldr	r3, [r4, #8]
 80123ee:	19e2      	adds	r2, r4, r7
 80123f0:	f047 0701 	orr.w	r7, r7, #1
 80123f4:	6067      	str	r7, [r4, #4]
 80123f6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80123fa:	f8cc 3008 	str.w	r3, [ip, #8]
 80123fe:	f04a 0301 	orr.w	r3, sl, #1
 8012402:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8012406:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801240a:	6053      	str	r3, [r2, #4]
 801240c:	f844 a000 	str.w	sl, [r4, r0]
 8012410:	e68f      	b.n	8012132 <_malloc_r+0x62>
 8012412:	f1ba 0f00 	cmp.w	sl, #0
 8012416:	db11      	blt.n	801243c <_malloc_r+0x36c>
 8012418:	4420      	add	r0, r4
 801241a:	6843      	ldr	r3, [r0, #4]
 801241c:	f043 0301 	orr.w	r3, r3, #1
 8012420:	6043      	str	r3, [r0, #4]
 8012422:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8012426:	4628      	mov	r0, r5
 8012428:	f8c3 c00c 	str.w	ip, [r3, #12]
 801242c:	f8cc 3008 	str.w	r3, [ip, #8]
 8012430:	f001 fa88 	bl	8013944 <__malloc_unlock>
 8012434:	4620      	mov	r0, r4
 8012436:	b003      	add	sp, #12
 8012438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801243c:	4664      	mov	r4, ip
 801243e:	e70f      	b.n	8012260 <_malloc_r+0x190>
 8012440:	f858 0908 	ldr.w	r0, [r8], #-8
 8012444:	4540      	cmp	r0, r8
 8012446:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801244a:	f43f af13 	beq.w	8012274 <_malloc_r+0x1a4>
 801244e:	e718      	b.n	8012282 <_malloc_r+0x1b2>
 8012450:	3304      	adds	r3, #4
 8012452:	0052      	lsls	r2, r2, #1
 8012454:	4210      	tst	r0, r2
 8012456:	d0fb      	beq.n	8012450 <_malloc_r+0x380>
 8012458:	e6fc      	b.n	8012254 <_malloc_r+0x184>
 801245a:	4673      	mov	r3, lr
 801245c:	e7fa      	b.n	8012454 <_malloc_r+0x384>
 801245e:	6810      	ldr	r0, [r2, #0]
 8012460:	3001      	adds	r0, #1
 8012462:	bf1b      	ittet	ne
 8012464:	eba4 0b0b 	subne.w	fp, r4, fp
 8012468:	eb0b 020e 	addne.w	r2, fp, lr
 801246c:	6014      	streq	r4, [r2, #0]
 801246e:	601a      	strne	r2, [r3, #0]
 8012470:	f014 0b07 	ands.w	fp, r4, #7
 8012474:	bf1a      	itte	ne
 8012476:	f1cb 0008 	rsbne	r0, fp, #8
 801247a:	1824      	addne	r4, r4, r0
 801247c:	4658      	moveq	r0, fp
 801247e:	1862      	adds	r2, r4, r1
 8012480:	ea02 010c 	and.w	r1, r2, ip
 8012484:	4480      	add	r8, r0
 8012486:	eba8 0801 	sub.w	r8, r8, r1
 801248a:	ea08 080c 	and.w	r8, r8, ip
 801248e:	4641      	mov	r1, r8
 8012490:	4628      	mov	r0, r5
 8012492:	9201      	str	r2, [sp, #4]
 8012494:	f002 f87e 	bl	8014594 <_sbrk_r>
 8012498:	1c43      	adds	r3, r0, #1
 801249a:	9a01      	ldr	r2, [sp, #4]
 801249c:	4b28      	ldr	r3, [pc, #160]	@ (8012540 <_malloc_r+0x470>)
 801249e:	d107      	bne.n	80124b0 <_malloc_r+0x3e0>
 80124a0:	f1bb 0f00 	cmp.w	fp, #0
 80124a4:	d023      	beq.n	80124ee <_malloc_r+0x41e>
 80124a6:	f1ab 0008 	sub.w	r0, fp, #8
 80124aa:	4410      	add	r0, r2
 80124ac:	f04f 0800 	mov.w	r8, #0
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	60b4      	str	r4, [r6, #8]
 80124b4:	1b00      	subs	r0, r0, r4
 80124b6:	4440      	add	r0, r8
 80124b8:	4442      	add	r2, r8
 80124ba:	f040 0001 	orr.w	r0, r0, #1
 80124be:	45b2      	cmp	sl, r6
 80124c0:	601a      	str	r2, [r3, #0]
 80124c2:	6060      	str	r0, [r4, #4]
 80124c4:	f43f af29 	beq.w	801231a <_malloc_r+0x24a>
 80124c8:	f1b9 0f0f 	cmp.w	r9, #15
 80124cc:	d812      	bhi.n	80124f4 <_malloc_r+0x424>
 80124ce:	2301      	movs	r3, #1
 80124d0:	6063      	str	r3, [r4, #4]
 80124d2:	68b3      	ldr	r3, [r6, #8]
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	f023 0303 	bic.w	r3, r3, #3
 80124da:	42bb      	cmp	r3, r7
 80124dc:	eba3 0207 	sub.w	r2, r3, r7
 80124e0:	d301      	bcc.n	80124e6 <_malloc_r+0x416>
 80124e2:	2a0f      	cmp	r2, #15
 80124e4:	dc22      	bgt.n	801252c <_malloc_r+0x45c>
 80124e6:	4628      	mov	r0, r5
 80124e8:	f001 fa2c 	bl	8013944 <__malloc_unlock>
 80124ec:	e5fc      	b.n	80120e8 <_malloc_r+0x18>
 80124ee:	4610      	mov	r0, r2
 80124f0:	46d8      	mov	r8, fp
 80124f2:	e7dd      	b.n	80124b0 <_malloc_r+0x3e0>
 80124f4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80124f8:	f1a9 090c 	sub.w	r9, r9, #12
 80124fc:	f029 0907 	bic.w	r9, r9, #7
 8012500:	f002 0201 	and.w	r2, r2, #1
 8012504:	ea42 0209 	orr.w	r2, r2, r9
 8012508:	f8ca 2004 	str.w	r2, [sl, #4]
 801250c:	2105      	movs	r1, #5
 801250e:	eb0a 0209 	add.w	r2, sl, r9
 8012512:	f1b9 0f0f 	cmp.w	r9, #15
 8012516:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801251a:	f67f aefe 	bls.w	801231a <_malloc_r+0x24a>
 801251e:	f10a 0108 	add.w	r1, sl, #8
 8012522:	4628      	mov	r0, r5
 8012524:	f7ff fd14 	bl	8011f50 <_free_r>
 8012528:	4b05      	ldr	r3, [pc, #20]	@ (8012540 <_malloc_r+0x470>)
 801252a:	e6f6      	b.n	801231a <_malloc_r+0x24a>
 801252c:	68b4      	ldr	r4, [r6, #8]
 801252e:	f047 0301 	orr.w	r3, r7, #1
 8012532:	4427      	add	r7, r4
 8012534:	f042 0201 	orr.w	r2, r2, #1
 8012538:	6063      	str	r3, [r4, #4]
 801253a:	60b7      	str	r7, [r6, #8]
 801253c:	607a      	str	r2, [r7, #4]
 801253e:	e5f8      	b.n	8012132 <_malloc_r+0x62>
 8012540:	24024bf8 	.word	0x24024bf8

08012544 <__ascii_mbtowc>:
 8012544:	b082      	sub	sp, #8
 8012546:	b901      	cbnz	r1, 801254a <__ascii_mbtowc+0x6>
 8012548:	a901      	add	r1, sp, #4
 801254a:	b142      	cbz	r2, 801255e <__ascii_mbtowc+0x1a>
 801254c:	b14b      	cbz	r3, 8012562 <__ascii_mbtowc+0x1e>
 801254e:	7813      	ldrb	r3, [r2, #0]
 8012550:	600b      	str	r3, [r1, #0]
 8012552:	7812      	ldrb	r2, [r2, #0]
 8012554:	1e10      	subs	r0, r2, #0
 8012556:	bf18      	it	ne
 8012558:	2001      	movne	r0, #1
 801255a:	b002      	add	sp, #8
 801255c:	4770      	bx	lr
 801255e:	4610      	mov	r0, r2
 8012560:	e7fb      	b.n	801255a <__ascii_mbtowc+0x16>
 8012562:	f06f 0001 	mvn.w	r0, #1
 8012566:	e7f8      	b.n	801255a <__ascii_mbtowc+0x16>

08012568 <_svfprintf_r>:
 8012568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801256c:	ed2d 8b04 	vpush	{d8-d9}
 8012570:	b0cb      	sub	sp, #300	@ 0x12c
 8012572:	468a      	mov	sl, r1
 8012574:	4691      	mov	r9, r2
 8012576:	461e      	mov	r6, r3
 8012578:	9002      	str	r0, [sp, #8]
 801257a:	f7fe fe2d 	bl	80111d8 <_localeconv_r>
 801257e:	6803      	ldr	r3, [r0, #0]
 8012580:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012582:	4618      	mov	r0, r3
 8012584:	f7ed fefc 	bl	8000380 <strlen>
 8012588:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801258c:	9009      	str	r0, [sp, #36]	@ 0x24
 801258e:	061c      	lsls	r4, r3, #24
 8012590:	d515      	bpl.n	80125be <_svfprintf_r+0x56>
 8012592:	f8da 3010 	ldr.w	r3, [sl, #16]
 8012596:	b993      	cbnz	r3, 80125be <_svfprintf_r+0x56>
 8012598:	9802      	ldr	r0, [sp, #8]
 801259a:	2140      	movs	r1, #64	@ 0x40
 801259c:	f7ff fd98 	bl	80120d0 <_malloc_r>
 80125a0:	f8ca 0000 	str.w	r0, [sl]
 80125a4:	f8ca 0010 	str.w	r0, [sl, #16]
 80125a8:	b930      	cbnz	r0, 80125b8 <_svfprintf_r+0x50>
 80125aa:	9a02      	ldr	r2, [sp, #8]
 80125ac:	230c      	movs	r3, #12
 80125ae:	6013      	str	r3, [r2, #0]
 80125b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80125b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80125b6:	e1e1      	b.n	801297c <_svfprintf_r+0x414>
 80125b8:	2340      	movs	r3, #64	@ 0x40
 80125ba:	f8ca 3014 	str.w	r3, [sl, #20]
 80125be:	2300      	movs	r3, #0
 80125c0:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 80125c4:	ed9f 8b96 	vldr	d8, [pc, #600]	@ 8012820 <_svfprintf_r+0x2b8>
 80125c8:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 80125cc:	ac21      	add	r4, sp, #132	@ 0x84
 80125ce:	941e      	str	r4, [sp, #120]	@ 0x78
 80125d0:	9303      	str	r3, [sp, #12]
 80125d2:	9307      	str	r3, [sp, #28]
 80125d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80125d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80125d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80125da:	464b      	mov	r3, r9
 80125dc:	461d      	mov	r5, r3
 80125de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125e2:	b10a      	cbz	r2, 80125e8 <_svfprintf_r+0x80>
 80125e4:	2a25      	cmp	r2, #37	@ 0x25
 80125e6:	d1f9      	bne.n	80125dc <_svfprintf_r+0x74>
 80125e8:	ebb5 0709 	subs.w	r7, r5, r9
 80125ec:	d00d      	beq.n	801260a <_svfprintf_r+0xa2>
 80125ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80125f0:	443b      	add	r3, r7
 80125f2:	9320      	str	r3, [sp, #128]	@ 0x80
 80125f4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80125f6:	3301      	adds	r3, #1
 80125f8:	2b07      	cmp	r3, #7
 80125fa:	e9c4 9700 	strd	r9, r7, [r4]
 80125fe:	931f      	str	r3, [sp, #124]	@ 0x7c
 8012600:	dc75      	bgt.n	80126ee <_svfprintf_r+0x186>
 8012602:	3408      	adds	r4, #8
 8012604:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012606:	443b      	add	r3, r7
 8012608:	930b      	str	r3, [sp, #44]	@ 0x2c
 801260a:	782b      	ldrb	r3, [r5, #0]
 801260c:	2b00      	cmp	r3, #0
 801260e:	f001 80ee 	beq.w	80137ee <_svfprintf_r+0x1286>
 8012612:	2200      	movs	r2, #0
 8012614:	1c6b      	adds	r3, r5, #1
 8012616:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 801261a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801261e:	920a      	str	r2, [sp, #40]	@ 0x28
 8012620:	4615      	mov	r5, r2
 8012622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012626:	9204      	str	r2, [sp, #16]
 8012628:	9308      	str	r3, [sp, #32]
 801262a:	9b04      	ldr	r3, [sp, #16]
 801262c:	3b20      	subs	r3, #32
 801262e:	2b5a      	cmp	r3, #90	@ 0x5a
 8012630:	f200 8564 	bhi.w	80130fc <_svfprintf_r+0xb94>
 8012634:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012638:	0562009c 	.word	0x0562009c
 801263c:	00a40562 	.word	0x00a40562
 8012640:	05620562 	.word	0x05620562
 8012644:	00840562 	.word	0x00840562
 8012648:	05620562 	.word	0x05620562
 801264c:	00b100a7 	.word	0x00b100a7
 8012650:	00ae0562 	.word	0x00ae0562
 8012654:	056200b3 	.word	0x056200b3
 8012658:	00d000cd 	.word	0x00d000cd
 801265c:	00d000d0 	.word	0x00d000d0
 8012660:	00d000d0 	.word	0x00d000d0
 8012664:	00d000d0 	.word	0x00d000d0
 8012668:	00d000d0 	.word	0x00d000d0
 801266c:	05620562 	.word	0x05620562
 8012670:	05620562 	.word	0x05620562
 8012674:	05620562 	.word	0x05620562
 8012678:	01460562 	.word	0x01460562
 801267c:	01070562 	.word	0x01070562
 8012680:	0146011a 	.word	0x0146011a
 8012684:	01460146 	.word	0x01460146
 8012688:	05620562 	.word	0x05620562
 801268c:	05620562 	.word	0x05620562
 8012690:	056200e1 	.word	0x056200e1
 8012694:	045c0562 	.word	0x045c0562
 8012698:	05620562 	.word	0x05620562
 801269c:	04a60562 	.word	0x04a60562
 80126a0:	04c70562 	.word	0x04c70562
 80126a4:	05620562 	.word	0x05620562
 80126a8:	056204e9 	.word	0x056204e9
 80126ac:	05620562 	.word	0x05620562
 80126b0:	05620562 	.word	0x05620562
 80126b4:	05620562 	.word	0x05620562
 80126b8:	01460562 	.word	0x01460562
 80126bc:	01070562 	.word	0x01070562
 80126c0:	0146011c 	.word	0x0146011c
 80126c4:	01460146 	.word	0x01460146
 80126c8:	011c00e4 	.word	0x011c00e4
 80126cc:	05620101 	.word	0x05620101
 80126d0:	056200fa 	.word	0x056200fa
 80126d4:	045e043d 	.word	0x045e043d
 80126d8:	01010495 	.word	0x01010495
 80126dc:	04a60562 	.word	0x04a60562
 80126e0:	04c9009a 	.word	0x04c9009a
 80126e4:	05620562 	.word	0x05620562
 80126e8:	05620065 	.word	0x05620065
 80126ec:	009a      	.short	0x009a
 80126ee:	9802      	ldr	r0, [sp, #8]
 80126f0:	aa1e      	add	r2, sp, #120	@ 0x78
 80126f2:	4651      	mov	r1, sl
 80126f4:	f002 f836 	bl	8014764 <__ssprint_r>
 80126f8:	2800      	cmp	r0, #0
 80126fa:	f040 813a 	bne.w	8012972 <_svfprintf_r+0x40a>
 80126fe:	ac21      	add	r4, sp, #132	@ 0x84
 8012700:	e780      	b.n	8012604 <_svfprintf_r+0x9c>
 8012702:	4b49      	ldr	r3, [pc, #292]	@ (8012828 <_svfprintf_r+0x2c0>)
 8012704:	9312      	str	r3, [sp, #72]	@ 0x48
 8012706:	f015 0320 	ands.w	r3, r5, #32
 801270a:	f000 8481 	beq.w	8013010 <_svfprintf_r+0xaa8>
 801270e:	3607      	adds	r6, #7
 8012710:	f026 0307 	bic.w	r3, r6, #7
 8012714:	461a      	mov	r2, r3
 8012716:	685f      	ldr	r7, [r3, #4]
 8012718:	f852 6b08 	ldr.w	r6, [r2], #8
 801271c:	9205      	str	r2, [sp, #20]
 801271e:	07eb      	lsls	r3, r5, #31
 8012720:	d50a      	bpl.n	8012738 <_svfprintf_r+0x1d0>
 8012722:	ea56 0307 	orrs.w	r3, r6, r7
 8012726:	d007      	beq.n	8012738 <_svfprintf_r+0x1d0>
 8012728:	2330      	movs	r3, #48	@ 0x30
 801272a:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 801272e:	9b04      	ldr	r3, [sp, #16]
 8012730:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8012734:	f045 0502 	orr.w	r5, r5, #2
 8012738:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801273c:	2302      	movs	r3, #2
 801273e:	e3e7      	b.n	8012f10 <_svfprintf_r+0x9a8>
 8012740:	9802      	ldr	r0, [sp, #8]
 8012742:	f7fe fd49 	bl	80111d8 <_localeconv_r>
 8012746:	6843      	ldr	r3, [r0, #4]
 8012748:	9310      	str	r3, [sp, #64]	@ 0x40
 801274a:	4618      	mov	r0, r3
 801274c:	f7ed fe18 	bl	8000380 <strlen>
 8012750:	900e      	str	r0, [sp, #56]	@ 0x38
 8012752:	9802      	ldr	r0, [sp, #8]
 8012754:	f7fe fd40 	bl	80111d8 <_localeconv_r>
 8012758:	6883      	ldr	r3, [r0, #8]
 801275a:	9307      	str	r3, [sp, #28]
 801275c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801275e:	b12b      	cbz	r3, 801276c <_svfprintf_r+0x204>
 8012760:	9b07      	ldr	r3, [sp, #28]
 8012762:	b11b      	cbz	r3, 801276c <_svfprintf_r+0x204>
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	b10b      	cbz	r3, 801276c <_svfprintf_r+0x204>
 8012768:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801276c:	9b08      	ldr	r3, [sp, #32]
 801276e:	e758      	b.n	8012622 <_svfprintf_r+0xba>
 8012770:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 8012774:	2b00      	cmp	r3, #0
 8012776:	d1f9      	bne.n	801276c <_svfprintf_r+0x204>
 8012778:	2320      	movs	r3, #32
 801277a:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 801277e:	e7f5      	b.n	801276c <_svfprintf_r+0x204>
 8012780:	f045 0501 	orr.w	r5, r5, #1
 8012784:	e7f2      	b.n	801276c <_svfprintf_r+0x204>
 8012786:	f856 3b04 	ldr.w	r3, [r6], #4
 801278a:	930a      	str	r3, [sp, #40]	@ 0x28
 801278c:	2b00      	cmp	r3, #0
 801278e:	daed      	bge.n	801276c <_svfprintf_r+0x204>
 8012790:	425b      	negs	r3, r3
 8012792:	930a      	str	r3, [sp, #40]	@ 0x28
 8012794:	f045 0504 	orr.w	r5, r5, #4
 8012798:	e7e8      	b.n	801276c <_svfprintf_r+0x204>
 801279a:	232b      	movs	r3, #43	@ 0x2b
 801279c:	e7ed      	b.n	801277a <_svfprintf_r+0x212>
 801279e:	9b08      	ldr	r3, [sp, #32]
 80127a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127a4:	9204      	str	r2, [sp, #16]
 80127a6:	2a2a      	cmp	r2, #42	@ 0x2a
 80127a8:	d10f      	bne.n	80127ca <_svfprintf_r+0x262>
 80127aa:	f856 2b04 	ldr.w	r2, [r6], #4
 80127ae:	9308      	str	r3, [sp, #32]
 80127b0:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 80127b4:	e7da      	b.n	801276c <_svfprintf_r+0x204>
 80127b6:	fb01 2808 	mla	r8, r1, r8, r2
 80127ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127be:	9204      	str	r2, [sp, #16]
 80127c0:	9a04      	ldr	r2, [sp, #16]
 80127c2:	3a30      	subs	r2, #48	@ 0x30
 80127c4:	2a09      	cmp	r2, #9
 80127c6:	d9f6      	bls.n	80127b6 <_svfprintf_r+0x24e>
 80127c8:	e72e      	b.n	8012628 <_svfprintf_r+0xc0>
 80127ca:	f04f 0800 	mov.w	r8, #0
 80127ce:	210a      	movs	r1, #10
 80127d0:	e7f6      	b.n	80127c0 <_svfprintf_r+0x258>
 80127d2:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80127d6:	e7c9      	b.n	801276c <_svfprintf_r+0x204>
 80127d8:	2200      	movs	r2, #0
 80127da:	9b08      	ldr	r3, [sp, #32]
 80127dc:	920a      	str	r2, [sp, #40]	@ 0x28
 80127de:	210a      	movs	r1, #10
 80127e0:	9a04      	ldr	r2, [sp, #16]
 80127e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80127e4:	3a30      	subs	r2, #48	@ 0x30
 80127e6:	fb01 2200 	mla	r2, r1, r0, r2
 80127ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80127ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127f0:	9204      	str	r2, [sp, #16]
 80127f2:	3a30      	subs	r2, #48	@ 0x30
 80127f4:	2a09      	cmp	r2, #9
 80127f6:	d9f3      	bls.n	80127e0 <_svfprintf_r+0x278>
 80127f8:	e716      	b.n	8012628 <_svfprintf_r+0xc0>
 80127fa:	f045 0508 	orr.w	r5, r5, #8
 80127fe:	e7b5      	b.n	801276c <_svfprintf_r+0x204>
 8012800:	9b08      	ldr	r3, [sp, #32]
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	2b68      	cmp	r3, #104	@ 0x68
 8012806:	bf01      	itttt	eq
 8012808:	9b08      	ldreq	r3, [sp, #32]
 801280a:	3301      	addeq	r3, #1
 801280c:	9308      	streq	r3, [sp, #32]
 801280e:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8012812:	bf18      	it	ne
 8012814:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8012818:	e7a8      	b.n	801276c <_svfprintf_r+0x204>
 801281a:	bf00      	nop
 801281c:	f3af 8000 	nop.w
	...
 8012828:	08016105 	.word	0x08016105
 801282c:	9b08      	ldr	r3, [sp, #32]
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	2b6c      	cmp	r3, #108	@ 0x6c
 8012832:	d105      	bne.n	8012840 <_svfprintf_r+0x2d8>
 8012834:	9b08      	ldr	r3, [sp, #32]
 8012836:	3301      	adds	r3, #1
 8012838:	9308      	str	r3, [sp, #32]
 801283a:	f045 0520 	orr.w	r5, r5, #32
 801283e:	e795      	b.n	801276c <_svfprintf_r+0x204>
 8012840:	f045 0510 	orr.w	r5, r5, #16
 8012844:	e792      	b.n	801276c <_svfprintf_r+0x204>
 8012846:	4632      	mov	r2, r6
 8012848:	f852 3b04 	ldr.w	r3, [r2], #4
 801284c:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8012850:	2300      	movs	r3, #0
 8012852:	9205      	str	r2, [sp, #20]
 8012854:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8012858:	469b      	mov	fp, r3
 801285a:	f04f 0801 	mov.w	r8, #1
 801285e:	930c      	str	r3, [sp, #48]	@ 0x30
 8012860:	461f      	mov	r7, r3
 8012862:	9306      	str	r3, [sp, #24]
 8012864:	461e      	mov	r6, r3
 8012866:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 801286a:	e1a1      	b.n	8012bb0 <_svfprintf_r+0x648>
 801286c:	f045 0510 	orr.w	r5, r5, #16
 8012870:	06a8      	lsls	r0, r5, #26
 8012872:	d512      	bpl.n	801289a <_svfprintf_r+0x332>
 8012874:	3607      	adds	r6, #7
 8012876:	f026 0307 	bic.w	r3, r6, #7
 801287a:	461a      	mov	r2, r3
 801287c:	685f      	ldr	r7, [r3, #4]
 801287e:	f852 6b08 	ldr.w	r6, [r2], #8
 8012882:	9205      	str	r2, [sp, #20]
 8012884:	2f00      	cmp	r7, #0
 8012886:	da06      	bge.n	8012896 <_svfprintf_r+0x32e>
 8012888:	4276      	negs	r6, r6
 801288a:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801288e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8012892:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8012896:	2301      	movs	r3, #1
 8012898:	e33d      	b.n	8012f16 <_svfprintf_r+0x9ae>
 801289a:	4633      	mov	r3, r6
 801289c:	06e9      	lsls	r1, r5, #27
 801289e:	f853 7b04 	ldr.w	r7, [r3], #4
 80128a2:	9305      	str	r3, [sp, #20]
 80128a4:	d502      	bpl.n	80128ac <_svfprintf_r+0x344>
 80128a6:	463e      	mov	r6, r7
 80128a8:	17ff      	asrs	r7, r7, #31
 80128aa:	e7eb      	b.n	8012884 <_svfprintf_r+0x31c>
 80128ac:	066a      	lsls	r2, r5, #25
 80128ae:	d503      	bpl.n	80128b8 <_svfprintf_r+0x350>
 80128b0:	b23e      	sxth	r6, r7
 80128b2:	f347 37c0 	sbfx	r7, r7, #15, #1
 80128b6:	e7e5      	b.n	8012884 <_svfprintf_r+0x31c>
 80128b8:	05ab      	lsls	r3, r5, #22
 80128ba:	d5f4      	bpl.n	80128a6 <_svfprintf_r+0x33e>
 80128bc:	b27e      	sxtb	r6, r7
 80128be:	f347 17c0 	sbfx	r7, r7, #7, #1
 80128c2:	e7df      	b.n	8012884 <_svfprintf_r+0x31c>
 80128c4:	3607      	adds	r6, #7
 80128c6:	f026 0307 	bic.w	r3, r6, #7
 80128ca:	ecb3 8b02 	vldmia	r3!, {d8}
 80128ce:	ed9f 7b70 	vldr	d7, [pc, #448]	@ 8012a90 <_svfprintf_r+0x528>
 80128d2:	eeb0 6bc8 	vabs.f64	d6, d8
 80128d6:	eeb4 6b47 	vcmp.f64	d6, d7
 80128da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128de:	9305      	str	r3, [sp, #20]
 80128e0:	dd18      	ble.n	8012914 <_svfprintf_r+0x3ac>
 80128e2:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80128e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ea:	d502      	bpl.n	80128f2 <_svfprintf_r+0x38a>
 80128ec:	232d      	movs	r3, #45	@ 0x2d
 80128ee:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80128f2:	4a69      	ldr	r2, [pc, #420]	@ (8012a98 <_svfprintf_r+0x530>)
 80128f4:	4b69      	ldr	r3, [pc, #420]	@ (8012a9c <_svfprintf_r+0x534>)
 80128f6:	9904      	ldr	r1, [sp, #16]
 80128f8:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80128fc:	2947      	cmp	r1, #71	@ 0x47
 80128fe:	bfd4      	ite	le
 8012900:	4691      	movle	r9, r2
 8012902:	4699      	movgt	r9, r3
 8012904:	f04f 0b00 	mov.w	fp, #0
 8012908:	f04f 0803 	mov.w	r8, #3
 801290c:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8012910:	f000 bfa4 	b.w	801385c <_svfprintf_r+0x12f4>
 8012914:	eeb4 8b48 	vcmp.f64	d8, d8
 8012918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291c:	d709      	bvc.n	8012932 <_svfprintf_r+0x3ca>
 801291e:	ee18 3a90 	vmov	r3, s17
 8012922:	2b00      	cmp	r3, #0
 8012924:	bfbc      	itt	lt
 8012926:	232d      	movlt	r3, #45	@ 0x2d
 8012928:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 801292c:	4a5c      	ldr	r2, [pc, #368]	@ (8012aa0 <_svfprintf_r+0x538>)
 801292e:	4b5d      	ldr	r3, [pc, #372]	@ (8012aa4 <_svfprintf_r+0x53c>)
 8012930:	e7e1      	b.n	80128f6 <_svfprintf_r+0x38e>
 8012932:	9b04      	ldr	r3, [sp, #16]
 8012934:	2b61      	cmp	r3, #97	@ 0x61
 8012936:	d027      	beq.n	8012988 <_svfprintf_r+0x420>
 8012938:	2b41      	cmp	r3, #65	@ 0x41
 801293a:	d127      	bne.n	801298c <_svfprintf_r+0x424>
 801293c:	2358      	movs	r3, #88	@ 0x58
 801293e:	2230      	movs	r2, #48	@ 0x30
 8012940:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8012944:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 8012948:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 801294c:	f045 0502 	orr.w	r5, r5, #2
 8012950:	f340 8089 	ble.w	8012a66 <_svfprintf_r+0x4fe>
 8012954:	9802      	ldr	r0, [sp, #8]
 8012956:	f108 0101 	add.w	r1, r8, #1
 801295a:	f7ff fbb9 	bl	80120d0 <_malloc_r>
 801295e:	4681      	mov	r9, r0
 8012960:	2800      	cmp	r0, #0
 8012962:	f040 8085 	bne.w	8012a70 <_svfprintf_r+0x508>
 8012966:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801296a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801296e:	f8aa 300c 	strh.w	r3, [sl, #12]
 8012972:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8012976:	065b      	lsls	r3, r3, #25
 8012978:	f53f ae1a 	bmi.w	80125b0 <_svfprintf_r+0x48>
 801297c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801297e:	b04b      	add	sp, #300	@ 0x12c
 8012980:	ecbd 8b04 	vpop	{d8-d9}
 8012984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012988:	2378      	movs	r3, #120	@ 0x78
 801298a:	e7d8      	b.n	801293e <_svfprintf_r+0x3d6>
 801298c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8012990:	d070      	beq.n	8012a74 <_svfprintf_r+0x50c>
 8012992:	9b04      	ldr	r3, [sp, #16]
 8012994:	f023 0320 	bic.w	r3, r3, #32
 8012998:	2b47      	cmp	r3, #71	@ 0x47
 801299a:	d170      	bne.n	8012a7e <_svfprintf_r+0x516>
 801299c:	f1b8 0f00 	cmp.w	r8, #0
 80129a0:	d16d      	bne.n	8012a7e <_svfprintf_r+0x516>
 80129a2:	46c3      	mov	fp, r8
 80129a4:	f04f 0801 	mov.w	r8, #1
 80129a8:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80129ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80129ae:	ee18 3a90 	vmov	r3, s17
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	da66      	bge.n	8012a84 <_svfprintf_r+0x51c>
 80129b6:	eeb1 9b48 	vneg.f64	d9, d8
 80129ba:	232d      	movs	r3, #45	@ 0x2d
 80129bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80129be:	9b04      	ldr	r3, [sp, #16]
 80129c0:	f023 0720 	bic.w	r7, r3, #32
 80129c4:	2f41      	cmp	r7, #65	@ 0x41
 80129c6:	f040 81c6 	bne.w	8012d56 <_svfprintf_r+0x7ee>
 80129ca:	eeb0 0b49 	vmov.f64	d0, d9
 80129ce:	a818      	add	r0, sp, #96	@ 0x60
 80129d0:	f7fe fc5a 	bl	8011288 <frexp>
 80129d4:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 80129d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80129dc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80129e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e4:	bf08      	it	eq
 80129e6:	2301      	moveq	r3, #1
 80129e8:	9a04      	ldr	r2, [sp, #16]
 80129ea:	bf08      	it	eq
 80129ec:	9318      	streq	r3, [sp, #96]	@ 0x60
 80129ee:	492e      	ldr	r1, [pc, #184]	@ (8012aa8 <_svfprintf_r+0x540>)
 80129f0:	4b2e      	ldr	r3, [pc, #184]	@ (8012aac <_svfprintf_r+0x544>)
 80129f2:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 80129f6:	2a61      	cmp	r2, #97	@ 0x61
 80129f8:	bf18      	it	ne
 80129fa:	4619      	movne	r1, r3
 80129fc:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8012a00:	464b      	mov	r3, r9
 8012a02:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012a06:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8012a0a:	ee16 0a90 	vmov	r0, s13
 8012a0e:	5c0e      	ldrb	r6, [r1, r0]
 8012a10:	f803 6b01 	strb.w	r6, [r3], #1
 8012a14:	1c56      	adds	r6, r2, #1
 8012a16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012a1a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8012a1e:	d006      	beq.n	8012a2e <_svfprintf_r+0x4c6>
 8012a20:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8012a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a28:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
 8012a2c:	d12e      	bne.n	8012a8c <_svfprintf_r+0x524>
 8012a2e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8012a32:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3a:	dc39      	bgt.n	8012ab0 <_svfprintf_r+0x548>
 8012a3c:	eeb4 0b47 	vcmp.f64	d0, d7
 8012a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a44:	d101      	bne.n	8012a4a <_svfprintf_r+0x4e2>
 8012a46:	07c6      	lsls	r6, r0, #31
 8012a48:	d432      	bmi.n	8012ab0 <_svfprintf_r+0x548>
 8012a4a:	4619      	mov	r1, r3
 8012a4c:	189e      	adds	r6, r3, r2
 8012a4e:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8012a52:	1a70      	subs	r0, r6, r1
 8012a54:	2800      	cmp	r0, #0
 8012a56:	f280 817b 	bge.w	8012d50 <_svfprintf_r+0x7e8>
 8012a5a:	1c51      	adds	r1, r2, #1
 8012a5c:	3201      	adds	r2, #1
 8012a5e:	bfb8      	it	lt
 8012a60:	2100      	movlt	r1, #0
 8012a62:	440b      	add	r3, r1
 8012a64:	e037      	b.n	8012ad6 <_svfprintf_r+0x56e>
 8012a66:	f04f 0b00 	mov.w	fp, #0
 8012a6a:	f10d 09c4 	add.w	r9, sp, #196	@ 0xc4
 8012a6e:	e79b      	b.n	80129a8 <_svfprintf_r+0x440>
 8012a70:	4683      	mov	fp, r0
 8012a72:	e799      	b.n	80129a8 <_svfprintf_r+0x440>
 8012a74:	f04f 0b00 	mov.w	fp, #0
 8012a78:	f04f 0806 	mov.w	r8, #6
 8012a7c:	e794      	b.n	80129a8 <_svfprintf_r+0x440>
 8012a7e:	f04f 0b00 	mov.w	fp, #0
 8012a82:	e791      	b.n	80129a8 <_svfprintf_r+0x440>
 8012a84:	2300      	movs	r3, #0
 8012a86:	eeb0 9b48 	vmov.f64	d9, d8
 8012a8a:	e797      	b.n	80129bc <_svfprintf_r+0x454>
 8012a8c:	4632      	mov	r2, r6
 8012a8e:	e7b8      	b.n	8012a02 <_svfprintf_r+0x49a>
 8012a90:	ffffffff 	.word	0xffffffff
 8012a94:	7fefffff 	.word	0x7fefffff
 8012a98:	080162b9 	.word	0x080162b9
 8012a9c:	080162bd 	.word	0x080162bd
 8012aa0:	080162c1 	.word	0x080162c1
 8012aa4:	080162c5 	.word	0x080162c5
 8012aa8:	08016105 	.word	0x08016105
 8012aac:	080160f4 	.word	0x080160f4
 8012ab0:	7bce      	ldrb	r6, [r1, #15]
 8012ab2:	931c      	str	r3, [sp, #112]	@ 0x70
 8012ab4:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8012ab8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8012aba:	1e42      	subs	r2, r0, #1
 8012abc:	921c      	str	r2, [sp, #112]	@ 0x70
 8012abe:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8012ac2:	42b2      	cmp	r2, r6
 8012ac4:	f000 8141 	beq.w	8012d4a <_svfprintf_r+0x7e2>
 8012ac8:	2a39      	cmp	r2, #57	@ 0x39
 8012aca:	bf16      	itet	ne
 8012acc:	3201      	addne	r2, #1
 8012ace:	7a8a      	ldrbeq	r2, [r1, #10]
 8012ad0:	b2d2      	uxtbne	r2, r2
 8012ad2:	f800 2c01 	strb.w	r2, [r0, #-1]
 8012ad6:	eba3 0309 	sub.w	r3, r3, r9
 8012ada:	2f47      	cmp	r7, #71	@ 0x47
 8012adc:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8012ade:	9303      	str	r3, [sp, #12]
 8012ae0:	f040 8179 	bne.w	8012dd6 <_svfprintf_r+0x86e>
 8012ae4:	1cf1      	adds	r1, r6, #3
 8012ae6:	db02      	blt.n	8012aee <_svfprintf_r+0x586>
 8012ae8:	4546      	cmp	r6, r8
 8012aea:	f340 8196 	ble.w	8012e1a <_svfprintf_r+0x8b2>
 8012aee:	9b04      	ldr	r3, [sp, #16]
 8012af0:	3b02      	subs	r3, #2
 8012af2:	9304      	str	r3, [sp, #16]
 8012af4:	9904      	ldr	r1, [sp, #16]
 8012af6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8012afa:	f021 0120 	bic.w	r1, r1, #32
 8012afe:	2941      	cmp	r1, #65	@ 0x41
 8012b00:	bf08      	it	eq
 8012b02:	320f      	addeq	r2, #15
 8012b04:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 8012b08:	bf06      	itte	eq
 8012b0a:	b2d2      	uxtbeq	r2, r2
 8012b0c:	2101      	moveq	r1, #1
 8012b0e:	2100      	movne	r1, #0
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	9318      	str	r3, [sp, #96]	@ 0x60
 8012b14:	bfb8      	it	lt
 8012b16:	f1c6 0301 	rsblt	r3, r6, #1
 8012b1a:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 8012b1e:	bfb4      	ite	lt
 8012b20:	222d      	movlt	r2, #45	@ 0x2d
 8012b22:	222b      	movge	r2, #43	@ 0x2b
 8012b24:	2b09      	cmp	r3, #9
 8012b26:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 8012b2a:	f340 8169 	ble.w	8012e00 <_svfprintf_r+0x898>
 8012b2e:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 8012b32:	270a      	movs	r7, #10
 8012b34:	4602      	mov	r2, r0
 8012b36:	fbb3 f6f7 	udiv	r6, r3, r7
 8012b3a:	fb07 3116 	mls	r1, r7, r6, r3
 8012b3e:	3130      	adds	r1, #48	@ 0x30
 8012b40:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012b44:	4619      	mov	r1, r3
 8012b46:	2963      	cmp	r1, #99	@ 0x63
 8012b48:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
 8012b4c:	4633      	mov	r3, r6
 8012b4e:	dcf1      	bgt.n	8012b34 <_svfprintf_r+0x5cc>
 8012b50:	3330      	adds	r3, #48	@ 0x30
 8012b52:	1e91      	subs	r1, r2, #2
 8012b54:	f800 3c01 	strb.w	r3, [r0, #-1]
 8012b58:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 8012b5c:	460b      	mov	r3, r1
 8012b5e:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 8012b62:	4283      	cmp	r3, r0
 8012b64:	f0c0 8147 	bcc.w	8012df6 <_svfprintf_r+0x88e>
 8012b68:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 8012b6c:	1a9b      	subs	r3, r3, r2
 8012b6e:	4281      	cmp	r1, r0
 8012b70:	bf88      	it	hi
 8012b72:	2300      	movhi	r3, #0
 8012b74:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 8012b78:	441a      	add	r2, r3
 8012b7a:	ab1a      	add	r3, sp, #104	@ 0x68
 8012b7c:	1ad3      	subs	r3, r2, r3
 8012b7e:	9a03      	ldr	r2, [sp, #12]
 8012b80:	9311      	str	r3, [sp, #68]	@ 0x44
 8012b82:	2a01      	cmp	r2, #1
 8012b84:	eb03 0802 	add.w	r8, r3, r2
 8012b88:	dc01      	bgt.n	8012b8e <_svfprintf_r+0x626>
 8012b8a:	07ea      	lsls	r2, r5, #31
 8012b8c:	d501      	bpl.n	8012b92 <_svfprintf_r+0x62a>
 8012b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b90:	4498      	add	r8, r3
 8012b92:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8012b96:	2700      	movs	r7, #0
 8012b98:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8012b9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8012b9e:	9706      	str	r7, [sp, #24]
 8012ba0:	463e      	mov	r6, r7
 8012ba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	f040 8180 	bne.w	8012eaa <_svfprintf_r+0x942>
 8012baa:	2300      	movs	r3, #0
 8012bac:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8012bae:	930c      	str	r3, [sp, #48]	@ 0x30
 8012bb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012bb2:	4543      	cmp	r3, r8
 8012bb4:	bfb8      	it	lt
 8012bb6:	4643      	movlt	r3, r8
 8012bb8:	930d      	str	r3, [sp, #52]	@ 0x34
 8012bba:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 8012bbe:	b113      	cbz	r3, 8012bc6 <_svfprintf_r+0x65e>
 8012bc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	930d      	str	r3, [sp, #52]	@ 0x34
 8012bc6:	f015 0302 	ands.w	r3, r5, #2
 8012bca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012bcc:	bf1e      	ittt	ne
 8012bce:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 8012bd0:	3302      	addne	r3, #2
 8012bd2:	930d      	strne	r3, [sp, #52]	@ 0x34
 8012bd4:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8012bd8:	9314      	str	r3, [sp, #80]	@ 0x50
 8012bda:	d120      	bne.n	8012c1e <_svfprintf_r+0x6b6>
 8012bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012bde:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012be0:	1a9b      	subs	r3, r3, r2
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	dd1b      	ble.n	8012c1e <_svfprintf_r+0x6b6>
 8012be6:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 8012bea:	49a5      	ldr	r1, [pc, #660]	@ (8012e80 <_svfprintf_r+0x918>)
 8012bec:	6021      	str	r1, [r4, #0]
 8012bee:	2b10      	cmp	r3, #16
 8012bf0:	f102 0201 	add.w	r2, r2, #1
 8012bf4:	f104 0008 	add.w	r0, r4, #8
 8012bf8:	f300 828c 	bgt.w	8013114 <_svfprintf_r+0xbac>
 8012bfc:	eb0c 0103 	add.w	r1, ip, r3
 8012c00:	2a07      	cmp	r2, #7
 8012c02:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8012c06:	6063      	str	r3, [r4, #4]
 8012c08:	f340 8299 	ble.w	801313e <_svfprintf_r+0xbd6>
 8012c0c:	9802      	ldr	r0, [sp, #8]
 8012c0e:	aa1e      	add	r2, sp, #120	@ 0x78
 8012c10:	4651      	mov	r1, sl
 8012c12:	f001 fda7 	bl	8014764 <__ssprint_r>
 8012c16:	2800      	cmp	r0, #0
 8012c18:	f040 85c7 	bne.w	80137aa <_svfprintf_r+0x1242>
 8012c1c:	ac21      	add	r4, sp, #132	@ 0x84
 8012c1e:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 8012c22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012c24:	b16a      	cbz	r2, 8012c42 <_svfprintf_r+0x6da>
 8012c26:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 8012c2a:	6022      	str	r2, [r4, #0]
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	4413      	add	r3, r2
 8012c30:	9320      	str	r3, [sp, #128]	@ 0x80
 8012c32:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8012c34:	6062      	str	r2, [r4, #4]
 8012c36:	4413      	add	r3, r2
 8012c38:	2b07      	cmp	r3, #7
 8012c3a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8012c3c:	f300 8281 	bgt.w	8013142 <_svfprintf_r+0xbda>
 8012c40:	3408      	adds	r4, #8
 8012c42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012c44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012c46:	b162      	cbz	r2, 8012c62 <_svfprintf_r+0x6fa>
 8012c48:	aa17      	add	r2, sp, #92	@ 0x5c
 8012c4a:	6022      	str	r2, [r4, #0]
 8012c4c:	2202      	movs	r2, #2
 8012c4e:	4413      	add	r3, r2
 8012c50:	9320      	str	r3, [sp, #128]	@ 0x80
 8012c52:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8012c54:	6062      	str	r2, [r4, #4]
 8012c56:	3301      	adds	r3, #1
 8012c58:	2b07      	cmp	r3, #7
 8012c5a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8012c5c:	f300 827b 	bgt.w	8013156 <_svfprintf_r+0xbee>
 8012c60:	3408      	adds	r4, #8
 8012c62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012c64:	2b80      	cmp	r3, #128	@ 0x80
 8012c66:	d120      	bne.n	8012caa <_svfprintf_r+0x742>
 8012c68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c6a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012c6c:	1a9b      	subs	r3, r3, r2
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	dd1b      	ble.n	8012caa <_svfprintf_r+0x742>
 8012c72:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 8012c76:	4983      	ldr	r1, [pc, #524]	@ (8012e84 <_svfprintf_r+0x91c>)
 8012c78:	6021      	str	r1, [r4, #0]
 8012c7a:	2b10      	cmp	r3, #16
 8012c7c:	f102 0201 	add.w	r2, r2, #1
 8012c80:	f104 0008 	add.w	r0, r4, #8
 8012c84:	f300 8271 	bgt.w	801316a <_svfprintf_r+0xc02>
 8012c88:	eb0c 0103 	add.w	r1, ip, r3
 8012c8c:	2a07      	cmp	r2, #7
 8012c8e:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8012c92:	6063      	str	r3, [r4, #4]
 8012c94:	f340 827e 	ble.w	8013194 <_svfprintf_r+0xc2c>
 8012c98:	9802      	ldr	r0, [sp, #8]
 8012c9a:	aa1e      	add	r2, sp, #120	@ 0x78
 8012c9c:	4651      	mov	r1, sl
 8012c9e:	f001 fd61 	bl	8014764 <__ssprint_r>
 8012ca2:	2800      	cmp	r0, #0
 8012ca4:	f040 8581 	bne.w	80137aa <_svfprintf_r+0x1242>
 8012ca8:	ac21      	add	r4, sp, #132	@ 0x84
 8012caa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012cac:	eba3 0308 	sub.w	r3, r3, r8
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	930c      	str	r3, [sp, #48]	@ 0x30
 8012cb4:	dd1c      	ble.n	8012cf0 <_svfprintf_r+0x788>
 8012cb6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8012cb8:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 8012cbc:	2810      	cmp	r0, #16
 8012cbe:	4871      	ldr	r0, [pc, #452]	@ (8012e84 <_svfprintf_r+0x91c>)
 8012cc0:	6020      	str	r0, [r4, #0]
 8012cc2:	f102 0201 	add.w	r2, r2, #1
 8012cc6:	f104 0108 	add.w	r1, r4, #8
 8012cca:	f300 8265 	bgt.w	8013198 <_svfprintf_r+0xc30>
 8012cce:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8012cd0:	6060      	str	r0, [r4, #4]
 8012cd2:	4403      	add	r3, r0
 8012cd4:	2a07      	cmp	r2, #7
 8012cd6:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8012cda:	f340 8272 	ble.w	80131c2 <_svfprintf_r+0xc5a>
 8012cde:	9802      	ldr	r0, [sp, #8]
 8012ce0:	aa1e      	add	r2, sp, #120	@ 0x78
 8012ce2:	4651      	mov	r1, sl
 8012ce4:	f001 fd3e 	bl	8014764 <__ssprint_r>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	f040 855e 	bne.w	80137aa <_svfprintf_r+0x1242>
 8012cee:	ac21      	add	r4, sp, #132	@ 0x84
 8012cf0:	05e9      	lsls	r1, r5, #23
 8012cf2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012cf4:	f100 826c 	bmi.w	80131d0 <_svfprintf_r+0xc68>
 8012cf8:	4443      	add	r3, r8
 8012cfa:	9320      	str	r3, [sp, #128]	@ 0x80
 8012cfc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8012cfe:	3301      	adds	r3, #1
 8012d00:	2b07      	cmp	r3, #7
 8012d02:	e9c4 9800 	strd	r9, r8, [r4]
 8012d06:	931f      	str	r3, [sp, #124]	@ 0x7c
 8012d08:	f300 82a4 	bgt.w	8013254 <_svfprintf_r+0xcec>
 8012d0c:	3408      	adds	r4, #8
 8012d0e:	076a      	lsls	r2, r5, #29
 8012d10:	f100 852d 	bmi.w	801376e <_svfprintf_r+0x1206>
 8012d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012d18:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012d1a:	428a      	cmp	r2, r1
 8012d1c:	bfac      	ite	ge
 8012d1e:	189b      	addge	r3, r3, r2
 8012d20:	185b      	addlt	r3, r3, r1
 8012d22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d24:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8012d26:	b13b      	cbz	r3, 8012d38 <_svfprintf_r+0x7d0>
 8012d28:	9802      	ldr	r0, [sp, #8]
 8012d2a:	aa1e      	add	r2, sp, #120	@ 0x78
 8012d2c:	4651      	mov	r1, sl
 8012d2e:	f001 fd19 	bl	8014764 <__ssprint_r>
 8012d32:	2800      	cmp	r0, #0
 8012d34:	f040 8539 	bne.w	80137aa <_svfprintf_r+0x1242>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8012d3c:	f1bb 0f00 	cmp.w	fp, #0
 8012d40:	f040 854f 	bne.w	80137e2 <_svfprintf_r+0x127a>
 8012d44:	9e05      	ldr	r6, [sp, #20]
 8012d46:	ac21      	add	r4, sp, #132	@ 0x84
 8012d48:	e0bc      	b.n	8012ec4 <_svfprintf_r+0x95c>
 8012d4a:	f800 cc01 	strb.w	ip, [r0, #-1]
 8012d4e:	e6b3      	b.n	8012ab8 <_svfprintf_r+0x550>
 8012d50:	f801 cb01 	strb.w	ip, [r1], #1
 8012d54:	e67d      	b.n	8012a52 <_svfprintf_r+0x4ea>
 8012d56:	2f46      	cmp	r7, #70	@ 0x46
 8012d58:	d005      	beq.n	8012d66 <_svfprintf_r+0x7fe>
 8012d5a:	2f45      	cmp	r7, #69	@ 0x45
 8012d5c:	d117      	bne.n	8012d8e <_svfprintf_r+0x826>
 8012d5e:	f108 0601 	add.w	r6, r8, #1
 8012d62:	2102      	movs	r1, #2
 8012d64:	e001      	b.n	8012d6a <_svfprintf_r+0x802>
 8012d66:	4646      	mov	r6, r8
 8012d68:	2103      	movs	r1, #3
 8012d6a:	ab1c      	add	r3, sp, #112	@ 0x70
 8012d6c:	9301      	str	r3, [sp, #4]
 8012d6e:	ab19      	add	r3, sp, #100	@ 0x64
 8012d70:	9300      	str	r3, [sp, #0]
 8012d72:	9802      	ldr	r0, [sp, #8]
 8012d74:	eeb0 0b49 	vmov.f64	d0, d9
 8012d78:	ab18      	add	r3, sp, #96	@ 0x60
 8012d7a:	4632      	mov	r2, r6
 8012d7c:	f7fe fb54 	bl	8011428 <_dtoa_r>
 8012d80:	2f47      	cmp	r7, #71	@ 0x47
 8012d82:	4681      	mov	r9, r0
 8012d84:	d115      	bne.n	8012db2 <_svfprintf_r+0x84a>
 8012d86:	07e8      	lsls	r0, r5, #31
 8012d88:	d403      	bmi.n	8012d92 <_svfprintf_r+0x82a>
 8012d8a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012d8c:	e6a3      	b.n	8012ad6 <_svfprintf_r+0x56e>
 8012d8e:	4646      	mov	r6, r8
 8012d90:	e7e7      	b.n	8012d62 <_svfprintf_r+0x7fa>
 8012d92:	eb09 0306 	add.w	r3, r9, r6
 8012d96:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8012d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d9e:	bf08      	it	eq
 8012da0:	931c      	streq	r3, [sp, #112]	@ 0x70
 8012da2:	2130      	movs	r1, #48	@ 0x30
 8012da4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8012da6:	4293      	cmp	r3, r2
 8012da8:	d9ef      	bls.n	8012d8a <_svfprintf_r+0x822>
 8012daa:	1c50      	adds	r0, r2, #1
 8012dac:	901c      	str	r0, [sp, #112]	@ 0x70
 8012dae:	7011      	strb	r1, [r2, #0]
 8012db0:	e7f8      	b.n	8012da4 <_svfprintf_r+0x83c>
 8012db2:	2f46      	cmp	r7, #70	@ 0x46
 8012db4:	eb00 0306 	add.w	r3, r0, r6
 8012db8:	d1ed      	bne.n	8012d96 <_svfprintf_r+0x82e>
 8012dba:	7802      	ldrb	r2, [r0, #0]
 8012dbc:	2a30      	cmp	r2, #48	@ 0x30
 8012dbe:	d107      	bne.n	8012dd0 <_svfprintf_r+0x868>
 8012dc0:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8012dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc8:	bf1c      	itt	ne
 8012dca:	f1c6 0601 	rsbne	r6, r6, #1
 8012dce:	9618      	strne	r6, [sp, #96]	@ 0x60
 8012dd0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8012dd2:	4413      	add	r3, r2
 8012dd4:	e7df      	b.n	8012d96 <_svfprintf_r+0x82e>
 8012dd6:	2f46      	cmp	r7, #70	@ 0x46
 8012dd8:	f47f ae8c 	bne.w	8012af4 <_svfprintf_r+0x58c>
 8012ddc:	f005 0301 	and.w	r3, r5, #1
 8012de0:	2e00      	cmp	r6, #0
 8012de2:	ea43 0308 	orr.w	r3, r3, r8
 8012de6:	dd25      	ble.n	8012e34 <_svfprintf_r+0x8cc>
 8012de8:	b37b      	cbz	r3, 8012e4a <_svfprintf_r+0x8e2>
 8012dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dec:	18f3      	adds	r3, r6, r3
 8012dee:	4498      	add	r8, r3
 8012df0:	2366      	movs	r3, #102	@ 0x66
 8012df2:	9304      	str	r3, [sp, #16]
 8012df4:	e02f      	b.n	8012e56 <_svfprintf_r+0x8ee>
 8012df6:	f813 7b01 	ldrb.w	r7, [r3], #1
 8012dfa:	f806 7f01 	strb.w	r7, [r6, #1]!
 8012dfe:	e6b0      	b.n	8012b62 <_svfprintf_r+0x5fa>
 8012e00:	b941      	cbnz	r1, 8012e14 <_svfprintf_r+0x8ac>
 8012e02:	2230      	movs	r2, #48	@ 0x30
 8012e04:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 8012e08:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 8012e0c:	3330      	adds	r3, #48	@ 0x30
 8012e0e:	f802 3b01 	strb.w	r3, [r2], #1
 8012e12:	e6b2      	b.n	8012b7a <_svfprintf_r+0x612>
 8012e14:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 8012e18:	e7f8      	b.n	8012e0c <_svfprintf_r+0x8a4>
 8012e1a:	9b03      	ldr	r3, [sp, #12]
 8012e1c:	429e      	cmp	r6, r3
 8012e1e:	da0d      	bge.n	8012e3c <_svfprintf_r+0x8d4>
 8012e20:	9b03      	ldr	r3, [sp, #12]
 8012e22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e24:	2e00      	cmp	r6, #0
 8012e26:	eb03 0802 	add.w	r8, r3, r2
 8012e2a:	dc0c      	bgt.n	8012e46 <_svfprintf_r+0x8de>
 8012e2c:	f1c6 0301 	rsb	r3, r6, #1
 8012e30:	4498      	add	r8, r3
 8012e32:	e008      	b.n	8012e46 <_svfprintf_r+0x8de>
 8012e34:	b15b      	cbz	r3, 8012e4e <_svfprintf_r+0x8e6>
 8012e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e38:	3301      	adds	r3, #1
 8012e3a:	e7d8      	b.n	8012dee <_svfprintf_r+0x886>
 8012e3c:	07eb      	lsls	r3, r5, #31
 8012e3e:	d51d      	bpl.n	8012e7c <_svfprintf_r+0x914>
 8012e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e42:	eb06 0803 	add.w	r8, r6, r3
 8012e46:	2367      	movs	r3, #103	@ 0x67
 8012e48:	e7d3      	b.n	8012df2 <_svfprintf_r+0x88a>
 8012e4a:	46b0      	mov	r8, r6
 8012e4c:	e7d0      	b.n	8012df0 <_svfprintf_r+0x888>
 8012e4e:	2366      	movs	r3, #102	@ 0x66
 8012e50:	9304      	str	r3, [sp, #16]
 8012e52:	f04f 0801 	mov.w	r8, #1
 8012e56:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8012e5a:	9306      	str	r3, [sp, #24]
 8012e5c:	d023      	beq.n	8012ea6 <_svfprintf_r+0x93e>
 8012e5e:	2700      	movs	r7, #0
 8012e60:	2e00      	cmp	r6, #0
 8012e62:	9706      	str	r7, [sp, #24]
 8012e64:	f77f ae9d 	ble.w	8012ba2 <_svfprintf_r+0x63a>
 8012e68:	9b07      	ldr	r3, [sp, #28]
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	2bff      	cmp	r3, #255	@ 0xff
 8012e6e:	d10b      	bne.n	8012e88 <_svfprintf_r+0x920>
 8012e70:	9b06      	ldr	r3, [sp, #24]
 8012e72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012e74:	443b      	add	r3, r7
 8012e76:	fb02 8803 	mla	r8, r2, r3, r8
 8012e7a:	e692      	b.n	8012ba2 <_svfprintf_r+0x63a>
 8012e7c:	46b0      	mov	r8, r6
 8012e7e:	e7e2      	b.n	8012e46 <_svfprintf_r+0x8de>
 8012e80:	080162d9 	.word	0x080162d9
 8012e84:	080162c9 	.word	0x080162c9
 8012e88:	42b3      	cmp	r3, r6
 8012e8a:	daf1      	bge.n	8012e70 <_svfprintf_r+0x908>
 8012e8c:	1af6      	subs	r6, r6, r3
 8012e8e:	9b07      	ldr	r3, [sp, #28]
 8012e90:	785b      	ldrb	r3, [r3, #1]
 8012e92:	b133      	cbz	r3, 8012ea2 <_svfprintf_r+0x93a>
 8012e94:	9b06      	ldr	r3, [sp, #24]
 8012e96:	3301      	adds	r3, #1
 8012e98:	9306      	str	r3, [sp, #24]
 8012e9a:	9b07      	ldr	r3, [sp, #28]
 8012e9c:	3301      	adds	r3, #1
 8012e9e:	9307      	str	r3, [sp, #28]
 8012ea0:	e7e2      	b.n	8012e68 <_svfprintf_r+0x900>
 8012ea2:	3701      	adds	r7, #1
 8012ea4:	e7e0      	b.n	8012e68 <_svfprintf_r+0x900>
 8012ea6:	9f06      	ldr	r7, [sp, #24]
 8012ea8:	e67b      	b.n	8012ba2 <_svfprintf_r+0x63a>
 8012eaa:	232d      	movs	r3, #45	@ 0x2d
 8012eac:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8012eb0:	e67b      	b.n	8012baa <_svfprintf_r+0x642>
 8012eb2:	06af      	lsls	r7, r5, #26
 8012eb4:	d50a      	bpl.n	8012ecc <_svfprintf_r+0x964>
 8012eb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012eb8:	6833      	ldr	r3, [r6, #0]
 8012eba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012ebc:	17d2      	asrs	r2, r2, #31
 8012ebe:	e9c3 1200 	strd	r1, r2, [r3]
 8012ec2:	3604      	adds	r6, #4
 8012ec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012ec8:	f7ff bb87 	b.w	80125da <_svfprintf_r+0x72>
 8012ecc:	06e8      	lsls	r0, r5, #27
 8012ece:	d503      	bpl.n	8012ed8 <_svfprintf_r+0x970>
 8012ed0:	6833      	ldr	r3, [r6, #0]
 8012ed2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012ed4:	601a      	str	r2, [r3, #0]
 8012ed6:	e7f4      	b.n	8012ec2 <_svfprintf_r+0x95a>
 8012ed8:	0669      	lsls	r1, r5, #25
 8012eda:	d503      	bpl.n	8012ee4 <_svfprintf_r+0x97c>
 8012edc:	6833      	ldr	r3, [r6, #0]
 8012ede:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012ee0:	801a      	strh	r2, [r3, #0]
 8012ee2:	e7ee      	b.n	8012ec2 <_svfprintf_r+0x95a>
 8012ee4:	05aa      	lsls	r2, r5, #22
 8012ee6:	d5f3      	bpl.n	8012ed0 <_svfprintf_r+0x968>
 8012ee8:	6833      	ldr	r3, [r6, #0]
 8012eea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012eec:	701a      	strb	r2, [r3, #0]
 8012eee:	e7e8      	b.n	8012ec2 <_svfprintf_r+0x95a>
 8012ef0:	f045 0510 	orr.w	r5, r5, #16
 8012ef4:	f015 0320 	ands.w	r3, r5, #32
 8012ef8:	d020      	beq.n	8012f3c <_svfprintf_r+0x9d4>
 8012efa:	3607      	adds	r6, #7
 8012efc:	f026 0307 	bic.w	r3, r6, #7
 8012f00:	461a      	mov	r2, r3
 8012f02:	685f      	ldr	r7, [r3, #4]
 8012f04:	f852 6b08 	ldr.w	r6, [r2], #8
 8012f08:	9205      	str	r2, [sp, #20]
 8012f0a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8012f0e:	2300      	movs	r3, #0
 8012f10:	2200      	movs	r2, #0
 8012f12:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 8012f16:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8012f1a:	f000 8473 	beq.w	8013804 <_svfprintf_r+0x129c>
 8012f1e:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8012f22:	9206      	str	r2, [sp, #24]
 8012f24:	ea56 0207 	orrs.w	r2, r6, r7
 8012f28:	f040 8471 	bne.w	801380e <_svfprintf_r+0x12a6>
 8012f2c:	f1b8 0f00 	cmp.w	r8, #0
 8012f30:	f000 80dc 	beq.w	80130ec <_svfprintf_r+0xb84>
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	f040 846d 	bne.w	8013814 <_svfprintf_r+0x12ac>
 8012f3a:	e083      	b.n	8013044 <_svfprintf_r+0xadc>
 8012f3c:	4632      	mov	r2, r6
 8012f3e:	f015 0710 	ands.w	r7, r5, #16
 8012f42:	f852 6b04 	ldr.w	r6, [r2], #4
 8012f46:	9205      	str	r2, [sp, #20]
 8012f48:	d001      	beq.n	8012f4e <_svfprintf_r+0x9e6>
 8012f4a:	461f      	mov	r7, r3
 8012f4c:	e7dd      	b.n	8012f0a <_svfprintf_r+0x9a2>
 8012f4e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8012f52:	d001      	beq.n	8012f58 <_svfprintf_r+0x9f0>
 8012f54:	b2b6      	uxth	r6, r6
 8012f56:	e7d8      	b.n	8012f0a <_svfprintf_r+0x9a2>
 8012f58:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8012f5c:	d0d5      	beq.n	8012f0a <_svfprintf_r+0x9a2>
 8012f5e:	b2f6      	uxtb	r6, r6
 8012f60:	e7f3      	b.n	8012f4a <_svfprintf_r+0x9e2>
 8012f62:	4633      	mov	r3, r6
 8012f64:	2278      	movs	r2, #120	@ 0x78
 8012f66:	f853 6b04 	ldr.w	r6, [r3], #4
 8012f6a:	9305      	str	r3, [sp, #20]
 8012f6c:	f647 0330 	movw	r3, #30768	@ 0x7830
 8012f70:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 8012f74:	4b94      	ldr	r3, [pc, #592]	@ (80131c8 <_svfprintf_r+0xc60>)
 8012f76:	9312      	str	r3, [sp, #72]	@ 0x48
 8012f78:	2700      	movs	r7, #0
 8012f7a:	f045 0502 	orr.w	r5, r5, #2
 8012f7e:	2302      	movs	r3, #2
 8012f80:	9204      	str	r2, [sp, #16]
 8012f82:	e7c5      	b.n	8012f10 <_svfprintf_r+0x9a8>
 8012f84:	4633      	mov	r3, r6
 8012f86:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8012f8a:	f853 9b04 	ldr.w	r9, [r3], #4
 8012f8e:	9305      	str	r3, [sp, #20]
 8012f90:	f04f 0600 	mov.w	r6, #0
 8012f94:	f88d 605b 	strb.w	r6, [sp, #91]	@ 0x5b
 8012f98:	d00f      	beq.n	8012fba <_svfprintf_r+0xa52>
 8012f9a:	4642      	mov	r2, r8
 8012f9c:	4631      	mov	r1, r6
 8012f9e:	4648      	mov	r0, r9
 8012fa0:	f7ed f99e 	bl	80002e0 <memchr>
 8012fa4:	4683      	mov	fp, r0
 8012fa6:	2800      	cmp	r0, #0
 8012fa8:	f43f acb0 	beq.w	801290c <_svfprintf_r+0x3a4>
 8012fac:	eba0 0809 	sub.w	r8, r0, r9
 8012fb0:	46b3      	mov	fp, r6
 8012fb2:	960c      	str	r6, [sp, #48]	@ 0x30
 8012fb4:	4637      	mov	r7, r6
 8012fb6:	9606      	str	r6, [sp, #24]
 8012fb8:	e5fa      	b.n	8012bb0 <_svfprintf_r+0x648>
 8012fba:	4648      	mov	r0, r9
 8012fbc:	f7ed f9e0 	bl	8000380 <strlen>
 8012fc0:	46b3      	mov	fp, r6
 8012fc2:	4680      	mov	r8, r0
 8012fc4:	e4a2      	b.n	801290c <_svfprintf_r+0x3a4>
 8012fc6:	f045 0510 	orr.w	r5, r5, #16
 8012fca:	f015 0320 	ands.w	r3, r5, #32
 8012fce:	d009      	beq.n	8012fe4 <_svfprintf_r+0xa7c>
 8012fd0:	3607      	adds	r6, #7
 8012fd2:	f026 0307 	bic.w	r3, r6, #7
 8012fd6:	461a      	mov	r2, r3
 8012fd8:	685f      	ldr	r7, [r3, #4]
 8012fda:	f852 6b08 	ldr.w	r6, [r2], #8
 8012fde:	9205      	str	r2, [sp, #20]
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	e795      	b.n	8012f10 <_svfprintf_r+0x9a8>
 8012fe4:	4632      	mov	r2, r6
 8012fe6:	f015 0710 	ands.w	r7, r5, #16
 8012fea:	f852 6b04 	ldr.w	r6, [r2], #4
 8012fee:	9205      	str	r2, [sp, #20]
 8012ff0:	d001      	beq.n	8012ff6 <_svfprintf_r+0xa8e>
 8012ff2:	461f      	mov	r7, r3
 8012ff4:	e7f4      	b.n	8012fe0 <_svfprintf_r+0xa78>
 8012ff6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8012ffa:	d001      	beq.n	8013000 <_svfprintf_r+0xa98>
 8012ffc:	b2b6      	uxth	r6, r6
 8012ffe:	e7ef      	b.n	8012fe0 <_svfprintf_r+0xa78>
 8013000:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8013004:	d0ec      	beq.n	8012fe0 <_svfprintf_r+0xa78>
 8013006:	b2f6      	uxtb	r6, r6
 8013008:	e7f3      	b.n	8012ff2 <_svfprintf_r+0xa8a>
 801300a:	4b70      	ldr	r3, [pc, #448]	@ (80131cc <_svfprintf_r+0xc64>)
 801300c:	f7ff bb7a 	b.w	8012704 <_svfprintf_r+0x19c>
 8013010:	4632      	mov	r2, r6
 8013012:	f015 0710 	ands.w	r7, r5, #16
 8013016:	f852 6b04 	ldr.w	r6, [r2], #4
 801301a:	9205      	str	r2, [sp, #20]
 801301c:	d002      	beq.n	8013024 <_svfprintf_r+0xabc>
 801301e:	461f      	mov	r7, r3
 8013020:	f7ff bb7d 	b.w	801271e <_svfprintf_r+0x1b6>
 8013024:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8013028:	d002      	beq.n	8013030 <_svfprintf_r+0xac8>
 801302a:	b2b6      	uxth	r6, r6
 801302c:	f7ff bb77 	b.w	801271e <_svfprintf_r+0x1b6>
 8013030:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8013034:	f43f ab73 	beq.w	801271e <_svfprintf_r+0x1b6>
 8013038:	b2f6      	uxtb	r6, r6
 801303a:	e7f0      	b.n	801301e <_svfprintf_r+0xab6>
 801303c:	2e0a      	cmp	r6, #10
 801303e:	f177 0300 	sbcs.w	r3, r7, #0
 8013042:	d206      	bcs.n	8013052 <_svfprintf_r+0xaea>
 8013044:	3630      	adds	r6, #48	@ 0x30
 8013046:	b2f6      	uxtb	r6, r6
 8013048:	f88d 6127 	strb.w	r6, [sp, #295]	@ 0x127
 801304c:	f20d 1927 	addw	r9, sp, #295	@ 0x127
 8013050:	e3fc      	b.n	801384c <_svfprintf_r+0x12e4>
 8013052:	2300      	movs	r3, #0
 8013054:	9303      	str	r3, [sp, #12]
 8013056:	9b06      	ldr	r3, [sp, #24]
 8013058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801305c:	ad4a      	add	r5, sp, #296	@ 0x128
 801305e:	930c      	str	r3, [sp, #48]	@ 0x30
 8013060:	220a      	movs	r2, #10
 8013062:	2300      	movs	r3, #0
 8013064:	4630      	mov	r0, r6
 8013066:	4639      	mov	r1, r7
 8013068:	f7ed f992 	bl	8000390 <__aeabi_uldivmod>
 801306c:	3230      	adds	r2, #48	@ 0x30
 801306e:	f805 2c01 	strb.w	r2, [r5, #-1]
 8013072:	9a03      	ldr	r2, [sp, #12]
 8013074:	3201      	adds	r2, #1
 8013076:	9203      	str	r2, [sp, #12]
 8013078:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801307a:	4603      	mov	r3, r0
 801307c:	468b      	mov	fp, r1
 801307e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8013082:	b1e2      	cbz	r2, 80130be <_svfprintf_r+0xb56>
 8013084:	9a07      	ldr	r2, [sp, #28]
 8013086:	9903      	ldr	r1, [sp, #12]
 8013088:	7812      	ldrb	r2, [r2, #0]
 801308a:	4291      	cmp	r1, r2
 801308c:	d117      	bne.n	80130be <_svfprintf_r+0xb56>
 801308e:	29ff      	cmp	r1, #255	@ 0xff
 8013090:	d015      	beq.n	80130be <_svfprintf_r+0xb56>
 8013092:	2e0a      	cmp	r6, #10
 8013094:	f177 0200 	sbcs.w	r2, r7, #0
 8013098:	d311      	bcc.n	80130be <_svfprintf_r+0xb56>
 801309a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801309c:	9003      	str	r0, [sp, #12]
 801309e:	eba9 0903 	sub.w	r9, r9, r3
 80130a2:	461a      	mov	r2, r3
 80130a4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80130a6:	4648      	mov	r0, r9
 80130a8:	f7fe f87c 	bl	80111a4 <strncpy>
 80130ac:	9b07      	ldr	r3, [sp, #28]
 80130ae:	785a      	ldrb	r2, [r3, #1]
 80130b0:	9b03      	ldr	r3, [sp, #12]
 80130b2:	b11a      	cbz	r2, 80130bc <_svfprintf_r+0xb54>
 80130b4:	9a07      	ldr	r2, [sp, #28]
 80130b6:	3201      	adds	r2, #1
 80130b8:	9207      	str	r2, [sp, #28]
 80130ba:	2200      	movs	r2, #0
 80130bc:	9203      	str	r2, [sp, #12]
 80130be:	2e0a      	cmp	r6, #10
 80130c0:	f177 0700 	sbcs.w	r7, r7, #0
 80130c4:	f0c0 83c2 	bcc.w	801384c <_svfprintf_r+0x12e4>
 80130c8:	461e      	mov	r6, r3
 80130ca:	465f      	mov	r7, fp
 80130cc:	464d      	mov	r5, r9
 80130ce:	e7c7      	b.n	8013060 <_svfprintf_r+0xaf8>
 80130d0:	f006 030f 	and.w	r3, r6, #15
 80130d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80130d6:	0936      	lsrs	r6, r6, #4
 80130d8:	5cd3      	ldrb	r3, [r2, r3]
 80130da:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80130de:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 80130e2:	093f      	lsrs	r7, r7, #4
 80130e4:	ea56 0307 	orrs.w	r3, r6, r7
 80130e8:	d1f2      	bne.n	80130d0 <_svfprintf_r+0xb68>
 80130ea:	e3af      	b.n	801384c <_svfprintf_r+0x12e4>
 80130ec:	b91b      	cbnz	r3, 80130f6 <_svfprintf_r+0xb8e>
 80130ee:	07e8      	lsls	r0, r5, #31
 80130f0:	d501      	bpl.n	80130f6 <_svfprintf_r+0xb8e>
 80130f2:	2630      	movs	r6, #48	@ 0x30
 80130f4:	e7a8      	b.n	8013048 <_svfprintf_r+0xae0>
 80130f6:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 80130fa:	e3a7      	b.n	801384c <_svfprintf_r+0x12e4>
 80130fc:	9b04      	ldr	r3, [sp, #16]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	f000 8375 	beq.w	80137ee <_svfprintf_r+0x1286>
 8013104:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8013108:	2300      	movs	r3, #0
 801310a:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 801310e:	9605      	str	r6, [sp, #20]
 8013110:	f7ff bba2 	b.w	8012858 <_svfprintf_r+0x2f0>
 8013114:	2110      	movs	r1, #16
 8013116:	6061      	str	r1, [r4, #4]
 8013118:	2a07      	cmp	r2, #7
 801311a:	4461      	add	r1, ip
 801311c:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8013120:	dd0a      	ble.n	8013138 <_svfprintf_r+0xbd0>
 8013122:	9802      	ldr	r0, [sp, #8]
 8013124:	9315      	str	r3, [sp, #84]	@ 0x54
 8013126:	aa1e      	add	r2, sp, #120	@ 0x78
 8013128:	4651      	mov	r1, sl
 801312a:	f001 fb1b 	bl	8014764 <__ssprint_r>
 801312e:	2800      	cmp	r0, #0
 8013130:	f040 833b 	bne.w	80137aa <_svfprintf_r+0x1242>
 8013134:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013136:	a821      	add	r0, sp, #132	@ 0x84
 8013138:	3b10      	subs	r3, #16
 801313a:	4604      	mov	r4, r0
 801313c:	e553      	b.n	8012be6 <_svfprintf_r+0x67e>
 801313e:	4604      	mov	r4, r0
 8013140:	e56d      	b.n	8012c1e <_svfprintf_r+0x6b6>
 8013142:	9802      	ldr	r0, [sp, #8]
 8013144:	aa1e      	add	r2, sp, #120	@ 0x78
 8013146:	4651      	mov	r1, sl
 8013148:	f001 fb0c 	bl	8014764 <__ssprint_r>
 801314c:	2800      	cmp	r0, #0
 801314e:	f040 832c 	bne.w	80137aa <_svfprintf_r+0x1242>
 8013152:	ac21      	add	r4, sp, #132	@ 0x84
 8013154:	e575      	b.n	8012c42 <_svfprintf_r+0x6da>
 8013156:	9802      	ldr	r0, [sp, #8]
 8013158:	aa1e      	add	r2, sp, #120	@ 0x78
 801315a:	4651      	mov	r1, sl
 801315c:	f001 fb02 	bl	8014764 <__ssprint_r>
 8013160:	2800      	cmp	r0, #0
 8013162:	f040 8322 	bne.w	80137aa <_svfprintf_r+0x1242>
 8013166:	ac21      	add	r4, sp, #132	@ 0x84
 8013168:	e57b      	b.n	8012c62 <_svfprintf_r+0x6fa>
 801316a:	2110      	movs	r1, #16
 801316c:	6061      	str	r1, [r4, #4]
 801316e:	2a07      	cmp	r2, #7
 8013170:	4461      	add	r1, ip
 8013172:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8013176:	dd0a      	ble.n	801318e <_svfprintf_r+0xc26>
 8013178:	9802      	ldr	r0, [sp, #8]
 801317a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801317c:	aa1e      	add	r2, sp, #120	@ 0x78
 801317e:	4651      	mov	r1, sl
 8013180:	f001 faf0 	bl	8014764 <__ssprint_r>
 8013184:	2800      	cmp	r0, #0
 8013186:	f040 8310 	bne.w	80137aa <_svfprintf_r+0x1242>
 801318a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801318c:	a821      	add	r0, sp, #132	@ 0x84
 801318e:	3b10      	subs	r3, #16
 8013190:	4604      	mov	r4, r0
 8013192:	e56e      	b.n	8012c72 <_svfprintf_r+0x70a>
 8013194:	4604      	mov	r4, r0
 8013196:	e588      	b.n	8012caa <_svfprintf_r+0x742>
 8013198:	2010      	movs	r0, #16
 801319a:	4403      	add	r3, r0
 801319c:	2a07      	cmp	r2, #7
 801319e:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 80131a2:	6060      	str	r0, [r4, #4]
 80131a4:	dd08      	ble.n	80131b8 <_svfprintf_r+0xc50>
 80131a6:	9802      	ldr	r0, [sp, #8]
 80131a8:	aa1e      	add	r2, sp, #120	@ 0x78
 80131aa:	4651      	mov	r1, sl
 80131ac:	f001 fada 	bl	8014764 <__ssprint_r>
 80131b0:	2800      	cmp	r0, #0
 80131b2:	f040 82fa 	bne.w	80137aa <_svfprintf_r+0x1242>
 80131b6:	a921      	add	r1, sp, #132	@ 0x84
 80131b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80131ba:	3b10      	subs	r3, #16
 80131bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80131be:	460c      	mov	r4, r1
 80131c0:	e579      	b.n	8012cb6 <_svfprintf_r+0x74e>
 80131c2:	460c      	mov	r4, r1
 80131c4:	e594      	b.n	8012cf0 <_svfprintf_r+0x788>
 80131c6:	bf00      	nop
 80131c8:	08016105 	.word	0x08016105
 80131cc:	080160f4 	.word	0x080160f4
 80131d0:	9a04      	ldr	r2, [sp, #16]
 80131d2:	2a65      	cmp	r2, #101	@ 0x65
 80131d4:	f340 823e 	ble.w	8013654 <_svfprintf_r+0x10ec>
 80131d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80131dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e0:	d169      	bne.n	80132b6 <_svfprintf_r+0xd4e>
 80131e2:	4a72      	ldr	r2, [pc, #456]	@ (80133ac <_svfprintf_r+0xe44>)
 80131e4:	6022      	str	r2, [r4, #0]
 80131e6:	2201      	movs	r2, #1
 80131e8:	4413      	add	r3, r2
 80131ea:	9320      	str	r3, [sp, #128]	@ 0x80
 80131ec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80131ee:	6062      	str	r2, [r4, #4]
 80131f0:	4413      	add	r3, r2
 80131f2:	2b07      	cmp	r3, #7
 80131f4:	931f      	str	r3, [sp, #124]	@ 0x7c
 80131f6:	dc37      	bgt.n	8013268 <_svfprintf_r+0xd00>
 80131f8:	3408      	adds	r4, #8
 80131fa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80131fc:	9a03      	ldr	r2, [sp, #12]
 80131fe:	4293      	cmp	r3, r2
 8013200:	db02      	blt.n	8013208 <_svfprintf_r+0xca0>
 8013202:	07ea      	lsls	r2, r5, #31
 8013204:	f57f ad83 	bpl.w	8012d0e <_svfprintf_r+0x7a6>
 8013208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801320a:	6023      	str	r3, [r4, #0]
 801320c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801320e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013210:	6063      	str	r3, [r4, #4]
 8013212:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013214:	4413      	add	r3, r2
 8013216:	9320      	str	r3, [sp, #128]	@ 0x80
 8013218:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801321a:	3301      	adds	r3, #1
 801321c:	2b07      	cmp	r3, #7
 801321e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8013220:	dc2c      	bgt.n	801327c <_svfprintf_r+0xd14>
 8013222:	3408      	adds	r4, #8
 8013224:	9b03      	ldr	r3, [sp, #12]
 8013226:	1e5e      	subs	r6, r3, #1
 8013228:	2e00      	cmp	r6, #0
 801322a:	f77f ad70 	ble.w	8012d0e <_svfprintf_r+0x7a6>
 801322e:	4f60      	ldr	r7, [pc, #384]	@ (80133b0 <_svfprintf_r+0xe48>)
 8013230:	f04f 0810 	mov.w	r8, #16
 8013234:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8013238:	2e10      	cmp	r6, #16
 801323a:	f103 0301 	add.w	r3, r3, #1
 801323e:	f104 0108 	add.w	r1, r4, #8
 8013242:	6027      	str	r7, [r4, #0]
 8013244:	dc24      	bgt.n	8013290 <_svfprintf_r+0xd28>
 8013246:	6066      	str	r6, [r4, #4]
 8013248:	2b07      	cmp	r3, #7
 801324a:	4416      	add	r6, r2
 801324c:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 8013250:	f340 828a 	ble.w	8013768 <_svfprintf_r+0x1200>
 8013254:	9802      	ldr	r0, [sp, #8]
 8013256:	aa1e      	add	r2, sp, #120	@ 0x78
 8013258:	4651      	mov	r1, sl
 801325a:	f001 fa83 	bl	8014764 <__ssprint_r>
 801325e:	2800      	cmp	r0, #0
 8013260:	f040 82a3 	bne.w	80137aa <_svfprintf_r+0x1242>
 8013264:	ac21      	add	r4, sp, #132	@ 0x84
 8013266:	e552      	b.n	8012d0e <_svfprintf_r+0x7a6>
 8013268:	9802      	ldr	r0, [sp, #8]
 801326a:	aa1e      	add	r2, sp, #120	@ 0x78
 801326c:	4651      	mov	r1, sl
 801326e:	f001 fa79 	bl	8014764 <__ssprint_r>
 8013272:	2800      	cmp	r0, #0
 8013274:	f040 8299 	bne.w	80137aa <_svfprintf_r+0x1242>
 8013278:	ac21      	add	r4, sp, #132	@ 0x84
 801327a:	e7be      	b.n	80131fa <_svfprintf_r+0xc92>
 801327c:	9802      	ldr	r0, [sp, #8]
 801327e:	aa1e      	add	r2, sp, #120	@ 0x78
 8013280:	4651      	mov	r1, sl
 8013282:	f001 fa6f 	bl	8014764 <__ssprint_r>
 8013286:	2800      	cmp	r0, #0
 8013288:	f040 828f 	bne.w	80137aa <_svfprintf_r+0x1242>
 801328c:	ac21      	add	r4, sp, #132	@ 0x84
 801328e:	e7c9      	b.n	8013224 <_svfprintf_r+0xcbc>
 8013290:	3210      	adds	r2, #16
 8013292:	2b07      	cmp	r3, #7
 8013294:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8013298:	f8c4 8004 	str.w	r8, [r4, #4]
 801329c:	dd08      	ble.n	80132b0 <_svfprintf_r+0xd48>
 801329e:	9802      	ldr	r0, [sp, #8]
 80132a0:	aa1e      	add	r2, sp, #120	@ 0x78
 80132a2:	4651      	mov	r1, sl
 80132a4:	f001 fa5e 	bl	8014764 <__ssprint_r>
 80132a8:	2800      	cmp	r0, #0
 80132aa:	f040 827e 	bne.w	80137aa <_svfprintf_r+0x1242>
 80132ae:	a921      	add	r1, sp, #132	@ 0x84
 80132b0:	3e10      	subs	r6, #16
 80132b2:	460c      	mov	r4, r1
 80132b4:	e7be      	b.n	8013234 <_svfprintf_r+0xccc>
 80132b6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80132b8:	2a00      	cmp	r2, #0
 80132ba:	dc7b      	bgt.n	80133b4 <_svfprintf_r+0xe4c>
 80132bc:	4a3b      	ldr	r2, [pc, #236]	@ (80133ac <_svfprintf_r+0xe44>)
 80132be:	6022      	str	r2, [r4, #0]
 80132c0:	2201      	movs	r2, #1
 80132c2:	4413      	add	r3, r2
 80132c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80132c6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80132c8:	6062      	str	r2, [r4, #4]
 80132ca:	4413      	add	r3, r2
 80132cc:	2b07      	cmp	r3, #7
 80132ce:	931f      	str	r3, [sp, #124]	@ 0x7c
 80132d0:	dc46      	bgt.n	8013360 <_svfprintf_r+0xdf8>
 80132d2:	3408      	adds	r4, #8
 80132d4:	9903      	ldr	r1, [sp, #12]
 80132d6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80132d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80132da:	430b      	orrs	r3, r1
 80132dc:	f005 0101 	and.w	r1, r5, #1
 80132e0:	430b      	orrs	r3, r1
 80132e2:	f43f ad14 	beq.w	8012d0e <_svfprintf_r+0x7a6>
 80132e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80132e8:	6023      	str	r3, [r4, #0]
 80132ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132ec:	6063      	str	r3, [r4, #4]
 80132ee:	441a      	add	r2, r3
 80132f0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80132f2:	9220      	str	r2, [sp, #128]	@ 0x80
 80132f4:	3301      	adds	r3, #1
 80132f6:	2b07      	cmp	r3, #7
 80132f8:	931f      	str	r3, [sp, #124]	@ 0x7c
 80132fa:	dc3b      	bgt.n	8013374 <_svfprintf_r+0xe0c>
 80132fc:	f104 0308 	add.w	r3, r4, #8
 8013300:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8013302:	2e00      	cmp	r6, #0
 8013304:	da1b      	bge.n	801333e <_svfprintf_r+0xdd6>
 8013306:	4f2a      	ldr	r7, [pc, #168]	@ (80133b0 <_svfprintf_r+0xe48>)
 8013308:	4276      	negs	r6, r6
 801330a:	461a      	mov	r2, r3
 801330c:	2410      	movs	r4, #16
 801330e:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 8013312:	2e10      	cmp	r6, #16
 8013314:	f101 0101 	add.w	r1, r1, #1
 8013318:	f103 0308 	add.w	r3, r3, #8
 801331c:	6017      	str	r7, [r2, #0]
 801331e:	dc33      	bgt.n	8013388 <_svfprintf_r+0xe20>
 8013320:	6056      	str	r6, [r2, #4]
 8013322:	2907      	cmp	r1, #7
 8013324:	4406      	add	r6, r0
 8013326:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 801332a:	dd08      	ble.n	801333e <_svfprintf_r+0xdd6>
 801332c:	9802      	ldr	r0, [sp, #8]
 801332e:	aa1e      	add	r2, sp, #120	@ 0x78
 8013330:	4651      	mov	r1, sl
 8013332:	f001 fa17 	bl	8014764 <__ssprint_r>
 8013336:	2800      	cmp	r0, #0
 8013338:	f040 8237 	bne.w	80137aa <_svfprintf_r+0x1242>
 801333c:	ab21      	add	r3, sp, #132	@ 0x84
 801333e:	9a03      	ldr	r2, [sp, #12]
 8013340:	605a      	str	r2, [r3, #4]
 8013342:	9903      	ldr	r1, [sp, #12]
 8013344:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013346:	f8c3 9000 	str.w	r9, [r3]
 801334a:	440a      	add	r2, r1
 801334c:	9220      	str	r2, [sp, #128]	@ 0x80
 801334e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8013350:	3201      	adds	r2, #1
 8013352:	2a07      	cmp	r2, #7
 8013354:	921f      	str	r2, [sp, #124]	@ 0x7c
 8013356:	f73f af7d 	bgt.w	8013254 <_svfprintf_r+0xcec>
 801335a:	f103 0408 	add.w	r4, r3, #8
 801335e:	e4d6      	b.n	8012d0e <_svfprintf_r+0x7a6>
 8013360:	9802      	ldr	r0, [sp, #8]
 8013362:	aa1e      	add	r2, sp, #120	@ 0x78
 8013364:	4651      	mov	r1, sl
 8013366:	f001 f9fd 	bl	8014764 <__ssprint_r>
 801336a:	2800      	cmp	r0, #0
 801336c:	f040 821d 	bne.w	80137aa <_svfprintf_r+0x1242>
 8013370:	ac21      	add	r4, sp, #132	@ 0x84
 8013372:	e7af      	b.n	80132d4 <_svfprintf_r+0xd6c>
 8013374:	9802      	ldr	r0, [sp, #8]
 8013376:	aa1e      	add	r2, sp, #120	@ 0x78
 8013378:	4651      	mov	r1, sl
 801337a:	f001 f9f3 	bl	8014764 <__ssprint_r>
 801337e:	2800      	cmp	r0, #0
 8013380:	f040 8213 	bne.w	80137aa <_svfprintf_r+0x1242>
 8013384:	ab21      	add	r3, sp, #132	@ 0x84
 8013386:	e7bb      	b.n	8013300 <_svfprintf_r+0xd98>
 8013388:	3010      	adds	r0, #16
 801338a:	2907      	cmp	r1, #7
 801338c:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 8013390:	6054      	str	r4, [r2, #4]
 8013392:	dd08      	ble.n	80133a6 <_svfprintf_r+0xe3e>
 8013394:	9802      	ldr	r0, [sp, #8]
 8013396:	aa1e      	add	r2, sp, #120	@ 0x78
 8013398:	4651      	mov	r1, sl
 801339a:	f001 f9e3 	bl	8014764 <__ssprint_r>
 801339e:	2800      	cmp	r0, #0
 80133a0:	f040 8203 	bne.w	80137aa <_svfprintf_r+0x1242>
 80133a4:	ab21      	add	r3, sp, #132	@ 0x84
 80133a6:	3e10      	subs	r6, #16
 80133a8:	461a      	mov	r2, r3
 80133aa:	e7b0      	b.n	801330e <_svfprintf_r+0xda6>
 80133ac:	0801624e 	.word	0x0801624e
 80133b0:	080162c9 	.word	0x080162c9
 80133b4:	9a03      	ldr	r2, [sp, #12]
 80133b6:	444a      	add	r2, r9
 80133b8:	9204      	str	r2, [sp, #16]
 80133ba:	9a03      	ldr	r2, [sp, #12]
 80133bc:	42b2      	cmp	r2, r6
 80133be:	bfa8      	it	ge
 80133c0:	4632      	movge	r2, r6
 80133c2:	2a00      	cmp	r2, #0
 80133c4:	4690      	mov	r8, r2
 80133c6:	dd0a      	ble.n	80133de <_svfprintf_r+0xe76>
 80133c8:	4413      	add	r3, r2
 80133ca:	9320      	str	r3, [sp, #128]	@ 0x80
 80133cc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80133ce:	3301      	adds	r3, #1
 80133d0:	2b07      	cmp	r3, #7
 80133d2:	e9c4 9200 	strd	r9, r2, [r4]
 80133d6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80133d8:	f300 8089 	bgt.w	80134ee <_svfprintf_r+0xf86>
 80133dc:	3408      	adds	r4, #8
 80133de:	4643      	mov	r3, r8
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	bfac      	ite	ge
 80133e4:	eba6 0808 	subge.w	r8, r6, r8
 80133e8:	46b0      	movlt	r8, r6
 80133ea:	f1b8 0f00 	cmp.w	r8, #0
 80133ee:	dd1b      	ble.n	8013428 <_svfprintf_r+0xec0>
 80133f0:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 80133f4:	4896      	ldr	r0, [pc, #600]	@ (8013650 <_svfprintf_r+0x10e8>)
 80133f6:	6020      	str	r0, [r4, #0]
 80133f8:	f1b8 0f10 	cmp.w	r8, #16
 80133fc:	f102 0201 	add.w	r2, r2, #1
 8013400:	f104 0108 	add.w	r1, r4, #8
 8013404:	dc7d      	bgt.n	8013502 <_svfprintf_r+0xf9a>
 8013406:	4443      	add	r3, r8
 8013408:	2a07      	cmp	r2, #7
 801340a:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 801340e:	f8c4 8004 	str.w	r8, [r4, #4]
 8013412:	f340 808a 	ble.w	801352a <_svfprintf_r+0xfc2>
 8013416:	9802      	ldr	r0, [sp, #8]
 8013418:	aa1e      	add	r2, sp, #120	@ 0x78
 801341a:	4651      	mov	r1, sl
 801341c:	f001 f9a2 	bl	8014764 <__ssprint_r>
 8013420:	2800      	cmp	r0, #0
 8013422:	f040 81c2 	bne.w	80137aa <_svfprintf_r+0x1242>
 8013426:	ac21      	add	r4, sp, #132	@ 0x84
 8013428:	056b      	lsls	r3, r5, #21
 801342a:	eb09 0806 	add.w	r8, r9, r6
 801342e:	d508      	bpl.n	8013442 <_svfprintf_r+0xeda>
 8013430:	9b06      	ldr	r3, [sp, #24]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d17b      	bne.n	801352e <_svfprintf_r+0xfc6>
 8013436:	2f00      	cmp	r7, #0
 8013438:	d17b      	bne.n	8013532 <_svfprintf_r+0xfca>
 801343a:	9b04      	ldr	r3, [sp, #16]
 801343c:	4598      	cmp	r8, r3
 801343e:	bf28      	it	cs
 8013440:	4698      	movcs	r8, r3
 8013442:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013444:	9a03      	ldr	r2, [sp, #12]
 8013446:	4293      	cmp	r3, r2
 8013448:	db01      	blt.n	801344e <_svfprintf_r+0xee6>
 801344a:	07ee      	lsls	r6, r5, #31
 801344c:	d50e      	bpl.n	801346c <_svfprintf_r+0xf04>
 801344e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013450:	6023      	str	r3, [r4, #0]
 8013452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013454:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013456:	6063      	str	r3, [r4, #4]
 8013458:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801345a:	4413      	add	r3, r2
 801345c:	9320      	str	r3, [sp, #128]	@ 0x80
 801345e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8013460:	3301      	adds	r3, #1
 8013462:	2b07      	cmp	r3, #7
 8013464:	931f      	str	r3, [sp, #124]	@ 0x7c
 8013466:	f300 80df 	bgt.w	8013628 <_svfprintf_r+0x10c0>
 801346a:	3408      	adds	r4, #8
 801346c:	9b03      	ldr	r3, [sp, #12]
 801346e:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8013470:	1bdf      	subs	r7, r3, r7
 8013472:	9b04      	ldr	r3, [sp, #16]
 8013474:	eba3 0308 	sub.w	r3, r3, r8
 8013478:	429f      	cmp	r7, r3
 801347a:	bfa8      	it	ge
 801347c:	461f      	movge	r7, r3
 801347e:	2f00      	cmp	r7, #0
 8013480:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013482:	dd0a      	ble.n	801349a <_svfprintf_r+0xf32>
 8013484:	443b      	add	r3, r7
 8013486:	9320      	str	r3, [sp, #128]	@ 0x80
 8013488:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801348a:	3301      	adds	r3, #1
 801348c:	2b07      	cmp	r3, #7
 801348e:	e9c4 8700 	strd	r8, r7, [r4]
 8013492:	931f      	str	r3, [sp, #124]	@ 0x7c
 8013494:	f300 80d2 	bgt.w	801363c <_svfprintf_r+0x10d4>
 8013498:	3408      	adds	r4, #8
 801349a:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 801349c:	9b03      	ldr	r3, [sp, #12]
 801349e:	2f00      	cmp	r7, #0
 80134a0:	eba3 0606 	sub.w	r6, r3, r6
 80134a4:	bfa8      	it	ge
 80134a6:	1bf6      	subge	r6, r6, r7
 80134a8:	2e00      	cmp	r6, #0
 80134aa:	f77f ac30 	ble.w	8012d0e <_svfprintf_r+0x7a6>
 80134ae:	4f68      	ldr	r7, [pc, #416]	@ (8013650 <_svfprintf_r+0x10e8>)
 80134b0:	f04f 0810 	mov.w	r8, #16
 80134b4:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 80134b8:	2e10      	cmp	r6, #16
 80134ba:	f103 0301 	add.w	r3, r3, #1
 80134be:	f104 0108 	add.w	r1, r4, #8
 80134c2:	6027      	str	r7, [r4, #0]
 80134c4:	f77f aebf 	ble.w	8013246 <_svfprintf_r+0xcde>
 80134c8:	3210      	adds	r2, #16
 80134ca:	2b07      	cmp	r3, #7
 80134cc:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80134d0:	f8c4 8004 	str.w	r8, [r4, #4]
 80134d4:	dd08      	ble.n	80134e8 <_svfprintf_r+0xf80>
 80134d6:	9802      	ldr	r0, [sp, #8]
 80134d8:	aa1e      	add	r2, sp, #120	@ 0x78
 80134da:	4651      	mov	r1, sl
 80134dc:	f001 f942 	bl	8014764 <__ssprint_r>
 80134e0:	2800      	cmp	r0, #0
 80134e2:	f040 8162 	bne.w	80137aa <_svfprintf_r+0x1242>
 80134e6:	a921      	add	r1, sp, #132	@ 0x84
 80134e8:	3e10      	subs	r6, #16
 80134ea:	460c      	mov	r4, r1
 80134ec:	e7e2      	b.n	80134b4 <_svfprintf_r+0xf4c>
 80134ee:	9802      	ldr	r0, [sp, #8]
 80134f0:	aa1e      	add	r2, sp, #120	@ 0x78
 80134f2:	4651      	mov	r1, sl
 80134f4:	f001 f936 	bl	8014764 <__ssprint_r>
 80134f8:	2800      	cmp	r0, #0
 80134fa:	f040 8156 	bne.w	80137aa <_svfprintf_r+0x1242>
 80134fe:	ac21      	add	r4, sp, #132	@ 0x84
 8013500:	e76d      	b.n	80133de <_svfprintf_r+0xe76>
 8013502:	2010      	movs	r0, #16
 8013504:	4403      	add	r3, r0
 8013506:	2a07      	cmp	r2, #7
 8013508:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 801350c:	6060      	str	r0, [r4, #4]
 801350e:	dd08      	ble.n	8013522 <_svfprintf_r+0xfba>
 8013510:	9802      	ldr	r0, [sp, #8]
 8013512:	aa1e      	add	r2, sp, #120	@ 0x78
 8013514:	4651      	mov	r1, sl
 8013516:	f001 f925 	bl	8014764 <__ssprint_r>
 801351a:	2800      	cmp	r0, #0
 801351c:	f040 8145 	bne.w	80137aa <_svfprintf_r+0x1242>
 8013520:	a921      	add	r1, sp, #132	@ 0x84
 8013522:	f1a8 0810 	sub.w	r8, r8, #16
 8013526:	460c      	mov	r4, r1
 8013528:	e762      	b.n	80133f0 <_svfprintf_r+0xe88>
 801352a:	460c      	mov	r4, r1
 801352c:	e77c      	b.n	8013428 <_svfprintf_r+0xec0>
 801352e:	2f00      	cmp	r7, #0
 8013530:	d04a      	beq.n	80135c8 <_svfprintf_r+0x1060>
 8013532:	3f01      	subs	r7, #1
 8013534:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013536:	6023      	str	r3, [r4, #0]
 8013538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801353a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801353c:	6063      	str	r3, [r4, #4]
 801353e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013540:	4413      	add	r3, r2
 8013542:	9320      	str	r3, [sp, #128]	@ 0x80
 8013544:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8013546:	3301      	adds	r3, #1
 8013548:	2b07      	cmp	r3, #7
 801354a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801354c:	dc43      	bgt.n	80135d6 <_svfprintf_r+0x106e>
 801354e:	3408      	adds	r4, #8
 8013550:	9b07      	ldr	r3, [sp, #28]
 8013552:	781a      	ldrb	r2, [r3, #0]
 8013554:	9b04      	ldr	r3, [sp, #16]
 8013556:	eba3 0308 	sub.w	r3, r3, r8
 801355a:	429a      	cmp	r2, r3
 801355c:	bfa8      	it	ge
 801355e:	461a      	movge	r2, r3
 8013560:	2a00      	cmp	r2, #0
 8013562:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8013564:	4691      	mov	r9, r2
 8013566:	dd09      	ble.n	801357c <_svfprintf_r+0x1014>
 8013568:	4413      	add	r3, r2
 801356a:	9320      	str	r3, [sp, #128]	@ 0x80
 801356c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801356e:	3301      	adds	r3, #1
 8013570:	2b07      	cmp	r3, #7
 8013572:	e9c4 8200 	strd	r8, r2, [r4]
 8013576:	931f      	str	r3, [sp, #124]	@ 0x7c
 8013578:	dc37      	bgt.n	80135ea <_svfprintf_r+0x1082>
 801357a:	3408      	adds	r4, #8
 801357c:	9b07      	ldr	r3, [sp, #28]
 801357e:	781e      	ldrb	r6, [r3, #0]
 8013580:	f1b9 0f00 	cmp.w	r9, #0
 8013584:	bfa8      	it	ge
 8013586:	eba6 0609 	subge.w	r6, r6, r9
 801358a:	2e00      	cmp	r6, #0
 801358c:	dd18      	ble.n	80135c0 <_svfprintf_r+0x1058>
 801358e:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8013592:	482f      	ldr	r0, [pc, #188]	@ (8013650 <_svfprintf_r+0x10e8>)
 8013594:	6020      	str	r0, [r4, #0]
 8013596:	2e10      	cmp	r6, #16
 8013598:	f103 0301 	add.w	r3, r3, #1
 801359c:	f104 0108 	add.w	r1, r4, #8
 80135a0:	dc2d      	bgt.n	80135fe <_svfprintf_r+0x1096>
 80135a2:	6066      	str	r6, [r4, #4]
 80135a4:	2b07      	cmp	r3, #7
 80135a6:	4416      	add	r6, r2
 80135a8:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 80135ac:	dd3a      	ble.n	8013624 <_svfprintf_r+0x10bc>
 80135ae:	9802      	ldr	r0, [sp, #8]
 80135b0:	aa1e      	add	r2, sp, #120	@ 0x78
 80135b2:	4651      	mov	r1, sl
 80135b4:	f001 f8d6 	bl	8014764 <__ssprint_r>
 80135b8:	2800      	cmp	r0, #0
 80135ba:	f040 80f6 	bne.w	80137aa <_svfprintf_r+0x1242>
 80135be:	ac21      	add	r4, sp, #132	@ 0x84
 80135c0:	9b07      	ldr	r3, [sp, #28]
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	4498      	add	r8, r3
 80135c6:	e733      	b.n	8013430 <_svfprintf_r+0xec8>
 80135c8:	9b07      	ldr	r3, [sp, #28]
 80135ca:	3b01      	subs	r3, #1
 80135cc:	9307      	str	r3, [sp, #28]
 80135ce:	9b06      	ldr	r3, [sp, #24]
 80135d0:	3b01      	subs	r3, #1
 80135d2:	9306      	str	r3, [sp, #24]
 80135d4:	e7ae      	b.n	8013534 <_svfprintf_r+0xfcc>
 80135d6:	9802      	ldr	r0, [sp, #8]
 80135d8:	aa1e      	add	r2, sp, #120	@ 0x78
 80135da:	4651      	mov	r1, sl
 80135dc:	f001 f8c2 	bl	8014764 <__ssprint_r>
 80135e0:	2800      	cmp	r0, #0
 80135e2:	f040 80e2 	bne.w	80137aa <_svfprintf_r+0x1242>
 80135e6:	ac21      	add	r4, sp, #132	@ 0x84
 80135e8:	e7b2      	b.n	8013550 <_svfprintf_r+0xfe8>
 80135ea:	9802      	ldr	r0, [sp, #8]
 80135ec:	aa1e      	add	r2, sp, #120	@ 0x78
 80135ee:	4651      	mov	r1, sl
 80135f0:	f001 f8b8 	bl	8014764 <__ssprint_r>
 80135f4:	2800      	cmp	r0, #0
 80135f6:	f040 80d8 	bne.w	80137aa <_svfprintf_r+0x1242>
 80135fa:	ac21      	add	r4, sp, #132	@ 0x84
 80135fc:	e7be      	b.n	801357c <_svfprintf_r+0x1014>
 80135fe:	2010      	movs	r0, #16
 8013600:	4402      	add	r2, r0
 8013602:	2b07      	cmp	r3, #7
 8013604:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8013608:	6060      	str	r0, [r4, #4]
 801360a:	dd08      	ble.n	801361e <_svfprintf_r+0x10b6>
 801360c:	9802      	ldr	r0, [sp, #8]
 801360e:	aa1e      	add	r2, sp, #120	@ 0x78
 8013610:	4651      	mov	r1, sl
 8013612:	f001 f8a7 	bl	8014764 <__ssprint_r>
 8013616:	2800      	cmp	r0, #0
 8013618:	f040 80c7 	bne.w	80137aa <_svfprintf_r+0x1242>
 801361c:	a921      	add	r1, sp, #132	@ 0x84
 801361e:	3e10      	subs	r6, #16
 8013620:	460c      	mov	r4, r1
 8013622:	e7b4      	b.n	801358e <_svfprintf_r+0x1026>
 8013624:	460c      	mov	r4, r1
 8013626:	e7cb      	b.n	80135c0 <_svfprintf_r+0x1058>
 8013628:	9802      	ldr	r0, [sp, #8]
 801362a:	aa1e      	add	r2, sp, #120	@ 0x78
 801362c:	4651      	mov	r1, sl
 801362e:	f001 f899 	bl	8014764 <__ssprint_r>
 8013632:	2800      	cmp	r0, #0
 8013634:	f040 80b9 	bne.w	80137aa <_svfprintf_r+0x1242>
 8013638:	ac21      	add	r4, sp, #132	@ 0x84
 801363a:	e717      	b.n	801346c <_svfprintf_r+0xf04>
 801363c:	9802      	ldr	r0, [sp, #8]
 801363e:	aa1e      	add	r2, sp, #120	@ 0x78
 8013640:	4651      	mov	r1, sl
 8013642:	f001 f88f 	bl	8014764 <__ssprint_r>
 8013646:	2800      	cmp	r0, #0
 8013648:	f040 80af 	bne.w	80137aa <_svfprintf_r+0x1242>
 801364c:	ac21      	add	r4, sp, #132	@ 0x84
 801364e:	e724      	b.n	801349a <_svfprintf_r+0xf32>
 8013650:	080162c9 	.word	0x080162c9
 8013654:	9803      	ldr	r0, [sp, #12]
 8013656:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8013658:	2801      	cmp	r0, #1
 801365a:	f103 0201 	add.w	r2, r3, #1
 801365e:	f101 0101 	add.w	r1, r1, #1
 8013662:	f104 0308 	add.w	r3, r4, #8
 8013666:	dc01      	bgt.n	801366c <_svfprintf_r+0x1104>
 8013668:	07e8      	lsls	r0, r5, #31
 801366a:	d572      	bpl.n	8013752 <_svfprintf_r+0x11ea>
 801366c:	2001      	movs	r0, #1
 801366e:	2907      	cmp	r1, #7
 8013670:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8013674:	f8c4 9000 	str.w	r9, [r4]
 8013678:	6060      	str	r0, [r4, #4]
 801367a:	dd08      	ble.n	801368e <_svfprintf_r+0x1126>
 801367c:	9802      	ldr	r0, [sp, #8]
 801367e:	aa1e      	add	r2, sp, #120	@ 0x78
 8013680:	4651      	mov	r1, sl
 8013682:	f001 f86f 	bl	8014764 <__ssprint_r>
 8013686:	2800      	cmp	r0, #0
 8013688:	f040 808f 	bne.w	80137aa <_svfprintf_r+0x1242>
 801368c:	ab21      	add	r3, sp, #132	@ 0x84
 801368e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013690:	601a      	str	r2, [r3, #0]
 8013692:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013694:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013696:	605a      	str	r2, [r3, #4]
 8013698:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801369a:	440a      	add	r2, r1
 801369c:	9220      	str	r2, [sp, #128]	@ 0x80
 801369e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80136a0:	3201      	adds	r2, #1
 80136a2:	2a07      	cmp	r2, #7
 80136a4:	921f      	str	r2, [sp, #124]	@ 0x7c
 80136a6:	dc25      	bgt.n	80136f4 <_svfprintf_r+0x118c>
 80136a8:	3308      	adds	r3, #8
 80136aa:	9803      	ldr	r0, [sp, #12]
 80136ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80136b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b4:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 80136b8:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80136bc:	d023      	beq.n	8013706 <_svfprintf_r+0x119e>
 80136be:	f109 0001 	add.w	r0, r9, #1
 80136c2:	e9c3 0400 	strd	r0, r4, [r3]
 80136c6:	9803      	ldr	r0, [sp, #12]
 80136c8:	3101      	adds	r1, #1
 80136ca:	3a01      	subs	r2, #1
 80136cc:	4402      	add	r2, r0
 80136ce:	2907      	cmp	r1, #7
 80136d0:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 80136d4:	dd46      	ble.n	8013764 <_svfprintf_r+0x11fc>
 80136d6:	9802      	ldr	r0, [sp, #8]
 80136d8:	aa1e      	add	r2, sp, #120	@ 0x78
 80136da:	4651      	mov	r1, sl
 80136dc:	f001 f842 	bl	8014764 <__ssprint_r>
 80136e0:	2800      	cmp	r0, #0
 80136e2:	d162      	bne.n	80137aa <_svfprintf_r+0x1242>
 80136e4:	ab21      	add	r3, sp, #132	@ 0x84
 80136e6:	aa1a      	add	r2, sp, #104	@ 0x68
 80136e8:	601a      	str	r2, [r3, #0]
 80136ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80136ec:	605a      	str	r2, [r3, #4]
 80136ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80136f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80136f2:	e62a      	b.n	801334a <_svfprintf_r+0xde2>
 80136f4:	9802      	ldr	r0, [sp, #8]
 80136f6:	aa1e      	add	r2, sp, #120	@ 0x78
 80136f8:	4651      	mov	r1, sl
 80136fa:	f001 f833 	bl	8014764 <__ssprint_r>
 80136fe:	2800      	cmp	r0, #0
 8013700:	d153      	bne.n	80137aa <_svfprintf_r+0x1242>
 8013702:	ab21      	add	r3, sp, #132	@ 0x84
 8013704:	e7d1      	b.n	80136aa <_svfprintf_r+0x1142>
 8013706:	9a03      	ldr	r2, [sp, #12]
 8013708:	2a01      	cmp	r2, #1
 801370a:	ddec      	ble.n	80136e6 <_svfprintf_r+0x117e>
 801370c:	4e56      	ldr	r6, [pc, #344]	@ (8013868 <_svfprintf_r+0x1300>)
 801370e:	2710      	movs	r7, #16
 8013710:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 8013714:	2c10      	cmp	r4, #16
 8013716:	f102 0201 	add.w	r2, r2, #1
 801371a:	f103 0008 	add.w	r0, r3, #8
 801371e:	601e      	str	r6, [r3, #0]
 8013720:	dc07      	bgt.n	8013732 <_svfprintf_r+0x11ca>
 8013722:	605c      	str	r4, [r3, #4]
 8013724:	2a07      	cmp	r2, #7
 8013726:	440c      	add	r4, r1
 8013728:	e9cd 241f 	strd	r2, r4, [sp, #124]	@ 0x7c
 801372c:	dcd3      	bgt.n	80136d6 <_svfprintf_r+0x116e>
 801372e:	4603      	mov	r3, r0
 8013730:	e7d9      	b.n	80136e6 <_svfprintf_r+0x117e>
 8013732:	3110      	adds	r1, #16
 8013734:	2a07      	cmp	r2, #7
 8013736:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 801373a:	605f      	str	r7, [r3, #4]
 801373c:	dd06      	ble.n	801374c <_svfprintf_r+0x11e4>
 801373e:	9802      	ldr	r0, [sp, #8]
 8013740:	aa1e      	add	r2, sp, #120	@ 0x78
 8013742:	4651      	mov	r1, sl
 8013744:	f001 f80e 	bl	8014764 <__ssprint_r>
 8013748:	bb78      	cbnz	r0, 80137aa <_svfprintf_r+0x1242>
 801374a:	a821      	add	r0, sp, #132	@ 0x84
 801374c:	3c10      	subs	r4, #16
 801374e:	4603      	mov	r3, r0
 8013750:	e7de      	b.n	8013710 <_svfprintf_r+0x11a8>
 8013752:	2001      	movs	r0, #1
 8013754:	2907      	cmp	r1, #7
 8013756:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 801375a:	f8c4 9000 	str.w	r9, [r4]
 801375e:	6060      	str	r0, [r4, #4]
 8013760:	ddc1      	ble.n	80136e6 <_svfprintf_r+0x117e>
 8013762:	e7b8      	b.n	80136d6 <_svfprintf_r+0x116e>
 8013764:	3308      	adds	r3, #8
 8013766:	e7be      	b.n	80136e6 <_svfprintf_r+0x117e>
 8013768:	460c      	mov	r4, r1
 801376a:	f7ff bad0 	b.w	8012d0e <_svfprintf_r+0x7a6>
 801376e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013770:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013772:	1a9d      	subs	r5, r3, r2
 8013774:	2d00      	cmp	r5, #0
 8013776:	f77f aacd 	ble.w	8012d14 <_svfprintf_r+0x7ac>
 801377a:	4e3c      	ldr	r6, [pc, #240]	@ (801386c <_svfprintf_r+0x1304>)
 801377c:	2710      	movs	r7, #16
 801377e:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8013782:	2d10      	cmp	r5, #16
 8013784:	f103 0301 	add.w	r3, r3, #1
 8013788:	6026      	str	r6, [r4, #0]
 801378a:	dc18      	bgt.n	80137be <_svfprintf_r+0x1256>
 801378c:	442a      	add	r2, r5
 801378e:	2b07      	cmp	r3, #7
 8013790:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8013794:	6065      	str	r5, [r4, #4]
 8013796:	f77f aabd 	ble.w	8012d14 <_svfprintf_r+0x7ac>
 801379a:	9802      	ldr	r0, [sp, #8]
 801379c:	aa1e      	add	r2, sp, #120	@ 0x78
 801379e:	4651      	mov	r1, sl
 80137a0:	f000 ffe0 	bl	8014764 <__ssprint_r>
 80137a4:	2800      	cmp	r0, #0
 80137a6:	f43f aab5 	beq.w	8012d14 <_svfprintf_r+0x7ac>
 80137aa:	f1bb 0f00 	cmp.w	fp, #0
 80137ae:	f43f a8e0 	beq.w	8012972 <_svfprintf_r+0x40a>
 80137b2:	9802      	ldr	r0, [sp, #8]
 80137b4:	4659      	mov	r1, fp
 80137b6:	f7fe fbcb 	bl	8011f50 <_free_r>
 80137ba:	f7ff b8da 	b.w	8012972 <_svfprintf_r+0x40a>
 80137be:	3210      	adds	r2, #16
 80137c0:	2b07      	cmp	r3, #7
 80137c2:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80137c6:	6067      	str	r7, [r4, #4]
 80137c8:	dc02      	bgt.n	80137d0 <_svfprintf_r+0x1268>
 80137ca:	3408      	adds	r4, #8
 80137cc:	3d10      	subs	r5, #16
 80137ce:	e7d6      	b.n	801377e <_svfprintf_r+0x1216>
 80137d0:	9802      	ldr	r0, [sp, #8]
 80137d2:	aa1e      	add	r2, sp, #120	@ 0x78
 80137d4:	4651      	mov	r1, sl
 80137d6:	f000 ffc5 	bl	8014764 <__ssprint_r>
 80137da:	2800      	cmp	r0, #0
 80137dc:	d1e5      	bne.n	80137aa <_svfprintf_r+0x1242>
 80137de:	ac21      	add	r4, sp, #132	@ 0x84
 80137e0:	e7f4      	b.n	80137cc <_svfprintf_r+0x1264>
 80137e2:	9802      	ldr	r0, [sp, #8]
 80137e4:	4659      	mov	r1, fp
 80137e6:	f7fe fbb3 	bl	8011f50 <_free_r>
 80137ea:	f7ff baab 	b.w	8012d44 <_svfprintf_r+0x7dc>
 80137ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	f43f a8be 	beq.w	8012972 <_svfprintf_r+0x40a>
 80137f6:	9802      	ldr	r0, [sp, #8]
 80137f8:	aa1e      	add	r2, sp, #120	@ 0x78
 80137fa:	4651      	mov	r1, sl
 80137fc:	f000 ffb2 	bl	8014764 <__ssprint_r>
 8013800:	f7ff b8b7 	b.w	8012972 <_svfprintf_r+0x40a>
 8013804:	ea56 0207 	orrs.w	r2, r6, r7
 8013808:	9506      	str	r5, [sp, #24]
 801380a:	f43f ab93 	beq.w	8012f34 <_svfprintf_r+0x9cc>
 801380e:	2b01      	cmp	r3, #1
 8013810:	f43f ac14 	beq.w	801303c <_svfprintf_r+0xad4>
 8013814:	2b02      	cmp	r3, #2
 8013816:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
 801381a:	f43f ac59 	beq.w	80130d0 <_svfprintf_r+0xb68>
 801381e:	f006 0307 	and.w	r3, r6, #7
 8013822:	08f6      	lsrs	r6, r6, #3
 8013824:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8013828:	08ff      	lsrs	r7, r7, #3
 801382a:	3330      	adds	r3, #48	@ 0x30
 801382c:	ea56 0107 	orrs.w	r1, r6, r7
 8013830:	464a      	mov	r2, r9
 8013832:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8013836:	d1f2      	bne.n	801381e <_svfprintf_r+0x12b6>
 8013838:	9906      	ldr	r1, [sp, #24]
 801383a:	07cd      	lsls	r5, r1, #31
 801383c:	d506      	bpl.n	801384c <_svfprintf_r+0x12e4>
 801383e:	2b30      	cmp	r3, #48	@ 0x30
 8013840:	d004      	beq.n	801384c <_svfprintf_r+0x12e4>
 8013842:	2330      	movs	r3, #48	@ 0x30
 8013844:	f809 3c01 	strb.w	r3, [r9, #-1]
 8013848:	f1a2 0902 	sub.w	r9, r2, #2
 801384c:	ab4a      	add	r3, sp, #296	@ 0x128
 801384e:	9d06      	ldr	r5, [sp, #24]
 8013850:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 8013854:	f04f 0b00 	mov.w	fp, #0
 8013858:	eba3 0809 	sub.w	r8, r3, r9
 801385c:	465f      	mov	r7, fp
 801385e:	f8cd b018 	str.w	fp, [sp, #24]
 8013862:	465e      	mov	r6, fp
 8013864:	f7ff b9a4 	b.w	8012bb0 <_svfprintf_r+0x648>
 8013868:	080162c9 	.word	0x080162c9
 801386c:	080162d9 	.word	0x080162d9

08013870 <__swhatbuf_r>:
 8013870:	b570      	push	{r4, r5, r6, lr}
 8013872:	460c      	mov	r4, r1
 8013874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013878:	2900      	cmp	r1, #0
 801387a:	b096      	sub	sp, #88	@ 0x58
 801387c:	4615      	mov	r5, r2
 801387e:	461e      	mov	r6, r3
 8013880:	da07      	bge.n	8013892 <__swhatbuf_r+0x22>
 8013882:	89a1      	ldrh	r1, [r4, #12]
 8013884:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8013888:	d117      	bne.n	80138ba <__swhatbuf_r+0x4a>
 801388a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801388e:	4608      	mov	r0, r1
 8013890:	e00f      	b.n	80138b2 <__swhatbuf_r+0x42>
 8013892:	466a      	mov	r2, sp
 8013894:	f000 fe38 	bl	8014508 <_fstat_r>
 8013898:	2800      	cmp	r0, #0
 801389a:	dbf2      	blt.n	8013882 <__swhatbuf_r+0x12>
 801389c:	9901      	ldr	r1, [sp, #4]
 801389e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80138a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80138a6:	4259      	negs	r1, r3
 80138a8:	4159      	adcs	r1, r3
 80138aa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80138ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80138b2:	6031      	str	r1, [r6, #0]
 80138b4:	602b      	str	r3, [r5, #0]
 80138b6:	b016      	add	sp, #88	@ 0x58
 80138b8:	bd70      	pop	{r4, r5, r6, pc}
 80138ba:	2100      	movs	r1, #0
 80138bc:	2340      	movs	r3, #64	@ 0x40
 80138be:	e7e6      	b.n	801388e <__swhatbuf_r+0x1e>

080138c0 <__smakebuf_r>:
 80138c0:	898b      	ldrh	r3, [r1, #12]
 80138c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138c4:	079d      	lsls	r5, r3, #30
 80138c6:	4606      	mov	r6, r0
 80138c8:	460c      	mov	r4, r1
 80138ca:	d507      	bpl.n	80138dc <__smakebuf_r+0x1c>
 80138cc:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80138d0:	6023      	str	r3, [r4, #0]
 80138d2:	6123      	str	r3, [r4, #16]
 80138d4:	2301      	movs	r3, #1
 80138d6:	6163      	str	r3, [r4, #20]
 80138d8:	b003      	add	sp, #12
 80138da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138dc:	ab01      	add	r3, sp, #4
 80138de:	466a      	mov	r2, sp
 80138e0:	f7ff ffc6 	bl	8013870 <__swhatbuf_r>
 80138e4:	9f00      	ldr	r7, [sp, #0]
 80138e6:	4605      	mov	r5, r0
 80138e8:	4639      	mov	r1, r7
 80138ea:	4630      	mov	r0, r6
 80138ec:	f7fe fbf0 	bl	80120d0 <_malloc_r>
 80138f0:	b948      	cbnz	r0, 8013906 <__smakebuf_r+0x46>
 80138f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138f6:	059a      	lsls	r2, r3, #22
 80138f8:	d4ee      	bmi.n	80138d8 <__smakebuf_r+0x18>
 80138fa:	f023 0303 	bic.w	r3, r3, #3
 80138fe:	f043 0302 	orr.w	r3, r3, #2
 8013902:	81a3      	strh	r3, [r4, #12]
 8013904:	e7e2      	b.n	80138cc <__smakebuf_r+0xc>
 8013906:	89a3      	ldrh	r3, [r4, #12]
 8013908:	6020      	str	r0, [r4, #0]
 801390a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801390e:	81a3      	strh	r3, [r4, #12]
 8013910:	9b01      	ldr	r3, [sp, #4]
 8013912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013916:	b15b      	cbz	r3, 8013930 <__smakebuf_r+0x70>
 8013918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801391c:	4630      	mov	r0, r6
 801391e:	f000 fe05 	bl	801452c <_isatty_r>
 8013922:	b128      	cbz	r0, 8013930 <__smakebuf_r+0x70>
 8013924:	89a3      	ldrh	r3, [r4, #12]
 8013926:	f023 0303 	bic.w	r3, r3, #3
 801392a:	f043 0301 	orr.w	r3, r3, #1
 801392e:	81a3      	strh	r3, [r4, #12]
 8013930:	89a3      	ldrh	r3, [r4, #12]
 8013932:	431d      	orrs	r5, r3
 8013934:	81a5      	strh	r5, [r4, #12]
 8013936:	e7cf      	b.n	80138d8 <__smakebuf_r+0x18>

08013938 <__malloc_lock>:
 8013938:	4801      	ldr	r0, [pc, #4]	@ (8013940 <__malloc_lock+0x8>)
 801393a:	f7fd bc7d 	b.w	8011238 <__retarget_lock_acquire_recursive>
 801393e:	bf00      	nop
 8013940:	24024bf0 	.word	0x24024bf0

08013944 <__malloc_unlock>:
 8013944:	4801      	ldr	r0, [pc, #4]	@ (801394c <__malloc_unlock+0x8>)
 8013946:	f7fd bc78 	b.w	801123a <__retarget_lock_release_recursive>
 801394a:	bf00      	nop
 801394c:	24024bf0 	.word	0x24024bf0

08013950 <_Balloc>:
 8013950:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8013952:	b570      	push	{r4, r5, r6, lr}
 8013954:	4605      	mov	r5, r0
 8013956:	460c      	mov	r4, r1
 8013958:	b17b      	cbz	r3, 801397a <_Balloc+0x2a>
 801395a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801395c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013960:	b9a0      	cbnz	r0, 801398c <_Balloc+0x3c>
 8013962:	2101      	movs	r1, #1
 8013964:	fa01 f604 	lsl.w	r6, r1, r4
 8013968:	1d72      	adds	r2, r6, #5
 801396a:	0092      	lsls	r2, r2, #2
 801396c:	4628      	mov	r0, r5
 801396e:	f000 feb1 	bl	80146d4 <_calloc_r>
 8013972:	b148      	cbz	r0, 8013988 <_Balloc+0x38>
 8013974:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8013978:	e00b      	b.n	8013992 <_Balloc+0x42>
 801397a:	2221      	movs	r2, #33	@ 0x21
 801397c:	2104      	movs	r1, #4
 801397e:	f000 fea9 	bl	80146d4 <_calloc_r>
 8013982:	6468      	str	r0, [r5, #68]	@ 0x44
 8013984:	2800      	cmp	r0, #0
 8013986:	d1e8      	bne.n	801395a <_Balloc+0xa>
 8013988:	2000      	movs	r0, #0
 801398a:	bd70      	pop	{r4, r5, r6, pc}
 801398c:	6802      	ldr	r2, [r0, #0]
 801398e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8013992:	2300      	movs	r3, #0
 8013994:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013998:	e7f7      	b.n	801398a <_Balloc+0x3a>

0801399a <_Bfree>:
 801399a:	b131      	cbz	r1, 80139aa <_Bfree+0x10>
 801399c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801399e:	684a      	ldr	r2, [r1, #4]
 80139a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80139a4:	6008      	str	r0, [r1, #0]
 80139a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80139aa:	4770      	bx	lr

080139ac <__multadd>:
 80139ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139b0:	690d      	ldr	r5, [r1, #16]
 80139b2:	4607      	mov	r7, r0
 80139b4:	460c      	mov	r4, r1
 80139b6:	461e      	mov	r6, r3
 80139b8:	f101 0c14 	add.w	ip, r1, #20
 80139bc:	2000      	movs	r0, #0
 80139be:	f8dc 3000 	ldr.w	r3, [ip]
 80139c2:	b299      	uxth	r1, r3
 80139c4:	fb02 6101 	mla	r1, r2, r1, r6
 80139c8:	0c1e      	lsrs	r6, r3, #16
 80139ca:	0c0b      	lsrs	r3, r1, #16
 80139cc:	fb02 3306 	mla	r3, r2, r6, r3
 80139d0:	b289      	uxth	r1, r1
 80139d2:	3001      	adds	r0, #1
 80139d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80139d8:	4285      	cmp	r5, r0
 80139da:	f84c 1b04 	str.w	r1, [ip], #4
 80139de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80139e2:	dcec      	bgt.n	80139be <__multadd+0x12>
 80139e4:	b30e      	cbz	r6, 8013a2a <__multadd+0x7e>
 80139e6:	68a3      	ldr	r3, [r4, #8]
 80139e8:	42ab      	cmp	r3, r5
 80139ea:	dc19      	bgt.n	8013a20 <__multadd+0x74>
 80139ec:	6861      	ldr	r1, [r4, #4]
 80139ee:	4638      	mov	r0, r7
 80139f0:	3101      	adds	r1, #1
 80139f2:	f7ff ffad 	bl	8013950 <_Balloc>
 80139f6:	4680      	mov	r8, r0
 80139f8:	b928      	cbnz	r0, 8013a06 <__multadd+0x5a>
 80139fa:	4602      	mov	r2, r0
 80139fc:	4b0c      	ldr	r3, [pc, #48]	@ (8013a30 <__multadd+0x84>)
 80139fe:	480d      	ldr	r0, [pc, #52]	@ (8013a34 <__multadd+0x88>)
 8013a00:	21ba      	movs	r1, #186	@ 0xba
 8013a02:	f000 fe49 	bl	8014698 <__assert_func>
 8013a06:	6922      	ldr	r2, [r4, #16]
 8013a08:	3202      	adds	r2, #2
 8013a0a:	f104 010c 	add.w	r1, r4, #12
 8013a0e:	0092      	lsls	r2, r2, #2
 8013a10:	300c      	adds	r0, #12
 8013a12:	f7fd fc13 	bl	801123c <memcpy>
 8013a16:	4621      	mov	r1, r4
 8013a18:	4638      	mov	r0, r7
 8013a1a:	f7ff ffbe 	bl	801399a <_Bfree>
 8013a1e:	4644      	mov	r4, r8
 8013a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013a24:	3501      	adds	r5, #1
 8013a26:	615e      	str	r6, [r3, #20]
 8013a28:	6125      	str	r5, [r4, #16]
 8013a2a:	4620      	mov	r0, r4
 8013a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a30:	08016250 	.word	0x08016250
 8013a34:	080162e9 	.word	0x080162e9

08013a38 <__hi0bits>:
 8013a38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	bf36      	itet	cc
 8013a40:	0403      	lslcc	r3, r0, #16
 8013a42:	2000      	movcs	r0, #0
 8013a44:	2010      	movcc	r0, #16
 8013a46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013a4a:	bf3c      	itt	cc
 8013a4c:	021b      	lslcc	r3, r3, #8
 8013a4e:	3008      	addcc	r0, #8
 8013a50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013a54:	bf3c      	itt	cc
 8013a56:	011b      	lslcc	r3, r3, #4
 8013a58:	3004      	addcc	r0, #4
 8013a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013a5e:	bf3c      	itt	cc
 8013a60:	009b      	lslcc	r3, r3, #2
 8013a62:	3002      	addcc	r0, #2
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	db05      	blt.n	8013a74 <__hi0bits+0x3c>
 8013a68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013a6c:	f100 0001 	add.w	r0, r0, #1
 8013a70:	bf08      	it	eq
 8013a72:	2020      	moveq	r0, #32
 8013a74:	4770      	bx	lr

08013a76 <__lo0bits>:
 8013a76:	6803      	ldr	r3, [r0, #0]
 8013a78:	4602      	mov	r2, r0
 8013a7a:	f013 0007 	ands.w	r0, r3, #7
 8013a7e:	d00b      	beq.n	8013a98 <__lo0bits+0x22>
 8013a80:	07d9      	lsls	r1, r3, #31
 8013a82:	d421      	bmi.n	8013ac8 <__lo0bits+0x52>
 8013a84:	0798      	lsls	r0, r3, #30
 8013a86:	bf49      	itett	mi
 8013a88:	085b      	lsrmi	r3, r3, #1
 8013a8a:	089b      	lsrpl	r3, r3, #2
 8013a8c:	2001      	movmi	r0, #1
 8013a8e:	6013      	strmi	r3, [r2, #0]
 8013a90:	bf5c      	itt	pl
 8013a92:	6013      	strpl	r3, [r2, #0]
 8013a94:	2002      	movpl	r0, #2
 8013a96:	4770      	bx	lr
 8013a98:	b299      	uxth	r1, r3
 8013a9a:	b909      	cbnz	r1, 8013aa0 <__lo0bits+0x2a>
 8013a9c:	0c1b      	lsrs	r3, r3, #16
 8013a9e:	2010      	movs	r0, #16
 8013aa0:	b2d9      	uxtb	r1, r3
 8013aa2:	b909      	cbnz	r1, 8013aa8 <__lo0bits+0x32>
 8013aa4:	3008      	adds	r0, #8
 8013aa6:	0a1b      	lsrs	r3, r3, #8
 8013aa8:	0719      	lsls	r1, r3, #28
 8013aaa:	bf04      	itt	eq
 8013aac:	091b      	lsreq	r3, r3, #4
 8013aae:	3004      	addeq	r0, #4
 8013ab0:	0799      	lsls	r1, r3, #30
 8013ab2:	bf04      	itt	eq
 8013ab4:	089b      	lsreq	r3, r3, #2
 8013ab6:	3002      	addeq	r0, #2
 8013ab8:	07d9      	lsls	r1, r3, #31
 8013aba:	d403      	bmi.n	8013ac4 <__lo0bits+0x4e>
 8013abc:	085b      	lsrs	r3, r3, #1
 8013abe:	f100 0001 	add.w	r0, r0, #1
 8013ac2:	d003      	beq.n	8013acc <__lo0bits+0x56>
 8013ac4:	6013      	str	r3, [r2, #0]
 8013ac6:	4770      	bx	lr
 8013ac8:	2000      	movs	r0, #0
 8013aca:	4770      	bx	lr
 8013acc:	2020      	movs	r0, #32
 8013ace:	4770      	bx	lr

08013ad0 <__i2b>:
 8013ad0:	b510      	push	{r4, lr}
 8013ad2:	460c      	mov	r4, r1
 8013ad4:	2101      	movs	r1, #1
 8013ad6:	f7ff ff3b 	bl	8013950 <_Balloc>
 8013ada:	4602      	mov	r2, r0
 8013adc:	b928      	cbnz	r0, 8013aea <__i2b+0x1a>
 8013ade:	4b05      	ldr	r3, [pc, #20]	@ (8013af4 <__i2b+0x24>)
 8013ae0:	4805      	ldr	r0, [pc, #20]	@ (8013af8 <__i2b+0x28>)
 8013ae2:	f240 1145 	movw	r1, #325	@ 0x145
 8013ae6:	f000 fdd7 	bl	8014698 <__assert_func>
 8013aea:	2301      	movs	r3, #1
 8013aec:	6144      	str	r4, [r0, #20]
 8013aee:	6103      	str	r3, [r0, #16]
 8013af0:	bd10      	pop	{r4, pc}
 8013af2:	bf00      	nop
 8013af4:	08016250 	.word	0x08016250
 8013af8:	080162e9 	.word	0x080162e9

08013afc <__multiply>:
 8013afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b00:	4614      	mov	r4, r2
 8013b02:	690a      	ldr	r2, [r1, #16]
 8013b04:	6923      	ldr	r3, [r4, #16]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	bfa8      	it	ge
 8013b0a:	4623      	movge	r3, r4
 8013b0c:	460f      	mov	r7, r1
 8013b0e:	bfa4      	itt	ge
 8013b10:	460c      	movge	r4, r1
 8013b12:	461f      	movge	r7, r3
 8013b14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013b18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013b1c:	68a3      	ldr	r3, [r4, #8]
 8013b1e:	6861      	ldr	r1, [r4, #4]
 8013b20:	eb0a 0609 	add.w	r6, sl, r9
 8013b24:	42b3      	cmp	r3, r6
 8013b26:	b085      	sub	sp, #20
 8013b28:	bfb8      	it	lt
 8013b2a:	3101      	addlt	r1, #1
 8013b2c:	f7ff ff10 	bl	8013950 <_Balloc>
 8013b30:	b930      	cbnz	r0, 8013b40 <__multiply+0x44>
 8013b32:	4602      	mov	r2, r0
 8013b34:	4b44      	ldr	r3, [pc, #272]	@ (8013c48 <__multiply+0x14c>)
 8013b36:	4845      	ldr	r0, [pc, #276]	@ (8013c4c <__multiply+0x150>)
 8013b38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013b3c:	f000 fdac 	bl	8014698 <__assert_func>
 8013b40:	f100 0514 	add.w	r5, r0, #20
 8013b44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013b48:	462b      	mov	r3, r5
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	4543      	cmp	r3, r8
 8013b4e:	d321      	bcc.n	8013b94 <__multiply+0x98>
 8013b50:	f107 0114 	add.w	r1, r7, #20
 8013b54:	f104 0214 	add.w	r2, r4, #20
 8013b58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013b5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013b60:	9302      	str	r3, [sp, #8]
 8013b62:	1b13      	subs	r3, r2, r4
 8013b64:	3b15      	subs	r3, #21
 8013b66:	f023 0303 	bic.w	r3, r3, #3
 8013b6a:	3304      	adds	r3, #4
 8013b6c:	f104 0715 	add.w	r7, r4, #21
 8013b70:	42ba      	cmp	r2, r7
 8013b72:	bf38      	it	cc
 8013b74:	2304      	movcc	r3, #4
 8013b76:	9301      	str	r3, [sp, #4]
 8013b78:	9b02      	ldr	r3, [sp, #8]
 8013b7a:	9103      	str	r1, [sp, #12]
 8013b7c:	428b      	cmp	r3, r1
 8013b7e:	d80c      	bhi.n	8013b9a <__multiply+0x9e>
 8013b80:	2e00      	cmp	r6, #0
 8013b82:	dd03      	ble.n	8013b8c <__multiply+0x90>
 8013b84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d05b      	beq.n	8013c44 <__multiply+0x148>
 8013b8c:	6106      	str	r6, [r0, #16]
 8013b8e:	b005      	add	sp, #20
 8013b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b94:	f843 2b04 	str.w	r2, [r3], #4
 8013b98:	e7d8      	b.n	8013b4c <__multiply+0x50>
 8013b9a:	f8b1 a000 	ldrh.w	sl, [r1]
 8013b9e:	f1ba 0f00 	cmp.w	sl, #0
 8013ba2:	d024      	beq.n	8013bee <__multiply+0xf2>
 8013ba4:	f104 0e14 	add.w	lr, r4, #20
 8013ba8:	46a9      	mov	r9, r5
 8013baa:	f04f 0c00 	mov.w	ip, #0
 8013bae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013bb2:	f8d9 3000 	ldr.w	r3, [r9]
 8013bb6:	fa1f fb87 	uxth.w	fp, r7
 8013bba:	b29b      	uxth	r3, r3
 8013bbc:	fb0a 330b 	mla	r3, sl, fp, r3
 8013bc0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013bc4:	f8d9 7000 	ldr.w	r7, [r9]
 8013bc8:	4463      	add	r3, ip
 8013bca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013bce:	fb0a c70b 	mla	r7, sl, fp, ip
 8013bd2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013bd6:	b29b      	uxth	r3, r3
 8013bd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013bdc:	4572      	cmp	r2, lr
 8013bde:	f849 3b04 	str.w	r3, [r9], #4
 8013be2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013be6:	d8e2      	bhi.n	8013bae <__multiply+0xb2>
 8013be8:	9b01      	ldr	r3, [sp, #4]
 8013bea:	f845 c003 	str.w	ip, [r5, r3]
 8013bee:	9b03      	ldr	r3, [sp, #12]
 8013bf0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013bf4:	3104      	adds	r1, #4
 8013bf6:	f1b9 0f00 	cmp.w	r9, #0
 8013bfa:	d021      	beq.n	8013c40 <__multiply+0x144>
 8013bfc:	682b      	ldr	r3, [r5, #0]
 8013bfe:	f104 0c14 	add.w	ip, r4, #20
 8013c02:	46ae      	mov	lr, r5
 8013c04:	f04f 0a00 	mov.w	sl, #0
 8013c08:	f8bc b000 	ldrh.w	fp, [ip]
 8013c0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013c10:	fb09 770b 	mla	r7, r9, fp, r7
 8013c14:	4457      	add	r7, sl
 8013c16:	b29b      	uxth	r3, r3
 8013c18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013c1c:	f84e 3b04 	str.w	r3, [lr], #4
 8013c20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013c24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013c28:	f8be 3000 	ldrh.w	r3, [lr]
 8013c2c:	fb09 330a 	mla	r3, r9, sl, r3
 8013c30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013c34:	4562      	cmp	r2, ip
 8013c36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013c3a:	d8e5      	bhi.n	8013c08 <__multiply+0x10c>
 8013c3c:	9f01      	ldr	r7, [sp, #4]
 8013c3e:	51eb      	str	r3, [r5, r7]
 8013c40:	3504      	adds	r5, #4
 8013c42:	e799      	b.n	8013b78 <__multiply+0x7c>
 8013c44:	3e01      	subs	r6, #1
 8013c46:	e79b      	b.n	8013b80 <__multiply+0x84>
 8013c48:	08016250 	.word	0x08016250
 8013c4c:	080162e9 	.word	0x080162e9

08013c50 <__pow5mult>:
 8013c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c54:	4615      	mov	r5, r2
 8013c56:	f012 0203 	ands.w	r2, r2, #3
 8013c5a:	4607      	mov	r7, r0
 8013c5c:	460e      	mov	r6, r1
 8013c5e:	d007      	beq.n	8013c70 <__pow5mult+0x20>
 8013c60:	4c1a      	ldr	r4, [pc, #104]	@ (8013ccc <__pow5mult+0x7c>)
 8013c62:	3a01      	subs	r2, #1
 8013c64:	2300      	movs	r3, #0
 8013c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c6a:	f7ff fe9f 	bl	80139ac <__multadd>
 8013c6e:	4606      	mov	r6, r0
 8013c70:	10ad      	asrs	r5, r5, #2
 8013c72:	d027      	beq.n	8013cc4 <__pow5mult+0x74>
 8013c74:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8013c76:	b944      	cbnz	r4, 8013c8a <__pow5mult+0x3a>
 8013c78:	f240 2171 	movw	r1, #625	@ 0x271
 8013c7c:	4638      	mov	r0, r7
 8013c7e:	f7ff ff27 	bl	8013ad0 <__i2b>
 8013c82:	2300      	movs	r3, #0
 8013c84:	6438      	str	r0, [r7, #64]	@ 0x40
 8013c86:	4604      	mov	r4, r0
 8013c88:	6003      	str	r3, [r0, #0]
 8013c8a:	f04f 0900 	mov.w	r9, #0
 8013c8e:	07eb      	lsls	r3, r5, #31
 8013c90:	d50a      	bpl.n	8013ca8 <__pow5mult+0x58>
 8013c92:	4631      	mov	r1, r6
 8013c94:	4622      	mov	r2, r4
 8013c96:	4638      	mov	r0, r7
 8013c98:	f7ff ff30 	bl	8013afc <__multiply>
 8013c9c:	4631      	mov	r1, r6
 8013c9e:	4680      	mov	r8, r0
 8013ca0:	4638      	mov	r0, r7
 8013ca2:	f7ff fe7a 	bl	801399a <_Bfree>
 8013ca6:	4646      	mov	r6, r8
 8013ca8:	106d      	asrs	r5, r5, #1
 8013caa:	d00b      	beq.n	8013cc4 <__pow5mult+0x74>
 8013cac:	6820      	ldr	r0, [r4, #0]
 8013cae:	b938      	cbnz	r0, 8013cc0 <__pow5mult+0x70>
 8013cb0:	4622      	mov	r2, r4
 8013cb2:	4621      	mov	r1, r4
 8013cb4:	4638      	mov	r0, r7
 8013cb6:	f7ff ff21 	bl	8013afc <__multiply>
 8013cba:	6020      	str	r0, [r4, #0]
 8013cbc:	f8c0 9000 	str.w	r9, [r0]
 8013cc0:	4604      	mov	r4, r0
 8013cc2:	e7e4      	b.n	8013c8e <__pow5mult+0x3e>
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cca:	bf00      	nop
 8013ccc:	08016344 	.word	0x08016344

08013cd0 <__lshift>:
 8013cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cd4:	460c      	mov	r4, r1
 8013cd6:	6849      	ldr	r1, [r1, #4]
 8013cd8:	6923      	ldr	r3, [r4, #16]
 8013cda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013cde:	68a3      	ldr	r3, [r4, #8]
 8013ce0:	4607      	mov	r7, r0
 8013ce2:	4691      	mov	r9, r2
 8013ce4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ce8:	f108 0601 	add.w	r6, r8, #1
 8013cec:	42b3      	cmp	r3, r6
 8013cee:	db0b      	blt.n	8013d08 <__lshift+0x38>
 8013cf0:	4638      	mov	r0, r7
 8013cf2:	f7ff fe2d 	bl	8013950 <_Balloc>
 8013cf6:	4605      	mov	r5, r0
 8013cf8:	b948      	cbnz	r0, 8013d0e <__lshift+0x3e>
 8013cfa:	4602      	mov	r2, r0
 8013cfc:	4b28      	ldr	r3, [pc, #160]	@ (8013da0 <__lshift+0xd0>)
 8013cfe:	4829      	ldr	r0, [pc, #164]	@ (8013da4 <__lshift+0xd4>)
 8013d00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013d04:	f000 fcc8 	bl	8014698 <__assert_func>
 8013d08:	3101      	adds	r1, #1
 8013d0a:	005b      	lsls	r3, r3, #1
 8013d0c:	e7ee      	b.n	8013cec <__lshift+0x1c>
 8013d0e:	2300      	movs	r3, #0
 8013d10:	f100 0114 	add.w	r1, r0, #20
 8013d14:	f100 0210 	add.w	r2, r0, #16
 8013d18:	4618      	mov	r0, r3
 8013d1a:	4553      	cmp	r3, sl
 8013d1c:	db33      	blt.n	8013d86 <__lshift+0xb6>
 8013d1e:	6920      	ldr	r0, [r4, #16]
 8013d20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d24:	f104 0314 	add.w	r3, r4, #20
 8013d28:	f019 091f 	ands.w	r9, r9, #31
 8013d2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013d34:	d02b      	beq.n	8013d8e <__lshift+0xbe>
 8013d36:	f1c9 0e20 	rsb	lr, r9, #32
 8013d3a:	468a      	mov	sl, r1
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	6818      	ldr	r0, [r3, #0]
 8013d40:	fa00 f009 	lsl.w	r0, r0, r9
 8013d44:	4310      	orrs	r0, r2
 8013d46:	f84a 0b04 	str.w	r0, [sl], #4
 8013d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d4e:	459c      	cmp	ip, r3
 8013d50:	fa22 f20e 	lsr.w	r2, r2, lr
 8013d54:	d8f3      	bhi.n	8013d3e <__lshift+0x6e>
 8013d56:	ebac 0304 	sub.w	r3, ip, r4
 8013d5a:	3b15      	subs	r3, #21
 8013d5c:	f023 0303 	bic.w	r3, r3, #3
 8013d60:	3304      	adds	r3, #4
 8013d62:	f104 0015 	add.w	r0, r4, #21
 8013d66:	4584      	cmp	ip, r0
 8013d68:	bf38      	it	cc
 8013d6a:	2304      	movcc	r3, #4
 8013d6c:	50ca      	str	r2, [r1, r3]
 8013d6e:	b10a      	cbz	r2, 8013d74 <__lshift+0xa4>
 8013d70:	f108 0602 	add.w	r6, r8, #2
 8013d74:	3e01      	subs	r6, #1
 8013d76:	4638      	mov	r0, r7
 8013d78:	612e      	str	r6, [r5, #16]
 8013d7a:	4621      	mov	r1, r4
 8013d7c:	f7ff fe0d 	bl	801399a <_Bfree>
 8013d80:	4628      	mov	r0, r5
 8013d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d86:	f842 0f04 	str.w	r0, [r2, #4]!
 8013d8a:	3301      	adds	r3, #1
 8013d8c:	e7c5      	b.n	8013d1a <__lshift+0x4a>
 8013d8e:	3904      	subs	r1, #4
 8013d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d94:	f841 2f04 	str.w	r2, [r1, #4]!
 8013d98:	459c      	cmp	ip, r3
 8013d9a:	d8f9      	bhi.n	8013d90 <__lshift+0xc0>
 8013d9c:	e7ea      	b.n	8013d74 <__lshift+0xa4>
 8013d9e:	bf00      	nop
 8013da0:	08016250 	.word	0x08016250
 8013da4:	080162e9 	.word	0x080162e9

08013da8 <__mcmp>:
 8013da8:	690a      	ldr	r2, [r1, #16]
 8013daa:	4603      	mov	r3, r0
 8013dac:	6900      	ldr	r0, [r0, #16]
 8013dae:	1a80      	subs	r0, r0, r2
 8013db0:	b530      	push	{r4, r5, lr}
 8013db2:	d10e      	bne.n	8013dd2 <__mcmp+0x2a>
 8013db4:	3314      	adds	r3, #20
 8013db6:	3114      	adds	r1, #20
 8013db8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013dbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013dc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013dc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013dc8:	4295      	cmp	r5, r2
 8013dca:	d003      	beq.n	8013dd4 <__mcmp+0x2c>
 8013dcc:	d205      	bcs.n	8013dda <__mcmp+0x32>
 8013dce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013dd2:	bd30      	pop	{r4, r5, pc}
 8013dd4:	42a3      	cmp	r3, r4
 8013dd6:	d3f3      	bcc.n	8013dc0 <__mcmp+0x18>
 8013dd8:	e7fb      	b.n	8013dd2 <__mcmp+0x2a>
 8013dda:	2001      	movs	r0, #1
 8013ddc:	e7f9      	b.n	8013dd2 <__mcmp+0x2a>
	...

08013de0 <__mdiff>:
 8013de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de4:	4689      	mov	r9, r1
 8013de6:	4606      	mov	r6, r0
 8013de8:	4611      	mov	r1, r2
 8013dea:	4648      	mov	r0, r9
 8013dec:	4614      	mov	r4, r2
 8013dee:	f7ff ffdb 	bl	8013da8 <__mcmp>
 8013df2:	1e05      	subs	r5, r0, #0
 8013df4:	d112      	bne.n	8013e1c <__mdiff+0x3c>
 8013df6:	4629      	mov	r1, r5
 8013df8:	4630      	mov	r0, r6
 8013dfa:	f7ff fda9 	bl	8013950 <_Balloc>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	b928      	cbnz	r0, 8013e0e <__mdiff+0x2e>
 8013e02:	4b3f      	ldr	r3, [pc, #252]	@ (8013f00 <__mdiff+0x120>)
 8013e04:	f240 2137 	movw	r1, #567	@ 0x237
 8013e08:	483e      	ldr	r0, [pc, #248]	@ (8013f04 <__mdiff+0x124>)
 8013e0a:	f000 fc45 	bl	8014698 <__assert_func>
 8013e0e:	2301      	movs	r3, #1
 8013e10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e14:	4610      	mov	r0, r2
 8013e16:	b003      	add	sp, #12
 8013e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e1c:	bfbc      	itt	lt
 8013e1e:	464b      	movlt	r3, r9
 8013e20:	46a1      	movlt	r9, r4
 8013e22:	4630      	mov	r0, r6
 8013e24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013e28:	bfba      	itte	lt
 8013e2a:	461c      	movlt	r4, r3
 8013e2c:	2501      	movlt	r5, #1
 8013e2e:	2500      	movge	r5, #0
 8013e30:	f7ff fd8e 	bl	8013950 <_Balloc>
 8013e34:	4602      	mov	r2, r0
 8013e36:	b918      	cbnz	r0, 8013e40 <__mdiff+0x60>
 8013e38:	4b31      	ldr	r3, [pc, #196]	@ (8013f00 <__mdiff+0x120>)
 8013e3a:	f240 2145 	movw	r1, #581	@ 0x245
 8013e3e:	e7e3      	b.n	8013e08 <__mdiff+0x28>
 8013e40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013e44:	6926      	ldr	r6, [r4, #16]
 8013e46:	60c5      	str	r5, [r0, #12]
 8013e48:	f109 0310 	add.w	r3, r9, #16
 8013e4c:	f109 0514 	add.w	r5, r9, #20
 8013e50:	f104 0e14 	add.w	lr, r4, #20
 8013e54:	f100 0b14 	add.w	fp, r0, #20
 8013e58:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013e5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013e60:	9301      	str	r3, [sp, #4]
 8013e62:	46d9      	mov	r9, fp
 8013e64:	f04f 0c00 	mov.w	ip, #0
 8013e68:	9b01      	ldr	r3, [sp, #4]
 8013e6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013e6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013e72:	9301      	str	r3, [sp, #4]
 8013e74:	fa1f f38a 	uxth.w	r3, sl
 8013e78:	4619      	mov	r1, r3
 8013e7a:	b283      	uxth	r3, r0
 8013e7c:	1acb      	subs	r3, r1, r3
 8013e7e:	0c00      	lsrs	r0, r0, #16
 8013e80:	4463      	add	r3, ip
 8013e82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013e86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013e90:	4576      	cmp	r6, lr
 8013e92:	f849 3b04 	str.w	r3, [r9], #4
 8013e96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013e9a:	d8e5      	bhi.n	8013e68 <__mdiff+0x88>
 8013e9c:	1b33      	subs	r3, r6, r4
 8013e9e:	3b15      	subs	r3, #21
 8013ea0:	f023 0303 	bic.w	r3, r3, #3
 8013ea4:	3415      	adds	r4, #21
 8013ea6:	3304      	adds	r3, #4
 8013ea8:	42a6      	cmp	r6, r4
 8013eaa:	bf38      	it	cc
 8013eac:	2304      	movcc	r3, #4
 8013eae:	441d      	add	r5, r3
 8013eb0:	445b      	add	r3, fp
 8013eb2:	461e      	mov	r6, r3
 8013eb4:	462c      	mov	r4, r5
 8013eb6:	4544      	cmp	r4, r8
 8013eb8:	d30e      	bcc.n	8013ed8 <__mdiff+0xf8>
 8013eba:	f108 0103 	add.w	r1, r8, #3
 8013ebe:	1b49      	subs	r1, r1, r5
 8013ec0:	f021 0103 	bic.w	r1, r1, #3
 8013ec4:	3d03      	subs	r5, #3
 8013ec6:	45a8      	cmp	r8, r5
 8013ec8:	bf38      	it	cc
 8013eca:	2100      	movcc	r1, #0
 8013ecc:	440b      	add	r3, r1
 8013ece:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013ed2:	b191      	cbz	r1, 8013efa <__mdiff+0x11a>
 8013ed4:	6117      	str	r7, [r2, #16]
 8013ed6:	e79d      	b.n	8013e14 <__mdiff+0x34>
 8013ed8:	f854 1b04 	ldr.w	r1, [r4], #4
 8013edc:	46e6      	mov	lr, ip
 8013ede:	0c08      	lsrs	r0, r1, #16
 8013ee0:	fa1c fc81 	uxtah	ip, ip, r1
 8013ee4:	4471      	add	r1, lr
 8013ee6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013eea:	b289      	uxth	r1, r1
 8013eec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013ef0:	f846 1b04 	str.w	r1, [r6], #4
 8013ef4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013ef8:	e7dd      	b.n	8013eb6 <__mdiff+0xd6>
 8013efa:	3f01      	subs	r7, #1
 8013efc:	e7e7      	b.n	8013ece <__mdiff+0xee>
 8013efe:	bf00      	nop
 8013f00:	08016250 	.word	0x08016250
 8013f04:	080162e9 	.word	0x080162e9

08013f08 <__d2b>:
 8013f08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f0c:	460f      	mov	r7, r1
 8013f0e:	2101      	movs	r1, #1
 8013f10:	ec59 8b10 	vmov	r8, r9, d0
 8013f14:	4616      	mov	r6, r2
 8013f16:	f7ff fd1b 	bl	8013950 <_Balloc>
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	b930      	cbnz	r0, 8013f2c <__d2b+0x24>
 8013f1e:	4602      	mov	r2, r0
 8013f20:	4b23      	ldr	r3, [pc, #140]	@ (8013fb0 <__d2b+0xa8>)
 8013f22:	4824      	ldr	r0, [pc, #144]	@ (8013fb4 <__d2b+0xac>)
 8013f24:	f240 310f 	movw	r1, #783	@ 0x30f
 8013f28:	f000 fbb6 	bl	8014698 <__assert_func>
 8013f2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013f30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f34:	b10d      	cbz	r5, 8013f3a <__d2b+0x32>
 8013f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013f3a:	9301      	str	r3, [sp, #4]
 8013f3c:	f1b8 0300 	subs.w	r3, r8, #0
 8013f40:	d023      	beq.n	8013f8a <__d2b+0x82>
 8013f42:	4668      	mov	r0, sp
 8013f44:	9300      	str	r3, [sp, #0]
 8013f46:	f7ff fd96 	bl	8013a76 <__lo0bits>
 8013f4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013f4e:	b1d0      	cbz	r0, 8013f86 <__d2b+0x7e>
 8013f50:	f1c0 0320 	rsb	r3, r0, #32
 8013f54:	fa02 f303 	lsl.w	r3, r2, r3
 8013f58:	430b      	orrs	r3, r1
 8013f5a:	40c2      	lsrs	r2, r0
 8013f5c:	6163      	str	r3, [r4, #20]
 8013f5e:	9201      	str	r2, [sp, #4]
 8013f60:	9b01      	ldr	r3, [sp, #4]
 8013f62:	61a3      	str	r3, [r4, #24]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	bf0c      	ite	eq
 8013f68:	2201      	moveq	r2, #1
 8013f6a:	2202      	movne	r2, #2
 8013f6c:	6122      	str	r2, [r4, #16]
 8013f6e:	b1a5      	cbz	r5, 8013f9a <__d2b+0x92>
 8013f70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013f74:	4405      	add	r5, r0
 8013f76:	603d      	str	r5, [r7, #0]
 8013f78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013f7c:	6030      	str	r0, [r6, #0]
 8013f7e:	4620      	mov	r0, r4
 8013f80:	b003      	add	sp, #12
 8013f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f86:	6161      	str	r1, [r4, #20]
 8013f88:	e7ea      	b.n	8013f60 <__d2b+0x58>
 8013f8a:	a801      	add	r0, sp, #4
 8013f8c:	f7ff fd73 	bl	8013a76 <__lo0bits>
 8013f90:	9b01      	ldr	r3, [sp, #4]
 8013f92:	6163      	str	r3, [r4, #20]
 8013f94:	3020      	adds	r0, #32
 8013f96:	2201      	movs	r2, #1
 8013f98:	e7e8      	b.n	8013f6c <__d2b+0x64>
 8013f9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013f9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013fa2:	6038      	str	r0, [r7, #0]
 8013fa4:	6918      	ldr	r0, [r3, #16]
 8013fa6:	f7ff fd47 	bl	8013a38 <__hi0bits>
 8013faa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013fae:	e7e5      	b.n	8013f7c <__d2b+0x74>
 8013fb0:	08016250 	.word	0x08016250
 8013fb4:	080162e9 	.word	0x080162e9

08013fb8 <_fclose_r>:
 8013fb8:	b570      	push	{r4, r5, r6, lr}
 8013fba:	4605      	mov	r5, r0
 8013fbc:	460c      	mov	r4, r1
 8013fbe:	b1b1      	cbz	r1, 8013fee <_fclose_r+0x36>
 8013fc0:	b118      	cbz	r0, 8013fca <_fclose_r+0x12>
 8013fc2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8013fc4:	b90b      	cbnz	r3, 8013fca <_fclose_r+0x12>
 8013fc6:	f7fc fe89 	bl	8010cdc <__sinit>
 8013fca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013fcc:	07de      	lsls	r6, r3, #31
 8013fce:	d405      	bmi.n	8013fdc <_fclose_r+0x24>
 8013fd0:	89a3      	ldrh	r3, [r4, #12]
 8013fd2:	0598      	lsls	r0, r3, #22
 8013fd4:	d402      	bmi.n	8013fdc <_fclose_r+0x24>
 8013fd6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013fd8:	f7fd f92e 	bl	8011238 <__retarget_lock_acquire_recursive>
 8013fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fe0:	b943      	cbnz	r3, 8013ff4 <_fclose_r+0x3c>
 8013fe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013fe4:	07d9      	lsls	r1, r3, #31
 8013fe6:	d402      	bmi.n	8013fee <_fclose_r+0x36>
 8013fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013fea:	f7fd f926 	bl	801123a <__retarget_lock_release_recursive>
 8013fee:	2600      	movs	r6, #0
 8013ff0:	4630      	mov	r0, r6
 8013ff2:	bd70      	pop	{r4, r5, r6, pc}
 8013ff4:	4621      	mov	r1, r4
 8013ff6:	4628      	mov	r0, r5
 8013ff8:	f7fc fd16 	bl	8010a28 <__sflush_r>
 8013ffc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013ffe:	4606      	mov	r6, r0
 8014000:	b133      	cbz	r3, 8014010 <_fclose_r+0x58>
 8014002:	69e1      	ldr	r1, [r4, #28]
 8014004:	4628      	mov	r0, r5
 8014006:	4798      	blx	r3
 8014008:	2800      	cmp	r0, #0
 801400a:	bfb8      	it	lt
 801400c:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
 8014010:	89a3      	ldrh	r3, [r4, #12]
 8014012:	061a      	lsls	r2, r3, #24
 8014014:	d503      	bpl.n	801401e <_fclose_r+0x66>
 8014016:	6921      	ldr	r1, [r4, #16]
 8014018:	4628      	mov	r0, r5
 801401a:	f7fd ff99 	bl	8011f50 <_free_r>
 801401e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014020:	b141      	cbz	r1, 8014034 <_fclose_r+0x7c>
 8014022:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8014026:	4299      	cmp	r1, r3
 8014028:	d002      	beq.n	8014030 <_fclose_r+0x78>
 801402a:	4628      	mov	r0, r5
 801402c:	f7fd ff90 	bl	8011f50 <_free_r>
 8014030:	2300      	movs	r3, #0
 8014032:	6323      	str	r3, [r4, #48]	@ 0x30
 8014034:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014036:	b121      	cbz	r1, 8014042 <_fclose_r+0x8a>
 8014038:	4628      	mov	r0, r5
 801403a:	f7fd ff89 	bl	8011f50 <_free_r>
 801403e:	2300      	movs	r3, #0
 8014040:	6463      	str	r3, [r4, #68]	@ 0x44
 8014042:	f7fc fe3f 	bl	8010cc4 <__sfp_lock_acquire>
 8014046:	2300      	movs	r3, #0
 8014048:	81a3      	strh	r3, [r4, #12]
 801404a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801404c:	07db      	lsls	r3, r3, #31
 801404e:	d402      	bmi.n	8014056 <_fclose_r+0x9e>
 8014050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014052:	f7fd f8f2 	bl	801123a <__retarget_lock_release_recursive>
 8014056:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014058:	f7fd f8ed 	bl	8011236 <__retarget_lock_close_recursive>
 801405c:	f7fc fe38 	bl	8010cd0 <__sfp_lock_release>
 8014060:	e7c6      	b.n	8013ff0 <_fclose_r+0x38>
	...

08014064 <_realloc_r>:
 8014064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014068:	4682      	mov	sl, r0
 801406a:	4693      	mov	fp, r2
 801406c:	460c      	mov	r4, r1
 801406e:	b929      	cbnz	r1, 801407c <_realloc_r+0x18>
 8014070:	4611      	mov	r1, r2
 8014072:	b003      	add	sp, #12
 8014074:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014078:	f7fe b82a 	b.w	80120d0 <_malloc_r>
 801407c:	f7ff fc5c 	bl	8013938 <__malloc_lock>
 8014080:	f10b 080b 	add.w	r8, fp, #11
 8014084:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8014088:	f1b8 0f16 	cmp.w	r8, #22
 801408c:	f1a4 0908 	sub.w	r9, r4, #8
 8014090:	f025 0603 	bic.w	r6, r5, #3
 8014094:	d908      	bls.n	80140a8 <_realloc_r+0x44>
 8014096:	f038 0807 	bics.w	r8, r8, #7
 801409a:	d507      	bpl.n	80140ac <_realloc_r+0x48>
 801409c:	230c      	movs	r3, #12
 801409e:	f8ca 3000 	str.w	r3, [sl]
 80140a2:	f04f 0b00 	mov.w	fp, #0
 80140a6:	e032      	b.n	801410e <_realloc_r+0xaa>
 80140a8:	f04f 0810 	mov.w	r8, #16
 80140ac:	45c3      	cmp	fp, r8
 80140ae:	d8f5      	bhi.n	801409c <_realloc_r+0x38>
 80140b0:	4546      	cmp	r6, r8
 80140b2:	f280 8174 	bge.w	801439e <_realloc_r+0x33a>
 80140b6:	4b9e      	ldr	r3, [pc, #632]	@ (8014330 <_realloc_r+0x2cc>)
 80140b8:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80140bc:	eb09 0106 	add.w	r1, r9, r6
 80140c0:	458c      	cmp	ip, r1
 80140c2:	6848      	ldr	r0, [r1, #4]
 80140c4:	d005      	beq.n	80140d2 <_realloc_r+0x6e>
 80140c6:	f020 0201 	bic.w	r2, r0, #1
 80140ca:	440a      	add	r2, r1
 80140cc:	6852      	ldr	r2, [r2, #4]
 80140ce:	07d7      	lsls	r7, r2, #31
 80140d0:	d449      	bmi.n	8014166 <_realloc_r+0x102>
 80140d2:	f020 0003 	bic.w	r0, r0, #3
 80140d6:	458c      	cmp	ip, r1
 80140d8:	eb06 0700 	add.w	r7, r6, r0
 80140dc:	d11b      	bne.n	8014116 <_realloc_r+0xb2>
 80140de:	f108 0210 	add.w	r2, r8, #16
 80140e2:	42ba      	cmp	r2, r7
 80140e4:	dc41      	bgt.n	801416a <_realloc_r+0x106>
 80140e6:	eb09 0208 	add.w	r2, r9, r8
 80140ea:	eba7 0708 	sub.w	r7, r7, r8
 80140ee:	f047 0701 	orr.w	r7, r7, #1
 80140f2:	609a      	str	r2, [r3, #8]
 80140f4:	6057      	str	r7, [r2, #4]
 80140f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80140fa:	f003 0301 	and.w	r3, r3, #1
 80140fe:	ea43 0308 	orr.w	r3, r3, r8
 8014102:	f844 3c04 	str.w	r3, [r4, #-4]
 8014106:	4650      	mov	r0, sl
 8014108:	f7ff fc1c 	bl	8013944 <__malloc_unlock>
 801410c:	46a3      	mov	fp, r4
 801410e:	4658      	mov	r0, fp
 8014110:	b003      	add	sp, #12
 8014112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014116:	45b8      	cmp	r8, r7
 8014118:	dc27      	bgt.n	801416a <_realloc_r+0x106>
 801411a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801411e:	60d3      	str	r3, [r2, #12]
 8014120:	609a      	str	r2, [r3, #8]
 8014122:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014126:	eba7 0008 	sub.w	r0, r7, r8
 801412a:	280f      	cmp	r0, #15
 801412c:	f003 0301 	and.w	r3, r3, #1
 8014130:	eb09 0207 	add.w	r2, r9, r7
 8014134:	f240 8135 	bls.w	80143a2 <_realloc_r+0x33e>
 8014138:	eb09 0108 	add.w	r1, r9, r8
 801413c:	ea48 0303 	orr.w	r3, r8, r3
 8014140:	f040 0001 	orr.w	r0, r0, #1
 8014144:	f8c9 3004 	str.w	r3, [r9, #4]
 8014148:	6048      	str	r0, [r1, #4]
 801414a:	6853      	ldr	r3, [r2, #4]
 801414c:	f043 0301 	orr.w	r3, r3, #1
 8014150:	6053      	str	r3, [r2, #4]
 8014152:	3108      	adds	r1, #8
 8014154:	4650      	mov	r0, sl
 8014156:	f7fd fefb 	bl	8011f50 <_free_r>
 801415a:	4650      	mov	r0, sl
 801415c:	f7ff fbf2 	bl	8013944 <__malloc_unlock>
 8014160:	f109 0b08 	add.w	fp, r9, #8
 8014164:	e7d3      	b.n	801410e <_realloc_r+0xaa>
 8014166:	2000      	movs	r0, #0
 8014168:	4601      	mov	r1, r0
 801416a:	07ea      	lsls	r2, r5, #31
 801416c:	f100 80c7 	bmi.w	80142fe <_realloc_r+0x29a>
 8014170:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8014174:	eba9 0505 	sub.w	r5, r9, r5
 8014178:	686a      	ldr	r2, [r5, #4]
 801417a:	f022 0203 	bic.w	r2, r2, #3
 801417e:	4432      	add	r2, r6
 8014180:	9201      	str	r2, [sp, #4]
 8014182:	2900      	cmp	r1, #0
 8014184:	f000 8086 	beq.w	8014294 <_realloc_r+0x230>
 8014188:	458c      	cmp	ip, r1
 801418a:	eb00 0702 	add.w	r7, r0, r2
 801418e:	d149      	bne.n	8014224 <_realloc_r+0x1c0>
 8014190:	f108 0210 	add.w	r2, r8, #16
 8014194:	42ba      	cmp	r2, r7
 8014196:	dc7d      	bgt.n	8014294 <_realloc_r+0x230>
 8014198:	46ab      	mov	fp, r5
 801419a:	68ea      	ldr	r2, [r5, #12]
 801419c:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 80141a0:	60ca      	str	r2, [r1, #12]
 80141a2:	6091      	str	r1, [r2, #8]
 80141a4:	1f32      	subs	r2, r6, #4
 80141a6:	2a24      	cmp	r2, #36	@ 0x24
 80141a8:	d836      	bhi.n	8014218 <_realloc_r+0x1b4>
 80141aa:	2a13      	cmp	r2, #19
 80141ac:	d932      	bls.n	8014214 <_realloc_r+0x1b0>
 80141ae:	6821      	ldr	r1, [r4, #0]
 80141b0:	60a9      	str	r1, [r5, #8]
 80141b2:	6861      	ldr	r1, [r4, #4]
 80141b4:	60e9      	str	r1, [r5, #12]
 80141b6:	2a1b      	cmp	r2, #27
 80141b8:	d81a      	bhi.n	80141f0 <_realloc_r+0x18c>
 80141ba:	3408      	adds	r4, #8
 80141bc:	f105 0210 	add.w	r2, r5, #16
 80141c0:	6821      	ldr	r1, [r4, #0]
 80141c2:	6011      	str	r1, [r2, #0]
 80141c4:	6861      	ldr	r1, [r4, #4]
 80141c6:	6051      	str	r1, [r2, #4]
 80141c8:	68a1      	ldr	r1, [r4, #8]
 80141ca:	6091      	str	r1, [r2, #8]
 80141cc:	eb05 0208 	add.w	r2, r5, r8
 80141d0:	eba7 0708 	sub.w	r7, r7, r8
 80141d4:	f047 0701 	orr.w	r7, r7, #1
 80141d8:	609a      	str	r2, [r3, #8]
 80141da:	6057      	str	r7, [r2, #4]
 80141dc:	686b      	ldr	r3, [r5, #4]
 80141de:	f003 0301 	and.w	r3, r3, #1
 80141e2:	ea43 0308 	orr.w	r3, r3, r8
 80141e6:	606b      	str	r3, [r5, #4]
 80141e8:	4650      	mov	r0, sl
 80141ea:	f7ff fbab 	bl	8013944 <__malloc_unlock>
 80141ee:	e78e      	b.n	801410e <_realloc_r+0xaa>
 80141f0:	68a1      	ldr	r1, [r4, #8]
 80141f2:	6129      	str	r1, [r5, #16]
 80141f4:	68e1      	ldr	r1, [r4, #12]
 80141f6:	6169      	str	r1, [r5, #20]
 80141f8:	2a24      	cmp	r2, #36	@ 0x24
 80141fa:	bf01      	itttt	eq
 80141fc:	6922      	ldreq	r2, [r4, #16]
 80141fe:	61aa      	streq	r2, [r5, #24]
 8014200:	6961      	ldreq	r1, [r4, #20]
 8014202:	61e9      	streq	r1, [r5, #28]
 8014204:	bf19      	ittee	ne
 8014206:	3410      	addne	r4, #16
 8014208:	f105 0218 	addne.w	r2, r5, #24
 801420c:	f105 0220 	addeq.w	r2, r5, #32
 8014210:	3418      	addeq	r4, #24
 8014212:	e7d5      	b.n	80141c0 <_realloc_r+0x15c>
 8014214:	465a      	mov	r2, fp
 8014216:	e7d3      	b.n	80141c0 <_realloc_r+0x15c>
 8014218:	4621      	mov	r1, r4
 801421a:	4658      	mov	r0, fp
 801421c:	f7fc ffa0 	bl	8011160 <memmove>
 8014220:	4b43      	ldr	r3, [pc, #268]	@ (8014330 <_realloc_r+0x2cc>)
 8014222:	e7d3      	b.n	80141cc <_realloc_r+0x168>
 8014224:	45b8      	cmp	r8, r7
 8014226:	dc35      	bgt.n	8014294 <_realloc_r+0x230>
 8014228:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 801422c:	4628      	mov	r0, r5
 801422e:	60d3      	str	r3, [r2, #12]
 8014230:	609a      	str	r2, [r3, #8]
 8014232:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8014236:	68eb      	ldr	r3, [r5, #12]
 8014238:	60d3      	str	r3, [r2, #12]
 801423a:	609a      	str	r2, [r3, #8]
 801423c:	1f32      	subs	r2, r6, #4
 801423e:	2a24      	cmp	r2, #36	@ 0x24
 8014240:	d824      	bhi.n	801428c <_realloc_r+0x228>
 8014242:	2a13      	cmp	r2, #19
 8014244:	d908      	bls.n	8014258 <_realloc_r+0x1f4>
 8014246:	6823      	ldr	r3, [r4, #0]
 8014248:	60ab      	str	r3, [r5, #8]
 801424a:	6863      	ldr	r3, [r4, #4]
 801424c:	60eb      	str	r3, [r5, #12]
 801424e:	2a1b      	cmp	r2, #27
 8014250:	d80a      	bhi.n	8014268 <_realloc_r+0x204>
 8014252:	3408      	adds	r4, #8
 8014254:	f105 0010 	add.w	r0, r5, #16
 8014258:	6823      	ldr	r3, [r4, #0]
 801425a:	6003      	str	r3, [r0, #0]
 801425c:	6863      	ldr	r3, [r4, #4]
 801425e:	6043      	str	r3, [r0, #4]
 8014260:	68a3      	ldr	r3, [r4, #8]
 8014262:	6083      	str	r3, [r0, #8]
 8014264:	46a9      	mov	r9, r5
 8014266:	e75c      	b.n	8014122 <_realloc_r+0xbe>
 8014268:	68a3      	ldr	r3, [r4, #8]
 801426a:	612b      	str	r3, [r5, #16]
 801426c:	68e3      	ldr	r3, [r4, #12]
 801426e:	616b      	str	r3, [r5, #20]
 8014270:	2a24      	cmp	r2, #36	@ 0x24
 8014272:	bf01      	itttt	eq
 8014274:	6923      	ldreq	r3, [r4, #16]
 8014276:	61ab      	streq	r3, [r5, #24]
 8014278:	6963      	ldreq	r3, [r4, #20]
 801427a:	61eb      	streq	r3, [r5, #28]
 801427c:	bf19      	ittee	ne
 801427e:	3410      	addne	r4, #16
 8014280:	f105 0018 	addne.w	r0, r5, #24
 8014284:	f105 0020 	addeq.w	r0, r5, #32
 8014288:	3418      	addeq	r4, #24
 801428a:	e7e5      	b.n	8014258 <_realloc_r+0x1f4>
 801428c:	4621      	mov	r1, r4
 801428e:	f7fc ff67 	bl	8011160 <memmove>
 8014292:	e7e7      	b.n	8014264 <_realloc_r+0x200>
 8014294:	9b01      	ldr	r3, [sp, #4]
 8014296:	4598      	cmp	r8, r3
 8014298:	dc31      	bgt.n	80142fe <_realloc_r+0x29a>
 801429a:	4628      	mov	r0, r5
 801429c:	68eb      	ldr	r3, [r5, #12]
 801429e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80142a2:	60d3      	str	r3, [r2, #12]
 80142a4:	609a      	str	r2, [r3, #8]
 80142a6:	1f32      	subs	r2, r6, #4
 80142a8:	2a24      	cmp	r2, #36	@ 0x24
 80142aa:	d824      	bhi.n	80142f6 <_realloc_r+0x292>
 80142ac:	2a13      	cmp	r2, #19
 80142ae:	d908      	bls.n	80142c2 <_realloc_r+0x25e>
 80142b0:	6823      	ldr	r3, [r4, #0]
 80142b2:	60ab      	str	r3, [r5, #8]
 80142b4:	6863      	ldr	r3, [r4, #4]
 80142b6:	60eb      	str	r3, [r5, #12]
 80142b8:	2a1b      	cmp	r2, #27
 80142ba:	d80a      	bhi.n	80142d2 <_realloc_r+0x26e>
 80142bc:	3408      	adds	r4, #8
 80142be:	f105 0010 	add.w	r0, r5, #16
 80142c2:	6823      	ldr	r3, [r4, #0]
 80142c4:	6003      	str	r3, [r0, #0]
 80142c6:	6863      	ldr	r3, [r4, #4]
 80142c8:	6043      	str	r3, [r0, #4]
 80142ca:	68a3      	ldr	r3, [r4, #8]
 80142cc:	6083      	str	r3, [r0, #8]
 80142ce:	9f01      	ldr	r7, [sp, #4]
 80142d0:	e7c8      	b.n	8014264 <_realloc_r+0x200>
 80142d2:	68a3      	ldr	r3, [r4, #8]
 80142d4:	612b      	str	r3, [r5, #16]
 80142d6:	68e3      	ldr	r3, [r4, #12]
 80142d8:	616b      	str	r3, [r5, #20]
 80142da:	2a24      	cmp	r2, #36	@ 0x24
 80142dc:	bf01      	itttt	eq
 80142de:	6923      	ldreq	r3, [r4, #16]
 80142e0:	61ab      	streq	r3, [r5, #24]
 80142e2:	6963      	ldreq	r3, [r4, #20]
 80142e4:	61eb      	streq	r3, [r5, #28]
 80142e6:	bf19      	ittee	ne
 80142e8:	3410      	addne	r4, #16
 80142ea:	f105 0018 	addne.w	r0, r5, #24
 80142ee:	f105 0020 	addeq.w	r0, r5, #32
 80142f2:	3418      	addeq	r4, #24
 80142f4:	e7e5      	b.n	80142c2 <_realloc_r+0x25e>
 80142f6:	4621      	mov	r1, r4
 80142f8:	f7fc ff32 	bl	8011160 <memmove>
 80142fc:	e7e7      	b.n	80142ce <_realloc_r+0x26a>
 80142fe:	4659      	mov	r1, fp
 8014300:	4650      	mov	r0, sl
 8014302:	f7fd fee5 	bl	80120d0 <_malloc_r>
 8014306:	4683      	mov	fp, r0
 8014308:	b918      	cbnz	r0, 8014312 <_realloc_r+0x2ae>
 801430a:	4650      	mov	r0, sl
 801430c:	f7ff fb1a 	bl	8013944 <__malloc_unlock>
 8014310:	e6c7      	b.n	80140a2 <_realloc_r+0x3e>
 8014312:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014316:	f023 0301 	bic.w	r3, r3, #1
 801431a:	444b      	add	r3, r9
 801431c:	f1a0 0208 	sub.w	r2, r0, #8
 8014320:	4293      	cmp	r3, r2
 8014322:	d107      	bne.n	8014334 <_realloc_r+0x2d0>
 8014324:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8014328:	f027 0703 	bic.w	r7, r7, #3
 801432c:	4437      	add	r7, r6
 801432e:	e6f8      	b.n	8014122 <_realloc_r+0xbe>
 8014330:	240002cc 	.word	0x240002cc
 8014334:	1f32      	subs	r2, r6, #4
 8014336:	2a24      	cmp	r2, #36	@ 0x24
 8014338:	d82d      	bhi.n	8014396 <_realloc_r+0x332>
 801433a:	2a13      	cmp	r2, #19
 801433c:	d928      	bls.n	8014390 <_realloc_r+0x32c>
 801433e:	6823      	ldr	r3, [r4, #0]
 8014340:	6003      	str	r3, [r0, #0]
 8014342:	6863      	ldr	r3, [r4, #4]
 8014344:	6043      	str	r3, [r0, #4]
 8014346:	2a1b      	cmp	r2, #27
 8014348:	d80e      	bhi.n	8014368 <_realloc_r+0x304>
 801434a:	f104 0208 	add.w	r2, r4, #8
 801434e:	f100 0308 	add.w	r3, r0, #8
 8014352:	6811      	ldr	r1, [r2, #0]
 8014354:	6019      	str	r1, [r3, #0]
 8014356:	6851      	ldr	r1, [r2, #4]
 8014358:	6059      	str	r1, [r3, #4]
 801435a:	6892      	ldr	r2, [r2, #8]
 801435c:	609a      	str	r2, [r3, #8]
 801435e:	4621      	mov	r1, r4
 8014360:	4650      	mov	r0, sl
 8014362:	f7fd fdf5 	bl	8011f50 <_free_r>
 8014366:	e73f      	b.n	80141e8 <_realloc_r+0x184>
 8014368:	68a3      	ldr	r3, [r4, #8]
 801436a:	6083      	str	r3, [r0, #8]
 801436c:	68e3      	ldr	r3, [r4, #12]
 801436e:	60c3      	str	r3, [r0, #12]
 8014370:	2a24      	cmp	r2, #36	@ 0x24
 8014372:	bf01      	itttt	eq
 8014374:	6923      	ldreq	r3, [r4, #16]
 8014376:	6103      	streq	r3, [r0, #16]
 8014378:	6961      	ldreq	r1, [r4, #20]
 801437a:	6141      	streq	r1, [r0, #20]
 801437c:	bf19      	ittee	ne
 801437e:	f104 0210 	addne.w	r2, r4, #16
 8014382:	f100 0310 	addne.w	r3, r0, #16
 8014386:	f104 0218 	addeq.w	r2, r4, #24
 801438a:	f100 0318 	addeq.w	r3, r0, #24
 801438e:	e7e0      	b.n	8014352 <_realloc_r+0x2ee>
 8014390:	4603      	mov	r3, r0
 8014392:	4622      	mov	r2, r4
 8014394:	e7dd      	b.n	8014352 <_realloc_r+0x2ee>
 8014396:	4621      	mov	r1, r4
 8014398:	f7fc fee2 	bl	8011160 <memmove>
 801439c:	e7df      	b.n	801435e <_realloc_r+0x2fa>
 801439e:	4637      	mov	r7, r6
 80143a0:	e6bf      	b.n	8014122 <_realloc_r+0xbe>
 80143a2:	431f      	orrs	r7, r3
 80143a4:	f8c9 7004 	str.w	r7, [r9, #4]
 80143a8:	6853      	ldr	r3, [r2, #4]
 80143aa:	f043 0301 	orr.w	r3, r3, #1
 80143ae:	6053      	str	r3, [r2, #4]
 80143b0:	e6d3      	b.n	801415a <_realloc_r+0xf6>
 80143b2:	bf00      	nop

080143b4 <__sread>:
 80143b4:	b510      	push	{r4, lr}
 80143b6:	460c      	mov	r4, r1
 80143b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143bc:	f000 f8d8 	bl	8014570 <_read_r>
 80143c0:	2800      	cmp	r0, #0
 80143c2:	bfab      	itete	ge
 80143c4:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 80143c6:	89a3      	ldrhlt	r3, [r4, #12]
 80143c8:	181b      	addge	r3, r3, r0
 80143ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80143ce:	bfac      	ite	ge
 80143d0:	6523      	strge	r3, [r4, #80]	@ 0x50
 80143d2:	81a3      	strhlt	r3, [r4, #12]
 80143d4:	bd10      	pop	{r4, pc}

080143d6 <__swrite>:
 80143d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143da:	461f      	mov	r7, r3
 80143dc:	898b      	ldrh	r3, [r1, #12]
 80143de:	05db      	lsls	r3, r3, #23
 80143e0:	4605      	mov	r5, r0
 80143e2:	460c      	mov	r4, r1
 80143e4:	4616      	mov	r6, r2
 80143e6:	d505      	bpl.n	80143f4 <__swrite+0x1e>
 80143e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143ec:	2302      	movs	r3, #2
 80143ee:	2200      	movs	r2, #0
 80143f0:	f000 f8ac 	bl	801454c <_lseek_r>
 80143f4:	89a3      	ldrh	r3, [r4, #12]
 80143f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80143fe:	81a3      	strh	r3, [r4, #12]
 8014400:	4632      	mov	r2, r6
 8014402:	463b      	mov	r3, r7
 8014404:	4628      	mov	r0, r5
 8014406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801440a:	f000 b8d3 	b.w	80145b4 <_write_r>

0801440e <__sseek>:
 801440e:	b510      	push	{r4, lr}
 8014410:	460c      	mov	r4, r1
 8014412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014416:	f000 f899 	bl	801454c <_lseek_r>
 801441a:	1c43      	adds	r3, r0, #1
 801441c:	89a3      	ldrh	r3, [r4, #12]
 801441e:	bf15      	itete	ne
 8014420:	6520      	strne	r0, [r4, #80]	@ 0x50
 8014422:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014426:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801442a:	81a3      	strheq	r3, [r4, #12]
 801442c:	bf18      	it	ne
 801442e:	81a3      	strhne	r3, [r4, #12]
 8014430:	bd10      	pop	{r4, pc}

08014432 <__sclose>:
 8014432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014436:	f000 b857 	b.w	80144e8 <_close_r>

0801443a <__ascii_wctomb>:
 801443a:	4603      	mov	r3, r0
 801443c:	4608      	mov	r0, r1
 801443e:	b141      	cbz	r1, 8014452 <__ascii_wctomb+0x18>
 8014440:	2aff      	cmp	r2, #255	@ 0xff
 8014442:	d904      	bls.n	801444e <__ascii_wctomb+0x14>
 8014444:	228a      	movs	r2, #138	@ 0x8a
 8014446:	601a      	str	r2, [r3, #0]
 8014448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801444c:	4770      	bx	lr
 801444e:	700a      	strb	r2, [r1, #0]
 8014450:	2001      	movs	r0, #1
 8014452:	4770      	bx	lr

08014454 <__swbuf_r>:
 8014454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014456:	460e      	mov	r6, r1
 8014458:	4614      	mov	r4, r2
 801445a:	4605      	mov	r5, r0
 801445c:	b118      	cbz	r0, 8014466 <__swbuf_r+0x12>
 801445e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014460:	b90b      	cbnz	r3, 8014466 <__swbuf_r+0x12>
 8014462:	f7fc fc3b 	bl	8010cdc <__sinit>
 8014466:	69a3      	ldr	r3, [r4, #24]
 8014468:	60a3      	str	r3, [r4, #8]
 801446a:	89a3      	ldrh	r3, [r4, #12]
 801446c:	0719      	lsls	r1, r3, #28
 801446e:	d501      	bpl.n	8014474 <__swbuf_r+0x20>
 8014470:	6923      	ldr	r3, [r4, #16]
 8014472:	b943      	cbnz	r3, 8014486 <__swbuf_r+0x32>
 8014474:	4621      	mov	r1, r4
 8014476:	4628      	mov	r0, r5
 8014478:	f7fc fdb2 	bl	8010fe0 <__swsetup_r>
 801447c:	b118      	cbz	r0, 8014486 <__swbuf_r+0x32>
 801447e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014482:	4638      	mov	r0, r7
 8014484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801448a:	b2f6      	uxtb	r6, r6
 801448c:	049a      	lsls	r2, r3, #18
 801448e:	4637      	mov	r7, r6
 8014490:	d406      	bmi.n	80144a0 <__swbuf_r+0x4c>
 8014492:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014496:	81a3      	strh	r3, [r4, #12]
 8014498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801449a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801449e:	6663      	str	r3, [r4, #100]	@ 0x64
 80144a0:	6823      	ldr	r3, [r4, #0]
 80144a2:	6922      	ldr	r2, [r4, #16]
 80144a4:	1a98      	subs	r0, r3, r2
 80144a6:	6963      	ldr	r3, [r4, #20]
 80144a8:	4283      	cmp	r3, r0
 80144aa:	dc05      	bgt.n	80144b8 <__swbuf_r+0x64>
 80144ac:	4621      	mov	r1, r4
 80144ae:	4628      	mov	r0, r5
 80144b0:	f7fc fb42 	bl	8010b38 <_fflush_r>
 80144b4:	2800      	cmp	r0, #0
 80144b6:	d1e2      	bne.n	801447e <__swbuf_r+0x2a>
 80144b8:	68a3      	ldr	r3, [r4, #8]
 80144ba:	3b01      	subs	r3, #1
 80144bc:	60a3      	str	r3, [r4, #8]
 80144be:	6823      	ldr	r3, [r4, #0]
 80144c0:	1c5a      	adds	r2, r3, #1
 80144c2:	6022      	str	r2, [r4, #0]
 80144c4:	701e      	strb	r6, [r3, #0]
 80144c6:	6962      	ldr	r2, [r4, #20]
 80144c8:	1c43      	adds	r3, r0, #1
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d004      	beq.n	80144d8 <__swbuf_r+0x84>
 80144ce:	89a3      	ldrh	r3, [r4, #12]
 80144d0:	07db      	lsls	r3, r3, #31
 80144d2:	d5d6      	bpl.n	8014482 <__swbuf_r+0x2e>
 80144d4:	2e0a      	cmp	r6, #10
 80144d6:	d1d4      	bne.n	8014482 <__swbuf_r+0x2e>
 80144d8:	4621      	mov	r1, r4
 80144da:	4628      	mov	r0, r5
 80144dc:	f7fc fb2c 	bl	8010b38 <_fflush_r>
 80144e0:	2800      	cmp	r0, #0
 80144e2:	d0ce      	beq.n	8014482 <__swbuf_r+0x2e>
 80144e4:	e7cb      	b.n	801447e <__swbuf_r+0x2a>
	...

080144e8 <_close_r>:
 80144e8:	b538      	push	{r3, r4, r5, lr}
 80144ea:	4d06      	ldr	r5, [pc, #24]	@ (8014504 <_close_r+0x1c>)
 80144ec:	2300      	movs	r3, #0
 80144ee:	4604      	mov	r4, r0
 80144f0:	4608      	mov	r0, r1
 80144f2:	602b      	str	r3, [r5, #0]
 80144f4:	f7ef f8a2 	bl	800363c <_close>
 80144f8:	1c43      	adds	r3, r0, #1
 80144fa:	d102      	bne.n	8014502 <_close_r+0x1a>
 80144fc:	682b      	ldr	r3, [r5, #0]
 80144fe:	b103      	cbz	r3, 8014502 <_close_r+0x1a>
 8014500:	6023      	str	r3, [r4, #0]
 8014502:	bd38      	pop	{r3, r4, r5, pc}
 8014504:	24024c2c 	.word	0x24024c2c

08014508 <_fstat_r>:
 8014508:	b538      	push	{r3, r4, r5, lr}
 801450a:	4d07      	ldr	r5, [pc, #28]	@ (8014528 <_fstat_r+0x20>)
 801450c:	2300      	movs	r3, #0
 801450e:	4604      	mov	r4, r0
 8014510:	4608      	mov	r0, r1
 8014512:	4611      	mov	r1, r2
 8014514:	602b      	str	r3, [r5, #0]
 8014516:	f7ef f89d 	bl	8003654 <_fstat>
 801451a:	1c43      	adds	r3, r0, #1
 801451c:	d102      	bne.n	8014524 <_fstat_r+0x1c>
 801451e:	682b      	ldr	r3, [r5, #0]
 8014520:	b103      	cbz	r3, 8014524 <_fstat_r+0x1c>
 8014522:	6023      	str	r3, [r4, #0]
 8014524:	bd38      	pop	{r3, r4, r5, pc}
 8014526:	bf00      	nop
 8014528:	24024c2c 	.word	0x24024c2c

0801452c <_isatty_r>:
 801452c:	b538      	push	{r3, r4, r5, lr}
 801452e:	4d06      	ldr	r5, [pc, #24]	@ (8014548 <_isatty_r+0x1c>)
 8014530:	2300      	movs	r3, #0
 8014532:	4604      	mov	r4, r0
 8014534:	4608      	mov	r0, r1
 8014536:	602b      	str	r3, [r5, #0]
 8014538:	f7ef f89c 	bl	8003674 <_isatty>
 801453c:	1c43      	adds	r3, r0, #1
 801453e:	d102      	bne.n	8014546 <_isatty_r+0x1a>
 8014540:	682b      	ldr	r3, [r5, #0]
 8014542:	b103      	cbz	r3, 8014546 <_isatty_r+0x1a>
 8014544:	6023      	str	r3, [r4, #0]
 8014546:	bd38      	pop	{r3, r4, r5, pc}
 8014548:	24024c2c 	.word	0x24024c2c

0801454c <_lseek_r>:
 801454c:	b538      	push	{r3, r4, r5, lr}
 801454e:	4d07      	ldr	r5, [pc, #28]	@ (801456c <_lseek_r+0x20>)
 8014550:	4604      	mov	r4, r0
 8014552:	4608      	mov	r0, r1
 8014554:	4611      	mov	r1, r2
 8014556:	2200      	movs	r2, #0
 8014558:	602a      	str	r2, [r5, #0]
 801455a:	461a      	mov	r2, r3
 801455c:	f7ef f895 	bl	800368a <_lseek>
 8014560:	1c43      	adds	r3, r0, #1
 8014562:	d102      	bne.n	801456a <_lseek_r+0x1e>
 8014564:	682b      	ldr	r3, [r5, #0]
 8014566:	b103      	cbz	r3, 801456a <_lseek_r+0x1e>
 8014568:	6023      	str	r3, [r4, #0]
 801456a:	bd38      	pop	{r3, r4, r5, pc}
 801456c:	24024c2c 	.word	0x24024c2c

08014570 <_read_r>:
 8014570:	b538      	push	{r3, r4, r5, lr}
 8014572:	4d07      	ldr	r5, [pc, #28]	@ (8014590 <_read_r+0x20>)
 8014574:	4604      	mov	r4, r0
 8014576:	4608      	mov	r0, r1
 8014578:	4611      	mov	r1, r2
 801457a:	2200      	movs	r2, #0
 801457c:	602a      	str	r2, [r5, #0]
 801457e:	461a      	mov	r2, r3
 8014580:	f7ef f823 	bl	80035ca <_read>
 8014584:	1c43      	adds	r3, r0, #1
 8014586:	d102      	bne.n	801458e <_read_r+0x1e>
 8014588:	682b      	ldr	r3, [r5, #0]
 801458a:	b103      	cbz	r3, 801458e <_read_r+0x1e>
 801458c:	6023      	str	r3, [r4, #0]
 801458e:	bd38      	pop	{r3, r4, r5, pc}
 8014590:	24024c2c 	.word	0x24024c2c

08014594 <_sbrk_r>:
 8014594:	b538      	push	{r3, r4, r5, lr}
 8014596:	4d06      	ldr	r5, [pc, #24]	@ (80145b0 <_sbrk_r+0x1c>)
 8014598:	2300      	movs	r3, #0
 801459a:	4604      	mov	r4, r0
 801459c:	4608      	mov	r0, r1
 801459e:	602b      	str	r3, [r5, #0]
 80145a0:	f7ef f880 	bl	80036a4 <_sbrk>
 80145a4:	1c43      	adds	r3, r0, #1
 80145a6:	d102      	bne.n	80145ae <_sbrk_r+0x1a>
 80145a8:	682b      	ldr	r3, [r5, #0]
 80145aa:	b103      	cbz	r3, 80145ae <_sbrk_r+0x1a>
 80145ac:	6023      	str	r3, [r4, #0]
 80145ae:	bd38      	pop	{r3, r4, r5, pc}
 80145b0:	24024c2c 	.word	0x24024c2c

080145b4 <_write_r>:
 80145b4:	b538      	push	{r3, r4, r5, lr}
 80145b6:	4d07      	ldr	r5, [pc, #28]	@ (80145d4 <_write_r+0x20>)
 80145b8:	4604      	mov	r4, r0
 80145ba:	4608      	mov	r0, r1
 80145bc:	4611      	mov	r1, r2
 80145be:	2200      	movs	r2, #0
 80145c0:	602a      	str	r2, [r5, #0]
 80145c2:	461a      	mov	r2, r3
 80145c4:	f7ef f81e 	bl	8003604 <_write>
 80145c8:	1c43      	adds	r3, r0, #1
 80145ca:	d102      	bne.n	80145d2 <_write_r+0x1e>
 80145cc:	682b      	ldr	r3, [r5, #0]
 80145ce:	b103      	cbz	r3, 80145d2 <_write_r+0x1e>
 80145d0:	6023      	str	r3, [r4, #0]
 80145d2:	bd38      	pop	{r3, r4, r5, pc}
 80145d4:	24024c2c 	.word	0x24024c2c

080145d8 <sysconf>:
 80145d8:	2808      	cmp	r0, #8
 80145da:	b508      	push	{r3, lr}
 80145dc:	d006      	beq.n	80145ec <sysconf+0x14>
 80145de:	f7fc fdff 	bl	80111e0 <__errno>
 80145e2:	2316      	movs	r3, #22
 80145e4:	6003      	str	r3, [r0, #0]
 80145e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80145ea:	bd08      	pop	{r3, pc}
 80145ec:	2080      	movs	r0, #128	@ 0x80
 80145ee:	e7fc      	b.n	80145ea <sysconf+0x12>

080145f0 <__libc_fini_array>:
 80145f0:	b538      	push	{r3, r4, r5, lr}
 80145f2:	4d07      	ldr	r5, [pc, #28]	@ (8014610 <__libc_fini_array+0x20>)
 80145f4:	4c07      	ldr	r4, [pc, #28]	@ (8014614 <__libc_fini_array+0x24>)
 80145f6:	1b64      	subs	r4, r4, r5
 80145f8:	10a4      	asrs	r4, r4, #2
 80145fa:	b91c      	cbnz	r4, 8014604 <__libc_fini_array+0x14>
 80145fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014600:	f001 bc8e 	b.w	8015f20 <_fini>
 8014604:	3c01      	subs	r4, #1
 8014606:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801460a:	4798      	blx	r3
 801460c:	e7f5      	b.n	80145fa <__libc_fini_array+0xa>
 801460e:	bf00      	nop
 8014610:	080187b0 	.word	0x080187b0
 8014614:	080187b4 	.word	0x080187b4

08014618 <__register_exitproc>:
 8014618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801461c:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8014694 <__register_exitproc+0x7c>
 8014620:	4606      	mov	r6, r0
 8014622:	f8da 0000 	ldr.w	r0, [sl]
 8014626:	4698      	mov	r8, r3
 8014628:	460f      	mov	r7, r1
 801462a:	4691      	mov	r9, r2
 801462c:	f7fc fe04 	bl	8011238 <__retarget_lock_acquire_recursive>
 8014630:	4b16      	ldr	r3, [pc, #88]	@ (801468c <__register_exitproc+0x74>)
 8014632:	681c      	ldr	r4, [r3, #0]
 8014634:	b90c      	cbnz	r4, 801463a <__register_exitproc+0x22>
 8014636:	4c16      	ldr	r4, [pc, #88]	@ (8014690 <__register_exitproc+0x78>)
 8014638:	601c      	str	r4, [r3, #0]
 801463a:	6865      	ldr	r5, [r4, #4]
 801463c:	f8da 0000 	ldr.w	r0, [sl]
 8014640:	2d1f      	cmp	r5, #31
 8014642:	dd05      	ble.n	8014650 <__register_exitproc+0x38>
 8014644:	f7fc fdf9 	bl	801123a <__retarget_lock_release_recursive>
 8014648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801464c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014650:	b19e      	cbz	r6, 801467a <__register_exitproc+0x62>
 8014652:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8014656:	2201      	movs	r2, #1
 8014658:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 801465c:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8014660:	40aa      	lsls	r2, r5
 8014662:	4313      	orrs	r3, r2
 8014664:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8014668:	2e02      	cmp	r6, #2
 801466a:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 801466e:	bf02      	ittt	eq
 8014670:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8014674:	4313      	orreq	r3, r2
 8014676:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 801467a:	1c6b      	adds	r3, r5, #1
 801467c:	3502      	adds	r5, #2
 801467e:	6063      	str	r3, [r4, #4]
 8014680:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8014684:	f7fc fdd9 	bl	801123a <__retarget_lock_release_recursive>
 8014688:	2000      	movs	r0, #0
 801468a:	e7df      	b.n	801464c <__register_exitproc+0x34>
 801468c:	24024bf4 	.word	0x24024bf4
 8014690:	24024c30 	.word	0x24024c30
 8014694:	240002c0 	.word	0x240002c0

08014698 <__assert_func>:
 8014698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801469a:	4614      	mov	r4, r2
 801469c:	461a      	mov	r2, r3
 801469e:	4b09      	ldr	r3, [pc, #36]	@ (80146c4 <__assert_func+0x2c>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	4605      	mov	r5, r0
 80146a4:	68d8      	ldr	r0, [r3, #12]
 80146a6:	b954      	cbnz	r4, 80146be <__assert_func+0x26>
 80146a8:	4b07      	ldr	r3, [pc, #28]	@ (80146c8 <__assert_func+0x30>)
 80146aa:	461c      	mov	r4, r3
 80146ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80146b0:	9100      	str	r1, [sp, #0]
 80146b2:	462b      	mov	r3, r5
 80146b4:	4905      	ldr	r1, [pc, #20]	@ (80146cc <__assert_func+0x34>)
 80146b6:	f000 f843 	bl	8014740 <fiprintf>
 80146ba:	f000 f8d0 	bl	801485e <abort>
 80146be:	4b04      	ldr	r3, [pc, #16]	@ (80146d0 <__assert_func+0x38>)
 80146c0:	e7f4      	b.n	80146ac <__assert_func+0x14>
 80146c2:	bf00      	nop
 80146c4:	24000198 	.word	0x24000198
 80146c8:	0801647b 	.word	0x0801647b
 80146cc:	0801644d 	.word	0x0801644d
 80146d0:	08016440 	.word	0x08016440

080146d4 <_calloc_r>:
 80146d4:	b538      	push	{r3, r4, r5, lr}
 80146d6:	fba1 1502 	umull	r1, r5, r1, r2
 80146da:	b935      	cbnz	r5, 80146ea <_calloc_r+0x16>
 80146dc:	f7fd fcf8 	bl	80120d0 <_malloc_r>
 80146e0:	4604      	mov	r4, r0
 80146e2:	b938      	cbnz	r0, 80146f4 <_calloc_r+0x20>
 80146e4:	2400      	movs	r4, #0
 80146e6:	4620      	mov	r0, r4
 80146e8:	bd38      	pop	{r3, r4, r5, pc}
 80146ea:	f7fc fd79 	bl	80111e0 <__errno>
 80146ee:	230c      	movs	r3, #12
 80146f0:	6003      	str	r3, [r0, #0]
 80146f2:	e7f7      	b.n	80146e4 <_calloc_r+0x10>
 80146f4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80146f8:	f022 0203 	bic.w	r2, r2, #3
 80146fc:	3a04      	subs	r2, #4
 80146fe:	2a24      	cmp	r2, #36	@ 0x24
 8014700:	d819      	bhi.n	8014736 <_calloc_r+0x62>
 8014702:	2a13      	cmp	r2, #19
 8014704:	d915      	bls.n	8014732 <_calloc_r+0x5e>
 8014706:	2a1b      	cmp	r2, #27
 8014708:	e9c0 5500 	strd	r5, r5, [r0]
 801470c:	d806      	bhi.n	801471c <_calloc_r+0x48>
 801470e:	f100 0308 	add.w	r3, r0, #8
 8014712:	2200      	movs	r2, #0
 8014714:	e9c3 2200 	strd	r2, r2, [r3]
 8014718:	609a      	str	r2, [r3, #8]
 801471a:	e7e4      	b.n	80146e6 <_calloc_r+0x12>
 801471c:	2a24      	cmp	r2, #36	@ 0x24
 801471e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8014722:	bf11      	iteee	ne
 8014724:	f100 0310 	addne.w	r3, r0, #16
 8014728:	6105      	streq	r5, [r0, #16]
 801472a:	f100 0318 	addeq.w	r3, r0, #24
 801472e:	6145      	streq	r5, [r0, #20]
 8014730:	e7ef      	b.n	8014712 <_calloc_r+0x3e>
 8014732:	4603      	mov	r3, r0
 8014734:	e7ed      	b.n	8014712 <_calloc_r+0x3e>
 8014736:	4629      	mov	r1, r5
 8014738:	f7fc fd2c 	bl	8011194 <memset>
 801473c:	e7d3      	b.n	80146e6 <_calloc_r+0x12>
	...

08014740 <fiprintf>:
 8014740:	b40e      	push	{r1, r2, r3}
 8014742:	b503      	push	{r0, r1, lr}
 8014744:	4601      	mov	r1, r0
 8014746:	ab03      	add	r3, sp, #12
 8014748:	4805      	ldr	r0, [pc, #20]	@ (8014760 <fiprintf+0x20>)
 801474a:	f853 2b04 	ldr.w	r2, [r3], #4
 801474e:	6800      	ldr	r0, [r0, #0]
 8014750:	9301      	str	r3, [sp, #4]
 8014752:	f7fb fca1 	bl	8010098 <_vfiprintf_r>
 8014756:	b002      	add	sp, #8
 8014758:	f85d eb04 	ldr.w	lr, [sp], #4
 801475c:	b003      	add	sp, #12
 801475e:	4770      	bx	lr
 8014760:	24000198 	.word	0x24000198

08014764 <__ssprint_r>:
 8014764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014768:	6893      	ldr	r3, [r2, #8]
 801476a:	f8d2 b000 	ldr.w	fp, [r2]
 801476e:	9001      	str	r0, [sp, #4]
 8014770:	460c      	mov	r4, r1
 8014772:	4617      	mov	r7, r2
 8014774:	2b00      	cmp	r3, #0
 8014776:	d157      	bne.n	8014828 <__ssprint_r+0xc4>
 8014778:	2000      	movs	r0, #0
 801477a:	2300      	movs	r3, #0
 801477c:	607b      	str	r3, [r7, #4]
 801477e:	b003      	add	sp, #12
 8014780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014784:	e9db a800 	ldrd	sl, r8, [fp]
 8014788:	f10b 0b08 	add.w	fp, fp, #8
 801478c:	68a6      	ldr	r6, [r4, #8]
 801478e:	6820      	ldr	r0, [r4, #0]
 8014790:	f1b8 0f00 	cmp.w	r8, #0
 8014794:	d0f6      	beq.n	8014784 <__ssprint_r+0x20>
 8014796:	45b0      	cmp	r8, r6
 8014798:	d32e      	bcc.n	80147f8 <__ssprint_r+0x94>
 801479a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801479e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80147a2:	d029      	beq.n	80147f8 <__ssprint_r+0x94>
 80147a4:	6921      	ldr	r1, [r4, #16]
 80147a6:	6965      	ldr	r5, [r4, #20]
 80147a8:	eba0 0901 	sub.w	r9, r0, r1
 80147ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80147b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80147b4:	f109 0001 	add.w	r0, r9, #1
 80147b8:	106d      	asrs	r5, r5, #1
 80147ba:	4440      	add	r0, r8
 80147bc:	4285      	cmp	r5, r0
 80147be:	bf38      	it	cc
 80147c0:	4605      	movcc	r5, r0
 80147c2:	0553      	lsls	r3, r2, #21
 80147c4:	d534      	bpl.n	8014830 <__ssprint_r+0xcc>
 80147c6:	9801      	ldr	r0, [sp, #4]
 80147c8:	4629      	mov	r1, r5
 80147ca:	f7fd fc81 	bl	80120d0 <_malloc_r>
 80147ce:	4606      	mov	r6, r0
 80147d0:	2800      	cmp	r0, #0
 80147d2:	d038      	beq.n	8014846 <__ssprint_r+0xe2>
 80147d4:	464a      	mov	r2, r9
 80147d6:	6921      	ldr	r1, [r4, #16]
 80147d8:	f7fc fd30 	bl	801123c <memcpy>
 80147dc:	89a2      	ldrh	r2, [r4, #12]
 80147de:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80147e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80147e6:	81a2      	strh	r2, [r4, #12]
 80147e8:	6126      	str	r6, [r4, #16]
 80147ea:	6165      	str	r5, [r4, #20]
 80147ec:	444e      	add	r6, r9
 80147ee:	eba5 0509 	sub.w	r5, r5, r9
 80147f2:	6026      	str	r6, [r4, #0]
 80147f4:	60a5      	str	r5, [r4, #8]
 80147f6:	4646      	mov	r6, r8
 80147f8:	4546      	cmp	r6, r8
 80147fa:	bf28      	it	cs
 80147fc:	4646      	movcs	r6, r8
 80147fe:	4632      	mov	r2, r6
 8014800:	4651      	mov	r1, sl
 8014802:	6820      	ldr	r0, [r4, #0]
 8014804:	f7fc fcac 	bl	8011160 <memmove>
 8014808:	68a2      	ldr	r2, [r4, #8]
 801480a:	1b92      	subs	r2, r2, r6
 801480c:	60a2      	str	r2, [r4, #8]
 801480e:	6822      	ldr	r2, [r4, #0]
 8014810:	4432      	add	r2, r6
 8014812:	6022      	str	r2, [r4, #0]
 8014814:	68ba      	ldr	r2, [r7, #8]
 8014816:	eba2 0308 	sub.w	r3, r2, r8
 801481a:	44c2      	add	sl, r8
 801481c:	60bb      	str	r3, [r7, #8]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d0aa      	beq.n	8014778 <__ssprint_r+0x14>
 8014822:	f04f 0800 	mov.w	r8, #0
 8014826:	e7b1      	b.n	801478c <__ssprint_r+0x28>
 8014828:	f04f 0a00 	mov.w	sl, #0
 801482c:	46d0      	mov	r8, sl
 801482e:	e7ad      	b.n	801478c <__ssprint_r+0x28>
 8014830:	9801      	ldr	r0, [sp, #4]
 8014832:	462a      	mov	r2, r5
 8014834:	f7ff fc16 	bl	8014064 <_realloc_r>
 8014838:	4606      	mov	r6, r0
 801483a:	2800      	cmp	r0, #0
 801483c:	d1d4      	bne.n	80147e8 <__ssprint_r+0x84>
 801483e:	6921      	ldr	r1, [r4, #16]
 8014840:	9801      	ldr	r0, [sp, #4]
 8014842:	f7fd fb85 	bl	8011f50 <_free_r>
 8014846:	9a01      	ldr	r2, [sp, #4]
 8014848:	230c      	movs	r3, #12
 801484a:	6013      	str	r3, [r2, #0]
 801484c:	89a3      	ldrh	r3, [r4, #12]
 801484e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014852:	81a3      	strh	r3, [r4, #12]
 8014854:	2300      	movs	r3, #0
 8014856:	60bb      	str	r3, [r7, #8]
 8014858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801485c:	e78d      	b.n	801477a <__ssprint_r+0x16>

0801485e <abort>:
 801485e:	b508      	push	{r3, lr}
 8014860:	2006      	movs	r0, #6
 8014862:	f000 f82d 	bl	80148c0 <raise>
 8014866:	2001      	movs	r0, #1
 8014868:	f7ee fea4 	bl	80035b4 <_exit>

0801486c <_raise_r>:
 801486c:	291f      	cmp	r1, #31
 801486e:	b538      	push	{r3, r4, r5, lr}
 8014870:	4605      	mov	r5, r0
 8014872:	460c      	mov	r4, r1
 8014874:	d904      	bls.n	8014880 <_raise_r+0x14>
 8014876:	2316      	movs	r3, #22
 8014878:	6003      	str	r3, [r0, #0]
 801487a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801487e:	bd38      	pop	{r3, r4, r5, pc}
 8014880:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8014884:	b112      	cbz	r2, 801488c <_raise_r+0x20>
 8014886:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801488a:	b94b      	cbnz	r3, 80148a0 <_raise_r+0x34>
 801488c:	4628      	mov	r0, r5
 801488e:	f000 f831 	bl	80148f4 <_getpid_r>
 8014892:	4622      	mov	r2, r4
 8014894:	4601      	mov	r1, r0
 8014896:	4628      	mov	r0, r5
 8014898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801489c:	f000 b818 	b.w	80148d0 <_kill_r>
 80148a0:	2b01      	cmp	r3, #1
 80148a2:	d00a      	beq.n	80148ba <_raise_r+0x4e>
 80148a4:	1c59      	adds	r1, r3, #1
 80148a6:	d103      	bne.n	80148b0 <_raise_r+0x44>
 80148a8:	2316      	movs	r3, #22
 80148aa:	6003      	str	r3, [r0, #0]
 80148ac:	2001      	movs	r0, #1
 80148ae:	e7e6      	b.n	801487e <_raise_r+0x12>
 80148b0:	2100      	movs	r1, #0
 80148b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80148b6:	4620      	mov	r0, r4
 80148b8:	4798      	blx	r3
 80148ba:	2000      	movs	r0, #0
 80148bc:	e7df      	b.n	801487e <_raise_r+0x12>
	...

080148c0 <raise>:
 80148c0:	4b02      	ldr	r3, [pc, #8]	@ (80148cc <raise+0xc>)
 80148c2:	4601      	mov	r1, r0
 80148c4:	6818      	ldr	r0, [r3, #0]
 80148c6:	f7ff bfd1 	b.w	801486c <_raise_r>
 80148ca:	bf00      	nop
 80148cc:	24000198 	.word	0x24000198

080148d0 <_kill_r>:
 80148d0:	b538      	push	{r3, r4, r5, lr}
 80148d2:	4d07      	ldr	r5, [pc, #28]	@ (80148f0 <_kill_r+0x20>)
 80148d4:	2300      	movs	r3, #0
 80148d6:	4604      	mov	r4, r0
 80148d8:	4608      	mov	r0, r1
 80148da:	4611      	mov	r1, r2
 80148dc:	602b      	str	r3, [r5, #0]
 80148de:	f7ee fe59 	bl	8003594 <_kill>
 80148e2:	1c43      	adds	r3, r0, #1
 80148e4:	d102      	bne.n	80148ec <_kill_r+0x1c>
 80148e6:	682b      	ldr	r3, [r5, #0]
 80148e8:	b103      	cbz	r3, 80148ec <_kill_r+0x1c>
 80148ea:	6023      	str	r3, [r4, #0]
 80148ec:	bd38      	pop	{r3, r4, r5, pc}
 80148ee:	bf00      	nop
 80148f0:	24024c2c 	.word	0x24024c2c

080148f4 <_getpid_r>:
 80148f4:	f7ee be46 	b.w	8003584 <_getpid>

080148f8 <cabs>:
 80148f8:	b508      	push	{r3, lr}
 80148fa:	ed2d 8b06 	vpush	{d8-d10}
 80148fe:	eeb0 ab40 	vmov.f64	d10, d0
 8014902:	eeb0 9b41 	vmov.f64	d9, d1
 8014906:	f000 fc26 	bl	8015156 <creal>
 801490a:	eeb0 1b49 	vmov.f64	d1, d9
 801490e:	eeb0 8b40 	vmov.f64	d8, d0
 8014912:	eeb0 0b4a 	vmov.f64	d0, d10
 8014916:	f000 fc1b 	bl	8015150 <cimag>
 801491a:	eeb0 1b40 	vmov.f64	d1, d0
 801491e:	eeb0 0b48 	vmov.f64	d0, d8
 8014922:	ecbd 8b06 	vpop	{d8-d10}
 8014926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801492a:	f000 bdd1 	b.w	80154d0 <hypot>
	...

08014930 <log>:
 8014930:	b4f0      	push	{r4, r5, r6, r7}
 8014932:	ee10 0a90 	vmov	r0, s1
 8014936:	ee10 3a10 	vmov	r3, s0
 801493a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801493e:	429c      	cmp	r4, r3
 8014940:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8014944:	4c70      	ldr	r4, [pc, #448]	@ (8014b08 <log+0x1d8>)
 8014946:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 801494a:	418c      	sbcs	r4, r1
 801494c:	ed2d 8b02 	vpush	{d8}
 8014950:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8014954:	d35a      	bcc.n	8014a0c <log+0xdc>
 8014956:	4a6d      	ldr	r2, [pc, #436]	@ (8014b0c <log+0x1dc>)
 8014958:	4290      	cmp	r0, r2
 801495a:	bf08      	it	eq
 801495c:	2b00      	cmpeq	r3, #0
 801495e:	f000 80c4 	beq.w	8014aea <log+0x1ba>
 8014962:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8014966:	ee30 0b47 	vsub.f64	d0, d0, d7
 801496a:	4b69      	ldr	r3, [pc, #420]	@ (8014b10 <log+0x1e0>)
 801496c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8014970:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8014974:	ee20 4b02 	vmul.f64	d4, d0, d2
 8014978:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 801497c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8014980:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8014984:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8014988:	eea6 7b02 	vfma.f64	d7, d6, d2
 801498c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8014990:	eea5 6b00 	vfma.f64	d6, d5, d0
 8014994:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8014998:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 801499c:	eea5 6b02 	vfma.f64	d6, d5, d2
 80149a0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 80149a4:	eea3 5b00 	vfma.f64	d5, d3, d0
 80149a8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 80149ac:	eea3 5b02 	vfma.f64	d5, d3, d2
 80149b0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 80149b4:	eea3 5b04 	vfma.f64	d5, d3, d4
 80149b8:	eea5 6b04 	vfma.f64	d6, d5, d4
 80149bc:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80149c0:	eea6 7b04 	vfma.f64	d7, d6, d4
 80149c4:	eeb0 2b47 	vmov.f64	d2, d7
 80149c8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8014af0 <log+0x1c0>
 80149cc:	eeb0 6b40 	vmov.f64	d6, d0
 80149d0:	eeb0 3b40 	vmov.f64	d3, d0
 80149d4:	eea0 6b07 	vfma.f64	d6, d0, d7
 80149d8:	eea0 6b47 	vfms.f64	d6, d0, d7
 80149dc:	ee30 8b46 	vsub.f64	d8, d0, d6
 80149e0:	ee26 1b06 	vmul.f64	d1, d6, d6
 80149e4:	eea1 3b05 	vfma.f64	d3, d1, d5
 80149e8:	ee30 7b43 	vsub.f64	d7, d0, d3
 80149ec:	ee30 0b06 	vadd.f64	d0, d0, d6
 80149f0:	eea1 7b05 	vfma.f64	d7, d1, d5
 80149f4:	ee25 5b08 	vmul.f64	d5, d5, d8
 80149f8:	eea5 7b00 	vfma.f64	d7, d5, d0
 80149fc:	eea2 7b04 	vfma.f64	d7, d2, d4
 8014a00:	ee33 0b07 	vadd.f64	d0, d3, d7
 8014a04:	ecbd 8b02 	vpop	{d8}
 8014a08:	bcf0      	pop	{r4, r5, r6, r7}
 8014a0a:	4770      	bx	lr
 8014a0c:	f1a2 0410 	sub.w	r4, r2, #16
 8014a10:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8014a14:	428c      	cmp	r4, r1
 8014a16:	d923      	bls.n	8014a60 <log+0x130>
 8014a18:	18d9      	adds	r1, r3, r3
 8014a1a:	eb40 0400 	adc.w	r4, r0, r0
 8014a1e:	4321      	orrs	r1, r4
 8014a20:	d105      	bne.n	8014a2e <log+0xfe>
 8014a22:	ecbd 8b02 	vpop	{d8}
 8014a26:	2001      	movs	r0, #1
 8014a28:	bcf0      	pop	{r4, r5, r6, r7}
 8014a2a:	f000 bda9 	b.w	8015580 <__math_divzero>
 8014a2e:	4939      	ldr	r1, [pc, #228]	@ (8014b14 <log+0x1e4>)
 8014a30:	4288      	cmp	r0, r1
 8014a32:	bf08      	it	eq
 8014a34:	2b00      	cmpeq	r3, #0
 8014a36:	d0e5      	beq.n	8014a04 <log+0xd4>
 8014a38:	0413      	lsls	r3, r2, #16
 8014a3a:	d403      	bmi.n	8014a44 <log+0x114>
 8014a3c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8014a40:	4393      	bics	r3, r2
 8014a42:	d104      	bne.n	8014a4e <log+0x11e>
 8014a44:	ecbd 8b02 	vpop	{d8}
 8014a48:	bcf0      	pop	{r4, r5, r6, r7}
 8014a4a:	f000 bdb1 	b.w	80155b0 <__math_invalid>
 8014a4e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8014af8 <log+0x1c8>
 8014a52:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014a56:	ec53 2b17 	vmov	r2, r3, d7
 8014a5a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8014a5e:	4613      	mov	r3, r2
 8014a60:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8014a64:	492a      	ldr	r1, [pc, #168]	@ (8014b10 <log+0x1e0>)
 8014a66:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8014a6a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8014a6e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8014a72:	0d15      	lsrs	r5, r2, #20
 8014a74:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8014a78:	052d      	lsls	r5, r5, #20
 8014a7a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8014a7e:	1e1e      	subs	r6, r3, #0
 8014a80:	1b47      	subs	r7, r0, r5
 8014a82:	ec47 6b16 	vmov	d6, r6, r7
 8014a86:	1512      	asrs	r2, r2, #20
 8014a88:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014a8c:	ee07 2a90 	vmov	s15, r2
 8014a90:	ee25 2b05 	vmul.f64	d2, d5, d5
 8014a94:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8014a98:	ed91 4b00 	vldr	d4, [r1]
 8014a9c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8014aa0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8014aa4:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014aa8:	ee35 4b07 	vadd.f64	d4, d5, d7
 8014aac:	ee37 0b44 	vsub.f64	d0, d7, d4
 8014ab0:	ed91 7b02 	vldr	d7, [r1, #8]
 8014ab4:	ee30 0b05 	vadd.f64	d0, d0, d5
 8014ab8:	eea7 0b06 	vfma.f64	d0, d7, d6
 8014abc:	ed91 7b04 	vldr	d7, [r1, #16]
 8014ac0:	ed91 6b08 	vldr	d6, [r1, #32]
 8014ac4:	eea7 0b02 	vfma.f64	d0, d7, d2
 8014ac8:	ed91 7b06 	vldr	d7, [r1, #24]
 8014acc:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8014ad0:	eea6 7b05 	vfma.f64	d7, d6, d5
 8014ad4:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8014ad8:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014adc:	eea6 7b02 	vfma.f64	d7, d6, d2
 8014ae0:	eea1 0b07 	vfma.f64	d0, d1, d7
 8014ae4:	ee30 0b04 	vadd.f64	d0, d0, d4
 8014ae8:	e78c      	b.n	8014a04 <log+0xd4>
 8014aea:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8014b00 <log+0x1d0>
 8014aee:	e789      	b.n	8014a04 <log+0xd4>
 8014af0:	00000000 	.word	0x00000000
 8014af4:	41a00000 	.word	0x41a00000
 8014af8:	00000000 	.word	0x00000000
 8014afc:	43300000 	.word	0x43300000
	...
 8014b08:	000308ff 	.word	0x000308ff
 8014b0c:	3ff00000 	.word	0x3ff00000
 8014b10:	08016480 	.word	0x08016480
 8014b14:	7ff00000 	.word	0x7ff00000

08014b18 <checkint>:
 8014b18:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014b1c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8014b20:	429a      	cmp	r2, r3
 8014b22:	b570      	push	{r4, r5, r6, lr}
 8014b24:	dd2a      	ble.n	8014b7c <checkint+0x64>
 8014b26:	f240 4333 	movw	r3, #1075	@ 0x433
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	dc24      	bgt.n	8014b78 <checkint+0x60>
 8014b2e:	1a9b      	subs	r3, r3, r2
 8014b30:	f1a3 0620 	sub.w	r6, r3, #32
 8014b34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014b38:	fa02 f403 	lsl.w	r4, r2, r3
 8014b3c:	fa02 f606 	lsl.w	r6, r2, r6
 8014b40:	f1c3 0520 	rsb	r5, r3, #32
 8014b44:	fa22 f505 	lsr.w	r5, r2, r5
 8014b48:	4334      	orrs	r4, r6
 8014b4a:	432c      	orrs	r4, r5
 8014b4c:	409a      	lsls	r2, r3
 8014b4e:	ea20 0202 	bic.w	r2, r0, r2
 8014b52:	ea21 0404 	bic.w	r4, r1, r4
 8014b56:	4322      	orrs	r2, r4
 8014b58:	f1a3 0420 	sub.w	r4, r3, #32
 8014b5c:	f1c3 0220 	rsb	r2, r3, #32
 8014b60:	d10c      	bne.n	8014b7c <checkint+0x64>
 8014b62:	40d8      	lsrs	r0, r3
 8014b64:	fa01 f302 	lsl.w	r3, r1, r2
 8014b68:	4318      	orrs	r0, r3
 8014b6a:	40e1      	lsrs	r1, r4
 8014b6c:	4308      	orrs	r0, r1
 8014b6e:	f000 0001 	and.w	r0, r0, #1
 8014b72:	f1d0 0002 	rsbs	r0, r0, #2
 8014b76:	bd70      	pop	{r4, r5, r6, pc}
 8014b78:	2002      	movs	r0, #2
 8014b7a:	e7fc      	b.n	8014b76 <checkint+0x5e>
 8014b7c:	2000      	movs	r0, #0
 8014b7e:	e7fa      	b.n	8014b76 <checkint+0x5e>

08014b80 <pow>:
 8014b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b84:	ee10 4a90 	vmov	r4, s1
 8014b88:	ed2d 8b0a 	vpush	{d8-d12}
 8014b8c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8014b90:	ee11 aa90 	vmov	sl, s3
 8014b94:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8014b98:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	ee10 5a10 	vmov	r5, s0
 8014ba2:	ee11 0a10 	vmov	r0, s2
 8014ba6:	b087      	sub	sp, #28
 8014ba8:	46c4      	mov	ip, r8
 8014baa:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8014bae:	d806      	bhi.n	8014bbe <pow+0x3e>
 8014bb0:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8014bb4:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 8014bb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8014bba:	f240 8157 	bls.w	8014e6c <pow+0x2ec>
 8014bbe:	1802      	adds	r2, r0, r0
 8014bc0:	eb4a 010a 	adc.w	r1, sl, sl
 8014bc4:	f06f 0b01 	mvn.w	fp, #1
 8014bc8:	1e57      	subs	r7, r2, #1
 8014bca:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 8014bce:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 8014bd2:	45bb      	cmp	fp, r7
 8014bd4:	eb7e 0303 	sbcs.w	r3, lr, r3
 8014bd8:	d242      	bcs.n	8014c60 <pow+0xe0>
 8014bda:	ea52 0301 	orrs.w	r3, r2, r1
 8014bde:	f04f 0300 	mov.w	r3, #0
 8014be2:	d10c      	bne.n	8014bfe <pow+0x7e>
 8014be4:	196d      	adds	r5, r5, r5
 8014be6:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 8014bea:	4164      	adcs	r4, r4
 8014bec:	42ab      	cmp	r3, r5
 8014bee:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014bf2:	41a3      	sbcs	r3, r4
 8014bf4:	f0c0 808f 	bcc.w	8014d16 <pow+0x196>
 8014bf8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014bfc:	e02b      	b.n	8014c56 <pow+0xd6>
 8014bfe:	4ed4      	ldr	r6, [pc, #848]	@ (8014f50 <pow+0x3d0>)
 8014c00:	42b4      	cmp	r4, r6
 8014c02:	bf08      	it	eq
 8014c04:	429d      	cmpeq	r5, r3
 8014c06:	d109      	bne.n	8014c1c <pow+0x9c>
 8014c08:	1800      	adds	r0, r0, r0
 8014c0a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 8014c0e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8014c12:	4283      	cmp	r3, r0
 8014c14:	4bcf      	ldr	r3, [pc, #828]	@ (8014f54 <pow+0x3d4>)
 8014c16:	eb73 030a 	sbcs.w	r3, r3, sl
 8014c1a:	e7eb      	b.n	8014bf4 <pow+0x74>
 8014c1c:	196d      	adds	r5, r5, r5
 8014c1e:	48ce      	ldr	r0, [pc, #824]	@ (8014f58 <pow+0x3d8>)
 8014c20:	4164      	adcs	r4, r4
 8014c22:	42ab      	cmp	r3, r5
 8014c24:	eb70 0604 	sbcs.w	r6, r0, r4
 8014c28:	d375      	bcc.n	8014d16 <pow+0x196>
 8014c2a:	4281      	cmp	r1, r0
 8014c2c:	bf08      	it	eq
 8014c2e:	429a      	cmpeq	r2, r3
 8014c30:	d171      	bne.n	8014d16 <pow+0x196>
 8014c32:	4aca      	ldr	r2, [pc, #808]	@ (8014f5c <pow+0x3dc>)
 8014c34:	4294      	cmp	r4, r2
 8014c36:	bf08      	it	eq
 8014c38:	429d      	cmpeq	r5, r3
 8014c3a:	d0dd      	beq.n	8014bf8 <pow+0x78>
 8014c3c:	4294      	cmp	r4, r2
 8014c3e:	ea6f 0a0a 	mvn.w	sl, sl
 8014c42:	bf34      	ite	cc
 8014c44:	2400      	movcc	r4, #0
 8014c46:	2401      	movcs	r4, #1
 8014c48:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8014c4c:	4554      	cmp	r4, sl
 8014c4e:	f040 81dc 	bne.w	801500a <pow+0x48a>
 8014c52:	ee21 0b01 	vmul.f64	d0, d1, d1
 8014c56:	b007      	add	sp, #28
 8014c58:	ecbd 8b0a 	vpop	{d8-d12}
 8014c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c60:	196f      	adds	r7, r5, r5
 8014c62:	eb44 0904 	adc.w	r9, r4, r4
 8014c66:	1e7a      	subs	r2, r7, #1
 8014c68:	f169 0300 	sbc.w	r3, r9, #0
 8014c6c:	4593      	cmp	fp, r2
 8014c6e:	eb7e 0303 	sbcs.w	r3, lr, r3
 8014c72:	d225      	bcs.n	8014cc0 <pow+0x140>
 8014c74:	ee20 0b00 	vmul.f64	d0, d0, d0
 8014c78:	2c00      	cmp	r4, #0
 8014c7a:	da13      	bge.n	8014ca4 <pow+0x124>
 8014c7c:	4651      	mov	r1, sl
 8014c7e:	f7ff ff4b 	bl	8014b18 <checkint>
 8014c82:	2801      	cmp	r0, #1
 8014c84:	d10e      	bne.n	8014ca4 <pow+0x124>
 8014c86:	eeb1 0b40 	vneg.f64	d0, d0
 8014c8a:	ea57 0909 	orrs.w	r9, r7, r9
 8014c8e:	d10b      	bne.n	8014ca8 <pow+0x128>
 8014c90:	f1ba 0f00 	cmp.w	sl, #0
 8014c94:	dadf      	bge.n	8014c56 <pow+0xd6>
 8014c96:	b007      	add	sp, #28
 8014c98:	ecbd 8b0a 	vpop	{d8-d12}
 8014c9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca0:	f000 bc6e 	b.w	8015580 <__math_divzero>
 8014ca4:	2000      	movs	r0, #0
 8014ca6:	e7f0      	b.n	8014c8a <pow+0x10a>
 8014ca8:	f1ba 0f00 	cmp.w	sl, #0
 8014cac:	dad3      	bge.n	8014c56 <pow+0xd6>
 8014cae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014cb2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014cb6:	ed8d 7b00 	vstr	d7, [sp]
 8014cba:	ed9d 0b00 	vldr	d0, [sp]
 8014cbe:	e7ca      	b.n	8014c56 <pow+0xd6>
 8014cc0:	2c00      	cmp	r4, #0
 8014cc2:	da2b      	bge.n	8014d1c <pow+0x19c>
 8014cc4:	4651      	mov	r1, sl
 8014cc6:	f7ff ff27 	bl	8014b18 <checkint>
 8014cca:	b930      	cbnz	r0, 8014cda <pow+0x15a>
 8014ccc:	b007      	add	sp, #28
 8014cce:	ecbd 8b0a 	vpop	{d8-d12}
 8014cd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cd6:	f000 bc6b 	b.w	80155b0 <__math_invalid>
 8014cda:	1e41      	subs	r1, r0, #1
 8014cdc:	4248      	negs	r0, r1
 8014cde:	4148      	adcs	r0, r1
 8014ce0:	0480      	lsls	r0, r0, #18
 8014ce2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8014ce6:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8014cea:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8014cee:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 8014cf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8014cf4:	d92d      	bls.n	8014d52 <pow+0x1d2>
 8014cf6:	4b96      	ldr	r3, [pc, #600]	@ (8014f50 <pow+0x3d0>)
 8014cf8:	2000      	movs	r0, #0
 8014cfa:	429c      	cmp	r4, r3
 8014cfc:	bf08      	it	eq
 8014cfe:	4285      	cmpeq	r5, r0
 8014d00:	f43f af7a 	beq.w	8014bf8 <pow+0x78>
 8014d04:	f240 31bd 	movw	r1, #957	@ 0x3bd
 8014d08:	428a      	cmp	r2, r1
 8014d0a:	d80c      	bhi.n	8014d26 <pow+0x1a6>
 8014d0c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014d10:	42a8      	cmp	r0, r5
 8014d12:	41a3      	sbcs	r3, r4
 8014d14:	d204      	bcs.n	8014d20 <pow+0x1a0>
 8014d16:	ee31 0b00 	vadd.f64	d0, d1, d0
 8014d1a:	e79c      	b.n	8014c56 <pow+0xd6>
 8014d1c:	2000      	movs	r0, #0
 8014d1e:	e7e4      	b.n	8014cea <pow+0x16a>
 8014d20:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014d24:	e797      	b.n	8014c56 <pow+0xd6>
 8014d26:	2d01      	cmp	r5, #1
 8014d28:	eb74 0303 	sbcs.w	r3, r4, r3
 8014d2c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014d30:	bf34      	ite	cc
 8014d32:	2301      	movcc	r3, #1
 8014d34:	2300      	movcs	r3, #0
 8014d36:	4296      	cmp	r6, r2
 8014d38:	bf8c      	ite	hi
 8014d3a:	2600      	movhi	r6, #0
 8014d3c:	2601      	movls	r6, #1
 8014d3e:	42b3      	cmp	r3, r6
 8014d40:	f000 809c 	beq.w	8014e7c <pow+0x2fc>
 8014d44:	b007      	add	sp, #28
 8014d46:	ecbd 8b0a 	vpop	{d8-d12}
 8014d4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4e:	f000 bc0f 	b.w	8015570 <__math_oflow>
 8014d52:	f1bc 0f00 	cmp.w	ip, #0
 8014d56:	d10a      	bne.n	8014d6e <pow+0x1ee>
 8014d58:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 8014f40 <pow+0x3c0>
 8014d5c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014d60:	ec53 2b17 	vmov	r2, r3, d7
 8014d64:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8014d68:	4615      	mov	r5, r2
 8014d6a:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 8014d6e:	4a7c      	ldr	r2, [pc, #496]	@ (8014f60 <pow+0x3e0>)
 8014d70:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8014d74:	4422      	add	r2, r4
 8014d76:	1513      	asrs	r3, r2, #20
 8014d78:	f3c2 3146 	ubfx	r1, r2, #13, #7
 8014d7c:	ee03 3a10 	vmov	s6, r3
 8014d80:	0d12      	lsrs	r2, r2, #20
 8014d82:	4b78      	ldr	r3, [pc, #480]	@ (8014f64 <pow+0x3e4>)
 8014d84:	0512      	lsls	r2, r2, #20
 8014d86:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 8014d8a:	1aa7      	subs	r7, r4, r2
 8014d8c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8014d90:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 8014d94:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 8014d98:	1e2e      	subs	r6, r5, #0
 8014d9a:	ec47 6b14 	vmov	d4, r6, r7
 8014d9e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 8014da2:	eea4 6b05 	vfma.f64	d6, d4, d5
 8014da6:	ed93 5b00 	vldr	d5, [r3]
 8014daa:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8014dae:	eea3 2b05 	vfma.f64	d2, d3, d5
 8014db2:	ed93 5b02 	vldr	d5, [r3, #8]
 8014db6:	ee36 4b02 	vadd.f64	d4, d6, d2
 8014dba:	ee32 2b44 	vsub.f64	d2, d2, d4
 8014dbe:	eea3 7b05 	vfma.f64	d7, d3, d5
 8014dc2:	ed93 5b04 	vldr	d5, [r3, #16]
 8014dc6:	ee32 2b06 	vadd.f64	d2, d2, d6
 8014dca:	ee37 7b02 	vadd.f64	d7, d7, d2
 8014dce:	ee26 5b05 	vmul.f64	d5, d6, d5
 8014dd2:	ee26 0b05 	vmul.f64	d0, d6, d5
 8014dd6:	ee34 8b00 	vadd.f64	d8, d4, d0
 8014dda:	eeb0 9b40 	vmov.f64	d9, d0
 8014dde:	ee34 4b48 	vsub.f64	d4, d4, d8
 8014de2:	ee96 9b05 	vfnms.f64	d9, d6, d5
 8014de6:	ee34 ab00 	vadd.f64	d10, d4, d0
 8014dea:	ed93 5b06 	vldr	d5, [r3, #24]
 8014dee:	ee26 bb00 	vmul.f64	d11, d6, d0
 8014df2:	ee37 7b09 	vadd.f64	d7, d7, d9
 8014df6:	ed93 4b08 	vldr	d4, [r3, #32]
 8014dfa:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8014dfe:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 8014e02:	eea6 5b04 	vfma.f64	d5, d6, d4
 8014e06:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 8014e0a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 8014e0e:	eea6 4b03 	vfma.f64	d4, d6, d3
 8014e12:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 8014e16:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8014e1a:	eea0 4b03 	vfma.f64	d4, d0, d3
 8014e1e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8014e22:	eeab 7b05 	vfma.f64	d7, d11, d5
 8014e26:	ee38 4b07 	vadd.f64	d4, d8, d7
 8014e2a:	ee21 6b04 	vmul.f64	d6, d1, d4
 8014e2e:	ee16 3a90 	vmov	r3, s13
 8014e32:	eeb0 5b46 	vmov.f64	d5, d6
 8014e36:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8014e3a:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 8014e3e:	18b2      	adds	r2, r6, r2
 8014e40:	2a3e      	cmp	r2, #62	@ 0x3e
 8014e42:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8014e46:	ee38 8b44 	vsub.f64	d8, d8, d4
 8014e4a:	ee38 8b07 	vadd.f64	d8, d8, d7
 8014e4e:	eea1 5b08 	vfma.f64	d5, d1, d8
 8014e52:	d91b      	bls.n	8014e8c <pow+0x30c>
 8014e54:	2a00      	cmp	r2, #0
 8014e56:	da0b      	bge.n	8014e70 <pow+0x2f0>
 8014e58:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8014e5c:	ee36 0b00 	vadd.f64	d0, d6, d0
 8014e60:	2800      	cmp	r0, #0
 8014e62:	f43f aef8 	beq.w	8014c56 <pow+0xd6>
 8014e66:	eeb1 0b40 	vneg.f64	d0, d0
 8014e6a:	e6f4      	b.n	8014c56 <pow+0xd6>
 8014e6c:	2000      	movs	r0, #0
 8014e6e:	e77e      	b.n	8014d6e <pow+0x1ee>
 8014e70:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 8014e74:	d909      	bls.n	8014e8a <pow+0x30a>
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	f6bf af64 	bge.w	8014d44 <pow+0x1c4>
 8014e7c:	b007      	add	sp, #28
 8014e7e:	ecbd 8b0a 	vpop	{d8-d12}
 8014e82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e86:	f000 bb6b 	b.w	8015560 <__math_uflow>
 8014e8a:	2600      	movs	r6, #0
 8014e8c:	4936      	ldr	r1, [pc, #216]	@ (8014f68 <pow+0x3e8>)
 8014e8e:	ed91 4b02 	vldr	d4, [r1, #8]
 8014e92:	ed91 3b00 	vldr	d3, [r1]
 8014e96:	eeb0 7b44 	vmov.f64	d7, d4
 8014e9a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8014e9e:	ee17 5a10 	vmov	r5, s14
 8014ea2:	ee37 7b44 	vsub.f64	d7, d7, d4
 8014ea6:	ed91 4b04 	vldr	d4, [r1, #16]
 8014eaa:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 8014eae:	eea7 6b04 	vfma.f64	d6, d7, d4
 8014eb2:	ed91 4b06 	vldr	d4, [r1, #24]
 8014eb6:	18dc      	adds	r4, r3, r3
 8014eb8:	f104 030f 	add.w	r3, r4, #15
 8014ebc:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8014ec0:	eea7 6b04 	vfma.f64	d6, d7, d4
 8014ec4:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 8014ec8:	ee35 5b06 	vadd.f64	d5, d5, d6
 8014ecc:	ee25 6b05 	vmul.f64	d6, d5, d5
 8014ed0:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 8014ed4:	ed91 4b08 	vldr	d4, [r1, #32]
 8014ed8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8014edc:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8014ee0:	eea5 4b03 	vfma.f64	d4, d5, d3
 8014ee4:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 8014ee8:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014eec:	ee26 6b06 	vmul.f64	d6, d6, d6
 8014ef0:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 8014ef4:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8014ef8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8014efc:	eea5 4b03 	vfma.f64	d4, d5, d3
 8014f00:	1940      	adds	r0, r0, r5
 8014f02:	2700      	movs	r7, #0
 8014f04:	eb17 020c 	adds.w	r2, r7, ip
 8014f08:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8014f0c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8014f10:	2e00      	cmp	r6, #0
 8014f12:	d175      	bne.n	8015000 <pow+0x480>
 8014f14:	42bd      	cmp	r5, r7
 8014f16:	db29      	blt.n	8014f6c <pow+0x3ec>
 8014f18:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 8014f1c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 8014f20:	4610      	mov	r0, r2
 8014f22:	ec41 0b10 	vmov	d0, r0, r1
 8014f26:	eea7 0b00 	vfma.f64	d0, d7, d0
 8014f2a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8014f48 <pow+0x3c8>
 8014f2e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014f32:	b007      	add	sp, #28
 8014f34:	ecbd 8b0a 	vpop	{d8-d12}
 8014f38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f3c:	f000 bb50 	b.w	80155e0 <__math_check_oflow>
 8014f40:	00000000 	.word	0x00000000
 8014f44:	43300000 	.word	0x43300000
 8014f48:	00000000 	.word	0x00000000
 8014f4c:	7f000000 	.word	0x7f000000
 8014f50:	3ff00000 	.word	0x3ff00000
 8014f54:	fff00000 	.word	0xfff00000
 8014f58:	ffe00000 	.word	0xffe00000
 8014f5c:	7fe00000 	.word	0x7fe00000
 8014f60:	c0196aab 	.word	0xc0196aab
 8014f64:	08016d10 	.word	0x08016d10
 8014f68:	08017ee0 	.word	0x08017ee0
 8014f6c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8014f70:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 8014f74:	4610      	mov	r0, r2
 8014f76:	ec41 0b15 	vmov	d5, r0, r1
 8014f7a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 8014f7e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8014f82:	ee35 7b06 	vadd.f64	d7, d5, d6
 8014f86:	eeb0 4bc7 	vabs.f64	d4, d7
 8014f8a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8014f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f92:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8015010 <pow+0x490>
 8014f96:	d52a      	bpl.n	8014fee <pow+0x46e>
 8014f98:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014f9c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa4:	ee35 5b06 	vadd.f64	d5, d5, d6
 8014fa8:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 8014fac:	bf58      	it	pl
 8014fae:	eeb0 4b43 	vmovpl.f64	d4, d3
 8014fb2:	ee37 3b04 	vadd.f64	d3, d7, d4
 8014fb6:	ee34 6b43 	vsub.f64	d6, d4, d3
 8014fba:	ee36 6b07 	vadd.f64	d6, d6, d7
 8014fbe:	ee36 6b05 	vadd.f64	d6, d6, d5
 8014fc2:	ee36 6b03 	vadd.f64	d6, d6, d3
 8014fc6:	ee36 7b44 	vsub.f64	d7, d6, d4
 8014fca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd2:	d104      	bne.n	8014fde <pow+0x45e>
 8014fd4:	4632      	mov	r2, r6
 8014fd6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8014fda:	ec43 2b17 	vmov	d7, r2, r3
 8014fde:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014fe2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014fe6:	ee26 6b00 	vmul.f64	d6, d6, d0
 8014fea:	ed8d 6b04 	vstr	d6, [sp, #16]
 8014fee:	ee27 0b00 	vmul.f64	d0, d7, d0
 8014ff2:	b007      	add	sp, #28
 8014ff4:	ecbd 8b0a 	vpop	{d8-d12}
 8014ff8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ffc:	f000 bae7 	b.w	80155ce <__math_check_uflow>
 8015000:	ec43 2b10 	vmov	d0, r2, r3
 8015004:	eea7 0b00 	vfma.f64	d0, d7, d0
 8015008:	e625      	b.n	8014c56 <pow+0xd6>
 801500a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 8015018 <pow+0x498>
 801500e:	e622      	b.n	8014c56 <pow+0xd6>
 8015010:	00000000 	.word	0x00000000
 8015014:	00100000 	.word	0x00100000
	...

08015020 <cos>:
 8015020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015022:	eeb0 7b40 	vmov.f64	d7, d0
 8015026:	ee17 3a90 	vmov	r3, s15
 801502a:	4a21      	ldr	r2, [pc, #132]	@ (80150b0 <cos+0x90>)
 801502c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015030:	4293      	cmp	r3, r2
 8015032:	d806      	bhi.n	8015042 <cos+0x22>
 8015034:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80150a8 <cos+0x88>
 8015038:	b005      	add	sp, #20
 801503a:	f85d eb04 	ldr.w	lr, [sp], #4
 801503e:	f000 bd5f 	b.w	8015b00 <__kernel_cos>
 8015042:	4a1c      	ldr	r2, [pc, #112]	@ (80150b4 <cos+0x94>)
 8015044:	4293      	cmp	r3, r2
 8015046:	d904      	bls.n	8015052 <cos+0x32>
 8015048:	ee30 0b40 	vsub.f64	d0, d0, d0
 801504c:	b005      	add	sp, #20
 801504e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015052:	4668      	mov	r0, sp
 8015054:	f000 f8f8 	bl	8015248 <__ieee754_rem_pio2>
 8015058:	f000 0003 	and.w	r0, r0, #3
 801505c:	2801      	cmp	r0, #1
 801505e:	d009      	beq.n	8015074 <cos+0x54>
 8015060:	2802      	cmp	r0, #2
 8015062:	d010      	beq.n	8015086 <cos+0x66>
 8015064:	b9b0      	cbnz	r0, 8015094 <cos+0x74>
 8015066:	ed9d 1b02 	vldr	d1, [sp, #8]
 801506a:	ed9d 0b00 	vldr	d0, [sp]
 801506e:	f000 fd47 	bl	8015b00 <__kernel_cos>
 8015072:	e7eb      	b.n	801504c <cos+0x2c>
 8015074:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015078:	ed9d 0b00 	vldr	d0, [sp]
 801507c:	f000 fda8 	bl	8015bd0 <__kernel_sin>
 8015080:	eeb1 0b40 	vneg.f64	d0, d0
 8015084:	e7e2      	b.n	801504c <cos+0x2c>
 8015086:	ed9d 1b02 	vldr	d1, [sp, #8]
 801508a:	ed9d 0b00 	vldr	d0, [sp]
 801508e:	f000 fd37 	bl	8015b00 <__kernel_cos>
 8015092:	e7f5      	b.n	8015080 <cos+0x60>
 8015094:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015098:	ed9d 0b00 	vldr	d0, [sp]
 801509c:	2001      	movs	r0, #1
 801509e:	f000 fd97 	bl	8015bd0 <__kernel_sin>
 80150a2:	e7d3      	b.n	801504c <cos+0x2c>
 80150a4:	f3af 8000 	nop.w
	...
 80150b0:	3fe921fb 	.word	0x3fe921fb
 80150b4:	7fefffff 	.word	0x7fefffff

080150b8 <sin>:
 80150b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80150ba:	eeb0 7b40 	vmov.f64	d7, d0
 80150be:	ee17 3a90 	vmov	r3, s15
 80150c2:	4a21      	ldr	r2, [pc, #132]	@ (8015148 <sin+0x90>)
 80150c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80150c8:	4293      	cmp	r3, r2
 80150ca:	d807      	bhi.n	80150dc <sin+0x24>
 80150cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8015140 <sin+0x88>
 80150d0:	2000      	movs	r0, #0
 80150d2:	b005      	add	sp, #20
 80150d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80150d8:	f000 bd7a 	b.w	8015bd0 <__kernel_sin>
 80150dc:	4a1b      	ldr	r2, [pc, #108]	@ (801514c <sin+0x94>)
 80150de:	4293      	cmp	r3, r2
 80150e0:	d904      	bls.n	80150ec <sin+0x34>
 80150e2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80150e6:	b005      	add	sp, #20
 80150e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80150ec:	4668      	mov	r0, sp
 80150ee:	f000 f8ab 	bl	8015248 <__ieee754_rem_pio2>
 80150f2:	f000 0003 	and.w	r0, r0, #3
 80150f6:	2801      	cmp	r0, #1
 80150f8:	d00a      	beq.n	8015110 <sin+0x58>
 80150fa:	2802      	cmp	r0, #2
 80150fc:	d00f      	beq.n	801511e <sin+0x66>
 80150fe:	b9c0      	cbnz	r0, 8015132 <sin+0x7a>
 8015100:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015104:	ed9d 0b00 	vldr	d0, [sp]
 8015108:	2001      	movs	r0, #1
 801510a:	f000 fd61 	bl	8015bd0 <__kernel_sin>
 801510e:	e7ea      	b.n	80150e6 <sin+0x2e>
 8015110:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015114:	ed9d 0b00 	vldr	d0, [sp]
 8015118:	f000 fcf2 	bl	8015b00 <__kernel_cos>
 801511c:	e7e3      	b.n	80150e6 <sin+0x2e>
 801511e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015122:	ed9d 0b00 	vldr	d0, [sp]
 8015126:	2001      	movs	r0, #1
 8015128:	f000 fd52 	bl	8015bd0 <__kernel_sin>
 801512c:	eeb1 0b40 	vneg.f64	d0, d0
 8015130:	e7d9      	b.n	80150e6 <sin+0x2e>
 8015132:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015136:	ed9d 0b00 	vldr	d0, [sp]
 801513a:	f000 fce1 	bl	8015b00 <__kernel_cos>
 801513e:	e7f5      	b.n	801512c <sin+0x74>
	...
 8015148:	3fe921fb 	.word	0x3fe921fb
 801514c:	7fefffff 	.word	0x7fefffff

08015150 <cimag>:
 8015150:	eeb0 0b41 	vmov.f64	d0, d1
 8015154:	4770      	bx	lr

08015156 <creal>:
 8015156:	4770      	bx	lr

08015158 <floor>:
 8015158:	ee10 3a90 	vmov	r3, s1
 801515c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8015160:	ee10 2a10 	vmov	r2, s0
 8015164:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8015168:	2913      	cmp	r1, #19
 801516a:	b530      	push	{r4, r5, lr}
 801516c:	4615      	mov	r5, r2
 801516e:	dc33      	bgt.n	80151d8 <floor+0x80>
 8015170:	2900      	cmp	r1, #0
 8015172:	da18      	bge.n	80151a6 <floor+0x4e>
 8015174:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8015238 <floor+0xe0>
 8015178:	ee30 0b07 	vadd.f64	d0, d0, d7
 801517c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015184:	dd0a      	ble.n	801519c <floor+0x44>
 8015186:	2b00      	cmp	r3, #0
 8015188:	da50      	bge.n	801522c <floor+0xd4>
 801518a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801518e:	4313      	orrs	r3, r2
 8015190:	2200      	movs	r2, #0
 8015192:	4293      	cmp	r3, r2
 8015194:	4b2a      	ldr	r3, [pc, #168]	@ (8015240 <floor+0xe8>)
 8015196:	bf08      	it	eq
 8015198:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801519c:	4619      	mov	r1, r3
 801519e:	4610      	mov	r0, r2
 80151a0:	ec41 0b10 	vmov	d0, r0, r1
 80151a4:	e01f      	b.n	80151e6 <floor+0x8e>
 80151a6:	4827      	ldr	r0, [pc, #156]	@ (8015244 <floor+0xec>)
 80151a8:	4108      	asrs	r0, r1
 80151aa:	ea03 0400 	and.w	r4, r3, r0
 80151ae:	4314      	orrs	r4, r2
 80151b0:	d019      	beq.n	80151e6 <floor+0x8e>
 80151b2:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015238 <floor+0xe0>
 80151b6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80151ba:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80151be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151c2:	ddeb      	ble.n	801519c <floor+0x44>
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	bfbe      	ittt	lt
 80151c8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 80151cc:	410a      	asrlt	r2, r1
 80151ce:	189b      	addlt	r3, r3, r2
 80151d0:	ea23 0300 	bic.w	r3, r3, r0
 80151d4:	2200      	movs	r2, #0
 80151d6:	e7e1      	b.n	801519c <floor+0x44>
 80151d8:	2933      	cmp	r1, #51	@ 0x33
 80151da:	dd05      	ble.n	80151e8 <floor+0x90>
 80151dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80151e0:	d101      	bne.n	80151e6 <floor+0x8e>
 80151e2:	ee30 0b00 	vadd.f64	d0, d0, d0
 80151e6:	bd30      	pop	{r4, r5, pc}
 80151e8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 80151ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80151f0:	40e0      	lsrs	r0, r4
 80151f2:	4210      	tst	r0, r2
 80151f4:	d0f7      	beq.n	80151e6 <floor+0x8e>
 80151f6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8015238 <floor+0xe0>
 80151fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80151fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015206:	ddc9      	ble.n	801519c <floor+0x44>
 8015208:	2b00      	cmp	r3, #0
 801520a:	da02      	bge.n	8015212 <floor+0xba>
 801520c:	2914      	cmp	r1, #20
 801520e:	d103      	bne.n	8015218 <floor+0xc0>
 8015210:	3301      	adds	r3, #1
 8015212:	ea22 0200 	bic.w	r2, r2, r0
 8015216:	e7c1      	b.n	801519c <floor+0x44>
 8015218:	2401      	movs	r4, #1
 801521a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 801521e:	fa04 f101 	lsl.w	r1, r4, r1
 8015222:	440a      	add	r2, r1
 8015224:	42aa      	cmp	r2, r5
 8015226:	bf38      	it	cc
 8015228:	191b      	addcc	r3, r3, r4
 801522a:	e7f2      	b.n	8015212 <floor+0xba>
 801522c:	2200      	movs	r2, #0
 801522e:	4613      	mov	r3, r2
 8015230:	e7b4      	b.n	801519c <floor+0x44>
 8015232:	bf00      	nop
 8015234:	f3af 8000 	nop.w
 8015238:	8800759c 	.word	0x8800759c
 801523c:	7e37e43c 	.word	0x7e37e43c
 8015240:	bff00000 	.word	0xbff00000
 8015244:	000fffff 	.word	0x000fffff

08015248 <__ieee754_rem_pio2>:
 8015248:	b570      	push	{r4, r5, r6, lr}
 801524a:	eeb0 7b40 	vmov.f64	d7, d0
 801524e:	ee17 5a90 	vmov	r5, s15
 8015252:	4b99      	ldr	r3, [pc, #612]	@ (80154b8 <__ieee754_rem_pio2+0x270>)
 8015254:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8015258:	429e      	cmp	r6, r3
 801525a:	b088      	sub	sp, #32
 801525c:	4604      	mov	r4, r0
 801525e:	d807      	bhi.n	8015270 <__ieee754_rem_pio2+0x28>
 8015260:	2200      	movs	r2, #0
 8015262:	2300      	movs	r3, #0
 8015264:	ed84 0b00 	vstr	d0, [r4]
 8015268:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801526c:	2000      	movs	r0, #0
 801526e:	e01b      	b.n	80152a8 <__ieee754_rem_pio2+0x60>
 8015270:	4b92      	ldr	r3, [pc, #584]	@ (80154bc <__ieee754_rem_pio2+0x274>)
 8015272:	429e      	cmp	r6, r3
 8015274:	d83b      	bhi.n	80152ee <__ieee754_rem_pio2+0xa6>
 8015276:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801527a:	2d00      	cmp	r5, #0
 801527c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8015478 <__ieee754_rem_pio2+0x230>
 8015280:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8015284:	dd19      	ble.n	80152ba <__ieee754_rem_pio2+0x72>
 8015286:	ee30 7b46 	vsub.f64	d7, d0, d6
 801528a:	429e      	cmp	r6, r3
 801528c:	d00e      	beq.n	80152ac <__ieee754_rem_pio2+0x64>
 801528e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8015480 <__ieee754_rem_pio2+0x238>
 8015292:	ee37 6b45 	vsub.f64	d6, d7, d5
 8015296:	ee37 7b46 	vsub.f64	d7, d7, d6
 801529a:	ed84 6b00 	vstr	d6, [r4]
 801529e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80152a2:	ed84 7b02 	vstr	d7, [r4, #8]
 80152a6:	2001      	movs	r0, #1
 80152a8:	b008      	add	sp, #32
 80152aa:	bd70      	pop	{r4, r5, r6, pc}
 80152ac:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8015488 <__ieee754_rem_pio2+0x240>
 80152b0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8015490 <__ieee754_rem_pio2+0x248>
 80152b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80152b8:	e7eb      	b.n	8015292 <__ieee754_rem_pio2+0x4a>
 80152ba:	429e      	cmp	r6, r3
 80152bc:	ee30 7b06 	vadd.f64	d7, d0, d6
 80152c0:	d00e      	beq.n	80152e0 <__ieee754_rem_pio2+0x98>
 80152c2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8015480 <__ieee754_rem_pio2+0x238>
 80152c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80152ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80152ce:	ed84 6b00 	vstr	d6, [r4]
 80152d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80152d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80152da:	ed84 7b02 	vstr	d7, [r4, #8]
 80152de:	e7e3      	b.n	80152a8 <__ieee754_rem_pio2+0x60>
 80152e0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8015488 <__ieee754_rem_pio2+0x240>
 80152e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8015490 <__ieee754_rem_pio2+0x248>
 80152e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80152ec:	e7eb      	b.n	80152c6 <__ieee754_rem_pio2+0x7e>
 80152ee:	4b74      	ldr	r3, [pc, #464]	@ (80154c0 <__ieee754_rem_pio2+0x278>)
 80152f0:	429e      	cmp	r6, r3
 80152f2:	d870      	bhi.n	80153d6 <__ieee754_rem_pio2+0x18e>
 80152f4:	f000 fcc4 	bl	8015c80 <fabs>
 80152f8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80152fc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015498 <__ieee754_rem_pio2+0x250>
 8015300:	eea0 7b06 	vfma.f64	d7, d0, d6
 8015304:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015308:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801530c:	ee17 0a90 	vmov	r0, s15
 8015310:	eeb1 4b45 	vneg.f64	d4, d5
 8015314:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8015478 <__ieee754_rem_pio2+0x230>
 8015318:	eea5 0b47 	vfms.f64	d0, d5, d7
 801531c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8015480 <__ieee754_rem_pio2+0x238>
 8015320:	281f      	cmp	r0, #31
 8015322:	ee25 7b07 	vmul.f64	d7, d5, d7
 8015326:	ee30 6b47 	vsub.f64	d6, d0, d7
 801532a:	dc05      	bgt.n	8015338 <__ieee754_rem_pio2+0xf0>
 801532c:	4b65      	ldr	r3, [pc, #404]	@ (80154c4 <__ieee754_rem_pio2+0x27c>)
 801532e:	1e42      	subs	r2, r0, #1
 8015330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015334:	42b3      	cmp	r3, r6
 8015336:	d109      	bne.n	801534c <__ieee754_rem_pio2+0x104>
 8015338:	ee16 3a90 	vmov	r3, s13
 801533c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015340:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8015344:	2b10      	cmp	r3, #16
 8015346:	ea4f 5226 	mov.w	r2, r6, asr #20
 801534a:	dc02      	bgt.n	8015352 <__ieee754_rem_pio2+0x10a>
 801534c:	ed84 6b00 	vstr	d6, [r4]
 8015350:	e01a      	b.n	8015388 <__ieee754_rem_pio2+0x140>
 8015352:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8015488 <__ieee754_rem_pio2+0x240>
 8015356:	eeb0 6b40 	vmov.f64	d6, d0
 801535a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801535e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015362:	eea4 7b03 	vfma.f64	d7, d4, d3
 8015366:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8015490 <__ieee754_rem_pio2+0x248>
 801536a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801536e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8015372:	ee13 3a90 	vmov	r3, s7
 8015376:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801537a:	1ad3      	subs	r3, r2, r3
 801537c:	2b31      	cmp	r3, #49	@ 0x31
 801537e:	dc17      	bgt.n	80153b0 <__ieee754_rem_pio2+0x168>
 8015380:	eeb0 0b46 	vmov.f64	d0, d6
 8015384:	ed84 3b00 	vstr	d3, [r4]
 8015388:	ed94 6b00 	vldr	d6, [r4]
 801538c:	2d00      	cmp	r5, #0
 801538e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015392:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015396:	ed84 0b02 	vstr	d0, [r4, #8]
 801539a:	da85      	bge.n	80152a8 <__ieee754_rem_pio2+0x60>
 801539c:	eeb1 6b46 	vneg.f64	d6, d6
 80153a0:	eeb1 0b40 	vneg.f64	d0, d0
 80153a4:	ed84 6b00 	vstr	d6, [r4]
 80153a8:	ed84 0b02 	vstr	d0, [r4, #8]
 80153ac:	4240      	negs	r0, r0
 80153ae:	e77b      	b.n	80152a8 <__ieee754_rem_pio2+0x60>
 80153b0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 80154a0 <__ieee754_rem_pio2+0x258>
 80153b4:	eeb0 0b46 	vmov.f64	d0, d6
 80153b8:	eea4 0b07 	vfma.f64	d0, d4, d7
 80153bc:	ee36 6b40 	vsub.f64	d6, d6, d0
 80153c0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80153c4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 80154a8 <__ieee754_rem_pio2+0x260>
 80153c8:	eeb0 7b46 	vmov.f64	d7, d6
 80153cc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80153d0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80153d4:	e7ba      	b.n	801534c <__ieee754_rem_pio2+0x104>
 80153d6:	4b3c      	ldr	r3, [pc, #240]	@ (80154c8 <__ieee754_rem_pio2+0x280>)
 80153d8:	429e      	cmp	r6, r3
 80153da:	d906      	bls.n	80153ea <__ieee754_rem_pio2+0x1a2>
 80153dc:	ee30 7b40 	vsub.f64	d7, d0, d0
 80153e0:	ed80 7b02 	vstr	d7, [r0, #8]
 80153e4:	ed80 7b00 	vstr	d7, [r0]
 80153e8:	e740      	b.n	801526c <__ieee754_rem_pio2+0x24>
 80153ea:	ee10 3a10 	vmov	r3, s0
 80153ee:	1532      	asrs	r2, r6, #20
 80153f0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80153f4:	4618      	mov	r0, r3
 80153f6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80153fa:	ec41 0b17 	vmov	d7, r0, r1
 80153fe:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015402:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80154b0 <__ieee754_rem_pio2+0x268>
 8015406:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801540a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801540e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015412:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015416:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801541a:	a808      	add	r0, sp, #32
 801541c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015420:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015424:	ed8d 6b04 	vstr	d6, [sp, #16]
 8015428:	ee27 7b05 	vmul.f64	d7, d7, d5
 801542c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015430:	2103      	movs	r1, #3
 8015432:	ed30 7b02 	vldmdb	r0!, {d7}
 8015436:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801543a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801543e:	460b      	mov	r3, r1
 8015440:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8015444:	d0f5      	beq.n	8015432 <__ieee754_rem_pio2+0x1ea>
 8015446:	4921      	ldr	r1, [pc, #132]	@ (80154cc <__ieee754_rem_pio2+0x284>)
 8015448:	9101      	str	r1, [sp, #4]
 801544a:	2102      	movs	r1, #2
 801544c:	9100      	str	r1, [sp, #0]
 801544e:	a802      	add	r0, sp, #8
 8015450:	4621      	mov	r1, r4
 8015452:	f000 f8d9 	bl	8015608 <__kernel_rem_pio2>
 8015456:	2d00      	cmp	r5, #0
 8015458:	f6bf af26 	bge.w	80152a8 <__ieee754_rem_pio2+0x60>
 801545c:	ed94 7b00 	vldr	d7, [r4]
 8015460:	eeb1 7b47 	vneg.f64	d7, d7
 8015464:	ed84 7b00 	vstr	d7, [r4]
 8015468:	ed94 7b02 	vldr	d7, [r4, #8]
 801546c:	eeb1 7b47 	vneg.f64	d7, d7
 8015470:	ed84 7b02 	vstr	d7, [r4, #8]
 8015474:	e79a      	b.n	80153ac <__ieee754_rem_pio2+0x164>
 8015476:	bf00      	nop
 8015478:	54400000 	.word	0x54400000
 801547c:	3ff921fb 	.word	0x3ff921fb
 8015480:	1a626331 	.word	0x1a626331
 8015484:	3dd0b461 	.word	0x3dd0b461
 8015488:	1a600000 	.word	0x1a600000
 801548c:	3dd0b461 	.word	0x3dd0b461
 8015490:	2e037073 	.word	0x2e037073
 8015494:	3ba3198a 	.word	0x3ba3198a
 8015498:	6dc9c883 	.word	0x6dc9c883
 801549c:	3fe45f30 	.word	0x3fe45f30
 80154a0:	2e000000 	.word	0x2e000000
 80154a4:	3ba3198a 	.word	0x3ba3198a
 80154a8:	252049c1 	.word	0x252049c1
 80154ac:	397b839a 	.word	0x397b839a
 80154b0:	00000000 	.word	0x00000000
 80154b4:	41700000 	.word	0x41700000
 80154b8:	3fe921fb 	.word	0x3fe921fb
 80154bc:	4002d97b 	.word	0x4002d97b
 80154c0:	413921fb 	.word	0x413921fb
 80154c4:	08017d58 	.word	0x08017d58
 80154c8:	7fefffff 	.word	0x7fefffff
 80154cc:	08017dd8 	.word	0x08017dd8

080154d0 <hypot>:
 80154d0:	b508      	push	{r3, lr}
 80154d2:	ed2d 8b06 	vpush	{d8-d10}
 80154d6:	eeb0 ab40 	vmov.f64	d10, d0
 80154da:	eeb0 9b41 	vmov.f64	d9, d1
 80154de:	f000 fc63 	bl	8015da8 <__ieee754_hypot>
 80154e2:	eeb0 8b40 	vmov.f64	d8, d0
 80154e6:	f000 fbd3 	bl	8015c90 <finite>
 80154ea:	b978      	cbnz	r0, 801550c <hypot+0x3c>
 80154ec:	eeb0 0b4a 	vmov.f64	d0, d10
 80154f0:	f000 fbce 	bl	8015c90 <finite>
 80154f4:	b150      	cbz	r0, 801550c <hypot+0x3c>
 80154f6:	eeb0 0b49 	vmov.f64	d0, d9
 80154fa:	f000 fbc9 	bl	8015c90 <finite>
 80154fe:	b128      	cbz	r0, 801550c <hypot+0x3c>
 8015500:	f7fb fe6e 	bl	80111e0 <__errno>
 8015504:	ed9f 8b04 	vldr	d8, [pc, #16]	@ 8015518 <hypot+0x48>
 8015508:	2322      	movs	r3, #34	@ 0x22
 801550a:	6003      	str	r3, [r0, #0]
 801550c:	eeb0 0b48 	vmov.f64	d0, d8
 8015510:	ecbd 8b06 	vpop	{d8-d10}
 8015514:	bd08      	pop	{r3, pc}
 8015516:	bf00      	nop
 8015518:	00000000 	.word	0x00000000
 801551c:	7ff00000 	.word	0x7ff00000

08015520 <with_errno>:
 8015520:	b510      	push	{r4, lr}
 8015522:	ed2d 8b02 	vpush	{d8}
 8015526:	eeb0 8b40 	vmov.f64	d8, d0
 801552a:	4604      	mov	r4, r0
 801552c:	f7fb fe58 	bl	80111e0 <__errno>
 8015530:	eeb0 0b48 	vmov.f64	d0, d8
 8015534:	ecbd 8b02 	vpop	{d8}
 8015538:	6004      	str	r4, [r0, #0]
 801553a:	bd10      	pop	{r4, pc}

0801553c <xflow>:
 801553c:	b082      	sub	sp, #8
 801553e:	b158      	cbz	r0, 8015558 <xflow+0x1c>
 8015540:	eeb1 7b40 	vneg.f64	d7, d0
 8015544:	ed8d 7b00 	vstr	d7, [sp]
 8015548:	ed9d 7b00 	vldr	d7, [sp]
 801554c:	2022      	movs	r0, #34	@ 0x22
 801554e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015552:	b002      	add	sp, #8
 8015554:	f7ff bfe4 	b.w	8015520 <with_errno>
 8015558:	eeb0 7b40 	vmov.f64	d7, d0
 801555c:	e7f2      	b.n	8015544 <xflow+0x8>
	...

08015560 <__math_uflow>:
 8015560:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015568 <__math_uflow+0x8>
 8015564:	f7ff bfea 	b.w	801553c <xflow>
 8015568:	00000000 	.word	0x00000000
 801556c:	10000000 	.word	0x10000000

08015570 <__math_oflow>:
 8015570:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015578 <__math_oflow+0x8>
 8015574:	f7ff bfe2 	b.w	801553c <xflow>
 8015578:	00000000 	.word	0x00000000
 801557c:	70000000 	.word	0x70000000

08015580 <__math_divzero>:
 8015580:	b082      	sub	sp, #8
 8015582:	2800      	cmp	r0, #0
 8015584:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8015588:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801558c:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8015590:	ed8d 7b00 	vstr	d7, [sp]
 8015594:	ed9d 0b00 	vldr	d0, [sp]
 8015598:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 80155a8 <__math_divzero+0x28>
 801559c:	2022      	movs	r0, #34	@ 0x22
 801559e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80155a2:	b002      	add	sp, #8
 80155a4:	f7ff bfbc 	b.w	8015520 <with_errno>
	...

080155b0 <__math_invalid>:
 80155b0:	eeb0 7b40 	vmov.f64	d7, d0
 80155b4:	eeb4 7b47 	vcmp.f64	d7, d7
 80155b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155bc:	ee30 6b40 	vsub.f64	d6, d0, d0
 80155c0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 80155c4:	d602      	bvs.n	80155cc <__math_invalid+0x1c>
 80155c6:	2021      	movs	r0, #33	@ 0x21
 80155c8:	f7ff bfaa 	b.w	8015520 <with_errno>
 80155cc:	4770      	bx	lr

080155ce <__math_check_uflow>:
 80155ce:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80155d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155d6:	d102      	bne.n	80155de <__math_check_uflow+0x10>
 80155d8:	2022      	movs	r0, #34	@ 0x22
 80155da:	f7ff bfa1 	b.w	8015520 <with_errno>
 80155de:	4770      	bx	lr

080155e0 <__math_check_oflow>:
 80155e0:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 8015600 <__math_check_oflow+0x20>
 80155e4:	eeb0 7bc0 	vabs.f64	d7, d0
 80155e8:	eeb4 7b46 	vcmp.f64	d7, d6
 80155ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155f0:	dd02      	ble.n	80155f8 <__math_check_oflow+0x18>
 80155f2:	2022      	movs	r0, #34	@ 0x22
 80155f4:	f7ff bf94 	b.w	8015520 <with_errno>
 80155f8:	4770      	bx	lr
 80155fa:	bf00      	nop
 80155fc:	f3af 8000 	nop.w
 8015600:	ffffffff 	.word	0xffffffff
 8015604:	7fefffff 	.word	0x7fefffff

08015608 <__kernel_rem_pio2>:
 8015608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801560c:	ed2d 8b06 	vpush	{d8-d10}
 8015610:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8015614:	469b      	mov	fp, r3
 8015616:	9001      	str	r0, [sp, #4]
 8015618:	4bbb      	ldr	r3, [pc, #748]	@ (8015908 <__kernel_rem_pio2+0x300>)
 801561a:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 801561c:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8015620:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8015624:	f112 0f14 	cmn.w	r2, #20
 8015628:	bfa8      	it	ge
 801562a:	1ed3      	subge	r3, r2, #3
 801562c:	f10b 3aff 	add.w	sl, fp, #4294967295	@ 0xffffffff
 8015630:	bfb8      	it	lt
 8015632:	2300      	movlt	r3, #0
 8015634:	f06f 0517 	mvn.w	r5, #23
 8015638:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80158f0 <__kernel_rem_pio2+0x2e8>
 801563c:	bfa4      	itt	ge
 801563e:	2018      	movge	r0, #24
 8015640:	fb93 f3f0 	sdivge	r3, r3, r0
 8015644:	fb03 5505 	mla	r5, r3, r5, r5
 8015648:	eba3 040a 	sub.w	r4, r3, sl
 801564c:	4415      	add	r5, r2
 801564e:	460f      	mov	r7, r1
 8015650:	eb09 060a 	add.w	r6, r9, sl
 8015654:	a81a      	add	r0, sp, #104	@ 0x68
 8015656:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 801565a:	2200      	movs	r2, #0
 801565c:	42b2      	cmp	r2, r6
 801565e:	dd0e      	ble.n	801567e <__kernel_rem_pio2+0x76>
 8015660:	aa1a      	add	r2, sp, #104	@ 0x68
 8015662:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8015666:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 801566a:	2600      	movs	r6, #0
 801566c:	454e      	cmp	r6, r9
 801566e:	dc25      	bgt.n	80156bc <__kernel_rem_pio2+0xb4>
 8015670:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80158f0 <__kernel_rem_pio2+0x2e8>
 8015674:	f8dd c004 	ldr.w	ip, [sp, #4]
 8015678:	4614      	mov	r4, r2
 801567a:	2000      	movs	r0, #0
 801567c:	e015      	b.n	80156aa <__kernel_rem_pio2+0xa2>
 801567e:	42d4      	cmn	r4, r2
 8015680:	d409      	bmi.n	8015696 <__kernel_rem_pio2+0x8e>
 8015682:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8015686:	ee07 1a90 	vmov	s15, r1
 801568a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801568e:	eca0 7b02 	vstmia	r0!, {d7}
 8015692:	3201      	adds	r2, #1
 8015694:	e7e2      	b.n	801565c <__kernel_rem_pio2+0x54>
 8015696:	eeb0 7b46 	vmov.f64	d7, d6
 801569a:	e7f8      	b.n	801568e <__kernel_rem_pio2+0x86>
 801569c:	ecbc 5b02 	vldmia	ip!, {d5}
 80156a0:	ed94 6b00 	vldr	d6, [r4]
 80156a4:	3001      	adds	r0, #1
 80156a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80156aa:	4550      	cmp	r0, sl
 80156ac:	f1a4 0408 	sub.w	r4, r4, #8
 80156b0:	ddf4      	ble.n	801569c <__kernel_rem_pio2+0x94>
 80156b2:	ecae 7b02 	vstmia	lr!, {d7}
 80156b6:	3601      	adds	r6, #1
 80156b8:	3208      	adds	r2, #8
 80156ba:	e7d7      	b.n	801566c <__kernel_rem_pio2+0x64>
 80156bc:	aa06      	add	r2, sp, #24
 80156be:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80158f8 <__kernel_rem_pio2+0x2f0>
 80156c2:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 8015900 <__kernel_rem_pio2+0x2f8>
 80156c6:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80156ca:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80156ce:	9203      	str	r2, [sp, #12]
 80156d0:	9302      	str	r3, [sp, #8]
 80156d2:	464c      	mov	r4, r9
 80156d4:	00e3      	lsls	r3, r4, #3
 80156d6:	9304      	str	r3, [sp, #16]
 80156d8:	ab92      	add	r3, sp, #584	@ 0x248
 80156da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80156de:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80156e2:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80156e4:	ab06      	add	r3, sp, #24
 80156e6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80156ea:	461e      	mov	r6, r3
 80156ec:	4620      	mov	r0, r4
 80156ee:	2800      	cmp	r0, #0
 80156f0:	f1a2 0208 	sub.w	r2, r2, #8
 80156f4:	dc4a      	bgt.n	801578c <__kernel_rem_pio2+0x184>
 80156f6:	4628      	mov	r0, r5
 80156f8:	9305      	str	r3, [sp, #20]
 80156fa:	f000 fad5 	bl	8015ca8 <scalbn>
 80156fe:	eeb0 8b40 	vmov.f64	d8, d0
 8015702:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8015706:	ee28 0b00 	vmul.f64	d0, d8, d0
 801570a:	f7ff fd25 	bl	8015158 <floor>
 801570e:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8015712:	eea0 8b47 	vfms.f64	d8, d0, d7
 8015716:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801571a:	2d00      	cmp	r5, #0
 801571c:	ee17 8a90 	vmov	r8, s15
 8015720:	9b05      	ldr	r3, [sp, #20]
 8015722:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015726:	ee38 8b47 	vsub.f64	d8, d8, d7
 801572a:	dd41      	ble.n	80157b0 <__kernel_rem_pio2+0x1a8>
 801572c:	1e60      	subs	r0, r4, #1
 801572e:	aa06      	add	r2, sp, #24
 8015730:	f1c5 0c18 	rsb	ip, r5, #24
 8015734:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8015738:	fa46 f20c 	asr.w	r2, r6, ip
 801573c:	4490      	add	r8, r2
 801573e:	fa02 f20c 	lsl.w	r2, r2, ip
 8015742:	1ab6      	subs	r6, r6, r2
 8015744:	aa06      	add	r2, sp, #24
 8015746:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 801574a:	f1c5 0217 	rsb	r2, r5, #23
 801574e:	4116      	asrs	r6, r2
 8015750:	2e00      	cmp	r6, #0
 8015752:	dd3c      	ble.n	80157ce <__kernel_rem_pio2+0x1c6>
 8015754:	f04f 0c00 	mov.w	ip, #0
 8015758:	f108 0801 	add.w	r8, r8, #1
 801575c:	4660      	mov	r0, ip
 801575e:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8015762:	4564      	cmp	r4, ip
 8015764:	dc66      	bgt.n	8015834 <__kernel_rem_pio2+0x22c>
 8015766:	2d00      	cmp	r5, #0
 8015768:	dd03      	ble.n	8015772 <__kernel_rem_pio2+0x16a>
 801576a:	2d01      	cmp	r5, #1
 801576c:	d072      	beq.n	8015854 <__kernel_rem_pio2+0x24c>
 801576e:	2d02      	cmp	r5, #2
 8015770:	d07a      	beq.n	8015868 <__kernel_rem_pio2+0x260>
 8015772:	2e02      	cmp	r6, #2
 8015774:	d12b      	bne.n	80157ce <__kernel_rem_pio2+0x1c6>
 8015776:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801577a:	ee30 8b48 	vsub.f64	d8, d0, d8
 801577e:	b330      	cbz	r0, 80157ce <__kernel_rem_pio2+0x1c6>
 8015780:	4628      	mov	r0, r5
 8015782:	f000 fa91 	bl	8015ca8 <scalbn>
 8015786:	ee38 8b40 	vsub.f64	d8, d8, d0
 801578a:	e020      	b.n	80157ce <__kernel_rem_pio2+0x1c6>
 801578c:	ee20 7b09 	vmul.f64	d7, d0, d9
 8015790:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8015794:	3801      	subs	r0, #1
 8015796:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801579a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801579e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80157a2:	eca6 0a01 	vstmia	r6!, {s0}
 80157a6:	ed92 0b00 	vldr	d0, [r2]
 80157aa:	ee37 0b00 	vadd.f64	d0, d7, d0
 80157ae:	e79e      	b.n	80156ee <__kernel_rem_pio2+0xe6>
 80157b0:	d105      	bne.n	80157be <__kernel_rem_pio2+0x1b6>
 80157b2:	1e62      	subs	r2, r4, #1
 80157b4:	a906      	add	r1, sp, #24
 80157b6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80157ba:	15f6      	asrs	r6, r6, #23
 80157bc:	e7c8      	b.n	8015750 <__kernel_rem_pio2+0x148>
 80157be:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80157c2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80157c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ca:	da31      	bge.n	8015830 <__kernel_rem_pio2+0x228>
 80157cc:	2600      	movs	r6, #0
 80157ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80157d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157d6:	f040 809b 	bne.w	8015910 <__kernel_rem_pio2+0x308>
 80157da:	1e62      	subs	r2, r4, #1
 80157dc:	2000      	movs	r0, #0
 80157de:	454a      	cmp	r2, r9
 80157e0:	da49      	bge.n	8015876 <__kernel_rem_pio2+0x26e>
 80157e2:	2800      	cmp	r0, #0
 80157e4:	d062      	beq.n	80158ac <__kernel_rem_pio2+0x2a4>
 80157e6:	3c01      	subs	r4, #1
 80157e8:	ab06      	add	r3, sp, #24
 80157ea:	3d18      	subs	r5, #24
 80157ec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d0f8      	beq.n	80157e6 <__kernel_rem_pio2+0x1de>
 80157f4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80157f8:	4628      	mov	r0, r5
 80157fa:	f000 fa55 	bl	8015ca8 <scalbn>
 80157fe:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80158f8 <__kernel_rem_pio2+0x2f0>
 8015802:	1c62      	adds	r2, r4, #1
 8015804:	a96a      	add	r1, sp, #424	@ 0x1a8
 8015806:	00d3      	lsls	r3, r2, #3
 8015808:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801580c:	4622      	mov	r2, r4
 801580e:	2a00      	cmp	r2, #0
 8015810:	f280 80a8 	bge.w	8015964 <__kernel_rem_pio2+0x35c>
 8015814:	4622      	mov	r2, r4
 8015816:	2a00      	cmp	r2, #0
 8015818:	f2c0 80c6 	blt.w	80159a8 <__kernel_rem_pio2+0x3a0>
 801581c:	a96a      	add	r1, sp, #424	@ 0x1a8
 801581e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8015822:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80158f0 <__kernel_rem_pio2+0x2e8>
 8015826:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 801590c <__kernel_rem_pio2+0x304>
 801582a:	2000      	movs	r0, #0
 801582c:	1aa1      	subs	r1, r4, r2
 801582e:	e0b0      	b.n	8015992 <__kernel_rem_pio2+0x38a>
 8015830:	2602      	movs	r6, #2
 8015832:	e78f      	b.n	8015754 <__kernel_rem_pio2+0x14c>
 8015834:	f853 2b04 	ldr.w	r2, [r3], #4
 8015838:	b948      	cbnz	r0, 801584e <__kernel_rem_pio2+0x246>
 801583a:	b122      	cbz	r2, 8015846 <__kernel_rem_pio2+0x23e>
 801583c:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8015840:	f843 2c04 	str.w	r2, [r3, #-4]
 8015844:	2201      	movs	r2, #1
 8015846:	f10c 0c01 	add.w	ip, ip, #1
 801584a:	4610      	mov	r0, r2
 801584c:	e789      	b.n	8015762 <__kernel_rem_pio2+0x15a>
 801584e:	ebae 0202 	sub.w	r2, lr, r2
 8015852:	e7f5      	b.n	8015840 <__kernel_rem_pio2+0x238>
 8015854:	1e62      	subs	r2, r4, #1
 8015856:	ab06      	add	r3, sp, #24
 8015858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801585c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015860:	a906      	add	r1, sp, #24
 8015862:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015866:	e784      	b.n	8015772 <__kernel_rem_pio2+0x16a>
 8015868:	1e62      	subs	r2, r4, #1
 801586a:	ab06      	add	r3, sp, #24
 801586c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015870:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015874:	e7f4      	b.n	8015860 <__kernel_rem_pio2+0x258>
 8015876:	ab06      	add	r3, sp, #24
 8015878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801587c:	3a01      	subs	r2, #1
 801587e:	4318      	orrs	r0, r3
 8015880:	e7ad      	b.n	80157de <__kernel_rem_pio2+0x1d6>
 8015882:	3301      	adds	r3, #1
 8015884:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8015888:	2800      	cmp	r0, #0
 801588a:	d0fa      	beq.n	8015882 <__kernel_rem_pio2+0x27a>
 801588c:	9a04      	ldr	r2, [sp, #16]
 801588e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8015892:	446a      	add	r2, sp
 8015894:	eb04 000b 	add.w	r0, r4, fp
 8015898:	a91a      	add	r1, sp, #104	@ 0x68
 801589a:	1c66      	adds	r6, r4, #1
 801589c:	3a98      	subs	r2, #152	@ 0x98
 801589e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80158a2:	4423      	add	r3, r4
 80158a4:	42b3      	cmp	r3, r6
 80158a6:	da04      	bge.n	80158b2 <__kernel_rem_pio2+0x2aa>
 80158a8:	461c      	mov	r4, r3
 80158aa:	e713      	b.n	80156d4 <__kernel_rem_pio2+0xcc>
 80158ac:	9a03      	ldr	r2, [sp, #12]
 80158ae:	2301      	movs	r3, #1
 80158b0:	e7e8      	b.n	8015884 <__kernel_rem_pio2+0x27c>
 80158b2:	9902      	ldr	r1, [sp, #8]
 80158b4:	f8dd c004 	ldr.w	ip, [sp, #4]
 80158b8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80158bc:	9104      	str	r1, [sp, #16]
 80158be:	ee07 1a90 	vmov	s15, r1
 80158c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80158c6:	2400      	movs	r4, #0
 80158c8:	eca0 7b02 	vstmia	r0!, {d7}
 80158cc:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80158f0 <__kernel_rem_pio2+0x2e8>
 80158d0:	4686      	mov	lr, r0
 80158d2:	4554      	cmp	r4, sl
 80158d4:	dd03      	ble.n	80158de <__kernel_rem_pio2+0x2d6>
 80158d6:	eca2 7b02 	vstmia	r2!, {d7}
 80158da:	3601      	adds	r6, #1
 80158dc:	e7e2      	b.n	80158a4 <__kernel_rem_pio2+0x29c>
 80158de:	ecbc 5b02 	vldmia	ip!, {d5}
 80158e2:	ed3e 6b02 	vldmdb	lr!, {d6}
 80158e6:	3401      	adds	r4, #1
 80158e8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80158ec:	e7f1      	b.n	80158d2 <__kernel_rem_pio2+0x2ca>
 80158ee:	bf00      	nop
	...
 80158fc:	3e700000 	.word	0x3e700000
 8015900:	00000000 	.word	0x00000000
 8015904:	41700000 	.word	0x41700000
 8015908:	08018790 	.word	0x08018790
 801590c:	08018750 	.word	0x08018750
 8015910:	4268      	negs	r0, r5
 8015912:	eeb0 0b48 	vmov.f64	d0, d8
 8015916:	f000 f9c7 	bl	8015ca8 <scalbn>
 801591a:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8015ae8 <__kernel_rem_pio2+0x4e0>
 801591e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8015922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015926:	db17      	blt.n	8015958 <__kernel_rem_pio2+0x350>
 8015928:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 8015af0 <__kernel_rem_pio2+0x4e8>
 801592c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8015930:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8015934:	aa06      	add	r2, sp, #24
 8015936:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801593a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801593e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015942:	3518      	adds	r5, #24
 8015944:	ee10 3a10 	vmov	r3, s0
 8015948:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801594c:	ee17 3a10 	vmov	r3, s14
 8015950:	3401      	adds	r4, #1
 8015952:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8015956:	e74d      	b.n	80157f4 <__kernel_rem_pio2+0x1ec>
 8015958:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801595c:	aa06      	add	r2, sp, #24
 801595e:	ee10 3a10 	vmov	r3, s0
 8015962:	e7f6      	b.n	8015952 <__kernel_rem_pio2+0x34a>
 8015964:	a806      	add	r0, sp, #24
 8015966:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801596a:	9001      	str	r0, [sp, #4]
 801596c:	ee07 0a90 	vmov	s15, r0
 8015970:	3a01      	subs	r2, #1
 8015972:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015976:	ee27 7b00 	vmul.f64	d7, d7, d0
 801597a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801597e:	ed21 7b02 	vstmdb	r1!, {d7}
 8015982:	e744      	b.n	801580e <__kernel_rem_pio2+0x206>
 8015984:	ecbc 5b02 	vldmia	ip!, {d5}
 8015988:	ecb5 6b02 	vldmia	r5!, {d6}
 801598c:	3001      	adds	r0, #1
 801598e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015992:	4548      	cmp	r0, r9
 8015994:	dc01      	bgt.n	801599a <__kernel_rem_pio2+0x392>
 8015996:	4281      	cmp	r1, r0
 8015998:	daf4      	bge.n	8015984 <__kernel_rem_pio2+0x37c>
 801599a:	a842      	add	r0, sp, #264	@ 0x108
 801599c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80159a0:	ed81 7b00 	vstr	d7, [r1]
 80159a4:	3a01      	subs	r2, #1
 80159a6:	e736      	b.n	8015816 <__kernel_rem_pio2+0x20e>
 80159a8:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80159aa:	2a02      	cmp	r2, #2
 80159ac:	dc0a      	bgt.n	80159c4 <__kernel_rem_pio2+0x3bc>
 80159ae:	2a00      	cmp	r2, #0
 80159b0:	dc2d      	bgt.n	8015a0e <__kernel_rem_pio2+0x406>
 80159b2:	d046      	beq.n	8015a42 <__kernel_rem_pio2+0x43a>
 80159b4:	f008 0007 	and.w	r0, r8, #7
 80159b8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80159bc:	ecbd 8b06 	vpop	{d8-d10}
 80159c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159c4:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80159c6:	2a03      	cmp	r2, #3
 80159c8:	d1f4      	bne.n	80159b4 <__kernel_rem_pio2+0x3ac>
 80159ca:	a942      	add	r1, sp, #264	@ 0x108
 80159cc:	f1a3 0208 	sub.w	r2, r3, #8
 80159d0:	440a      	add	r2, r1
 80159d2:	4611      	mov	r1, r2
 80159d4:	4620      	mov	r0, r4
 80159d6:	2800      	cmp	r0, #0
 80159d8:	f1a1 0108 	sub.w	r1, r1, #8
 80159dc:	dc52      	bgt.n	8015a84 <__kernel_rem_pio2+0x47c>
 80159de:	4621      	mov	r1, r4
 80159e0:	2901      	cmp	r1, #1
 80159e2:	f1a2 0208 	sub.w	r2, r2, #8
 80159e6:	dc5d      	bgt.n	8015aa4 <__kernel_rem_pio2+0x49c>
 80159e8:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8015af8 <__kernel_rem_pio2+0x4f0>
 80159ec:	aa42      	add	r2, sp, #264	@ 0x108
 80159ee:	4413      	add	r3, r2
 80159f0:	2c01      	cmp	r4, #1
 80159f2:	dc67      	bgt.n	8015ac4 <__kernel_rem_pio2+0x4bc>
 80159f4:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80159f8:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80159fc:	2e00      	cmp	r6, #0
 80159fe:	d167      	bne.n	8015ad0 <__kernel_rem_pio2+0x4c8>
 8015a00:	ed87 5b00 	vstr	d5, [r7]
 8015a04:	ed87 6b02 	vstr	d6, [r7, #8]
 8015a08:	ed87 7b04 	vstr	d7, [r7, #16]
 8015a0c:	e7d2      	b.n	80159b4 <__kernel_rem_pio2+0x3ac>
 8015a0e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8015af8 <__kernel_rem_pio2+0x4f0>
 8015a12:	aa42      	add	r2, sp, #264	@ 0x108
 8015a14:	4413      	add	r3, r2
 8015a16:	4622      	mov	r2, r4
 8015a18:	2a00      	cmp	r2, #0
 8015a1a:	da24      	bge.n	8015a66 <__kernel_rem_pio2+0x45e>
 8015a1c:	b34e      	cbz	r6, 8015a72 <__kernel_rem_pio2+0x46a>
 8015a1e:	eeb1 7b46 	vneg.f64	d7, d6
 8015a22:	ed87 7b00 	vstr	d7, [r7]
 8015a26:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8015a2a:	aa44      	add	r2, sp, #272	@ 0x110
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015a32:	429c      	cmp	r4, r3
 8015a34:	da20      	bge.n	8015a78 <__kernel_rem_pio2+0x470>
 8015a36:	b10e      	cbz	r6, 8015a3c <__kernel_rem_pio2+0x434>
 8015a38:	eeb1 7b47 	vneg.f64	d7, d7
 8015a3c:	ed87 7b02 	vstr	d7, [r7, #8]
 8015a40:	e7b8      	b.n	80159b4 <__kernel_rem_pio2+0x3ac>
 8015a42:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8015af8 <__kernel_rem_pio2+0x4f0>
 8015a46:	aa42      	add	r2, sp, #264	@ 0x108
 8015a48:	4413      	add	r3, r2
 8015a4a:	2c00      	cmp	r4, #0
 8015a4c:	da05      	bge.n	8015a5a <__kernel_rem_pio2+0x452>
 8015a4e:	b10e      	cbz	r6, 8015a54 <__kernel_rem_pio2+0x44c>
 8015a50:	eeb1 7b47 	vneg.f64	d7, d7
 8015a54:	ed87 7b00 	vstr	d7, [r7]
 8015a58:	e7ac      	b.n	80159b4 <__kernel_rem_pio2+0x3ac>
 8015a5a:	ed33 6b02 	vldmdb	r3!, {d6}
 8015a5e:	3c01      	subs	r4, #1
 8015a60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015a64:	e7f1      	b.n	8015a4a <__kernel_rem_pio2+0x442>
 8015a66:	ed33 7b02 	vldmdb	r3!, {d7}
 8015a6a:	3a01      	subs	r2, #1
 8015a6c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8015a70:	e7d2      	b.n	8015a18 <__kernel_rem_pio2+0x410>
 8015a72:	eeb0 7b46 	vmov.f64	d7, d6
 8015a76:	e7d4      	b.n	8015a22 <__kernel_rem_pio2+0x41a>
 8015a78:	ecb2 6b02 	vldmia	r2!, {d6}
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015a82:	e7d6      	b.n	8015a32 <__kernel_rem_pio2+0x42a>
 8015a84:	ed91 7b00 	vldr	d7, [r1]
 8015a88:	ed91 5b02 	vldr	d5, [r1, #8]
 8015a8c:	3801      	subs	r0, #1
 8015a8e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015a92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015a96:	ed81 6b00 	vstr	d6, [r1]
 8015a9a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015a9e:	ed81 7b02 	vstr	d7, [r1, #8]
 8015aa2:	e798      	b.n	80159d6 <__kernel_rem_pio2+0x3ce>
 8015aa4:	ed92 7b00 	vldr	d7, [r2]
 8015aa8:	ed92 5b02 	vldr	d5, [r2, #8]
 8015aac:	3901      	subs	r1, #1
 8015aae:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015ab2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015ab6:	ed82 6b00 	vstr	d6, [r2]
 8015aba:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015abe:	ed82 7b02 	vstr	d7, [r2, #8]
 8015ac2:	e78d      	b.n	80159e0 <__kernel_rem_pio2+0x3d8>
 8015ac4:	ed33 6b02 	vldmdb	r3!, {d6}
 8015ac8:	3c01      	subs	r4, #1
 8015aca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015ace:	e78f      	b.n	80159f0 <__kernel_rem_pio2+0x3e8>
 8015ad0:	eeb1 5b45 	vneg.f64	d5, d5
 8015ad4:	eeb1 6b46 	vneg.f64	d6, d6
 8015ad8:	ed87 5b00 	vstr	d5, [r7]
 8015adc:	eeb1 7b47 	vneg.f64	d7, d7
 8015ae0:	ed87 6b02 	vstr	d6, [r7, #8]
 8015ae4:	e790      	b.n	8015a08 <__kernel_rem_pio2+0x400>
 8015ae6:	bf00      	nop
 8015ae8:	00000000 	.word	0x00000000
 8015aec:	41700000 	.word	0x41700000
 8015af0:	00000000 	.word	0x00000000
 8015af4:	3e700000 	.word	0x3e700000
	...

08015b00 <__kernel_cos>:
 8015b00:	eeb0 5b40 	vmov.f64	d5, d0
 8015b04:	ee15 1a90 	vmov	r1, s11
 8015b08:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8015b0c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8015b10:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8015b14:	d204      	bcs.n	8015b20 <__kernel_cos+0x20>
 8015b16:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8015b1a:	ee17 3a90 	vmov	r3, s15
 8015b1e:	b343      	cbz	r3, 8015b72 <__kernel_cos+0x72>
 8015b20:	ee25 6b05 	vmul.f64	d6, d5, d5
 8015b24:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8015b28:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8015b98 <__kernel_cos+0x98>
 8015b2c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015ba0 <__kernel_cos+0xa0>
 8015b30:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015b34:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8015ba8 <__kernel_cos+0xa8>
 8015b38:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015b3c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015bb0 <__kernel_cos+0xb0>
 8015b40:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015b44:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8015bb8 <__kernel_cos+0xb8>
 8015b48:	4b1f      	ldr	r3, [pc, #124]	@ (8015bc8 <__kernel_cos+0xc8>)
 8015b4a:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015b4e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015bc0 <__kernel_cos+0xc0>
 8015b52:	4299      	cmp	r1, r3
 8015b54:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015b58:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8015b5c:	ee24 4b06 	vmul.f64	d4, d4, d6
 8015b60:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015b64:	eea6 1b04 	vfma.f64	d1, d6, d4
 8015b68:	d804      	bhi.n	8015b74 <__kernel_cos+0x74>
 8015b6a:	ee37 7b41 	vsub.f64	d7, d7, d1
 8015b6e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015b72:	4770      	bx	lr
 8015b74:	4b15      	ldr	r3, [pc, #84]	@ (8015bcc <__kernel_cos+0xcc>)
 8015b76:	4299      	cmp	r1, r3
 8015b78:	d809      	bhi.n	8015b8e <__kernel_cos+0x8e>
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8015b80:	ec43 2b16 	vmov	d6, r2, r3
 8015b84:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015b88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015b8c:	e7ed      	b.n	8015b6a <__kernel_cos+0x6a>
 8015b8e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8015b92:	e7f7      	b.n	8015b84 <__kernel_cos+0x84>
 8015b94:	f3af 8000 	nop.w
 8015b98:	be8838d4 	.word	0xbe8838d4
 8015b9c:	bda8fae9 	.word	0xbda8fae9
 8015ba0:	bdb4b1c4 	.word	0xbdb4b1c4
 8015ba4:	3e21ee9e 	.word	0x3e21ee9e
 8015ba8:	809c52ad 	.word	0x809c52ad
 8015bac:	be927e4f 	.word	0xbe927e4f
 8015bb0:	19cb1590 	.word	0x19cb1590
 8015bb4:	3efa01a0 	.word	0x3efa01a0
 8015bb8:	16c15177 	.word	0x16c15177
 8015bbc:	bf56c16c 	.word	0xbf56c16c
 8015bc0:	5555554c 	.word	0x5555554c
 8015bc4:	3fa55555 	.word	0x3fa55555
 8015bc8:	3fd33332 	.word	0x3fd33332
 8015bcc:	3fe90000 	.word	0x3fe90000

08015bd0 <__kernel_sin>:
 8015bd0:	ee10 3a90 	vmov	r3, s1
 8015bd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015bd8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8015bdc:	d204      	bcs.n	8015be8 <__kernel_sin+0x18>
 8015bde:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8015be2:	ee17 3a90 	vmov	r3, s15
 8015be6:	b35b      	cbz	r3, 8015c40 <__kernel_sin+0x70>
 8015be8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8015bec:	ee20 5b06 	vmul.f64	d5, d0, d6
 8015bf0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8015c48 <__kernel_sin+0x78>
 8015bf4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015c50 <__kernel_sin+0x80>
 8015bf8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015bfc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015c58 <__kernel_sin+0x88>
 8015c00:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015c04:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015c60 <__kernel_sin+0x90>
 8015c08:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015c0c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015c68 <__kernel_sin+0x98>
 8015c10:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015c14:	b930      	cbnz	r0, 8015c24 <__kernel_sin+0x54>
 8015c16:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015c70 <__kernel_sin+0xa0>
 8015c1a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015c1e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8015c22:	4770      	bx	lr
 8015c24:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8015c28:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8015c2c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8015c30:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8015c34:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8015c78 <__kernel_sin+0xa8>
 8015c38:	eea5 1b07 	vfma.f64	d1, d5, d7
 8015c3c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8015c40:	4770      	bx	lr
 8015c42:	bf00      	nop
 8015c44:	f3af 8000 	nop.w
 8015c48:	5acfd57c 	.word	0x5acfd57c
 8015c4c:	3de5d93a 	.word	0x3de5d93a
 8015c50:	8a2b9ceb 	.word	0x8a2b9ceb
 8015c54:	be5ae5e6 	.word	0xbe5ae5e6
 8015c58:	57b1fe7d 	.word	0x57b1fe7d
 8015c5c:	3ec71de3 	.word	0x3ec71de3
 8015c60:	19c161d5 	.word	0x19c161d5
 8015c64:	bf2a01a0 	.word	0xbf2a01a0
 8015c68:	1110f8a6 	.word	0x1110f8a6
 8015c6c:	3f811111 	.word	0x3f811111
 8015c70:	55555549 	.word	0x55555549
 8015c74:	bfc55555 	.word	0xbfc55555
 8015c78:	55555549 	.word	0x55555549
 8015c7c:	3fc55555 	.word	0x3fc55555

08015c80 <fabs>:
 8015c80:	ec51 0b10 	vmov	r0, r1, d0
 8015c84:	4602      	mov	r2, r0
 8015c86:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015c8a:	ec43 2b10 	vmov	d0, r2, r3
 8015c8e:	4770      	bx	lr

08015c90 <finite>:
 8015c90:	b082      	sub	sp, #8
 8015c92:	ed8d 0b00 	vstr	d0, [sp]
 8015c96:	9801      	ldr	r0, [sp, #4]
 8015c98:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015c9c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015ca0:	0fc0      	lsrs	r0, r0, #31
 8015ca2:	b002      	add	sp, #8
 8015ca4:	4770      	bx	lr
	...

08015ca8 <scalbn>:
 8015ca8:	ee10 1a90 	vmov	r1, s1
 8015cac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015cb0:	b98b      	cbnz	r3, 8015cd6 <scalbn+0x2e>
 8015cb2:	ee10 3a10 	vmov	r3, s0
 8015cb6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8015cba:	4319      	orrs	r1, r3
 8015cbc:	d00a      	beq.n	8015cd4 <scalbn+0x2c>
 8015cbe:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8015d70 <scalbn+0xc8>
 8015cc2:	4b37      	ldr	r3, [pc, #220]	@ (8015da0 <scalbn+0xf8>)
 8015cc4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015cc8:	4298      	cmp	r0, r3
 8015cca:	da0b      	bge.n	8015ce4 <scalbn+0x3c>
 8015ccc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8015d78 <scalbn+0xd0>
 8015cd0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015cd4:	4770      	bx	lr
 8015cd6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8015cda:	4293      	cmp	r3, r2
 8015cdc:	d107      	bne.n	8015cee <scalbn+0x46>
 8015cde:	ee30 0b00 	vadd.f64	d0, d0, d0
 8015ce2:	4770      	bx	lr
 8015ce4:	ee10 1a90 	vmov	r1, s1
 8015ce8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015cec:	3b36      	subs	r3, #54	@ 0x36
 8015cee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8015cf2:	4290      	cmp	r0, r2
 8015cf4:	dd0d      	ble.n	8015d12 <scalbn+0x6a>
 8015cf6:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8015d80 <scalbn+0xd8>
 8015cfa:	ee10 3a90 	vmov	r3, s1
 8015cfe:	eeb0 6b47 	vmov.f64	d6, d7
 8015d02:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8015d88 <scalbn+0xe0>
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	fe27 7b05 	vselge.f64	d7, d7, d5
 8015d0c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8015d10:	4770      	bx	lr
 8015d12:	4418      	add	r0, r3
 8015d14:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8015d18:	4298      	cmp	r0, r3
 8015d1a:	dcec      	bgt.n	8015cf6 <scalbn+0x4e>
 8015d1c:	2800      	cmp	r0, #0
 8015d1e:	dd0a      	ble.n	8015d36 <scalbn+0x8e>
 8015d20:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8015d24:	ec53 2b10 	vmov	r2, r3, d0
 8015d28:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8015d2c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8015d30:	ec43 2b10 	vmov	d0, r2, r3
 8015d34:	4770      	bx	lr
 8015d36:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 8015d3a:	da09      	bge.n	8015d50 <scalbn+0xa8>
 8015d3c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8015d78 <scalbn+0xd0>
 8015d40:	ee10 3a90 	vmov	r3, s1
 8015d44:	eeb0 6b47 	vmov.f64	d6, d7
 8015d48:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8015d90 <scalbn+0xe8>
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	e7db      	b.n	8015d08 <scalbn+0x60>
 8015d50:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8015d54:	ec53 2b10 	vmov	r2, r3, d0
 8015d58:	3036      	adds	r0, #54	@ 0x36
 8015d5a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8015d5e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8015d62:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8015d98 <scalbn+0xf0>
 8015d66:	ec43 2b10 	vmov	d0, r2, r3
 8015d6a:	e7b1      	b.n	8015cd0 <scalbn+0x28>
 8015d6c:	f3af 8000 	nop.w
 8015d70:	00000000 	.word	0x00000000
 8015d74:	43500000 	.word	0x43500000
 8015d78:	c2f8f359 	.word	0xc2f8f359
 8015d7c:	01a56e1f 	.word	0x01a56e1f
 8015d80:	8800759c 	.word	0x8800759c
 8015d84:	7e37e43c 	.word	0x7e37e43c
 8015d88:	8800759c 	.word	0x8800759c
 8015d8c:	fe37e43c 	.word	0xfe37e43c
 8015d90:	c2f8f359 	.word	0xc2f8f359
 8015d94:	81a56e1f 	.word	0x81a56e1f
 8015d98:	00000000 	.word	0x00000000
 8015d9c:	3c900000 	.word	0x3c900000
 8015da0:	ffff3cb0 	.word	0xffff3cb0
 8015da4:	00000000 	.word	0x00000000

08015da8 <__ieee754_hypot>:
 8015da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015daa:	ec51 0b10 	vmov	r0, r1, d0
 8015dae:	ec53 2b11 	vmov	r2, r3, d1
 8015db2:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8015db6:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8015dba:	42a5      	cmp	r5, r4
 8015dbc:	da05      	bge.n	8015dca <__ieee754_hypot+0x22>
 8015dbe:	462e      	mov	r6, r5
 8015dc0:	4625      	mov	r5, r4
 8015dc2:	4634      	mov	r4, r6
 8015dc4:	4606      	mov	r6, r0
 8015dc6:	4610      	mov	r0, r2
 8015dc8:	4632      	mov	r2, r6
 8015dca:	4623      	mov	r3, r4
 8015dcc:	ec43 2b14 	vmov	d4, r2, r3
 8015dd0:	1b2b      	subs	r3, r5, r4
 8015dd2:	4629      	mov	r1, r5
 8015dd4:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8015dd8:	ec41 0b10 	vmov	d0, r0, r1
 8015ddc:	dd02      	ble.n	8015de4 <__ieee754_hypot+0x3c>
 8015dde:	ee30 0b04 	vadd.f64	d0, d0, d4
 8015de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015de4:	4b46      	ldr	r3, [pc, #280]	@ (8015f00 <__ieee754_hypot+0x158>)
 8015de6:	429d      	cmp	r5, r3
 8015de8:	dd58      	ble.n	8015e9c <__ieee754_hypot+0xf4>
 8015dea:	4b46      	ldr	r3, [pc, #280]	@ (8015f04 <__ieee754_hypot+0x15c>)
 8015dec:	429d      	cmp	r5, r3
 8015dee:	dd0f      	ble.n	8015e10 <__ieee754_hypot+0x68>
 8015df0:	ee14 3a10 	vmov	r3, s8
 8015df4:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8015df8:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015dfc:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8015e00:	4305      	orrs	r5, r0
 8015e02:	bf18      	it	ne
 8015e04:	ee30 0b04 	vaddne.f64	d0, d0, d4
 8015e08:	431c      	orrs	r4, r3
 8015e0a:	fe04 0b00 	vseleq.f64	d0, d4, d0
 8015e0e:	e7e8      	b.n	8015de2 <__ieee754_hypot+0x3a>
 8015e10:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 8015e14:	4602      	mov	r2, r0
 8015e16:	462b      	mov	r3, r5
 8015e18:	ec43 2b10 	vmov	d0, r2, r3
 8015e1c:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 8015e20:	ec53 2b14 	vmov	r2, r3, d4
 8015e24:	4623      	mov	r3, r4
 8015e26:	ec43 2b14 	vmov	d4, r2, r3
 8015e2a:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8015e2e:	4b36      	ldr	r3, [pc, #216]	@ (8015f08 <__ieee754_hypot+0x160>)
 8015e30:	429c      	cmp	r4, r3
 8015e32:	dc0e      	bgt.n	8015e52 <__ieee754_hypot+0xaa>
 8015e34:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8015e38:	da32      	bge.n	8015ea0 <__ieee754_hypot+0xf8>
 8015e3a:	ee14 3a10 	vmov	r3, s8
 8015e3e:	4323      	orrs	r3, r4
 8015e40:	d0cf      	beq.n	8015de2 <__ieee754_hypot+0x3a>
 8015e42:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8015ef8 <__ieee754_hypot+0x150>
 8015e46:	f2a6 36fe 	subw	r6, r6, #1022	@ 0x3fe
 8015e4a:	ee24 4b07 	vmul.f64	d4, d4, d7
 8015e4e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015e52:	ee30 5b44 	vsub.f64	d5, d0, d4
 8015e56:	eeb4 4bc5 	vcmpe.f64	d4, d5
 8015e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e5e:	f04f 0200 	mov.w	r2, #0
 8015e62:	d52e      	bpl.n	8015ec2 <__ieee754_hypot+0x11a>
 8015e64:	462b      	mov	r3, r5
 8015e66:	ec43 2b17 	vmov	d7, r2, r3
 8015e6a:	ee30 6b07 	vadd.f64	d6, d0, d7
 8015e6e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015e72:	ee26 0b00 	vmul.f64	d0, d6, d0
 8015e76:	eea4 0b04 	vfma.f64	d0, d4, d4
 8015e7a:	eea7 0b07 	vfma.f64	d0, d7, d7
 8015e7e:	f000 f845 	bl	8015f0c <__ieee754_sqrt>
 8015e82:	2e00      	cmp	r6, #0
 8015e84:	d0ad      	beq.n	8015de2 <__ieee754_hypot+0x3a>
 8015e86:	0533      	lsls	r3, r6, #20
 8015e88:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8015e8c:	2000      	movs	r0, #0
 8015e8e:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8015e92:	ec41 0b17 	vmov	d7, r0, r1
 8015e96:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015e9a:	e7a2      	b.n	8015de2 <__ieee754_hypot+0x3a>
 8015e9c:	2600      	movs	r6, #0
 8015e9e:	e7c6      	b.n	8015e2e <__ieee754_hypot+0x86>
 8015ea0:	ec53 2b10 	vmov	r2, r3, d0
 8015ea4:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 8015ea8:	462b      	mov	r3, r5
 8015eaa:	ec43 2b10 	vmov	d0, r2, r3
 8015eae:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 8015eb2:	ec53 2b14 	vmov	r2, r3, d4
 8015eb6:	4623      	mov	r3, r4
 8015eb8:	ec43 2b14 	vmov	d4, r2, r3
 8015ebc:	f5a6 7616 	sub.w	r6, r6, #600	@ 0x258
 8015ec0:	e7c7      	b.n	8015e52 <__ieee754_hypot+0xaa>
 8015ec2:	4623      	mov	r3, r4
 8015ec4:	ec43 2b16 	vmov	d6, r2, r3
 8015ec8:	eeb0 1b00 	vmov.f64	d1, #0	@ 0x40000000  2.0
 8015ecc:	2200      	movs	r2, #0
 8015ece:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 8015ed2:	ec43 2b17 	vmov	d7, r2, r3
 8015ed6:	ee34 3b46 	vsub.f64	d3, d4, d6
 8015eda:	eeb0 2b47 	vmov.f64	d2, d7
 8015ede:	ee90 2b01 	vfnms.f64	d2, d0, d1
 8015ee2:	ee24 0b02 	vmul.f64	d0, d4, d2
 8015ee6:	eea3 0b07 	vfma.f64	d0, d3, d7
 8015eea:	eea5 0b05 	vfma.f64	d0, d5, d5
 8015eee:	eea6 0b07 	vfma.f64	d0, d6, d7
 8015ef2:	e7c4      	b.n	8015e7e <__ieee754_hypot+0xd6>
 8015ef4:	f3af 8000 	nop.w
 8015ef8:	00000000 	.word	0x00000000
 8015efc:	7fd00000 	.word	0x7fd00000
 8015f00:	5f300000 	.word	0x5f300000
 8015f04:	7fefffff 	.word	0x7fefffff
 8015f08:	20afffff 	.word	0x20afffff

08015f0c <__ieee754_sqrt>:
 8015f0c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8015f10:	4770      	bx	lr
	...

08015f14 <_init>:
 8015f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f16:	bf00      	nop
 8015f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f1a:	bc08      	pop	{r3}
 8015f1c:	469e      	mov	lr, r3
 8015f1e:	4770      	bx	lr

08015f20 <_fini>:
 8015f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f22:	bf00      	nop
 8015f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015f26:	bc08      	pop	{r3}
 8015f28:	469e      	mov	lr, r3
 8015f2a:	4770      	bx	lr
